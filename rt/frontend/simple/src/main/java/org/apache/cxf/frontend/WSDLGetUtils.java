begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|SchemaImport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|SchemaReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap12
operator|.
name|SOAP12Address
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|OASISCatalogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|OASISCatalogManagerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|URIParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|UrlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|ResourceManagerWSDLLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|ServiceWSDLBuilder
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|WSDLGetUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_REWRITE_ADDRESS
init|=
literal|"autoRewriteSoapAddress"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_REWRITE_ADDRESS_ALL
init|=
literal|"autoRewriteSoapAddressForAllServices"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PUBLISHED_ENDPOINT_URL
init|=
literal|"publishedEndpointUrl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_CREATE_IMPORTS
init|=
literal|"org.apache.cxf.wsdl.create.imports"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WSDLS_KEY
init|=
name|WSDLGetUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".WSDLs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMAS_KEY
init|=
name|WSDLGetUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".Schemas"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDLGetInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|WSDLGetUtils
parameter_list|()
block|{     }
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getWSDLIds
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|ctxUri
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"wsdl"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|getDocument
argument_list|(
name|message
argument_list|,
name|base
argument_list|,
name|params
argument_list|,
name|ctxUri
argument_list|,
name|endpointInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|WSDLS_KEY
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|mp
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSchemaLocations
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|ctxUri
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"wsdl"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|getDocument
argument_list|(
name|message
argument_list|,
name|base
argument_list|,
name|params
argument_list|,
name|ctxUri
argument_list|,
name|endpointInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|mp
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SCHEMAS_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schemas
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|ent
range|:
name|mp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"xsd"
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|getDocument
argument_list|(
name|message
argument_list|,
name|base
argument_list|,
name|params
argument_list|,
name|ctxUri
argument_list|,
name|endpointInfo
argument_list|)
decl_stmt|;
name|schemas
operator|.
name|put
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespace"
argument_list|)
argument_list|,
name|buildUrl
argument_list|(
name|base
argument_list|,
name|ctxUri
argument_list|,
literal|"xsd="
operator|+
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|schemas
return|;
block|}
specifier|public
name|Document
name|getDocument
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|base
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|ctxUri
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Bus
name|bus
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|base
operator|=
name|getPublishedEndpointURL
argument_list|(
name|message
argument_list|,
name|base
argument_list|,
name|endpointInfo
argument_list|)
expr_stmt|;
comment|//making sure this are existing map objects for the endpoint.
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
init|=
name|getWSDLKeyDefinition
argument_list|(
name|endpointInfo
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
init|=
name|getSchemaKeySchemaReference
argument_list|(
name|endpointInfo
argument_list|)
decl_stmt|;
name|updateWSDLKeyDefinition
argument_list|(
name|bus
argument_list|,
name|mp
argument_list|,
name|message
argument_list|,
name|smp
argument_list|,
name|base
argument_list|,
name|endpointInfo
argument_list|)
expr_stmt|;
comment|//
if|if
condition|(
name|params
operator|.
name|containsKey
argument_list|(
literal|"wsdl"
argument_list|)
condition|)
block|{
name|String
name|wsdl
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"wsdl"
argument_list|)
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
name|doc
operator|=
name|writeWSDLDocument
argument_list|(
name|message
argument_list|,
name|mp
argument_list|,
name|smp
argument_list|,
name|wsdl
argument_list|,
name|base
argument_list|,
name|endpointInfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
literal|"xsd"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|xsd
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"xsd"
argument_list|)
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
name|doc
operator|=
name|readXSDDocument
argument_list|(
name|bus
argument_list|,
name|xsd
argument_list|,
name|smp
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|updateDoc
argument_list|(
name|doc
argument_list|,
name|base
argument_list|,
name|mp
argument_list|,
name|smp
argument_list|,
name|message
argument_list|,
name|xsd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|WSDLQueryException
name|wex
parameter_list|)
block|{
throw|throw
name|wex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|wex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|wex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|wex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|base
argument_list|)
argument_list|,
name|wex
argument_list|)
throw|;
block|}
return|return
name|doc
return|;
block|}
specifier|protected
name|String
name|mapUri
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|String
name|base
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
parameter_list|,
name|String
name|loc
parameter_list|,
name|String
name|xsd
parameter_list|,
name|String
name|resolvedXsd
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|String
name|key
init|=
name|loc
decl_stmt|;
try|try
block|{
name|boolean
name|absoluteLocUri
init|=
operator|new
name|URI
argument_list|(
name|loc
argument_list|)
operator|.
name|isAbsolute
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|absoluteLocUri
operator|&&
name|xsd
operator|!=
literal|null
condition|)
block|{
comment|// XSD request
comment|// resolve requested location with relative import path
name|key
operator|=
operator|new
name|URI
argument_list|(
name|xsd
argument_list|)
operator|.
name|resolve
argument_list|(
name|loc
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|SchemaReference
name|ref
init|=
name|smp
operator|.
name|get
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|key
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
comment|// if the result is not known, check if we can resolve it into something known
name|String
name|resolved
init|=
name|resolveWithCatalogs
argument_list|(
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
argument_list|,
name|key
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolved
operator|!=
literal|null
operator|&&
name|smp
operator|.
name|containsKey
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|resolved
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
condition|)
block|{
comment|// if it is resolvable, we can use it
return|return
name|base
operator|+
literal|"?xsd="
operator|+
name|key
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|absoluteLocUri
operator|&&
name|xsd
operator|==
literal|null
condition|)
block|{
comment|// WSDL request
name|key
operator|=
operator|new
name|URI
argument_list|(
literal|"."
argument_list|)
operator|.
name|resolve
argument_list|(
name|loc
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
name|SchemaReference
name|ref
init|=
name|smp
operator|.
name|get
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|key
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
operator|&&
name|resolvedXsd
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|key2
init|=
operator|new
name|URI
argument_list|(
name|resolvedXsd
argument_list|)
operator|.
name|resolve
argument_list|(
name|loc
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|SchemaReference
name|ref2
init|=
name|smp
operator|.
name|get
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|key2
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref2
operator|==
literal|null
condition|)
block|{
comment|// if the result is not known, check if we can resolve it into something known
name|String
name|resolved
init|=
name|resolveWithCatalogs
argument_list|(
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
argument_list|,
name|key2
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolved
operator|!=
literal|null
operator|&&
name|smp
operator|.
name|containsKey
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|resolved
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
condition|)
block|{
comment|// if it is resolvable, we can use it
name|ref
operator|=
name|smp
operator|.
name|get
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|resolved
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ref
operator|=
name|smp
operator|.
name|get
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|key2
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|//ignore, ref can remain null
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
comment|// we are able to map this, but for some reason the default key passed in cannot
comment|// be used for a direct lookup, we need to create a unique import key
name|int
name|count
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|smp
operator|.
name|containsKey
argument_list|(
literal|"_import"
operator|+
name|count
operator|+
literal|".xsd"
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|key
operator|=
literal|"_import"
operator|+
name|count
operator|+
literal|".xsd"
expr_stmt|;
name|smp
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
return|return
name|base
operator|+
literal|"?xsd="
operator|+
name|key
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Deprecated
specifier|protected
name|void
name|updateDoc
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|base
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
parameter_list|,
name|Message
name|message
parameter_list|,
name|String
name|xsd
parameter_list|,
name|String
name|wsdl
parameter_list|)
block|{
name|updateDoc
argument_list|(
name|doc
argument_list|,
name|base
argument_list|,
name|mp
argument_list|,
name|smp
argument_list|,
name|message
argument_list|,
name|xsd
operator|!=
literal|null
condition|?
name|xsd
else|:
name|wsdl
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updateDoc
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|base
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
parameter_list|,
name|Message
name|message
parameter_list|,
name|String
name|xsdWsdlPar
parameter_list|)
block|{
name|Bus
name|bus
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|elementList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"import"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|sl
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
name|sl
operator|=
name|mapUri
argument_list|(
name|bus
argument_list|,
name|base
argument_list|,
name|smp
argument_list|,
name|sl
argument_list|,
name|xsdWsdlPar
argument_list|,
name|doc
operator|.
name|getDocumentURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
name|el
operator|.
name|setAttribute
argument_list|(
literal|"schemaLocation"
argument_list|,
name|sl
argument_list|)
expr_stmt|;
block|}
block|}
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"include"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|sl
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
name|sl
operator|=
name|mapUri
argument_list|(
name|bus
argument_list|,
name|base
argument_list|,
name|smp
argument_list|,
name|sl
argument_list|,
name|xsdWsdlPar
argument_list|,
name|doc
operator|.
name|getDocumentURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
name|el
operator|.
name|setAttribute
argument_list|(
literal|"schemaLocation"
argument_list|,
name|sl
argument_list|)
expr_stmt|;
block|}
block|}
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"redefine"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|sl
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
name|sl
operator|=
name|mapUri
argument_list|(
name|bus
argument_list|,
name|base
argument_list|,
name|smp
argument_list|,
name|sl
argument_list|,
name|xsdWsdlPar
argument_list|,
name|doc
operator|.
name|getDocumentURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
name|el
operator|.
name|setAttribute
argument_list|(
literal|"schemaLocation"
argument_list|,
name|sl
argument_list|)
expr_stmt|;
block|}
block|}
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|,
literal|"import"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|sl
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
try|try
block|{
name|sl
operator|=
name|getLocationURI
argument_list|(
name|sl
argument_list|,
name|xsdWsdlPar
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
name|mp
operator|.
name|containsKey
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|sl
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
condition|)
block|{
name|el
operator|.
name|setAttribute
argument_list|(
literal|"location"
argument_list|,
name|base
operator|+
literal|"?wsdl="
operator|+
name|sl
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|base
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|boolean
name|rewriteAllSoapAddress
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|AUTO_REWRITE_ADDRESS_ALL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|rewriteAllSoapAddress
condition|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|portList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|,
literal|"port"
argument_list|)
decl_stmt|;
name|String
name|basePath
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"http.base.path"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|portList
control|)
block|{
name|rewriteAddressProtocolHostPort
argument_list|(
name|base
argument_list|,
name|el
argument_list|,
name|basePath
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
argument_list|)
expr_stmt|;
name|rewriteAddressProtocolHostPort
argument_list|(
name|base
argument_list|,
name|el
argument_list|,
name|basePath
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap12/"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|AUTO_REWRITE_ADDRESS
argument_list|,
literal|true
argument_list|)
operator|||
name|rewriteAllSoapAddress
condition|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|serviceList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|,
literal|"service"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|serviceEl
range|:
name|serviceList
control|)
block|{
name|String
name|serviceName
init|=
name|serviceEl
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceName
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|,
literal|"port"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|name
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|rewriteAddress
argument_list|(
name|base
argument_list|,
name|el
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
argument_list|)
expr_stmt|;
name|rewriteAddress
argument_list|(
name|base
argument_list|,
name|el
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap12/"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
try|try
block|{
name|doc
operator|.
name|setXmlStandalone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//likely not DOM level 3
block|}
block|}
specifier|protected
name|void
name|rewriteAddress
parameter_list|(
name|String
name|base
parameter_list|,
name|Element
name|el
parameter_list|,
name|String
name|soapNS
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|sadEls
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|el
argument_list|,
name|soapNS
argument_list|,
literal|"address"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|soapAddress
range|:
name|sadEls
control|)
block|{
name|soapAddress
operator|.
name|setAttribute
argument_list|(
literal|"location"
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|rewriteAddressProtocolHostPort
parameter_list|(
name|String
name|base
parameter_list|,
name|Element
name|el
parameter_list|,
name|String
name|httpBasePathProp
parameter_list|,
name|String
name|soapNS
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|sadEls
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|el
argument_list|,
name|soapNS
argument_list|,
literal|"address"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|soapAddress
range|:
name|sadEls
control|)
block|{
name|String
name|location
init|=
name|soapAddress
operator|.
name|getAttribute
argument_list|(
literal|"location"
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
block|{
name|URI
name|locUri
init|=
operator|new
name|URI
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|locUri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|URL
name|baseUrl
init|=
operator|new
name|URL
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|baseUrl
operator|.
name|getProtocol
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
operator|.
name|append
argument_list|(
name|baseUrl
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|baseUrl
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|locUri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|soapAddress
operator|.
name|setAttribute
argument_list|(
literal|"location"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|httpBasePathProp
operator|!=
literal|null
condition|)
block|{
name|soapAddress
operator|.
name|setAttribute
argument_list|(
literal|"location"
argument_list|,
name|httpBasePathProp
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|protected
name|String
name|resolveWithCatalogs
parameter_list|(
name|OASISCatalogManager
name|catalogs
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|base
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|OASISCatalogManagerHelper
argument_list|()
operator|.
name|resolve
argument_list|(
name|catalogs
argument_list|,
name|start
argument_list|,
name|base
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|updateDefinition
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|Definition
name|def
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|done
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|doneSchemas
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|docBase
parameter_list|,
name|String
name|parentResolvedLocation
parameter_list|)
block|{
name|OASISCatalogManager
name|catalogs
init|=
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|imports
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|def
operator|.
name|getImports
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|?
argument_list|>
name|lst
range|:
name|imports
control|)
block|{
name|List
argument_list|<
name|Import
argument_list|>
name|impLst
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|lst
argument_list|)
decl_stmt|;
for|for
control|(
name|Import
name|imp
range|:
name|impLst
control|)
block|{
name|String
name|start
init|=
name|imp
operator|.
name|getLocationURI
argument_list|()
decl_stmt|;
name|String
name|decodedStart
decl_stmt|;
comment|// Always use the URL decoded version to ensure that we have a
comment|// canonical representation of the import URL for lookup.
try|try
block|{
name|decodedStart
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|start
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|start
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|resolvedSchemaLocation
init|=
name|resolveWithCatalogs
argument_list|(
name|catalogs
argument_list|,
name|start
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedSchemaLocation
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|//check to see if it's already in a URL format.  If so, leave it.
operator|new
name|URL
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
try|try
block|{
name|start
operator|=
name|getLocationURI
argument_list|(
name|start
argument_list|,
name|docBase
argument_list|)
expr_stmt|;
name|decodedStart
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|start
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
name|done
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|imp
operator|.
name|getDefinition
argument_list|()
operator|!=
literal|null
operator|&&
name|imp
operator|.
name|getDefinition
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|done
operator|.
name|put
argument_list|(
name|imp
operator|.
name|getDefinition
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateDefinition
argument_list|(
name|bus
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|,
name|done
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|start
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|done
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|done
operator|.
name|put
argument_list|(
name|resolvedSchemaLocation
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|imp
operator|.
name|getDefinition
argument_list|()
operator|!=
literal|null
operator|&&
name|imp
operator|.
name|getDefinition
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|done
operator|.
name|put
argument_list|(
name|imp
operator|.
name|getDefinition
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateDefinition
argument_list|(
name|bus
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|,
name|done
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|start
argument_list|,
name|resolvedSchemaLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/* This doesn't actually work.   Setting setSchemaLocationURI on the import         * for some reason doesn't actually result in the new URI being written         * */
name|Types
name|types
init|=
name|def
operator|.
name|getTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|el
range|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|types
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|,
name|ExtensibilityElement
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|el
operator|instanceof
name|Schema
condition|)
block|{
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
operator|(
name|Schema
operator|)
name|el
argument_list|,
name|docBase
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|parentResolvedLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|updateWSDLPublishedEndpointAddress
parameter_list|(
name|Definition
name|def
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
synchronized|synchronized
init|(
name|def
init|)
block|{
comment|//writing a def is not threadsafe.  Sync on it to make sure
comment|//we don't get any ConcurrentModificationExceptions
if|if
condition|(
name|endpointInfo
operator|.
name|getProperty
argument_list|(
name|PUBLISHED_ENDPOINT_URL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|epurl
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|endpointInfo
operator|.
name|getProperty
argument_list|(
name|PUBLISHED_ENDPOINT_URL
argument_list|)
argument_list|)
decl_stmt|;
name|updatePublishedEndpointUrl
argument_list|(
name|epurl
argument_list|,
name|def
argument_list|,
name|endpointInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|updatePublishedEndpointUrl
parameter_list|(
name|String
name|publishingUrl
parameter_list|,
name|Definition
name|def
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
name|Collection
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getAllServices
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|Collection
argument_list|<
name|Port
argument_list|>
name|ports
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|service
operator|.
name|getPorts
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|setSoapAddressLocationOn
argument_list|(
name|ports
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|publishingUrl
argument_list|)
expr_stmt|;
break|break;
comment|// only update the first port since we don't target any specific port
block|}
for|for
control|(
name|Port
name|port
range|:
name|ports
control|)
block|{
if|if
condition|(
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|port
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|setSoapAddressLocationOn
argument_list|(
name|port
argument_list|,
name|publishingUrl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|setSoapAddressLocationOn
parameter_list|(
name|Port
name|port
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|extensions
init|=
name|port
operator|.
name|getExtensibilityElements
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|extension
range|:
name|extensions
control|)
block|{
if|if
condition|(
name|extension
operator|instanceof
name|SOAP12Address
condition|)
block|{
operator|(
operator|(
name|SOAP12Address
operator|)
name|extension
operator|)
operator|.
name|setLocationURI
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extension
operator|instanceof
name|SOAPAddress
condition|)
block|{
operator|(
operator|(
name|SOAPAddress
operator|)
name|extension
operator|)
operator|.
name|setLocationURI
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|updateSchemaImports
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|String
name|docBase
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|doneSchemas
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|parentResolved
parameter_list|)
block|{
name|Collection
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|imports
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|schema
operator|.
name|getImports
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|?
argument_list|>
name|lst
range|:
name|imports
control|)
block|{
name|List
argument_list|<
name|SchemaImport
argument_list|>
name|impLst
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|lst
argument_list|)
decl_stmt|;
for|for
control|(
name|SchemaImport
name|imp
range|:
name|impLst
control|)
block|{
name|processSchemaReference
argument_list|(
name|imp
argument_list|,
name|bus
argument_list|,
name|schema
argument_list|,
name|docBase
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|parentResolved
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|SchemaReference
argument_list|>
name|includes
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|schema
operator|.
name|getIncludes
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SchemaReference
name|included
range|:
name|includes
control|)
block|{
name|processSchemaReference
argument_list|(
name|included
argument_list|,
name|bus
argument_list|,
name|schema
argument_list|,
name|docBase
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|parentResolved
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SchemaReference
argument_list|>
name|redefines
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|schema
operator|.
name|getRedefines
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SchemaReference
name|included
range|:
name|redefines
control|)
block|{
name|processSchemaReference
argument_list|(
name|included
argument_list|,
name|bus
argument_list|,
name|schema
argument_list|,
name|docBase
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|parentResolved
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processSchemaReference
parameter_list|(
name|SchemaReference
name|schemaReference
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|String
name|docBase
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|doneSchemas
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|parentResolved
parameter_list|)
block|{
name|OASISCatalogManager
name|catalogs
init|=
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|String
name|start
init|=
name|findSchemaLocation
argument_list|(
name|doneSchemas
argument_list|,
name|schemaReference
argument_list|,
name|docBase
argument_list|)
decl_stmt|;
name|String
name|origLocation
init|=
name|schemaReference
operator|.
name|getSchemaLocationURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|String
name|decodedStart
decl_stmt|;
name|String
name|decodedOrigLocation
decl_stmt|;
comment|// Always use the URL decoded version to ensure that we have a
comment|// canonical representation of the import URL for lookup.
try|try
block|{
name|decodedStart
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|start
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
name|decodedOrigLocation
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|origLocation
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|start
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|doneSchemas
operator|.
name|containsKey
argument_list|(
name|decodedStart
argument_list|)
condition|)
block|{
name|String
name|resolvedSchemaLocation
init|=
name|resolveWithCatalogs
argument_list|(
name|catalogs
argument_list|,
name|start
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedSchemaLocation
operator|==
literal|null
condition|)
block|{
name|resolvedSchemaLocation
operator|=
name|resolveWithCatalogs
argument_list|(
name|catalogs
argument_list|,
name|schemaReference
operator|.
name|getSchemaLocationURI
argument_list|()
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolvedSchemaLocation
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|//check to see if it's already in a URL format.  If so, leave it.
operator|new
name|URL
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|doneSchemas
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|schemaReference
argument_list|)
expr_stmt|;
name|doneSchemas
operator|.
name|put
argument_list|(
name|schemaReference
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|,
name|schemaReference
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doneSchemas
operator|.
name|containsKey
argument_list|(
name|decodedOrigLocation
argument_list|)
condition|)
block|{
name|doneSchemas
operator|.
name|put
argument_list|(
name|decodedOrigLocation
argument_list|,
name|schemaReference
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|URI
argument_list|(
name|origLocation
argument_list|)
operator|.
name|isAbsolute
argument_list|()
operator|)
operator|&&
name|parentResolved
operator|!=
literal|null
condition|)
block|{
name|resolvedSchemaLocation
operator|=
name|resolveRelativePath
argument_list|(
name|parentResolved
argument_list|,
name|decodedOrigLocation
argument_list|)
expr_stmt|;
name|doneSchemas
operator|.
name|put
argument_list|(
name|resolvedSchemaLocation
argument_list|,
name|schemaReference
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
name|schemaReference
operator|.
name|getReferencedSchema
argument_list|()
argument_list|,
name|start
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|resolvedSchemaLocation
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|doneSchemas
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|schemaReference
argument_list|)
operator|==
literal|null
condition|)
block|{
name|doneSchemas
operator|.
name|put
argument_list|(
name|resolvedSchemaLocation
argument_list|,
name|schemaReference
argument_list|)
expr_stmt|;
name|String
name|p
init|=
name|getAndSaveRelativeSchemaLocationIfCatalogResolved
argument_list|(
name|doneSchemas
argument_list|,
name|resolvedSchemaLocation
argument_list|,
name|schema
argument_list|,
name|schemaReference
argument_list|)
decl_stmt|;
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
name|schemaReference
operator|.
name|getReferencedSchema
argument_list|()
argument_list|,
name|p
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|resolvedSchemaLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * When the imported schema location has been resolved through catalog, we need to:      * 1) get a valid relative location to use for recursion into the imported schema      * 2) add an entry to the doneSchemas map using such a valid relative location, as that's      *    what will be used later for import links      *      * The valid relative location for the imported schema is computed by first obtaining the      * relative uri that maps the importing schema resolved location into the imported schema      * resolved location, then such value is resolved on top of the valid relative location      * that's saved in the doneSchemas map for the importing schema.      *      * @param doneSchemas      * @param resolvedSchemaLocation      * @param currentSchema      * @param schemaReference      * @return      */
specifier|private
name|String
name|getAndSaveRelativeSchemaLocationIfCatalogResolved
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|doneSchemas
parameter_list|,
name|String
name|resolvedSchemaLocation
parameter_list|,
name|Schema
name|currentSchema
parameter_list|,
name|SchemaReference
name|schemaReference
parameter_list|)
block|{
name|String
name|path
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|entry
range|:
name|doneSchemas
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Schema
name|rs
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getReferencedSchema
argument_list|()
decl_stmt|;
name|String
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|rsURI
init|=
name|rs
operator|.
name|getDocumentBaseURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentSchema
operator|.
name|equals
argument_list|(
name|rs
argument_list|)
operator|&&
operator|!
name|rsURI
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|p
init|=
name|URIParserUtil
operator|.
name|relativize
argument_list|(
name|rsURI
argument_list|,
name|resolvedSchemaLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
operator|new
name|URI
argument_list|(
name|k
argument_list|)
operator|.
name|resolve
argument_list|(
name|p
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|doneSchemas
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|schemaReference
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|private
name|String
name|findSchemaLocation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|doneSchemas
parameter_list|,
name|SchemaReference
name|imp
parameter_list|,
name|String
name|docBase
parameter_list|)
block|{
name|String
name|schemaLocationURI
init|=
name|imp
operator|.
name|getSchemaLocationURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|docBase
operator|!=
literal|null
operator|&&
name|schemaLocationURI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|schemaLocationURI
operator|=
name|getLocationURI
argument_list|(
name|schemaLocationURI
argument_list|,
name|docBase
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|imp
operator|.
name|getReferencedSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|e
range|:
name|doneSchemas
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getElement
argument_list|()
operator|==
name|imp
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getElement
argument_list|()
operator|)
operator|&&
name|schemaLocationURI
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|doneSchemas
operator|.
name|put
argument_list|(
name|schemaLocationURI
argument_list|,
name|imp
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setSchemaLocationURI
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|schemaLocationURI
return|;
block|}
specifier|private
name|String
name|resolveRelativePath
parameter_list|(
name|String
name|parentUri
parameter_list|,
name|String
name|relativePath
parameter_list|)
block|{
comment|// can not use `new URI(uri).resolve(path)`, because that doesn't work with "jar:file:x!y" kind of URIs
name|String
name|base
init|=
name|UrlUtils
operator|.
name|getStem
argument_list|(
name|parentUri
argument_list|)
decl_stmt|;
return|return
name|base
operator|+
literal|'/'
operator|+
name|relativePath
return|;
block|}
comment|/**      * Write the contents of a wsdl Definition object to a file.      *      * @param message      * @param mp  a map of known wsdl Definition objects      * @param smp a map of known xsd SchemaReference objects      * @param wsdl name of the wsdl file to write      * @param base the request URL      * @param endpointInfo information for a web service 'port' inside of a service      * @return Document      * @throws WSDLException      */
specifier|public
name|Document
name|writeWSDLDocument
parameter_list|(
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
parameter_list|,
name|String
name|wsdl
parameter_list|,
name|String
name|base
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
throws|throws
name|WSDLException
block|{
name|Document
name|doc
decl_stmt|;
name|Bus
name|bus
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|Definition
name|def
init|=
name|lookupDefinition
argument_list|(
name|bus
argument_list|,
name|mp
argument_list|,
name|wsdl
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|String
name|epurl
init|=
name|base
decl_stmt|;
synchronized|synchronized
init|(
name|def
init|)
block|{
comment|//writing a def is not threadsafe.  Sync on it to make sure
comment|//we don't get any ConcurrentModificationExceptions
name|epurl
operator|=
name|getPublishableEndpointUrl
argument_list|(
name|def
argument_list|,
name|epurl
argument_list|,
name|endpointInfo
argument_list|)
expr_stmt|;
name|WSDLWriter
name|wsdlWriter
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getWSDLFactory
argument_list|()
operator|.
name|newWSDLWriter
argument_list|()
decl_stmt|;
name|def
operator|.
name|setExtensionRegistry
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getExtensionRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|wsdlWriter
operator|.
name|getDocument
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
name|updateDoc
argument_list|(
name|doc
argument_list|,
name|epurl
argument_list|,
name|mp
argument_list|,
name|smp
argument_list|,
name|message
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/**      * Retrieve the published endpoint url from the working information set.      *      * @param def a wsdl as class objects      * @param epurl the request URL      * @param endpointInfo information for a web service 'port' inside of a service      * @return String      */
specifier|public
name|String
name|getPublishableEndpointUrl
parameter_list|(
name|Definition
name|def
parameter_list|,
name|String
name|epurl
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
if|if
condition|(
name|endpointInfo
operator|.
name|getProperty
argument_list|(
name|PUBLISHED_ENDPOINT_URL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|epurl
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|endpointInfo
operator|.
name|getProperty
argument_list|(
name|PUBLISHED_ENDPOINT_URL
argument_list|)
argument_list|)
expr_stmt|;
name|updatePublishedEndpointUrl
argument_list|(
name|epurl
argument_list|,
name|def
argument_list|,
name|endpointInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|epurl
return|;
block|}
comment|/**      * Read the schema file and return as a Document object.      *      * @param bus CXF's hub for access to internal constructs      * @param xsd name of xsd file to be read      * @param smp a map of known xsd SchemaReference objects      * @param base the request URL      * @return Document      * @throws XMLStreamException      */
specifier|protected
name|Document
name|readXSDDocument
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|String
name|xsd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
parameter_list|,
name|String
name|base
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Document
name|doc
init|=
literal|null
decl_stmt|;
name|SchemaReference
name|si
init|=
name|lookupSchemaReference
argument_list|(
name|bus
argument_list|,
name|xsd
argument_list|,
name|smp
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|si
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
decl_stmt|;
name|uri
operator|=
name|resolveWithCatalogs
argument_list|(
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
argument_list|,
name|uri
argument_list|,
name|si
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
name|si
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
expr_stmt|;
block|}
name|ResourceManagerWSDLLocator
name|rml
init|=
operator|new
name|ResourceManagerWSDLLocator
argument_list|(
name|uri
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|InputSource
name|src
init|=
name|rml
operator|.
name|getBaseInputSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|getByteStream
argument_list|()
operator|!=
literal|null
operator|||
name|src
operator|.
name|getCharacterStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|doc
operator|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// last resort lets try for the referenced schema itself.
comment|// its not thread safe if we use the same document
name|doc
operator|=
name|StaxUtils
operator|.
name|read
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|si
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getElement
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
comment|/**      * Create a wsdl Definition object from the endpoint information and register      * it in the local data structure for future reference.      *      * @param bus CXF's hub for access to internal constructs      * @param mp  a map of known wsdl Definition objects      * @param message      * @param smp a map of known xsd SchemaReference objects      * @param base the request URL      * @param endpointInfo information for a web service 'port' inside of a service      * @throws WSDLException      */
specifier|protected
name|void
name|updateWSDLKeyDefinition
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
parameter_list|,
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
parameter_list|,
name|String
name|base
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
throws|throws
name|WSDLException
block|{
if|if
condition|(
operator|!
name|mp
operator|.
name|containsKey
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|ServiceWSDLBuilder
name|builder
init|=
operator|new
name|ServiceWSDLBuilder
argument_list|(
name|bus
argument_list|,
name|endpointInfo
operator|.
name|getService
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setUseSchemaImports
argument_list|(
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|WSDL_CREATE_IMPORTS
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// base file name is ignored if createSchemaImports == false!
name|builder
operator|.
name|setBaseFileName
argument_list|(
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Definition
name|def
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SchemaInfo
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|mp
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|updateDefinition
argument_list|(
name|bus
argument_list|,
name|def
argument_list|,
name|mp
argument_list|,
name|smp
argument_list|,
name|base
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieve the map of known xsd SchemaReference objects for this endpoint.      *      * @param endpointInfo information for a web service 'port' inside of a service      * @return Map<String, SchemaReference>      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|getSchemaKeySchemaReference
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SCHEMAS_KEY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|smp
operator|==
literal|null
condition|)
block|{
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|setProperty
argument_list|(
name|SCHEMAS_KEY
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
argument_list|(
literal|8
argument_list|,
literal|0.75f
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|smp
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SCHEMAS_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|smp
return|;
block|}
comment|/**      * Retrieve the map of known wsdl Definition objects for this endpoint.      *      * @param endpointInfo  information for a web service 'port' inside of a service      * @return Map<String, Definition>      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|getWSDLKeyDefinition
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|WSDLS_KEY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mp
operator|==
literal|null
condition|)
block|{
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|setProperty
argument_list|(
name|WSDLS_KEY
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
argument_list|(
literal|8
argument_list|,
literal|0.75f
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|mp
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|WSDLS_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mp
return|;
block|}
comment|/**      * Retrieve the published endpoint url from the working information set.      *      * @param message      * @param base the request URL      * @param endpointInfo information for a web service 'port' inside of a service      * @return String or NULL if none found      */
specifier|protected
name|String
name|getPublishedEndpointURL
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|base
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
name|Object
name|prop
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|PUBLISHED_ENDPOINT_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|==
literal|null
condition|)
block|{
name|prop
operator|=
name|endpointInfo
operator|.
name|getProperty
argument_list|(
name|PUBLISHED_ENDPOINT_URL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
comment|/**      * Look for the schema filename in existing data structures and in system catalog      * and register it in the local data structure.      *      * @param bus CXF's hub for access to internal constructs      * @param mp  local structure of found wsdl files.      * @param wsdl name of wsdl file for lookup      * @param base the request URL      * @return Definition      */
specifier|private
name|Definition
name|lookupDefinition
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
parameter_list|,
name|String
name|wsdl
parameter_list|,
name|String
name|base
parameter_list|)
block|{
name|Definition
name|def
init|=
name|mp
operator|.
name|get
argument_list|(
name|wsdl
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
name|String
name|wsdl2
init|=
name|resolveWithCatalogs
argument_list|(
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
argument_list|,
name|wsdl
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsdl2
operator|!=
literal|null
condition|)
block|{
name|def
operator|=
name|mp
operator|.
name|get
argument_list|(
name|wsdl2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"WSDL_NOT_FOUND"
argument_list|,
name|LOG
argument_list|,
name|wsdl
argument_list|)
argument_list|,
literal|null
argument_list|)
throw|;
block|}
return|return
name|def
return|;
block|}
comment|/**      * Look for the schema filename in existing data structures and in system catalog      * and register it in the local data structure.      *      * @param bus CXF's hub for access to internal constructs      * @param xsd name of xsd file for lookup      * @param smp local structure of found xsd files.      * @param base the request URL      * @return SchemaReference      */
specifier|private
name|SchemaReference
name|lookupSchemaReference
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|String
name|xsd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
parameter_list|,
name|String
name|base
parameter_list|)
block|{
name|SchemaReference
name|si
init|=
name|smp
operator|.
name|get
argument_list|(
name|xsd
argument_list|)
decl_stmt|;
if|if
condition|(
name|si
operator|==
literal|null
condition|)
block|{
name|String
name|xsd2
init|=
name|resolveWithCatalogs
argument_list|(
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
argument_list|,
name|xsd
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|xsd2
operator|!=
literal|null
condition|)
block|{
name|si
operator|=
name|smp
operator|.
name|get
argument_list|(
name|xsd2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|si
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"SCHEMA_NOT_FOUND"
argument_list|,
name|LOG
argument_list|,
name|xsd
argument_list|)
argument_list|,
literal|null
argument_list|)
throw|;
block|}
return|return
name|si
return|;
block|}
comment|/**      * Utility that generates either a relative URI path if the start path      * is not an absolute path.      * @param startLoc   start path      * @param docBase  path to be adjusted as required      * @return String      * @throws URISyntaxException      */
specifier|private
name|String
name|getLocationURI
parameter_list|(
name|String
name|startLoc
parameter_list|,
name|String
name|docBase
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|URI
argument_list|(
name|startLoc
argument_list|)
operator|.
name|isAbsolute
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|docBase
argument_list|)
condition|)
block|{
name|startLoc
operator|=
operator|new
name|URI
argument_list|(
literal|"."
argument_list|)
operator|.
name|resolve
argument_list|(
name|startLoc
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startLoc
operator|=
operator|new
name|URI
argument_list|(
name|docBase
argument_list|)
operator|.
name|resolve
argument_list|(
name|startLoc
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|startLoc
return|;
block|}
comment|/**      * Utility that generates a URL query.      * @param base  the request URL      * @param ctxUri  the path information      * @param s  the query text      * @return String      */
specifier|private
name|String
name|buildUrl
parameter_list|(
name|String
name|base
parameter_list|,
name|String
name|ctxUri
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|base
operator|+
name|ctxUri
operator|+
literal|"?"
operator|+
name|s
return|;
block|}
block|}
end_class

end_unit

