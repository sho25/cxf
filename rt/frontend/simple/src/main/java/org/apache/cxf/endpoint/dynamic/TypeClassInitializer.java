begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|dynamic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|JType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|S2JJAXBModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|TypeAndAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ASMHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PrimitiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|ServiceModelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ServiceConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|UnwrappedOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_class
specifier|public
class|class
name|TypeClassInitializer
extends|extends
name|ServiceModelVisitor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|TypeClassInitializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|S2JJAXBModel
name|model
decl_stmt|;
name|boolean
name|allowWrapperOperations
decl_stmt|;
name|boolean
name|isFault
decl_stmt|;
specifier|public
name|TypeClassInitializer
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|S2JJAXBModel
name|model
parameter_list|,
name|boolean
name|allowWr
parameter_list|)
block|{
name|super
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
name|this
operator|.
name|allowWrapperOperations
operator|=
name|allowWr
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|OperationInfo
name|op
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isFault
operator|&&
operator|!
name|allowWrapperOperations
operator|&&
name|op
operator|.
name|isUnwrappedCapable
argument_list|()
operator|&&
operator|!
name|op
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
return|return;
block|}
name|QName
name|name
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|name
operator|=
name|part
operator|.
name|getElementQName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|part
operator|.
name|getTypeQName
argument_list|()
expr_stmt|;
block|}
name|Mapping
name|mapping
init|=
name|model
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|//String clsName = null;
name|JType
name|jType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|jType
operator|=
name|mapping
operator|.
name|getType
argument_list|()
operator|.
name|getTypeClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jType
operator|==
literal|null
condition|)
block|{
name|TypeAndAnnotation
name|typeAndAnnotation
init|=
name|model
operator|.
name|getJavaType
argument_list|(
name|part
operator|.
name|getTypeQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeAndAnnotation
operator|!=
literal|null
condition|)
block|{
name|jType
operator|=
name|typeAndAnnotation
operator|.
name|getTypeClass
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jType
operator|==
literal|null
operator|&&
name|part
operator|.
name|isElement
argument_list|()
operator|&&
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
operator|&&
operator|(
operator|(
name|XmlSchemaElement
operator|)
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|)
operator|.
name|getSchemaTypeName
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//anonymous inner thing.....
name|UnwrappedOperationInfo
name|oInfo
init|=
operator|(
name|UnwrappedOperationInfo
operator|)
name|op
decl_stmt|;
name|op
operator|=
name|oInfo
operator|.
name|getWrappedOperation
argument_list|()
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|==
name|oInfo
operator|.
name|getInput
argument_list|()
condition|)
block|{
name|mapping
operator|=
name|model
operator|.
name|get
argument_list|(
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getFirstMessagePart
argument_list|()
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapping
operator|=
name|model
operator|.
name|get
argument_list|(
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getFirstMessagePart
argument_list|()
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|jType
operator|=
name|mapping
operator|.
name|getType
argument_list|()
operator|.
name|getTypeClass
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|JType
argument_list|>
name|i
init|=
name|jType
operator|.
name|classes
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JType
name|jt
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|jt
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|jType
operator|=
name|jt
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore, JType is a type that doesn't have a classes method
block|}
block|}
block|}
if|if
condition|(
name|jType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_JAXB_CLASSMapping"
argument_list|,
name|LOG
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
try|try
block|{
name|int
name|arrayCount
init|=
literal|0
decl_stmt|;
name|JType
name|rootType
init|=
name|jType
decl_stmt|;
while|while
condition|(
name|rootType
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|rootType
operator|=
name|rootType
operator|.
name|elementType
argument_list|()
expr_stmt|;
name|arrayCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|arrayCount
operator|==
literal|0
operator|&&
name|part
operator|.
name|isElement
argument_list|()
operator|&&
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
operator|&&
operator|(
operator|(
name|XmlSchemaElement
operator|)
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|)
operator|.
name|getMaxOccurs
argument_list|()
operator|>
literal|1
condition|)
block|{
name|arrayCount
operator|=
literal|1
expr_stmt|;
block|}
name|cls
operator|=
name|getClassByName
argument_list|(
name|rootType
argument_list|)
expr_stmt|;
comment|// bmargulies cannot find a way to ask the JVM to do this without creating
comment|// an array object on the way.
if|if
condition|(
name|arrayCount
operator|>
literal|0
condition|)
block|{
name|int
index|[]
name|dimensions
init|=
operator|new
name|int
index|[
name|arrayCount
index|]
decl_stmt|;
while|while
condition|(
name|arrayCount
operator|>
literal|0
condition|)
block|{
name|arrayCount
operator|--
expr_stmt|;
name|dimensions
index|[
name|arrayCount
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|Object
name|emptyArray
init|=
name|Array
operator|.
name|newInstance
argument_list|(
name|cls
argument_list|,
name|dimensions
argument_list|)
decl_stmt|;
name|cls
operator|=
name|emptyArray
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|part
operator|.
name|setTypeClass
argument_list|(
name|cls
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFault
condition|)
block|{
comment|//need to create an Exception class for this
try|try
block|{
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|setProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|createFaultClass
argument_list|(
name|cls
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore - probably no asm
block|}
block|}
name|super
operator|.
name|begin
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|createFaultClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
operator|new
name|ExceptionCreator
argument_list|()
operator|.
name|createExceptionClass
argument_list|(
name|cls
argument_list|)
return|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getClassByName
parameter_list|(
name|JType
name|jType
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
if|if
condition|(
operator|!
name|jType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|cls
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|jType
operator|.
name|binaryName
argument_list|()
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cls
operator|=
name|PrimitiveUtils
operator|.
name|getClass
argument_list|(
name|jType
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cls
return|;
block|}
specifier|public
name|void
name|begin
parameter_list|(
name|FaultInfo
name|fault
parameter_list|)
block|{
name|isFault
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|end
parameter_list|(
name|FaultInfo
name|fault
parameter_list|)
block|{
name|isFault
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ExceptionCreator
extends|extends
name|ASMHelper
block|{
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|createExceptionClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|bean
parameter_list|)
block|{
name|String
name|newClassName
init|=
name|bean
operator|.
name|getName
argument_list|()
operator|+
literal|"_Exception"
decl_stmt|;
name|newClassName
operator|=
name|newClassName
operator|.
name|replaceAll
argument_list|(
literal|"\\$"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|newClassName
operator|=
name|periodToSlashes
argument_list|(
name|newClassName
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|super
operator|.
name|findClass
argument_list|(
name|newClassName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|bean
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
name|ClassWriter
name|cw
init|=
name|createClassWriter
argument_list|()
decl_stmt|;
name|cw
operator|.
name|visit
argument_list|(
name|Opcodes
operator|.
name|V1_5
argument_list|,
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_SUPER
argument_list|,
name|newClassName
argument_list|,
literal|null
argument_list|,
literal|"java/lang/Exception"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FieldVisitor
name|fv
decl_stmt|;
name|MethodVisitor
name|mv
decl_stmt|;
name|String
name|beanClassCode
init|=
name|getClassCode
argument_list|(
name|bean
argument_list|)
decl_stmt|;
name|fv
operator|=
name|cw
operator|.
name|visitField
argument_list|(
literal|0
argument_list|,
literal|"faultInfo"
argument_list|,
name|beanClassCode
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Ljava/lang/String;"
operator|+
name|beanClassCode
operator|+
literal|")V"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|createLabel
argument_list|()
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
literal|"java/lang/Exception"
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Ljava/lang/String;)V"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|createLabel
argument_list|()
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|PUTFIELD
argument_list|,
name|newClassName
argument_list|,
literal|"faultInfo"
argument_list|,
name|beanClassCode
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|createLabel
argument_list|()
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|RETURN
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|createLabel
argument_list|()
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"getFaultInfo"
argument_list|,
literal|"()"
operator|+
name|beanClassCode
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|createLabel
argument_list|()
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|GETFIELD
argument_list|,
name|newClassName
argument_list|,
literal|"faultInfo"
argument_list|,
name|beanClassCode
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|createLabel
argument_list|()
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|cw
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|loadClass
argument_list|(
name|bean
operator|.
name|getName
argument_list|()
operator|+
literal|"_Exception"
argument_list|,
name|bean
argument_list|,
name|cw
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
return|return
name|cls
return|;
block|}
block|}
block|}
end_class

end_unit

