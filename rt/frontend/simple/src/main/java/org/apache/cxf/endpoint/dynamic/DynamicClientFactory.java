begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|dynamic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|util
operator|.
name|StreamReaderDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLFilterImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|reader
operator|.
name|internalizer
operator|.
name|AbstractReferenceFinderImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|reader
operator|.
name|internalizer
operator|.
name|DOMForest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|reader
operator|.
name|internalizer
operator|.
name|InternalizationLogic
import|;
end_import

begin_comment
comment|//import com.sun.tools.xjc.reader.xmlschema.parser.XMLSchemaInternalizationLogic;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|CXFBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|OASISCatalogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|OASISCatalogManagerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|JCodeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|JDefinedClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|JPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|S2JJAXBModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|SchemaCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SystemPropertyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImplFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|SimpleEndpointImplFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ServiceConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSerializer
operator|.
name|XmlSchemaSerializerException
import|;
end_import

begin_comment
comment|/**  * This class reads a WSDL and creates a dynamic client from it.  *   * Use {@link #newInstance} to obtain an instance, and then  * {@link #createClient(String)} (or other overloads) to create a client.  *   * It uses the JAXB data binding. It does not set up complex interceptors for   * features such as attachments.   * See {@link org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory}  * for an alternative that sets up JAX-WS endpoints.  *  * This class may be subclassed to allow for other endpoints or behaviors.  */
end_comment

begin_class
specifier|public
class|class
name|DynamicClientFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DynamicClientFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|String
name|tmpdir
init|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|simpleBindingEnabled
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|allowRefs
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jaxbContextProperties
decl_stmt|;
specifier|private
name|String
index|[]
name|schemaCompilerOptions
decl_stmt|;
specifier|protected
name|DynamicClientFactory
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
block|}
specifier|protected
name|EndpointImplFactory
name|getEndpointImplFactory
parameter_list|()
block|{
return|return
name|SimpleEndpointImplFactory
operator|.
name|getSingleton
argument_list|()
return|;
block|}
specifier|public
name|void
name|setTemporaryDirectory
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|tmpdir
operator|=
name|dir
expr_stmt|;
block|}
specifier|public
name|void
name|setAllowElementReferences
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|allowRefs
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|setSchemaCompilerOptions
parameter_list|(
name|String
index|[]
name|options
parameter_list|)
block|{
name|this
operator|.
name|schemaCompilerOptions
operator|=
name|options
expr_stmt|;
block|}
comment|/**      * Create a new instance using a specific<tt>Bus</tt>.      *       * @param b the<tt>Bus</tt> to use in subsequent operations with the      *            instance      * @return the new instance      */
specifier|public
specifier|static
name|DynamicClientFactory
name|newInstance
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
return|return
operator|new
name|DynamicClientFactory
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**      * Create a new instance using a default<tt>Bus</tt>.      *       * @return the new instance      * @see CXFBusFactory#getDefaultBus()      */
specifier|public
specifier|static
name|DynamicClientFactory
name|newInstance
parameter_list|()
block|{
name|Bus
name|bus
init|=
name|CXFBusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
decl_stmt|;
return|return
operator|new
name|DynamicClientFactory
argument_list|(
name|bus
argument_list|)
return|;
block|}
comment|/**      * Create a new<code>Client</code> instance using the WSDL to be loaded      * from the specified URL and using the current classloading context.      *       * @param wsdlURL the URL to load      * @return      */
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|,
name|bindingFiles
argument_list|)
return|;
block|}
comment|/**      * Create a new<code>Client</code> instance using the WSDL to be loaded      * from the specified URL and using the current classloading context.      *       * @param wsdlURL the URL to load      * @return      */
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|,
name|bindingFiles
argument_list|)
return|;
block|}
comment|/**      * Create a new<code>Client</code> instance using the WSDL to be loaded      * from the specified URL and with the specified<code>ClassLoader</code>      * as parent.      *       * @param wsdlUrl      * @param classLoader      * @return      */
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
literal|null
argument_list|,
name|classLoader
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
literal|null
argument_list|,
name|classLoader
argument_list|,
literal|null
argument_list|,
name|bindingFiles
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|service
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|service
argument_list|,
literal|null
argument_list|,
name|bindingFiles
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|QName
name|port
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|service
argument_list|,
literal|null
argument_list|,
name|port
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|QName
name|port
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|service
argument_list|,
literal|null
argument_list|,
name|port
argument_list|,
name|bindingFiles
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|QName
name|port
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|service
argument_list|,
name|classLoader
argument_list|,
name|port
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Create a new<code>Client</code> instance using the WSDL to be loaded      * from the specified URL and with the specified<code>ClassLoader</code>      * as parent.      *       * @param wsdlUrl      * @param classLoader      * @return      */
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
literal|null
argument_list|,
name|classLoader
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
name|classLoader
argument_list|,
literal|null
argument_list|,
name|bindingFiles
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|service
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|service
argument_list|,
literal|null
argument_list|,
name|bindingFiles
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|QName
name|port
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|service
argument_list|,
literal|null
argument_list|,
name|port
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|QName
name|port
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
operator|.
name|toString
argument_list|()
argument_list|,
name|service
argument_list|,
literal|null
argument_list|,
name|port
argument_list|,
name|bindingFiles
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|QName
name|port
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
operator|.
name|toString
argument_list|()
argument_list|,
name|service
argument_list|,
name|classLoader
argument_list|,
name|port
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|QName
name|port
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|wsdlUrl
operator|.
name|toString
argument_list|()
argument_list|,
name|service
argument_list|,
name|classLoader
argument_list|,
name|port
argument_list|,
name|bindingFiles
argument_list|)
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|QName
name|port
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|)
block|{
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|classLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Creating client from WSDL "
operator|+
name|wsdlUrl
argument_list|)
expr_stmt|;
name|WSDLServiceFactory
name|sf
init|=
operator|(
name|service
operator|==
literal|null
operator|)
condition|?
operator|(
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlUrl
argument_list|)
operator|)
else|:
operator|(
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlUrl
argument_list|,
name|service
argument_list|)
operator|)
decl_stmt|;
name|sf
operator|.
name|setAllowElementRefs
argument_list|(
name|allowRefs
argument_list|)
expr_stmt|;
name|Service
name|svc
init|=
name|sf
operator|.
name|create
argument_list|()
decl_stmt|;
name|ClientImpl
name|client
init|=
operator|new
name|ClientImpl
argument_list|(
name|bus
argument_list|,
name|svc
argument_list|,
name|port
argument_list|,
name|getEndpointImplFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|//all SI's should have the same schemas
name|SchemaCollection
name|schemas
init|=
name|svc
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
name|SchemaCompiler
name|compiler
init|=
name|createSchemaCompiler
argument_list|()
decl_stmt|;
name|InnerErrorListener
name|listener
init|=
operator|new
name|InnerErrorListener
argument_list|(
name|wsdlUrl
argument_list|)
decl_stmt|;
name|Object
name|elForRun
init|=
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|listener
argument_list|,
name|JAXBUtils
operator|.
name|getParamClass
argument_list|(
name|compiler
argument_list|,
literal|"setErrorListener"
argument_list|)
argument_list|)
decl_stmt|;
name|compiler
operator|.
name|setErrorListener
argument_list|(
name|elForRun
argument_list|)
expr_stmt|;
name|OASISCatalogManager
name|catalog
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|OASISCatalogManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|hackInNewInternalizationLogic
argument_list|(
name|compiler
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
name|addSchemas
argument_list|(
name|compiler
operator|.
name|getOptions
argument_list|()
argument_list|,
name|compiler
argument_list|,
name|svc
operator|.
name|getServiceInfos
argument_list|()
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
name|addBindingFiles
argument_list|(
name|bindingFiles
argument_list|,
name|compiler
argument_list|)
expr_stmt|;
name|S2JJAXBModel
name|intermediateModel
init|=
name|compiler
operator|.
name|bind
argument_list|()
decl_stmt|;
name|listener
operator|.
name|throwException
argument_list|()
expr_stmt|;
name|JCodeModel
name|codeModel
init|=
name|intermediateModel
operator|.
name|generateCode
argument_list|(
literal|null
argument_list|,
name|elForRun
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|firstnt
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JPackage
argument_list|>
name|packages
init|=
name|codeModel
operator|.
name|packages
argument_list|()
init|;
name|packages
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JPackage
name|jpackage
init|=
name|packages
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isValidPackage
argument_list|(
name|jpackage
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|firstnt
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstnt
operator|=
literal|true
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|jpackage
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JAXBUtils
operator|.
name|logGeneratedClassNames
argument_list|(
name|LOG
argument_list|,
name|codeModel
argument_list|)
expr_stmt|;
name|String
name|packageList
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// our hashcode + timestamp ought to be enough.
name|String
name|stem
init|=
name|toString
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|File
name|src
init|=
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
name|stem
operator|+
literal|"-src"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|src
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create working directory "
operator|+
name|src
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|Object
name|writer
init|=
name|JAXBUtils
operator|.
name|createFileCodeWriter
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|codeModel
operator|.
name|build
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to write generated Java files for schemas: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|File
name|classes
init|=
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
name|stem
operator|+
literal|"-classes"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|classes
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create working directory "
operator|+
name|classes
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
name|StringBuilder
name|classPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|setupClasspath
argument_list|(
name|classPath
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|File
argument_list|>
name|srcFiles
init|=
name|FileUtils
operator|.
name|getFilesRecurse
argument_list|(
name|src
argument_list|,
literal|".+\\.java$"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|compileJavaSrc
argument_list|(
name|classPath
operator|.
name|toString
argument_list|()
argument_list|,
name|srcFiles
argument_list|,
name|classes
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
operator|new
name|Message
argument_list|(
literal|"COULD_NOT_COMPILE_SRC"
argument_list|,
name|LOG
argument_list|,
name|wsdlUrl
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FileUtils
operator|.
name|removeDir
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|URL
index|[]
name|urls
init|=
literal|null
decl_stmt|;
try|try
block|{
name|urls
operator|=
operator|new
name|URL
index|[]
block|{
name|classes
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|mue
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Internal error; a directory returns a malformed URL: "
operator|+
name|mue
operator|.
name|getMessage
argument_list|()
argument_list|,
name|mue
argument_list|)
throw|;
block|}
name|ClassLoader
name|cl
init|=
name|ClassLoaderUtils
operator|.
name|getURLClassLoader
argument_list|(
name|urls
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|JAXBContext
name|context
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|contextProperties
init|=
name|jaxbContextProperties
decl_stmt|;
if|if
condition|(
name|contextProperties
operator|==
literal|null
condition|)
block|{
name|contextProperties
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|packageList
argument_list|)
condition|)
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
operator|new
name|Class
index|[
literal|0
index|]
argument_list|,
name|contextProperties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|packageList
argument_list|,
name|cl
argument_list|,
name|contextProperties
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
name|jbe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create JAXBContext for generated packages: "
operator|+
name|jbe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|jbe
argument_list|)
throw|;
block|}
name|JAXBDataBinding
name|databinding
init|=
operator|new
name|JAXBDataBinding
argument_list|()
decl_stmt|;
name|databinding
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|svc
operator|.
name|setDataBinding
argument_list|(
name|databinding
argument_list|)
expr_stmt|;
name|ServiceInfo
name|svcfo
init|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
comment|// Setup the new classloader!
name|ClassLoaderUtils
operator|.
name|setThreadContextClassloader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|TypeClassInitializer
name|visitor
init|=
operator|new
name|TypeClassInitializer
argument_list|(
name|svcfo
argument_list|,
name|intermediateModel
argument_list|,
name|allowWrapperOps
argument_list|()
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|walk
argument_list|()
expr_stmt|;
comment|// delete the classes files
name|FileUtils
operator|.
name|removeDir
argument_list|(
name|classes
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
specifier|protected
name|boolean
name|allowWrapperOps
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|SchemaCompiler
name|createSchemaCompiler
parameter_list|()
block|{
name|SchemaCompiler
name|compiler
init|=
name|JAXBUtils
operator|.
name|createSchemaCompilerWithDefaultAllocator
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaCompilerOptions
operator|!=
literal|null
operator|&&
name|schemaCompilerOptions
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|compiler
operator|.
name|getOptions
argument_list|()
operator|.
name|parseArguments
argument_list|(
name|schemaCompilerOptions
argument_list|)
expr_stmt|;
block|}
return|return
name|compiler
return|;
block|}
specifier|private
name|void
name|addBindingFiles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bindingFiles
parameter_list|,
name|SchemaCompiler
name|compiler
parameter_list|)
block|{
if|if
condition|(
name|bindingFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|bindingFiles
control|)
block|{
name|URL
name|url
init|=
name|composeUrl
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|InputStream
name|ins
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
name|ins
argument_list|)
decl_stmt|;
name|is
operator|.
name|setSystemId
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|setPublicId
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|compiler
operator|.
name|getOptions
argument_list|()
operator|.
name|addBindFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isValidPackage
parameter_list|(
name|JPackage
name|jpackage
parameter_list|)
block|{
if|if
condition|(
name|jpackage
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|name
init|=
name|jpackage
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"org.w3._2001.xmlschema"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"java.lang"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"java.io"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"generated"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
argument_list|<
name|JDefinedClass
argument_list|>
name|i
init|=
name|jpackage
operator|.
name|classes
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JDefinedClass
name|current
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"ObjectFactory"
operator|.
name|equals
argument_list|(
name|current
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|addSchemas
parameter_list|(
name|Options
name|opts
parameter_list|,
name|SchemaCompiler
name|schemaCompiler
parameter_list|,
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|serviceList
parameter_list|,
name|SchemaCollection
name|schemaCollection
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|done
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|notDone
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
name|OASISCatalogManager
name|catalog
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|OASISCatalogManager
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemaCollection
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|schema
operator|.
name|getSourceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|done
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
condition|)
block|{
name|XmlSchemaSerializer
name|xser
init|=
operator|new
name|XmlSchemaSerializer
argument_list|()
decl_stmt|;
name|xser
operator|.
name|setExtReg
argument_list|(
name|schemaCollection
operator|.
name|getExtReg
argument_list|()
argument_list|)
expr_stmt|;
name|Document
index|[]
name|docs
decl_stmt|;
try|try
block|{
name|docs
operator|=
name|xser
operator|.
name|serializeSchema
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlSchemaSerializerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Element
name|ele
init|=
name|docs
index|[
literal|0
index|]
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|ele
operator|=
name|removeImportElement
argument_list|(
name|ele
argument_list|,
name|key
argument_list|,
name|catalog
argument_list|,
name|done
argument_list|,
name|notDone
argument_list|)
expr_stmt|;
try|try
block|{
name|docs
index|[
literal|0
index|]
operator|.
name|setDocumentURI
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore - DOM level 3
block|}
if|if
condition|(
name|ele
operator|!=
literal|null
condition|)
block|{
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|(
name|InputStream
operator|)
literal|null
argument_list|)
decl_stmt|;
comment|//key = key.replaceFirst("#types[0-9]+$", "");
name|is
operator|.
name|setSystemId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|is
operator|.
name|setPublicId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addGrammar
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|key
argument_list|,
name|ele
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemaCollection
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|schema
operator|.
name|getSourceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|done
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
condition|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
for|for
control|(
name|ServiceInfo
name|si
range|:
name|serviceList
control|)
block|{
for|for
control|(
name|SchemaInfo
name|sci
range|:
name|si
operator|.
name|getSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|key
operator|.
name|equals
argument_list|(
name|sci
operator|.
name|getSystemId
argument_list|()
argument_list|)
condition|)
block|{
name|key
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
operator|new
name|URL
argument_list|(
name|key
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
name|XMLStreamReader
name|reader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|key
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|LocationFilterReader
argument_list|(
name|reader
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|opts
operator|.
name|addGrammar
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|key
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|ServiceInfo
name|si
range|:
name|serviceList
control|)
block|{
for|for
control|(
name|SchemaInfo
name|sci
range|:
name|si
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|sci
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
if|if
condition|(
name|done
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Element
name|ele
init|=
name|sci
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|ele
operator|=
name|removeImportElement
argument_list|(
name|ele
argument_list|,
name|key
argument_list|,
name|catalog
argument_list|,
name|done
argument_list|,
name|notDone
argument_list|)
expr_stmt|;
if|if
condition|(
name|ele
operator|!=
literal|null
condition|)
block|{
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|(
name|InputStream
operator|)
literal|null
argument_list|)
decl_stmt|;
comment|//key = key.replaceFirst("#types[0-9]+$", "");
name|is
operator|.
name|setSystemId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|is
operator|.
name|setPublicId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addGrammar
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|key
argument_list|,
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|ele
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|el
range|:
name|notDone
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|(
name|InputStream
operator|)
literal|null
argument_list|)
decl_stmt|;
comment|//key = key.replaceFirst("#types[0-9]+$", "");
name|is
operator|.
name|setSystemId
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|setPublicId
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addGrammar
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|,
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|el
operator|.
name|getValue
argument_list|()
argument_list|,
name|el
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isSimpleBindingEnabled
parameter_list|()
block|{
return|return
name|simpleBindingEnabled
return|;
block|}
specifier|public
name|void
name|setSimpleBindingEnabled
parameter_list|(
name|boolean
name|simpleBindingEnabled
parameter_list|)
block|{
name|this
operator|.
name|simpleBindingEnabled
operator|=
name|simpleBindingEnabled
expr_stmt|;
block|}
specifier|protected
name|boolean
name|compileJavaSrc
parameter_list|(
name|String
name|classPath
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|srcList
parameter_list|,
name|String
name|dest
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Compiler
name|javaCompiler
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Compiler
argument_list|()
decl_stmt|;
name|javaCompiler
operator|.
name|setClassPath
argument_list|(
name|classPath
argument_list|)
expr_stmt|;
name|javaCompiler
operator|.
name|setOutputDir
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|javaCompiler
operator|.
name|setTarget
argument_list|(
literal|"1.6"
argument_list|)
expr_stmt|;
return|return
name|javaCompiler
operator|.
name|compileFiles
argument_list|(
name|srcList
argument_list|)
return|;
block|}
specifier|static
name|void
name|addClasspathFromManifest
parameter_list|(
name|StringBuilder
name|classPath
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|JarFile
name|jar
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jar
operator|=
operator|new
name|JarFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Attributes
name|attr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jar
operator|.
name|getManifest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|attr
operator|=
name|jar
operator|.
name|getManifest
argument_list|()
operator|.
name|getMainAttributes
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|String
name|cp
init|=
name|attr
operator|.
name|getValue
argument_list|(
literal|"Class-Path"
argument_list|)
decl_stmt|;
while|while
condition|(
name|cp
operator|!=
literal|null
condition|)
block|{
name|String
name|fileName
init|=
name|cp
decl_stmt|;
name|int
name|idx
init|=
name|fileName
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cp
operator|=
name|cp
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cp
operator|=
literal|null
expr_stmt|;
block|}
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|f2
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|f2
operator|=
operator|new
name|File
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f2
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f2
operator|.
name|exists
argument_list|()
condition|)
block|{
name|classPath
operator|.
name|append
argument_list|(
name|f2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|classPath
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jar
operator|!=
literal|null
condition|)
block|{
name|jar
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|setupClasspath
parameter_list|(
name|StringBuilder
name|classPath
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|ClassLoader
name|scl
init|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|tcl
init|=
name|classLoader
decl_stmt|;
do|do
block|{
if|if
condition|(
name|tcl
operator|instanceof
name|URLClassLoader
condition|)
block|{
name|URL
index|[]
name|urls
init|=
operator|(
operator|(
name|URLClassLoader
operator|)
name|tcl
operator|)
operator|.
name|getURLs
argument_list|()
decl_stmt|;
if|if
condition|(
name|urls
operator|==
literal|null
condition|)
block|{
name|urls
operator|=
operator|new
name|URL
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
name|URL
name|url
range|:
name|urls
control|)
block|{
if|if
condition|(
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|File
name|file
init|=
literal|null
decl_stmt|;
comment|// CXF-3884 use url-decoder to get the decoded file path from the url
try|try
block|{
if|if
condition|(
name|url
operator|.
name|getPath
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|file
operator|=
operator|new
name|File
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
comment|// ignored as utf-8 is supported
block|}
if|if
condition|(
literal|null
operator|!=
name|file
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|classPath
operator|.
name|append
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|addClasspathFromManifest
argument_list|(
name|classPath
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|tcl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"weblogic"
argument_list|)
condition|)
block|{
comment|// CXF-2549: Wrong classpath for dynamic client compilation in Weblogic
try|try
block|{
name|Method
name|method
init|=
name|tcl
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getClassPath"
argument_list|)
decl_stmt|;
name|Object
name|weblogicClassPath
init|=
name|method
operator|.
name|invoke
argument_list|(
name|tcl
argument_list|)
decl_stmt|;
name|classPath
operator|.
name|append
argument_list|(
name|weblogicClassPath
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"unsuccessfully tried getClassPath method"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|tcl
operator|=
name|tcl
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|tcl
condition|)
block|{
break|break;
block|}
block|}
do|while
condition|(
operator|!
name|tcl
operator|.
name|equals
argument_list|(
name|scl
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
do|;
block|}
specifier|private
name|URL
name|composeUrl
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
name|URIResolver
name|resolver
init|=
operator|new
name|URIResolver
argument_list|(
literal|null
argument_list|,
name|s
argument_list|,
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|.
name|isResolved
argument_list|()
condition|)
block|{
return|return
name|resolver
operator|.
name|getURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"COULD_NOT_RESOLVE_URL"
argument_list|,
name|LOG
argument_list|,
name|s
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"COULD_NOT_RESOLVE_URL"
argument_list|,
name|LOG
argument_list|,
name|s
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
class|class
name|InnerErrorListener
block|{
specifier|private
name|String
name|url
decl_stmt|;
specifier|private
name|StringBuilder
name|errors
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
name|Exception
name|ex
decl_stmt|;
name|InnerErrorListener
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|void
name|throwException
parameter_list|()
block|{
if|if
condition|(
name|errors
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|ex
operator|=
name|arg0
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|append
argument_list|(
literal|"Error compiling schema from WSDL at {"
argument_list|)
operator|.
name|append
argument_list|(
name|url
argument_list|)
operator|.
name|append
argument_list|(
literal|"}: \n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arg0
operator|.
name|getLineNumber
argument_list|()
operator|>
literal|0
condition|)
block|{
name|errors
operator|.
name|append
argument_list|(
name|arg0
operator|.
name|getLocalizedMessage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|" at line "
operator|+
name|arg0
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" column "
operator|+
name|arg0
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|" of schema "
operator|+
name|arg0
operator|.
name|getSystemId
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|append
argument_list|(
name|arg0
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|arg0
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fatal error compiling schema from WSDL at {"
operator|+
name|url
operator|+
literal|"}: "
operator|+
name|arg0
operator|.
name|getMessage
argument_list|()
argument_list|,
name|arg0
argument_list|)
throw|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|SAXParseException
name|arg0
parameter_list|)
block|{
comment|// ignore
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|arg0
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// sorry, but yuck. Try a file first?!?
specifier|static
class|class
name|RelativeEntityResolver
implements|implements
name|EntityResolver
block|{
specifier|private
name|String
name|baseURI
decl_stmt|;
specifier|public
name|RelativeEntityResolver
parameter_list|(
name|String
name|baseURI
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|baseURI
operator|=
name|baseURI
expr_stmt|;
block|}
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
comment|// the system id is null if the entity is in the wsdl.
if|if
condition|(
name|systemId
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|baseURI
argument_list|,
name|systemId
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|systemId
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Return the map of JAXB context properties used at the time that we create new contexts.      * @return the map      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getJaxbContextProperties
parameter_list|()
block|{
return|return
name|jaxbContextProperties
return|;
block|}
comment|/**      * Set the map of JAXB context properties used at the time that we create new contexts.      * @param jaxbContextProperties      */
specifier|public
name|void
name|setJaxbContextProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jaxbContextProperties
parameter_list|)
block|{
name|this
operator|.
name|jaxbContextProperties
operator|=
name|jaxbContextProperties
expr_stmt|;
block|}
specifier|private
name|void
name|hackInNewInternalizationLogic
parameter_list|(
name|SchemaCompiler
name|schemaCompiler
parameter_list|,
specifier|final
name|OASISCatalogManager
name|catalog
parameter_list|)
block|{
try|try
block|{
name|Object
name|o
init|=
operator|(
operator|(
name|ReflectionInvokationHandler
operator|)
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|schemaCompiler
argument_list|)
operator|)
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"forest"
argument_list|)
decl_stmt|;
name|Object
name|forest
init|=
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
comment|// Set the error handler
for|for
control|(
name|Method
name|m
range|:
name|forest
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"setErrorHandler"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|invoke
argument_list|(
name|forest
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|f
operator|=
name|forest
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"logic"
argument_list|)
expr_stmt|;
name|Object
name|xil
init|=
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
operator|.
name|get
argument_list|(
name|forest
argument_list|)
decl_stmt|;
if|if
condition|(
name|xil
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|".internal."
argument_list|)
condition|)
block|{
name|xil
operator|=
name|createWrapperLogic
argument_list|(
name|xil
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
operator|.
name|set
argument_list|(
name|forest
argument_list|,
name|xil
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|//ignore
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|createWrapperLogic
parameter_list|(
specifier|final
name|Object
name|xil
parameter_list|,
specifier|final
name|OASISCatalogManager
name|catalog
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|InternalizationLogic
argument_list|()
block|{
specifier|public
name|XMLFilterImpl
name|createExternalReferenceFinder
parameter_list|(
name|DOMForest
name|parent
parameter_list|)
block|{
return|return
operator|new
name|ReferenceFinder
argument_list|(
name|parent
argument_list|,
name|catalog
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|checkIfValidTargetNode
parameter_list|(
name|DOMForest
name|parent
parameter_list|,
name|Element
name|bindings
parameter_list|,
name|Element
name|target
parameter_list|)
block|{
return|return
operator|(
operator|(
name|InternalizationLogic
operator|)
name|xil
operator|)
operator|.
name|checkIfValidTargetNode
argument_list|(
name|parent
argument_list|,
name|bindings
argument_list|,
name|target
argument_list|)
return|;
block|}
specifier|public
name|Element
name|refineTarget
parameter_list|(
name|Element
name|target
parameter_list|)
block|{
return|return
operator|(
operator|(
name|InternalizationLogic
operator|)
name|xil
operator|)
operator|.
name|refineTarget
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|//ignore
return|return
name|xil
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ReferenceFinder
extends|extends
name|AbstractReferenceFinderImpl
block|{
specifier|private
name|Locator
name|locator
decl_stmt|;
specifier|private
name|OASISCatalogManager
name|catalog
decl_stmt|;
name|ReferenceFinder
parameter_list|(
name|DOMForest
name|parent
parameter_list|,
name|OASISCatalogManager
name|cat
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|catalog
operator|=
name|cat
expr_stmt|;
block|}
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|loc
parameter_list|)
block|{
name|super
operator|.
name|setDocumentLocator
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|this
operator|.
name|locator
operator|=
name|loc
expr_stmt|;
block|}
specifier|protected
name|String
name|findExternalResource
parameter_list|(
name|String
name|nsURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
name|atts
parameter_list|)
block|{
if|if
condition|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
operator|.
name|equals
argument_list|(
name|nsURI
argument_list|)
operator|&&
operator|(
literal|"import"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"include"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|)
condition|)
block|{
name|String
name|s
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|s
operator|=
name|mapSchemaLocation
argument_list|(
name|s
argument_list|,
name|locator
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|String
name|mapSchemaLocation
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|base
parameter_list|,
name|OASISCatalogManager
name|catalog
parameter_list|)
block|{
try|try
block|{
name|String
name|resolvedLocation
init|=
operator|new
name|OASISCatalogManagerHelper
argument_list|()
operator|.
name|resolve
argument_list|(
name|catalog
argument_list|,
name|target
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedLocation
operator|!=
literal|null
condition|)
block|{
return|return
name|resolvedLocation
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
try|try
block|{
name|URIResolver
name|resolver
init|=
operator|new
name|URIResolver
argument_list|(
name|base
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|.
name|isResolved
argument_list|()
condition|)
block|{
name|target
operator|=
name|resolver
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
return|return
name|target
return|;
block|}
specifier|private
name|Element
name|removeImportElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|sysId
parameter_list|,
name|OASISCatalogManager
name|catalog
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|done
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|notDone
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|impElemList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"import"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|incElemList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"include"
argument_list|)
decl_stmt|;
if|if
condition|(
name|impElemList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|incElemList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|element
return|;
block|}
name|element
operator|=
operator|(
name|Element
operator|)
name|cloneNode
argument_list|(
name|element
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|element
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|ns
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|impElemList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"import"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|elem
range|:
name|impElemList
control|)
block|{
name|Node
name|importNode
init|=
name|elem
decl_stmt|;
name|ns
operator|.
name|add
argument_list|(
name|importNode
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Node
name|item
range|:
name|ns
control|)
block|{
name|Node
name|schemaNode
init|=
name|item
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
name|schemaNode
operator|.
name|removeChild
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|incElemList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"include"
argument_list|)
expr_stmt|;
name|boolean
name|addedToNotDone
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Element
name|elem
range|:
name|incElemList
control|)
block|{
name|Attr
name|val
init|=
name|elem
operator|.
name|getAttributeNode
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|mapSchemaLocation
argument_list|(
name|val
operator|.
name|getNodeValue
argument_list|()
argument_list|,
name|sysId
argument_list|,
name|catalog
argument_list|)
decl_stmt|;
name|val
operator|.
name|setNodeValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|done
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|notDone
operator|.
name|put
argument_list|(
name|sysId
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|addedToNotDone
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|addedToNotDone
condition|?
literal|null
else|:
name|element
return|;
block|}
specifier|public
name|Node
name|cloneNode
parameter_list|(
name|Document
name|document
parameter_list|,
name|Node
name|node
parameter_list|,
name|boolean
name|deep
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|document
operator|==
literal|null
operator|||
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|type
init|=
name|node
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|==
name|document
condition|)
block|{
return|return
name|node
operator|.
name|cloneNode
argument_list|(
name|deep
argument_list|)
return|;
block|}
name|Node
name|clone
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createCDATASection
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createComment
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ENTITY_REFERENCE_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createEntityReference
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createElement
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|Element
operator|)
name|clone
operator|)
operator|.
name|setAttribute
argument_list|(
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createTextNode
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
if|if
condition|(
name|deep
operator|&&
name|type
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Node
name|child
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|clone
operator|.
name|appendChild
argument_list|(
name|cloneNode
argument_list|(
name|document
argument_list|,
name|child
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|clone
return|;
block|}
specifier|public
class|class
name|LocationFilterReader
extends|extends
name|StreamReaderDelegate
block|{
name|boolean
name|isImport
decl_stmt|;
name|boolean
name|isInclude
decl_stmt|;
name|int
name|locIdx
init|=
operator|-
literal|1
decl_stmt|;
name|OASISCatalogManager
name|catalog
decl_stmt|;
name|LocationFilterReader
parameter_list|(
name|XMLStreamReader
name|read
parameter_list|,
name|OASISCatalogManager
name|catalog
parameter_list|)
block|{
name|super
argument_list|(
name|read
argument_list|)
expr_stmt|;
name|this
operator|.
name|catalog
operator|=
name|catalog
expr_stmt|;
block|}
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|int
name|i
init|=
name|super
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
name|QName
name|qn
init|=
name|super
operator|.
name|getName
argument_list|()
decl_stmt|;
name|isInclude
operator|=
name|qn
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA_INCLUDE
argument_list|)
expr_stmt|;
name|isImport
operator|=
name|qn
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA_IMPORT
argument_list|)
expr_stmt|;
if|if
condition|(
name|isImport
condition|)
block|{
name|findLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|isImport
operator|=
literal|false
expr_stmt|;
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
specifier|public
name|int
name|nextTag
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|int
name|i
init|=
name|super
operator|.
name|nextTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
name|QName
name|qn
init|=
name|super
operator|.
name|getName
argument_list|()
decl_stmt|;
name|isInclude
operator|=
name|qn
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA_INCLUDE
argument_list|)
expr_stmt|;
name|isImport
operator|=
name|qn
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA_IMPORT
argument_list|)
expr_stmt|;
if|if
condition|(
name|isImport
condition|)
block|{
name|findLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|isImport
operator|=
literal|false
expr_stmt|;
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
specifier|private
name|void
name|findLocation
parameter_list|()
block|{
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
name|super
operator|.
name|getAttributeCount
argument_list|()
init|;
name|x
operator|>
literal|0
condition|;
operator|--
name|x
control|)
block|{
name|String
name|nm
init|=
name|super
operator|.
name|getAttributeLocalName
argument_list|(
name|x
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"schemaLocation"
operator|.
name|equals
argument_list|(
name|nm
argument_list|)
condition|)
block|{
name|locIdx
operator|=
name|x
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getAttributeCount
parameter_list|()
block|{
name|int
name|i
init|=
name|super
operator|.
name|getAttributeCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|locIdx
operator|!=
operator|-
literal|1
condition|)
block|{
operator|--
name|i
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
specifier|private
name|int
name|mapIdx
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|locIdx
operator|!=
operator|-
literal|1
operator|&&
name|index
operator|>=
name|locIdx
condition|)
block|{
operator|++
name|index
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|private
name|String
name|mapSchemaLocation
parameter_list|(
name|String
name|target
parameter_list|)
block|{
return|return
name|DynamicClientFactory
operator|.
name|mapSchemaLocation
argument_list|(
name|target
argument_list|,
name|this
operator|.
name|getLocation
argument_list|()
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|catalog
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|isInclude
operator|&&
literal|"schemaLocation"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
return|return
name|mapSchemaLocation
argument_list|(
name|super
operator|.
name|getAttributeValue
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getAttributeValue
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|isInclude
condition|)
block|{
name|String
name|n
init|=
name|getAttributeLocalName
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"schemaLocation"
operator|.
name|equals
argument_list|(
name|n
argument_list|)
condition|)
block|{
return|return
name|mapSchemaLocation
argument_list|(
name|super
operator|.
name|getAttributeValue
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|getAttributeValue
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getAttributeName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributeName
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributePrefix
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributePrefix
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeNamespace
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributeNamespace
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeLocalName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributeLocalName
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributeType
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAttributeSpecified
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|isAttributeSpecified
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

