begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ReflectionServiceFactoryTest
extends|extends
name|AbstractSimpleFrontendTest
block|{
specifier|private
name|ReflectionServiceFactoryBean
name|serviceFactory
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testUnwrappedBuild
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|createService
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ServiceInfo
name|si
init|=
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InterfaceInfo
name|intf
init|=
name|si
operator|.
name|getInterface
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|intf
operator|.
name|getOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ns
init|=
name|si
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|OperationInfo
name|sayHelloOp
init|=
name|intf
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"sayHello"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sayHelloOp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sayHello"
argument_list|,
name|sayHelloOp
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|messageParts
init|=
name|sayHelloOp
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|messageParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test output
name|messageParts
operator|=
name|sayHelloOp
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|messageParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sayHelloResponse"
argument_list|,
name|sayHelloOp
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|MessagePartInfo
name|mpi
init|=
name|messageParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"return"
argument_list|,
name|mpi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|mpi
operator|.
name|getTypeClass
argument_list|()
argument_list|)
expr_stmt|;
name|OperationInfo
name|op
init|=
name|si
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"echoWithExchange"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrappedBuild
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|createService
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ServiceInfo
name|si
init|=
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InterfaceInfo
name|intf
init|=
name|si
operator|.
name|getInterface
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|intf
operator|.
name|getOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ns
init|=
name|si
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|OperationInfo
name|sayHelloOp
init|=
name|intf
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"sayHello"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sayHelloOp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sayHello"
argument_list|,
name|sayHelloOp
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|messageParts
init|=
name|sayHelloOp
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|messageParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|messageParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getXmlSchema
argument_list|()
argument_list|)
expr_stmt|;
comment|// test unwrapping
name|assertTrue
argument_list|(
name|sayHelloOp
operator|.
name|isUnwrappedCapable
argument_list|()
argument_list|)
expr_stmt|;
name|OperationInfo
name|unwrappedOp
init|=
name|sayHelloOp
operator|.
name|getUnwrappedOperation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"sayHello"
argument_list|,
name|unwrappedOp
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|messageParts
operator|=
name|unwrappedOp
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|messageParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test output
name|messageParts
operator|=
name|sayHelloOp
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|messageParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sayHelloResponse"
argument_list|,
name|sayHelloOp
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|messageParts
operator|=
name|unwrappedOp
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sayHelloResponse"
argument_list|,
name|unwrappedOp
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|messageParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MessagePartInfo
name|mpi
init|=
name|messageParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"return"
argument_list|,
name|mpi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|mpi
operator|.
name|getTypeClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Service
name|createService
parameter_list|(
name|boolean
name|wrapped
parameter_list|)
throws|throws
name|JAXBException
block|{
name|serviceFactory
operator|=
operator|new
name|ReflectionServiceFactoryBean
argument_list|()
expr_stmt|;
name|serviceFactory
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|serviceFactory
operator|.
name|setServiceClass
argument_list|(
name|HelloService
operator|.
name|class
argument_list|)
expr_stmt|;
name|serviceFactory
operator|.
name|setWrapped
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|serviceFactory
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
return|return
name|serviceFactory
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerFactoryBean
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|createService
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|service
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|ServerFactoryBean
name|svrBean
init|=
operator|new
name|ServerFactoryBean
argument_list|()
decl_stmt|;
name|svrBean
operator|.
name|setAddress
argument_list|(
literal|"http://localhost/Hello"
argument_list|)
expr_stmt|;
name|svrBean
operator|.
name|setServiceFactory
argument_list|(
name|serviceFactory
argument_list|)
expr_stmt|;
name|svrBean
operator|.
name|setServiceBean
argument_list|(
operator|new
name|HelloServiceImpl
argument_list|()
argument_list|)
expr_stmt|;
name|svrBean
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|serviceFactory
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|svrBean
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|svrBean
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|Endpoint
argument_list|>
name|eps
init|=
name|service
operator|.
name|getEndpoints
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|eps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Endpoint
name|ep
init|=
name|eps
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|EndpointInfo
name|endpointInfo
init|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|ep
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|SOAPAddress
name|soapAddress
init|=
name|endpointInfo
operator|.
name|getExtensor
argument_list|(
name|SOAPAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|soapAddress
argument_list|)
expr_stmt|;
name|BindingInfo
name|b
init|=
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getBindings
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|b
operator|instanceof
name|SoapBindingInfo
argument_list|)
expr_stmt|;
name|SoapBindingInfo
name|sb
init|=
operator|(
name|SoapBindingInfo
operator|)
name|b
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HelloServiceSoapBinding"
argument_list|,
name|b
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"document"
argument_list|,
name|sb
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|b
operator|.
name|getOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|bop
init|=
name|b
operator|.
name|getOperations
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|SoapOperationInfo
name|sop
init|=
name|bop
operator|.
name|getExtensor
argument_list|(
name|SoapOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sop
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|sop
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"document"
argument_list|,
name|sop
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

