begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap12
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBindingConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|AbstractSimpleFrontendTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|HelloService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|HelloServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MultipleEndpointObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|local
operator|.
name|LocalTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|SoapBindingSelectionTest
extends|extends
name|AbstractSimpleFrontendTest
block|{
name|boolean
name|service1Invoked
decl_stmt|;
name|boolean
name|service2Invoked
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMultipleSoapBindings
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerFactoryBean
name|svrBean1
init|=
operator|new
name|ServerFactoryBean
argument_list|()
decl_stmt|;
name|svrBean1
operator|.
name|setAddress
argument_list|(
literal|"http://localhost/Hello"
argument_list|)
expr_stmt|;
name|svrBean1
operator|.
name|setServiceClass
argument_list|(
name|HelloService
operator|.
name|class
argument_list|)
expr_stmt|;
name|svrBean1
operator|.
name|setServiceBean
argument_list|(
operator|new
name|HelloServiceImpl
argument_list|()
argument_list|)
expr_stmt|;
name|svrBean1
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|svrBean1
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
argument_list|(
name|Phase
operator|.
name|USER_LOGICAL
argument_list|)
block|{
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|service1Invoked
operator|=
literal|true
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|svrBean1
operator|.
name|create
argument_list|()
expr_stmt|;
name|ServerFactoryBean
name|svrBean2
init|=
operator|new
name|ServerFactoryBean
argument_list|()
decl_stmt|;
name|svrBean2
operator|.
name|setAddress
argument_list|(
literal|"http://localhost/Hello"
argument_list|)
expr_stmt|;
name|svrBean2
operator|.
name|setServiceClass
argument_list|(
name|HelloService
operator|.
name|class
argument_list|)
expr_stmt|;
name|svrBean2
operator|.
name|setServiceBean
argument_list|(
operator|new
name|HelloServiceImpl
argument_list|()
argument_list|)
expr_stmt|;
name|svrBean2
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|svrBean2
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
argument_list|(
name|Phase
operator|.
name|USER_LOGICAL
argument_list|)
block|{
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|service2Invoked
operator|=
literal|true
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SoapBindingConfiguration
name|config
init|=
operator|new
name|SoapBindingConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setVersion
argument_list|(
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|svrBean2
operator|.
name|setBindingConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|ServerImpl
name|server2
init|=
operator|(
name|ServerImpl
operator|)
name|svrBean2
operator|.
name|create
argument_list|()
decl_stmt|;
name|Destination
name|d
init|=
name|server2
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|MessageObserver
name|mo
init|=
name|d
operator|.
name|getMessageObserver
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mo
operator|instanceof
name|MultipleEndpointObserver
argument_list|)
expr_stmt|;
name|MultipleEndpointObserver
name|meo
init|=
operator|(
name|MultipleEndpointObserver
operator|)
name|mo
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|meo
operator|.
name|getEndpoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|nd
init|=
name|invoke
argument_list|(
literal|"http://localhost/Hello"
argument_list|,
name|LocalTransportFactory
operator|.
name|TRANSPORT_ID
argument_list|,
literal|"soap11.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://schemas.xmlsoap.org/soap/envelope/"
argument_list|,
name|getNs
argument_list|(
name|nd
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service1Invoked
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service2Invoked
argument_list|)
expr_stmt|;
name|service1Invoked
operator|=
literal|false
expr_stmt|;
name|nd
operator|=
name|invoke
argument_list|(
literal|"http://localhost/Hello"
argument_list|,
name|LocalTransportFactory
operator|.
name|TRANSPORT_ID
argument_list|,
literal|"soap12.xml"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.w3.org/2003/05/soap-envelope"
argument_list|,
name|getNs
argument_list|(
name|nd
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service1Invoked
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service2Invoked
argument_list|)
expr_stmt|;
name|server2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nd
operator|=
name|invoke
argument_list|(
literal|"http://localhost/Hello"
argument_list|,
name|LocalTransportFactory
operator|.
name|TRANSPORT_ID
argument_list|,
literal|"soap12.xml"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.w3.org/2003/05/soap-envelope"
argument_list|,
name|getNs
argument_list|(
name|nd
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service1Invoked
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service2Invoked
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getNs
parameter_list|(
name|Node
name|nd
parameter_list|)
block|{
if|if
condition|(
name|nd
operator|instanceof
name|Document
condition|)
block|{
return|return
name|getNs
argument_list|(
operator|(
operator|(
name|Document
operator|)
name|nd
operator|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
return|;
block|}
return|return
name|nd
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
block|}
end_class

end_unit

