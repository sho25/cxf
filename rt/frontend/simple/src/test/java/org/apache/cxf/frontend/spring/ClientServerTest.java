begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|HelloService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|// set up the client and server with spring bean configuration
end_comment

begin_class
specifier|public
class|class
name|ClientServerTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testClientServer
parameter_list|()
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClassPathXmlApplicationContext
name|ctx
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/org/apache/cxf/frontend/spring/rountrip.xml"
block|}
argument_list|)
decl_stmt|;
name|HelloService
name|greeter
init|=
operator|(
name|HelloService
operator|)
name|ctx
operator|.
name|getBean
argument_list|(
literal|"client"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|greeter
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|greeter
operator|.
name|sayHello
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"We get the wrong sayHello result"
argument_list|,
name|result
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Client
name|c
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|greeter
argument_list|)
decl_stmt|;
name|TestInterceptor
name|out
init|=
operator|new
name|TestInterceptor
argument_list|()
decl_stmt|;
name|TestInterceptor
name|in
init|=
operator|new
name|TestInterceptor
argument_list|()
decl_stmt|;
name|c
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|OUT_INTERCEPTORS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Interceptor
index|[]
block|{
name|out
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|greeter
operator|.
name|sayHello
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|c
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|IN_INTERCEPTORS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Interceptor
index|[]
block|{
name|in
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|greeter
operator|.
name|sayHello
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|in
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|TestInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
name|boolean
name|called
decl_stmt|;
specifier|public
name|TestInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|USER_LOGICAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|called
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasCalled
parameter_list|()
block|{
return|return
name|called
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|called
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

