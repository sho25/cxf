begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|js
operator|.
name|rhino
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Scriptable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Wrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|xml
operator|.
name|XMLObject
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDOMProvider
block|{
specifier|public
specifier|static
class|class
name|JSDOMProviderException
extends|extends
name|Exception
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6082342781592829823L
decl_stmt|;
specifier|public
name|JSDOMProviderException
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|super
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|NO_WSDL_LOCATION
init|=
literal|"no wsdlLocation property found"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_SERVICE_NAME
init|=
literal|"no serviceName property found"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_PORT_NAME
init|=
literal|"no portName property found"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_TGT_NAMESPACE
init|=
literal|"no targetNamespace property found"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_INVOKE
init|=
literal|"no invoke property found"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ILLEGAL_INVOKE_TYPE
init|=
literal|"invoke property is not a Function type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_EP_ADDR
init|=
literal|"no endpoint address specified"
decl_stmt|;
specifier|private
name|Scriptable
name|scriptScope
decl_stmt|;
specifier|private
name|Scriptable
name|webSvcProviderVar
decl_stmt|;
specifier|private
name|String
name|epAddress
decl_stmt|;
specifier|private
name|boolean
name|isBaseAddr
decl_stmt|;
specifier|private
name|boolean
name|isE4X
decl_stmt|;
specifier|private
name|Function
name|invokeFunc
decl_stmt|;
specifier|private
name|Endpoint
name|ep
decl_stmt|;
specifier|protected
name|AbstractDOMProvider
parameter_list|(
name|Scriptable
name|scope
parameter_list|,
name|Scriptable
name|wspVar
parameter_list|,
name|String
name|epAddr
parameter_list|,
name|boolean
name|isBase
parameter_list|,
name|boolean
name|e4x
parameter_list|)
block|{
name|scriptScope
operator|=
name|scope
expr_stmt|;
name|webSvcProviderVar
operator|=
name|wspVar
expr_stmt|;
name|epAddress
operator|=
name|epAddr
expr_stmt|;
name|isBaseAddr
operator|=
name|isBase
expr_stmt|;
name|isE4X
operator|=
name|e4x
expr_stmt|;
block|}
specifier|public
name|void
name|publish
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|addr
init|=
name|epAddress
decl_stmt|;
name|String
name|wsdlLoc
init|=
literal|null
decl_stmt|;
name|String
name|svcNm
init|=
literal|null
decl_stmt|;
name|String
name|portNm
init|=
literal|null
decl_stmt|;
name|String
name|tgtNmspc
init|=
literal|null
decl_stmt|;
name|String
name|binding
init|=
literal|null
decl_stmt|;
name|Object
name|obj
init|=
name|webSvcProviderVar
operator|.
name|get
argument_list|(
literal|"wsdlLocation"
argument_list|,
name|webSvcProviderVar
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
name|Scriptable
operator|.
name|NOT_FOUND
condition|)
block|{
throw|throw
operator|new
name|JSDOMProviderException
argument_list|(
name|NO_WSDL_LOCATION
argument_list|)
throw|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
name|wsdlLoc
operator|=
operator|(
name|String
operator|)
name|obj
expr_stmt|;
block|}
name|obj
operator|=
name|webSvcProviderVar
operator|.
name|get
argument_list|(
literal|"serviceName"
argument_list|,
name|webSvcProviderVar
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
name|Scriptable
operator|.
name|NOT_FOUND
condition|)
block|{
throw|throw
operator|new
name|JSDOMProviderException
argument_list|(
name|NO_SERVICE_NAME
argument_list|)
throw|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
name|svcNm
operator|=
operator|(
name|String
operator|)
name|obj
expr_stmt|;
block|}
name|obj
operator|=
name|webSvcProviderVar
operator|.
name|get
argument_list|(
literal|"portName"
argument_list|,
name|webSvcProviderVar
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
name|Scriptable
operator|.
name|NOT_FOUND
condition|)
block|{
throw|throw
operator|new
name|JSDOMProviderException
argument_list|(
name|NO_PORT_NAME
argument_list|)
throw|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
name|portNm
operator|=
operator|(
name|String
operator|)
name|obj
expr_stmt|;
block|}
name|obj
operator|=
name|webSvcProviderVar
operator|.
name|get
argument_list|(
literal|"targetNamespace"
argument_list|,
name|webSvcProviderVar
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
name|Scriptable
operator|.
name|NOT_FOUND
condition|)
block|{
throw|throw
operator|new
name|JSDOMProviderException
argument_list|(
name|NO_TGT_NAMESPACE
argument_list|)
throw|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
name|tgtNmspc
operator|=
operator|(
name|String
operator|)
name|obj
expr_stmt|;
block|}
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
name|obj
operator|=
name|webSvcProviderVar
operator|.
name|get
argument_list|(
literal|"EndpointAddress"
argument_list|,
name|scriptScope
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|!=
name|Scriptable
operator|.
name|NOT_FOUND
operator|&&
name|obj
operator|instanceof
name|String
condition|)
block|{
name|addr
operator|=
operator|(
name|String
operator|)
name|obj
expr_stmt|;
name|isBaseAddr
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JSDOMProviderException
argument_list|(
name|NO_EP_ADDR
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBaseAddr
condition|)
block|{
if|if
condition|(
name|addr
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|addr
operator|+=
name|portNm
expr_stmt|;
block|}
else|else
block|{
name|addr
operator|=
name|addr
operator|+
literal|"/"
operator|+
name|portNm
expr_stmt|;
block|}
block|}
name|obj
operator|=
name|webSvcProviderVar
operator|.
name|get
argument_list|(
literal|"BindingType"
argument_list|,
name|scriptScope
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|!=
name|Scriptable
operator|.
name|NOT_FOUND
operator|&&
name|obj
operator|instanceof
name|String
condition|)
block|{
name|binding
operator|=
operator|(
name|String
operator|)
name|obj
expr_stmt|;
block|}
name|obj
operator|=
name|webSvcProviderVar
operator|.
name|get
argument_list|(
literal|"invoke"
argument_list|,
name|webSvcProviderVar
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
name|Scriptable
operator|.
name|NOT_FOUND
condition|)
block|{
throw|throw
operator|new
name|JSDOMProviderException
argument_list|(
name|NO_INVOKE
argument_list|)
throw|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|Function
condition|)
block|{
name|invokeFunc
operator|=
operator|(
name|Function
operator|)
name|obj
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|JSDOMProviderException
argument_list|(
name|ILLEGAL_INVOKE_TYPE
argument_list|)
throw|;
block|}
name|Bus
name|bus
init|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
decl_stmt|;
name|JaxWsServerFactoryBean
name|factory
init|=
operator|new
name|JaxWsServerFactoryBean
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setWsdlLocation
argument_list|(
name|wsdlLoc
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setBindingId
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setServiceName
argument_list|(
operator|new
name|QName
argument_list|(
name|tgtNmspc
argument_list|,
name|svcNm
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setEndpointName
argument_list|(
operator|new
name|QName
argument_list|(
name|tgtNmspc
argument_list|,
name|portNm
argument_list|)
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
name|this
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|ep
operator|.
name|publish
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|ep
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ep
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|DOMSource
name|invoke
parameter_list|(
name|DOMSource
name|request
parameter_list|)
block|{
name|DOMSource
name|response
init|=
operator|new
name|DOMSource
argument_list|()
decl_stmt|;
name|Context
name|cx
init|=
name|ContextFactory
operator|.
name|getGlobal
argument_list|()
operator|.
name|enterContext
argument_list|()
decl_stmt|;
try|try
block|{
name|Scriptable
name|scope
init|=
name|cx
operator|.
name|newObject
argument_list|(
name|scriptScope
argument_list|)
decl_stmt|;
name|scope
operator|.
name|setPrototype
argument_list|(
name|scriptScope
argument_list|)
expr_stmt|;
name|scope
operator|.
name|setParentScope
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|request
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|Object
name|inDoc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isE4X
condition|)
block|{
try|try
block|{
name|inDoc
operator|=
name|Context
operator|.
name|toObject
argument_list|(
name|node
argument_list|,
name|scope
argument_list|)
expr_stmt|;
name|Object
index|[]
name|args
init|=
block|{
name|inDoc
block|}
decl_stmt|;
name|inDoc
operator|=
name|cx
operator|.
name|newObject
argument_list|(
name|scope
argument_list|,
literal|"XML"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|inDoc
operator|=
name|Context
operator|.
name|toObject
argument_list|(
name|node
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|args
init|=
block|{
name|inDoc
block|}
decl_stmt|;
name|Object
name|jsResp
init|=
name|invokeFunc
operator|.
name|call
argument_list|(
name|cx
argument_list|,
name|scope
argument_list|,
name|scope
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsResp
operator|instanceof
name|Wrapper
condition|)
block|{
name|jsResp
operator|=
operator|(
operator|(
name|Wrapper
operator|)
name|jsResp
operator|)
operator|.
name|unwrap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsResp
operator|instanceof
name|XMLObject
condition|)
block|{
name|jsResp
operator|=
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|xmlimpl
operator|.
name|XMLLibImpl
operator|.
name|toDomNode
argument_list|(
name|jsResp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsResp
operator|instanceof
name|Node
condition|)
block|{
name|node
operator|=
operator|(
name|Node
operator|)
name|jsResp
expr_stmt|;
name|response
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Context
operator|.
name|exit
argument_list|()
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

