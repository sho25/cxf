begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|js
operator|.
name|rhino
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_class
specifier|public
class|class
name|ServerApp
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NO_ADDR_ERR
init|=
literal|"error: an endpoint address must be provided"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_FILES_ERR
init|=
literal|"error: no JavaScript files specified"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WRONG_ADDR_ERR
init|=
literal|"error: -a requires a URL argument"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WRONG_BASE_ERR
init|=
literal|"error: -b requires a base URL argument"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ILLEGAL_OPTIONS_ERR
init|=
literal|"error: -a and -b cannot be used together"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UNKNOWN_OPTION
init|=
literal|"error: unknown option"
decl_stmt|;
specifier|private
name|boolean
name|verbose
decl_stmt|;
specifier|private
name|boolean
name|bOptSeen
decl_stmt|;
specifier|private
name|String
name|epAddr
decl_stmt|;
specifier|protected
name|void
name|start
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ProviderFactory
name|ph
init|=
name|createProviderFactory
argument_list|()
decl_stmt|;
name|FileFilter
name|jsFilter
init|=
operator|new
name|JSFilter
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|boolean
name|fileSeen
init|=
literal|false
decl_stmt|;
name|boolean
name|msgPrinted
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|i
operator|=
name|checkOption
argument_list|(
name|args
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
operator|&&
operator|!
name|msgPrinted
condition|)
block|{
name|msgPrinted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"entering server"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
operator|&&
name|jsFilter
operator|.
name|accept
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|fileSeen
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"processing file "
operator|+
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ph
operator|.
name|createAndPublish
argument_list|(
name|f
argument_list|,
name|epAddr
argument_list|,
name|bOptSeen
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|flist
init|=
name|f
operator|.
name|listFiles
argument_list|(
name|jsFilter
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|flist
control|)
block|{
name|fileSeen
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"processing file "
operator|+
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ph
operator|.
name|createAndPublish
argument_list|(
name|file
argument_list|,
name|epAddr
argument_list|,
name|bOptSeen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fileSeen
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|NO_FILES_ERR
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ServerApp
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app
operator|=
operator|new
name|ServerApp
argument_list|()
expr_stmt|;
name|app
operator|.
name|start
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"server ready..."
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"server timed out, exiting"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ProviderFactory
name|createProviderFactory
parameter_list|()
block|{
return|return
operator|new
name|ProviderFactory
argument_list|()
return|;
block|}
specifier|private
name|int
name|checkOption
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|"-v"
operator|.
name|equals
argument_list|(
name|args
index|[
name|index
index|]
argument_list|)
condition|)
block|{
name|verbose
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-a"
operator|.
name|equals
argument_list|(
name|args
index|[
name|index
index|]
argument_list|)
condition|)
block|{
name|bOptSeen
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|++
name|index
operator|==
name|args
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|WRONG_ADDR_ERR
argument_list|)
throw|;
block|}
try|try
block|{
operator|new
name|URL
argument_list|(
name|args
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|m
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|WRONG_ADDR_ERR
argument_list|,
name|m
argument_list|)
throw|;
block|}
name|epAddr
operator|=
name|args
index|[
name|index
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-b"
operator|.
name|equals
argument_list|(
name|args
index|[
name|index
index|]
argument_list|)
condition|)
block|{
name|bOptSeen
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|++
name|index
operator|==
name|args
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|WRONG_BASE_ERR
argument_list|)
throw|;
block|}
try|try
block|{
operator|new
name|URL
argument_list|(
name|args
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|m
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|WRONG_BASE_ERR
argument_list|,
name|m
argument_list|)
throw|;
block|}
name|epAddr
operator|=
name|args
index|[
name|index
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|UNKNOWN_OPTION
operator|+
literal|": "
operator|+
name|args
index|[
name|index
index|]
argument_list|)
throw|;
block|}
return|return
name|index
return|;
block|}
specifier|private
specifier|static
class|class
name|JSFilter
implements|implements
name|FileFilter
block|{
specifier|public
specifier|final
name|boolean
name|accept
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".js"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".jsx"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

