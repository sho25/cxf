begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|js
operator|.
name|rhino
package|;
end_package

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Scriptable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractDOMProviderTest
block|{
specifier|private
name|String
name|epAddr
init|=
literal|"http://cxf.apache.org/"
decl_stmt|;
specifier|private
name|Scriptable
name|scriptMock
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|scriptMock
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Scriptable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWsdlLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"wsdlLocation"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Scriptable
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
name|AbstractDOMProvider
name|adp
init|=
operator|new
name|DOMMessageProvider
argument_list|(
name|scriptMock
argument_list|,
name|scriptMock
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|adp
operator|.
name|publish
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractDOMProvider
operator|.
name|JSDOMProviderException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|AbstractDOMProvider
operator|.
name|NO_WSDL_LOCATION
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoSvcName
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"wsdlLocation"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"serviceName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Scriptable
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
name|AbstractDOMProvider
name|adp
init|=
operator|new
name|DOMPayloadProvider
argument_list|(
name|scriptMock
argument_list|,
name|scriptMock
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|adp
operator|.
name|publish
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractDOMProvider
operator|.
name|JSDOMProviderException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|AbstractDOMProvider
operator|.
name|NO_SERVICE_NAME
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPortName
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"wsdlLocation"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"serviceName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"portName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Scriptable
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
name|AbstractDOMProvider
name|adp
init|=
operator|new
name|DOMMessageProvider
argument_list|(
name|scriptMock
argument_list|,
name|scriptMock
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|adp
operator|.
name|publish
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractDOMProvider
operator|.
name|JSDOMProviderException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|AbstractDOMProvider
operator|.
name|NO_PORT_NAME
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoTgtNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"wsdlLocation"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"serviceName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"portName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"targetNamespace"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Scriptable
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
name|AbstractDOMProvider
name|adp
init|=
operator|new
name|DOMMessageProvider
argument_list|(
name|scriptMock
argument_list|,
name|scriptMock
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|adp
operator|.
name|publish
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractDOMProvider
operator|.
name|JSDOMProviderException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|AbstractDOMProvider
operator|.
name|NO_TGT_NAMESPACE
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoAddr
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"wsdlLocation"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"serviceName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"portName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"targetNamespace"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"EndpointAddress"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Scriptable
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
name|AbstractDOMProvider
name|adp
init|=
operator|new
name|DOMPayloadProvider
argument_list|(
name|scriptMock
argument_list|,
name|scriptMock
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|adp
operator|.
name|publish
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractDOMProvider
operator|.
name|JSDOMProviderException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|AbstractDOMProvider
operator|.
name|NO_EP_ADDR
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoInvoke
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"wsdlLocation"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"serviceName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"portName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"targetNamespace"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"EndpointAddress"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epAddr
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"BindingType"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Scriptable
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"invoke"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Scriptable
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
name|AbstractDOMProvider
name|adp
init|=
operator|new
name|DOMPayloadProvider
argument_list|(
name|scriptMock
argument_list|,
name|scriptMock
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|adp
operator|.
name|publish
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractDOMProvider
operator|.
name|JSDOMProviderException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|AbstractDOMProvider
operator|.
name|NO_INVOKE
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalInvoke
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"wsdlLocation"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"serviceName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"portName"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"targetNamespace"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"found"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"BindingType"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Scriptable
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|scriptMock
operator|.
name|get
argument_list|(
literal|"invoke"
argument_list|,
name|scriptMock
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
name|AbstractDOMProvider
name|adp
init|=
operator|new
name|DOMMessageProvider
argument_list|(
name|scriptMock
argument_list|,
name|scriptMock
argument_list|,
name|epAddr
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|adp
operator|.
name|publish
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractDOMProvider
operator|.
name|JSDOMProviderException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|AbstractDOMProvider
operator|.
name|ILLEGAL_INVOKE_TYPE
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|scriptMock
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

