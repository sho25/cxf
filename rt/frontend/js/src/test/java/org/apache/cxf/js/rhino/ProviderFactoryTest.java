begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|js
operator|.
name|rhino
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|EvaluatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Scriptable
import|;
end_import

begin_class
specifier|public
class|class
name|ProviderFactoryTest
extends|extends
name|Assert
block|{
specifier|private
name|String
name|epAddr
init|=
literal|"http://cxf.apache.org/"
decl_stmt|;
specifier|private
name|ProviderFactory
name|ph
decl_stmt|;
specifier|private
name|AbstractDOMProvider
name|dpMock
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|dpMock
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractDOMProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|ph
operator|=
operator|new
name|ProviderFactory
argument_list|(
name|epAddr
argument_list|)
block|{
specifier|protected
name|AbstractDOMProvider
name|createProvider
parameter_list|(
name|Service
operator|.
name|Mode
name|mode
parameter_list|,
name|Scriptable
name|scope
parameter_list|,
name|Scriptable
name|wspVar
parameter_list|,
name|String
name|epAddress
parameter_list|,
name|boolean
name|isBase
parameter_list|,
name|boolean
name|e4x
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|dpMock
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMsgJSFile
parameter_list|()
throws|throws
name|Exception
block|{
name|dpMock
operator|.
name|publish
argument_list|()
expr_stmt|;
name|dpMock
operator|.
name|publish
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"msg.js"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|ph
operator|.
name|createAndPublish
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadJSFile
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|replay
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fname
init|=
literal|"broken.js"
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|fname
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ph
operator|.
name|createAndPublish
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EvaluatorException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"wrong exception"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"syntax error"
argument_list|)
operator|||
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"erreur de syntaxe"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyJSFile
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|replay
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fname
init|=
literal|"empty.js"
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|fname
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ph
operator|.
name|createAndPublish
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
operator|+
name|ProviderFactory
operator|.
name|NO_PROVIDER
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoSuchJSFile
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|replay
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fname
init|=
literal|"none.js"
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|fname
argument_list|)
decl_stmt|;
try|try
block|{
name|ph
operator|.
name|createAndPublish
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
operator|+
name|ProviderFactory
operator|.
name|NO_SUCH_FILE
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalServiceMode
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|replay
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fname
init|=
literal|"illegal1.js"
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|fname
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ph
operator|.
name|createAndPublish
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
operator|+
name|ProviderFactory
operator|.
name|ILLEGAL_SVCMD_MODE
operator|+
literal|"bogus"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalServiceModeType
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|replay
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fname
init|=
literal|"illegal2.js"
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|fname
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ph
operator|.
name|createAndPublish
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
operator|+
name|ProviderFactory
operator|.
name|ILLEGAL_SVCMD_TYPE
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProviderException
parameter_list|()
throws|throws
name|Exception
block|{
name|dpMock
operator|.
name|publish
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
operator|new
name|AbstractDOMProvider
operator|.
name|JSDOMProviderException
argument_list|(
name|AbstractDOMProvider
operator|.
name|NO_EP_ADDR
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"msg.js"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ph
operator|.
name|createAndPublish
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong exception message"
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|AbstractDOMProvider
operator|.
name|NO_EP_ADDR
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|dpMock
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

