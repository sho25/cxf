begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|AnnotationFormatError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
specifier|public
class|class
name|ThreadLocalInvocationHandlerTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CHECKED_EXCEPTION_MSG
init|=
literal|"Throwing a checked exception."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNCHECKED_EXCEPTION_MSG
init|=
literal|"Throwing an unchecked exception."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_MSG
init|=
literal|"Throwing an error."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THROWABLE_MSG
init|=
literal|"Throwing a throwable."
decl_stmt|;
specifier|private
name|TestIface
name|testIface
decl_stmt|;
specifier|private
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|getExpectedExceptionRule
parameter_list|()
block|{
return|return
name|expectedException
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ThreadLocalInvocationHandler
argument_list|<
name|TestClass
argument_list|>
name|subject
init|=
operator|new
name|ThreadLocalInvocationHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|subject
operator|.
name|set
argument_list|(
operator|new
name|TestClass
argument_list|()
argument_list|)
expr_stmt|;
name|testIface
operator|=
operator|(
name|TestIface
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|ThreadLocalInvocationHandler
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestIface
operator|.
name|class
block|}
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckedExceptionPropagation
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|SocketException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|CHECKED_EXCEPTION_MSG
argument_list|)
expr_stmt|;
name|testIface
operator|.
name|throwCheckedException
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUncheckedExceptionPropagation
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|UNCHECKED_EXCEPTION_MSG
argument_list|)
expr_stmt|;
name|testIface
operator|.
name|throwUncheckedException
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testErrorPropagation
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|AnnotationFormatError
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|ERROR_MSG
argument_list|)
expr_stmt|;
name|testIface
operator|.
name|throwError
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThrowablePropagation
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|THROWABLE_MSG
argument_list|)
expr_stmt|;
name|testIface
operator|.
name|throwThrowable
argument_list|()
expr_stmt|;
block|}
specifier|private
interface|interface
name|TestIface
block|{
name|void
name|throwCheckedException
parameter_list|()
throws|throws
name|Exception
function_decl|;
name|void
name|throwUncheckedException
parameter_list|()
function_decl|;
name|void
name|throwError
parameter_list|()
function_decl|;
name|void
name|throwThrowable
parameter_list|()
throws|throws
name|Throwable
function_decl|;
block|}
specifier|private
class|class
name|TestClass
implements|implements
name|TestIface
block|{
annotation|@
name|Override
specifier|public
name|void
name|throwCheckedException
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|SocketException
argument_list|(
name|CHECKED_EXCEPTION_MSG
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|throwUncheckedException
parameter_list|()
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|UNCHECKED_EXCEPTION_MSG
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|throwError
parameter_list|()
block|{
throw|throw
operator|new
name|AnnotationFormatError
argument_list|(
name|ERROR_MSG
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|throwThrowable
parameter_list|()
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|Throwable
argument_list|(
name|THROWABLE_MSG
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

