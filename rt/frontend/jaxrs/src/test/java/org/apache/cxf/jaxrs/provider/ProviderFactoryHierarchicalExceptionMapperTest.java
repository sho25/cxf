begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ExceptionMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Testcase for CXF-7473  */
end_comment

begin_class
specifier|public
class|class
name|ProviderFactoryHierarchicalExceptionMapperTest
block|{
specifier|private
name|ServerProviderFactory
name|pf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|pf
operator|=
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|pf
operator|.
name|registerUserProvider
argument_list|(
operator|new
name|IllegalArgumentExceptionMapper
argument_list|()
argument_list|)
expr_stmt|;
name|pf
operator|.
name|registerUserProvider
argument_list|(
operator|new
name|IllegalStateExceptionMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptionMapperInHierarchy
parameter_list|()
block|{
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
name|exceptionMapper
init|=
name|pf
operator|.
name|createExceptionMapper
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|exceptionMapper
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong mapper found for IllegalArgumentException"
argument_list|,
name|IllegalArgumentExceptionMapper
operator|.
name|class
argument_list|,
name|exceptionMapper
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleExceptionMapperWhenHierarchyPresent
parameter_list|()
block|{
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
name|exceptionMapper
init|=
name|pf
operator|.
name|createExceptionMapper
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|exceptionMapper
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong mapper found for IllegalStateException"
argument_list|,
name|IllegalStateExceptionMapper
operator|.
name|class
argument_list|,
name|exceptionMapper
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"To be fixed in CXF-7473"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testNoMatch
parameter_list|()
block|{
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
name|exceptionMapper
init|=
name|pf
operator|.
name|createExceptionMapper
argument_list|(
name|UnmappedRuntimeException
operator|.
name|class
argument_list|,
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|exceptionMapper
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
class|class
name|AbstractExceptionMapper
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
implements|implements
name|ExceptionMapper
argument_list|<
name|E
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Response
name|toResponse
parameter_list|(
name|E
name|exception
parameter_list|)
block|{
return|return
name|toResponse0
argument_list|(
name|exception
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|Response
name|toResponse0
parameter_list|(
name|E
name|exception
parameter_list|)
function_decl|;
block|}
specifier|public
class|class
name|IllegalArgumentExceptionMapper
extends|extends
name|AbstractExceptionMapper
argument_list|<
name|IllegalArgumentException
argument_list|>
block|{
annotation|@
name|Override
specifier|protected
name|Response
name|toResponse0
parameter_list|(
name|IllegalArgumentException
name|exception
parameter_list|)
block|{
return|return
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|entity
argument_list|(
literal|"Processed by IllegalArgumentExceptionMapper: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|IllegalStateExceptionMapper
implements|implements
name|ExceptionMapper
argument_list|<
name|IllegalStateException
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Response
name|toResponse
parameter_list|(
name|IllegalStateException
name|exception
parameter_list|)
block|{
return|return
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|entity
argument_list|(
literal|"Processed by IllegalStateExceptionMapper: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|UnmappedRuntimeException
extends|extends
name|RuntimeException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|UnmappedRuntimeException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

