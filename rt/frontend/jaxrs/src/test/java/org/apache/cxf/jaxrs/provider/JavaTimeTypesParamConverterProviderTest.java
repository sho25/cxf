begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|OffsetDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|OffsetTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
class|class
name|JavaTimeTypesParamConverterProviderTest
block|{
name|JavaTimeTypesParamConverterProvider
name|provider
init|=
operator|new
name|JavaTimeTypesParamConverterProvider
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|localDate
parameter_list|()
block|{
name|LocalDate
name|localDate
init|=
name|LocalDate
operator|.
name|of
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|24
argument_list|)
decl_stmt|;
name|ParamConverter
argument_list|<
name|LocalDate
argument_list|>
name|converter
init|=
operator|(
name|ParamConverter
argument_list|<
name|LocalDate
argument_list|>
operator|)
name|provider
operator|.
name|getConverter
argument_list|(
name|localDate
operator|.
name|getClass
argument_list|()
argument_list|,
name|localDate
operator|.
name|getClass
argument_list|()
argument_list|,
name|localDate
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localDate
argument_list|,
name|converter
operator|.
name|fromString
argument_list|(
name|converter
operator|.
name|toString
argument_list|(
name|localDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|invalidLocalDate
parameter_list|()
block|{
name|ParamConverter
argument_list|<
name|LocalDate
argument_list|>
name|converter
init|=
name|provider
operator|.
name|getConverter
argument_list|(
name|LocalDate
operator|.
name|class
argument_list|,
name|LocalDate
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|converter
operator|.
name|fromString
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|localDateTime
parameter_list|()
block|{
name|LocalDateTime
name|localDateTime
init|=
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|24
argument_list|,
literal|5
argument_list|,
literal|55
argument_list|)
decl_stmt|;
name|ParamConverter
argument_list|<
name|LocalDateTime
argument_list|>
name|converter
init|=
operator|(
name|ParamConverter
argument_list|<
name|LocalDateTime
argument_list|>
operator|)
name|provider
operator|.
name|getConverter
argument_list|(
name|localDateTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|localDateTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|localDateTime
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localDateTime
argument_list|,
name|converter
operator|.
name|fromString
argument_list|(
name|converter
operator|.
name|toString
argument_list|(
name|localDateTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|localTime
parameter_list|()
block|{
name|LocalTime
name|localTime
init|=
name|LocalTime
operator|.
name|of
argument_list|(
literal|10
argument_list|,
literal|33
argument_list|)
decl_stmt|;
name|ParamConverter
argument_list|<
name|LocalTime
argument_list|>
name|converter
init|=
operator|(
name|ParamConverter
argument_list|<
name|LocalTime
argument_list|>
operator|)
name|provider
operator|.
name|getConverter
argument_list|(
name|localTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|localTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|localTime
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localTime
argument_list|,
name|converter
operator|.
name|fromString
argument_list|(
name|converter
operator|.
name|toString
argument_list|(
name|localTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|offsetDateTime
parameter_list|()
block|{
name|OffsetDateTime
name|offsetDateTime
init|=
name|OffsetDateTime
operator|.
name|of
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|24
argument_list|,
literal|5
argument_list|,
literal|55
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|ParamConverter
argument_list|<
name|OffsetDateTime
argument_list|>
name|converter
init|=
operator|(
name|ParamConverter
argument_list|<
name|OffsetDateTime
argument_list|>
operator|)
name|provider
operator|.
name|getConverter
argument_list|(
name|offsetDateTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|offsetDateTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|offsetDateTime
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|offsetDateTime
argument_list|,
name|converter
operator|.
name|fromString
argument_list|(
name|converter
operator|.
name|toString
argument_list|(
name|offsetDateTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|offsetTime
parameter_list|()
block|{
name|OffsetTime
name|offsetTime
init|=
name|OffsetTime
operator|.
name|of
argument_list|(
literal|10
argument_list|,
literal|33
argument_list|,
literal|24
argument_list|,
literal|5
argument_list|,
name|ZoneOffset
operator|.
name|ofHours
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ParamConverter
argument_list|<
name|OffsetTime
argument_list|>
name|converter
init|=
operator|(
name|ParamConverter
argument_list|<
name|OffsetTime
argument_list|>
operator|)
name|provider
operator|.
name|getConverter
argument_list|(
name|offsetTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|offsetTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|offsetTime
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|offsetTime
argument_list|,
name|converter
operator|.
name|fromString
argument_list|(
name|converter
operator|.
name|toString
argument_list|(
name|offsetTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|zonedDateTime
parameter_list|()
block|{
name|ZonedDateTime
name|zonedDateTime
init|=
name|ZonedDateTime
operator|.
name|of
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|24
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|,
literal|5
argument_list|,
name|ZoneOffset
operator|.
name|ofHours
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|ParamConverter
argument_list|<
name|ZonedDateTime
argument_list|>
name|converter
init|=
operator|(
name|ParamConverter
argument_list|<
name|ZonedDateTime
argument_list|>
operator|)
name|provider
operator|.
name|getConverter
argument_list|(
name|zonedDateTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|zonedDateTime
operator|.
name|getClass
argument_list|()
argument_list|,
name|zonedDateTime
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|zonedDateTime
argument_list|,
name|converter
operator|.
name|fromString
argument_list|(
name|converter
operator|.
name|toString
argument_list|(
name|zonedDateTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

