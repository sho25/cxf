begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
operator|.
name|BookStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
operator|.
name|UriBuilderWrongAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|UriBuilderImplTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFromUriRelativePath
parameter_list|()
throws|throws
name|Exception
block|{
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|queryParam
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path?a=b"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUriTemplate
parameter_list|()
throws|throws
name|Exception
block|{
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080/{a}/{b}"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|build
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:8080/1/2"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUriTemplate2
parameter_list|()
throws|throws
name|Exception
block|{
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost/{a}/{b}"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|build
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost/1/2"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildWithNonEncodedSubstitutionValue
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/%7B%7D"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildWithNonEncodedSubstitutionValue2
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/%7B%7D"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildWithNonEncodedSubstitutionValue3
parameter_list|()
block|{
name|UriBuilder
name|ub
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|ub
operator|.
name|path
argument_list|(
literal|"{a}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"%"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/%25"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|ub
operator|.
name|path
argument_list|(
literal|"{token}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"%"
argument_list|,
literal|"{}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/%25/%7B%7D"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildWithNonEncodedSubstitutionValue4
parameter_list|()
block|{
name|UriBuilder
name|ub
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|ub
operator|.
name|path
argument_list|(
literal|"{a}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"%"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/%25"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|ub
operator|.
name|path
argument_list|(
literal|"{token}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"%"
argument_list|,
literal|"{}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/%25/%7B%7D"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildWithNonEncodedSubstitutionValue5
parameter_list|()
block|{
name|UriBuilder
name|ub
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"/%25"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|ub
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/%25"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|ub
operator|.
name|replacePath
argument_list|(
literal|"/%/{token}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/%25/%7B%7D"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildWithNonEncodedSubstitutionValue6
parameter_list|()
block|{
name|UriBuilder
name|ub
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|ub
operator|.
name|path
argument_list|(
literal|"%"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/%25"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|ub
operator|.
name|replacePath
argument_list|(
literal|"/%/{token}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/%25/%7B%7D"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildWithNonEncodedSubstitutionValue7
parameter_list|()
block|{
name|UriBuilder
name|ub
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|ub
operator|.
name|replaceQueryParam
argument_list|(
literal|"a"
argument_list|,
literal|"%"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/?a=%25"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|ub
operator|.
name|replaceQueryParam
argument_list|(
literal|"a2"
argument_list|,
literal|"{token}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/?a=%25&a2=%7B%7D"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildWithNonEncodedSubstitutionValue8
parameter_list|()
block|{
name|UriBuilder
name|ub
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|ub
operator|.
name|replaceQueryParam
argument_list|(
literal|"a"
argument_list|,
literal|"%"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/?a=%25"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|ub
operator|.
name|replaceQueryParam
argument_list|(
literal|"a2"
argument_list|,
literal|"{token}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/?a=%25&a2=%7B%7D"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplate
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}"
argument_list|)
operator|.
name|resolveTemplate
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/1"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplate2
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}/{b}"
argument_list|)
operator|.
name|resolveTemplate
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/1/2"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplate3
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}/{b}"
argument_list|)
operator|.
name|resolveTemplate
argument_list|(
literal|"b"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/2/1"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplate4
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}/{b}"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"c"
argument_list|,
literal|"{c}"
argument_list|)
operator|.
name|resolveTemplate
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/1/2?c=3"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplate5
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templs
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|templs
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}/{b}"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"c"
argument_list|,
literal|"{c}"
argument_list|)
operator|.
name|resolveTemplates
argument_list|(
name|templs
argument_list|)
operator|.
name|build
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/1/2?c=3"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplateFromEncoded
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}"
argument_list|)
operator|.
name|resolveTemplate
argument_list|(
literal|"a"
argument_list|,
literal|"%20 "
argument_list|)
operator|.
name|buildFromEncoded
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/%20%20"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplateFromEncodedMap
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"path-rootless%2Ftest2/x%25yz/%2Fpath-absolute%2F%2525test1/fred@example.com/x%25yz"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"v"
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"path-rootless%2Ftest2"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"x%yz"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
operator|new
name|Object
argument_list|()
block|{
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"%2Fpath-absolute%2F%2525test1"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"fred@example.com"
argument_list|)
expr_stmt|;
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{v}/{w}/{x}/{y}/{w}"
argument_list|)
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|resolveTemplatesFromEncoded
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplateFromMap
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}/{b}"
argument_list|)
operator|.
name|resolveTemplate
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|buildFromMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"b"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/1/2"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplateFromMap2
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"path-rootless%2Ftest2/x%25yz/%2Fpath-absolute%2F%2525test1/fred@example.com/x%25yz"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"x%yz"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
operator|new
name|StringBuffer
argument_list|(
literal|"/path-absolute/%25test1"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
operator|new
name|Object
argument_list|()
block|{
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"fred@example.com"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{w}/{x}/{y}/{z}/{x}"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|resolveTemplates
argument_list|(
name|map
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplatesMapBooleanSlashEncoded
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
literal|"path-rootless%2Ftest2/x%25yz/%2Fpath-absolute%2F%2525test1/fred@example.com/x%25yz"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"x%yz"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
operator|new
name|StringBuffer
argument_list|(
literal|"/path-absolute/%25test1"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
operator|new
name|Object
argument_list|()
block|{
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"fred@example.com"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{w}/{x}/{y}/{z}/{x}"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|resolveTemplates
argument_list|(
name|map
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplatesMapBooleanSlashNotEncoded
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
literal|"path-rootless/test2/x%25yz//path-absolute/test1/fred@example.com/x%25yz"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"x%yz"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
operator|new
name|StringBuffer
argument_list|(
literal|"/path-absolute/test1"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
operator|new
name|Object
argument_list|()
block|{
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"fred@example.com"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{w}/{x}/{y}/{z}/{x}"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|resolveTemplates
argument_list|(
name|map
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryParamWithTemplateValues
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/index.jsp"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"a"
argument_list|,
literal|"{a}"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"b"
argument_list|,
literal|"{b}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"valueA"
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/index.jsp?a=valueA&b=valueB"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplateInQuery
parameter_list|()
block|{
name|String
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"my/path"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"qp"
argument_list|,
literal|"{param}"
argument_list|)
operator|.
name|resolveTemplate
argument_list|(
literal|"param"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|toTemplate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my/path?qp=value"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveTemplateInQuery2
parameter_list|()
block|{
name|String
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"my/path?qp={param}"
argument_list|)
operator|.
name|resolveTemplate
argument_list|(
literal|"param"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|toTemplate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my/path?qp=value"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testQueryParamWithMissingTemplateValues
parameter_list|()
block|{
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/index.jsp"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"a"
argument_list|,
literal|"{a}"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"b"
argument_list|,
literal|"{b}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testQueryParamWithMissingTemplateValues2
parameter_list|()
block|{
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/index.jsp"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"a"
argument_list|,
literal|"{a}"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathAndQueryParamWithTemplateValues
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/index{ind}.jsp"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"a"
argument_list|,
literal|"{a}"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"b"
argument_list|,
literal|"{b}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"1"
argument_list|,
literal|"valueA"
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/index1.jsp?a=valueA&b=valueB"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQueryStringWithTemplateValues
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"/index.jsp"
argument_list|)
operator|.
name|replaceQuery
argument_list|(
literal|"a={a}&b={b}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"valueA"
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/index.jsp?a=valueA&b=valueB"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryParamUsingMapWithTemplateValues
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"valueA"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/index.jsp"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"a"
argument_list|,
literal|"{a}"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"b"
argument_list|,
literal|"{b}"
argument_list|)
operator|.
name|buildFromMap
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/index.jsp?a=valueA&b=valueB"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathAndQueryParamUsingMapWithTemplateValues
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"valueA"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"ind"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/index{ind}.jsp"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"a"
argument_list|,
literal|"{a}"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"b"
argument_list|,
literal|"{b}"
argument_list|)
operator|.
name|buildFromMap
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/index1.jsp?a=valueA&b=valueB"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCtorNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|(
operator|(
name|URI
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPathStringNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|path
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCtorAndBuild
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz?query=1#fragment"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
name|uri
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTrailingSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathTrailingSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullPathWithBuildEncoded
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar"
argument_list|)
decl_stmt|;
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"{bar}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullPathWithBuildEncoded2
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar"
argument_list|)
decl_stmt|;
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"{bar}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathTrailingSlash2
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClone
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|clone
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneWithoutLeadingSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"bar/foo"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|clone
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"bar/foo"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneWithLeadingSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"/bar/foo"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|clone
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"/bar/foo"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildWithLeadingSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"/bar/foo"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"/bar/foo"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClonePctEncodedFromUri
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar/foo%20"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|clone
argument_list|()
operator|.
name|buildFromEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/foo%20"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClonePctEncoded
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"{a}"
argument_list|)
operator|.
name|path
argument_list|(
literal|"{b}"
argument_list|)
operator|.
name|matrixParam
argument_list|(
literal|"m"
argument_list|,
literal|"m1 "
argument_list|,
literal|"m2+%20"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"q"
argument_list|,
literal|"q1 "
argument_list|,
literal|"q2+q3%20"
argument_list|)
operator|.
name|clone
argument_list|()
operator|.
name|buildFromEncoded
argument_list|(
literal|"a+ "
argument_list|,
literal|"b%2B%20 "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/a+%20/b%2B%20%20;m=m1%20;m=m2+%20?q=q1+&q=q2%2Bq3%20"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedPathQueryFromExistingURI
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar/foo+%20%2B?q=a+b%20%2B"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|buildFromEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/foo+%20%2B?q=a+b%20%2B"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedPathWithAsteriscs
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar/foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"*"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/foo/*"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathWithAsteriscs
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar/foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"*"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/foo/*"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedPathWithTwoAsteriscs
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar/foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"**"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/foo/**"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathWithTwoAsteriscs
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar/foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"**"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/foo/**"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedAddedQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"q"
argument_list|,
literal|"a+b%20%2B"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar?q=a%2Bb%20%2B"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithNoValue
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"q"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar?q"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatrixWithNoValue
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar/foo"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|matrixParam
argument_list|(
literal|"q"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/foo;q"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatrixWithSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar/foo"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|matrixParam
argument_list|(
literal|"q"
argument_list|,
literal|"1/2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://bar/foo;q=1%2F2"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceMatrixParamWithEmptyPathTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"name"
decl_stmt|;
name|String
name|expected
init|=
literal|"http://localhost:8080;name=x;name=y;name=y%20x;name=x%25y;name=%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080;name=x=;name=y?;name=x y;name=&"
argument_list|)
operator|.
name|replaceMatrixParam
argument_list|(
name|name
argument_list|,
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"y x"
argument_list|,
literal|"x%y"
argument_list|,
literal|"%20"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceMatrixWithEmptyPathTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080;name=x;name=y;name=y%20x;name=x%25y;name=%20"
decl_stmt|;
name|String
name|value
init|=
literal|"name=x;name=y;name=y x;name=x%y;name= "
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080;name=x=;name=y?;name=x y;name=&"
argument_list|)
operator|.
name|replaceMatrix
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMatrixToEmptyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"name"
decl_stmt|;
name|String
name|expected
init|=
literal|"http://localhost:8080;name=x;name=y"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|matrixParam
argument_list|(
name|name
argument_list|,
literal|"x"
argument_list|,
literal|"y"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSchemeSpecificPart
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|scheme
argument_list|(
literal|"https"
argument_list|)
operator|.
name|schemeSpecificPart
argument_list|(
literal|"//localhost:8080/foo/bar"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"https://localhost:8080/foo/bar"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpaqueSchemeSpecificPart
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|expectedUri
init|=
operator|new
name|URI
argument_list|(
literal|"mailto:javanet@java.net.com"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|scheme
argument_list|(
literal|"mailto"
argument_list|)
operator|.
name|schemeSpecificPart
argument_list|(
literal|"javanet@java.net.com"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
name|expectedUri
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplacePath
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz;m1=m1value"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replacePath
argument_list|(
literal|"/newpath"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://foo/newpath"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplacePathHttpString
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz;m1=m1value"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replacePath
argument_list|(
literal|"httppnewpath"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://foo/httppnewpath"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceNullPath
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz;m1=m1value"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replacePath
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
literal|"http://foo"
argument_list|,
name|newUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUriNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
operator|(
name|URI
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUri
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz?query=1#fragment"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
name|uri
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildValues
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{b}/{a}/{b}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://zzz/foo/bar/foo"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBuildMissingValues
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{b}/{a}/{b}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBuildMissingValues2
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{b}"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildValueWithBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{a}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"{foo}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://zzz/%7Bfoo%7D"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildValuesPct
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{a}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"foo%25/bar%"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://zzz/foo%2525%2Fbar%25"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildValuesPctEncoded
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{a}/{b}/{c}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"foo%25"
argument_list|,
literal|"bar%"
argument_list|,
literal|"baz%20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://zzz/foo%25/bar%25/baz%20"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildFromMapValues
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|immutable
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{b}/{a}/{b}"
argument_list|)
operator|.
name|buildFromMap
argument_list|(
name|immutable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://zzz/foo/bar/foo"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBuildFromMapMissingValues
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|immutable
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
decl_stmt|;
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{b}/{a}/{b}"
argument_list|)
operator|.
name|buildFromMap
argument_list|(
name|immutable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildFromMapValueWithBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"{foo}"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|immutable
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{a}"
argument_list|)
operator|.
name|buildFromMap
argument_list|(
name|immutable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://zzz/%7Bfoo%7D"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildFromMapValuesPct
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo%25/bar%"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|immutable
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{a}"
argument_list|)
operator|.
name|buildFromMap
argument_list|(
name|immutable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://zzz/foo%2525%2Fbar%25"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildFromMapValuesPctEncoded
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://zzz"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo%25"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"bar%"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|immutable
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{a}/{b}"
argument_list|)
operator|.
name|buildFromEncodedMap
argument_list|(
name|immutable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://zzz/foo%25/bar%25"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildFromEncodedMapComplex
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|maps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|"x%20yz"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"/path-absolute/%test1"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|"fred@example.com"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|String
name|expectedPath
init|=
literal|"path-rootless/test2/x%20yz//path-absolute/%25test1/fred@example.com/x%20yz"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{w}/{x}/{y}/{z}/{x}"
argument_list|)
operator|.
name|buildFromEncodedMap
argument_list|(
name|maps
argument_list|)
decl_stmt|;
name|String
name|rawPath
init|=
name|uri
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|rawPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildFromEncodedMapComplex2
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|maps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|"x%yz"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"/path-absolute/test1"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|"fred@example.com"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"u"
argument_list|,
literal|"extra"
argument_list|)
expr_stmt|;
name|String
name|expectedPath
init|=
literal|"path-rootless/test2/x%25yz//path-absolute/test1/fred@example.com/x%25yz"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{w}/{x}/{y}/{z}/{x}"
argument_list|)
operator|.
name|buildFromEncodedMap
argument_list|(
name|maps
argument_list|)
decl_stmt|;
name|String
name|rawPath
init|=
name|uri
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|rawPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildFromEncodedMapMultipleTimes
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|maps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|"x%yz"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"/path-absolute/test1"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|"fred@example.com"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|maps1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maps1
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|"x%20yz"
argument_list|)
expr_stmt|;
name|maps1
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"/path-absolute/test1"
argument_list|)
expr_stmt|;
name|maps1
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|"fred@example.com"
argument_list|)
expr_stmt|;
name|maps1
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|maps2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maps2
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|"x%yz"
argument_list|)
expr_stmt|;
name|maps2
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"/path-absolute/test1"
argument_list|)
expr_stmt|;
name|maps2
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|"fred@example.com"
argument_list|)
expr_stmt|;
name|maps2
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|maps2
operator|.
name|put
argument_list|(
literal|"v"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
name|String
name|expectedPath
init|=
literal|"path-rootless/test2/x%25yz//path-absolute/test1/fred@example.com/x%25yz"
decl_stmt|;
name|String
name|expectedPath1
init|=
literal|"path-rootless/test2/x%20yz//path-absolute/test1/fred@example.com/x%20yz"
decl_stmt|;
name|String
name|expectedPath2
init|=
literal|"path-rootless/test2/x%25yz//path-absolute/test1/fred@example.com/x%25yz"
decl_stmt|;
name|UriBuilder
name|ub
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{w}/{x}/{y}/{z}/{x}"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|ub
operator|.
name|buildFromEncodedMap
argument_list|(
name|maps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|uri
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|ub
operator|.
name|buildFromEncodedMap
argument_list|(
name|maps1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPath1
argument_list|,
name|uri
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|ub
operator|.
name|buildFromEncodedMap
argument_list|(
name|maps2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPath2
argument_list|,
name|uri
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBuildFromEncodedMapWithNullValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|maps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{x}/{y}"
argument_list|)
operator|.
name|buildFromEncodedMap
argument_list|(
name|maps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPath
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
name|newUri
operator|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|path
argument_list|(
literal|"1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz/1/2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPathSlashes
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/bar"
argument_list|)
operator|.
name|path
argument_list|(
literal|"baz/"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/blah/"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz/blah/"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPathSlashes2
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/bar///baz"
argument_list|)
operator|.
name|path
argument_list|(
literal|"blah//"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz/blah/"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPathSlashes3
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"/bar/"
argument_list|)
operator|.
name|path
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/baz"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPathClass
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
name|BookStore
operator|.
name|class
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bookstore/"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPathClassNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|path
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPathClassNoAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|path
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPathClassMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
name|BookStore
operator|.
name|class
argument_list|)
operator|.
name|path
argument_list|(
name|BookStore
operator|.
name|class
argument_list|,
literal|"updateBook"
argument_list|)
operator|.
name|path
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bookstore/books/bar"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPathClassMethodNull1
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|path
argument_list|(
literal|null
argument_list|,
literal|"methName"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPathClassMethodNull2
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|path
argument_list|(
name|BookStore
operator|.
name|class
argument_list|,
literal|null
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPathClassMethodTooMany
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|path
argument_list|(
name|UriBuilderWrongAnnotations
operator|.
name|class
argument_list|,
literal|"overloaded"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPathClassMethodTooLess
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|path
argument_list|(
name|BookStore
operator|.
name|class
argument_list|,
literal|"nonexistingMethod"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPathMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|meth
init|=
name|BookStore
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"updateBook"
argument_list|,
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
name|meth
argument_list|)
operator|.
name|path
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/books/bar"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPathMethodNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|path
argument_list|(
operator|(
name|Method
operator|)
literal|null
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPathMethodNoAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|noAnnot
init|=
name|BookStore
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getBook"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|path
argument_list|(
name|noAnnot
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSchemeHostPortQueryFragment
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo:1234/bar?n1=v1&n2=v2#fragment"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|scheme
argument_list|(
literal|"http"
argument_list|)
operator|.
name|host
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|port
argument_list|(
literal|1234
argument_list|)
operator|.
name|path
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"n1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"n2"
argument_list|,
literal|"v2"
argument_list|)
operator|.
name|fragment
argument_list|(
literal|"fragment"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|compareURIs
argument_list|(
name|uri
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQueryNull
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1&p2=v2"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceQuery
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQueryWithNull2
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"name"
argument_list|,
literal|"x="
argument_list|,
literal|"y?"
argument_list|,
literal|"x y"
argument_list|,
literal|"&"
argument_list|)
operator|.
name|replaceQuery
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQueryEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1&p2=v2"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceQuery
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceQuery
argument_list|(
literal|"p1=nv1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=nv1"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQuery2
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceQuery
argument_list|(
literal|"p1=nv1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=nv1"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQuery3
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080?name1=xyz"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"name"
argument_list|,
literal|"x="
argument_list|,
literal|"y?"
argument_list|,
literal|"x y"
argument_list|,
literal|"&"
argument_list|)
operator|.
name|replaceQuery
argument_list|(
literal|"name1=xyz"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromPathUriOnly
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testQueryParamNameNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|queryParam
argument_list|(
literal|null
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testQueryParamNullVal
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|queryParam
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|null
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullQueryParamValues
parameter_list|()
block|{
try|try
block|{
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"hello"
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should be IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryParamSameNameAndVal
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"p1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1&p1=v1"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryParamVal
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"p2"
argument_list|,
literal|"v2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1&p2=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryParamSameNameDiffVal
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"p1"
argument_list|,
literal|"v2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1&p1=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryParamMultiVal
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"p1"
argument_list|,
literal|"v2"
argument_list|,
literal|"v3"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1&p1=v2&p1=v3"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testReplaceQueryParamNameNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|replaceQueryParam
argument_list|(
literal|null
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQueryParamValNull
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1&p2=v2&p1=v3"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceQueryParam
argument_list|(
literal|"p1"
argument_list|,
operator|(
name|Object
operator|)
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p2=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQueryParamValEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1&p2=v2&p1=v3"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceQueryParam
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p2=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQueryParamExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceQueryParam
argument_list|(
literal|"p1"
argument_list|,
literal|"nv1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=nv1"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceQueryParamExistingMulti
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=v1&p2=v2"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceQueryParam
argument_list|(
literal|"p1"
argument_list|,
literal|"nv1"
argument_list|,
literal|"nv2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar?p1=nv1&p1=nv2&p2=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceMatrixNull
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p2=v2"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceMatrix
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceMatrixEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p2=v2"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceMatrix
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceMatrix
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p2=v2"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceMatrix
argument_list|(
literal|"p1=nv1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=nv1"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceMatrix2
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceMatrix
argument_list|(
literal|"p1=nv1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar/;p1=nv1"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMatrixParamNameNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|matrixParam
argument_list|(
literal|null
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMatrixParamNullVal
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|matrixParam
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|null
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatrixParamSameNameAndVal
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|matrixParam
argument_list|(
literal|"p1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p1=v1"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatrixParamNewNameAndVal
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|matrixParam
argument_list|(
literal|"p2"
argument_list|,
literal|"v2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p2=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatrixParamSameNameDiffVal
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|matrixParam
argument_list|(
literal|"p1"
argument_list|,
literal|"v2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p1=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatrixParamMultiSameNameNewVals
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|matrixParam
argument_list|(
literal|"p1"
argument_list|,
literal|"v2"
argument_list|,
literal|"v3"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p1=v2;p1=v3"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPctEncodedMatrixParam
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|matrixParam
argument_list|(
literal|"p1"
argument_list|,
literal|"v1%20"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1%20"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testReplaceMatrixParamNameNull
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|replaceMatrixParam
argument_list|(
literal|null
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceMatrixParamValNull
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p2=v2;p1=v3?noise=bazzz"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceMatrixParam
argument_list|(
literal|"p1"
argument_list|,
operator|(
name|Object
operator|)
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p2=v2?noise=bazzz"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceMatrixParamValEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p2=v2;p1=v3?noise=bazzz"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceMatrixParam
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p2=v2?noise=bazzz"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceMatrixParamExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceMatrixParam
argument_list|(
literal|"p1"
argument_list|,
literal|"nv1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=nv1"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceMatrixParamExistingMulti
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=v1;p2=v2"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceMatrixParam
argument_list|(
literal|"p1"
argument_list|,
literal|"nv1"
argument_list|,
literal|"nv2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://foo/bar;p1=nv1;p1=nv2;p2=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatrixNonFinalPathSegment
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://blah/foo;p1=v1/bar"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://blah/foo;p1=v1/bar"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatrixFinalPathSegment
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://blah/foo;p1=v1/bar;p2=v2"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://blah/foo;p1=v1/bar;p2=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPathWithMatrix
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://blah/foo/bar;p1=v1"
argument_list|)
decl_stmt|;
name|URI
name|newUri
init|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
operator|.
name|path
argument_list|(
literal|"baz;p2=v2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI is not built correctly"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://blah/foo/bar;p1=v1/baz;p2=v2"
argument_list|)
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonHttpSchemes
parameter_list|()
block|{
name|String
index|[]
name|uris
init|=
block|{
literal|"ftp://ftp.is.co.za/rfc/rfc1808.txt"
block|,
literal|"mailto:java-net@java.sun.com"
block|,
literal|"news:comp.lang.java"
block|,
literal|"urn:isbn:096139212y"
block|,
literal|"ldap://[2001:db8::7]/c=GB?objectClass?one"
block|,
literal|"telnet://194.1.2.17:81/"
block|,
literal|"tel:+1-816-555-1212"
block|,
literal|"foo://bar.com:8042/there/here?name=baz#brr"
block|}
decl_stmt|;
name|int
name|expectedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uris
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|uris
index|[
name|i
index|]
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Strange"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|uris
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|expectedCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareURIs
parameter_list|(
name|URI
name|uri1
parameter_list|,
name|URI
name|uri2
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected scheme"
argument_list|,
name|uri1
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri2
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected host"
argument_list|,
name|uri1
operator|.
name|getHost
argument_list|()
argument_list|,
name|uri2
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected port"
argument_list|,
name|uri1
operator|.
name|getPort
argument_list|()
argument_list|,
name|uri2
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected path"
argument_list|,
name|uri1
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected fragment"
argument_list|,
name|uri1
operator|.
name|getFragment
argument_list|()
argument_list|,
name|uri2
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queries1
init|=
name|JAXRSUtils
operator|.
name|getStructuredParams
argument_list|(
name|uri1
operator|.
name|getRawQuery
argument_list|()
argument_list|,
literal|"&"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queries2
init|=
name|JAXRSUtils
operator|.
name|getStructuredParams
argument_list|(
name|uri2
operator|.
name|getRawQuery
argument_list|()
argument_list|,
literal|"&"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected queries"
argument_list|,
name|queries1
argument_list|,
name|queries2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTck1
parameter_list|()
block|{
name|String
name|value
init|=
literal|"test1#test2"
decl_stmt|;
name|String
name|expected
init|=
literal|"test1%23test2"
decl_stmt|;
name|String
name|path
init|=
literal|"{arg1}"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path
argument_list|)
operator|.
name|build
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullPathValue
parameter_list|()
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
literal|"{arg1}"
decl_stmt|;
try|try
block|{
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path
argument_list|)
operator|.
name|build
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should be IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFragment
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"test#abc"
decl_stmt|;
name|String
name|path
init|=
literal|"test"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path
argument_list|)
operator|.
name|fragment
argument_list|(
literal|"abc"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFragmentTemplate
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"abc#xyz"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"{arg1}"
argument_list|)
operator|.
name|fragment
argument_list|(
literal|"{arg2}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"abc"
argument_list|,
literal|"xyz"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSegments
parameter_list|()
block|{
name|String
name|path1
init|=
literal|"ab"
decl_stmt|;
name|String
index|[]
name|path2
init|=
block|{
literal|"a1"
block|,
literal|"x/y"
block|,
literal|"3b "
block|}
decl_stmt|;
name|String
name|expected
init|=
literal|"ab/a1/x%2Fy/3b%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path1
argument_list|)
operator|.
name|segment
argument_list|(
name|path2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSegments2
parameter_list|()
block|{
name|String
name|path1
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|path2
init|=
block|{
literal|"a1"
block|,
literal|"/"
block|,
literal|"3b "
block|}
decl_stmt|;
name|String
name|expected
init|=
literal|"a1/%2F/3b%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path1
argument_list|)
operator|.
name|segment
argument_list|(
name|path2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSegments3
parameter_list|()
block|{
name|String
name|path1
init|=
literal|"ab"
decl_stmt|;
name|String
index|[]
name|path2
init|=
block|{
literal|"a1"
block|,
literal|"{xy}"
block|,
literal|"3b "
block|}
decl_stmt|;
name|String
name|expected
init|=
literal|"ab/a1/x%2Fy/3b%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path1
argument_list|)
operator|.
name|segment
argument_list|(
name|path2
argument_list|)
operator|.
name|build
argument_list|(
literal|"x/y"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToTemplate
parameter_list|()
block|{
name|String
name|path1
init|=
literal|"ab"
decl_stmt|;
name|String
index|[]
name|path2
init|=
block|{
literal|"a1"
block|,
literal|"{xy}"
block|,
literal|"3b "
block|}
decl_stmt|;
name|String
name|expected
init|=
literal|"ab/a1/{xy}/3b%20"
decl_stmt|;
name|String
name|template
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path1
argument_list|)
operator|.
name|segment
argument_list|(
name|path2
argument_list|)
operator|.
name|toTemplate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|template
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToTemplateAndResolved
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templs
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|templs
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|String
name|template
init|=
operator|(
operator|(
name|UriBuilderImpl
operator|)
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/{a}/{b}"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"c"
argument_list|,
literal|"{c}"
argument_list|)
operator|)
operator|.
name|resolveTemplates
argument_list|(
name|templs
argument_list|)
operator|.
name|toTemplate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/1/2?c={c}"
argument_list|,
name|template
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSegments4
parameter_list|()
block|{
name|String
name|path1
init|=
literal|"ab"
decl_stmt|;
name|String
index|[]
name|path2
init|=
block|{
literal|"a1"
block|,
literal|"{xy}"
block|,
literal|"3b "
block|}
decl_stmt|;
name|String
name|expected
init|=
literal|"ab/a1/x/y/3b%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path1
argument_list|)
operator|.
name|segment
argument_list|(
name|path2
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"x/y"
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathEncodedSlash
parameter_list|()
block|{
name|String
name|path1
init|=
literal|"ab"
decl_stmt|;
name|String
name|path2
init|=
literal|"{xy}"
decl_stmt|;
name|String
name|expected
init|=
literal|"ab/x%2Fy"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path1
argument_list|)
operator|.
name|path
argument_list|(
name|path2
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"x/y"
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathEncodedSlashNot
parameter_list|()
block|{
name|String
name|path1
init|=
literal|"ab"
decl_stmt|;
name|String
name|path2
init|=
literal|"{xy}"
decl_stmt|;
name|String
name|expected
init|=
literal|"ab/x/y"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
name|path1
argument_list|)
operator|.
name|path
argument_list|(
name|path2
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"x/y"
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidUriReplacement
parameter_list|()
throws|throws
name|Exception
block|{
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"news:comp.lang.java"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|uri
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"IAE exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullSegment
parameter_list|()
block|{
try|try
block|{
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|segment
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should be IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidPort
parameter_list|()
block|{
try|try
block|{
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080/some/path?name=foo"
argument_list|)
operator|.
name|port
argument_list|(
operator|-
literal|10
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should be IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResetPort
parameter_list|()
block|{
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080/some/path"
argument_list|)
operator|.
name|port
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost/some/path"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidHost
parameter_list|()
block|{
try|try
block|{
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080/some/path?name=foo"
argument_list|)
operator|.
name|host
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should be IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromEncodedDuplicateVar2
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/xy/%20/%25/xy"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{x}/{y}/{z}/{x}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"xy"
argument_list|,
literal|" "
argument_list|,
literal|"%"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromEncodedDuplicateVar3
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/1/2/3/1"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{a}/{b}/{c}/{a}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromEncodedDuplicateVarReplacePath
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/1/2/3/1"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|replacePath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{a}/{b}/{c}/{a}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullScheme
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"localhost:8080"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|scheme
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullMapValue
parameter_list|()
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|maps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"/path-absolute/test1"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|"fred@example.com"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"u"
argument_list|,
literal|"extra"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{w}/{x}/{y}/{z}/{x}"
argument_list|)
operator|.
name|buildFromMap
argument_list|(
name|maps
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should be IllegalArgumentException.  Not return "
operator|+
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingMapValue
parameter_list|()
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|maps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"/path-absolute/test1"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|"fred@example.com"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"w"
argument_list|,
literal|"path-rootless/test2"
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"u"
argument_list|,
literal|"extra"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|""
argument_list|)
operator|.
name|path
argument_list|(
literal|"{w}/{v}/{x}/{y}/{z}/{x}"
argument_list|)
operator|.
name|buildFromMap
argument_list|(
name|maps
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should be IllegalArgumentException.  Not return "
operator|+
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromEncodedDuplicateVar
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/a/%25/=/%25G0/%25/="
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/{v}/{w}/{x}/{y}/{z}/{x}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"a"
argument_list|,
literal|"%25"
argument_list|,
literal|"="
argument_list|,
literal|"%G0"
argument_list|,
literal|"%"
argument_list|,
literal|"23"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleUriSchemes
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
decl_stmt|;
name|String
index|[]
name|urisOriginal
init|=
block|{
literal|"ftp://ftp.is.co.za/rfc/rfc1808.txt"
block|,
literal|"ftp://ftp.is.co.za/rfc/rfc1808.txt"
block|,
literal|"mailto:java-net@java.sun.com"
block|,
literal|"mailto:java-net@java.sun.com"
block|,
literal|"news:comp.lang.java"
block|,
literal|"news:comp.lang.java"
block|,
literal|"urn:isbn:096139210x"
block|,
literal|"http://www.ietf.org/rfc/rfc2396.txt"
block|,
literal|"http://www.ietf.org/rfc/rfc2396.txt"
block|,
literal|"ldap://[2001:db8::7]/c=GB?objectClass?one"
block|,
literal|"ldap://[2001:db8::7]/c=GB?objectClass?one"
block|,
literal|"tel:+1-816-555-1212"
block|,
literal|"tel:+1-816-555-1212"
block|,
literal|"telnet://192.0.2.16:80/"
block|,
literal|"telnet://192.0.2.16:80/"
block|,
literal|"foo://example.com:8042/over/there?name=ferret#nose"
block|,
literal|"foo://example.com:8042/over/there?name=ferret#nose"
block|}
decl_stmt|;
name|URI
index|[]
name|urisReplace
init|=
operator|new
name|URI
index|[
name|urisOriginal
operator|.
name|length
index|]
decl_stmt|;
name|urisReplace
index|[
literal|0
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|"http"
argument_list|,
literal|"//ftp.is.co.za/rfc/rfc1808.txt"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|1
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|"ftp.is.co.za"
argument_list|,
literal|"/test/rfc1808.txt"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|2
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|"mailto"
argument_list|,
literal|"java-net@java.sun.com"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|3
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|"testuser@sun.com"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|4
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|"http"
argument_list|,
literal|"//comp.lang.java"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|5
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|"news.lang.java"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|6
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|"urn:isbn:096139210x"
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|7
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|"//www.ietf.org/rfc/rfc2396.txt"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|8
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|"www.ietf.org"
argument_list|,
literal|"/rfc/rfc2396.txt"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|9
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|"ldap"
argument_list|,
literal|"//[2001:db8::7]/c=GB?objectClass?one"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|10
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|"//[2001:db8::7]/c=GB?objectClass?one"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|11
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|"tel"
argument_list|,
literal|"+1-816-555-1212"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|12
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|"+1-866-555-1212"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|13
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|"telnet"
argument_list|,
literal|"//192.0.2.16:80/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|14
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|"//192.0.2.16:81/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|15
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|"http"
argument_list|,
literal|"//example.com:8042/over/there?name=ferret"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|urisReplace
index|[
literal|16
index|]
operator|=
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|"//example.com:8042/over/there?name=ferret"
argument_list|,
literal|"mouth"
argument_list|)
expr_stmt|;
name|String
index|[]
name|urisExpected
init|=
block|{
literal|"http://ftp.is.co.za/rfc/rfc1808.txt"
block|,
literal|"ftp://ftp.is.co.za/test/rfc1808.txt"
block|,
literal|"mailto:java-net@java.sun.com"
block|,
literal|"mailto:testuser@sun.com"
block|,
literal|"http://comp.lang.java"
block|,
literal|"news:news.lang.java"
block|,
literal|"urn:isbn:096139210x"
block|,
literal|"http://www.ietf.org/rfc/rfc2396.txt"
block|,
literal|"http://www.ietf.org/rfc/rfc2396.txt"
block|,
literal|"ldap://[2001:db8::7]/c=GB?objectClass?one"
block|,
literal|"ldap://[2001:db8::7]/c=GB?objectClass?one"
block|,
literal|"tel:+1-816-555-1212"
block|,
literal|"tel:+1-866-555-1212"
block|,
literal|"telnet://192.0.2.16:80/"
block|,
literal|"telnet://192.0.2.16:81/"
block|,
literal|"http://example.com:8042/over/there?name=ferret#nose"
block|,
literal|"foo://example.com:8042/over/there?name=ferret#mouth"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urisOriginal
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|uri
operator|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
operator|new
name|URI
argument_list|(
name|urisOriginal
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|uri
argument_list|(
name|urisReplace
index|[
name|i
index|]
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|urisExpected
index|[
name|i
index|]
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Problem replacing "
operator|+
name|urisOriginal
index|[
name|i
index|]
operator|+
literal|" with "
operator|+
name|urisReplace
index|[
name|i
index|]
operator|+
literal|", index "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodingQueryParamFromBuild
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expectedValue
init|=
literal|"http://localhost:8080?name=x%3D&name=y?&name=x+y&name=%26"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"name"
argument_list|,
literal|"x="
argument_list|,
literal|"y?"
argument_list|,
literal|"x y"
argument_list|,
literal|"&"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceParamAndEncodeQueryParamFromBuild
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expectedValue
init|=
literal|"http://localhost:8080?name=x&name=y&name=y+x&name=x%25y&name=%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"name"
argument_list|,
literal|"x="
argument_list|,
literal|"y?"
argument_list|,
literal|"x y"
argument_list|,
literal|"&"
argument_list|)
operator|.
name|replaceQueryParam
argument_list|(
literal|"name"
argument_list|,
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"y x"
argument_list|,
literal|"x%y"
argument_list|,
literal|"%20"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceStringAndEncodeQueryParamFromBuild
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080?name1=x&name2=%20&name3=x+y&name4=23&name5=x%20y"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"name"
argument_list|,
literal|"x="
argument_list|,
literal|"y?"
argument_list|,
literal|"x y"
argument_list|,
literal|"&"
argument_list|)
operator|.
name|replaceQuery
argument_list|(
literal|"name1=x&name2=%20&name3=x+y&name4=23&name5=x y"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathParamSpaceBuild
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/name/%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"name/%20"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathParamSpaceBuild2
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/name/%2520"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"name/{value}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"%20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathParamSpaceBuild3
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/name%20space"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"name space"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathParamSpaceBuild4
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/name%20space"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"name space"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromUriWithMatrix
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/name;a=b"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080/name;a=b"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathParamSpaceBuildEncoded
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/name/%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"name/%20"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathParamSpaceBuildEncoded2
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080/name/%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|path
argument_list|(
literal|"name/{value}"
argument_list|)
operator|.
name|buildFromEncoded
argument_list|(
literal|"%20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryParamSpaceBuild
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080?name=%20"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"name"
argument_list|,
literal|"%20"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryParamSpaceBuild2
parameter_list|()
block|{
name|String
name|expected
init|=
literal|"http://localhost:8080?name=%2520"
decl_stmt|;
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:8080"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"name"
argument_list|,
literal|"{value}"
argument_list|)
operator|.
name|build
argument_list|(
literal|"%20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromMethod
parameter_list|()
block|{
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromMethod
argument_list|(
name|TestPath
operator|.
name|class
argument_list|,
literal|"headSub"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/sub"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testURItoStringMatchesOriginalURI
parameter_list|()
block|{
name|String
index|[]
name|uriStrings
init|=
operator|new
name|String
index|[]
block|{
literal|"mailto:bob@apache.org"
block|,
literal|"news:comp.lang.java"
block|,
literal|"urn:isbn:096139210x"
block|,
literal|"docs/guide/collections/designfaq.html#28"
block|,
literal|"../../../demo/jfc/SwingSet2/src/SwingSet2.java"
block|,
literal|"file:///~/calendar"
block|,
literal|"bob@somehost.com"
block|,
literal|"http://localhost/somePath"
block|,
literal|"http://localhost:1234/someOtherPath"
block|,
literal|"http://127.0.0.1"
block|,
literal|"http://127.0.0.1/"
block|,
literal|"http://127.0.0.1/index.html"
block|,
literal|"myscheme://a.host:7575/"
block|,
literal|"myscheme://not.really.a.host:fakePort/"
block|}
decl_stmt|;
for|for
control|(
name|String
name|uriString
range|:
name|uriStrings
control|)
block|{
name|URI
name|uri
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|uriString
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|uriString
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testURIWithExtraPathMatchesOriginalURIPlusPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"mailto:bob@apache.org"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"mailto:bob@apache.org"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"news:comp.lang.java"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"news:comp.lang.java"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:isbn:096139210x"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"urn:isbn:096139210x"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"docs/guide/collections/designfaq.html/extra#28"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"docs/guide/collections/designfaq.html#28"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"../../../demo/jfc/SwingSet2/src/SwingSet2.java/extra"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"../../../demo/jfc/SwingSet2/src/SwingSet2.java"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file:///~/calendar/extra"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"file:///~/calendar"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bob@somehost.com/extra"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"bob@somehost.com"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost/somePath/extra"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost/somePath"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:1234/someOtherPath/extra"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://localhost:1234/someOtherPath"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://127.0.0.1/extra"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://127.0.0.1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://127.0.0.1/extra"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://127.0.0.1/"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://127.0.0.1/index.html/extra"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"http://127.0.0.1/index.html"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myscheme://a.host:7575/extra"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"myscheme://a.host:7575/"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// note that this will use the scheme specific part of the URI, as opposed to host, port and path,
comment|// and therefore the extra path will not be appended. URI uses an int for the port, and therefore
comment|// will not parse the "fakePort" part of this URI as a port.
name|assertEquals
argument_list|(
literal|"myscheme://not.really.a.host:fakePort/"
argument_list|,
name|UriBuilder
operator|.
name|fromUri
argument_list|(
literal|"myscheme://not.really.a.host:fakePort/"
argument_list|)
operator|.
name|path
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testURIWithNonIntegerPort
parameter_list|()
block|{
name|String
name|url
init|=
literal|"myscheme://not.really.a.host:port/"
decl_stmt|;
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|url
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/TestPath"
argument_list|)
specifier|public
specifier|static
class|class
name|TestPath
block|{
annotation|@
name|GET
specifier|public
name|Response
name|getPlain
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/sub"
argument_list|)
specifier|public
name|Response
name|headSub
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"sub1"
argument_list|)
specifier|public
name|Response
name|test1
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Path
argument_list|(
name|value
operator|=
literal|"/sub2"
argument_list|)
specifier|public
name|Response
name|test1
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"testName"
argument_list|)
name|String
name|test
parameter_list|)
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
name|test
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

