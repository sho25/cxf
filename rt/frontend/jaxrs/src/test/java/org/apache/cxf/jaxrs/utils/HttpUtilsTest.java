begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|HttpUtilsTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testUrlDecode
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"+ "
argument_list|,
name|HttpUtils
operator|.
name|urlDecode
argument_list|(
literal|"%2B+"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDateHeader
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|HttpUtils
operator|.
name|isDateRelatedHeader
argument_list|(
name|HttpHeaders
operator|.
name|ETAG
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HttpUtils
operator|.
name|isDateRelatedHeader
argument_list|(
name|HttpHeaders
operator|.
name|EXPIRES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HttpUtils
operator|.
name|isDateRelatedHeader
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HttpUtils
operator|.
name|isDateRelatedHeader
argument_list|(
name|HttpHeaders
operator|.
name|IF_UNMODIFIED_SINCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HttpUtils
operator|.
name|isDateRelatedHeader
argument_list|(
name|HttpHeaders
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HttpUtils
operator|.
name|isDateRelatedHeader
argument_list|(
name|HttpHeaders
operator|.
name|LAST_MODIFIED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUrlEncode
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"%2B+"
argument_list|,
name|HttpUtils
operator|.
name|urlEncode
argument_list|(
literal|"+ "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathEncode
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"+%20"
argument_list|,
name|HttpUtils
operator|.
name|pathEncode
argument_list|(
literal|"+ "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testURLEncode
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"%2B+"
argument_list|,
name|HttpUtils
operator|.
name|urlEncode
argument_list|(
literal|"+ "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUrlDecodeReserved
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"!$&'()*,;="
argument_list|,
name|HttpUtils
operator|.
name|urlDecode
argument_list|(
literal|"!$&'()*,;="
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathDecode
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"+++"
argument_list|,
name|HttpUtils
operator|.
name|pathDecode
argument_list|(
literal|"+%2B+"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathToMatch
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|HttpUtils
operator|.
name|getPathToMatch
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|HttpUtils
operator|.
name|getPathToMatch
argument_list|(
literal|"/"
argument_list|,
literal|"/bar"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|HttpUtils
operator|.
name|getPathToMatch
argument_list|(
literal|"/bar"
argument_list|,
literal|"/bar/"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/bar"
argument_list|,
name|HttpUtils
operator|.
name|getPathToMatch
argument_list|(
literal|"/bar"
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|HttpUtils
operator|.
name|getPathToMatch
argument_list|(
literal|"/bar"
argument_list|,
literal|"/bar"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/bar"
argument_list|,
name|HttpUtils
operator|.
name|getPathToMatch
argument_list|(
literal|"/baz/bar"
argument_list|,
literal|"/baz"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/baz/bar/foo/"
argument_list|,
name|HttpUtils
operator|.
name|getPathToMatch
argument_list|(
literal|"/baz/bar/foo/"
argument_list|,
literal|"/bar"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePath
parameter_list|()
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
operator|new
name|ExchangeImpl
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
literal|"http://localhost/"
argument_list|)
expr_stmt|;
name|HttpUtils
operator|.
name|updatePath
argument_list|(
name|m
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/bar"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
argument_list|)
expr_stmt|;
name|HttpUtils
operator|.
name|updatePath
argument_list|(
name|m
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/bar"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
argument_list|)
expr_stmt|;
name|HttpUtils
operator|.
name|updatePath
argument_list|(
name|m
argument_list|,
literal|"bar/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/bar/"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
literal|"http://localhost"
argument_list|)
expr_stmt|;
name|HttpUtils
operator|.
name|updatePath
argument_list|(
name|m
argument_list|,
literal|"bar/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/bar/"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParameterErrorStatus
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|HttpUtils
operator|.
name|getParameterFailureStatus
argument_list|(
name|ParameterType
operator|.
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|HttpUtils
operator|.
name|getParameterFailureStatus
argument_list|(
name|ParameterType
operator|.
name|QUERY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|HttpUtils
operator|.
name|getParameterFailureStatus
argument_list|(
name|ParameterType
operator|.
name|MATRIX
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|HttpUtils
operator|.
name|getParameterFailureStatus
argument_list|(
name|ParameterType
operator|.
name|HEADER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|HttpUtils
operator|.
name|getParameterFailureStatus
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|HttpUtils
operator|.
name|getParameterFailureStatus
argument_list|(
name|ParameterType
operator|.
name|COOKIE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBaseAddressHttpUri
parameter_list|()
block|{
name|doTestGetBaseAddress
argument_list|(
literal|"http://localhost:8080/store?query"
argument_list|,
literal|"/store"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBaseAddressHttpEncodedUri
parameter_list|()
block|{
name|doTestGetBaseAddress
argument_list|(
literal|"http://localhost:8080/store%20?query"
argument_list|,
literal|"/store%20"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBaseAddressJmsUri
parameter_list|()
block|{
name|doTestGetBaseAddress
argument_list|(
literal|"jms://topic"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBaseAddressWithoutScheme
parameter_list|()
block|{
name|doTestGetBaseAddress
argument_list|(
literal|"/s"
argument_list|,
literal|"/s"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestGetBaseAddress
parameter_list|(
name|String
name|baseURI
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Destination
name|dest
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|,
name|baseURI
argument_list|)
expr_stmt|;
name|String
name|address
init|=
name|HttpUtils
operator|.
name|getBaseAddress
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

