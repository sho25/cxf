begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|BinaryDataProviderTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testIsWriteable
parameter_list|()
block|{
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
name|p
init|=
operator|new
name|BinaryDataProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isWriteable
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|&&
name|p
operator|.
name|isWriteable
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|&&
name|p
operator|.
name|isWriteable
argument_list|(
name|File
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|isWriteable
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsReadable
parameter_list|()
block|{
name|MessageBodyReader
argument_list|<
name|Object
argument_list|>
name|p
init|=
operator|new
name|BinaryDataProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isReadable
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|&&
name|p
operator|.
name|isReadable
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|&&
name|p
operator|.
name|isReadable
argument_list|(
name|File
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|&&
name|p
operator|.
name|isReadable
argument_list|(
name|StreamingOutput
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|isReadable
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testReadFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageBodyReader
name|p
init|=
operator|new
name|BinaryDataProvider
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|(
name|byte
index|[]
operator|)
name|p
operator|.
name|readFrom
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"hi"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
literal|"hi"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|(
name|InputStream
operator|)
name|p
operator|.
name|readFrom
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|InputStream
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"hi"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|bytes
operator|=
name|IOUtils
operator|.
name|readBytesFromStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
literal|"hi"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|Reader
name|r
init|=
operator|(
name|Reader
operator|)
name|p
operator|.
name|readFrom
argument_list|(
name|Reader
operator|.
name|class
argument_list|,
name|Reader
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"hi"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|r
argument_list|)
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|StreamingOutput
name|so
init|=
operator|(
name|StreamingOutput
operator|)
name|p
operator|.
name|readFrom
argument_list|(
name|StreamingOutput
operator|.
name|class
argument_list|,
name|StreamingOutput
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"hi"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|so
operator|.
name|write
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
literal|"hi"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testReadBytesFromUtf8
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageBodyReader
name|p
init|=
operator|new
name|BinaryDataProvider
argument_list|()
decl_stmt|;
name|byte
index|[]
name|utf8Bytes
init|=
literal|"世界ーファイル"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|readBytes
init|=
operator|(
name|byte
index|[]
operator|)
name|p
operator|.
name|readFrom
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|utf8Bytes
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|utf8Bytes
argument_list|,
name|readBytes
argument_list|)
argument_list|)
expr_stmt|;
name|readBytes
operator|=
operator|(
name|byte
index|[]
operator|)
name|p
operator|.
name|readFrom
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"application/octet-stream;charset=UTF-8"
argument_list|)
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|utf8Bytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|utf8Bytes
argument_list|,
name|readBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testWriteTo
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageBodyWriter
name|p
init|=
operator|new
name|BinaryDataProvider
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'h'
block|,
literal|'i'
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
literal|"hi"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"hi"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|is
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
literal|"hi"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Reader
name|r
init|=
operator|new
name|StringReader
argument_list|(
literal|"hi"
argument_list|)
decl_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|r
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"text/xml"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
literal|"hi"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
operator|new
name|StreamingOutputImpl
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"text/xml"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
literal|"hi"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|StreamingOutputImpl
implements|implements
name|StreamingOutput
block|{
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
literal|"hi"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

