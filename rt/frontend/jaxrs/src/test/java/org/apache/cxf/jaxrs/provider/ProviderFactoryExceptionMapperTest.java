begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ExceptionMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|ProviderFactoryExceptionMapperTest
block|{
specifier|private
name|ServerProviderFactory
name|pf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|pf
operator|=
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|pf
operator|.
name|registerUserProvider
argument_list|(
operator|new
name|RuntimeExceptionMapper2
argument_list|()
argument_list|)
expr_stmt|;
name|pf
operator|.
name|registerUserProvider
argument_list|(
operator|new
name|RuntimeExceptionMapper1
argument_list|()
argument_list|)
expr_stmt|;
name|pf
operator|.
name|registerUserProvider
argument_list|(
operator|new
name|RuntimeExceptionMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExactMatchInFirstPosition
parameter_list|()
block|{
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
name|exceptionMapper
init|=
name|pf
operator|.
name|createExceptionMapper
argument_list|(
name|RuntimeException2
operator|.
name|class
argument_list|,
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong mapper found for RuntimeException2"
argument_list|,
name|RuntimeExceptionMapper2
operator|.
name|class
argument_list|,
name|exceptionMapper
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExactMatchInSecondPosition
parameter_list|()
block|{
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
name|exceptionMapper
init|=
name|pf
operator|.
name|createExceptionMapper
argument_list|(
name|RuntimeException1
operator|.
name|class
argument_list|,
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong mapper found for RuntimeException1"
argument_list|,
name|RuntimeExceptionMapper1
operator|.
name|class
argument_list|,
name|exceptionMapper
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNearestSuperclassMatch
parameter_list|()
block|{
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
name|exceptionMapper
init|=
name|pf
operator|.
name|createExceptionMapper
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong mapper found for NullPointerException"
argument_list|,
name|RuntimeExceptionMapper
operator|.
name|class
argument_list|,
name|exceptionMapper
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|RuntimeExceptionMapper
implements|implements
name|ExceptionMapper
argument_list|<
name|RuntimeException
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Response
name|toResponse
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RuntimeExceptionMapper1
implements|implements
name|ExceptionMapper
argument_list|<
name|RuntimeException1
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Response
name|toResponse
parameter_list|(
name|RuntimeException1
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RuntimeExceptionMapper2
implements|implements
name|ExceptionMapper
argument_list|<
name|RuntimeException2
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Response
name|toResponse
parameter_list|(
name|RuntimeException2
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|private
specifier|static
class|class
name|RuntimeException1
extends|extends
name|RuntimeException
block|{      }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|private
specifier|static
class|class
name|RuntimeException2
extends|extends
name|RuntimeException1
block|{      }
block|}
end_class

end_unit

