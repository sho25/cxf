begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|HttpHeadersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ProvidersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|RequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|SecurityContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|MessageContextImplTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetProperty
parameter_list|()
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|mc
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mc
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUriInfo
parameter_list|()
block|{
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|UriInfoImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|UriInfoImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getContext
argument_list|(
name|UriInfo
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequest
parameter_list|()
block|{
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|RequestImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getRequest
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|RequestImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getContext
argument_list|(
name|Request
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetHttpHeaders
parameter_list|()
block|{
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|HttpHeadersImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getHttpHeaders
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|HttpHeadersImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getContext
argument_list|(
name|HttpHeaders
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSecurityContext
parameter_list|()
block|{
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|SecurityContextImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getSecurityContext
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|SecurityContextImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getContext
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProviders
parameter_list|()
block|{
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ProvidersImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getProviders
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ProvidersImpl
operator|.
name|class
argument_list|,
name|mc
operator|.
name|getContext
argument_list|(
name|Providers
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHttpRequest
parameter_list|()
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|request
operator|.
name|getClass
argument_list|()
argument_list|,
name|mc
operator|.
name|getHttpServletRequest
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|request
operator|.
name|getClass
argument_list|()
argument_list|,
name|mc
operator|.
name|getContext
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHttpResponse
parameter_list|()
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|request
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_RESPONSE
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|request
operator|.
name|getClass
argument_list|()
argument_list|,
name|mc
operator|.
name|getHttpServletResponse
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|request
operator|.
name|getClass
argument_list|()
argument_list|,
name|mc
operator|.
name|getContext
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServletContext
parameter_list|()
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|ServletContext
name|request
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_CONTEXT
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|request
operator|.
name|getClass
argument_list|()
argument_list|,
name|mc
operator|.
name|getServletContext
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|request
operator|.
name|getClass
argument_list|()
argument_list|,
name|mc
operator|.
name|getContext
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServletConfig
parameter_list|()
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|ServletConfig
name|request
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServletConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_CONFIG
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|request
operator|.
name|getClass
argument_list|()
argument_list|,
name|mc
operator|.
name|getServletConfig
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|request
operator|.
name|getClass
argument_list|()
argument_list|,
name|mc
operator|.
name|getContext
argument_list|(
name|ServletConfig
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoContext
parameter_list|()
block|{
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|mc
operator|.
name|getContext
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

