begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|OperationResourceInfoTest
extends|extends
name|Assert
block|{
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
annotation|@
name|Consumes
argument_list|(
literal|"application/xml"
argument_list|)
specifier|static
class|class
name|TestClass
block|{
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|void
name|doIt
parameter_list|()
block|{
comment|// empty
block|}
empty_stmt|;
annotation|@
name|Consumes
argument_list|(
literal|"application/atom+xml"
argument_list|)
specifier|public
name|void
name|doThat
parameter_list|()
block|{
comment|// empty
block|}
empty_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsumeTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|OperationResourceInfo
name|ori1
init|=
operator|new
name|OperationResourceInfo
argument_list|(
name|TestClass
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"doIt"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|,
operator|new
name|ClassResourceInfo
argument_list|(
name|TestClass
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|ctypes
init|=
name|ori1
operator|.
name|getConsumeTypes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Single media type expected"
argument_list|,
literal|1
argument_list|,
name|ctypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Class resource consume type should be used"
argument_list|,
literal|"application/xml"
argument_list|,
name|ctypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OperationResourceInfo
name|ori2
init|=
operator|new
name|OperationResourceInfo
argument_list|(
name|TestClass
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"doThat"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|,
operator|new
name|ClassResourceInfo
argument_list|(
name|TestClass
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ctypes
operator|=
name|ori2
operator|.
name|getConsumeTypes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single media type expected"
argument_list|,
literal|1
argument_list|,
name|ctypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Method consume type should be used"
argument_list|,
literal|"application/atom+xml"
argument_list|,
name|ctypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProduceTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|OperationResourceInfo
name|ori1
init|=
operator|new
name|OperationResourceInfo
argument_list|(
name|TestClass
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"doIt"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|,
operator|new
name|ClassResourceInfo
argument_list|(
name|TestClass
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|ctypes
init|=
name|ori1
operator|.
name|getProduceTypes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Single media type expected"
argument_list|,
literal|1
argument_list|,
name|ctypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Method produce type should be used"
argument_list|,
literal|"text/plain"
argument_list|,
name|ctypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OperationResourceInfo
name|ori2
init|=
operator|new
name|OperationResourceInfo
argument_list|(
name|TestClass
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"doThat"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|,
operator|new
name|ClassResourceInfo
argument_list|(
name|TestClass
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ctypes
operator|=
name|ori2
operator|.
name|getProduceTypes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single media type expected"
argument_list|,
literal|1
argument_list|,
name|ctypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Class resource produce type should be used"
argument_list|,
literal|"text/xml"
argument_list|,
name|ctypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

