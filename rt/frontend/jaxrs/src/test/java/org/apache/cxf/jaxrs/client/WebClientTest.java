begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|WebClientTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testBaseCurrentPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
operator|new
name|WebClient
argument_list|(
literal|"http://foo"
argument_list|)
operator|.
name|getBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
operator|new
name|WebClient
argument_list|(
literal|"http://foo"
argument_list|)
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewBaseCurrentPath
parameter_list|()
block|{
name|WebClient
name|wc
init|=
operator|new
name|WebClient
argument_list|(
literal|"http://foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
name|wc
operator|.
name|getBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
name|wc
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|to
argument_list|(
literal|"http://bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://bar"
argument_list|)
argument_list|,
name|wc
operator|.
name|getBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://bar"
argument_list|)
argument_list|,
name|wc
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBaseCurrentPathAfterChange
parameter_list|()
block|{
name|WebClient
name|wc
init|=
operator|new
name|WebClient
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|)
decl_stmt|;
name|wc
operator|.
name|path
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|path
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|matrix
argument_list|(
literal|"m1"
argument_list|,
literal|"m1value"
argument_list|)
operator|.
name|query
argument_list|(
literal|"q1"
argument_list|,
literal|"q1value"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
name|wc
operator|.
name|getBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo/bar/baz;m1=m1value?q1=q1value"
argument_list|)
argument_list|,
name|wc
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBaseCurrentPathAfterCopy
parameter_list|()
block|{
name|WebClient
name|wc
init|=
operator|new
name|WebClient
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|)
decl_stmt|;
name|wc
operator|.
name|path
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|path
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|matrix
argument_list|(
literal|"m1"
argument_list|,
literal|"m1value"
argument_list|)
operator|.
name|query
argument_list|(
literal|"q1"
argument_list|,
literal|"q1value"
argument_list|)
expr_stmt|;
name|WebClient
name|wc1
init|=
operator|new
name|WebClient
argument_list|(
name|wc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo/bar/baz;m1=m1value?q1=q1value"
argument_list|)
argument_list|,
name|wc1
operator|.
name|getBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo/bar/baz;m1=m1value?q1=q1value"
argument_list|)
argument_list|,
name|wc1
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeaders
parameter_list|()
block|{
name|WebClient
name|wc
init|=
operator|new
name|WebClient
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|)
decl_stmt|;
name|wc
operator|.
name|header
argument_list|(
literal|"h1"
argument_list|,
literal|"h1value"
argument_list|)
operator|.
name|header
argument_list|(
literal|"h2"
argument_list|,
literal|"h2value"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"h1value"
argument_list|,
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"h1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"h2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"h2value"
argument_list|,
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"h2"
argument_list|)
argument_list|)
expr_stmt|;
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"h1value"
argument_list|,
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"h1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"h2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"h2value"
argument_list|,
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"h2"
argument_list|)
argument_list|)
expr_stmt|;
name|wc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|wc
operator|.
name|getHeaders
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackFast
parameter_list|()
block|{
name|WebClient
name|wc
init|=
operator|new
name|WebClient
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|)
decl_stmt|;
name|wc
operator|.
name|path
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|path
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|matrix
argument_list|(
literal|"m1"
argument_list|,
literal|"m1value"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
name|wc
operator|.
name|getBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo/bar/baz;m1=m1value"
argument_list|)
argument_list|,
name|wc
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|back
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
name|wc
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBack
parameter_list|()
block|{
name|WebClient
name|wc
init|=
operator|new
name|WebClient
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|)
decl_stmt|;
name|wc
operator|.
name|path
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|path
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
name|wc
operator|.
name|getBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo/bar/baz"
argument_list|)
argument_list|,
name|wc
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|back
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo/bar"
argument_list|)
argument_list|,
name|wc
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|back
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
name|wc
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|back
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|,
name|wc
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

