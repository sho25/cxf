begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|EntityTag
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|EvaluatePreconditionsTest
block|{
specifier|private
specifier|static
specifier|final
name|Date
name|DATE_OLD
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Date
name|DATE_NEW
init|=
operator|new
name|Date
argument_list|(
name|DATE_OLD
operator|.
name|getTime
argument_list|()
operator|+
literal|60
operator|*
literal|60
operator|*
literal|1000L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EntityTag
name|ETAG_OLD
init|=
operator|new
name|EntityTag
argument_list|(
literal|"helloworld"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EntityTag
name|ETAG_NEW
init|=
operator|new
name|EntityTag
argument_list|(
literal|"xyz"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FMT_822
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd MMM yyyy HH:mm:ss 'GMT'"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|private
name|SimpleService
name|service
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|service
operator|=
operator|new
name|SimpleService
argument_list|()
expr_stmt|;
name|service
operator|.
name|setEntityTag
argument_list|(
name|ETAG_OLD
argument_list|)
expr_stmt|;
name|DATE_FMT_822
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|setLastModified
argument_list|(
name|DATE_OLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnconditional200
parameter_list|()
block|{
specifier|final
name|Request
name|request
init|=
name|getRequest
argument_list|()
decl_stmt|;
specifier|final
name|Response
name|response
init|=
name|service
operator|.
name|perform
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfModified200
parameter_list|()
block|{
name|service
operator|.
name|setLastModified
argument_list|(
name|DATE_NEW
argument_list|)
expr_stmt|;
specifier|final
name|Request
name|request
init|=
name|getRequest
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|,
name|DATE_FMT_822
operator|.
name|format
argument_list|(
name|DATE_OLD
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Response
name|response
init|=
name|service
operator|.
name|perform
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfNoneMatch304
parameter_list|()
block|{
specifier|final
name|Request
name|request
init|=
name|getRequest
argument_list|(
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|,
name|ETAG_OLD
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Response
name|response
init|=
name|service
operator|.
name|perform
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_MODIFIED
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfNoneMatch200
parameter_list|()
block|{
specifier|final
name|Request
name|request
init|=
name|getRequest
argument_list|(
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|,
name|ETAG_NEW
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Response
name|response
init|=
name|service
operator|.
name|perform
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfModified304
parameter_list|()
block|{
specifier|final
name|Request
name|request
init|=
name|getRequest
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|,
name|DATE_FMT_822
operator|.
name|format
argument_list|(
name|DATE_NEW
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Response
name|response
init|=
name|service
operator|.
name|perform
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_MODIFIED
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfNoneMatchIfModified304
parameter_list|()
block|{
specifier|final
name|Request
name|request
init|=
name|getRequest
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|,
name|DATE_FMT_822
operator|.
name|format
argument_list|(
name|DATE_OLD
argument_list|)
argument_list|,
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|,
name|ETAG_OLD
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Response
name|response
init|=
name|service
operator|.
name|perform
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_MODIFIED
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfNoneMatchIfModified200
parameter_list|()
block|{
comment|// RFC 2616 / section 14.26
comment|// "If none of the entity tags match, then the server MAY perform the requested method as
comment|// if the If-None-Match header field did not exist, but MUST also ignore any If-Modified-Since
comment|// header field(s) in the request. That is, if no entity tags match, then the server MUST NOT
comment|// return a 304 (Not Modified) response."
specifier|final
name|Request
name|request
init|=
name|getRequest
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|,
name|DATE_FMT_822
operator|.
name|format
argument_list|(
name|DATE_OLD
argument_list|)
argument_list|,
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|,
name|ETAG_NEW
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// ETags don't
comment|// match,
comment|// If-Modified-Since
comment|// must be ignored
specifier|final
name|Response
name|response
init|=
name|service
operator|.
name|perform
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfNoneMatchIfModified200Two
parameter_list|()
block|{
comment|// RFC 2616 / section 14.26
comment|// "If any of the entity tags match, the entity tag of the entity that would have been returned
comment|// in the response to a similar GET request (without the If-None-Match header) on that resource,
comment|// or if "*" is given and any current entity exists for that resource, then the server MUST NOT
comment|// perform the requested method, unless required to do so because the resource's modification date
comment|// fails to match that supplied in an If-Modified-Since header field in the request"
name|service
operator|.
name|setLastModified
argument_list|(
name|DATE_NEW
argument_list|)
expr_stmt|;
specifier|final
name|Request
name|request
init|=
name|getRequest
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|,
name|DATE_FMT_822
operator|.
name|format
argument_list|(
name|DATE_OLD
argument_list|)
argument_list|,
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|,
name|ETAG_NEW
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// ETags match,
comment|// but resource
comment|// has new date
specifier|final
name|Response
name|response
init|=
name|service
operator|.
name|perform
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Request
name|getRequest
parameter_list|(
specifier|final
name|String
modifier|...
name|headers
parameter_list|)
block|{
specifier|final
name|MessageImpl
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headers
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|headers
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|headers
index|[
name|i
index|]
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
return|return
operator|new
name|RequestImpl
argument_list|(
name|message
argument_list|)
return|;
block|}
block|}
end_class

end_unit

