begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FormUtilsTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PARAM1
init|=
literal|"httpParam1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PARAM2
init|=
literal|"httpParam2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PARAM_VALUE1
init|=
literal|"httpValue1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PARAM_VALUE2
init|=
literal|"httpValue2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FORM_PARAM1
init|=
literal|"formParam1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FORM_PARAM2
init|=
literal|"formParam2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FORM_PARAM_VALUE1
init|=
literal|"formValue1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FORM_PARAM_VALUE2
init|=
literal|"formValue2"
decl_stmt|;
specifier|private
name|Message
name|mockMessage
decl_stmt|;
specifier|private
name|HttpServletRequest
name|mockRequest
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|populateMapFromStringFromHTTP
parameter_list|()
block|{
name|mockObjects
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockMessage
argument_list|,
name|mockRequest
argument_list|)
expr_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FormUtils
operator|.
name|populateMapFromString
argument_list|(
name|params
argument_list|,
name|mockMessage
argument_list|,
literal|null
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|,
literal|false
argument_list|,
name|mockRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HTTP_PARAM_VALUE1
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|HTTP_PARAM1
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HTTP_PARAM_VALUE2
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|HTTP_PARAM2
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|populateMapFromStringFromHTTPWithProp
parameter_list|()
block|{
name|mockObjects
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockMessage
argument_list|,
name|mockRequest
argument_list|)
expr_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FormUtils
operator|.
name|populateMapFromString
argument_list|(
name|params
argument_list|,
name|mockMessage
argument_list|,
literal|null
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|,
literal|false
argument_list|,
name|mockRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|populateMapFromStringFromBody
parameter_list|()
block|{
name|mockObjects
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockMessage
argument_list|,
name|mockRequest
argument_list|)
expr_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|postBody
init|=
name|FORM_PARAM1
operator|+
literal|"="
operator|+
name|FORM_PARAM_VALUE1
operator|+
literal|"&"
operator|+
name|FORM_PARAM2
operator|+
literal|"="
operator|+
name|FORM_PARAM_VALUE2
decl_stmt|;
name|FormUtils
operator|.
name|populateMapFromString
argument_list|(
name|params
argument_list|,
name|mockMessage
argument_list|,
name|postBody
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|,
literal|false
argument_list|,
name|mockRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FORM_PARAM_VALUE1
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|FORM_PARAM1
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FORM_PARAM_VALUE2
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|FORM_PARAM2
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mockObjects
parameter_list|(
name|String
name|formPropertyValue
parameter_list|)
block|{
name|mockMessage
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockMessage
operator|.
name|getContextualProperty
argument_list|(
name|FormUtils
operator|.
name|FORM_PARAMS_FROM_HTTP_PARAMS
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|formPropertyValue
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockMessage
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|mockRequest
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
index|[]
name|httpParamNames
init|=
block|{
name|HTTP_PARAM1
block|,
name|HTTP_PARAM2
block|}
decl_stmt|;
name|Enumeration
argument_list|<
name|String
argument_list|>
name|httpParamsEnum
init|=
name|Collections
operator|.
name|enumeration
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|httpParamNames
argument_list|)
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockRequest
operator|.
name|getParameterNames
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|httpParamsEnum
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockRequest
operator|.
name|getParameterValues
argument_list|(
name|HTTP_PARAM1
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|String
index|[]
block|{
name|HTTP_PARAM_VALUE1
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mockRequest
operator|.
name|getParameterValues
argument_list|(
name|HTTP_PARAM2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|String
index|[]
block|{
name|HTTP_PARAM_VALUE2
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

