begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|LinkBuilderImplTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testBuild
parameter_list|()
throws|throws
name|Exception
block|{
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
operator|new
name|LinkBuilderImpl
argument_list|()
decl_stmt|;
name|Link
name|prevLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"previous"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<http://example.com/page1>;rel=\"previous\""
argument_list|,
name|prevLink
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildObjects
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|path1
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"p1"
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|path2
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"p2"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"p2"
return|;
block|}
block|}
decl_stmt|;
name|URI
name|path3
init|=
operator|new
name|URI
argument_list|(
literal|"p3"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"<"
operator|+
literal|"http://host.com:888/"
operator|+
literal|"p1/p2/p3"
operator|+
literal|">"
decl_stmt|;
name|Link
operator|.
name|Builder
name|builder
init|=
name|Link
operator|.
name|fromUri
argument_list|(
literal|"http://host.com:888/"
operator|+
literal|"{x1}/{x2}/{x3}"
argument_list|)
decl_stmt|;
name|Link
name|link
init|=
name|builder
operator|.
name|build
argument_list|(
name|path1
argument_list|,
name|path2
argument_list|,
name|path3
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|link
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelfLink
parameter_list|()
throws|throws
name|Exception
block|{
name|Link
name|link
init|=
operator|new
name|LinkBuilderImpl
argument_list|()
operator|.
name|baseUri
argument_list|(
literal|"http://localhost:8080/resource/1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"self"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<http://localhost:8080/resource/1>;rel=\"self\""
argument_list|,
name|link
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildManyRels
parameter_list|()
throws|throws
name|Exception
block|{
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
operator|new
name|LinkBuilderImpl
argument_list|()
decl_stmt|;
name|Link
name|prevLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<http://example.com/page1>;rel=\"1 2\""
argument_list|,
name|prevLink
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildRelativized
parameter_list|()
throws|throws
name|Exception
block|{
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
operator|new
name|LinkBuilderImpl
argument_list|()
decl_stmt|;
name|URI
name|base
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://example.com/page2"
argument_list|)
decl_stmt|;
name|Link
name|prevLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"previous"
argument_list|)
operator|.
name|buildRelativized
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<page1>;rel=\"previous\""
argument_list|,
name|prevLink
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelativeLink
parameter_list|()
throws|throws
name|Exception
block|{
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
name|Link
operator|.
name|fromUri
argument_list|(
literal|"relative"
argument_list|)
decl_stmt|;
name|linkBuilder
operator|.
name|baseUri
argument_list|(
literal|"http://localhost:8080/base/path"
argument_list|)
expr_stmt|;
name|Link
name|link
init|=
name|linkBuilder
operator|.
name|rel
argument_list|(
literal|"next"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<http://localhost:8080/base/relative>;rel=\"next\""
argument_list|,
name|link
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelativeLink2
parameter_list|()
throws|throws
name|Exception
block|{
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
name|Link
operator|.
name|fromUri
argument_list|(
literal|"/relative"
argument_list|)
decl_stmt|;
name|linkBuilder
operator|.
name|baseUri
argument_list|(
literal|"http://localhost:8080/base/path"
argument_list|)
expr_stmt|;
name|Link
name|link
init|=
name|linkBuilder
operator|.
name|rel
argument_list|(
literal|"next"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<http://localhost:8080/relative>;rel=\"next\""
argument_list|,
name|link
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"to be fixed for TCK"
argument_list|)
specifier|public
name|void
name|testNoArgsThrowsUriBuilderExceptionTest
parameter_list|()
block|{
name|Link
operator|.
name|Builder
name|builder
init|=
name|Link
operator|.
name|fromUri
argument_list|(
literal|"http://:@"
argument_list|)
decl_stmt|;
try|try
block|{
name|Link
name|link
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"No exception has been thrown for link "
operator|+
name|link
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UriBuilderException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSeveralAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
operator|new
name|LinkBuilderImpl
argument_list|()
decl_stmt|;
name|Link
name|prevLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"previous"
argument_list|)
operator|.
name|title
argument_list|(
literal|"A title"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<http://example.com/page1>;rel=\"previous\";title=\"A title\""
argument_list|,
name|prevLink
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
name|Link
operator|.
name|fromMethod
argument_list|(
name|TestResource
operator|.
name|class
argument_list|,
literal|"consumesAppJson"
argument_list|)
decl_stmt|;
name|Link
name|link
init|=
name|linkBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|resource
init|=
name|link
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resource
operator|.
name|contains
argument_list|(
literal|"<consumesappjson>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidString
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
name|Link
operator|.
name|fromMethod
argument_list|(
name|TestResource
operator|.
name|class
argument_list|,
literal|"consumesAppJson"
argument_list|)
decl_stmt|;
name|linkBuilder
operator|.
name|link
argument_list|(
literal|"</cxf>>"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Path
argument_list|(
literal|"resource"
argument_list|)
specifier|public
specifier|static
class|class
name|TestResource
block|{
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"consumesappjson"
argument_list|)
specifier|public
name|String
name|consumesAppJson
parameter_list|()
block|{
return|return
name|MediaType
operator|.
name|APPLICATION_JSON
return|;
block|}
block|}
block|}
end_class

end_unit

