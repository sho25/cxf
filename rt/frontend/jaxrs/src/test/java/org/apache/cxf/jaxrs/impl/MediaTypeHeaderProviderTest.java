begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|MediaTypeHeaderProviderTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullValue
parameter_list|()
throws|throws
name|Exception
block|{
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleType
parameter_list|()
block|{
name|MediaType
name|m
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"text/html"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Media type was not parsed correctly"
argument_list|,
name|m
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"html"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Media type was not parsed correctly"
argument_list|,
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"text/html "
argument_list|)
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"html"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShortWildcard
parameter_list|()
block|{
name|MediaType
name|m
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Media type was not parsed correctly"
argument_list|,
name|m
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"*"
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShortWildcardWithParameters
parameter_list|()
block|{
name|MediaType
name|m
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"*;q=0.2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Media type was not parsed correctly"
argument_list|,
name|m
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"*"
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadType
parameter_list|()
block|{
try|try
block|{
operator|new
name|MediaTypeHeaderProvider
argument_list|()
operator|.
name|fromString
argument_list|(
literal|"texthtml"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Parse exception must've been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|pe
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadParameter
parameter_list|()
block|{
try|try
block|{
operator|new
name|MediaTypeHeaderProvider
argument_list|()
operator|.
name|fromString
argument_list|(
literal|"text/html;*"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Parse exception must've been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|pe
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypeWithParameters
parameter_list|()
block|{
name|MediaType
name|m
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"text/html;q=1234;b=4321"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"q"
argument_list|,
literal|"1234"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"4321"
argument_list|)
expr_stmt|;
name|MediaType
name|expected
init|=
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"html"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Media type was not parsed correctly"
argument_list|,
name|expected
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleToString
parameter_list|()
block|{
name|MediaTypeHeaderProvider
name|provider
init|=
operator|new
name|MediaTypeHeaderProvider
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"simple media type is not serialized"
argument_list|,
literal|"text/plain"
argument_list|,
name|provider
operator|.
name|toString
argument_list|(
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"plain"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexToString
parameter_list|()
block|{
name|MediaTypeHeaderProvider
name|provider
init|=
operator|new
name|MediaTypeHeaderProvider
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"q"
argument_list|,
literal|"0.2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"complex media type is not serialized"
argument_list|,
literal|"text/plain;foo=bar;q=0.2"
argument_list|,
name|provider
operator|.
name|toString
argument_list|(
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"plain"
argument_list|,
name|params
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

