begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|InternalServerErrorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractAttributedInterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ServerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMockRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMockSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|servlet
operator|.
name|LocaleResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|servlet
operator|.
name|View
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|servlet
operator|.
name|ViewResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|servlet
operator|.
name|i18n
operator|.
name|AcceptHeaderLocaleResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|servlet
operator|.
name|view
operator|.
name|BeanNameViewResolver
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expectLastCall
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|SpringViewResolverProviderTest
extends|extends
name|EasyMockSupport
block|{
annotation|@
name|Rule
specifier|public
name|EasyMockRule
name|rule
init|=
operator|new
name|EasyMockRule
argument_list|(
name|this
argument_list|)
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ViewResolver
name|viewResolverMock
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|LocaleResolver
name|localeResolverMock
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|View
name|viewMock
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|HttpServletRequest
name|requestMock
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|HttpServletResponse
name|responseMock
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ServletContext
name|servletContextMock
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|RequestDispatcher
name|requestDispatcherMock
decl_stmt|;
specifier|private
name|SpringViewResolverProvider
name|viewResolver
decl_stmt|;
specifier|private
name|Locale
name|locale
init|=
name|Locale
operator|.
name|US
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|this
operator|.
name|viewResolver
operator|=
operator|new
name|SpringViewResolverProvider
argument_list|(
name|viewResolverMock
argument_list|,
name|localeResolverMock
argument_list|)
expr_stmt|;
name|ExchangeImpl
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|Endpoint
name|endpoint
init|=
operator|new
name|MockEndpoint
argument_list|()
decl_stmt|;
name|endpoint
operator|.
name|put
argument_list|(
name|ServerProviderFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|ServerProviderFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|MessageImpl
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|,
name|requestMock
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_RESPONSE
argument_list|,
name|responseMock
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_CONTEXT
argument_list|,
name|servletContextMock
argument_list|)
expr_stmt|;
name|viewResolver
operator|.
name|setMessageContext
argument_list|(
operator|new
name|MessageContextImpl
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsWriteableEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|viewName
init|=
literal|"/test"
decl_stmt|;
name|View
name|view
init|=
name|expectGetView
argument_list|(
name|viewName
argument_list|)
decl_stmt|;
name|viewResolver
operator|.
name|setClassResources
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|TestEnum
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|TestEnum
operator|.
name|ONE
argument_list|,
name|viewName
argument_list|)
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|viewResolver
operator|.
name|isWriteable
argument_list|(
name|TestEnum
operator|.
name|ONE
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view
argument_list|,
name|viewResolver
operator|.
name|getView
argument_list|(
name|TestEnum
operator|.
name|ONE
operator|.
name|getClass
argument_list|()
argument_list|,
name|TestEnum
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsWriteableEnum2
parameter_list|()
block|{
name|String
name|viewName
init|=
literal|"/test"
decl_stmt|;
name|View
name|view
init|=
name|expectGetView
argument_list|(
name|viewName
argument_list|)
decl_stmt|;
name|viewResolver
operator|.
name|setEnumResources
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|TestEnum
operator|.
name|ONE
argument_list|,
name|viewName
argument_list|)
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|viewResolver
operator|.
name|isWriteable
argument_list|(
name|TestEnum
operator|.
name|ONE
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view
argument_list|,
name|viewResolver
operator|.
name|getView
argument_list|(
name|TestEnum
operator|.
name|ONE
operator|.
name|getClass
argument_list|()
argument_list|,
name|TestEnum
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testWriteTo
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|viewName
init|=
literal|"/test"
decl_stmt|;
name|expectWriteTo
argument_list|(
name|viewName
argument_list|)
expr_stmt|;
name|viewMock
operator|.
name|render
argument_list|(
name|anyObject
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|viewResolver
operator|.
name|writeTo
argument_list|(
name|TestEnum
operator|.
name|ONE
argument_list|,
name|TestEnum
operator|.
name|ONE
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|,
operator|new
name|MultivaluedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testWriteToWithRenderingError
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|viewName
init|=
literal|"/test"
decl_stmt|;
name|Exception
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"my exception"
argument_list|)
decl_stmt|;
name|expectWriteTo
argument_list|(
name|viewName
argument_list|)
expr_stmt|;
name|viewMock
operator|.
name|render
argument_list|(
name|anyObject
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|requestMock
operator|.
name|setAttribute
argument_list|(
name|RequestDispatcher
operator|.
name|ERROR_EXCEPTION
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|requestMock
operator|.
name|setAttribute
argument_list|(
name|RequestDispatcher
operator|.
name|ERROR_STATUS_CODE
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|requestMock
operator|.
name|setAttribute
argument_list|(
name|RequestDispatcher
operator|.
name|ERROR_MESSAGE
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|servletContextMock
operator|.
name|getRequestDispatcher
argument_list|(
literal|"/error"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|requestDispatcherMock
argument_list|)
expr_stmt|;
name|requestDispatcherMock
operator|.
name|forward
argument_list|(
name|anyObject
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|viewResolver
operator|.
name|writeTo
argument_list|(
name|TestEnum
operator|.
name|ONE
argument_list|,
name|TestEnum
operator|.
name|ONE
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|,
operator|new
name|MultivaluedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InternalServerErrorException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWriteToWithInternalRenderingError
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|viewName
init|=
literal|"/test"
decl_stmt|;
name|Exception
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"my exception"
argument_list|)
decl_stmt|;
name|expectWriteTo
argument_list|(
name|viewName
argument_list|)
expr_stmt|;
name|viewMock
operator|.
name|render
argument_list|(
name|anyObject
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|requestMock
operator|.
name|setAttribute
argument_list|(
name|RequestDispatcher
operator|.
name|ERROR_EXCEPTION
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|requestMock
operator|.
name|setAttribute
argument_list|(
name|RequestDispatcher
operator|.
name|ERROR_STATUS_CODE
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|requestMock
operator|.
name|setAttribute
argument_list|(
name|RequestDispatcher
operator|.
name|ERROR_MESSAGE
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|servletContextMock
operator|.
name|getRequestDispatcher
argument_list|(
literal|"/error"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|requestDispatcherMock
argument_list|)
expr_stmt|;
name|requestDispatcherMock
operator|.
name|forward
argument_list|(
name|anyObject
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"internal"
argument_list|)
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|viewResolver
operator|.
name|writeTo
argument_list|(
name|TestEnum
operator|.
name|ONE
argument_list|,
name|TestEnum
operator|.
name|ONE
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|,
operator|new
name|MultivaluedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InternalServerErrorException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWriteToWithNullErrorView
parameter_list|()
throws|throws
name|Exception
block|{
name|viewResolver
operator|.
name|setErrorView
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|String
name|viewName
init|=
literal|"/test"
decl_stmt|;
name|Exception
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"my exception"
argument_list|)
decl_stmt|;
name|expectWriteTo
argument_list|(
name|viewName
argument_list|)
expr_stmt|;
name|viewMock
operator|.
name|render
argument_list|(
name|anyObject
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|replayAll
argument_list|()
expr_stmt|;
name|viewResolver
operator|.
name|writeTo
argument_list|(
name|TestEnum
operator|.
name|ONE
argument_list|,
name|TestEnum
operator|.
name|ONE
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML_TYPE
argument_list|,
operator|new
name|MultivaluedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testConstructorWithViewResolverNull
parameter_list|()
block|{
operator|new
name|SpringViewResolverProvider
argument_list|(
literal|null
argument_list|,
operator|new
name|AcceptHeaderLocaleResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testConstructorWithLocaleResolverNull
parameter_list|()
block|{
operator|new
name|SpringViewResolverProvider
argument_list|(
operator|new
name|BeanNameViewResolver
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|View
name|expectGetView
parameter_list|(
name|String
name|viewName
parameter_list|)
block|{
name|expect
argument_list|(
name|localeResolverMock
operator|.
name|resolveLocale
argument_list|(
name|anyObject
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|locale
argument_list|)
expr_stmt|;
try|try
block|{
name|expect
argument_list|(
name|viewResolverMock
operator|.
name|resolveViewName
argument_list|(
name|viewName
argument_list|,
name|locale
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|viewMock
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|viewMock
return|;
block|}
specifier|private
name|void
name|expectWriteTo
parameter_list|(
name|String
name|viewName
parameter_list|)
block|{
name|expectGetView
argument_list|(
name|viewName
argument_list|)
expr_stmt|;
name|viewResolver
operator|.
name|setEnumResources
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|TestEnum
operator|.
name|ONE
argument_list|,
name|viewName
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|localeResolverMock
operator|.
name|resolveLocale
argument_list|(
name|anyObject
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|locale
argument_list|)
expr_stmt|;
try|try
block|{
name|expect
argument_list|(
name|viewResolverMock
operator|.
name|resolveViewName
argument_list|(
name|viewName
argument_list|,
name|locale
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|viewMock
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
enum|enum
name|TestEnum
block|{
name|ONE
block|,
name|TWO
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
class|class
name|TestView
implements|implements
name|View
block|{
specifier|private
name|String
name|viewName
decl_stmt|;
name|TestView
parameter_list|(
name|String
name|viewName
parameter_list|)
block|{
name|this
operator|.
name|viewName
operator|=
name|viewName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|render
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|model
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|String
name|getViewName
parameter_list|()
block|{
return|return
name|viewName
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MockEndpoint
extends|extends
name|AbstractAttributedInterceptorProvider
implements|implements
name|Endpoint
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|EndpointInfo
name|epi
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|MockEndpoint
parameter_list|()
block|{
name|epi
operator|.
name|setBinding
argument_list|(
operator|new
name|BindingInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Feature
argument_list|>
name|getActiveFeatures
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Binding
name|getBinding
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|EndpointInfo
name|getEndpointInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|epi
return|;
block|}
specifier|public
name|Executor
name|getExecutor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{         }
specifier|public
name|MessageObserver
name|getInFaultObserver
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setInFaultObserver
parameter_list|(
name|MessageObserver
name|observer
parameter_list|)
block|{         }
specifier|public
name|MessageObserver
name|getOutFaultObserver
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setOutFaultObserver
parameter_list|(
name|MessageObserver
name|observer
parameter_list|)
block|{         }
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|addCleanupHook
parameter_list|(
name|Closeable
name|c
parameter_list|)
block|{         }
specifier|public
name|List
argument_list|<
name|Closeable
argument_list|>
name|getCleanupHooks
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
class|class
name|MockBus
implements|implements
name|Bus
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getExtension
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|extensionType
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|setExtension
parameter_list|(
name|T
name|extension
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|extensionType
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|boolean
name|hasExtensionByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|i
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|(
name|boolean
name|wait
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|s
parameter_list|,
name|Object
name|o
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFeatures
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Feature
argument_list|>
name|features
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|BusState
name|getState
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInInterceptors
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutInterceptors
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInFaultInterceptors
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutFaultInterceptors
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

