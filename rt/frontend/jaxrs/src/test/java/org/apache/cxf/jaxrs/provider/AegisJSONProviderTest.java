begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|fortest
operator|.
name|AegisTestBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
operator|.
name|ManyTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
operator|.
name|TagVO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
operator|.
name|Tags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AegisJSONProviderTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testIsWriteable
parameter_list|()
block|{
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
name|p
init|=
operator|new
name|AegisJSONProvider
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isWriteable
argument_list|(
name|AegisTestBean
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsReadable
parameter_list|()
block|{
name|MessageBodyReader
argument_list|<
name|Object
argument_list|>
name|p
init|=
operator|new
name|AegisJSONProvider
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|isReadable
argument_list|(
name|AegisTestBean
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadFromNoMap
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|doTestRead
parameter_list|(
name|boolean
name|setNsMap
parameter_list|)
throws|throws
name|Exception
block|{
name|AegisJSONProvider
name|p
init|=
operator|new
name|AegisJSONProvider
argument_list|()
decl_stmt|;
name|p
operator|.
name|clearContexts
argument_list|()
expr_stmt|;
if|if
condition|(
name|setNsMap
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaceMap
operator|.
name|put
argument_list|(
literal|"http://fortest.jaxrs.cxf.apache.org"
argument_list|,
literal|"ns1"
argument_list|)
expr_stmt|;
name|namespaceMap
operator|.
name|put
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema-instance"
argument_list|,
literal|"xsins"
argument_list|)
expr_stmt|;
name|p
operator|.
name|setNamespaceMap
argument_list|(
name|namespaceMap
argument_list|)
expr_stmt|;
block|}
name|String
name|data
init|=
literal|"{\"ns1.AegisTestBean\":{\"@xsins.type\":\"ns1:AegisTestBean\","
operator|+
literal|"\"ns1.boolValue\":true,\"ns1.strValue\":\"hovercraft\"}}"
decl_stmt|;
name|byte
index|[]
name|simpleBytes
init|=
name|data
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
name|Object
name|beanObject
init|=
name|p
operator|.
name|readFrom
argument_list|(
operator|(
name|Class
operator|)
name|AegisTestBean
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|simpleBytes
argument_list|)
argument_list|)
decl_stmt|;
name|AegisTestBean
name|bean
init|=
operator|(
name|AegisTestBean
operator|)
name|beanObject
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hovercraft"
argument_list|,
name|bean
operator|.
name|getStrValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|bean
operator|.
name|getBoolValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteToWithXsiType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|data
init|=
literal|"{\"ns1.AegisTestBean\":{\"@ns2.type\":\"ns1:AegisTestBean\","
operator|+
literal|"\"ns1.boolValue\":true,\"ns1.strValue\":\"hovercraft\"}}"
decl_stmt|;
name|doTestWriteTo
argument_list|(
name|data
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteToWithXsiTypeNoNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|data
init|=
literal|"{\"ns1.AegisTestBean\":{\"@xsins.type\":\"ns1:AegisTestBean\","
operator|+
literal|"\"ns1.boolValue\":true,\"ns1.strValue\":\"hovercraft\"}}"
decl_stmt|;
name|doTestWriteTo
argument_list|(
name|data
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteToWithoutXsiType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|data
init|=
literal|"{\"ns1.AegisTestBean\":{"
operator|+
literal|"\"ns1.boolValue\":true,\"ns1.strValue\":\"hovercraft\"}}"
decl_stmt|;
name|doTestWriteTo
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestWriteTo
parameter_list|(
name|String
name|data
parameter_list|,
name|boolean
name|writeXsi
parameter_list|,
name|boolean
name|setNsMap
parameter_list|)
throws|throws
name|Exception
block|{
name|AegisJSONProvider
name|p
init|=
operator|new
name|AegisJSONProvider
argument_list|()
decl_stmt|;
name|AbstractAegisProvider
operator|.
name|clearContexts
argument_list|()
expr_stmt|;
name|p
operator|.
name|setWriteXsiType
argument_list|(
name|writeXsi
argument_list|)
expr_stmt|;
if|if
condition|(
name|setNsMap
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaceMap
operator|.
name|put
argument_list|(
literal|"http://fortest.jaxrs.cxf.apache.org"
argument_list|,
literal|"ns1"
argument_list|)
expr_stmt|;
name|namespaceMap
operator|.
name|put
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema-instance"
argument_list|,
literal|"ns2"
argument_list|)
expr_stmt|;
name|p
operator|.
name|setNamespaceMap
argument_list|(
name|namespaceMap
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|AegisTestBean
name|bean
init|=
operator|new
name|AegisTestBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setBoolValue
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setStrValue
argument_list|(
literal|"hovercraft"
argument_list|)
expr_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|bean
argument_list|,
operator|(
name|Class
operator|)
name|AegisTestBean
operator|.
name|class
argument_list|,
name|AegisTestBean
operator|.
name|class
argument_list|,
name|AegisTestBean
operator|.
name|class
operator|.
name|getAnnotations
argument_list|()
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|json
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|data
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManyTags
parameter_list|()
throws|throws
name|Exception
block|{
name|AegisJSONProvider
name|p
init|=
operator|new
name|AegisJSONProvider
argument_list|()
decl_stmt|;
name|AbstractAegisProvider
operator|.
name|clearContexts
argument_list|()
expr_stmt|;
name|p
operator|.
name|setWriteXsiType
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|p
operator|.
name|setSerializeAsArray
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tags
name|tags
init|=
operator|new
name|Tags
argument_list|()
decl_stmt|;
name|tags
operator|.
name|addTag
argument_list|(
name|createTag
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|ManyTags
name|many
init|=
operator|new
name|ManyTags
argument_list|()
decl_stmt|;
name|many
operator|.
name|setTags
argument_list|(
name|tags
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|many
argument_list|,
operator|(
name|Class
operator|)
name|ManyTags
operator|.
name|class
argument_list|,
name|ManyTags
operator|.
name|class
argument_list|,
name|ManyTags
operator|.
name|class
operator|.
name|getAnnotations
argument_list|()
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|os
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|data
init|=
literal|"{\"ns1.ManyTags\":[{\"ns1.tags\":[{},{\"ns1.TagVO\""
operator|+
literal|":{\"ns1.group\":\"b\",\"ns1.name\":\"a\"}}]}]}"
decl_stmt|;
name|assertEquals
argument_list|(
name|data
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TagVO
name|createTag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|group
parameter_list|)
block|{
return|return
operator|new
name|TagVO
argument_list|(
name|name
argument_list|,
name|group
argument_list|)
return|;
block|}
block|}
end_class

end_unit

