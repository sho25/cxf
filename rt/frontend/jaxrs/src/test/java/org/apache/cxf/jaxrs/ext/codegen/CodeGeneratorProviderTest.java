begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|codegen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|wadl
operator|.
name|BookStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|ServletDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CodeGeneratorProviderTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|control
operator|.
name|makeThreadSafe
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBookStoreAsInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|generateCodeAndCheck
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBookStoreAsClass
parameter_list|()
throws|throws
name|Exception
block|{
name|generateCodeAndCheck
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBookStoreTypesOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|generateCodeAndCheck
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateCodeAndCheck
parameter_list|(
name|boolean
name|generateInterfaces
parameter_list|,
name|boolean
name|typesOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|CodeGeneratorProvider
name|cgp
init|=
operator|new
name|CodeGeneratorProvider
argument_list|()
decl_stmt|;
name|cgp
operator|.
name|setGenerateInterfaces
argument_list|(
name|generateInterfaces
argument_list|)
expr_stmt|;
name|ClassResourceInfo
name|cri
init|=
name|ResourceUtils
operator|.
name|createClassResourceInfo
argument_list|(
name|BookStore
operator|.
name|class
argument_list|,
name|BookStore
operator|.
name|class
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|CodeGeneratorProvider
operator|.
name|CODE_QUERY
operator|+
literal|"&_os="
operator|+
name|getOs
argument_list|()
decl_stmt|;
if|if
condition|(
name|typesOnly
condition|)
block|{
name|query
operator|+=
literal|"&_codeType=grammar"
expr_stmt|;
block|}
name|Message
name|m
init|=
name|mockMessage
argument_list|(
literal|"http://localhost:8080/baz"
argument_list|,
literal|"/bar"
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|cgp
operator|.
name|removeCode
argument_list|(
name|cri
argument_list|)
expr_stmt|;
name|cgp
operator|.
name|setUriInfo
argument_list|(
operator|new
name|UriInfoImpl
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|cgp
operator|.
name|handleRequest
argument_list|(
name|m
argument_list|,
name|cri
argument_list|)
expr_stmt|;
name|String
name|tmpdir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
name|File
name|classes
init|=
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
name|cgp
operator|.
name|getStem
argument_list|(
name|cri
argument_list|,
literal|"classes"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|classes
operator|.
name|mkdir
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|File
name|unzippedSrc
init|=
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
name|cgp
operator|.
name|getStem
argument_list|(
name|cri
argument_list|,
literal|"unzip"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|unzippedSrc
operator|.
name|mkdir
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|File
name|zipDir
init|=
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
name|cgp
operator|.
name|getStem
argument_list|(
name|cri
argument_list|,
literal|"zip"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|compileSrc
argument_list|(
name|classes
argument_list|,
name|unzippedSrc
argument_list|,
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|zipDir
argument_list|,
literal|"src.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyClasses
argument_list|(
name|classes
argument_list|,
name|typesOnly
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|removeDir
argument_list|(
name|classes
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|removeDir
argument_list|(
name|unzippedSrc
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cgp
operator|.
name|removeCode
argument_list|(
name|cri
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyClasses
parameter_list|(
name|File
name|classesDir
parameter_list|,
name|boolean
name|typesOnly
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|clsFiles
init|=
name|FileUtils
operator|.
name|getFilesRecurse
argument_list|(
name|classesDir
argument_list|,
literal|".+\\.class$"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|typesOnly
condition|?
literal|5
else|:
literal|7
argument_list|,
name|clsFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkContains
argument_list|(
name|clsFiles
argument_list|,
literal|"superbooks.Book.class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkContains
argument_list|(
name|clsFiles
argument_list|,
literal|"superbooks.Book2.class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkContains
argument_list|(
name|clsFiles
argument_list|,
literal|"superbooks.Chapter.class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkContains
argument_list|(
name|clsFiles
argument_list|,
literal|"superbooks.ObjectFactory.class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkContains
argument_list|(
name|clsFiles
argument_list|,
literal|"superbooks.package-info.class"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|typesOnly
condition|)
block|{
name|assertTrue
argument_list|(
name|checkContains
argument_list|(
name|clsFiles
argument_list|,
literal|"org.apache.cxf.jaxrs.model.wadl.FormInterface.class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkContains
argument_list|(
name|clsFiles
argument_list|,
literal|"org.apache.cxf.jaxrs.model.wadl.BookStore.class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|checkContains
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|clsFiles
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|File
name|f
range|:
name|clsFiles
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|getPathSep
argument_list|()
argument_list|,
literal|"."
argument_list|)
operator|.
name|endsWith
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|getPathSep
parameter_list|()
block|{
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"win"
argument_list|)
condition|)
block|{
return|return
literal|"\\"
return|;
block|}
else|else
block|{
return|return
literal|"/"
return|;
block|}
block|}
specifier|private
name|String
name|getOs
parameter_list|()
block|{
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"win"
argument_list|)
condition|)
block|{
return|return
literal|"win"
return|;
block|}
else|else
block|{
return|return
literal|"unix"
return|;
block|}
block|}
specifier|private
name|void
name|compileSrc
parameter_list|(
name|File
name|classes
parameter_list|,
name|File
name|unzippedSrc
parameter_list|,
name|InputStream
name|zipFile
parameter_list|)
throws|throws
name|Exception
block|{
name|unzip
argument_list|(
name|zipFile
argument_list|,
name|unzippedSrc
argument_list|)
expr_stmt|;
name|StringBuilder
name|classPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|setupClasspath
argument_list|(
name|classPath
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|File
argument_list|>
name|srcFiles
init|=
name|FileUtils
operator|.
name|getFilesRecurse
argument_list|(
name|unzippedSrc
argument_list|,
literal|".+\\.java$"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|compileJavaSrc
argument_list|(
name|classPath
operator|.
name|toString
argument_list|()
argument_list|,
name|srcFiles
argument_list|,
name|classes
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Could not compile classes"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|unzip
parameter_list|(
name|InputStream
name|fin
parameter_list|,
name|File
name|unzippedSrc
parameter_list|)
throws|throws
name|Exception
block|{
name|ZipInputStream
name|zin
init|=
operator|new
name|ZipInputStream
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|ZipEntry
name|ze
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|ze
operator|=
name|zin
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
name|entryName
init|=
name|ze
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|entryName
operator|.
name|lastIndexOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|packageDir
init|=
operator|new
name|File
argument_list|(
name|unzippedSrc
argument_list|,
name|entryName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|packageDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileOutputStream
name|fout
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|packageDir
argument_list|,
name|entryName
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
name|zin
operator|.
name|read
argument_list|()
init|;
name|c
operator|!=
operator|-
literal|1
condition|;
name|c
operator|=
name|zin
operator|.
name|read
argument_list|()
control|)
block|{
name|fout
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|zin
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|zin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|compileJavaSrc
parameter_list|(
name|String
name|classPath
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|srcList
parameter_list|,
name|String
name|dest
parameter_list|)
block|{
name|String
index|[]
name|javacCommand
init|=
operator|new
name|String
index|[
name|srcList
operator|.
name|size
argument_list|()
operator|+
literal|7
index|]
decl_stmt|;
name|javacCommand
index|[
literal|0
index|]
operator|=
literal|"javac"
expr_stmt|;
name|javacCommand
index|[
literal|1
index|]
operator|=
literal|"-classpath"
expr_stmt|;
name|javacCommand
index|[
literal|2
index|]
operator|=
name|classPath
expr_stmt|;
name|javacCommand
index|[
literal|3
index|]
operator|=
literal|"-d"
expr_stmt|;
name|javacCommand
index|[
literal|4
index|]
operator|=
name|dest
expr_stmt|;
name|javacCommand
index|[
literal|5
index|]
operator|=
literal|"-target"
expr_stmt|;
name|javacCommand
index|[
literal|6
index|]
operator|=
literal|"1.5"
expr_stmt|;
name|int
name|i
init|=
literal|7
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|srcList
control|)
block|{
name|javacCommand
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Compiler
name|javaCompiler
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Compiler
argument_list|()
decl_stmt|;
return|return
name|javaCompiler
operator|.
name|internalCompile
argument_list|(
name|javacCommand
argument_list|,
literal|7
argument_list|)
return|;
block|}
specifier|static
name|void
name|setupClasspath
parameter_list|(
name|StringBuilder
name|classPath
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|ClassLoader
name|scl
init|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|tcl
init|=
name|classLoader
decl_stmt|;
do|do
block|{
if|if
condition|(
name|tcl
operator|instanceof
name|URLClassLoader
condition|)
block|{
name|URL
index|[]
name|urls
init|=
operator|(
operator|(
name|URLClassLoader
operator|)
name|tcl
operator|)
operator|.
name|getURLs
argument_list|()
decl_stmt|;
if|if
condition|(
name|urls
operator|==
literal|null
condition|)
block|{
name|urls
operator|=
operator|new
name|URL
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
name|URL
name|url
range|:
name|urls
control|)
block|{
if|if
condition|(
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|File
name|file
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|urise
parameter_list|)
block|{
if|if
condition|(
name|url
operator|.
name|getPath
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|file
operator|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|classPath
operator|.
name|append
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|addClasspathFromManifest
argument_list|(
name|classPath
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|tcl
operator|=
name|tcl
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|tcl
condition|)
block|{
break|break;
block|}
block|}
do|while
condition|(
operator|!
name|tcl
operator|.
name|equals
argument_list|(
name|scl
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
do|;
block|}
specifier|static
name|void
name|addClasspathFromManifest
parameter_list|(
name|StringBuilder
name|classPath
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|JarFile
name|jar
init|=
operator|new
name|JarFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Attributes
name|attr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jar
operator|.
name|getManifest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|attr
operator|=
name|jar
operator|.
name|getManifest
argument_list|()
operator|.
name|getMainAttributes
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|String
name|cp
init|=
name|attr
operator|.
name|getValue
argument_list|(
literal|"Class-Path"
argument_list|)
decl_stmt|;
while|while
condition|(
name|cp
operator|!=
literal|null
condition|)
block|{
name|String
name|fileName
init|=
name|cp
decl_stmt|;
name|int
name|idx
init|=
name|fileName
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cp
operator|=
name|cp
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cp
operator|=
literal|null
expr_stmt|;
block|}
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|f2
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|f2
operator|=
operator|new
name|File
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f2
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f2
operator|.
name|exists
argument_list|()
condition|)
block|{
name|classPath
operator|.
name|append
argument_list|(
name|f2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|classPath
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Message
name|mockMessage
parameter_list|(
name|String
name|baseAddress
parameter_list|,
name|String
name|pathInfo
parameter_list|,
name|String
name|query
parameter_list|,
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|cris
parameter_list|)
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|e
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|e
operator|.
name|put
argument_list|(
name|Service
operator|.
name|class
argument_list|,
operator|new
name|JAXRSServiceImpl
argument_list|(
name|cris
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ServletDestination
name|d
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServletDestination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|epr
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|epr
operator|.
name|setAddress
argument_list|(
name|baseAddress
argument_list|)
expr_stmt|;
name|epr
operator|.
name|setProperty
argument_list|(
literal|"org.apache.cxf.http.case_insensitive_queries"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|epr
operator|.
name|setProperty
argument_list|(
literal|"org.apache.cxf.endpoint.private"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|BindingInfo
name|bi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|bi
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|epr
operator|.
name|setBinding
argument_list|(
name|bi
argument_list|)
expr_stmt|;
name|d
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|epr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|e
operator|.
name|setDestination
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|e
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|get
argument_list|(
name|ProviderFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|ProviderFactory
operator|.
name|getSharedInstance
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|epr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
return|return
name|m
return|;
block|}
block|}
end_class

end_unit

