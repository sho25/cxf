begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|EntityTag
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|NewCookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Variant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|HttpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ResponseBuilderImplTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testStatusSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
operator|new
name|ResponseBuilderImpl
argument_list|()
operator|.
name|status
argument_list|(
literal|200
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatusNotSetNoEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|204
argument_list|,
operator|new
name|ResponseBuilderImpl
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatusNotSetEntitySet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|200
argument_list|,
operator|new
name|ResponseBuilderImpl
argument_list|()
operator|.
name|entity
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllow
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Allow"
argument_list|,
literal|"HEAD"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Allow"
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|allow
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|allow
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|encoding
argument_list|(
literal|"gzip"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|entity
argument_list|(
literal|"Hello"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|"Hello"
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntityAnnotations
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Annotation
index|[]
name|annotations
init|=
operator|new
name|Annotation
index|[
literal|1
index|]
decl_stmt|;
name|Annotation
name|produces
init|=
operator|new
name|Produces
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
name|Produces
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|value
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"text/turtle"
block|}
return|;
block|}
block|}
decl_stmt|;
name|annotations
index|[
literal|0
index|]
operator|=
name|produces
expr_stmt|;
name|Response
name|response
init|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|entity
argument_list|(
literal|"<> a<#test>"
argument_list|,
name|annotations
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|checkBuild
argument_list|(
name|response
argument_list|,
literal|200
argument_list|,
literal|"<> a<#test>"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|annotations
argument_list|,
operator|(
operator|(
name|ResponseImpl
operator|)
name|response
operator|)
operator|.
name|getEntityAnnotations
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceAll
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
literal|"image/png"
argument_list|)
operator|.
name|tag
argument_list|(
literal|"removeme"
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|m
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowReset
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Allow"
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|allow
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|allow
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|allow
argument_list|()
operator|.
name|allow
argument_list|(
literal|"POST"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowSet
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Allow"
argument_list|,
literal|"HEAD"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Allow"
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
comment|// LinkedHashSet so we get a predictable order
name|Set
argument_list|<
name|String
argument_list|>
name|methods
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|methods
operator|.
name|add
argument_list|(
literal|"HEAD"
argument_list|)
expr_stmt|;
name|methods
operator|.
name|add
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|allow
argument_list|(
name|methods
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowReSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Response
name|r
init|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|allow
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|allow
argument_list|(
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"Allow"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidStatus
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|Response
operator|.
name|status
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|Response
operator|.
name|status
argument_list|(
literal|101
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|Response
operator|.
name|status
argument_list|(
literal|200
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|599
argument_list|,
name|Response
operator|.
name|status
argument_list|(
literal|599
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|598
argument_list|,
name|Response
operator|.
name|status
argument_list|(
literal|598
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testIllegalsStatus1
parameter_list|()
block|{
name|Response
operator|.
name|status
argument_list|(
literal|99
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testIllegalsStatus2
parameter_list|()
block|{
name|Response
operator|.
name|status
argument_list|(
literal|600
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbsoluteLocation
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Location"
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"http://localhost/rest"
argument_list|)
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|location
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://localhost/rest"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLanguage
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Content-Language"
argument_list|,
literal|"de"
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|language
argument_list|(
literal|"de"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLanguageReplace
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Content-Language"
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|language
argument_list|(
literal|"de"
argument_list|)
operator|.
name|language
argument_list|(
operator|(
name|Locale
operator|)
literal|null
argument_list|)
operator|.
name|language
argument_list|(
literal|"en"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLinkStr
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page3>;rel=\"next\""
argument_list|)
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|link
argument_list|(
literal|"http://example.com/page3"
argument_list|,
literal|"next"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLinkStrMultiple
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page1>;rel=\"previous\""
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page3>;rel=\"next\""
argument_list|)
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|link
argument_list|(
literal|"http://example.com/page1"
argument_list|,
literal|"previous"
argument_list|)
operator|.
name|link
argument_list|(
literal|"http://example.com/page3"
argument_list|,
literal|"next"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLinkStrMultipleSameRel
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page2.pdf>;rel=\"alternate\""
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page2.txt>;rel=\"alternate\""
argument_list|)
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|link
argument_list|(
literal|"http://example.com/page2.pdf"
argument_list|,
literal|"alternate"
argument_list|)
operator|.
name|link
argument_list|(
literal|"http://example.com/page2.txt"
argument_list|,
literal|"alternate"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLinkURI
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://example.com/page3"
argument_list|)
decl_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page3>;rel=\"next\""
argument_list|)
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|link
argument_list|(
name|uri
argument_list|,
literal|"next"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLinks
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page1>;rel=\"previous\""
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page3>;rel=\"next\""
argument_list|)
argument_list|)
expr_stmt|;
name|RuntimeDelegateImpl
name|delegate
init|=
operator|new
name|RuntimeDelegateImpl
argument_list|()
decl_stmt|;
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
name|delegate
operator|.
name|createLinkBuilder
argument_list|()
decl_stmt|;
name|Link
name|prevLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"previous"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Reset linkbuilder
name|linkBuilder
operator|=
name|delegate
operator|.
name|createLinkBuilder
argument_list|()
expr_stmt|;
name|Link
name|nextLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page3"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"next"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|links
argument_list|(
name|prevLink
argument_list|,
name|nextLink
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLinks2
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page1>;rel=\"previous\""
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page3>;rel=\"next\""
argument_list|)
argument_list|)
expr_stmt|;
name|RuntimeDelegateImpl
name|delegate
init|=
operator|new
name|RuntimeDelegateImpl
argument_list|()
decl_stmt|;
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
name|delegate
operator|.
name|createLinkBuilder
argument_list|()
decl_stmt|;
name|Link
name|prevLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"previous"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Reset linkbuilder
name|linkBuilder
operator|=
name|delegate
operator|.
name|createLinkBuilder
argument_list|()
expr_stmt|;
name|Link
name|nextLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page3"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"next"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Link
index|[]
name|links
init|=
operator|new
name|Link
index|[
literal|2
index|]
decl_stmt|;
name|links
index|[
literal|0
index|]
operator|=
name|prevLink
expr_stmt|;
name|links
index|[
literal|1
index|]
operator|=
name|nextLink
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|links
argument_list|(
name|links
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLinksNoReset
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page1>;rel=\"previous\""
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page3>;rel=\"next\""
argument_list|)
argument_list|)
expr_stmt|;
name|RuntimeDelegateImpl
name|delegate
init|=
operator|new
name|RuntimeDelegateImpl
argument_list|()
decl_stmt|;
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
name|delegate
operator|.
name|createLinkBuilder
argument_list|()
decl_stmt|;
name|Link
name|prevLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"previous"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|linkBuilder
operator|=
name|delegate
operator|.
name|createLinkBuilder
argument_list|()
expr_stmt|;
name|Link
name|nextLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page3"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"next"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|links
argument_list|(
name|prevLink
argument_list|)
operator|.
name|links
argument_list|(
name|nextLink
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLinksWithReset
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Link"
argument_list|,
name|Link
operator|.
name|valueOf
argument_list|(
literal|"<http://example.com/page3>;rel=\"next\""
argument_list|)
argument_list|)
expr_stmt|;
name|RuntimeDelegateImpl
name|delegate
init|=
operator|new
name|RuntimeDelegateImpl
argument_list|()
decl_stmt|;
name|Link
operator|.
name|Builder
name|linkBuilder
init|=
name|delegate
operator|.
name|createLinkBuilder
argument_list|()
decl_stmt|;
name|Link
name|prevLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page1"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"previous"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|linkBuilder
operator|=
name|delegate
operator|.
name|createLinkBuilder
argument_list|()
expr_stmt|;
name|Link
name|nextLink
init|=
name|linkBuilder
operator|.
name|uri
argument_list|(
literal|"http://example.com/page3"
argument_list|)
operator|.
name|rel
argument_list|(
literal|"next"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// CHECK: Should .links() do a reset? Undocumented feature; so we'll
comment|// test with the awkward<code>(Link[])null</code> instead..
comment|// Note: .cookie() has same behavior.
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|links
argument_list|(
name|prevLink
argument_list|)
operator|.
name|links
argument_list|(
operator|(
name|Link
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|links
argument_list|(
name|nextLink
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddHeader
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Content-Language"
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LANGUAGE
argument_list|,
literal|"de"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LANGUAGE
argument_list|,
literal|null
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LANGUAGE
argument_list|,
literal|"en"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddCookie
parameter_list|()
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Set-Cookie"
argument_list|,
operator|new
name|NewCookie
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Set-Cookie"
argument_list|,
operator|new
name|NewCookie
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|cookie
argument_list|(
operator|new
name|NewCookie
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|cookie
argument_list|(
operator|new
name|NewCookie
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTagString
parameter_list|()
block|{
name|Response
name|r
init|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|tag
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|eTag
init|=
name|r
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"ETag"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\"foo\""
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTagStringWithQuotes
parameter_list|()
block|{
name|Response
name|r
init|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|tag
argument_list|(
literal|"\"foo\""
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|eTag
init|=
name|r
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"ETag"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\"foo\""
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntityTag
parameter_list|()
block|{
name|Response
name|r
init|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|tag
argument_list|(
operator|new
name|EntityTag
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|eTag
init|=
name|r
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"ETag"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\"foo\""
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntityTag2
parameter_list|()
block|{
name|Response
name|r
init|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|tag
argument_list|(
operator|new
name|EntityTag
argument_list|(
literal|"\"foo\""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|eTag
init|=
name|r
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"ETag"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\"foo\""
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpires
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleDateFormat
name|format
init|=
name|HttpUtils
operator|.
name|getHttpDateFormat
argument_list|()
decl_stmt|;
name|Date
name|date
init|=
name|format
operator|.
name|parse
argument_list|(
literal|"Tue, 21 Oct 2008 17:00:00 GMT"
argument_list|)
decl_stmt|;
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Expires"
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|expires
argument_list|(
name|format
operator|.
name|parse
argument_list|(
literal|"Tue, 21 Oct 2008 17:00:00 GMT"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|EXPIRES
argument_list|,
name|format
operator|.
name|parse
argument_list|(
literal|"Tue, 21 Oct 2008 17:00:00 GMT"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOkBuild
parameter_list|()
block|{
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVariant
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Content-Type"
argument_list|,
name|MediaType
operator|.
name|TEXT_XML_TYPE
argument_list|)
expr_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Content-Language"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
name|Variant
name|v
init|=
operator|new
name|Variant
argument_list|(
name|MediaType
operator|.
name|TEXT_XML_TYPE
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|)
argument_list|,
literal|"gzip"
argument_list|)
decl_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|variant
argument_list|(
name|v
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVariant2
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|encoding
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"gzip"
argument_list|,
literal|"compress"
argument_list|)
decl_stmt|;
name|MediaType
name|mt
init|=
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|rb
operator|=
name|rb
operator|.
name|variants
argument_list|(
name|getVariantList
argument_list|(
name|encoding
argument_list|,
name|mt
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Variant
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|rb
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|enc
init|=
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_ENCODING
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|encoding
operator|.
name|containsAll
argument_list|(
name|enc
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ct
init|=
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ct
operator|.
name|contains
argument_list|(
name|mt
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|Variant
argument_list|>
name|getVariantList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|encoding
parameter_list|,
name|MediaType
modifier|...
name|mt
parameter_list|)
block|{
return|return
name|Variant
operator|.
name|VariantListBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|mediaTypes
argument_list|(
name|mt
argument_list|)
operator|.
name|languages
argument_list|(
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|,
literal|"US"
argument_list|)
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|,
literal|"GB"
argument_list|)
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"zh"
argument_list|,
literal|"CN"
argument_list|)
argument_list|)
operator|.
name|encodings
argument_list|(
name|encoding
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
operator|.
name|add
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatedNoEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|putSingle
argument_list|(
literal|"Location"
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|)
expr_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|created
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://foo"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|201
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkBuild
parameter_list|(
name|Response
name|r
parameter_list|,
name|int
name|status
parameter_list|,
name|Object
name|entity
parameter_list|,
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
parameter_list|)
block|{
name|ResponseImpl
name|ri
init|=
operator|(
name|ResponseImpl
operator|)
name|r
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong status"
argument_list|,
name|status
argument_list|,
name|ri
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Wrong entity"
argument_list|,
name|entity
argument_list|,
name|ri
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong meta"
argument_list|,
name|meta
argument_list|,
name|ri
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVariantsArray
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Type"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Language"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en_uk"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Language"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en_gb"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Vary"
argument_list|,
literal|"Accept"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Vary"
argument_list|,
literal|"Accept-Language"
argument_list|)
expr_stmt|;
name|Variant
name|json
init|=
operator|new
name|Variant
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en_uk"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Variant
name|xml
init|=
operator|new
name|Variant
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en_gb"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|variants
argument_list|(
name|json
argument_list|,
name|xml
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVariantsList
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Type"
argument_list|,
name|MediaType
operator|.
name|TEXT_XML_TYPE
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Language"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|,
literal|"UK"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Language"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|,
literal|"GB"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"compress"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Vary"
argument_list|,
literal|"Accept"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Vary"
argument_list|,
literal|"Accept-Language"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"Vary"
argument_list|,
literal|"Accept-Encoding"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Variant
argument_list|>
name|vts
init|=
name|Variant
operator|.
name|VariantListBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|mediaTypes
argument_list|(
name|MediaType
operator|.
name|TEXT_XML_TYPE
argument_list|)
operator|.
name|languages
argument_list|(
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|,
literal|"UK"
argument_list|)
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|,
literal|"GB"
argument_list|)
argument_list|)
operator|.
name|encodings
argument_list|(
literal|"compress"
argument_list|,
literal|"gzip"
argument_list|)
operator|.
name|add
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|checkBuild
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|variants
argument_list|(
name|vts
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

