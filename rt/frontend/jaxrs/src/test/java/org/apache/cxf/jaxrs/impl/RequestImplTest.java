begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|EntityTag
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RequestImplTest
extends|extends
name|Assert
block|{
specifier|private
name|Message
name|m
decl_stmt|;
specifier|private
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|m
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|metadata
operator|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearUp
parameter_list|()
block|{
name|m
operator|=
literal|null
expr_stmt|;
name|metadata
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWeakEtags
parameter_list|()
block|{
name|metadata
operator|.
name|putSingle
argument_list|(
literal|"If-Match"
argument_list|,
operator|new
name|EntityTag
argument_list|(
literal|"123"
argument_list|,
literal|true
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
operator|new
name|RequestImpl
argument_list|(
name|m
argument_list|)
operator|.
name|evaluatePreconditions
argument_list|(
operator|new
name|EntityTag
argument_list|(
literal|"123"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Strict compararison is required"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|Response
name|r
init|=
name|rb
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"If-Match precondition was not met"
argument_list|,
literal|412
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Response should include ETag"
argument_list|,
literal|"\"123\""
argument_list|,
name|r
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"ETag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStrictEtags
parameter_list|()
block|{
name|metadata
operator|.
name|putSingle
argument_list|(
literal|"If-Match"
argument_list|,
operator|new
name|EntityTag
argument_list|(
literal|"123"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
operator|new
name|RequestImpl
argument_list|(
name|m
argument_list|)
operator|.
name|evaluatePreconditions
argument_list|(
operator|new
name|EntityTag
argument_list|(
literal|"123"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Precondition must be met"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStarEtags
parameter_list|()
block|{
name|metadata
operator|.
name|putSingle
argument_list|(
literal|"If-Match"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
operator|new
name|RequestImpl
argument_list|(
name|m
argument_list|)
operator|.
name|evaluatePreconditions
argument_list|(
operator|new
name|EntityTag
argument_list|(
literal|"123"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Precondition must be met"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBeforeDate
parameter_list|()
throws|throws
name|Exception
block|{
name|metadata
operator|.
name|putSingle
argument_list|(
literal|"If-Modified-Since"
argument_list|,
literal|"Sat, 29 Oct 1994 19:43:31 GMT"
argument_list|)
expr_stmt|;
name|Date
name|serverDate
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd MMM yyyy HH:mm:ss zzz"
argument_list|)
operator|.
name|parse
argument_list|(
literal|"Sun, 29 Oct 1994 19:43:31 GMT"
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
operator|new
name|RequestImpl
argument_list|(
name|m
argument_list|)
operator|.
name|evaluatePreconditions
argument_list|(
name|serverDate
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Precondition must be met"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testAfterDate
parameter_list|()
throws|throws
name|Exception
block|{
name|metadata
operator|.
name|putSingle
argument_list|(
literal|"If-Modified-Since"
argument_list|,
literal|"Sat, 29 Oct 1994 19:43:31 GMT"
argument_list|)
expr_stmt|;
name|Date
name|serverDate
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd MMM yyyy HH:mm:ss zzz"
argument_list|)
operator|.
name|parse
argument_list|(
literal|"Fri, 28 Oct 1994 19:43:31 GMT"
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
operator|new
name|RequestImpl
argument_list|(
name|m
argument_list|)
operator|.
name|evaluatePreconditions
argument_list|(
name|serverDate
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Precondition is not met"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|Response
name|r
init|=
name|rb
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"If-Modified-Since precondition was not met"
argument_list|,
literal|304
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

