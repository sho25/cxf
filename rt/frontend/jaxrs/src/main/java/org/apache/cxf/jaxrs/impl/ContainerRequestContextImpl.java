begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|HttpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|ContainerRequestContextImpl
implements|implements
name|ContainerRequestContext
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_KEY
init|=
literal|"jaxrs.filter.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENDPOINT_ADDRESS_PROPERTY
init|=
literal|"org.apache.cxf.transport.endpoint.address"
decl_stmt|;
specifier|private
name|HttpHeaders
name|h
decl_stmt|;
specifier|private
name|Message
name|m
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
decl_stmt|;
specifier|private
name|boolean
name|preMatch
decl_stmt|;
specifier|private
name|boolean
name|responseContext
decl_stmt|;
specifier|public
name|ContainerRequestContextImpl
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|preMatch
parameter_list|,
name|boolean
name|responseContext
parameter_list|)
block|{
name|this
operator|.
name|m
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|props
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|PROPERTY_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|h
operator|=
operator|new
name|HttpHeadersImpl
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|preMatch
operator|=
name|preMatch
expr_stmt|;
name|this
operator|.
name|responseContext
operator|=
name|responseContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortWith
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|checkContext
argument_list|()
expr_stmt|;
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Response
operator|.
name|class
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Locale
argument_list|>
name|getAcceptableLanguages
parameter_list|()
block|{
return|return
name|getHttpHeaders
argument_list|()
operator|.
name|getAcceptableLanguages
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MediaType
argument_list|>
name|getAcceptableMediaTypes
parameter_list|()
block|{
return|return
name|getHttpHeaders
argument_list|()
operator|.
name|getAcceptableMediaTypes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Cookie
argument_list|>
name|getCookies
parameter_list|()
block|{
return|return
name|getHttpHeaders
argument_list|()
operator|.
name|getCookies
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
return|return
name|getHttpHeaders
argument_list|()
operator|.
name|getDate
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getEntityStream
parameter_list|()
block|{
return|return
name|m
operator|.
name|get
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeaderString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getHttpHeaders
argument_list|()
operator|.
name|getHeaderString
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaders
parameter_list|()
block|{
name|h
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Locale
name|getLanguage
parameter_list|()
block|{
return|return
name|getHttpHeaders
argument_list|()
operator|.
name|getLanguage
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|getHttpHeaders
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MediaType
name|getMediaType
parameter_list|()
block|{
return|return
name|getHttpHeaders
argument_list|()
operator|.
name|getMediaType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|getProperty
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|props
operator|==
literal|null
condition|?
literal|null
else|:
name|props
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getPropertyNames
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|props
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Enumeration
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|nextElement
parameter_list|()
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Request
name|getRequest
parameter_list|()
block|{
return|return
operator|new
name|RequestImpl
argument_list|(
name|m
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SecurityContext
name|getSecurityContext
parameter_list|()
block|{
return|return
operator|new
name|SecurityContextImpl
argument_list|(
name|m
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UriInfo
name|getUriInfo
parameter_list|()
block|{
return|return
operator|new
name|UriInfoImpl
argument_list|(
name|m
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasEntity
parameter_list|()
block|{
return|return
name|getEntityStream
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEntityStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|checkContext
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMethod
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|IllegalStateException
block|{
name|checkContext
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
name|props
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|PROPERTY_KEY
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRequestUri
parameter_list|(
name|URI
name|requestUri
parameter_list|)
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|preMatch
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|HttpUtils
operator|.
name|resetRequestURI
argument_list|(
name|m
argument_list|,
name|requestUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRequestUri
parameter_list|(
name|URI
name|baseUri
parameter_list|,
name|URI
name|requestUri
parameter_list|)
throws|throws
name|IllegalStateException
block|{
name|setRequestUri
argument_list|(
name|requestUri
argument_list|)
expr_stmt|;
name|Object
name|servletRequest
init|=
name|m
operator|.
name|get
argument_list|(
literal|"HTTP.REQUEST"
argument_list|)
decl_stmt|;
if|if
condition|(
name|servletRequest
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
operator|)
name|servletRequest
operator|)
operator|.
name|setAttribute
argument_list|(
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|baseUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSecurityContext
parameter_list|(
name|SecurityContext
name|sc
parameter_list|)
block|{
name|m
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HttpHeaders
name|getHttpHeaders
parameter_list|()
block|{
return|return
name|h
operator|!=
literal|null
condition|?
name|h
else|:
operator|new
name|HttpHeadersImpl
argument_list|(
name|m
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkContext
parameter_list|()
block|{
if|if
condition|(
name|responseContext
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

