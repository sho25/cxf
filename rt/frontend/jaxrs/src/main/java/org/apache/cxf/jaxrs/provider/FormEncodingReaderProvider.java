begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_class
annotation|@
name|Consumes
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
annotation|@
name|Provider
specifier|public
specifier|final
class|class
name|FormEncodingReaderProvider
implements|implements
name|MessageBodyReader
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|char
name|SPACE_CHAR
init|=
literal|'+'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEXT_LINE
init|=
literal|"%0D%0A"
decl_stmt|;
specifier|private
name|boolean
name|decode
decl_stmt|;
specifier|private
name|FormValidator
name|validator
decl_stmt|;
specifier|public
name|void
name|setDecode
parameter_list|(
name|boolean
name|formDecoding
parameter_list|)
block|{
name|decode
operator|=
name|formDecoding
expr_stmt|;
block|}
specifier|public
name|void
name|setValidator
parameter_list|(
name|FormValidator
name|formValidator
parameter_list|)
block|{
name|validator
operator|=
name|formValidator
expr_stmt|;
block|}
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|MultivaluedMap
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readFrom
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|clazz
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|type
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|charset
init|=
literal|"UTF-8"
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|is
argument_list|,
name|bos
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|String
name|postBody
init|=
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|createMap
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|populateMap
argument_list|(
name|params
argument_list|,
name|postBody
argument_list|)
expr_stmt|;
name|validateMap
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
catch|catch
parameter_list|(
name|WebApplicationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|,
specifier|final
name|OutputStream
name|output
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|n
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
while|while
condition|(
operator|-
literal|1
operator|!=
name|n
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createMap
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|clazz
operator|==
name|MultivaluedMap
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
return|;
block|}
return|return
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
comment|/**      * Retrieve map of parameters from the passed in message      *      * @param message      * @return a Map of parameters.      */
specifier|protected
name|void
name|populateMap
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|body
parameter_list|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|body
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|body
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|String
index|[]
name|keyValue
init|=
name|part
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
comment|// Change to add blank string if key but not value is specified
if|if
condition|(
name|keyValue
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|decode
condition|)
block|{
name|String
index|[]
name|values
init|=
name|keyValue
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
name|NEXT_LINE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|keyValue
index|[
literal|0
index|]
argument_list|,
name|value
operator|.
name|replace
argument_list|(
name|SPACE_CHAR
argument_list|,
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|params
operator|.
name|add
argument_list|(
name|keyValue
index|[
literal|0
index|]
argument_list|,
name|keyValue
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|params
operator|.
name|add
argument_list|(
name|keyValue
index|[
literal|0
index|]
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|validateMap
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|validator
operator|!=
literal|null
condition|)
block|{
name|validator
operator|.
name|validate
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

