begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ClientErrorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|AsyncResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerResponseContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerResponseFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ResourceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|PathSegment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ContextResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptorContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptorContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|LoadingByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CacheAndWriteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|ReaderInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ContextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|DefaultMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ProtocolHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ProtocolHeadersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|MultipartBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|AsyncResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ContainerRequestContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ContainerResponseContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|HttpHeadersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MediaTypeHeaderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|PathSegmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ProvidersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ReaderInterceptorContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ReaderInterceptorMBR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|RequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ResourceContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ResourceInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ResponseBuilderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|SecurityContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|WriterInterceptorContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|WriterInterceptorMBW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|BeanParamInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|BeanResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfoComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|MethodInvocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfoComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfoStack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ProviderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|URITemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|AbstractConfigurableProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ServerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|multipart
operator|.
name|AttachmentUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JAXRSUtils
block|{
specifier|public
specifier|static
specifier|final
name|MediaType
name|ALL_TYPES
init|=
operator|new
name|MediaType
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_RESOURCE_CLASS
init|=
literal|"root.resource.class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IGNORE_MESSAGE_WRITERS
init|=
literal|"ignore.message.writers"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_INSTANCE
init|=
literal|"service.root.instance"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_PROVIDER
init|=
literal|"service.root.provider"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXCEPTION_FROM_MAPPER
init|=
literal|"exception.from.mapper"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SECOND_JAXRS_EXCEPTION
init|=
literal|"second.jaxrs.exception"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARTIAL_HIERARCHICAL_MEDIA_SUBTYPE_CHECK
init|=
literal|"media.subtype.partial.check"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DOC_LOCATION
init|=
literal|"wadl.location"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MEDIA_TYPE_Q_PARAM
init|=
literal|"q"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MEDIA_TYPE_QS_PARAM
init|=
literal|"qs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MEDIA_TYPE_DISTANCE_PARAM
init|=
literal|"d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CONTENT_TYPE
init|=
literal|"default.content.type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEEP_SUBRESOURCE_CANDIDATES
init|=
literal|"keep.subresource.candidates"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JAXRSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|JAXRSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH_SEGMENT_SEP
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPORT_FAULT_MESSAGE_PROPERTY
init|=
literal|"org.apache.cxf.jaxrs.report-fault-message"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NO_CONTENT_EXCEPTION
init|=
literal|"javax.ws.rs.core.NoContentException"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_CHARSET_PARAM
init|=
literal|"charset"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Annotation
index|[]
name|EMPTY_ANNOTATIONS
init|=
operator|new
name|Annotation
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|STREAMING_OUT_TYPES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|Reader
operator|.
name|class
argument_list|,
name|StreamingOutput
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|JAXRSUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|boolean
name|isStreamingOutType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|STREAMING_OUT_TYPES
operator|.
name|contains
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|PathSegment
argument_list|>
name|getPathSegments
parameter_list|(
name|String
name|thePath
parameter_list|,
name|boolean
name|decode
parameter_list|)
block|{
return|return
name|getPathSegments
argument_list|(
name|thePath
argument_list|,
name|decode
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|PathSegment
argument_list|>
name|getPathSegments
parameter_list|(
name|String
name|thePath
parameter_list|,
name|boolean
name|decode
parameter_list|,
name|boolean
name|ignoreLastSlash
parameter_list|)
block|{
name|List
argument_list|<
name|PathSegment
argument_list|>
name|theList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|thePath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|StringUtils
operator|.
name|notEmpty
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
operator|new
name|PathSegmentImpl
argument_list|(
name|p
argument_list|,
name|decode
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|thePath
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
operator|&&
name|thePath
operator|.
name|charAt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|String
name|value
init|=
name|ignoreLastSlash
condition|?
literal|""
else|:
literal|"/"
decl_stmt|;
name|theList
operator|.
name|add
argument_list|(
operator|new
name|PathSegmentImpl
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|theList
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|getUserMediaTypes
parameter_list|(
name|Object
name|provider
parameter_list|,
name|boolean
name|consumes
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|AbstractConfigurableProvider
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|provider
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|consumes
condition|)
block|{
name|types
operator|=
operator|(
operator|(
name|AbstractConfigurableProvider
operator|)
name|provider
operator|)
operator|.
name|getConsumeMediaTypes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|types
operator|=
operator|(
operator|(
name|AbstractConfigurableProvider
operator|)
name|provider
operator|)
operator|.
name|getProduceMediaTypes
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
name|values
operator|=
operator|!
name|types
operator|.
name|isEmpty
argument_list|()
condition|?
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
else|:
operator|new
name|String
index|[]
block|{
literal|"*/*"
block|}
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getProviderConsumeTypes
parameter_list|(
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
name|provider
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
name|getUserMediaTypes
argument_list|(
name|provider
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|getConsumeTypes
argument_list|(
name|provider
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Consumes
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
return|return
name|JAXRSUtils
operator|.
name|getMediaTypes
argument_list|(
name|values
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getProviderProduceTypes
parameter_list|(
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
name|provider
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
name|getUserMediaTypes
argument_list|(
name|provider
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|getProduceTypes
argument_list|(
name|provider
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Produces
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
return|return
name|JAXRSUtils
operator|.
name|getMediaTypes
argument_list|(
name|values
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getMediaTypes
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMimeTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|supportedMimeTypes
operator|.
name|addAll
argument_list|(
name|parseMediaTypes
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|supportedMimeTypes
return|;
block|}
specifier|public
specifier|static
name|void
name|injectParameters
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Object
name|requestObject
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|injectParameters
argument_list|(
name|ori
argument_list|,
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
argument_list|,
name|requestObject
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|void
name|injectParameters
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|BeanResourceInfo
name|bri
parameter_list|,
name|Object
name|requestObject
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|bri
operator|.
name|isSingleton
argument_list|()
operator|&&
operator|(
operator|!
name|bri
operator|.
name|getParameterMethods
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|bri
operator|.
name|getParameterFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Injecting request parameters into singleton resource is not thread-safe"
argument_list|)
expr_stmt|;
block|}
comment|// Param methods
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|URITemplate
operator|.
name|TEMPLATE_PARAMETERS
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|bri
operator|.
name|getParameterMethods
argument_list|()
control|)
block|{
name|Parameter
name|p
init|=
name|ResourceUtils
operator|.
name|getParameter
argument_list|(
literal|0
argument_list|,
name|m
operator|.
name|getAnnotations
argument_list|()
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Object
name|o
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|BEAN
condition|)
block|{
name|o
operator|=
name|createBeanParamValue
argument_list|(
name|message
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|o
operator|=
name|createHttpParameterValue
argument_list|(
name|p
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
operator|.
name|getParameterAnnotations
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|message
argument_list|,
name|values
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
name|InjectionUtils
operator|.
name|injectThroughMethod
argument_list|(
name|requestObject
argument_list|,
name|m
argument_list|,
name|o
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Param fields
for|for
control|(
name|Field
name|f
range|:
name|bri
operator|.
name|getParameterFields
argument_list|()
control|)
block|{
name|Parameter
name|p
init|=
name|ResourceUtils
operator|.
name|getParameter
argument_list|(
literal|0
argument_list|,
name|f
operator|.
name|getAnnotations
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|BEAN
condition|)
block|{
name|o
operator|=
name|createBeanParamValue
argument_list|(
name|message
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|o
operator|=
name|createHttpParameterValue
argument_list|(
name|p
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|,
name|f
operator|.
name|getGenericType
argument_list|()
argument_list|,
name|f
operator|.
name|getAnnotations
argument_list|()
argument_list|,
name|message
argument_list|,
name|values
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
name|InjectionUtils
operator|.
name|injectFieldValue
argument_list|(
name|f
argument_list|,
name|requestObject
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|ClassResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|selectResourceClass
parameter_list|(
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|resources
parameter_list|,
name|String
name|path
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
parameter_list|()
lambda|->
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"START_CRI_MATCH"
argument_list|,
name|BUNDLE
argument_list|,
name|path
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resources
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|resources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getURITemplate
argument_list|()
operator|.
name|match
argument_list|(
name|path
argument_list|,
name|values
argument_list|)
condition|?
name|Collections
operator|.
name|singletonMap
argument_list|(
name|resources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|values
argument_list|)
else|:
literal|null
return|;
block|}
name|SortedMap
argument_list|<
name|ClassResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|candidateList
init|=
operator|new
name|TreeMap
argument_list|<
name|ClassResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
operator|new
name|ClassResourceInfoComparator
argument_list|(
name|message
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ClassResourceInfo
name|cri
range|:
name|resources
control|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|cri
operator|.
name|getURITemplate
argument_list|()
operator|.
name|match
argument_list|(
name|path
argument_list|,
name|map
argument_list|)
condition|)
block|{
name|candidateList
operator|.
name|put
argument_list|(
name|cri
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
parameter_list|()
lambda|->
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"CRI_SELECTED_POSSIBLY"
argument_list|,
name|BUNDLE
argument_list|,
name|cri
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|path
argument_list|,
name|cri
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
parameter_list|()
lambda|->
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"CRI_NO_MATCH"
argument_list|,
name|BUNDLE
argument_list|,
name|path
argument_list|,
name|cri
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|candidateList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ClassResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|cris
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|candidateList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ClassResourceInfo
name|firstCri
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ClassResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|candidateList
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ClassResourceInfo
name|cri
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|cris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|firstCri
operator|=
name|cri
expr_stmt|;
name|cris
operator|.
name|put
argument_list|(
name|cri
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstCri
operator|!=
literal|null
operator|&&
name|URITemplate
operator|.
name|compareTemplates
argument_list|(
name|firstCri
operator|.
name|getURITemplate
argument_list|()
argument_list|,
name|cri
operator|.
name|getURITemplate
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|cris
operator|.
name|put
argument_list|(
name|cri
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
name|LOG
operator|.
name|fine
argument_list|(
parameter_list|()
lambda|->
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"CRI_SELECTED"
argument_list|,
name|BUNDLE
argument_list|,
name|cri
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|path
argument_list|,
name|cri
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cris
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|OperationResourceInfo
name|findTargetMethod
parameter_list|(
name|Map
argument_list|<
name|ClassResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|matchedResources
parameter_list|,
name|Message
name|message
parameter_list|,
name|String
name|httpMethod
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|matchedValues
parameter_list|,
name|String
name|requestContentType
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|acceptContentTypes
parameter_list|)
block|{
return|return
name|findTargetMethod
argument_list|(
name|matchedResources
argument_list|,
name|message
argument_list|,
name|httpMethod
argument_list|,
name|matchedValues
argument_list|,
name|requestContentType
argument_list|,
name|acceptContentTypes
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|//CHECKSTYLE:OFF
specifier|public
specifier|static
name|OperationResourceInfo
name|findTargetMethod
parameter_list|(
name|Map
argument_list|<
name|ClassResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|matchedResources
parameter_list|,
name|Message
name|message
parameter_list|,
name|String
name|httpMethod
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|matchedValues
parameter_list|,
name|String
name|requestContentType
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|acceptContentTypes
parameter_list|,
name|boolean
name|throwException
parameter_list|,
name|boolean
name|recordMatchedUri
parameter_list|)
block|{
comment|//CHECKSTYLE:ON
specifier|final
name|boolean
name|getMethod
init|=
name|HttpMethod
operator|.
name|GET
operator|.
name|equals
argument_list|(
name|httpMethod
argument_list|)
decl_stmt|;
name|MediaType
name|requestType
decl_stmt|;
try|try
block|{
name|requestType
operator|=
name|toMediaType
argument_list|(
name|requestContentType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toNotSupportedException
argument_list|(
name|ex
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|SortedMap
argument_list|<
name|OperationResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|candidateList
init|=
operator|new
name|TreeMap
argument_list|<
name|OperationResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
operator|new
name|OperationResourceInfoComparator
argument_list|(
name|message
argument_list|,
name|httpMethod
argument_list|,
name|getMethod
argument_list|,
name|requestType
argument_list|,
name|acceptContentTypes
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|pathMatched
init|=
literal|0
decl_stmt|;
name|int
name|methodMatched
init|=
literal|0
decl_stmt|;
name|int
name|consumeMatched
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|OperationResourceInfo
argument_list|>
name|finalPathSubresources
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ClassResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rEntry
range|:
name|matchedResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ClassResourceInfo
name|resource
init|=
name|rEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
name|rEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getCurrentPath
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
parameter_list|()
lambda|->
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"START_OPER_MATCH"
argument_list|,
name|BUNDLE
argument_list|,
name|resource
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|OperationResourceInfo
name|ori
range|:
name|resource
operator|.
name|getMethodDispatcher
argument_list|()
operator|.
name|getOperationResourceInfos
argument_list|()
control|)
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|URITemplate
name|uriTemplate
init|=
name|ori
operator|.
name|getURITemplate
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriTemplate
operator|!=
literal|null
operator|&&
name|uriTemplate
operator|.
name|match
argument_list|(
name|path
argument_list|,
name|map
argument_list|)
condition|)
block|{
name|String
name|finalGroup
init|=
name|map
operator|.
name|getFirst
argument_list|(
name|URITemplate
operator|.
name|FINAL_MATCH_GROUP
argument_list|)
decl_stmt|;
name|boolean
name|finalPath
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|finalGroup
argument_list|)
operator|||
name|PATH_SEGMENT_SEP
operator|.
name|equals
argument_list|(
name|finalGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|ori
operator|.
name|isSubResourceLocator
argument_list|()
condition|)
block|{
name|candidateList
operator|.
name|put
argument_list|(
name|ori
argument_list|,
name|map
argument_list|)
expr_stmt|;
if|if
condition|(
name|finalPath
condition|)
block|{
if|if
condition|(
name|finalPathSubresources
operator|==
literal|null
condition|)
block|{
name|finalPathSubresources
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|finalPathSubresources
operator|.
name|add
argument_list|(
name|ori
argument_list|)
expr_stmt|;
block|}
name|added
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finalPath
condition|)
block|{
name|pathMatched
operator|++
expr_stmt|;
if|if
condition|(
name|matchHttpMethod
argument_list|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|,
name|httpMethod
argument_list|)
condition|)
block|{
name|methodMatched
operator|++
expr_stmt|;
comment|//CHECKSTYLE:OFF
if|if
condition|(
name|getMethod
operator|||
name|matchConsumeTypes
argument_list|(
name|requestType
argument_list|,
name|ori
argument_list|)
condition|)
block|{
name|consumeMatched
operator|++
expr_stmt|;
for|for
control|(
name|MediaType
name|acceptType
range|:
name|acceptContentTypes
control|)
block|{
if|if
condition|(
name|matchProduceTypes
argument_list|(
name|acceptType
argument_list|,
name|ori
argument_list|)
condition|)
block|{
name|candidateList
operator|.
name|put
argument_list|(
name|ori
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|//CHECKSTYLE:ON
block|}
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
name|matchMessageLogSupplier
argument_list|(
name|ori
argument_list|,
name|path
argument_list|,
name|httpMethod
argument_list|,
name|requestType
argument_list|,
name|acceptContentTypes
argument_list|,
name|added
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|finalPathSubresources
operator|!=
literal|null
operator|&&
name|pathMatched
operator|>
literal|0
operator|&&
operator|!
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|KEEP_SUBRESOURCE_CANDIDATES
argument_list|,
literal|false
argument_list|)
condition|)
block|{
for|for
control|(
name|OperationResourceInfo
name|key
range|:
name|finalPathSubresources
control|)
block|{
name|candidateList
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|candidateList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|OperationResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|firstEntry
init|=
name|candidateList
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|matchedValues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|matchedValues
operator|.
name|putAll
argument_list|(
name|firstEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|OperationResourceInfo
name|ori
init|=
name|firstEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|headMethodPossible
argument_list|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|,
name|httpMethod
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"GET_INSTEAD_OF_HEAD"
argument_list|,
name|BUNDLE
argument_list|,
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
parameter_list|()
lambda|->
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"OPER_SELECTED"
argument_list|,
name|BUNDLE
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ori
operator|.
name|isSubResourceLocator
argument_list|()
condition|)
block|{
name|MediaType
name|responseMediaType
init|=
name|intersectSortMediaTypes
argument_list|(
name|acceptContentTypes
argument_list|,
name|ori
operator|.
name|getProduceTypes
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaTypeToString
argument_list|(
name|responseMediaType
argument_list|,
name|MEDIA_TYPE_Q_PARAM
argument_list|,
name|MEDIA_TYPE_QS_PARAM
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recordMatchedUri
condition|)
block|{
name|pushOntoStack
argument_list|(
name|ori
argument_list|,
name|matchedValues
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|ori
return|;
block|}
if|if
condition|(
operator|!
name|throwException
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|status
decl_stmt|;
comment|// criteria matched the least number of times will determine the error code;
comment|// priority : path, method, consumes, produces;
if|if
condition|(
name|pathMatched
operator|==
literal|0
condition|)
block|{
name|status
operator|=
literal|404
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodMatched
operator|==
literal|0
condition|)
block|{
name|status
operator|=
literal|405
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|consumeMatched
operator|==
literal|0
condition|)
block|{
name|status
operator|=
literal|415
expr_stmt|;
block|}
else|else
block|{
comment|// Not a single Produces match
name|status
operator|=
literal|406
expr_stmt|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|ClassResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|firstCri
init|=
name|matchedResources
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|firstCri
operator|.
name|getKey
argument_list|()
operator|.
name|isRoot
argument_list|()
condition|?
literal|"NO_OP_EXC"
else|:
literal|"NO_SUBRESOURCE_METHOD_FOUND"
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMsg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|name
argument_list|,
name|BUNDLE
argument_list|,
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
argument_list|,
name|getCurrentPath
argument_list|(
name|firstCri
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|httpMethod
argument_list|,
name|mediaTypeToString
argument_list|(
name|requestType
argument_list|)
argument_list|,
name|convertTypesToString
argument_list|(
name|acceptContentTypes
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"OPTIONS"
operator|.
name|equalsIgnoreCase
argument_list|(
name|httpMethod
argument_list|)
condition|)
block|{
name|Level
name|logLevel
init|=
name|getExceptionLogLevel
argument_list|(
name|message
argument_list|,
name|ClientErrorException
operator|.
name|class
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|logLevel
operator|==
literal|null
condition|?
name|Level
operator|.
name|FINE
else|:
name|logLevel
argument_list|,
parameter_list|()
lambda|->
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Response
name|response
init|=
name|createResponse
argument_list|(
name|getRootResources
argument_list|(
name|message
argument_list|)
argument_list|,
name|message
argument_list|,
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|,
name|status
argument_list|,
name|methodMatched
operator|==
literal|0
argument_list|)
decl_stmt|;
throw|throw
name|ExceptionUtils
operator|.
name|toHttpException
argument_list|(
literal|null
argument_list|,
name|response
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|Level
name|getExceptionLogLevel
parameter_list|(
name|Message
name|message
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WebApplicationException
argument_list|>
name|exClass
parameter_list|)
block|{
name|Level
name|logLevel
init|=
literal|null
decl_stmt|;
name|Object
name|logLevelProp
init|=
name|message
operator|.
name|get
argument_list|(
name|exClass
operator|.
name|getName
argument_list|()
operator|+
literal|".log.level"
argument_list|)
decl_stmt|;
if|if
condition|(
name|logLevelProp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|logLevelProp
operator|instanceof
name|Level
condition|)
block|{
name|logLevel
operator|=
operator|(
name|Level
operator|)
name|logLevelProp
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|logLevel
operator|=
name|Level
operator|.
name|parse
argument_list|(
name|logLevelProp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
return|return
name|logLevel
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|intersectSortMediaTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|acceptTypes
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|producesTypes
parameter_list|,
specifier|final
name|boolean
name|checkDistance
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|all
init|=
name|intersectMimeTypes
argument_list|(
name|acceptTypes
argument_list|,
name|producesTypes
argument_list|,
literal|true
argument_list|,
name|checkDistance
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|all
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|MediaType
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MediaType
name|mt1
parameter_list|,
name|MediaType
name|mt2
parameter_list|)
block|{
name|int
name|result
init|=
name|compareMediaTypes
argument_list|(
name|mt1
argument_list|,
name|mt2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|compareQualityAndDistance
argument_list|(
name|mt1
argument_list|,
name|mt2
argument_list|,
name|checkDistance
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|all
return|;
block|}
specifier|private
specifier|static
name|int
name|compareQualityAndDistance
parameter_list|(
name|MediaType
name|mt1
parameter_list|,
name|MediaType
name|mt2
parameter_list|,
name|boolean
name|checkDistance
parameter_list|)
block|{
name|int
name|result
init|=
name|compareMediaTypesQualityFactors
argument_list|(
name|mt1
argument_list|,
name|mt2
argument_list|,
name|MEDIA_TYPE_Q_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|compareMediaTypesQualityFactors
argument_list|(
name|mt1
argument_list|,
name|mt2
argument_list|,
name|MEDIA_TYPE_QS_PARAM
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
operator|&&
name|checkDistance
condition|)
block|{
name|Integer
name|dist1
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|mt1
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|MEDIA_TYPE_DISTANCE_PARAM
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|dist2
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|mt2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|MEDIA_TYPE_DISTANCE_PARAM
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|=
name|dist1
operator|.
name|compareTo
argument_list|(
name|dist2
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|getCurrentPath
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|String
name|path
init|=
name|values
operator|.
name|getFirst
argument_list|(
name|URITemplate
operator|.
name|FINAL_MATCH_GROUP
argument_list|)
decl_stmt|;
return|return
name|path
operator|==
literal|null
condition|?
literal|"/"
else|:
name|path
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|getRootResources
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Service
name|service
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|JAXRSServiceImpl
operator|)
name|service
operator|)
operator|.
name|getClassResourceInfos
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|noResourceMethodForOptions
parameter_list|(
name|Response
name|exResponse
parameter_list|,
name|String
name|httpMethod
parameter_list|)
block|{
return|return
name|exResponse
operator|!=
literal|null
operator|&&
name|exResponse
operator|.
name|getStatus
argument_list|()
operator|==
literal|405
operator|&&
literal|"OPTIONS"
operator|.
name|equalsIgnoreCase
argument_list|(
name|httpMethod
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Supplier
argument_list|<
name|String
argument_list|>
name|matchMessageLogSupplier
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|httpMethod
parameter_list|,
name|MediaType
name|requestType
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|acceptContentTypes
parameter_list|,
name|boolean
name|added
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMsg
init|=
name|added
condition|?
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"OPER_SELECTED_POSSIBLY"
argument_list|,
name|BUNDLE
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
else|:
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"OPER_NO_MATCH"
argument_list|,
name|BUNDLE
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|path
argument_list|,
name|ori
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|httpMethod
argument_list|,
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|,
name|requestType
operator|.
name|toString
argument_list|()
argument_list|,
name|convertTypesToString
argument_list|(
name|ori
operator|.
name|getConsumeTypes
argument_list|()
argument_list|)
argument_list|,
name|convertTypesToString
argument_list|(
name|acceptContentTypes
argument_list|)
argument_list|,
name|convertTypesToString
argument_list|(
name|ori
operator|.
name|getProduceTypes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
parameter_list|()
lambda|->
name|errorMsg
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Response
name|createResponse
parameter_list|(
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|cris
parameter_list|,
name|Message
name|msg
parameter_list|,
name|String
name|responseMessage
parameter_list|,
name|int
name|status
parameter_list|,
name|boolean
name|addAllow
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|toResponseBuilder
argument_list|(
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|addAllow
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|allowedMethods
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassResourceInfo
name|cri
range|:
name|cris
control|)
block|{
name|allowedMethods
operator|.
name|addAll
argument_list|(
name|cri
operator|.
name|getAllowedMethods
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|m
range|:
name|allowedMethods
control|)
block|{
name|rb
operator|.
name|header
argument_list|(
literal|"Allow"
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
comment|// "OPTIONS" are supported all the time really
if|if
condition|(
operator|!
name|allowedMethods
operator|.
name|contains
argument_list|(
literal|"OPTIONS"
argument_list|)
condition|)
block|{
name|rb
operator|.
name|header
argument_list|(
literal|"Allow"
argument_list|,
literal|"OPTIONS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allowedMethods
operator|.
name|contains
argument_list|(
literal|"HEAD"
argument_list|)
operator|&&
name|allowedMethods
operator|.
name|contains
argument_list|(
literal|"GET"
argument_list|)
condition|)
block|{
name|rb
operator|.
name|header
argument_list|(
literal|"Allow"
argument_list|,
literal|"HEAD"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|msg
operator|!=
literal|null
operator|&&
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|msg
argument_list|,
name|REPORT_FAULT_MESSAGE_PROPERTY
argument_list|)
condition|)
block|{
name|rb
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
operator|.
name|entity
argument_list|(
name|responseMessage
argument_list|)
expr_stmt|;
block|}
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|matchHttpMethod
parameter_list|(
name|String
name|expectedMethod
parameter_list|,
name|String
name|httpMethod
parameter_list|)
block|{
return|return
name|expectedMethod
operator|.
name|equalsIgnoreCase
argument_list|(
name|httpMethod
argument_list|)
operator|||
name|headMethodPossible
argument_list|(
name|expectedMethod
argument_list|,
name|httpMethod
argument_list|)
operator|||
name|expectedMethod
operator|.
name|equals
argument_list|(
name|DefaultMethod
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|headMethodPossible
parameter_list|(
name|String
name|expectedMethod
parameter_list|,
name|String
name|httpMethod
parameter_list|)
block|{
return|return
name|HttpMethod
operator|.
name|HEAD
operator|.
name|equalsIgnoreCase
argument_list|(
name|httpMethod
argument_list|)
operator|&&
name|HttpMethod
operator|.
name|GET
operator|.
name|equals
argument_list|(
name|expectedMethod
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|convertTypesToString
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|types
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|MediaType
name|type
range|:
name|types
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|mediaTypeToString
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getConsumeTypes
parameter_list|(
name|Consumes
name|cm
parameter_list|)
block|{
return|return
name|getConsumeTypes
argument_list|(
name|cm
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|ALL_TYPES
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getConsumeTypes
parameter_list|(
name|Consumes
name|cm
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|defaultTypes
parameter_list|)
block|{
return|return
name|cm
operator|==
literal|null
condition|?
name|defaultTypes
else|:
name|getMediaTypes
argument_list|(
name|cm
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getProduceTypes
parameter_list|(
name|Produces
name|pm
parameter_list|)
block|{
return|return
name|getProduceTypes
argument_list|(
name|pm
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|ALL_TYPES
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getProduceTypes
parameter_list|(
name|Produces
name|pm
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|defaultTypes
parameter_list|)
block|{
return|return
name|pm
operator|==
literal|null
condition|?
name|defaultTypes
else|:
name|getMediaTypes
argument_list|(
name|pm
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|compareSortedConsumesMediaTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|mts1
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|mts2
parameter_list|,
name|MediaType
name|ct
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|actualMts1
init|=
name|getCompatibleMediaTypes
argument_list|(
name|mts1
argument_list|,
name|ct
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|actualMts2
init|=
name|getCompatibleMediaTypes
argument_list|(
name|mts2
argument_list|,
name|ct
argument_list|)
decl_stmt|;
return|return
name|compareSortedMediaTypes
argument_list|(
name|actualMts1
argument_list|,
name|actualMts2
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|compareSortedAcceptMediaTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|mts1
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|mts2
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|acceptTypes
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|actualMts1
init|=
name|intersectSortMediaTypes
argument_list|(
name|mts1
argument_list|,
name|acceptTypes
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|actualMts2
init|=
name|intersectSortMediaTypes
argument_list|(
name|mts2
argument_list|,
name|acceptTypes
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|size1
init|=
name|actualMts1
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|size2
init|=
name|actualMts2
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size1
operator|&&
name|i
operator|<
name|size2
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|compareMediaTypes
argument_list|(
name|actualMts1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actualMts2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|compareQualityAndDistance
argument_list|(
name|actualMts1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actualMts2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|size1
operator|==
name|size2
condition|?
literal|0
else|:
name|size1
operator|<
name|size2
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getCompatibleMediaTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|mts
parameter_list|,
name|MediaType
name|ct
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|actualMts
decl_stmt|;
if|if
condition|(
name|mts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|actualMts
operator|=
name|mts
expr_stmt|;
block|}
else|else
block|{
name|actualMts
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|MediaType
name|mt
range|:
name|mts
control|)
block|{
if|if
condition|(
name|isMediaTypeCompatible
argument_list|(
name|mt
argument_list|,
name|ct
argument_list|)
condition|)
block|{
name|actualMts
operator|.
name|add
argument_list|(
name|mt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|actualMts
return|;
block|}
specifier|public
specifier|static
name|int
name|compareSortedMediaTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|mts1
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|mts2
parameter_list|,
name|String
name|qs
parameter_list|)
block|{
name|int
name|size1
init|=
name|mts1
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|size2
init|=
name|mts2
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size1
operator|&&
name|i
operator|<
name|size2
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|compareMediaTypes
argument_list|(
name|mts1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|mts2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|qs
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|size1
operator|==
name|size2
condition|?
literal|0
else|:
name|size1
operator|<
name|size2
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
specifier|public
specifier|static
name|int
name|compareMethodParameters
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|paraList1
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|paraList2
parameter_list|)
block|{
name|int
name|size1
init|=
name|paraList1
operator|.
name|length
decl_stmt|;
name|int
name|size2
init|=
name|paraList2
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size1
operator|&&
name|i
operator|<
name|size2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|paraList1
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|paraList2
index|[
name|i
index|]
argument_list|)
condition|)
block|{
comment|// Handling the case when bridge / synthetic methods may be taken
comment|// into account (f.e. when service implements generic interfaces or
comment|// extends the generic classes).
if|if
condition|(
name|paraList1
index|[
name|i
index|]
operator|.
name|isAssignableFrom
argument_list|(
name|paraList2
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|paraList2
index|[
name|i
index|]
operator|.
name|isAssignableFrom
argument_list|(
name|paraList1
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|int
name|result
init|=
name|paraList1
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|paraList2
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
block|}
block|}
return|return
name|size1
operator|==
name|size2
condition|?
literal|0
else|:
name|size1
operator|<
name|size2
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
specifier|public
specifier|static
name|int
name|compareMediaTypes
parameter_list|(
name|MediaType
name|mt1
parameter_list|,
name|MediaType
name|mt2
parameter_list|)
block|{
return|return
name|compareMediaTypes
argument_list|(
name|mt1
argument_list|,
name|mt2
argument_list|,
name|MEDIA_TYPE_Q_PARAM
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|compareMediaTypes
parameter_list|(
name|MediaType
name|mt1
parameter_list|,
name|MediaType
name|mt2
parameter_list|,
name|String
name|qs
parameter_list|)
block|{
name|boolean
name|mt1TypeWildcard
init|=
name|mt1
operator|.
name|isWildcardType
argument_list|()
decl_stmt|;
name|boolean
name|mt2TypeWildcard
init|=
name|mt2
operator|.
name|isWildcardType
argument_list|()
decl_stmt|;
if|if
condition|(
name|mt1TypeWildcard
operator|&&
operator|!
name|mt2TypeWildcard
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|mt1TypeWildcard
operator|&&
name|mt2TypeWildcard
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|boolean
name|mt1SubTypeWildcard
init|=
name|mt1
operator|.
name|getSubtype
argument_list|()
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|MEDIA_TYPE_WILDCARD
argument_list|)
decl_stmt|;
name|boolean
name|mt2SubTypeWildcard
init|=
name|mt2
operator|.
name|getSubtype
argument_list|()
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|MEDIA_TYPE_WILDCARD
argument_list|)
decl_stmt|;
if|if
condition|(
name|mt1SubTypeWildcard
operator|&&
operator|!
name|mt2SubTypeWildcard
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|mt1SubTypeWildcard
operator|&&
name|mt2SubTypeWildcard
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|qs
operator|!=
literal|null
condition|?
name|compareMediaTypesQualityFactors
argument_list|(
name|mt1
argument_list|,
name|mt2
argument_list|,
name|qs
argument_list|)
else|:
literal|0
return|;
block|}
specifier|public
specifier|static
name|int
name|compareMediaTypesQualityFactors
parameter_list|(
name|MediaType
name|mt1
parameter_list|,
name|MediaType
name|mt2
parameter_list|)
block|{
name|float
name|q1
init|=
name|getMediaTypeQualityFactor
argument_list|(
name|mt1
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|MEDIA_TYPE_Q_PARAM
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|q2
init|=
name|getMediaTypeQualityFactor
argument_list|(
name|mt2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|MEDIA_TYPE_Q_PARAM
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Float
operator|.
name|compare
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
operator|*
operator|-
literal|1
return|;
block|}
specifier|public
specifier|static
name|int
name|compareMediaTypesQualityFactors
parameter_list|(
name|MediaType
name|mt1
parameter_list|,
name|MediaType
name|mt2
parameter_list|,
name|String
name|qs
parameter_list|)
block|{
name|float
name|q1
init|=
name|getMediaTypeQualityFactor
argument_list|(
name|mt1
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|qs
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|q2
init|=
name|getMediaTypeQualityFactor
argument_list|(
name|mt2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|qs
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Float
operator|.
name|compare
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
operator|*
operator|-
literal|1
return|;
block|}
specifier|public
specifier|static
name|float
name|getMediaTypeQualityFactor
parameter_list|(
name|String
name|q
parameter_list|)
block|{
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|q
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|q
operator|=
literal|'0'
operator|+
name|q
expr_stmt|;
block|}
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|q
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|// default value will do
block|}
return|return
literal|1
return|;
block|}
comment|//Message contains following information: PATH, HTTP_REQUEST_METHOD, CONTENT_TYPE, InputStream.
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|processParameters
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|ori
operator|.
name|getInParameterTypes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|paramsInfo
init|=
name|ori
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|boolean
name|preferModelParams
init|=
name|paramsInfo
operator|.
name|size
argument_list|()
operator|>
name|parameterTypes
operator|.
name|length
operator|&&
operator|!
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
literal|"org.apache.cxf.preferMethodParameters"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|parameterTypesLength
init|=
name|preferModelParams
condition|?
name|paramsInfo
operator|.
name|size
argument_list|()
else|:
name|parameterTypes
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|parameterTypesLength
operator|<
literal|1
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Type
index|[]
name|genericParameterTypes
init|=
name|ori
operator|.
name|getInGenericParameterTypes
argument_list|()
decl_stmt|;
name|Annotation
index|[]
index|[]
name|anns
init|=
name|ori
operator|.
name|getInParameterAnnotations
argument_list|()
decl_stmt|;
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
name|parameterTypesLength
index|]
decl_stmt|;
comment|// Ensure we process all request-body parameters first, then all @*Params, etc.
name|ParamTuple
index|[]
name|tuple
init|=
operator|new
name|ParamTuple
index|[
name|parameterTypesLength
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterTypesLength
condition|;
name|i
operator|++
control|)
block|{
name|tuple
index|[
name|i
index|]
operator|=
operator|new
name|ParamTuple
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|preferModelParams
condition|)
block|{
name|tuple
index|[
name|i
index|]
operator|.
name|param
operator|=
name|parameterTypes
index|[
name|i
index|]
expr_stmt|;
name|tuple
index|[
name|i
index|]
operator|.
name|genericParam
operator|=
name|InjectionUtils
operator|.
name|processGenericTypeIfNeeded
argument_list|(
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getServiceClass
argument_list|()
argument_list|,
name|tuple
index|[
name|i
index|]
operator|.
name|param
argument_list|,
name|genericParameterTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|tuple
index|[
name|i
index|]
operator|.
name|param
operator|=
name|InjectionUtils
operator|.
name|updateParamClassToTypeIfNeeded
argument_list|(
name|tuple
index|[
name|i
index|]
operator|.
name|param
argument_list|,
name|tuple
index|[
name|i
index|]
operator|.
name|genericParam
argument_list|)
expr_stmt|;
name|tuple
index|[
name|i
index|]
operator|.
name|paramAnns
operator|=
name|anns
operator|==
literal|null
condition|?
name|EMPTY_ANNOTATIONS
else|:
name|anns
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|tuple
index|[
name|i
index|]
operator|.
name|param
operator|=
name|paramsInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getJavaType
argument_list|()
expr_stmt|;
name|tuple
index|[
name|i
index|]
operator|.
name|genericParam
operator|=
name|tuple
index|[
name|i
index|]
operator|.
name|param
expr_stmt|;
name|tuple
index|[
name|i
index|]
operator|.
name|paramAnns
operator|=
name|EMPTY_ANNOTATIONS
expr_stmt|;
block|}
if|if
condition|(
name|paramsInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|REQUEST_BODY
condition|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|processRequestBodyParameter
argument_list|(
name|tuple
index|[
name|i
index|]
operator|.
name|param
argument_list|,
name|tuple
index|[
name|i
index|]
operator|.
name|genericParam
argument_list|,
name|tuple
index|[
name|i
index|]
operator|.
name|paramAnns
argument_list|,
name|message
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterTypesLength
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|paramsInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
operator|!=
name|ParameterType
operator|.
name|REQUEST_BODY
condition|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|processParameter
argument_list|(
name|tuple
index|[
name|i
index|]
operator|.
name|param
argument_list|,
name|tuple
index|[
name|i
index|]
operator|.
name|genericParam
argument_list|,
name|tuple
index|[
name|i
index|]
operator|.
name|paramAnns
argument_list|,
name|paramsInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|values
argument_list|,
name|message
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ParamTuple
block|{
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|param
decl_stmt|;
specifier|private
name|Type
name|genericParam
decl_stmt|;
specifier|private
name|Annotation
index|[]
name|paramAnns
decl_stmt|;
block|}
specifier|private
specifier|static
name|Object
name|processRequestBodyParameter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|parameterClass
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnns
parameter_list|,
name|Message
name|message
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
if|if
condition|(
name|parameterClass
operator|==
name|AsyncResponse
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|AsyncResponseImpl
argument_list|(
name|message
argument_list|)
return|;
block|}
name|String
name|contentType
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
name|String
name|defaultCt
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|DEFAULT_CONTENT_TYPE
argument_list|)
decl_stmt|;
name|contentType
operator|=
name|defaultCt
operator|==
literal|null
condition|?
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
else|:
name|defaultCt
expr_stmt|;
block|}
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|MediaType
name|mt
init|=
name|mc
operator|.
name|getHttpHeaders
argument_list|()
operator|.
name|getMediaType
argument_list|()
decl_stmt|;
name|InputStream
name|is
decl_stmt|;
if|if
condition|(
name|mt
operator|==
literal|null
operator|||
name|mt
operator|.
name|isCompatible
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED_TYPE
argument_list|)
condition|)
block|{
name|is
operator|=
name|copyAndGetEntityStream
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|is
operator|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|Reader
name|reader
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|is
operator|=
operator|new
name|ReaderInputStream
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|readFromMessageBody
argument_list|(
name|parameterClass
argument_list|,
name|parameterType
argument_list|,
name|parameterAnns
argument_list|,
name|is
argument_list|,
name|toMediaType
argument_list|(
name|contentType
argument_list|)
argument_list|,
name|ori
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|processParameter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|parameterClass
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnns
parameter_list|,
name|Parameter
name|parameter
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|Message
name|message
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
if|if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|REQUEST_BODY
condition|)
block|{
return|return
name|processRequestBodyParameter
argument_list|(
name|parameterClass
argument_list|,
name|parameterType
argument_list|,
name|parameterAnns
argument_list|,
name|message
argument_list|,
name|ori
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|CONTEXT
condition|)
block|{
return|return
name|createContextValue
argument_list|(
name|message
argument_list|,
name|parameterType
argument_list|,
name|parameterClass
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|BEAN
condition|)
block|{
return|return
name|createBeanParamValue
argument_list|(
name|message
argument_list|,
name|parameterClass
argument_list|,
name|ori
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createHttpParameterValue
argument_list|(
name|parameter
argument_list|,
name|parameterClass
argument_list|,
name|parameterType
argument_list|,
name|parameterAnns
argument_list|,
name|message
argument_list|,
name|values
argument_list|,
name|ori
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|createHttpParameterValue
parameter_list|(
name|Parameter
name|parameter
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameterClass
parameter_list|,
name|Type
name|genericParam
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|Message
name|message
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|boolean
name|isEncoded
init|=
name|parameter
operator|.
name|isEncoded
argument_list|()
operator|||
name|ori
operator|!=
literal|null
operator|&&
name|ori
operator|.
name|isEncodedEnabled
argument_list|()
decl_stmt|;
name|String
name|defaultValue
init|=
name|parameter
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|==
literal|null
operator|&&
name|ori
operator|!=
literal|null
condition|)
block|{
name|defaultValue
operator|=
name|ori
operator|.
name|getDefaultParameterValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|PATH
condition|)
block|{
return|return
name|readFromUriParam
argument_list|(
name|message
argument_list|,
name|parameter
operator|.
name|getName
argument_list|()
argument_list|,
name|parameterClass
argument_list|,
name|genericParam
argument_list|,
name|paramAnns
argument_list|,
name|values
argument_list|,
name|defaultValue
argument_list|,
operator|!
name|isEncoded
argument_list|)
return|;
block|}
if|if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|QUERY
condition|)
block|{
return|return
name|readQueryString
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|,
name|parameterClass
argument_list|,
name|genericParam
argument_list|,
name|paramAnns
argument_list|,
name|message
argument_list|,
name|defaultValue
argument_list|,
operator|!
name|isEncoded
argument_list|)
return|;
block|}
if|if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|MATRIX
condition|)
block|{
return|return
name|processMatrixParam
argument_list|(
name|message
argument_list|,
name|parameter
operator|.
name|getName
argument_list|()
argument_list|,
name|parameterClass
argument_list|,
name|genericParam
argument_list|,
name|paramAnns
argument_list|,
name|defaultValue
argument_list|,
operator|!
name|isEncoded
argument_list|)
return|;
block|}
if|if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|FORM
condition|)
block|{
return|return
name|processFormParam
argument_list|(
name|message
argument_list|,
name|parameter
operator|.
name|getName
argument_list|()
argument_list|,
name|parameterClass
argument_list|,
name|genericParam
argument_list|,
name|paramAnns
argument_list|,
name|defaultValue
argument_list|,
operator|!
name|isEncoded
argument_list|)
return|;
block|}
if|if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|COOKIE
condition|)
block|{
return|return
name|processCookieParam
argument_list|(
name|message
argument_list|,
name|parameter
operator|.
name|getName
argument_list|()
argument_list|,
name|parameterClass
argument_list|,
name|genericParam
argument_list|,
name|paramAnns
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|HEADER
condition|)
block|{
name|result
operator|=
name|processHeaderParam
argument_list|(
name|message
argument_list|,
name|parameter
operator|.
name|getName
argument_list|()
argument_list|,
name|parameterClass
argument_list|,
name|genericParam
argument_list|,
name|paramAnns
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|Object
name|processMatrixParam
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|pClass
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|boolean
name|decode
parameter_list|)
block|{
name|List
argument_list|<
name|PathSegment
argument_list|>
name|segments
init|=
name|JAXRSUtils
operator|.
name|getPathSegments
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
argument_list|,
name|decode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|segments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PathSegment
name|ps
range|:
name|segments
control|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|matrix
init|=
name|ps
operator|.
name|getMatrixParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|matrix
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|value
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|InjectionUtils
operator|.
name|handleBean
argument_list|(
name|pClass
argument_list|,
name|paramAnns
argument_list|,
name|params
argument_list|,
name|ParameterType
operator|.
name|MATRIX
argument_list|,
name|m
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|InjectionUtils
operator|.
name|createParameterObject
argument_list|(
name|values
argument_list|,
name|pClass
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|defaultValue
argument_list|,
literal|false
argument_list|,
name|ParameterType
operator|.
name|MATRIX
argument_list|,
name|m
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Object
name|processFormParam
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|pClass
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|boolean
name|decode
parameter_list|)
block|{
name|MessageContext
name|mc
init|=
operator|new
name|MessageContextImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|MediaType
name|mt
init|=
name|mc
operator|.
name|getHttpHeaders
argument_list|()
operator|.
name|getMediaType
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
name|FormUtils
operator|.
name|FORM_PARAM_MAP
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|FormUtils
operator|.
name|FORM_PARAM_MAP
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|mt
operator|==
literal|null
operator|||
name|mt
operator|.
name|isCompatible
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED_TYPE
argument_list|)
condition|)
block|{
name|InputStream
name|entityStream
init|=
name|copyAndGetEntityStream
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|String
name|enc
init|=
name|HttpUtils
operator|.
name|getEncoding
argument_list|(
name|mt
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|body
init|=
name|FormUtils
operator|.
name|readBody
argument_list|(
name|entityStream
argument_list|,
name|enc
argument_list|)
decl_stmt|;
name|FormUtils
operator|.
name|populateMapFromStringOrHttpRequest
argument_list|(
name|params
argument_list|,
name|m
argument_list|,
name|body
argument_list|,
name|enc
argument_list|,
name|decode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"multipart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mt
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|MediaType
operator|.
name|MULTIPART_FORM_DATA_TYPE
operator|.
name|isCompatible
argument_list|(
name|mt
argument_list|)
condition|)
block|{
name|MultipartBody
name|body
init|=
name|AttachmentUtils
operator|.
name|getMultipartBody
argument_list|(
name|mc
argument_list|)
decl_stmt|;
name|FormUtils
operator|.
name|populateMapFromMultipart
argument_list|(
name|params
argument_list|,
name|body
argument_list|,
name|m
argument_list|,
name|decode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMsg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"WRONG_FORM_MEDIA_TYPE"
argument_list|,
name|BUNDLE
argument_list|,
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionUtils
operator|.
name|toNotSupportedException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|InjectionUtils
operator|.
name|handleBean
argument_list|(
name|pClass
argument_list|,
name|paramAnns
argument_list|,
name|params
argument_list|,
name|ParameterType
operator|.
name|FORM
argument_list|,
name|m
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|InjectionUtils
operator|.
name|createParameterObject
argument_list|(
name|results
argument_list|,
name|pClass
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|defaultValue
argument_list|,
literal|false
argument_list|,
name|ParameterType
operator|.
name|FORM
argument_list|,
name|m
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMatrixParams
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|decode
parameter_list|)
block|{
name|int
name|index
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
return|return
name|index
operator|==
operator|-
literal|1
condition|?
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
else|:
name|JAXRSUtils
operator|.
name|getStructuredParams
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|,
literal|";"
argument_list|,
name|decode
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|processHeaderParam
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|header
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|pClass
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|HttpHeadersImpl
argument_list|(
name|m
argument_list|)
operator|.
name|getRequestHeader
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|values
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|InjectionUtils
operator|.
name|createParameterObject
argument_list|(
name|values
argument_list|,
name|pClass
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|defaultValue
argument_list|,
literal|false
argument_list|,
name|ParameterType
operator|.
name|HEADER
argument_list|,
name|m
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|processCookieParam
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|cookieName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|pClass
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|Cookie
name|c
init|=
operator|new
name|HttpHeadersImpl
argument_list|(
name|m
argument_list|)
operator|.
name|getCookies
argument_list|()
operator|.
name|get
argument_list|(
name|cookieName
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
operator|&&
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|Cookie
operator|.
name|valueOf
argument_list|(
name|cookieName
operator|+
literal|'='
operator|+
name|defaultValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|pClass
operator|.
name|isAssignableFrom
argument_list|(
name|Cookie
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
name|String
name|value
init|=
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|pClass
argument_list|)
operator|&&
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
operator|==
name|Cookie
operator|.
name|class
condition|?
name|c
operator|.
name|toString
argument_list|()
else|:
name|c
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|InjectionUtils
operator|.
name|createParameterObject
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|value
argument_list|)
argument_list|,
name|pClass
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|ParameterType
operator|.
name|COOKIE
argument_list|,
name|m
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|createBeanParamValue
parameter_list|(
name|Message
name|m
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|BeanParamInfo
name|bmi
init|=
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|(
name|m
argument_list|)
operator|.
name|getBeanParamInfo
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|bmi
operator|==
literal|null
condition|)
block|{
comment|// we could've started introspecting now but the fact no bean info
comment|// is available indicates that the one created at start up has been
comment|// lost and hence it is 500
name|LOG
operator|.
name|warning
argument_list|(
literal|"Bean parameter info is not available"
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionUtils
operator|.
name|toInternalServerErrorException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|Object
name|instance
decl_stmt|;
try|try
block|{
name|instance
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toInternalServerErrorException
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|JAXRSUtils
operator|.
name|injectParameters
argument_list|(
name|ori
argument_list|,
name|bmi
argument_list|,
name|instance
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|InjectionUtils
operator|.
name|injectContexts
argument_list|(
name|instance
argument_list|,
name|bmi
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
specifier|public
specifier|static
name|Message
name|getContextMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|Message
name|contextMessage
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
condition|?
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
else|:
name|m
decl_stmt|;
if|if
condition|(
name|contextMessage
operator|==
literal|null
operator|&&
operator|!
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|)
argument_list|)
condition|)
block|{
name|contextMessage
operator|=
name|m
expr_stmt|;
block|}
return|return
name|contextMessage
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createContextValue
parameter_list|(
name|Message
name|m
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|Message
name|contextMessage
init|=
name|getContextMessage
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|UriInfo
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|o
operator|=
name|createUriInfo
argument_list|(
name|contextMessage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|HttpHeaders
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
operator|||
name|ProtocolHeaders
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|o
operator|=
name|createHttpHeaders
argument_list|(
name|contextMessage
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SecurityContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|SecurityContext
name|customContext
init|=
name|contextMessage
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|o
operator|=
name|customContext
operator|==
literal|null
condition|?
operator|new
name|SecurityContextImpl
argument_list|(
name|contextMessage
argument_list|)
else|:
name|customContext
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MessageContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|o
operator|=
operator|new
name|MessageContextImpl
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ResourceInfo
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|o
operator|=
operator|new
name|ResourceInfoImpl
argument_list|(
name|contextMessage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ResourceContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|o
operator|=
operator|new
name|ResourceContextImpl
argument_list|(
name|contextMessage
argument_list|,
name|contextMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|OperationResourceInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Request
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|o
operator|=
operator|new
name|RequestImpl
argument_list|(
name|contextMessage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Providers
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|o
operator|=
operator|new
name|ProvidersImpl
argument_list|(
name|contextMessage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ContextResolver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|o
operator|=
name|createContextResolver
argument_list|(
name|genericType
argument_list|,
name|contextMessage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Configuration
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|o
operator|=
name|ProviderFactory
operator|.
name|getInstance
argument_list|(
name|contextMessage
argument_list|)
operator|.
name|getConfiguration
argument_list|(
name|contextMessage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Application
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|providerInfo
init|=
operator|(
name|ProviderInfo
argument_list|<
name|?
argument_list|>
operator|)
name|contextMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|get
argument_list|(
name|Application
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|o
operator|=
name|providerInfo
operator|==
literal|null
condition|?
literal|null
else|:
name|providerInfo
operator|.
name|getProvider
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contextMessage
operator|!=
literal|null
condition|)
block|{
name|ContextProvider
argument_list|<
name|?
argument_list|>
name|provider
init|=
name|ProviderFactory
operator|.
name|getInstance
argument_list|(
name|contextMessage
argument_list|)
operator|.
name|createContextProvider
argument_list|(
name|clazz
argument_list|,
name|contextMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
name|o
operator|=
name|provider
operator|.
name|createContext
argument_list|(
name|contextMessage
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|&&
name|contextMessage
operator|!=
literal|null
operator|&&
operator|!
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|contextMessage
argument_list|)
condition|)
block|{
name|o
operator|=
name|HttpUtils
operator|.
name|createServletResourceValue
argument_list|(
name|contextMessage
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|UriInfo
name|createUriInfo
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|m
operator|=
name|m
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
condition|?
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
else|:
name|m
expr_stmt|;
block|}
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateParams
init|=
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
name|URITemplate
operator|.
name|TEMPLATE_PARAMETERS
argument_list|)
decl_stmt|;
return|return
operator|new
name|UriInfoImpl
argument_list|(
name|m
argument_list|,
name|templateParams
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|createHttpHeaders
parameter_list|(
name|Message
name|m
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|ctxClass
parameter_list|)
block|{
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|m
operator|=
name|m
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
condition|?
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
else|:
name|m
expr_stmt|;
block|}
return|return
name|HttpHeaders
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|ctxClass
argument_list|)
condition|?
operator|new
name|HttpHeadersImpl
argument_list|(
name|m
argument_list|)
else|:
operator|new
name|ProtocolHeadersImpl
argument_list|(
name|m
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ContextResolver
argument_list|<
name|?
argument_list|>
name|createContextResolver
parameter_list|(
name|Type
name|genericType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|genericType
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|ProviderFactory
operator|.
name|getInstance
argument_list|(
name|m
argument_list|)
operator|.
name|createContextResolver
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|genericType
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|ProviderFactory
operator|.
name|getInstance
argument_list|(
name|m
argument_list|)
operator|.
name|createContextResolver
argument_list|(
name|genericType
argument_list|,
name|m
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|createResourceValue
parameter_list|(
name|Message
name|m
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
comment|// lets assume we're aware of servlet types only that can be @Resource-annotated
return|return
name|createContextValue
argument_list|(
name|m
argument_list|,
name|genericType
argument_list|,
name|clazz
argument_list|)
return|;
block|}
comment|//CHECKSTYLE:OFF
specifier|private
specifier|static
name|Object
name|readFromUriParam
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|parameterName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|boolean
name|decoded
parameter_list|)
block|{
comment|//CHECKSTYLE:ON
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|parameterName
argument_list|)
condition|)
block|{
return|return
name|InjectionUtils
operator|.
name|handleBean
argument_list|(
name|paramType
argument_list|,
name|paramAnns
argument_list|,
name|values
argument_list|,
name|ParameterType
operator|.
name|PATH
argument_list|,
name|m
argument_list|,
name|decoded
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|values
operator|.
name|get
argument_list|(
name|parameterName
argument_list|)
decl_stmt|;
return|return
name|InjectionUtils
operator|.
name|createParameterObject
argument_list|(
name|results
argument_list|,
name|paramType
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|defaultValue
argument_list|,
name|decoded
argument_list|,
name|ParameterType
operator|.
name|PATH
argument_list|,
name|m
argument_list|)
return|;
block|}
comment|//TODO : multiple query string parsing, do it once
specifier|private
specifier|static
name|Object
name|readQueryString
parameter_list|(
name|String
name|queryName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|Message
name|m
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|boolean
name|decode
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryMap
init|=
operator|new
name|UriInfoImpl
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
operator|.
name|getQueryParameters
argument_list|(
name|decode
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|queryName
argument_list|)
condition|)
block|{
return|return
name|InjectionUtils
operator|.
name|handleBean
argument_list|(
name|paramType
argument_list|,
name|paramAnns
argument_list|,
name|queryMap
argument_list|,
name|ParameterType
operator|.
name|QUERY
argument_list|,
name|m
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
name|InjectionUtils
operator|.
name|createParameterObject
argument_list|(
name|queryMap
operator|.
name|get
argument_list|(
name|queryName
argument_list|)
argument_list|,
name|paramType
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|defaultValue
argument_list|,
literal|false
argument_list|,
name|ParameterType
operator|.
name|QUERY
argument_list|,
name|m
argument_list|)
return|;
block|}
comment|/**      * Retrieve map of query parameters from the passed in message      * @return a Map of query parameters.      */
specifier|public
specifier|static
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStructuredParams
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|sep
parameter_list|,
name|boolean
name|decode
parameter_list|,
name|boolean
name|decodePlus
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|getStructuredParams
argument_list|(
name|map
argument_list|,
name|query
argument_list|,
name|sep
argument_list|,
name|decode
argument_list|,
name|decodePlus
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
specifier|public
specifier|static
name|void
name|getStructuredParams
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queries
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|sep
parameter_list|,
name|boolean
name|decode
parameter_list|,
name|boolean
name|decodePlus
parameter_list|)
block|{
name|getStructuredParams
argument_list|(
name|queries
argument_list|,
name|query
argument_list|,
name|sep
argument_list|,
name|decode
argument_list|,
name|decodePlus
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|getStructuredParams
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queries
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|sep
parameter_list|,
name|boolean
name|decode
parameter_list|,
name|boolean
name|decodePlus
parameter_list|,
name|boolean
name|valueIsCollection
parameter_list|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|query
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|part
range|:
name|query
operator|.
name|split
argument_list|(
name|sep
argument_list|)
control|)
block|{
comment|// fastpath expected
name|int
name|index
init|=
name|part
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|name
operator|=
name|part
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|part
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|value
operator|=
name|index
operator|<
name|part
operator|.
name|length
argument_list|()
condition|?
name|part
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
else|:
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|valueIsCollection
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|addStructuredPartToMap
argument_list|(
name|queries
argument_list|,
name|sep
argument_list|,
name|name
argument_list|,
name|s
argument_list|,
name|decode
argument_list|,
name|decodePlus
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addStructuredPartToMap
argument_list|(
name|queries
argument_list|,
name|sep
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|decode
argument_list|,
name|decodePlus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addStructuredPartToMap
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queries
parameter_list|,
name|String
name|sep
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|decode
parameter_list|,
name|boolean
name|decodePlus
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|decodePlus
operator|&&
name|value
operator|.
name|contains
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|decode
condition|)
block|{
name|value
operator|=
operator|(
literal|";"
operator|.
name|equals
argument_list|(
name|sep
argument_list|)
operator|)
condition|?
name|HttpUtils
operator|.
name|pathDecode
argument_list|(
name|value
argument_list|)
else|:
name|HttpUtils
operator|.
name|urlDecode
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|queries
operator|.
name|add
argument_list|(
name|HttpUtils
operator|.
name|urlDecode
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Object
name|readFromMessageBody
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|targetTypeClass
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|MediaType
name|contentType
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Message
name|m
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|types
init|=
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|ori
operator|.
name|getConsumeTypes
argument_list|()
argument_list|,
name|contentType
argument_list|)
decl_stmt|;
specifier|final
name|ProviderFactory
name|pf
init|=
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|(
name|m
argument_list|)
decl_stmt|;
for|for
control|(
name|MediaType
name|type
range|:
name|types
control|)
block|{
name|List
argument_list|<
name|ReaderInterceptor
argument_list|>
name|readers
init|=
name|pf
operator|.
name|createMessageBodyReaderInterceptor
argument_list|(
name|targetTypeClass
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|type
argument_list|,
name|m
argument_list|,
literal|true
argument_list|,
name|ori
operator|.
name|getNameBindings
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|readers
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|readFromMessageBodyReader
argument_list|(
name|readers
argument_list|,
name|targetTypeClass
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|is
argument_list|,
name|type
argument_list|,
name|m
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|NO_CONTENT_EXCEPTION
argument_list|)
condition|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toBadRequestException
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|WebApplicationException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
name|logMessageHandlerProblem
argument_list|(
literal|"NO_MSG_READER"
argument_list|,
name|targetTypeClass
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|UNSUPPORTED_MEDIA_TYPE
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Object
name|readFromMessageBodyReader
parameter_list|(
name|List
argument_list|<
name|ReaderInterceptor
argument_list|>
name|readers
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|targetTypeClass
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
comment|// Verbose but avoids an extra context instantiation for the typical path
if|if
condition|(
name|readers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|ReaderInterceptor
name|first
init|=
name|readers
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReaderInterceptorContext
name|context
init|=
operator|new
name|ReaderInterceptorContextImpl
argument_list|(
name|targetTypeClass
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|is
argument_list|,
name|m
argument_list|,
name|readers
argument_list|)
decl_stmt|;
return|return
name|first
operator|.
name|aroundReadFrom
argument_list|(
name|context
argument_list|)
return|;
block|}
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
name|provider
init|=
operator|(
operator|(
name|ReaderInterceptorMBR
operator|)
name|readers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getMBR
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
name|cls
init|=
name|targetTypeClass
decl_stmt|;
return|return
name|provider
operator|.
name|readFrom
argument_list|(
name|cls
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
operator|new
name|HttpHeadersImpl
argument_list|(
name|m
argument_list|)
operator|.
name|getRequestHeaders
argument_list|()
argument_list|,
name|is
argument_list|)
return|;
block|}
comment|//CHECKSTYLE:OFF
specifier|public
specifier|static
name|void
name|writeMessageBody
parameter_list|(
name|List
argument_list|<
name|WriterInterceptor
argument_list|>
name|writers
parameter_list|,
name|Object
name|entity
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|WebApplicationException
throws|,
name|IOException
block|{
name|OutputStream
name|entityStream
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.apache.cxf.jaxrs.reactivestreams.server.StreamingAsyncSubscriber$StreamingResponseImpl"
argument_list|)
condition|)
block|{
comment|//cache the OutputStream when it's reactive response
name|entityStream
operator|=
operator|new
name|CacheAndWriteOutputStream
argument_list|(
name|entityStream
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|WriterInterceptor
name|first
init|=
name|writers
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|WriterInterceptorContext
name|context
init|=
operator|new
name|WriterInterceptorContextImpl
argument_list|(
name|entity
argument_list|,
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|entityStream
argument_list|,
name|message
argument_list|,
name|writers
argument_list|)
decl_stmt|;
name|first
operator|.
name|aroundWriteTo
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
name|writer
init|=
operator|(
operator|(
name|WriterInterceptorMBW
operator|)
name|writers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getMBW
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|byte
index|[]
operator|.
name|class
condition|)
block|{
name|long
name|size
init|=
name|writer
operator|.
name|getSize
argument_list|(
name|entity
argument_list|,
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
name|httpHeaders
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|HttpUtils
operator|.
name|convertHeaderValuesToString
argument_list|(
name|httpHeaders
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeTo
argument_list|(
name|entity
argument_list|,
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|,
name|httpHeaders
argument_list|,
name|entityStream
argument_list|)
expr_stmt|;
block|}
block|}
comment|//CHECKSTYLE:ON
specifier|public
specifier|static
name|boolean
name|matchConsumeTypes
parameter_list|(
name|MediaType
name|requestContentType
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
return|return
name|doMimeTypesIntersect
argument_list|(
name|ori
operator|.
name|getConsumeTypes
argument_list|()
argument_list|,
name|requestContentType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchProduceTypes
parameter_list|(
name|MediaType
name|acceptContentType
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
return|return
name|doMimeTypesIntersect
argument_list|(
name|ori
operator|.
name|getProduceTypes
argument_list|()
argument_list|,
name|acceptContentType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchMimeTypes
parameter_list|(
name|MediaType
name|requestContentType
parameter_list|,
name|MediaType
name|acceptContentType
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
return|return
name|doMimeTypesIntersect
argument_list|(
name|ori
operator|.
name|getConsumeTypes
argument_list|()
argument_list|,
name|requestContentType
argument_list|)
operator|&&
name|doMimeTypesIntersect
argument_list|(
name|ori
operator|.
name|getProduceTypes
argument_list|()
argument_list|,
name|acceptContentType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|parseMediaTypes
parameter_list|(
name|String
name|types
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|acceptValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
name|types
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
while|while
condition|(
name|y
operator|>
literal|0
condition|)
block|{
name|acceptValues
operator|.
name|add
argument_list|(
name|toMediaType
argument_list|(
name|types
operator|.
name|substring
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|y
operator|+
literal|1
expr_stmt|;
name|y
operator|=
name|types
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|String
name|lastMediaType
init|=
name|types
operator|.
name|substring
argument_list|(
name|x
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lastMediaType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|acceptValues
operator|.
name|add
argument_list|(
name|toMediaType
argument_list|(
name|lastMediaType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|acceptValues
operator|.
name|add
argument_list|(
name|ALL_TYPES
argument_list|)
expr_stmt|;
block|}
return|return
name|acceptValues
return|;
block|}
specifier|public
specifier|static
name|boolean
name|doMimeTypesIntersect
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|mimeTypesA
parameter_list|,
name|MediaType
name|mimeTypeB
parameter_list|)
block|{
return|return
name|doMimeTypesIntersect
argument_list|(
name|mimeTypesA
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|mimeTypeB
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|doMimeTypesIntersect
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|requiredMediaTypes
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|userMediaTypes
parameter_list|)
block|{
specifier|final
name|NonAccumulatingIntersector
name|intersector
init|=
operator|new
name|NonAccumulatingIntersector
argument_list|()
decl_stmt|;
name|intersectMimeTypes
argument_list|(
name|requiredMediaTypes
argument_list|,
name|userMediaTypes
argument_list|,
name|intersector
argument_list|)
expr_stmt|;
return|return
name|intersector
operator|.
name|doIntersect
argument_list|()
return|;
block|}
comment|/**      * intersect two mime types      *      * @param requiredMediaTypes      * @param userMediaTypes      * @param addRequiredParamsIfPossible      * @return return a list of intersected mime types      */
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|intersectMimeTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|requiredMediaTypes
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|userMediaTypes
parameter_list|,
name|boolean
name|addRequiredParamsIfPossible
parameter_list|)
block|{
return|return
name|intersectMimeTypes
argument_list|(
name|requiredMediaTypes
argument_list|,
name|userMediaTypes
argument_list|,
name|addRequiredParamsIfPossible
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|intersectMimeTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|requiredMediaTypes
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|userMediaTypes
parameter_list|,
name|boolean
name|addRequiredParamsIfPossible
parameter_list|,
name|boolean
name|addDistanceParameter
parameter_list|)
block|{
specifier|final
name|AccumulatingIntersector
name|intersector
init|=
operator|new
name|AccumulatingIntersector
argument_list|(
name|addRequiredParamsIfPossible
argument_list|,
name|addDistanceParameter
argument_list|)
decl_stmt|;
name|intersectMimeTypes
argument_list|(
name|requiredMediaTypes
argument_list|,
name|userMediaTypes
argument_list|,
name|intersector
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|intersector
operator|.
name|getSupportedMimeTypeList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|intersectMimeTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|requiredMediaTypes
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|userMediaTypes
parameter_list|,
name|MimeTypesIntersector
name|intersector
parameter_list|)
block|{
for|for
control|(
name|MediaType
name|requiredType
range|:
name|requiredMediaTypes
control|)
block|{
for|for
control|(
name|MediaType
name|userType
range|:
name|userMediaTypes
control|)
block|{
name|boolean
name|isCompatible
init|=
name|isMediaTypeCompatible
argument_list|(
name|requiredType
argument_list|,
name|userType
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCompatible
condition|)
block|{
name|boolean
name|parametersMatched
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|userType
operator|.
name|getParameters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|requiredType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|stripDoubleQuotesIfNeeded
argument_list|(
name|value
argument_list|)
operator|.
name|equals
argument_list|(
name|stripDoubleQuotesIfNeeded
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|HTTP_CHARSET_PARAM
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|parametersMatched
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|parametersMatched
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|intersector
operator|.
name|intersect
argument_list|(
name|requiredType
argument_list|,
name|userType
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|stripDoubleQuotesIfNeeded
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isMediaTypeCompatible
parameter_list|(
name|MediaType
name|requiredType
parameter_list|,
name|MediaType
name|userType
parameter_list|)
block|{
name|boolean
name|isCompatible
init|=
name|requiredType
operator|.
name|isCompatible
argument_list|(
name|userType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isCompatible
operator|&&
name|requiredType
operator|.
name|getType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|userType
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|isCompatible
operator|=
name|compareCompositeSubtypes
argument_list|(
name|requiredType
argument_list|,
name|userType
argument_list|,
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|isCompatible
return|;
block|}
specifier|static
name|boolean
name|compareCompositeSubtypes
parameter_list|(
name|String
name|requiredType
parameter_list|,
name|String
name|userType
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
return|return
name|compareCompositeSubtypes
argument_list|(
name|toMediaType
argument_list|(
name|requiredType
argument_list|)
argument_list|,
name|toMediaType
argument_list|(
name|userType
argument_list|)
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|compareCompositeSubtypes
parameter_list|(
name|MediaType
name|requiredType
parameter_list|,
name|MediaType
name|userType
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|boolean
name|isCompatible
init|=
literal|false
decl_stmt|;
comment|// check if we have composite subtypes
name|String
name|subType1
init|=
name|requiredType
operator|.
name|getSubtype
argument_list|()
decl_stmt|;
name|String
name|subType2
init|=
name|userType
operator|.
name|getSubtype
argument_list|()
decl_stmt|;
name|String
name|subTypeAfterPlus1
init|=
name|splitMediaSubType
argument_list|(
name|subType1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|subTypeAfterPlus2
init|=
name|splitMediaSubType
argument_list|(
name|subType2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|PARTIAL_HIERARCHICAL_MEDIA_SUBTYPE_CHECK
argument_list|)
condition|)
block|{
if|if
condition|(
name|subTypeAfterPlus1
operator|!=
literal|null
operator|||
name|subTypeAfterPlus2
operator|!=
literal|null
condition|)
block|{
name|boolean
name|nullPossible
init|=
name|subTypeAfterPlus1
operator|==
literal|null
operator|||
name|subTypeAfterPlus2
operator|==
literal|null
decl_stmt|;
name|isCompatible
operator|=
name|subTypeAfterPlus1
operator|==
literal|null
operator|&&
name|subTypeAfterPlus2
operator|.
name|equals
argument_list|(
name|subType1
argument_list|)
operator|||
name|subTypeAfterPlus2
operator|==
literal|null
operator|&&
name|subTypeAfterPlus1
operator|.
name|equals
argument_list|(
name|subType2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isCompatible
operator|&&
operator|!
name|nullPossible
condition|)
block|{
name|isCompatible
operator|=
name|subTypeAfterPlus1
operator|.
name|equalsIgnoreCase
argument_list|(
name|subTypeAfterPlus2
argument_list|)
operator|&&
operator|(
name|subType1
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'*'
operator|||
name|subType2
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'*'
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isCompatible
condition|)
block|{
name|String
name|subTypeBeforePlus1
init|=
name|splitMediaSubType
argument_list|(
name|subType1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|subTypeBeforePlus2
init|=
name|splitMediaSubType
argument_list|(
name|subType2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|nullPossible
operator|=
name|subTypeBeforePlus1
operator|==
literal|null
operator|||
name|subTypeBeforePlus2
operator|==
literal|null
expr_stmt|;
name|isCompatible
operator|=
name|subTypeBeforePlus1
operator|==
literal|null
operator|&&
name|subTypeBeforePlus2
operator|!=
literal|null
operator|&&
name|subTypeBeforePlus2
operator|.
name|equals
argument_list|(
name|subType1
argument_list|)
operator|||
name|subTypeBeforePlus2
operator|==
literal|null
operator|&&
name|subTypeBeforePlus1
operator|!=
literal|null
operator|&&
name|subTypeBeforePlus1
operator|.
name|equals
argument_list|(
name|subType2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isCompatible
operator|&&
operator|!
name|nullPossible
condition|)
block|{
name|isCompatible
operator|=
name|subTypeBeforePlus1
operator|.
name|equalsIgnoreCase
argument_list|(
name|subTypeBeforePlus2
argument_list|)
operator|&&
operator|(
name|subType1
operator|.
name|charAt
argument_list|(
name|subType1
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'*'
operator|||
name|subType2
operator|.
name|charAt
argument_list|(
name|subType2
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'*'
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|subTypeAfterPlus1
operator|!=
literal|null
operator|&&
name|subTypeAfterPlus2
operator|!=
literal|null
condition|)
block|{
name|isCompatible
operator|=
name|subTypeAfterPlus1
operator|.
name|equalsIgnoreCase
argument_list|(
name|subTypeAfterPlus2
argument_list|)
operator|&&
operator|(
name|subType1
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'*'
operator|||
name|subType2
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'*'
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|isCompatible
condition|)
block|{
name|String
name|subTypeBeforePlus1
init|=
name|splitMediaSubType
argument_list|(
name|subType1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|subTypeBeforePlus2
init|=
name|splitMediaSubType
argument_list|(
name|subType2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|isCompatible
operator|=
name|subTypeBeforePlus1
operator|!=
literal|null
operator|&&
name|subTypeBeforePlus1
operator|.
name|equalsIgnoreCase
argument_list|(
name|subTypeBeforePlus2
argument_list|)
operator|&&
operator|(
name|subType1
operator|.
name|charAt
argument_list|(
name|subType1
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'*'
operator|||
name|subType2
operator|.
name|charAt
argument_list|(
name|subType2
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'*'
operator|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|isCompatible
return|;
block|}
specifier|private
specifier|static
name|String
name|splitMediaSubType
parameter_list|(
name|String
name|type
parameter_list|,
name|boolean
name|after
parameter_list|)
block|{
name|int
name|index
init|=
name|type
operator|.
name|indexOf
argument_list|(
literal|'+'
argument_list|)
decl_stmt|;
return|return
name|index
operator|==
operator|-
literal|1
condition|?
literal|null
else|:
name|after
condition|?
name|type
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
else|:
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|intersectMimeTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|mimeTypesA
parameter_list|,
name|MediaType
name|mimeTypeB
parameter_list|)
block|{
return|return
name|intersectMimeTypes
argument_list|(
name|mimeTypesA
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|mimeTypeB
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|intersectMimeTypes
parameter_list|(
name|String
name|mimeTypesA
parameter_list|,
name|String
name|mimeTypesB
parameter_list|)
block|{
return|return
name|intersectMimeTypes
argument_list|(
name|parseMediaTypes
argument_list|(
name|mimeTypesA
argument_list|)
argument_list|,
name|parseMediaTypes
argument_list|(
name|mimeTypesB
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|sortMediaTypes
parameter_list|(
name|String
name|mediaTypes
parameter_list|,
name|String
name|qs
parameter_list|)
block|{
return|return
name|sortMediaTypes
argument_list|(
name|JAXRSUtils
operator|.
name|parseMediaTypes
argument_list|(
name|mediaTypes
argument_list|)
argument_list|,
name|qs
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|sortMediaTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|types
parameter_list|,
specifier|final
name|String
name|qs
parameter_list|)
block|{
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|types
argument_list|,
operator|new
name|Comparator
argument_list|<
name|MediaType
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MediaType
name|mt1
parameter_list|,
name|MediaType
name|mt2
parameter_list|)
block|{
return|return
name|JAXRSUtils
operator|.
name|compareMediaTypes
argument_list|(
name|mt1
argument_list|,
name|mt2
argument_list|,
name|qs
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|Response
name|convertFaultToResponse
parameter_list|(
name|T
name|ex
parameter_list|,
name|Message
name|currentMessage
parameter_list|)
block|{
return|return
name|ExceptionUtils
operator|.
name|convertFaultToResponse
argument_list|(
name|ex
argument_list|,
name|currentMessage
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setMessageContentType
parameter_list|(
name|Message
name|message
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|Object
name|ct
init|=
name|response
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ct
operator|!=
literal|null
condition|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|getInMessage
argument_list|()
operator|==
name|message
condition|)
block|{
name|ex
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|ct
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|ct
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|QName
name|getClassQName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|String
name|nsURI
init|=
name|PackageUtils
operator|.
name|getNamespace
argument_list|(
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsURI
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|nsURI
operator|=
name|nsURI
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nsURI
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|nsURI
argument_list|,
name|type
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|"ns1"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|QName
name|convertStringToQName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|DOMUtils
operator|.
name|convertStringToQName
argument_list|(
name|name
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|runContainerRequestFilters
parameter_list|(
name|ServerProviderFactory
name|pf
parameter_list|,
name|Message
name|m
parameter_list|,
name|boolean
name|preMatch
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|>
name|containerFilters
init|=
name|preMatch
condition|?
name|pf
operator|.
name|getPreMatchContainerRequestFilters
argument_list|()
else|:
name|pf
operator|.
name|getPostMatchContainerRequestFilters
argument_list|(
name|names
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containerFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ContainerRequestContext
name|context
init|=
operator|new
name|ContainerRequestContextImpl
argument_list|(
name|m
argument_list|,
name|preMatch
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
name|filter
range|:
name|containerFilters
control|)
block|{
name|InjectionUtils
operator|.
name|injectContexts
argument_list|(
name|filter
operator|.
name|getProvider
argument_list|()
argument_list|,
name|filter
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|filter
operator|.
name|getProvider
argument_list|()
operator|.
name|filter
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Response
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|setMessageContentType
argument_list|(
name|m
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|runContainerResponseFilters
parameter_list|(
name|ServerProviderFactory
name|pf
parameter_list|,
name|ResponseImpl
name|r
parameter_list|,
name|Message
name|m
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Method
name|invoked
parameter_list|)
throws|throws
name|IOException
throws|,
name|Throwable
block|{
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerResponseFilter
argument_list|>
argument_list|>
name|containerFilters
init|=
name|pf
operator|.
name|getContainerResponseFilters
argument_list|(
name|ori
operator|==
literal|null
condition|?
literal|null
else|:
name|ori
operator|.
name|getNameBindings
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containerFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ContainerRequestContext
name|requestContext
init|=
operator|new
name|ContainerRequestContextImpl
argument_list|(
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ContainerResponseContext
name|responseContext
init|=
operator|new
name|ContainerResponseContextImpl
argument_list|(
name|r
argument_list|,
name|m
argument_list|,
name|ori
operator|==
literal|null
condition|?
literal|null
else|:
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getServiceClass
argument_list|()
argument_list|,
name|invoked
argument_list|)
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|ContainerResponseFilter
argument_list|>
name|filter
range|:
name|containerFilters
control|)
block|{
name|InjectionUtils
operator|.
name|injectContexts
argument_list|(
name|filter
operator|.
name|getProvider
argument_list|()
argument_list|,
name|filter
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|filter
operator|.
name|getProvider
argument_list|()
operator|.
name|filter
argument_list|(
name|requestContext
argument_list|,
name|responseContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|mediaTypeToString
parameter_list|(
name|MediaType
name|mt
parameter_list|,
name|String
modifier|...
name|ignoreParams
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ignoreParams
operator|==
literal|null
operator|||
name|ignoreParams
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|ignoreParams
argument_list|)
decl_stmt|;
return|return
name|MediaTypeHeaderProvider
operator|.
name|typeToString
argument_list|(
name|mt
argument_list|,
name|list
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MediaType
name|toMediaType
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|ALL_TYPES
return|;
block|}
return|return
name|MediaTypeHeaderProvider
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Response
name|toResponse
parameter_list|(
name|int
name|status
parameter_list|)
block|{
return|return
name|toResponseBuilder
argument_list|(
name|status
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Response
name|toResponse
parameter_list|(
name|Response
operator|.
name|Status
name|status
parameter_list|)
block|{
return|return
name|toResponse
argument_list|(
name|status
operator|.
name|getStatusCode
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ResponseBuilder
name|toResponseBuilder
parameter_list|(
name|int
name|status
parameter_list|)
block|{
return|return
operator|new
name|ResponseBuilderImpl
argument_list|()
operator|.
name|status
argument_list|(
name|status
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ResponseBuilder
name|toResponseBuilder
parameter_list|(
name|Response
operator|.
name|Status
name|status
parameter_list|)
block|{
return|return
name|toResponseBuilder
argument_list|(
name|status
operator|.
name|getStatusCode
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ResponseBuilder
name|fromResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
return|return
name|fromResponse
argument_list|(
name|response
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ResponseBuilder
name|fromResponse
parameter_list|(
name|Response
name|response
parameter_list|,
name|boolean
name|copyEntity
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|toResponseBuilder
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyEntity
condition|)
block|{
name|rb
operator|.
name|entity
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|response
operator|.
name|getMetadata
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|rb
operator|.
name|header
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rb
return|;
block|}
specifier|public
specifier|static
name|Response
name|copyResponseIfNeeded
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|response
operator|instanceof
name|ResponseImpl
operator|)
condition|)
block|{
name|Response
name|r
init|=
name|fromResponse
argument_list|(
name|response
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Field
index|[]
name|declaredFields
init|=
name|ReflectionUtil
operator|.
name|getDeclaredFields
argument_list|(
name|response
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|declaredFields
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|declClass
init|=
name|f
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|declClass
operator|==
name|Annotation
index|[]
operator|.
name|class
condition|)
block|{
try|try
block|{
name|Annotation
index|[]
name|fieldAnnotations
init|=
name|ReflectionUtil
operator|.
name|accessDeclaredField
argument_list|(
name|f
argument_list|,
name|response
argument_list|,
name|Annotation
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ResponseImpl
operator|)
name|r
operator|)
operator|.
name|setEntityAnnotations
argument_list|(
name|fieldAnnotations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Custom annotations if any can not be copied"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|r
return|;
block|}
return|return
name|response
return|;
block|}
specifier|public
specifier|static
name|Message
name|getCurrentMessage
parameter_list|()
block|{
return|return
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ClassResourceInfo
name|getRootResource
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
return|return
operator|(
name|ClassResourceInfo
operator|)
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|JAXRSUtils
operator|.
name|ROOT_RESOURCE_CLASS
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|pushOntoStack
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Message
name|msg
parameter_list|)
block|{
name|OperationResourceInfoStack
name|stack
init|=
name|msg
operator|.
name|get
argument_list|(
name|OperationResourceInfoStack
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|==
literal|null
condition|)
block|{
name|stack
operator|=
operator|new
name|OperationResourceInfoStack
argument_list|()
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|OperationResourceInfoStack
operator|.
name|class
argument_list|,
name|stack
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|values
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|params
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|addTemplateVarValues
argument_list|(
name|values
argument_list|,
name|params
argument_list|,
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getURITemplate
argument_list|()
argument_list|)
expr_stmt|;
name|addTemplateVarValues
argument_list|(
name|values
argument_list|,
name|params
argument_list|,
name|ori
operator|.
name|getURITemplate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|realClass
init|=
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getServiceClass
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
operator|new
name|MethodInvocationInfo
argument_list|(
name|ori
argument_list|,
name|realClass
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addTemplateVarValues
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|URITemplate
name|template
parameter_list|)
block|{
if|if
condition|(
name|template
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|var
range|:
name|template
operator|.
name|getVariables
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paramValues
init|=
name|params
operator|.
name|get
argument_list|(
name|var
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramValues
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|paramValues
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|logMessageHandlerProblem
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|MediaType
name|ct
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMsg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|name
argument_list|,
name|BUNDLE
argument_list|,
name|cls
operator|.
name|getName
argument_list|()
argument_list|,
name|mediaTypeToString
argument_list|(
name|ct
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|errorMessage
init|=
name|errorMsg
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
return|return
name|errorMessage
return|;
block|}
comment|// copy the input stream so that it is not inadvertently closed
specifier|private
specifier|static
name|InputStream
name|copyAndGetEntityStream
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|LoadingByteArrayOutputStream
name|baos
init|=
operator|new
name|LoadingByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|m
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|baos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toInternalServerErrorException
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|m
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|baos
operator|.
name|createInputStream
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|createInputStream
argument_list|()
return|;
block|}
block|}
end_class

end_unit

