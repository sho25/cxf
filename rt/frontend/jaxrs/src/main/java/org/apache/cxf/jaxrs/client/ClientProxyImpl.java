begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|CookieParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HeaderParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|MatrixParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractOutDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduit
import|;
end_import

begin_comment
comment|/**  * Proxy-based client implementation  *  */
end_comment

begin_class
specifier|public
class|class
name|ClientProxyImpl
extends|extends
name|AbstractClient
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ClientProxyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|ClientProxyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ClassResourceInfo
name|cri
decl_stmt|;
specifier|private
name|boolean
name|inheritHeaders
decl_stmt|;
specifier|public
name|ClientProxyImpl
parameter_list|(
name|URI
name|baseURI
parameter_list|,
name|URI
name|currentURI
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|boolean
name|inheritHeaders
parameter_list|)
block|{
name|super
argument_list|(
name|baseURI
argument_list|,
name|currentURI
argument_list|)
expr_stmt|;
name|this
operator|.
name|cri
operator|=
name|cri
expr_stmt|;
name|this
operator|.
name|inheritHeaders
operator|=
name|inheritHeaders
expr_stmt|;
block|}
comment|/**      * Updates the current state if Client method is invoked, otherwise       * does the remote invocation or returns a new proxy if subresource       * method is invoked. Can throw an expected exception if ResponseExceptionMapper      * is registered           */
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|o
parameter_list|,
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
throws|throws
name|Throwable
block|{
name|resetResponse
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
init|=
name|m
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|Client
operator|.
name|class
operator|==
name|declaringClass
condition|)
block|{
return|return
name|m
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|params
argument_list|)
return|;
block|}
name|OperationResourceInfo
name|ori
init|=
name|cri
operator|.
name|getMethodDispatcher
argument_list|()
operator|.
name|getOperationResourceInfo
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|ori
operator|==
literal|null
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|m
argument_list|,
literal|"INVALID_RESOURCE_METHOD"
argument_list|)
expr_stmt|;
block|}
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|types
init|=
name|getParametersInfo
argument_list|(
name|ori
argument_list|,
name|m
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|pathParams
init|=
name|getParamValues
argument_list|(
name|types
argument_list|,
name|params
argument_list|,
name|ParameterType
operator|.
name|PATH
argument_list|)
decl_stmt|;
name|int
name|bodyIndex
init|=
name|getBodyIndex
argument_list|(
name|types
argument_list|,
name|ori
argument_list|)
decl_stmt|;
name|UriBuilder
name|builder
init|=
name|getCurrentBuilder
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|cri
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|builder
operator|.
name|path
argument_list|(
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getServiceClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|path
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|handleMatrixes
argument_list|(
name|types
argument_list|,
name|params
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|handleQueries
argument_list|(
name|types
argument_list|,
name|params
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|build
argument_list|(
name|pathParams
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|getHeaders
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramHeaders
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|handleHeaders
argument_list|(
name|paramHeaders
argument_list|,
name|types
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|handleCookies
argument_list|(
name|paramHeaders
argument_list|,
name|types
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|ori
operator|.
name|isSubResourceLocator
argument_list|()
condition|)
block|{
name|ClassResourceInfo
name|subCri
init|=
name|cri
operator|.
name|getSubResource
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subCri
operator|==
literal|null
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|m
argument_list|,
literal|"INVALID_SUBRESOURCE"
argument_list|)
expr_stmt|;
block|}
name|ClientProxyImpl
name|proxyImpl
init|=
operator|new
name|ClientProxyImpl
argument_list|(
name|getBaseURI
argument_list|()
argument_list|,
name|uri
argument_list|,
name|subCri
argument_list|,
name|inheritHeaders
argument_list|)
decl_stmt|;
name|proxyImpl
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|proxyImpl
operator|.
name|setConduitSelector
argument_list|(
name|conduitSelector
argument_list|)
expr_stmt|;
name|proxyImpl
operator|.
name|setInInterceptors
argument_list|(
name|inInterceptors
argument_list|)
expr_stmt|;
name|proxyImpl
operator|.
name|setOutInterceptors
argument_list|(
name|outInterceptors
argument_list|)
expr_stmt|;
name|Object
name|proxy
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|proxyImpl
argument_list|)
decl_stmt|;
if|if
condition|(
name|inheritHeaders
condition|)
block|{
name|WebClient
operator|.
name|client
argument_list|(
name|proxy
argument_list|)
operator|.
name|headers
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
name|WebClient
operator|.
name|client
argument_list|(
name|proxy
argument_list|)
operator|.
name|headers
argument_list|(
name|paramHeaders
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
name|headers
operator|.
name|putAll
argument_list|(
name|paramHeaders
argument_list|)
expr_stmt|;
name|setRequestHeaders
argument_list|(
name|headers
argument_list|,
name|ori
argument_list|,
name|types
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|)
argument_list|,
name|bodyIndex
operator|==
operator|-
literal|1
condition|?
literal|null
else|:
name|params
index|[
name|bodyIndex
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conduitSelector
operator|==
literal|null
condition|)
block|{
return|return
name|doDirectInvocation
argument_list|(
name|uri
argument_list|,
name|headers
argument_list|,
name|ori
argument_list|,
name|params
argument_list|,
name|bodyIndex
argument_list|,
name|types
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|doChainedInvocation
argument_list|(
name|uri
argument_list|,
name|headers
argument_list|,
name|ori
argument_list|,
name|params
argument_list|,
name|bodyIndex
argument_list|,
name|types
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|getParametersInfo
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
argument_list|()
decl_stmt|;
name|Annotation
index|[]
index|[]
name|paramAnns
init|=
name|m
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramAnns
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|map
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramAnns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Parameter
name|p
init|=
name|getParameter
argument_list|(
name|i
argument_list|,
name|paramAnns
index|[
name|i
index|]
argument_list|,
name|ori
argument_list|)
decl_stmt|;
name|map
operator|.
name|add
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|REQUEST_BODY
argument_list|)
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|ParameterType
operator|.
name|REQUEST_BODY
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|m
argument_list|,
literal|"SINGLE_BODY_ONLY"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|)
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|m
argument_list|,
literal|"ONLY_FORM_ALLOWED"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|private
specifier|static
name|int
name|getBodyIndex
parameter_list|(
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|list
init|=
name|map
operator|.
name|get
argument_list|(
name|ParameterType
operator|.
name|REQUEST_BODY
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|list
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|ori
operator|.
name|isSubResourceLocator
argument_list|()
operator|&&
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
argument_list|,
literal|"NO_BODY_IN_SUBRESOURCE"
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|private
specifier|static
name|void
name|checkResponse
parameter_list|(
name|String
name|basePath
parameter_list|,
name|Method
name|m
parameter_list|,
name|Response
name|r
parameter_list|)
throws|throws
name|Throwable
block|{
name|int
name|status
init|=
name|r
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|>=
literal|400
condition|)
block|{
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
name|mapper
init|=
name|findExceptionMapper
argument_list|(
name|m
argument_list|,
name|basePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
name|mapper
operator|=
name|findExceptionMapper
argument_list|(
name|m
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|t
init|=
name|mapper
operator|.
name|fromResponse
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
throw|throw
name|t
throw|;
block|}
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|r
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
name|findExceptionMapper
parameter_list|(
name|Method
name|m
parameter_list|,
name|String
name|base
parameter_list|)
block|{
name|ProviderFactory
name|pf
init|=
name|ProviderFactory
operator|.
name|getInstance
argument_list|(
name|base
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|exType
range|:
name|m
operator|.
name|getExceptionTypes
argument_list|()
control|)
block|{
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
name|mapper
init|=
name|pf
operator|.
name|createResponseExceptionMapper
argument_list|(
name|exType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
return|return
name|mapper
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setRequestHeaders
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|boolean
name|formParams
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|bodyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|responseClass
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|formParams
operator|||
name|bodyClass
operator|!=
literal|null
operator|&&
name|MultivaluedMap
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|bodyClass
argument_list|)
condition|)
block|{
name|headers
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|cType
init|=
name|bodyClass
operator|!=
literal|null
operator|&&
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|bodyClass
argument_list|)
condition|?
name|MediaType
operator|.
name|TEXT_PLAIN
else|:
name|ori
operator|.
name|getConsumeTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|ori
operator|.
name|getConsumeTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
condition|?
name|MediaType
operator|.
name|APPLICATION_XML
else|:
name|ori
operator|.
name|getConsumeTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|headers
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|cType
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|MediaType
argument_list|>
name|accepts
init|=
name|getAccept
argument_list|()
decl_stmt|;
if|if
condition|(
name|accepts
operator|==
literal|null
condition|)
block|{
name|accepts
operator|=
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|responseClass
argument_list|)
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
else|:
name|ori
operator|.
name|getProduceTypes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|ori
operator|.
name|getConsumeTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|WILDCARD_TYPE
argument_list|)
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
else|:
name|ori
operator|.
name|getProduceTypes
argument_list|()
expr_stmt|;
for|for
control|(
name|MediaType
name|mt
range|:
name|accepts
control|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|headers
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|getParamValues
parameter_list|(
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|ParameterType
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|indexList
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|indexList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|indexList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|JAXRSUtils
operator|.
name|encode
argument_list|(
name|p
operator|.
name|isEncoded
argument_list|()
argument_list|,
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|List
argument_list|<
name|Parameter
argument_list|>
name|getParameters
parameter_list|(
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|ParameterType
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|handleQueries
parameter_list|(
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|UriBuilder
name|ub
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|qs
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|QUERY
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|qs
control|)
block|{
if|if
condition|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|queryParam
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|,
name|JAXRSUtils
operator|.
name|encode
argument_list|(
name|p
operator|.
name|isEncoded
argument_list|()
argument_list|,
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|handleMatrixes
parameter_list|(
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|UriBuilder
name|ub
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|mx
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|MATRIX
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|mx
control|)
block|{
if|if
condition|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|matrixParam
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|,
name|JAXRSUtils
operator|.
name|encode
argument_list|(
name|p
operator|.
name|isEncoded
argument_list|()
argument_list|,
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|handleForm
parameter_list|(
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|form
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|fm
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|FORM
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|fm
control|)
block|{
if|if
condition|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|add
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|,
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|form
return|;
block|}
specifier|private
name|void
name|handleHeaders
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|hs
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|HEADER
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|hs
control|)
block|{
if|if
condition|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|,
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleCookies
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|cs
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|COOKIE
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|cs
control|)
block|{
if|if
condition|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|COOKIE
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
operator|+
literal|'='
operator|+
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Parameter
name|getParameter
parameter_list|(
name|int
name|index
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|Context
name|ctx
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
argument_list|,
literal|"NO_CONTEXT_PARAMETERS"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isEncoded
init|=
name|AnnotationUtils
operator|.
name|isEncoded
argument_list|(
name|anns
argument_list|,
name|ori
argument_list|)
decl_stmt|;
name|PathParam
name|a
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|PathParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|PATH
argument_list|,
name|index
argument_list|,
name|a
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|)
return|;
block|}
name|QueryParam
name|q
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|QueryParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|QUERY
argument_list|,
name|index
argument_list|,
name|q
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|)
return|;
block|}
name|MatrixParam
name|m
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|MatrixParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|MATRIX
argument_list|,
name|index
argument_list|,
name|m
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|)
return|;
block|}
name|FormParam
name|f
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|FormParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|,
name|index
argument_list|,
name|f
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|)
return|;
block|}
name|HeaderParam
name|h
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|HeaderParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|HEADER
argument_list|,
name|index
argument_list|,
name|h
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|)
return|;
block|}
name|Parameter
name|p
init|=
literal|null
decl_stmt|;
name|CookieParam
name|c
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|CookieParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|COOKIE
argument_list|,
name|index
argument_list|,
name|c
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|REQUEST_BODY
argument_list|,
name|index
argument_list|,
literal|null
argument_list|,
name|isEncoded
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
specifier|protected
name|Object
name|doDirectInvocation
parameter_list|(
name|URI
name|uri
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|int
name|bodyIndex
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|types
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// TODO : we need to refactor bits of HTTPConduit such that it can be reused
name|Message
name|message
init|=
name|createSimpleMessage
argument_list|()
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|createHttpConnection
argument_list|(
name|uri
argument_list|,
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
decl_stmt|;
name|setAllHeaders
argument_list|(
name|headers
argument_list|,
name|connect
argument_list|)
expr_stmt|;
name|Method
name|m
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
decl_stmt|;
if|if
condition|(
name|bodyIndex
operator|!=
operator|-
literal|1
operator|||
name|types
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|)
condition|)
block|{
if|if
condition|(
name|bodyIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|writeBody
argument_list|(
name|params
index|[
name|bodyIndex
index|]
argument_list|,
name|message
argument_list|,
name|params
index|[
name|bodyIndex
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|bodyIndex
index|]
argument_list|,
name|m
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|bodyIndex
index|]
argument_list|,
name|headers
argument_list|,
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|form
init|=
name|handleForm
argument_list|(
name|types
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|writeBody
argument_list|(
name|form
argument_list|,
name|message
argument_list|,
name|form
operator|.
name|getClass
argument_list|()
argument_list|,
name|form
operator|.
name|getClass
argument_list|()
argument_list|,
name|m
operator|.
name|getDeclaredAnnotations
argument_list|()
argument_list|,
name|headers
argument_list|,
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|handleResponse
argument_list|(
name|connect
argument_list|,
name|message
argument_list|,
name|ori
argument_list|)
return|;
block|}
specifier|private
name|Object
name|doChainedInvocation
parameter_list|(
name|URI
name|uri
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|int
name|bodyIndex
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|types
parameter_list|)
throws|throws
name|Throwable
block|{
name|Message
name|m
init|=
name|createMessage
argument_list|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|,
name|headers
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|bodyIndex
operator|!=
operator|-
literal|1
operator|||
name|types
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|)
condition|)
block|{
name|m
operator|.
name|setContent
argument_list|(
name|OperationResourceInfo
operator|.
name|class
argument_list|,
name|ori
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"BODY_INDEX"
argument_list|,
name|bodyIndex
argument_list|)
expr_stmt|;
name|Object
name|body
init|=
name|bodyIndex
operator|!=
operator|-
literal|1
condition|?
name|params
index|[
name|bodyIndex
index|]
else|:
name|handleForm
argument_list|(
name|types
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|MessageContentsList
name|contents
init|=
operator|new
name|MessageContentsList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|body
block|}
argument_list|)
decl_stmt|;
name|m
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|m
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BodyWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// execute chain
try|try
block|{
name|m
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|doIntercept
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// we'd like a user to get the whole Response anyway if needed
block|}
comment|// TODO : this needs to be done in an inbound chain instead
name|HttpURLConnection
name|connect
init|=
operator|(
name|HttpURLConnection
operator|)
name|m
operator|.
name|get
argument_list|(
name|HTTPConduit
operator|.
name|KEY_HTTP_CONNECTION
argument_list|)
decl_stmt|;
return|return
name|handleResponse
argument_list|(
name|connect
argument_list|,
name|m
argument_list|,
name|ori
argument_list|)
return|;
block|}
specifier|protected
name|Object
name|handleResponse
parameter_list|(
name|HttpURLConnection
name|connect
parameter_list|,
name|Message
name|inMessage
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
throws|throws
name|Throwable
block|{
name|Response
name|r
init|=
name|setResponseBuilder
argument_list|(
name|connect
argument_list|)
operator|.
name|clone
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
decl_stmt|;
name|checkResponse
argument_list|(
name|getBaseURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|method
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|Void
operator|.
name|class
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|readBody
argument_list|(
name|r
argument_list|,
name|connect
argument_list|,
name|inMessage
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|method
operator|.
name|getGenericReturnType
argument_list|()
argument_list|,
name|method
operator|.
name|getDeclaredAnnotations
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|void
name|reportInvalidResourceMethod
parameter_list|(
name|Method
name|m
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMsg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|name
argument_list|,
name|BUNDLE
argument_list|,
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|405
argument_list|)
throw|;
block|}
specifier|private
specifier|static
class|class
name|Parameter
block|{
specifier|private
name|ParameterType
name|type
decl_stmt|;
specifier|private
name|int
name|ind
decl_stmt|;
specifier|private
name|String
name|aValue
decl_stmt|;
specifier|private
name|boolean
name|isEncoded
decl_stmt|;
specifier|public
name|Parameter
parameter_list|(
name|ParameterType
name|type
parameter_list|,
name|int
name|ind
parameter_list|,
name|String
name|aValue
parameter_list|,
name|boolean
name|encoded
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|ind
operator|=
name|ind
expr_stmt|;
name|this
operator|.
name|aValue
operator|=
name|aValue
expr_stmt|;
name|this
operator|.
name|isEncoded
operator|=
name|encoded
expr_stmt|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|ind
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|aValue
return|;
block|}
specifier|public
name|ParameterType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|boolean
name|isEncoded
parameter_list|()
block|{
return|return
name|isEncoded
return|;
block|}
block|}
comment|// TODO : what we really need to do is to refactor JAXRSOutInterceptor so that
comment|// it can handle both client requests and server responses - it may need to be split into
comment|// several interceptors - in fact we need to do the same for JAXRSInInterceptor so that we can do
comment|// on onMessage() properly
specifier|private
class|class
name|BodyWriter
extends|extends
name|AbstractOutDatabindingInterceptor
block|{
specifier|public
name|BodyWriter
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|m
parameter_list|)
throws|throws
name|Fault
block|{
name|OperationResourceInfo
name|ori
init|=
name|m
operator|.
name|getContent
argument_list|(
name|OperationResourceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|m
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|==
literal|null
operator|||
name|ori
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|MessageContentsList
name|objs
init|=
name|MessageContentsList
operator|.
name|getContentsList
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|objs
operator|==
literal|null
operator|||
name|objs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|(
name|MultivaluedMap
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
decl_stmt|;
name|int
name|bodyIndex
init|=
operator|(
name|Integer
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"BODY_INDEX"
argument_list|)
decl_stmt|;
name|Object
name|body
init|=
name|objs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|bodyIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|writeBody
argument_list|(
name|body
argument_list|,
name|m
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|bodyIndex
index|]
argument_list|,
name|method
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|bodyIndex
index|]
argument_list|,
name|headers
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeBody
argument_list|(
name|body
argument_list|,
name|m
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
operator|.
name|getDeclaredAnnotations
argument_list|()
argument_list|,
name|headers
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

