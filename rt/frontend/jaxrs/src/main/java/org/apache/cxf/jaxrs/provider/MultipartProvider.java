begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeUtility
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|ByteDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|form
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|ContentDisposition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|InputStreamDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Multipart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|MultipartBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|multipart
operator|.
name|AttachmentUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_class
annotation|@
name|Provider
annotation|@
name|Consumes
argument_list|(
block|{
literal|"multipart/related"
block|,
literal|"multipart/mixed"
block|,
literal|"multipart/alternative"
block|,
literal|"multipart/form-data"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
literal|"multipart/related"
block|,
literal|"multipart/mixed"
block|,
literal|"multipart/alternative"
block|,
literal|"multipart/form-data"
block|}
argument_list|)
specifier|public
class|class
name|MultipartProvider
extends|extends
name|AbstractConfigurableProvider
implements|implements
name|MessageBodyReader
argument_list|<
name|Object
argument_list|>
implements|,
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|MultipartProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|MultipartProvider
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Context
specifier|private
name|MessageContext
name|mc
decl_stmt|;
specifier|private
name|String
name|attachmentDir
decl_stmt|;
specifier|private
name|String
name|attachmentThreshold
decl_stmt|;
specifier|private
name|String
name|attachmentMaxSize
decl_stmt|;
specifier|public
name|void
name|setMessageContext
parameter_list|(
name|MessageContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|mc
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|void
name|setAttachmentDirectory
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|attachmentDir
operator|=
name|dir
expr_stmt|;
block|}
specifier|public
name|void
name|setAttachmentThreshold
parameter_list|(
name|String
name|threshold
parameter_list|)
block|{
name|attachmentThreshold
operator|=
name|threshold
expr_stmt|;
block|}
specifier|public
name|void
name|setAttachmentMaxSize
parameter_list|(
name|String
name|maxSize
parameter_list|)
block|{
name|attachmentMaxSize
operator|=
name|maxSize
expr_stmt|;
block|}
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|isSupported
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mt
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isSupported
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
if|if
condition|(
name|DataHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|DataSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|Attachment
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|MultipartBody
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|mediaTypeSupported
argument_list|(
name|mt
argument_list|)
operator|||
name|isSupportedFormDataType
argument_list|(
name|type
argument_list|,
name|mt
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isSupportedFormDataType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|mt
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"multipart"
argument_list|)
operator|&&
name|mt
operator|.
name|getSubtype
argument_list|()
operator|.
name|equals
argument_list|(
literal|"form-data"
argument_list|)
operator|&&
operator|!
name|MultivaluedMap
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|Form
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|protected
name|void
name|checkContentLength
parameter_list|()
block|{
if|if
condition|(
name|mc
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|mc
operator|.
name|getHttpHeaders
argument_list|()
operator|.
name|getRequestHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
literal|"0"
operator|.
name|equals
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|message
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"EMPTY_BODY"
argument_list|,
name|BUNDLE
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|400
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|Object
name|readFrom
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|c
parameter_list|,
name|Type
name|t
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|checkContentLength
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Attachment
argument_list|>
name|infos
init|=
name|AttachmentUtils
operator|.
name|getAttachments
argument_list|(
name|mc
argument_list|,
name|attachmentDir
argument_list|,
name|attachmentThreshold
argument_list|,
name|attachmentMaxSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
operator|&&
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|Multipart
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|actual
init|=
name|getActualType
argument_list|(
name|t
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Attachment
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|actual
argument_list|)
condition|)
block|{
return|return
name|infos
return|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|objects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Attachment
name|a
range|:
name|infos
control|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|fromAttachment
argument_list|(
name|a
argument_list|,
name|actual
argument_list|,
name|actual
argument_list|,
name|anns
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|objects
return|;
block|}
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|infos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|actual
init|=
name|getActualType
argument_list|(
name|t
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Attachment
name|a
range|:
name|infos
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|a
operator|.
name|getContentType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fromAttachment
argument_list|(
name|a
argument_list|,
name|actual
argument_list|,
name|actual
argument_list|,
name|anns
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
if|if
condition|(
name|MultipartBody
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
operator|new
name|MultipartBody
argument_list|(
name|infos
argument_list|)
return|;
block|}
name|Multipart
name|id
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|Multipart
operator|.
name|class
argument_list|)
decl_stmt|;
name|Attachment
name|multipart
init|=
name|AttachmentUtils
operator|.
name|getMultipart
argument_list|(
name|c
argument_list|,
name|id
argument_list|,
name|mt
argument_list|,
name|infos
argument_list|)
decl_stmt|;
if|if
condition|(
name|multipart
operator|!=
literal|null
condition|)
block|{
return|return
name|fromAttachment
argument_list|(
name|multipart
argument_list|,
name|c
argument_list|,
name|t
argument_list|,
name|anns
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|required
argument_list|()
condition|)
block|{
comment|/*              * If user asked for a null, give them a null.               */
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|400
argument_list|)
throw|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getActualType
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|actual
init|=
literal|null
decl_stmt|;
try|try
block|{
name|actual
operator|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|type
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore;
block|}
return|return
name|actual
operator|!=
literal|null
operator|&&
name|actual
operator|!=
name|Object
operator|.
name|class
condition|?
name|actual
else|:
name|Attachment
operator|.
name|class
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Object
name|fromAttachment
parameter_list|(
name|Attachment
name|multipart
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Type
name|t
parameter_list|,
name|Annotation
name|anns
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|DataHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|multipart
operator|.
name|getDataHandler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|DataSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|multipart
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getDataSource
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Attachment
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|multipart
return|;
block|}
else|else
block|{
if|if
condition|(
name|mediaTypeSupported
argument_list|(
name|multipart
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
name|mc
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.multipart.embedded"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mc
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.multipart.embedded.ctype"
argument_list|,
name|multipart
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|mc
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.multipart.embedded.input"
argument_list|,
name|multipart
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|anns
operator|=
operator|new
name|Annotation
index|[]
block|{}
expr_stmt|;
block|}
name|MessageBodyReader
argument_list|<
name|Object
argument_list|>
name|r
init|=
name|mc
operator|.
name|getProviders
argument_list|()
operator|.
name|getMessageBodyReader
argument_list|(
operator|(
name|Class
operator|)
name|c
argument_list|,
name|t
argument_list|,
name|anns
argument_list|,
name|multipart
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|multipart
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|is
operator|=
name|decodeIfNeeded
argument_list|(
name|multipart
argument_list|,
name|is
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|readFrom
argument_list|(
operator|(
name|Class
operator|)
name|c
argument_list|,
name|t
argument_list|,
name|anns
argument_list|,
name|multipart
operator|.
name|getContentType
argument_list|()
argument_list|,
name|multipart
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|is
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|InputStream
name|decodeIfNeeded
parameter_list|(
name|Attachment
name|multipart
parameter_list|,
name|InputStream
name|is
parameter_list|)
block|{
name|String
name|value
init|=
name|multipart
operator|.
name|getHeader
argument_list|(
literal|"Content-Transfer-Encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"base64"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|||
literal|"quoted-printable"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
try|try
block|{
name|is
operator|=
name|MimeUtility
operator|.
name|decode
argument_list|(
name|is
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Problem with decoding an input stream, encoding : "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|is
return|;
block|}
specifier|private
name|boolean
name|mediaTypeSupported
parameter_list|(
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|mt
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"multipart"
argument_list|)
operator|&&
operator|(
name|mt
operator|.
name|getSubtype
argument_list|()
operator|.
name|equals
argument_list|(
literal|"related"
argument_list|)
operator|||
name|mt
operator|.
name|getSubtype
argument_list|()
operator|.
name|equals
argument_list|(
literal|"mixed"
argument_list|)
operator|||
name|mt
operator|.
name|getSubtype
argument_list|()
operator|.
name|equals
argument_list|(
literal|"alternative"
argument_list|)
operator|)
return|;
block|}
specifier|public
name|long
name|getSize
parameter_list|(
name|Object
name|t
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|isSupported
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mt
argument_list|)
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|List
argument_list|<
name|Attachment
argument_list|>
name|handlers
init|=
name|convertToDataHandlers
argument_list|(
name|obj
argument_list|,
name|type
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|,
name|mt
argument_list|)
decl_stmt|;
name|mc
operator|.
name|put
argument_list|(
name|MultipartBody
operator|.
name|OUTBOUND_MESSAGE_ATTACHMENTS
argument_list|,
name|handlers
argument_list|)
expr_stmt|;
name|handlers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDataHandler
argument_list|()
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Attachment
argument_list|>
name|convertToDataHandlers
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|objects
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Attachment
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<
name|Attachment
argument_list|>
argument_list|(
name|objects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|objects
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Attachment
name|handler
init|=
name|createDataHandler
argument_list|(
name|value
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|mt
operator|.
name|toString
argument_list|()
argument_list|,
name|i
operator|++
argument_list|)
decl_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
return|return
name|handlers
return|;
block|}
else|else
block|{
name|String
name|rootMediaType
init|=
name|getRootMediaType
argument_list|(
name|anns
argument_list|,
name|mt
argument_list|)
decl_stmt|;
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getAttachments
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|obj
argument_list|,
name|rootMediaType
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|MultipartBody
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Attachment
argument_list|>
name|atts
init|=
operator|(
operator|(
name|MultipartBody
operator|)
name|obj
operator|)
operator|.
name|getAllAttachments
argument_list|()
decl_stmt|;
comment|// these attachments may have no DataHandlers, but objects only
return|return
name|getAttachments
argument_list|(
name|atts
argument_list|,
name|rootMediaType
argument_list|)
return|;
block|}
name|Attachment
name|handler
init|=
name|createDataHandler
argument_list|(
name|obj
argument_list|,
name|type
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|,
name|rootMediaType
argument_list|,
name|mt
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|handler
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|Attachment
argument_list|>
name|getAttachments
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|objects
parameter_list|,
name|String
name|rootMediaType
parameter_list|)
block|{
name|List
argument_list|<
name|Attachment
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<
name|Attachment
argument_list|>
argument_list|(
name|objects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|objects
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Attachment
name|handler
init|=
name|createDataHandler
argument_list|(
name|value
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|rootMediaType
argument_list|,
name|rootMediaType
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
return|return
name|handlers
return|;
block|}
specifier|private
name|Attachment
name|createDataHandler
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|String
name|mainMediaType
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|DataHandler
name|dh
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|InputStream
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|dh
operator|=
name|createInputStreamDH
argument_list|(
operator|(
name|InputStream
operator|)
name|obj
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DataHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|dh
operator|=
operator|(
name|DataHandler
operator|)
name|obj
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DataSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|dh
operator|=
operator|new
name|DataHandler
argument_list|(
operator|(
name|DataSource
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|File
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|f
init|=
operator|(
name|File
operator|)
name|obj
decl_stmt|;
name|ContentDisposition
name|cd
init|=
name|mainMediaType
operator|.
name|startsWith
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
argument_list|)
condition|?
operator|new
name|ContentDisposition
argument_list|(
literal|"form-data;name=file;filename="
operator|+
name|f
operator|.
name|getName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
try|try
block|{
return|return
operator|new
name|Attachment
argument_list|(
name|AttachmentUtil
operator|.
name|BODY_ATTACHMENT_ID
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|cd
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Attachment
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|Attachment
name|att
init|=
operator|(
name|Attachment
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|att
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|att
return|;
block|}
name|dh
operator|=
name|getHandlerForObject
argument_list|(
name|att
operator|.
name|getObject
argument_list|()
argument_list|,
name|att
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|att
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|att
operator|.
name|getContentType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
operator|new
name|Attachment
argument_list|(
name|att
operator|.
name|getContentId
argument_list|()
argument_list|,
name|dh
argument_list|,
name|att
operator|.
name|getHeaders
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|byte
index|[]
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|ByteDataSource
name|source
init|=
operator|new
name|ByteDataSource
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|obj
argument_list|)
decl_stmt|;
name|source
operator|.
name|setContentType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
name|dh
operator|=
operator|new
name|DataHandler
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dh
operator|=
name|getHandlerForObject
argument_list|(
name|obj
argument_list|,
name|cls
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|,
name|mimeType
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|String
name|contentId
init|=
name|getContentId
argument_list|(
name|anns
argument_list|,
name|id
argument_list|)
decl_stmt|;
return|return
operator|new
name|Attachment
argument_list|(
name|contentId
argument_list|,
name|dh
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|getContentId
parameter_list|(
name|Annotation
index|[]
name|anns
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|Multipart
name|part
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|Multipart
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|part
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|part
operator|.
name|value
argument_list|()
return|;
block|}
return|return
name|id
operator|==
literal|0
condition|?
name|AttachmentUtil
operator|.
name|BODY_ATTACHMENT_ID
else|:
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|DataHandler
name|getHandlerForObject
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|MediaType
name|mt
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
name|r
init|=
operator|(
name|MessageBodyWriter
operator|)
name|mc
operator|.
name|getProviders
argument_list|()
operator|.
name|getMessageBodyWriter
argument_list|(
name|cls
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|,
name|mt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|message
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_MSG_WRITER"
argument_list|,
name|BUNDLE
argument_list|,
name|cls
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|500
argument_list|)
throw|;
block|}
return|return
operator|new
name|MessageBodyWriterDataHandler
argument_list|(
name|r
argument_list|,
name|obj
argument_list|,
name|cls
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|,
name|mt
argument_list|)
return|;
block|}
specifier|private
name|DataHandler
name|createInputStreamDH
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|mimeType
parameter_list|)
block|{
return|return
operator|new
name|DataHandler
argument_list|(
operator|new
name|InputStreamDataSource
argument_list|(
name|is
argument_list|,
name|mimeType
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getRootMediaType
parameter_list|(
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
name|String
name|mimeType
init|=
name|mt
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
return|return
name|mimeType
return|;
block|}
name|Multipart
name|id
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|Multipart
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|MediaType
operator|.
name|WILDCARD
operator|.
name|equals
argument_list|(
name|id
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
name|mimeType
operator|=
name|id
operator|.
name|type
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|mc
operator|.
name|getContextualProperty
argument_list|(
name|Message
operator|.
name|MTOM_ENABLED
argument_list|)
argument_list|)
condition|)
block|{
name|mimeType
operator|=
literal|"text/xml"
expr_stmt|;
block|}
else|else
block|{
name|mimeType
operator|=
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
expr_stmt|;
block|}
block|}
return|return
name|mimeType
return|;
block|}
specifier|private
specifier|static
class|class
name|MessageBodyWriterDataHandler
extends|extends
name|DataHandler
block|{
specifier|private
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
name|writer
decl_stmt|;
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
specifier|private
name|Type
name|genericType
decl_stmt|;
specifier|private
name|Annotation
index|[]
name|anns
decl_stmt|;
specifier|private
name|MediaType
name|contentType
decl_stmt|;
specifier|public
name|MessageBodyWriterDataHandler
parameter_list|(
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
name|writer
parameter_list|,
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|contentType
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ByteDataSource
argument_list|(
literal|"1"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|obj
expr_stmt|;
name|this
operator|.
name|cls
operator|=
name|cls
expr_stmt|;
name|this
operator|.
name|genericType
operator|=
name|genericType
expr_stmt|;
name|this
operator|.
name|anns
operator|=
name|anns
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|os
parameter_list|)
block|{
try|try
block|{
name|writer
operator|.
name|writeTo
argument_list|(
name|obj
argument_list|,
name|cls
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|,
name|contentType
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// TODO : throw UnsupportedOperationException for all other DataHandler methods
block|}
block|}
end_class

end_unit

