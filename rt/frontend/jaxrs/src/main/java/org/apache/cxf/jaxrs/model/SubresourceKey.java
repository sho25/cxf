begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
package|;
end_package

begin_class
specifier|public
class|class
name|SubresourceKey
block|{
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|typedClass
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|instanceClass
decl_stmt|;
specifier|public
name|SubresourceKey
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|tClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|iClass
parameter_list|)
block|{
name|typedClass
operator|=
name|tClass
expr_stmt|;
name|instanceClass
operator|=
name|iClass
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getTypedClass
parameter_list|()
block|{
return|return
name|typedClass
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getInstanceClass
parameter_list|()
block|{
return|return
name|instanceClass
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|SubresourceKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SubresourceKey
name|other
init|=
operator|(
name|SubresourceKey
operator|)
name|o
decl_stmt|;
return|return
name|typedClass
operator|==
name|other
operator|.
name|typedClass
operator|&&
name|instanceClass
operator|==
name|other
operator|.
name|instanceClass
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|typedClass
operator|.
name|hashCode
argument_list|()
operator|+
literal|37
operator|*
name|instanceClass
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

