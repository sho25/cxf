begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|InternalServerErrorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ProviderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * The default per-request resource provider which creates   * a new resource instance per every request  */
end_comment

begin_class
specifier|public
class|class
name|PerRequestResourceProvider
implements|implements
name|ResourceProvider
block|{
specifier|private
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
decl_stmt|;
specifier|private
name|Method
name|postConstructMethod
decl_stmt|;
specifier|private
name|Method
name|preDestroyMethod
decl_stmt|;
specifier|public
name|PerRequestResourceProvider
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|c
operator|=
name|ResourceUtils
operator|.
name|findResourceConstructor
argument_list|(
name|clazz
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Resource class "
operator|+
name|clazz
operator|+
literal|" has no valid constructor"
argument_list|)
throw|;
block|}
name|postConstructMethod
operator|=
name|ResourceUtils
operator|.
name|findPostConstructMethod
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|preDestroyMethod
operator|=
name|ResourceUtils
operator|.
name|findPreDestroyMethod
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Object
name|getInstance
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
return|return
name|createInstance
argument_list|(
name|m
argument_list|)
return|;
block|}
specifier|protected
name|Object
name|createInstance
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|application
init|=
operator|(
name|ProviderInfo
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|get
argument_list|(
name|Application
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|mapValues
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|application
operator|==
literal|null
condition|?
literal|null
else|:
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Application
operator|.
name|class
argument_list|,
name|application
operator|.
name|getProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Object
index|[]
name|values
init|=
name|ResourceUtils
operator|.
name|createConstructorArguments
argument_list|(
name|c
argument_list|,
name|m
argument_list|,
literal|true
argument_list|,
name|mapValues
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|instance
init|=
name|values
operator|.
name|length
operator|>
literal|0
condition|?
name|c
operator|.
name|newInstance
argument_list|(
name|values
argument_list|)
else|:
name|c
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{}
argument_list|)
decl_stmt|;
name|InjectionUtils
operator|.
name|invokeLifeCycleMethod
argument_list|(
name|instance
argument_list|,
name|postConstructMethod
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Resource class "
operator|+
name|c
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be instantiated"
decl_stmt|;
throw|throw
operator|new
name|InternalServerErrorException
argument_list|(
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Resource class "
operator|+
name|c
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be instantiated"
operator|+
literal|" due to IllegalAccessException"
decl_stmt|;
throw|throw
operator|new
name|InternalServerErrorException
argument_list|(
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|Response
name|r
init|=
name|JAXRSUtils
operator|.
name|convertFaultToResponse
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Response
operator|.
name|class
argument_list|,
name|r
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InternalServerErrorException
argument_list|()
throw|;
block|}
name|String
name|msg
init|=
literal|"Resource class "
operator|+
name|c
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be instantiated"
operator|+
literal|" due to InvocationTargetException"
decl_stmt|;
throw|throw
operator|new
name|InternalServerErrorException
argument_list|(
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|releaseInstance
parameter_list|(
name|Message
name|m
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|InjectionUtils
operator|.
name|invokeLifeCycleMethod
argument_list|(
name|o
argument_list|,
name|preDestroyMethod
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getResourceClass
parameter_list|()
block|{
return|return
name|c
operator|.
name|getDeclaringClass
argument_list|()
return|;
block|}
block|}
end_class

end_unit

