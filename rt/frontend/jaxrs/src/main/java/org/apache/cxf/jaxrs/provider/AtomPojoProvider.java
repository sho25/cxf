begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|Abdera
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|factory
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|ExtensibleElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Feed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|writer
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|atom
operator|.
name|AbstractAtomElementBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|atom
operator|.
name|AbstractEntryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|atom
operator|.
name|AbstractFeedBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|atom
operator|.
name|AtomElementReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|atom
operator|.
name|AtomElementWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_class
annotation|@
name|Produces
argument_list|(
block|{
literal|"application/atom+xml"
block|,
literal|"application/atom+xml;type=feed"
block|,
literal|"application/atom+xml;type=entry"
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"application/atom+xml"
block|,
literal|"application/atom+xml;type=feed"
block|,
literal|"application/atom+xml;type=entry"
block|}
argument_list|)
annotation|@
name|Provider
specifier|public
class|class
name|AtomPojoProvider
extends|extends
name|AbstractConfigurableProvider
implements|implements
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
implements|,
name|MessageBodyReader
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AtomPojoProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Abdera
name|ATOM_ENGINE
init|=
operator|new
name|Abdera
argument_list|()
decl_stmt|;
specifier|private
name|JAXBElementProvider
name|jaxbProvider
init|=
operator|new
name|JAXBElementProvider
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionGetters
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionSetters
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AtomElementWriter
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|atomWriters
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AtomElementReader
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|atomReaders
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractAtomElementBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|atomBuilders
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|MessageContext
name|mc
decl_stmt|;
specifier|private
name|boolean
name|formattedOutput
decl_stmt|;
annotation|@
name|Context
specifier|public
name|void
name|setMessageContext
parameter_list|(
name|MessageContext
name|context
parameter_list|)
block|{
name|mc
operator|=
name|context
expr_stmt|;
for|for
control|(
name|AbstractAtomElementBuilder
argument_list|<
name|?
argument_list|>
name|builder
range|:
name|atomBuilders
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|setMessageContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AtomElementWriter
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|writer
range|:
name|atomWriters
operator|.
name|values
argument_list|()
control|)
block|{
name|tryInjectMessageContext
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AtomElementReader
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|reader
range|:
name|atomReaders
operator|.
name|values
argument_list|()
control|)
block|{
name|tryInjectMessageContext
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tryInjectMessageContext
parameter_list|(
name|Object
name|handler
parameter_list|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|handler
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setMessageContext"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|MessageContext
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|InjectionUtils
operator|.
name|injectThroughMethod
argument_list|(
name|handler
argument_list|,
name|m
argument_list|,
name|mc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Message context can not be injected into "
operator|+
name|handler
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" : "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getSize
parameter_list|(
name|Object
name|t
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setCollectionGetters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|methods
parameter_list|)
block|{
name|collectionGetters
operator|=
name|methods
expr_stmt|;
block|}
specifier|public
name|void
name|setCollectionSetters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|methods
parameter_list|)
block|{
name|collectionSetters
operator|=
name|methods
expr_stmt|;
block|}
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
operator|!
name|Feed
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|Entry
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|Object
name|o
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isFeed
init|=
name|isFeedRequested
argument_list|(
name|mt
argument_list|)
decl_stmt|;
name|boolean
name|isCollection
init|=
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFeed
operator|&&
name|isCollection
condition|)
block|{
name|reportError
argument_list|(
literal|"Atom feed can only be created from a collection wrapper"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isFeed
operator|&&
name|isCollection
condition|)
block|{
name|reportError
argument_list|(
literal|"Atom entry can only be created from a single object"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Element
name|atomElement
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isFeed
operator|&&
operator|!
name|isCollection
condition|)
block|{
name|atomElement
operator|=
name|createFeedFromCollectionWrapper
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isFeed
operator|&&
operator|!
name|isCollection
condition|)
block|{
name|atomElement
operator|=
name|createEntryFromObject
argument_list|(
name|o
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
try|try
block|{
name|writeAtomElement
argument_list|(
name|atomElement
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Atom element can not be serialized"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeAtomElement
parameter_list|(
name|Element
name|atomElement
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|formattedOutput
condition|)
block|{
name|Writer
name|w
init|=
name|ATOM_ENGINE
operator|.
name|getWriterFactory
argument_list|()
operator|.
name|getWriter
argument_list|(
literal|"prettyxml"
argument_list|)
decl_stmt|;
name|atomElement
operator|.
name|writeTo
argument_list|(
name|w
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|atomElement
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFormattedOutput
parameter_list|(
name|boolean
name|formattedOutput
parameter_list|)
block|{
name|this
operator|.
name|formattedOutput
operator|=
name|formattedOutput
expr_stmt|;
block|}
specifier|protected
name|Feed
name|createFeedFromCollectionWrapper
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|Exception
block|{
name|Factory
name|factory
init|=
name|Abdera
operator|.
name|getNewFactory
argument_list|()
decl_stmt|;
name|Feed
name|feed
init|=
name|factory
operator|.
name|newFeed
argument_list|()
decl_stmt|;
name|boolean
name|writerUsed
init|=
name|buildFeed
argument_list|(
name|feed
argument_list|,
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|feed
return|;
block|}
name|String
name|methodName
init|=
name|getCollectionMethod
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Object
name|collection
init|=
literal|null
decl_stmt|;
name|Method
name|m
init|=
literal|null
decl_stmt|;
try|try
block|{
name|m
operator|=
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
expr_stmt|;
name|collection
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Collection for "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be retrieved"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|setFeedFromCollection
argument_list|(
name|factory
argument_list|,
name|feed
argument_list|,
name|o
argument_list|,
name|collection
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|m
operator|.
name|getGenericReturnType
argument_list|()
argument_list|,
name|writerUsed
argument_list|)
expr_stmt|;
return|return
name|feed
return|;
block|}
specifier|private
name|String
name|getCollectionMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|boolean
name|getter
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getter
condition|?
name|collectionGetters
else|:
name|collectionSetters
decl_stmt|;
name|String
name|methodName
init|=
name|map
operator|.
name|get
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodName
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|methodName
operator|=
operator|(
name|getter
condition|?
literal|"get"
else|:
literal|"set"
operator|)
operator|+
name|cls
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|params
init|=
name|getter
condition|?
operator|new
name|Class
index|[]
block|{}
else|:
operator|new
name|Class
index|[]
block|{
name|List
operator|.
name|class
block|}
decl_stmt|;
name|cls
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|type
init|=
name|getter
condition|?
literal|"getter"
else|:
literal|"setter"
decl_stmt|;
name|reportError
argument_list|(
literal|"Collection "
operator|+
name|type
operator|+
literal|" method for "
operator|+
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|" has not been specified and no default "
operator|+
name|methodName
operator|+
literal|" is available"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|methodName
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|boolean
name|buildFeed
parameter_list|(
name|Feed
name|feed
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|AtomElementWriter
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|builder
init|=
name|atomWriters
operator|.
name|get
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|AtomElementWriter
operator|)
name|builder
operator|)
operator|.
name|writeTo
argument_list|(
name|feed
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|setFeedFromCollection
parameter_list|(
name|Factory
name|factory
parameter_list|,
name|Feed
name|feed
parameter_list|,
name|Object
name|wrapper
parameter_list|,
name|Object
name|collection
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|collectionCls
parameter_list|,
name|Type
name|collectionType
parameter_list|,
name|boolean
name|writerUsed
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
index|[]
name|arr
init|=
name|collectionCls
operator|.
name|isArray
argument_list|()
condition|?
operator|(
name|Object
index|[]
operator|)
name|collection
else|:
operator|(
operator|(
name|Collection
operator|)
name|collection
operator|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|memberClass
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|collectionType
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|arr
control|)
block|{
name|Entry
name|entry
init|=
name|createEntryFromObject
argument_list|(
name|o
argument_list|,
name|memberClass
argument_list|)
decl_stmt|;
name|feed
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|writerUsed
condition|)
block|{
name|setFeedProperties
argument_list|(
name|factory
argument_list|,
name|feed
argument_list|,
name|wrapper
argument_list|,
name|collection
argument_list|,
name|collectionCls
argument_list|,
name|collectionType
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|setFeedProperties
parameter_list|(
name|Factory
name|factory
parameter_list|,
name|Feed
name|feed
parameter_list|,
name|Object
name|wrapper
parameter_list|,
name|Object
name|collection
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|collectionCls
parameter_list|,
name|Type
name|collectionType
parameter_list|)
block|{
name|AbstractAtomElementBuilder
argument_list|<
name|?
argument_list|>
name|builder
init|=
name|atomBuilders
operator|.
name|get
argument_list|(
name|wrapper
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|setCommonElementProperties
argument_list|(
name|factory
argument_list|,
name|feed
argument_list|,
name|builder
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
name|AbstractFeedBuilder
name|theBuilder
init|=
operator|(
name|AbstractFeedBuilder
operator|)
name|builder
decl_stmt|;
comment|// the hierarchy is a bit broken in that we can not set author/title.etc on some
comment|// common Feed/Entry super type
name|String
name|author
init|=
name|theBuilder
operator|.
name|getAuthor
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|author
operator|!=
literal|null
condition|)
block|{
name|feed
operator|.
name|addAuthor
argument_list|(
name|author
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|feed
operator|.
name|addAuthor
argument_list|(
literal|"CXF JAX-RS"
argument_list|)
expr_stmt|;
block|}
name|String
name|title
init|=
name|theBuilder
operator|.
name|getTitle
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
name|feed
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|feed
operator|.
name|setTitle
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|wrapper
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" collection with %d entry(ies)"
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|id
init|=
name|theBuilder
operator|.
name|getId
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|feed
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|feed
operator|.
name|setId
argument_list|(
literal|"uuid:"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|updated
init|=
name|theBuilder
operator|.
name|getUpdated
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
operator|!=
literal|null
condition|)
block|{
name|feed
operator|.
name|setUpdated
argument_list|(
name|updated
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|feed
operator|.
name|setUpdated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|links
init|=
name|theBuilder
operator|.
name|getLinks
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|links
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|links
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|feed
operator|.
name|addLink
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|terms
init|=
name|theBuilder
operator|.
name|getCategories
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
name|feed
operator|.
name|addCategory
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
comment|// feed specific
name|String
name|logo
init|=
name|theBuilder
operator|.
name|getLogo
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|logo
operator|!=
literal|null
condition|)
block|{
name|feed
operator|.
name|setLogo
argument_list|(
name|logo
argument_list|)
expr_stmt|;
block|}
name|String
name|icon
init|=
name|theBuilder
operator|.
name|getLogo
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|icon
operator|!=
literal|null
condition|)
block|{
name|feed
operator|.
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Entry
name|createEntryFromObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
throws|throws
name|Exception
block|{
name|Factory
name|factory
init|=
name|Abdera
operator|.
name|getNewFactory
argument_list|()
decl_stmt|;
name|Entry
name|entry
init|=
name|factory
operator|.
name|getAbdera
argument_list|()
operator|.
name|newEntry
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|buildEntry
argument_list|(
name|entry
argument_list|,
name|o
argument_list|)
condition|)
block|{
name|setEntryProperties
argument_list|(
name|factory
argument_list|,
name|entry
argument_list|,
name|o
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getContentElement
argument_list|()
operator|==
literal|null
operator|&&
name|entry
operator|.
name|getExtensions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|createEntryContent
argument_list|(
name|entry
argument_list|,
name|o
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|boolean
name|buildEntry
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|AtomElementWriter
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|builder
init|=
name|atomWriters
operator|.
name|get
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|AtomElementWriter
operator|)
name|builder
operator|)
operator|.
name|writeTo
argument_list|(
name|entry
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|createEntryContent
parameter_list|(
name|Entry
name|e
parameter_list|,
name|Object
name|o
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
throws|throws
name|Exception
block|{
name|Factory
name|factory
init|=
name|Abdera
operator|.
name|getNewFactory
argument_list|()
decl_stmt|;
name|JAXBContext
name|jc
init|=
name|jaxbProvider
operator|.
name|getJAXBContext
argument_list|(
name|cls
argument_list|,
name|cls
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|jc
operator|.
name|createMarshaller
argument_list|()
operator|.
name|marshal
argument_list|(
name|o
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|e
operator|.
name|setContentElement
argument_list|(
name|factory
operator|.
name|newContent
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|getContentElement
argument_list|()
operator|.
name|setContentType
argument_list|(
name|Content
operator|.
name|Type
operator|.
name|XML
argument_list|)
expr_stmt|;
name|e
operator|.
name|getContentElement
argument_list|()
operator|.
name|setValue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|setEntryProperties
parameter_list|(
name|Factory
name|factory
parameter_list|,
name|Entry
name|entry
parameter_list|,
name|Object
name|o
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|AbstractAtomElementBuilder
argument_list|<
name|?
argument_list|>
name|builder
init|=
name|atomBuilders
operator|.
name|get
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|setCommonElementProperties
argument_list|(
name|factory
argument_list|,
name|entry
argument_list|,
name|builder
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|AbstractEntryBuilder
name|theBuilder
init|=
operator|(
name|AbstractEntryBuilder
operator|)
name|builder
decl_stmt|;
name|String
name|author
init|=
name|theBuilder
operator|.
name|getAuthor
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|author
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|addAuthor
argument_list|(
name|author
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|addAuthor
argument_list|(
literal|"CXF JAX-RS"
argument_list|)
expr_stmt|;
block|}
name|String
name|title
init|=
name|theBuilder
operator|.
name|getTitle
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setTitle
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|id
init|=
name|theBuilder
operator|.
name|getId
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setId
argument_list|(
literal|"uuid:"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|updated
init|=
name|theBuilder
operator|.
name|getUpdated
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setUpdated
argument_list|(
name|updated
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setUpdated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|links
init|=
name|theBuilder
operator|.
name|getLinks
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|links
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|links
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|addLink
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// entry specific
name|String
name|published
init|=
name|theBuilder
operator|.
name|getPublished
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|published
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setPublished
argument_list|(
name|published
argument_list|)
expr_stmt|;
block|}
name|String
name|summary
init|=
name|theBuilder
operator|.
name|getSummary
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|summary
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setSummary
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|terms
init|=
name|theBuilder
operator|.
name|getCategories
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
name|entry
operator|.
name|addCategory
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|setCommonElementProperties
parameter_list|(
name|Factory
name|factory
parameter_list|,
name|ExtensibleElement
name|element
parameter_list|,
name|AbstractAtomElementBuilder
name|builder
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|String
name|baseUri
init|=
name|builder
operator|.
name|getBaseUri
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseUri
operator|!=
literal|null
condition|)
block|{
name|element
operator|.
name|setBaseUri
argument_list|(
name|baseUri
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reportError
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
literal|500
argument_list|)
operator|.
name|type
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|response
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|response
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isFeedRequested
parameter_list|(
name|MediaType
name|mt
parameter_list|)
block|{
if|if
condition|(
literal|"entry"
operator|.
name|equals
argument_list|(
name|mt
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setAtomWriters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|AtomElementWriter
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|writers
parameter_list|)
block|{
name|this
operator|.
name|atomWriters
operator|=
name|writers
expr_stmt|;
block|}
specifier|public
name|void
name|setAtomReaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|AtomElementReader
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|readers
parameter_list|)
block|{
name|this
operator|.
name|atomReaders
operator|=
name|readers
expr_stmt|;
block|}
specifier|public
name|void
name|setAtomBuilders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractAtomElementBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|builders
parameter_list|)
block|{
name|this
operator|.
name|atomBuilders
operator|=
name|builders
expr_stmt|;
block|}
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Object
name|readFrom
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|boolean
name|isFeed
init|=
name|isFeedRequested
argument_list|(
name|mt
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFeed
condition|)
block|{
return|return
name|readFromFeed
argument_list|(
name|cls
argument_list|,
name|mt
argument_list|,
name|headers
argument_list|,
name|is
argument_list|)
return|;
block|}
else|else
block|{
name|Entry
name|entry
init|=
operator|new
name|AtomEntryProvider
argument_list|()
operator|.
name|readFrom
argument_list|(
name|Entry
operator|.
name|class
argument_list|,
name|Entry
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|mt
argument_list|,
name|headers
argument_list|,
name|is
argument_list|)
decl_stmt|;
return|return
name|readFromEntry
argument_list|(
name|entry
argument_list|,
name|cls
argument_list|,
name|mt
argument_list|,
name|headers
argument_list|,
name|is
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Object
name|readFromFeed
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|cls
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|AtomFeedProvider
name|p
init|=
operator|new
name|AtomFeedProvider
argument_list|()
decl_stmt|;
name|Feed
name|feed
init|=
name|p
operator|.
name|readFrom
argument_list|(
name|Feed
operator|.
name|class
argument_list|,
name|Feed
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|mt
argument_list|,
name|headers
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|AtomElementReader
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|reader
init|=
name|atomReaders
operator|.
name|get
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|AtomElementReader
operator|)
name|reader
operator|)
operator|.
name|readFrom
argument_list|(
name|feed
argument_list|)
return|;
block|}
name|Object
name|instance
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|methodName
init|=
name|getCollectionMethod
argument_list|(
name|cls
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
name|cls
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|List
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realCls
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|feed
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|readFromEntry
argument_list|(
name|e
argument_list|,
name|realCls
argument_list|,
name|mt
argument_list|,
name|headers
argument_list|,
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|instance
operator|=
name|cls
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|m
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
operator|new
name|Object
index|[]
block|{
name|objects
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Object of type "
operator|+
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be deserialized from Feed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Object
name|readFromEntry
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|AtomElementReader
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|reader
init|=
name|atomReaders
operator|.
name|get
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|AtomElementReader
operator|)
name|reader
operator|)
operator|.
name|readFrom
argument_list|(
name|entry
argument_list|)
return|;
block|}
try|try
block|{
name|Unmarshaller
name|um
init|=
name|jaxbProvider
operator|.
name|getJAXBContext
argument_list|(
name|cls
argument_list|,
name|cls
argument_list|)
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
return|return
name|um
operator|.
name|unmarshal
argument_list|(
operator|new
name|StringReader
argument_list|(
name|entry
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Object of type "
operator|+
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be deserialized from Entry"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

