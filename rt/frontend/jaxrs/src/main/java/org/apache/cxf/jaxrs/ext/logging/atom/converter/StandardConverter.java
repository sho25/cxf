begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|atom
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|Abdera
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|factory
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|ExtensibleElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Feed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|Validate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|LogRecordsList
import|;
end_import

begin_comment
comment|/**  * Converter producing ATOM Feeds on standalone Entries with LogRecords or LogRecordsLists embedded as content  * or extension. For configuration details see constructor documentation.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|StandardConverter
implements|implements
name|Converter
block|{
comment|/** Conversion output */
specifier|public
enum|enum
name|Output
block|{
name|FEED
block|,
name|ENTRY
block|}
comment|/** Quantities of entries in feed or logrecords in entry */
specifier|public
enum|enum
name|Multiplicity
block|{
name|ONE
block|,
name|MANY
block|}
comment|/** Entity format */
specifier|public
enum|enum
name|Format
block|{
name|CONTENT
block|,
name|EXTENSION
block|}
comment|/**      * Post-processing for feeds/entries properties customization eg setup of dates, titles, author etc.      */
specifier|public
interface|interface
name|Postprocessor
block|{
comment|/** Called after entry creation for given log records. */
name|void
name|afterEntry
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
function_decl|;
comment|/** Called after feed creation; at this stage feed has associated entries. */
name|void
name|afterFeed
parameter_list|(
name|Feed
name|feed
parameter_list|)
function_decl|;
block|}
specifier|private
name|Factory
name|factory
decl_stmt|;
specifier|private
name|Marshaller
name|marsh
decl_stmt|;
specifier|private
name|DateFormat
name|df
decl_stmt|;
specifier|private
name|Converter
name|worker
decl_stmt|;
specifier|private
name|Postprocessor
name|postprocessor
decl_stmt|;
comment|/**      * Creates configured converter with custom feeds/entries post-processor. Regardless of "format",      * combination of "output" and "multiplicity" flags can be interpreted as follow:      *<ul>      *<li>ENTRY ONE - for each log record one entry is produced, converter returns list of entries</li>      *<li>ENTRY MANY - list of log records is packed in one entry, converter return one entry.</li>      *<li>FEED ONE - list of log records is packed in one entry, entry is inserted to feed, converter returns      * one feed.</li>      *<li>FEED MANY - for each log record one entry is produced, entries are collected in one feed, converter      * returns one feed.</li>      *</ul>      *       * @param output whether root elements if Feed or Entry (e.g. for AtomPub).      * @param multiplicity for output==FEED it is multiplicity of entities in feed for output==ENTITY it is      *            multiplicity of log records in entity.      * @param format log records embedded as entry content or extension.      * @param postprocessor custom feeds/entries post-processor.      */
specifier|public
name|StandardConverter
parameter_list|(
name|Output
name|output
parameter_list|,
name|Multiplicity
name|multiplicity
parameter_list|,
name|Format
name|format
parameter_list|,
name|Postprocessor
name|postprocessor
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|output
argument_list|,
literal|"output is null"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|notNull
argument_list|(
name|multiplicity
argument_list|,
literal|"multiplicity is null"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|notNull
argument_list|(
name|format
argument_list|,
literal|"format is null"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|notNull
argument_list|(
name|postprocessor
argument_list|,
literal|"interceptor is null"
argument_list|)
expr_stmt|;
name|configure
argument_list|(
name|output
argument_list|,
name|multiplicity
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|this
operator|.
name|postprocessor
operator|=
name|postprocessor
expr_stmt|;
name|df
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
argument_list|)
expr_stmt|;
name|factory
operator|=
name|Abdera
operator|.
name|getNewFactory
argument_list|()
expr_stmt|;
try|try
block|{
name|marsh
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|LogRecordsList
operator|.
name|class
argument_list|)
operator|.
name|createMarshaller
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates configured converter with default post-processing of feeds/entries mandatory properties. See      * {@link #StandardConverter(Output, Multiplicity, Format, Postprocessor)} for description.      */
specifier|public
name|StandardConverter
parameter_list|(
name|Output
name|output
parameter_list|,
name|Multiplicity
name|multiplicity
parameter_list|,
name|Format
name|format
parameter_list|)
block|{
name|this
argument_list|(
name|output
argument_list|,
name|multiplicity
argument_list|,
name|format
argument_list|,
operator|new
name|DefaultPostprocessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|convert
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
block|{
return|return
name|worker
operator|.
name|convert
argument_list|(
name|records
argument_list|)
return|;
block|}
specifier|private
name|void
name|configure
parameter_list|(
specifier|final
name|Output
name|output
parameter_list|,
specifier|final
name|Multiplicity
name|multiplicity
parameter_list|,
specifier|final
name|Format
name|format
parameter_list|)
block|{
if|if
condition|(
name|output
operator|==
name|Output
operator|.
name|ENTRY
operator|&&
name|multiplicity
operator|==
name|Multiplicity
operator|.
name|ONE
condition|)
block|{
name|worker
operator|=
operator|new
name|Converter
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|convert
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
block|{
comment|// produces many entries, each entry with one log record
name|List
argument_list|<
name|Element
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LogRecord
name|record
range|:
name|records
control|)
block|{
name|Entry
name|e
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Format
operator|.
name|CONTENT
condition|)
block|{
name|e
operator|=
name|createEntry
argument_list|(
name|createContent
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|createEntry
argument_list|(
name|createExtension
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|postprocessor
operator|.
name|afterEntry
argument_list|(
name|e
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|==
name|Output
operator|.
name|ENTRY
operator|&&
name|multiplicity
operator|==
name|Multiplicity
operator|.
name|MANY
condition|)
block|{
name|worker
operator|=
operator|new
name|Converter
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|convert
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
block|{
comment|// produces one entry with list of all log records
name|Entry
name|e
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Format
operator|.
name|CONTENT
condition|)
block|{
name|e
operator|=
name|createEntry
argument_list|(
name|createContent
argument_list|(
name|records
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|createEntry
argument_list|(
name|createExtension
argument_list|(
name|records
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|postprocessor
operator|.
name|afterEntry
argument_list|(
name|e
argument_list|,
name|records
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|==
name|Output
operator|.
name|FEED
operator|&&
name|multiplicity
operator|==
name|Multiplicity
operator|.
name|ONE
condition|)
block|{
name|worker
operator|=
operator|new
name|Converter
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|convert
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
block|{
comment|// produces one feed with one entry with list of all log records
name|Entry
name|e
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Format
operator|.
name|CONTENT
condition|)
block|{
name|e
operator|=
name|createEntry
argument_list|(
name|createContent
argument_list|(
name|records
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|createEntry
argument_list|(
name|createExtension
argument_list|(
name|records
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|postprocessor
operator|.
name|afterEntry
argument_list|(
name|e
argument_list|,
name|records
argument_list|)
expr_stmt|;
name|Feed
name|f
init|=
name|createFeed
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|postprocessor
operator|.
name|afterFeed
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|f
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|==
name|Output
operator|.
name|FEED
operator|&&
name|multiplicity
operator|==
name|Multiplicity
operator|.
name|MANY
condition|)
block|{
name|worker
operator|=
operator|new
name|Converter
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|convert
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
block|{
comment|// produces one feed with many entries, each entry with one log record
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LogRecord
name|record
range|:
name|records
control|)
block|{
name|Entry
name|e
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Format
operator|.
name|CONTENT
condition|)
block|{
name|e
operator|=
name|createEntry
argument_list|(
name|createContent
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|createEntry
argument_list|(
name|createExtension
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|postprocessor
operator|.
name|afterEntry
argument_list|(
name|e
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Feed
name|f
init|=
name|createFeed
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|postprocessor
operator|.
name|afterFeed
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|f
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|worker
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported configuration"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|createContent
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|marsh
operator|.
name|marshal
argument_list|(
name|record
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|createContent
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|LogRecordsList
name|list
init|=
operator|new
name|LogRecordsList
argument_list|()
decl_stmt|;
name|list
operator|.
name|setLogRecords
argument_list|(
name|records
argument_list|)
expr_stmt|;
try|try
block|{
name|marsh
operator|.
name|marshal
argument_list|(
name|list
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|ExtensibleElement
name|createExtension
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
name|ExtensibleElement
name|erec
init|=
name|factory
operator|.
name|newExtensionElement
argument_list|(
name|qn
argument_list|(
literal|"logRecord"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|date
init|=
name|df
operator|.
name|format
argument_list|(
name|record
operator|.
name|getEventTimestamp
argument_list|()
argument_list|)
decl_stmt|;
comment|// timezone in date does not have semicolon as XML Date requires
comment|// e.g we have "2009-11-23T22:03:53.996+0100"
comment|// instead of "2009-11-23T22:03:53.996+01:00"
name|date
operator|=
name|date
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|date
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|+
literal|":"
operator|+
name|date
operator|.
name|substring
argument_list|(
name|date
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|// forget about single line "addExtension().setText()" since
comment|// javac failure "org.apache.abdera.model.Element cannot be dereferenced"
name|Element
name|e
init|=
name|erec
operator|.
name|addExtension
argument_list|(
name|qn
argument_list|(
literal|"eventTimestamp"
argument_list|)
argument_list|)
decl_stmt|;
name|e
operator|.
name|setText
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|e
operator|=
name|erec
operator|.
name|addExtension
argument_list|(
name|qn
argument_list|(
literal|"level"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|erec
operator|.
name|addExtension
argument_list|(
name|qn
argument_list|(
literal|"loggerName"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getLoggerName
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|erec
operator|.
name|addExtension
argument_list|(
name|qn
argument_list|(
literal|"message"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|erec
operator|.
name|addExtension
argument_list|(
name|qn
argument_list|(
literal|"threadName"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|erec
operator|.
name|addExtension
argument_list|(
name|qn
argument_list|(
literal|"throwable"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|erec
return|;
block|}
specifier|private
name|QName
name|qn
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jaxrs/log"
argument_list|,
name|name
argument_list|,
literal|"log"
argument_list|)
return|;
block|}
specifier|private
name|ExtensibleElement
name|createExtension
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
block|{
name|ExtensibleElement
name|list
init|=
name|factory
operator|.
name|newExtensionElement
argument_list|(
name|qn
argument_list|(
literal|"logRecordsList"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|LogRecord
name|rec
range|:
name|records
control|)
block|{
name|list
operator|.
name|addExtension
argument_list|(
name|createExtension
argument_list|(
name|rec
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|Entry
name|createEntry
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|Entry
name|entry
init|=
name|factory
operator|.
name|newEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setContent
argument_list|(
name|content
argument_list|,
name|Content
operator|.
name|Type
operator|.
name|XML
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
specifier|private
name|Entry
name|createEntry
parameter_list|(
name|ExtensibleElement
name|ext
parameter_list|)
block|{
name|Entry
name|entry
init|=
name|factory
operator|.
name|newEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|addExtension
argument_list|(
name|ext
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
specifier|private
name|Feed
name|createFeed
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|Feed
name|feed
init|=
name|factory
operator|.
name|newFeed
argument_list|()
decl_stmt|;
name|feed
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|feed
return|;
block|}
specifier|private
name|Feed
name|createFeed
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
block|{
name|Feed
name|feed
init|=
name|factory
operator|.
name|newFeed
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|feed
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|feed
return|;
block|}
specifier|private
specifier|static
class|class
name|DefaultPostprocessor
implements|implements
name|Postprocessor
block|{
specifier|public
name|void
name|afterEntry
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
block|{
comment|// required fields (see RFC 4287)
name|entry
operator|.
name|setId
argument_list|(
literal|"uuid:"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|addAuthor
argument_list|(
literal|"CXF"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setTitle
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Entry with %d log record(s)"
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setUpdated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|afterFeed
parameter_list|(
name|Feed
name|feed
parameter_list|)
block|{
comment|// required fields (see RFC 4287)
name|feed
operator|.
name|setId
argument_list|(
literal|"uuid:"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|feed
operator|.
name|addAuthor
argument_list|(
literal|"CXF"
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setTitle
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Feed with %d entry(ies)"
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setUpdated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

