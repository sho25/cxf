begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|atom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Feed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|atom
operator|.
name|converter
operator|.
name|StandardConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|atom
operator|.
name|converter
operator|.
name|StandardConverter
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|atom
operator|.
name|converter
operator|.
name|StandardConverter
operator|.
name|Multiplicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|atom
operator|.
name|converter
operator|.
name|StandardConverter
operator|.
name|Output
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"logs"
argument_list|)
specifier|public
class|class
name|AtomPullServer
extends|extends
name|AbstractAtomBean
block|{
specifier|private
name|StandardConverter
name|converter
init|=
operator|new
name|StandardConverter
argument_list|(
name|Output
operator|.
name|FEED
argument_list|,
name|Multiplicity
operator|.
name|MANY
argument_list|,
name|Format
operator|.
name|CONTENT
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
init|=
operator|new
name|LinkedList
argument_list|<
name|LogRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|WeakHashMap
argument_list|<
name|Integer
argument_list|,
name|Feed
argument_list|>
name|feeds
init|=
operator|new
name|WeakHashMap
argument_list|<
name|Integer
argument_list|,
name|Feed
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|pageSize
init|=
literal|20
decl_stmt|;
specifier|private
name|boolean
name|useArchivedFeeds
decl_stmt|;
annotation|@
name|Context
specifier|private
name|MessageContext
name|context
decl_stmt|;
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"application/atom+xml"
argument_list|)
specifier|public
name|Feed
name|getRecords
parameter_list|()
block|{
name|int
name|page
init|=
name|getPageValue
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|feeds
init|)
block|{
name|Feed
name|f
init|=
name|feeds
operator|.
name|get
argument_list|(
name|page
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
return|return
name|f
return|;
block|}
block|}
name|List
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|elements
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|records
init|)
block|{
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
init|=
name|getSubList
argument_list|(
name|page
argument_list|)
decl_stmt|;
name|elements
operator|=
name|converter
operator|.
name|convert
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
name|Feed
name|feed
init|=
call|(
name|Feed
call|)
argument_list|(
name|elements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|setFeedPageProperties
argument_list|(
name|feed
argument_list|,
name|page
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|feeds
init|)
block|{
name|feeds
operator|.
name|put
argument_list|(
name|page
argument_list|,
name|feed
argument_list|)
expr_stmt|;
block|}
return|return
name|feed
return|;
block|}
specifier|protected
name|List
argument_list|<
name|LogRecord
argument_list|>
name|getSubList
parameter_list|(
name|int
name|page
parameter_list|)
block|{
if|if
condition|(
name|records
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|records
return|;
block|}
if|if
condition|(
operator|!
name|useArchivedFeeds
condition|)
block|{
name|int
name|fromIndex
init|=
name|page
operator|==
literal|1
condition|?
literal|0
else|:
operator|(
name|page
operator|-
literal|1
operator|)
operator|*
name|pageSize
decl_stmt|;
if|if
condition|(
name|fromIndex
operator|>
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// this should not happen really
name|page
operator|=
literal|1
expr_stmt|;
name|fromIndex
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|toIndex
init|=
name|page
operator|==
literal|1
condition|?
name|pageSize
else|:
name|fromIndex
operator|+
name|pageSize
decl_stmt|;
if|if
condition|(
name|toIndex
operator|>
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
name|toIndex
operator|=
name|records
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|records
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|fromIndex
init|=
name|records
operator|.
name|size
argument_list|()
operator|-
name|pageSize
operator|*
name|page
decl_stmt|;
if|if
condition|(
name|fromIndex
operator|<
literal|0
condition|)
block|{
name|fromIndex
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|toIndex
init|=
name|pageSize
operator|<
name|records
operator|.
name|size
argument_list|()
condition|?
name|records
operator|.
name|size
argument_list|()
else|:
name|pageSize
decl_stmt|;
return|return
name|records
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|setFeedPageProperties
parameter_list|(
name|Feed
name|feed
parameter_list|,
name|int
name|page
parameter_list|)
block|{
name|String
name|self
init|=
name|context
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|feed
operator|.
name|addLink
argument_list|(
name|self
argument_list|,
literal|"self"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|context
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|useArchivedFeeds
condition|)
block|{
if|if
condition|(
name|page
operator|>
literal|2
condition|)
block|{
name|feed
operator|.
name|addLink
argument_list|(
name|uri
argument_list|,
literal|"first"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|page
operator|*
name|pageSize
operator|<
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
name|feed
operator|.
name|addLink
argument_list|(
name|uri
operator|+
literal|"?page="
operator|+
operator|(
name|page
operator|+
literal|1
operator|)
argument_list|,
literal|"next"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|page
operator|*
operator|(
name|pageSize
operator|+
literal|1
operator|)
operator|<
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
name|feed
operator|.
name|addLink
argument_list|(
name|uri
operator|+
literal|"?page="
operator|+
operator|(
name|records
operator|.
name|size
argument_list|()
operator|/
name|pageSize
operator|+
literal|1
operator|)
argument_list|,
literal|"last"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|page
operator|>
literal|1
condition|)
block|{
name|uri
operator|=
name|page
operator|>
literal|2
condition|?
name|uri
operator|+
literal|"?page="
operator|+
operator|(
name|page
operator|-
literal|1
operator|)
else|:
name|uri
expr_stmt|;
name|feed
operator|.
name|addLink
argument_list|(
name|uri
argument_list|,
literal|"previous"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|feed
operator|.
name|addLink
argument_list|(
name|uri
argument_list|,
literal|"current"
argument_list|)
expr_stmt|;
comment|// TODO : add prev-archive and next-archive; next-archive should not be set if it will point to
comment|// current
comment|// and xmlns:fh="http://purl.org/syndication/history/1.0":archive extension but only if
comment|// it is not current
block|}
block|}
specifier|protected
name|int
name|getPageValue
parameter_list|()
block|{
name|String
name|pageValue
init|=
name|context
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"page"
argument_list|)
decl_stmt|;
name|int
name|page
init|=
literal|1
decl_stmt|;
try|try
block|{
if|if
condition|(
name|pageValue
operator|!=
literal|null
condition|)
block|{
name|page
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|pageValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// default to 1
block|}
return|return
name|page
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Handler
name|createHandler
parameter_list|()
block|{
return|return
operator|new
name|AtomPullHandler
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|void
name|publish
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
synchronized|synchronized
init|(
name|records
init|)
block|{
name|records
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{              }
specifier|public
name|void
name|setPageSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|pageSize
operator|=
name|size
expr_stmt|;
block|}
block|}
end_class

end_unit

