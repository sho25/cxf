begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ClassHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ServiceConstructionException
import|;
end_import

begin_comment
comment|/**  * The default singleton resource provider which returns  * the same resource instance per every request  */
end_comment

begin_class
specifier|public
class|class
name|SingletonResourceProvider
implements|implements
name|ResourceProvider
block|{
specifier|private
name|Object
name|resourceInstance
decl_stmt|;
specifier|private
name|boolean
name|callPostConstruct
decl_stmt|;
specifier|public
name|SingletonResourceProvider
parameter_list|(
name|Object
name|o
parameter_list|,
name|boolean
name|callPostConstruct
parameter_list|)
block|{
name|resourceInstance
operator|=
name|o
expr_stmt|;
name|this
operator|.
name|callPostConstruct
operator|=
name|callPostConstruct
expr_stmt|;
block|}
specifier|public
name|SingletonResourceProvider
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|this
argument_list|(
name|o
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Endpoint
name|ep
parameter_list|)
block|{
if|if
condition|(
name|resourceInstance
operator|instanceof
name|Constructor
condition|)
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
init|=
operator|(
name|Constructor
argument_list|<
name|?
argument_list|>
operator|)
name|resourceInstance
decl_stmt|;
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|ExchangeImpl
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Object
index|[]
name|values
init|=
name|ResourceUtils
operator|.
name|createConstructorArguments
argument_list|(
name|c
argument_list|,
name|m
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|resourceInstance
operator|=
name|values
operator|.
name|length
operator|>
literal|0
condition|?
name|c
operator|.
name|newInstance
argument_list|(
name|values
argument_list|)
else|:
name|c
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|callPostConstruct
condition|)
block|{
name|InjectionUtils
operator|.
name|invokeLifeCycleMethod
argument_list|(
name|resourceInstance
argument_list|,
name|ResourceUtils
operator|.
name|findPostConstructMethod
argument_list|(
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|resourceInstance
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Object
name|getInstance
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
return|return
name|resourceInstance
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|releaseInstance
parameter_list|(
name|Message
name|m
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
comment|// complete
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getResourceClass
parameter_list|()
block|{
return|return
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|resourceInstance
argument_list|)
return|;
block|}
block|}
end_class

end_unit

