begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|wadl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|RequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|// TODO :
end_comment

begin_comment
comment|// 1. extract JavaDocs and put them into XML comments
end_comment

begin_comment
comment|// 2. if _type = html -> convert the XML buil here using MH's stylesheet
end_comment

begin_comment
comment|// 3. generate grammars
end_comment

begin_class
specifier|public
class|class
name|WadlGenerator
implements|implements
name|RequestHandler
block|{
specifier|public
specifier|static
specifier|final
name|String
name|WADL_QUERY
init|=
literal|"_wadl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|WADL_TYPE
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"application/vnd.sun.wadl+xml"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WADL_NS
init|=
literal|"http://research.sun.com/wadl/2006/10"
decl_stmt|;
specifier|public
name|Response
name|handleRequest
parameter_list|(
name|Message
name|m
parameter_list|,
name|ClassResourceInfo
name|resource
parameter_list|)
block|{
name|UriInfo
name|ui
init|=
operator|new
name|UriInfoImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ui
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WADL_QUERY
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<application xmlns=\""
argument_list|)
operator|.
name|append
argument_list|(
name|WADL_NS
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<resources base=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ui
operator|.
name|getBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|handleResource
argument_list|(
name|sb
argument_list|,
name|resource
argument_list|,
name|resource
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|resource
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getVariables
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</resources>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</application>"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|WADL_TYPE
argument_list|)
operator|.
name|entity
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|handleResource
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|templateVars
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<resource path=\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|handleTemplateParams
argument_list|(
name|sb
argument_list|,
name|templateVars
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OperationResourceInfo
argument_list|>
name|sortedOps
init|=
name|sortOperationsByPath
argument_list|(
name|cri
operator|.
name|getMethodDispatcher
argument_list|()
operator|.
name|getOperationResourceInfos
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OperationResourceInfo
argument_list|>
name|opsWithSamePath
init|=
operator|new
name|LinkedList
argument_list|<
name|OperationResourceInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedOps
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sortedOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getHttpMethod
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|sortedOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|ClassResourceInfo
name|subcri
init|=
name|cri
operator|.
name|findResource
argument_list|(
name|cls
argument_list|,
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|subcri
operator|!=
literal|null
condition|)
block|{
name|handleResource
argument_list|(
name|sb
argument_list|,
name|subcri
argument_list|,
name|sortedOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|sortedOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getVariables
argument_list|()
argument_list|)
expr_stmt|;
name|opsWithSamePath
operator|.
name|clear
argument_list|()
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|handleDynamicSubresource
argument_list|(
name|sb
argument_list|,
name|sortedOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|opsWithSamePath
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|opsWithSamePath
operator|.
name|add
argument_list|(
name|sortedOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|sortedOps
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|sortedOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|opsWithSamePath
operator|.
name|add
argument_list|(
name|sortedOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleOperation
argument_list|(
name|sb
argument_list|,
name|opsWithSamePath
argument_list|)
expr_stmt|;
name|opsWithSamePath
operator|.
name|clear
argument_list|()
expr_stmt|;
name|opsWithSamePath
operator|.
name|add
argument_list|(
name|sortedOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|handleOperation
argument_list|(
name|sb
argument_list|,
name|opsWithSamePath
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</resource>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleOperation
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|List
argument_list|<
name|OperationResourceInfo
argument_list|>
name|oris
parameter_list|)
block|{
if|if
condition|(
name|oris
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|String
name|path
init|=
name|oris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|isSlash
init|=
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSlash
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<resource path=\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OperationResourceInfo
name|ori
range|:
name|oris
control|)
block|{
name|handleTemplateParams
argument_list|(
name|sb
argument_list|,
name|ori
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getVariables
argument_list|()
argument_list|)
expr_stmt|;
name|handleMatrixParams
argument_list|(
name|sb
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OperationResourceInfo
name|ori
range|:
name|oris
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<method name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<request>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|handleParameter
argument_list|(
name|sb
argument_list|,
name|ori
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</request>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Void
operator|.
name|class
operator|!=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<response>"
argument_list|)
expr_stmt|;
name|handleRepresentation
argument_list|(
name|sb
argument_list|,
name|ori
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</response>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</method>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isSlash
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</resource>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleDynamicSubresource
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<!-- Dynamic subresource -->"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<resource path=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ori
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<request>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|handleParameter
argument_list|(
name|sb
argument_list|,
name|ori
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</request>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</resource>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleParameter
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Parameter
name|pm
parameter_list|)
block|{
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|REQUEST_BODY
condition|)
block|{
name|handleRepresentation
argument_list|(
name|sb
argument_list|,
name|ori
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|PATH
operator|||
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|MATRIX
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|HEADER
operator|||
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|QUERY
condition|)
block|{
name|writeParam
argument_list|(
name|sb
argument_list|,
name|pm
operator|.
name|getName
argument_list|()
argument_list|,
name|pm
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|pm
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleMatrixParams
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
for|for
control|(
name|Parameter
name|pm
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|MATRIX
condition|)
block|{
name|writeParam
argument_list|(
name|sb
argument_list|,
name|pm
operator|.
name|getName
argument_list|()
argument_list|,
literal|"matrix"
argument_list|,
name|pm
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeParam
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|style
parameter_list|,
name|String
name|dValue
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<param name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"style=\""
argument_list|)
operator|.
name|append
argument_list|(
name|style
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|dValue
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" default=\""
argument_list|)
operator|.
name|append
argument_list|(
name|dValue
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleTemplateParams
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|vars
parameter_list|)
block|{
for|for
control|(
name|String
name|var
range|:
name|vars
control|)
block|{
name|writeParam
argument_list|(
name|sb
argument_list|,
name|var
argument_list|,
literal|"template"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleRepresentation
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<representation>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</representation>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|OperationResourceInfo
argument_list|>
name|sortOperationsByPath
parameter_list|(
name|Set
argument_list|<
name|OperationResourceInfo
argument_list|>
name|ops
parameter_list|)
block|{
name|List
argument_list|<
name|OperationResourceInfo
argument_list|>
name|opsWithSamePath
init|=
operator|new
name|LinkedList
argument_list|<
name|OperationResourceInfo
argument_list|>
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|opsWithSamePath
argument_list|,
operator|new
name|Comparator
argument_list|<
name|OperationResourceInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|OperationResourceInfo
name|op1
parameter_list|,
name|OperationResourceInfo
name|op2
parameter_list|)
block|{
name|String
name|path1
init|=
name|op1
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|path2
init|=
name|op2
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|path1
operator|.
name|compareTo
argument_list|(
name|path2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|opsWithSamePath
return|;
block|}
block|}
end_class

end_unit

