begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|wadl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|XmlSchemaPrimitiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBBeanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBContextProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|RequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|HttpHeadersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|URITemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_class
specifier|public
class|class
name|WadlGenerator
implements|implements
name|RequestHandler
block|{
specifier|public
specifier|static
specifier|final
name|String
name|WADL_QUERY
init|=
literal|"_wadl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|WADL_TYPE
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"application/vnd.sun.wadl+xml"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WADL_NS
init|=
literal|"http://research.sun.com/wadl/2006/10"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WadlGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXB_DEFAULT_NAMESPACE
init|=
literal|"##default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXB_DEFAULT_NAME
init|=
literal|"##default"
decl_stmt|;
specifier|private
name|boolean
name|ignoreMessageWriters
init|=
literal|true
decl_stmt|;
specifier|public
name|Response
name|handleRequest
parameter_list|(
name|Message
name|m
parameter_list|,
name|ClassResourceInfo
name|resource
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"GET"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UriInfo
name|ui
init|=
operator|new
name|UriInfoImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ui
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WADL_QUERY
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sbMain
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sbMain
operator|.
name|append
argument_list|(
literal|"<application xmlns=\""
argument_list|)
operator|.
name|append
argument_list|(
name|WADL_NS
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" xmlns:xs=\""
argument_list|)
operator|.
name|append
argument_list|(
name|XmlSchemaConstants
operator|.
name|XSD_NAMESPACE_URI
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|StringBuilder
name|sbGrammars
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sbGrammars
operator|.
name|append
argument_list|(
literal|"<grammars>"
argument_list|)
expr_stmt|;
name|StringBuilder
name|sbResources
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sbResources
operator|.
name|append
argument_list|(
literal|"<resources base=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ui
operator|.
name|getBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|cris
init|=
name|getResourcesList
argument_list|(
name|m
argument_list|,
name|resource
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|jaxbTypes
init|=
name|ResourceUtils
operator|.
name|getAllRequestResponseTypes
argument_list|(
name|cris
argument_list|,
literal|true
argument_list|)
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|JAXBContext
name|context
init|=
name|createJaxbContext
argument_list|(
name|jaxbTypes
argument_list|)
decl_stmt|;
name|SchemaCollection
name|coll
init|=
name|getSchemaCollection
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|JAXBContextProxy
name|proxy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|coll
operator|!=
literal|null
condition|)
block|{
name|proxy
operator|=
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|context
argument_list|,
name|JAXBContextProxy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ClassResourceInfo
argument_list|>
name|visitedResources
init|=
operator|new
name|HashSet
argument_list|<
name|ClassResourceInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassResourceInfo
name|cri
range|:
name|cris
control|)
block|{
name|handleResource
argument_list|(
name|sbResources
argument_list|,
name|jaxbTypes
argument_list|,
name|proxy
argument_list|,
name|clsMap
argument_list|,
name|cri
argument_list|,
name|cri
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|visitedResources
argument_list|)
expr_stmt|;
block|}
name|sbResources
operator|.
name|append
argument_list|(
literal|"</resources>"
argument_list|)
expr_stmt|;
name|handleGrammars
argument_list|(
name|sbMain
argument_list|,
name|sbGrammars
argument_list|,
name|coll
argument_list|,
name|clsMap
argument_list|)
expr_stmt|;
name|sbGrammars
operator|.
name|append
argument_list|(
literal|"</grammars>"
argument_list|)
expr_stmt|;
name|sbMain
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|sbMain
operator|.
name|append
argument_list|(
name|sbGrammars
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sbMain
operator|.
name|append
argument_list|(
name|sbResources
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sbMain
operator|.
name|append
argument_list|(
literal|"</application>"
argument_list|)
expr_stmt|;
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|JAXRSUtils
operator|.
name|IGNORE_MESSAGE_WRITERS
argument_list|,
name|ignoreMessageWriters
argument_list|)
expr_stmt|;
name|HttpHeaders
name|headers
init|=
operator|new
name|HttpHeadersImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|MediaType
name|type
init|=
name|headers
operator|.
name|getAcceptableMediaTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
condition|?
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
else|:
name|WADL_TYPE
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|type
argument_list|)
operator|.
name|entity
argument_list|(
name|sbMain
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|handleGrammars
parameter_list|(
name|StringBuilder
name|sbApp
parameter_list|,
name|StringBuilder
name|sbGrammars
parameter_list|,
name|SchemaCollection
name|coll
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QName
name|qname
range|:
name|clsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sbApp
operator|.
name|append
argument_list|(
literal|" xmlns:"
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|writeSchemas
argument_list|(
name|sbGrammars
argument_list|,
name|coll
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeSchemas
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|SchemaCollection
name|coll
parameter_list|)
block|{
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|XmlSchema
name|xs
range|:
name|coll
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|xs
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|xs
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleResource
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|jaxbTypes
parameter_list|,
name|JAXBContextProxy
name|jaxbProxy
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|ClassResourceInfo
argument_list|>
name|visitedResources
parameter_list|)
block|{
name|visitedResources
operator|.
name|add
argument_list|(
name|cri
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<resource path=\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OperationResourceInfo
argument_list|>
name|sortedOps
init|=
name|sortOperationsByPath
argument_list|(
name|cri
operator|.
name|getMethodDispatcher
argument_list|()
operator|.
name|getOperationResourceInfos
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OperationResourceInfo
name|ori
range|:
name|sortedOps
control|)
block|{
if|if
condition|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|ClassResourceInfo
name|subcri
init|=
name|cri
operator|.
name|findResource
argument_list|(
name|cls
argument_list|,
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|subcri
operator|!=
literal|null
operator|&&
operator|!
name|visitedResources
operator|.
name|contains
argument_list|(
name|subcri
argument_list|)
condition|)
block|{
name|handleResource
argument_list|(
name|sb
argument_list|,
name|jaxbTypes
argument_list|,
name|jaxbProxy
argument_list|,
name|clsMap
argument_list|,
name|subcri
argument_list|,
name|ori
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|visitedResources
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleDynamicSubresource
argument_list|(
name|sb
argument_list|,
name|jaxbTypes
argument_list|,
name|jaxbProxy
argument_list|,
name|clsMap
argument_list|,
name|ori
argument_list|,
name|subcri
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|handleOperation
argument_list|(
name|sb
argument_list|,
name|jaxbTypes
argument_list|,
name|jaxbProxy
argument_list|,
name|clsMap
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</resource>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleOperation
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|jaxbTypes
parameter_list|,
name|JAXBContextProxy
name|jaxbProxy
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|String
name|path
init|=
name|ori
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|useResource
init|=
name|useResource
argument_list|(
name|ori
argument_list|)
decl_stmt|;
if|if
condition|(
name|useResource
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<resource path=\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
block|}
name|handleParams
argument_list|(
name|sb
argument_list|,
name|ori
argument_list|,
name|ParameterType
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|handleParams
argument_list|(
name|sb
argument_list|,
name|ori
argument_list|,
name|ParameterType
operator|.
name|MATRIX
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<method name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<request>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFormRequest
argument_list|(
name|ori
argument_list|)
condition|)
block|{
name|handleRepresentation
argument_list|(
name|sb
argument_list|,
name|jaxbTypes
argument_list|,
name|jaxbProxy
argument_list|,
name|clsMap
argument_list|,
name|ori
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Parameter
name|p
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|handleParameter
argument_list|(
name|sb
argument_list|,
name|jaxbTypes
argument_list|,
name|jaxbProxy
argument_list|,
name|clsMap
argument_list|,
name|ori
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</request>"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isVoid
init|=
name|void
operator|.
name|class
operator|==
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
name|isVoid
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<!-- Only status code is returned -->"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<response>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|void
operator|.
name|class
operator|!=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
condition|)
block|{
name|handleRepresentation
argument_list|(
name|sb
argument_list|,
name|jaxbTypes
argument_list|,
name|jaxbProxy
argument_list|,
name|clsMap
argument_list|,
name|ori
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</response>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</method>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useResource
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</resource>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|useResource
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|String
name|path
init|=
name|ori
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
for|for
control|(
name|Parameter
name|pm
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|PATH
operator|||
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|MATRIX
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|handleDynamicSubresource
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|jaxbTypes
parameter_list|,
name|JAXBContextProxy
name|jaxbProxy
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|ClassResourceInfo
name|subcri
parameter_list|)
block|{
if|if
condition|(
name|subcri
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<!-- Recursive subresource -->"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<!-- Dynamic subresource -->"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<resource path=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ori
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<request>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|handleParameter
argument_list|(
name|sb
argument_list|,
name|jaxbTypes
argument_list|,
name|jaxbProxy
argument_list|,
name|clsMap
argument_list|,
name|ori
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</request>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</resource>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleParameter
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|jaxbTypes
parameter_list|,
name|JAXBContextProxy
name|jaxbProxy
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Parameter
name|pm
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
index|[
name|pm
operator|.
name|getIndex
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|REQUEST_BODY
condition|)
block|{
name|handleRepresentation
argument_list|(
name|sb
argument_list|,
name|jaxbTypes
argument_list|,
name|jaxbProxy
argument_list|,
name|clsMap
argument_list|,
name|ori
argument_list|,
name|cls
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|PATH
operator|||
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|MATRIX
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|HEADER
operator|||
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|QUERY
condition|)
block|{
name|writeParam
argument_list|(
name|sb
argument_list|,
name|pm
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleParams
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|ParameterType
name|type
parameter_list|)
block|{
for|for
control|(
name|Parameter
name|pm
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|type
condition|)
block|{
name|writeParam
argument_list|(
name|sb
argument_list|,
name|pm
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeParam
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Parameter
name|pm
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
index|[
name|pm
operator|.
name|getIndex
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|pm
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|doWriteParam
argument_list|(
name|sb
argument_list|,
name|pm
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|Parameter
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|pms
init|=
name|InjectionUtils
operator|.
name|getParametersFromBeanClass
argument_list|(
name|type
argument_list|,
name|pm
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Parameter
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|pms
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|doWriteParam
argument_list|(
name|sb
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doWriteParam
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Parameter
name|pm
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<param name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|pm
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|String
name|style
init|=
name|ParameterType
operator|.
name|PATH
operator|==
name|pm
operator|.
name|getType
argument_list|()
condition|?
literal|"template"
else|:
name|ParameterType
operator|.
name|FORM
operator|==
name|pm
operator|.
name|getType
argument_list|()
condition|?
literal|"query"
else|:
name|pm
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"style=\""
argument_list|)
operator|.
name|append
argument_list|(
name|style
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|getDefaultValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" default=\""
argument_list|)
operator|.
name|append
argument_list|(
name|pm
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|XmlSchemaPrimitiveUtils
operator|.
name|getSchemaRepresentation
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" type=\""
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleRepresentation
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|jaxbTypes
parameter_list|,
name|JAXBContextProxy
name|jaxbProxy
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|boolean
name|inbound
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|types
init|=
name|inbound
condition|?
name|ori
operator|.
name|getConsumeTypes
argument_list|()
else|:
name|ori
operator|.
name|getProduceTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|WILDCARD_TYPE
argument_list|)
operator|&&
operator|(
name|type
operator|==
literal|null
operator|||
name|MultivaluedMap
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|)
condition|)
block|{
name|types
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED_TYPE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MediaType
name|mt
range|:
name|types
control|)
block|{
if|if
condition|(
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|rep
init|=
name|XmlSchemaPrimitiveUtils
operator|.
name|getSchemaRepresentation
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|rep
operator|==
literal|null
condition|?
name|type
operator|.
name|getSimpleName
argument_list|()
else|:
name|rep
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<!-- Primitive type : "
operator|+
name|value
operator|+
literal|" -->"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<representation"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" mediaType=\""
argument_list|)
operator|.
name|append
argument_list|(
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|jaxbProxy
operator|!=
literal|null
operator|&&
name|mt
operator|.
name|getSubtype
argument_list|()
operator|.
name|contains
argument_list|(
literal|"xml"
argument_list|)
operator|&&
name|jaxbTypes
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|generateQName
argument_list|(
name|sb
argument_list|,
name|jaxbProxy
argument_list|,
name|clsMap
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<representation"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" mediaType=\""
argument_list|)
operator|.
name|append
argument_list|(
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
for|for
control|(
name|Parameter
name|pm
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|writeParam
argument_list|(
name|sb
argument_list|,
name|pm
argument_list|,
name|ori
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</representation>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|OperationResourceInfo
argument_list|>
name|sortOperationsByPath
parameter_list|(
name|Set
argument_list|<
name|OperationResourceInfo
argument_list|>
name|ops
parameter_list|)
block|{
name|List
argument_list|<
name|OperationResourceInfo
argument_list|>
name|opsWithSamePath
init|=
operator|new
name|LinkedList
argument_list|<
name|OperationResourceInfo
argument_list|>
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|opsWithSamePath
argument_list|,
operator|new
name|Comparator
argument_list|<
name|OperationResourceInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|OperationResourceInfo
name|op1
parameter_list|,
name|OperationResourceInfo
name|op2
parameter_list|)
block|{
name|boolean
name|sub1
init|=
name|op1
operator|.
name|getHttpMethod
argument_list|()
operator|==
literal|null
decl_stmt|;
name|boolean
name|sub2
init|=
name|op2
operator|.
name|getHttpMethod
argument_list|()
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|sub1
operator|&&
operator|!
name|sub2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|sub1
operator|&&
name|sub2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|URITemplate
name|ut1
init|=
name|op1
operator|.
name|getURITemplate
argument_list|()
decl_stmt|;
name|URITemplate
name|ut2
init|=
name|op2
operator|.
name|getURITemplate
argument_list|()
decl_stmt|;
return|return
name|ut1
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ut2
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|opsWithSamePath
return|;
block|}
specifier|public
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|getResourcesList
parameter_list|(
name|Message
name|m
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|)
block|{
return|return
name|cri
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
name|cri
argument_list|)
else|:
operator|(
operator|(
name|JAXRSServiceImpl
operator|)
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Service
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getClassResourceInfos
argument_list|()
return|;
block|}
specifier|private
name|void
name|generateQName
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|JAXBContextProxy
name|jaxbProxy
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|QName
name|typeQName
init|=
name|clsMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeQName
operator|!=
literal|null
condition|)
block|{
name|writeQName
argument_list|(
name|sb
argument_list|,
name|typeQName
argument_list|)
expr_stmt|;
return|return;
block|}
name|QName
name|qname
init|=
name|getQName
argument_list|(
name|jaxbProxy
argument_list|,
name|type
argument_list|,
name|clsMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|!=
literal|null
condition|)
block|{
name|writeQName
argument_list|(
name|sb
argument_list|,
name|qname
argument_list|)
expr_stmt|;
name|clsMap
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeQName
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" element=\""
argument_list|)
operator|.
name|append
argument_list|(
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SchemaCollection
name|getSchemaCollection
parameter_list|(
name|JAXBContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SchemaCollection
name|xmlSchemaCollection
init|=
operator|new
name|SchemaCollection
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DOMSource
argument_list|>
name|schemas
init|=
operator|new
name|HashSet
argument_list|<
name|DOMSource
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|DOMResult
name|r
range|:
name|JAXBUtils
operator|.
name|generateJaxbSchemas
argument_list|(
name|context
argument_list|,
name|CastUtils
operator|.
name|cast
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|DOMResult
operator|.
name|class
argument_list|)
argument_list|)
control|)
block|{
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|r
operator|.
name|getNode
argument_list|()
argument_list|,
name|r
operator|.
name|getSystemId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"No schema can be generated"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|boolean
name|hackAroundEmptyNamespaceIssue
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DOMSource
name|r
range|:
name|schemas
control|)
block|{
name|hackAroundEmptyNamespaceIssue
operator|=
name|addSchemaDocument
argument_list|(
name|xmlSchemaCollection
argument_list|,
operator|(
name|Document
operator|)
name|r
operator|.
name|getNode
argument_list|()
argument_list|,
name|r
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|hackAroundEmptyNamespaceIssue
argument_list|)
expr_stmt|;
block|}
return|return
name|xmlSchemaCollection
return|;
block|}
specifier|private
name|QName
name|getQName
parameter_list|(
name|JAXBContextProxy
name|jaxbProxy
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|)
block|{
name|XmlRootElement
name|root
init|=
name|type
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|QName
name|qname
init|=
name|getQNameFromParts
argument_list|(
name|root
operator|.
name|name
argument_list|()
argument_list|,
name|root
operator|.
name|namespace
argument_list|()
argument_list|,
name|clsMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|!=
literal|null
condition|)
block|{
return|return
name|qname
return|;
block|}
name|String
name|ns
init|=
name|JAXBUtils
operator|.
name|getPackageNamespace
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
condition|)
block|{
return|return
name|getQNameFromParts
argument_list|(
name|root
operator|.
name|name
argument_list|()
argument_list|,
name|ns
argument_list|,
name|clsMap
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
try|try
block|{
name|JAXBBeanInfo
name|jaxbInfo
init|=
name|JAXBUtils
operator|.
name|getBeanInfo
argument_list|(
name|jaxbProxy
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|jaxbInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|instance
init|=
name|type
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|getQNameFromParts
argument_list|(
name|jaxbInfo
operator|.
name|getElementLocalName
argument_list|(
name|instance
argument_list|)
argument_list|,
name|jaxbInfo
operator|.
name|getElementNamespaceURI
argument_list|(
name|instance
argument_list|)
argument_list|,
name|clsMap
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getPrefix
parameter_list|(
name|String
name|ns
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|null
decl_stmt|;
for|for
control|(
name|QName
name|name
range|:
name|clsMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|name
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|int
name|size
init|=
operator|new
name|HashSet
argument_list|<
name|QName
argument_list|>
argument_list|(
name|clsMap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|prefix
operator|=
literal|"prefix"
operator|+
operator|(
name|size
operator|+
literal|1
operator|)
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
specifier|private
name|JAXBContext
name|createJaxbContext
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|)
block|{
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JAXBUtils
operator|.
name|scanPackages
argument_list|(
name|classes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|JAXBContext
name|ctx
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|classes
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[
name|classes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"No JAXB context can be created"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isFormRequest
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
for|for
control|(
name|Parameter
name|p
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|FORM
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// TODO : can we reuse this block with JAXBBinding somehow ?
specifier|public
name|boolean
name|addSchemaDocument
parameter_list|(
name|SchemaCollection
name|col
parameter_list|,
name|Document
name|d
parameter_list|,
name|String
name|systemId
parameter_list|,
name|boolean
name|hackAroundEmptyNamespaceIssue
parameter_list|)
block|{
name|String
name|ns
init|=
name|d
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespace"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|ns
argument_list|)
condition|)
block|{
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|d
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|hackAroundEmptyNamespaceIssue
operator|=
literal|true
expr_stmt|;
return|return
name|hackAroundEmptyNamespaceIssue
return|;
block|}
comment|//create a copy of the dom so we
comment|//can modify it.
name|d
operator|=
name|copy
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|ns
operator|=
literal|""
expr_stmt|;
name|d
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"targetNamespace"
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hackAroundEmptyNamespaceIssue
condition|)
block|{
name|d
operator|=
name|doEmptyNamespaceHack
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|Node
name|n
init|=
name|d
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"import"
argument_list|)
condition|)
block|{
name|e
operator|.
name|removeAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
expr_stmt|;
block|}
block|}
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|d
init|)
block|{
name|col
operator|.
name|read
argument_list|(
name|d
argument_list|,
name|systemId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|hackAroundEmptyNamespaceIssue
return|;
block|}
specifier|private
name|Document
name|doEmptyNamespaceHack
parameter_list|(
name|Document
name|d
parameter_list|)
block|{
name|boolean
name|hasStuffToRemove
init|=
literal|false
decl_stmt|;
name|Element
name|el
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|d
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"import"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|el
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespace"
argument_list|)
argument_list|)
condition|)
block|{
name|hasStuffToRemove
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|el
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasStuffToRemove
condition|)
block|{
comment|//create a copy of the dom so we
comment|//can modify it.
name|d
operator|=
name|copy
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|el
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|d
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"import"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|el
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespace"
argument_list|)
argument_list|)
condition|)
block|{
name|d
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|removeChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|el
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|d
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|el
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|d
return|;
block|}
specifier|private
name|Document
name|copy
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
try|try
block|{
return|return
name|StaxUtils
operator|.
name|copy
argument_list|(
name|doc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
return|return
name|doc
return|;
block|}
specifier|private
name|QName
name|getQNameFromParts
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|clsMap
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|JAXB_DEFAULT_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|namespace
operator|==
literal|null
operator|||
name|JAXB_DEFAULT_NAMESPACE
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|||
name|namespace
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|namespace
argument_list|,
name|clsMap
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|,
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|void
name|setIgnoreMessageWriters
parameter_list|(
name|boolean
name|ignoreMessageWriters
parameter_list|)
block|{
name|this
operator|.
name|ignoreMessageWriters
operator|=
name|ignoreMessageWriters
expr_stmt|;
block|}
block|}
end_class

end_unit

