begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_comment
comment|/**  * Utility Exception class which makes it easier to get to the status,  * headers and error message if any  */
end_comment

begin_class
specifier|public
class|class
name|ServerWebApplicationException
extends|extends
name|WebApplicationException
block|{
specifier|private
name|String
name|errorMessage
decl_stmt|;
specifier|public
name|ServerWebApplicationException
parameter_list|()
block|{              }
specifier|public
name|ServerWebApplicationException
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ServerWebApplicationException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|getResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
return|;
block|}
specifier|public
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaders
parameter_list|()
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metadata
init|=
name|getResponse
argument_list|()
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|metadata
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|metadata
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|Object
name|strObject
range|:
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
control|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|strObject
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|headers
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
if|if
condition|(
name|errorMessage
operator|==
literal|null
condition|)
block|{
name|errorMessage
operator|=
name|readErrorMessage
argument_list|()
expr_stmt|;
block|}
return|return
name|errorMessage
return|;
block|}
specifier|private
name|String
name|readErrorMessage
parameter_list|()
block|{
name|Object
name|entity
init|=
name|getResponse
argument_list|()
operator|.
name|getEntity
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|entity
operator|==
literal|null
condition|?
literal|""
else|:
name|entity
operator|instanceof
name|InputStream
condition|?
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
operator|(
name|InputStream
operator|)
name|entity
argument_list|)
else|:
name|entity
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|lineSep
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Status : "
operator|+
name|getStatus
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|lineSep
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Headers : "
argument_list|)
operator|.
name|append
argument_list|(
name|lineSep
argument_list|)
expr_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|getHeaders
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|header
range|:
name|headers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|header
operator|+
literal|" :"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|headers
operator|.
name|get
argument_list|(
name|header
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|lineSep
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Error message : "
argument_list|)
operator|.
name|append
argument_list|(
name|lineSep
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|message
argument_list|)
operator|.
name|append
argument_list|(
name|lineSep
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

