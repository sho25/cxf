begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ContextResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAnyElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlJavaTypeAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBBeanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBContextProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|schemas
operator|.
name|SchemaHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|DelegatingXMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|DepthXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxStreamFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJAXBProvider
extends|extends
name|AbstractConfigurableProvider
implements|implements
name|MessageBodyReader
argument_list|<
name|Object
argument_list|>
implements|,
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|AbstractJAXBProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractJAXBProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXB_DEFAULT_NAMESPACE
init|=
literal|"##default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXB_DEFAULT_NAME
init|=
literal|"##default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET_PARAMETER
init|=
literal|"charset"
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|JAXBContext
argument_list|>
name|packageContexts
init|=
operator|new
name|WeakHashMap
argument_list|<
name|String
argument_list|,
name|JAXBContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|JAXBContext
argument_list|>
name|classContexts
init|=
operator|new
name|WeakHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|JAXBContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|collectionContextClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|JAXBContext
name|collectionContext
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jaxbElementClassMap
decl_stmt|;
specifier|protected
name|boolean
name|unmarshalAsJaxbElement
decl_stmt|;
specifier|protected
name|boolean
name|marshalAsJaxbElement
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|outElementsMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|outAppendMap
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|outDropElements
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|inDropElements
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inElementsMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inAppendMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inAppendAttributesMap
decl_stmt|;
specifier|private
name|boolean
name|attributesToElements
decl_stmt|;
specifier|private
name|MessageContext
name|mc
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|private
name|String
name|collectionWrapperName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionWrapperMap
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|jaxbElementClassNames
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cProperties
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|uProperties
decl_stmt|;
specifier|public
name|void
name|setContextProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|contextProperties
parameter_list|)
block|{
name|cProperties
operator|=
name|contextProperties
expr_stmt|;
block|}
specifier|public
name|void
name|setUnmarshallerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|unmarshalProperties
parameter_list|)
block|{
name|uProperties
operator|=
name|unmarshalProperties
expr_stmt|;
block|}
specifier|public
name|void
name|setUnmarshallAsJaxbElement
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|unmarshalAsJaxbElement
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|setMarshallAsJaxbElement
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|marshalAsJaxbElement
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|setJaxbElementClassNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|jaxbElementClassNames
operator|=
name|names
expr_stmt|;
block|}
specifier|public
name|void
name|setJaxbElementClassMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|jaxbElementClassMap
operator|=
name|map
expr_stmt|;
block|}
specifier|protected
name|void
name|checkContentLength
parameter_list|()
block|{
if|if
condition|(
name|mc
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|mc
operator|.
name|getHttpHeaders
argument_list|()
operator|.
name|getRequestHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
literal|"0"
operator|.
name|equals
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|message
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"EMPTY_BODY"
argument_list|,
name|BUNDLE
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|400
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Object
name|convertToJaxbElementIfNeeded
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|genericType
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jaxbElementClassNames
operator|!=
literal|null
operator|&&
name|jaxbElementClassNames
operator|.
name|contains
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|jaxbElementClassMap
operator|!=
literal|null
operator|&&
name|jaxbElementClassMap
operator|.
name|containsKey
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|jaxbElementClassMap
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|convertStringToQName
argument_list|(
name|jaxbElementClassMap
operator|.
name|get
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|getJaxbQName
argument_list|(
name|cls
argument_list|,
name|genericType
argument_list|,
name|obj
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|&&
name|marshalAsJaxbElement
condition|)
block|{
name|name
operator|=
name|convertStringToQName
argument_list|(
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JAXBElement
argument_list|(
name|name
argument_list|,
name|cls
argument_list|,
literal|null
argument_list|,
name|obj
argument_list|)
return|;
block|}
return|return
name|obj
return|;
block|}
specifier|public
name|void
name|setCollectionWrapperName
parameter_list|(
name|String
name|wName
parameter_list|)
block|{
name|collectionWrapperName
operator|=
name|wName
expr_stmt|;
block|}
specifier|public
name|void
name|setCollectionWrapperMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|collectionWrapperMap
operator|=
name|map
expr_stmt|;
block|}
specifier|protected
name|void
name|setContext
parameter_list|(
name|MessageContext
name|context
parameter_list|)
block|{
name|mc
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
if|if
condition|(
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|unmarshalAsJaxbElement
operator|||
name|isSupported
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|)
return|;
block|}
specifier|protected
name|JAXBContext
name|getCollectionContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
throws|throws
name|JAXBException
block|{
synchronized|synchronized
init|(
name|collectionContextClasses
init|)
block|{
if|if
condition|(
operator|!
name|collectionContextClasses
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|collectionContextClasses
operator|.
name|add
argument_list|(
name|CollectionWrapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|collectionContextClasses
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|collectionContext
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|collectionContextClasses
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|,
name|cProperties
argument_list|)
expr_stmt|;
return|return
name|collectionContext
return|;
block|}
block|}
specifier|protected
name|QName
name|getCollectionWrapperQName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Object
name|object
parameter_list|,
name|boolean
name|pluralName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|getCollectionWrapperName
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|getJaxbQName
argument_list|(
name|cls
argument_list|,
name|type
argument_list|,
name|object
argument_list|,
name|pluralName
argument_list|)
return|;
block|}
return|return
name|convertStringToQName
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|QName
name|convertStringToQName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|ind1
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind1
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|name
argument_list|)
return|;
block|}
name|int
name|ind2
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind2
operator|<=
name|ind1
operator|+
literal|1
operator|||
name|ind2
operator|>=
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|ns
init|=
name|name
operator|.
name|substring
argument_list|(
name|ind1
operator|+
literal|1
argument_list|,
name|ind2
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|name
operator|.
name|substring
argument_list|(
name|ind2
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|localName
argument_list|)
return|;
block|}
specifier|private
name|String
name|getCollectionWrapperName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|collectionWrapperName
operator|!=
literal|null
condition|)
block|{
return|return
name|collectionWrapperName
return|;
block|}
if|if
condition|(
name|collectionWrapperMap
operator|!=
literal|null
condition|)
block|{
return|return
name|collectionWrapperMap
operator|.
name|get
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|QName
name|getJaxbQName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Object
name|object
parameter_list|,
name|boolean
name|pluralName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|cls
operator|==
name|JAXBElement
operator|.
name|class
condition|)
block|{
return|return
name|object
operator|!=
literal|null
condition|?
operator|(
operator|(
name|JAXBElement
operator|)
name|object
operator|)
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
name|XmlRootElement
name|root
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|QName
name|qname
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|String
name|namespace
init|=
name|getNamespace
argument_list|(
name|root
operator|.
name|namespace
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|String
name|packageNs
init|=
name|JAXBUtils
operator|.
name|getPackageNamespace
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|packageNs
operator|!=
literal|null
condition|)
block|{
name|namespace
operator|=
name|getNamespace
argument_list|(
name|packageNs
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|name
init|=
name|getLocalName
argument_list|(
name|root
operator|.
name|name
argument_list|()
argument_list|,
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|pluralName
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|)
return|;
block|}
else|else
block|{
name|JAXBContext
name|context
init|=
name|getJAXBContext
argument_list|(
name|cls
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|JAXBContextProxy
name|proxy
init|=
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|context
argument_list|,
name|JAXBContextProxy
operator|.
name|class
argument_list|)
decl_stmt|;
name|JAXBBeanInfo
name|info
init|=
name|JAXBUtils
operator|.
name|getBeanInfo
argument_list|(
name|proxy
argument_list|,
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Object
name|instance
init|=
name|object
operator|==
literal|null
condition|?
name|cls
operator|.
name|newInstance
argument_list|()
else|:
name|object
decl_stmt|;
name|String
name|name
init|=
name|getLocalName
argument_list|(
name|info
operator|.
name|getElementLocalName
argument_list|(
name|instance
argument_list|)
argument_list|,
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|pluralName
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
name|getNamespace
argument_list|(
name|info
operator|.
name|getElementNamespaceURI
argument_list|(
name|instance
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
return|return
name|qname
return|;
block|}
specifier|private
name|String
name|getLocalName
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|clsName
parameter_list|,
name|boolean
name|pluralName
parameter_list|)
block|{
if|if
condition|(
name|JAXB_DEFAULT_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|clsName
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pluralName
condition|)
block|{
name|name
operator|+=
literal|'s'
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|String
name|getNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|JAXB_DEFAULT_NAMESPACE
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|namespace
return|;
block|}
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|marshalAsJaxbElement
operator|||
name|isSupported
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSchemaLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|)
block|{
name|schema
operator|=
name|SchemaHandler
operator|.
name|createSchema
argument_list|(
name|locations
argument_list|,
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|Schema
name|s
parameter_list|)
block|{
name|schema
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|long
name|getSize
parameter_list|(
name|Object
name|o
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|MessageContext
name|getContext
parameter_list|()
block|{
return|return
name|mc
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|JAXBContext
name|getJAXBContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|)
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|mc
operator|!=
literal|null
condition|)
block|{
name|ContextResolver
argument_list|<
name|JAXBContext
argument_list|>
name|resolver
init|=
name|mc
operator|.
name|getResolver
argument_list|(
name|ContextResolver
operator|.
name|class
argument_list|,
name|JAXBContext
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|customContext
init|=
name|resolver
operator|.
name|getContext
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|customContext
operator|!=
literal|null
condition|)
block|{
return|return
name|customContext
return|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|classContexts
init|)
block|{
name|JAXBContext
name|context
init|=
name|classContexts
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
return|return
name|context
return|;
block|}
block|}
name|JAXBContext
name|context
init|=
name|getPackageContext
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|&&
name|type
operator|!=
name|genericType
condition|)
block|{
name|context
operator|=
name|getPackageContext
argument_list|(
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|context
operator|!=
literal|null
condition|?
name|context
else|:
name|getClassContext
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|JAXBContext
name|getClassContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
throws|throws
name|JAXBException
block|{
synchronized|synchronized
init|(
name|classContexts
init|)
block|{
name|JAXBContext
name|context
init|=
name|classContexts
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
operator|new
name|Class
index|[]
block|{
name|type
block|}
argument_list|,
name|cProperties
argument_list|)
expr_stmt|;
name|classContexts
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
block|}
specifier|public
name|JAXBContext
name|getPackageContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|==
name|JAXBElement
operator|.
name|class
condition|)
block|{
return|return
literal|null
return|;
block|}
synchronized|synchronized
init|(
name|packageContexts
init|)
block|{
name|String
name|packageName
init|=
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|JAXBContext
name|context
init|=
name|packageContexts
operator|.
name|get
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|packageName
argument_list|,
name|type
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|cProperties
argument_list|)
expr_stmt|;
name|packageContexts
operator|.
name|put
argument_list|(
name|packageName
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Error creating a JAXBContext using ObjectFactory : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|context
return|;
block|}
block|}
specifier|protected
name|boolean
name|isSupported
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
if|if
condition|(
name|jaxbElementClassMap
operator|!=
literal|null
operator|&&
name|jaxbElementClassMap
operator|.
name|containsKey
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|type
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|||
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|objectFactoryForClass
argument_list|(
name|type
argument_list|)
operator|||
operator|(
name|type
operator|!=
name|genericType
operator|&&
name|objectFactoryForType
argument_list|(
name|genericType
argument_list|)
operator|)
operator|||
name|adapterAvailable
argument_list|(
name|type
argument_list|,
name|anns
argument_list|)
operator|||
name|type
operator|.
name|getResource
argument_list|(
literal|"jaxb.index"
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|protected
name|boolean
name|adapterAvailable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
return|return
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|||
name|type
operator|.
name|getAnnotation
argument_list|(
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|protected
name|boolean
name|objectFactoryForClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
return|return
name|type
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|type
argument_list|)
operator|+
literal|".ObjectFactory"
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|objectFactoryForType
parameter_list|(
name|Type
name|genericType
parameter_list|)
block|{
return|return
name|objectFactoryForClass
argument_list|(
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|Unmarshaller
name|createUnmarshaller
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|genericType
parameter_list|)
throws|throws
name|JAXBException
block|{
return|return
name|createUnmarshaller
argument_list|(
name|cls
argument_list|,
name|genericType
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|Unmarshaller
name|createUnmarshaller
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|boolean
name|isCollection
parameter_list|)
throws|throws
name|JAXBException
block|{
name|JAXBContext
name|context
init|=
name|isCollection
condition|?
name|getCollectionContext
argument_list|(
name|cls
argument_list|)
else|:
name|getJAXBContext
argument_list|(
name|cls
argument_list|,
name|genericType
argument_list|)
decl_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|unmarshaller
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|uProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|unmarshaller
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|unmarshaller
return|;
block|}
specifier|protected
name|Marshaller
name|createMarshaller
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|String
name|enc
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|objClazz
init|=
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|?
operator|(
operator|(
name|JAXBElement
operator|)
name|obj
operator|)
operator|.
name|getDeclaredType
argument_list|()
else|:
name|cls
decl_stmt|;
name|JAXBContext
name|context
init|=
name|getJAXBContext
argument_list|(
name|objClazz
argument_list|,
name|genericType
argument_list|)
decl_stmt|;
name|Marshaller
name|marshaller
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
if|if
condition|(
name|enc
operator|!=
literal|null
condition|)
block|{
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_ENCODING
argument_list|,
name|enc
argument_list|)
expr_stmt|;
block|}
return|return
name|marshaller
return|;
block|}
specifier|protected
name|String
name|getEncoding
parameter_list|(
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
block|{
name|String
name|enc
init|=
name|mt
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|CHARSET_PARAMETER
argument_list|)
decl_stmt|;
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
literal|"0"
operator|.
name|getBytes
argument_list|(
name|enc
argument_list|)
expr_stmt|;
return|return
name|enc
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"UNSUPPORTED_ENCODING"
argument_list|,
name|BUNDLE
argument_list|,
name|enc
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|headers
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|JAXRSUtils
operator|.
name|removeMediaTypeParameter
argument_list|(
name|mt
argument_list|,
name|CHARSET_PARAMETER
argument_list|)
operator|+
literal|';'
operator|+
name|CHARSET_PARAMETER
operator|+
literal|"=UTF-8"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getActualType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|theType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|theType
operator|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|theType
operator|=
name|type
expr_stmt|;
block|}
name|XmlJavaTypeAdapter
name|adapter
init|=
name|getAdapter
argument_list|(
name|theType
argument_list|,
name|anns
argument_list|)
decl_stmt|;
if|if
condition|(
name|adapter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|adapter
operator|.
name|type
argument_list|()
operator|!=
name|XmlJavaTypeAdapter
operator|.
name|DEFAULT
operator|.
name|class
condition|)
block|{
name|theType
operator|=
name|adapter
operator|.
name|type
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Type
index|[]
name|types
init|=
name|InjectionUtils
operator|.
name|getActualTypes
argument_list|(
name|adapter
operator|.
name|value
argument_list|()
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|types
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|theType
operator|=
operator|(
name|Class
operator|)
name|types
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
block|}
return|return
name|theType
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Object
name|checkAdapter
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|boolean
name|marshal
parameter_list|)
block|{
name|XmlJavaTypeAdapter
name|typeAdapter
init|=
name|getAdapter
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|,
name|anns
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeAdapter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|XmlAdapter
name|xmlAdapter
init|=
name|typeAdapter
operator|.
name|value
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|marshal
condition|)
block|{
return|return
name|xmlAdapter
operator|.
name|marshal
argument_list|(
name|obj
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|xmlAdapter
operator|.
name|unmarshal
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Problem using the XmlJavaTypeAdapter"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|obj
return|;
block|}
specifier|protected
name|XmlJavaTypeAdapter
name|getAdapter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
name|XmlJavaTypeAdapter
name|typeAdapter
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeAdapter
operator|==
literal|null
condition|)
block|{
name|typeAdapter
operator|=
name|type
operator|.
name|getAnnotation
argument_list|(
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|typeAdapter
return|;
block|}
specifier|protected
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|static
name|void
name|clearContexts
parameter_list|()
block|{
name|classContexts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|packageContexts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|handleJAXBException
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getLinkedException
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getLinkedException
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getLinkedException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
expr_stmt|;
block|}
name|Throwable
name|t
init|=
name|e
operator|.
name|getLinkedException
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getLinkedException
argument_list|()
else|:
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getCause
argument_list|()
else|:
name|e
decl_stmt|;
name|String
name|message
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"JAXB_EXCEPTION"
argument_list|,
name|BUNDLE
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Response
name|r
init|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|entity
argument_list|(
name|message
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|t
argument_list|,
name|r
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setOutTransformElements
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|outElements
parameter_list|)
block|{
name|this
operator|.
name|outElementsMap
operator|=
name|outElements
expr_stmt|;
block|}
specifier|public
name|void
name|setInAppendElements
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inElements
parameter_list|)
block|{
name|this
operator|.
name|inAppendMap
operator|=
name|inElements
expr_stmt|;
block|}
specifier|public
name|void
name|setInAppendAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inElements
parameter_list|)
block|{
name|this
operator|.
name|inAppendAttributesMap
operator|=
name|inElements
expr_stmt|;
block|}
specifier|public
name|void
name|setInTransformElements
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inElements
parameter_list|)
block|{
name|this
operator|.
name|inElementsMap
operator|=
name|inElements
expr_stmt|;
block|}
specifier|public
name|void
name|setOutAppendElements
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|outAppendMap
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|void
name|setOutDropElements
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dropElementsSet
parameter_list|)
block|{
name|this
operator|.
name|outDropElements
operator|=
name|dropElementsSet
expr_stmt|;
block|}
specifier|public
name|void
name|setInDropElements
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dropElementsSet
parameter_list|)
block|{
name|this
operator|.
name|inDropElements
operator|=
name|dropElementsSet
expr_stmt|;
block|}
specifier|protected
specifier|static
name|Set
argument_list|<
name|QName
argument_list|>
name|convertToSetOfQNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dropEls
parameter_list|)
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|dropElements
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|dropEls
operator|!=
literal|null
condition|)
block|{
name|dropElements
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|QName
argument_list|>
argument_list|(
name|dropEls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|val
range|:
name|dropEls
control|)
block|{
name|dropElements
operator|.
name|add
argument_list|(
name|convertStringToQName
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dropElements
return|;
block|}
specifier|protected
name|XMLStreamReader
name|createTransformReaderIfNeeded
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|InputStream
name|is
parameter_list|)
block|{
if|if
condition|(
name|inDropElements
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|dropElements
init|=
name|convertToSetOfQNames
argument_list|(
name|inDropElements
argument_list|)
decl_stmt|;
name|reader
operator|=
name|StaxUtils
operator|.
name|createFilteredReader
argument_list|(
name|createNewReaderIfNeeded
argument_list|(
name|reader
argument_list|,
name|is
argument_list|)
argument_list|,
operator|new
name|StaxStreamFilter
argument_list|(
name|dropElements
operator|.
name|toArray
argument_list|(
operator|new
name|QName
index|[]
block|{}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inElementsMap
operator|!=
literal|null
operator|||
name|inAppendMap
operator|!=
literal|null
operator|||
name|inAppendAttributesMap
operator|!=
literal|null
condition|)
block|{
name|reader
operator|=
operator|new
name|InTransformReader
argument_list|(
name|createNewReaderIfNeeded
argument_list|(
name|reader
argument_list|,
name|is
argument_list|)
argument_list|,
name|inElementsMap
argument_list|,
name|inAppendMap
argument_list|,
name|inAppendAttributesMap
argument_list|)
expr_stmt|;
block|}
return|return
name|reader
return|;
block|}
specifier|protected
name|XMLStreamWriter
name|createTransformWriterIfNeeded
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|OutputStream
name|os
parameter_list|)
block|{
if|if
condition|(
name|outElementsMap
operator|!=
literal|null
operator|||
name|outDropElements
operator|!=
literal|null
operator|||
name|outAppendMap
operator|!=
literal|null
operator|||
name|attributesToElements
condition|)
block|{
name|writer
operator|=
name|createNewWriterIfNeeded
argument_list|(
name|writer
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|OutTransformWriter
argument_list|(
name|writer
argument_list|,
name|outElementsMap
argument_list|,
name|outAppendMap
argument_list|,
name|outDropElements
argument_list|,
name|attributesToElements
argument_list|)
expr_stmt|;
block|}
return|return
name|writer
return|;
block|}
specifier|protected
name|XMLStreamReader
name|createNewReaderIfNeeded
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|InputStream
name|is
parameter_list|)
block|{
return|return
name|reader
operator|==
literal|null
condition|?
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
else|:
name|reader
return|;
block|}
specifier|protected
name|XMLStreamWriter
name|createNewWriterIfNeeded
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|OutputStream
name|os
parameter_list|)
block|{
return|return
name|writer
operator|==
literal|null
condition|?
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|)
else|:
name|writer
return|;
block|}
specifier|protected
specifier|static
name|void
name|convertToMapOfQNames
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|Map
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
name|elementsMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
parameter_list|)
block|{
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|QName
name|lname
init|=
name|convertStringToQName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|rname
init|=
name|convertStringToQName
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|elementsMap
operator|.
name|put
argument_list|(
name|lname
argument_list|,
name|rname
argument_list|)
expr_stmt|;
if|if
condition|(
name|nsMap
operator|!=
literal|null
condition|)
block|{
name|nsMap
operator|.
name|put
argument_list|(
name|lname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|rname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|setAttributesToElements
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|attributesToElements
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|XmlRootElement
specifier|protected
specifier|static
class|class
name|CollectionWrapper
block|{
annotation|@
name|XmlAnyElement
argument_list|(
name|lax
operator|=
literal|true
argument_list|)
specifier|private
name|List
argument_list|<
name|?
argument_list|>
name|l
decl_stmt|;
specifier|public
name|void
name|setList
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
name|l
operator|=
name|list
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|getList
parameter_list|()
block|{
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Object
name|getCollectionOrArray
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|origType
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|theList
init|=
name|getList
argument_list|()
decl_stmt|;
if|if
condition|(
name|theList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Object
name|first
init|=
name|theList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|instanceof
name|JAXBElement
operator|&&
operator|!
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|theList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|theList
control|)
block|{
name|newList
operator|.
name|add
argument_list|(
operator|(
operator|(
name|JAXBElement
operator|)
name|o
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|theList
operator|=
name|newList
expr_stmt|;
block|}
block|}
if|if
condition|(
name|origType
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|T
index|[]
name|values
init|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
name|theList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|theList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
operator|(
name|T
operator|)
name|theList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
elseif|else
if|if
condition|(
name|origType
operator|==
name|Set
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|(
name|theList
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|theList
return|;
block|}
block|}
block|}
specifier|protected
specifier|static
class|class
name|OutTransformWriter
extends|extends
name|DelegatingXMLStreamWriter
block|{
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
name|elementsMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
name|appendMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|writtenUris
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|QName
argument_list|>
name|dropElements
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|droppingIndexes
init|=
operator|new
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|QName
argument_list|>
name|appendedElements
init|=
operator|new
name|LinkedList
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|appendedIndexes
init|=
operator|new
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|currentDepth
decl_stmt|;
specifier|private
name|boolean
name|attributesToElements
decl_stmt|;
specifier|public
name|OutTransformWriter
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|outMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|append
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dropEls
parameter_list|,
name|boolean
name|attributesToElements
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|convertToMapOfQNames
argument_list|(
name|outMap
argument_list|,
name|elementsMap
argument_list|,
name|nsMap
argument_list|)
expr_stmt|;
name|convertToMapOfQNames
argument_list|(
name|append
argument_list|,
name|appendMap
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dropElements
operator|=
name|convertToSetOfQNames
argument_list|(
name|dropEls
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributesToElements
operator|=
name|attributesToElements
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|matchesDropped
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|writtenUris
operator|.
name|contains
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|value
init|=
name|nsMap
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeStartElement
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|currentDepth
operator|++
expr_stmt|;
name|QName
name|currentQName
init|=
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|local
argument_list|)
decl_stmt|;
name|QName
name|appendQName
init|=
name|appendMap
operator|.
name|get
argument_list|(
name|currentQName
argument_list|)
decl_stmt|;
if|if
condition|(
name|appendQName
operator|!=
literal|null
operator|&&
operator|!
name|appendedElements
operator|.
name|contains
argument_list|(
name|appendQName
argument_list|)
condition|)
block|{
name|currentDepth
operator|++
expr_stmt|;
name|String
name|theprefix
init|=
name|uri
operator|.
name|equals
argument_list|(
name|appendQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|?
name|prefix
else|:
literal|""
decl_stmt|;
name|write
argument_list|(
operator|new
name|QName
argument_list|(
name|appendQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|appendQName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|theprefix
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|theprefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|super
operator|.
name|writeNamespace
argument_list|(
name|theprefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|writtenUris
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|appendedElements
operator|.
name|add
argument_list|(
name|appendQName
argument_list|)
expr_stmt|;
name|appendedIndexes
operator|.
name|add
argument_list|(
name|currentDepth
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dropElements
operator|.
name|contains
argument_list|(
name|currentQName
argument_list|)
condition|)
block|{
name|droppingIndexes
operator|.
name|add
argument_list|(
name|currentDepth
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|write
argument_list|(
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|local
argument_list|,
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeEndElement
parameter_list|()
throws|throws
name|XMLStreamException
block|{
operator|--
name|currentDepth
expr_stmt|;
if|if
condition|(
name|indexRemoved
argument_list|(
name|droppingIndexes
argument_list|)
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexRemoved
argument_list|(
name|appendedIndexes
argument_list|)
condition|)
block|{
name|super
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeCharacters
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|matchesDropped
argument_list|()
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|writeCharacters
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|write
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|QName
name|name
init|=
name|elementsMap
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|qname
expr_stmt|;
block|}
name|boolean
name|writeNs
init|=
literal|false
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|qname
operator|.
name|getPrefix
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|prefix
operator|=
name|findUniquePrefix
argument_list|()
expr_stmt|;
name|writeNs
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|qname
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeNs
condition|)
block|{
name|this
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|findUniquePrefix
parameter_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|prefixes
operator|.
name|contains
argument_list|(
literal|"ps"
operator|+
operator|++
name|i
argument_list|)
condition|)
block|{
return|return
literal|"ps"
operator|+
name|i
return|;
block|}
block|}
block|}
specifier|private
name|boolean
name|matchesDropped
parameter_list|()
block|{
name|int
name|size
init|=
name|droppingIndexes
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|droppingIndexes
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
operator|==
name|currentDepth
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|indexRemoved
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
parameter_list|)
block|{
name|int
name|size
init|=
name|indexes
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|indexes
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
operator|==
name|currentDepth
condition|)
block|{
name|indexes
operator|.
name|remove
argument_list|(
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
return|return
operator|new
name|DelegatingNamespaceContext
argument_list|(
name|super
operator|.
name|getNamespaceContext
argument_list|()
argument_list|,
name|nsMap
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeAttribute
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
operator|!
name|attributesToElements
condition|)
block|{
name|super
operator|.
name|writeAttribute
argument_list|(
name|uri
argument_list|,
name|local
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeAttributeAsElement
argument_list|(
name|uri
argument_list|,
name|local
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeAttribute
parameter_list|(
name|String
name|local
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
operator|!
name|attributesToElements
condition|)
block|{
name|super
operator|.
name|writeAttribute
argument_list|(
name|local
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeAttributeAsElement
argument_list|(
literal|""
argument_list|,
name|local
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeAttributeAsElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|this
operator|.
name|writeStartElement
argument_list|(
name|uri
argument_list|,
name|local
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeCharacters
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|AttributeValue
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|value
decl_stmt|;
specifier|public
name|AttributeValue
parameter_list|(
name|String
name|n
parameter_list|,
name|String
name|v
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|n
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|v
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|InTransformReader
extends|extends
name|DepthXMLStreamReader
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INTERN_NAMES
init|=
literal|"org.codehaus.stax2.internNames"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INTERN_NS
init|=
literal|"org.codehaus.stax2.internNsUris"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
name|inElementsMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
name|inAppendMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|MultivaluedMap
argument_list|<
name|QName
argument_list|,
name|AttributeValue
argument_list|>
name|inAttributes
decl_stmt|;
specifier|private
name|QName
name|currentQName
decl_stmt|;
specifier|private
name|QName
name|previousQName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AttributeValue
argument_list|>
name|currentAttributes
decl_stmt|;
specifier|private
name|int
name|previousDepth
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|InTransformReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|appendMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|appendAttrMap
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|convertToMapOfQNames
argument_list|(
name|inMap
argument_list|,
name|inElementsMap
argument_list|,
name|nsMap
argument_list|)
expr_stmt|;
name|convertToMapOfQNames
argument_list|(
name|appendMap
argument_list|,
name|inAppendMap
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|convertToMapOfAttributes
argument_list|(
name|appendAttrMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|convertToMapOfAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|inAttributes
operator|=
operator|new
name|MetadataMap
argument_list|<
name|QName
argument_list|,
name|AttributeValue
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|QName
name|lname
init|=
name|convertStringToQName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|inAttributes
operator|.
name|add
argument_list|(
name|lname
argument_list|,
operator|new
name|AttributeValue
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getAttributeCount
parameter_list|()
block|{
return|return
name|currentAttributes
operator|==
literal|null
condition|?
name|super
operator|.
name|getAttributeCount
argument_list|()
else|:
name|currentAttributes
operator|.
name|size
argument_list|()
operator|+
name|super
operator|.
name|getAttributeCount
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeLocalName
parameter_list|(
name|int
name|ind
parameter_list|)
block|{
if|if
condition|(
name|currentAttributes
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getAttributeLocalName
argument_list|(
name|ind
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|count
init|=
name|super
operator|.
name|getAttributeCount
argument_list|()
decl_stmt|;
return|return
name|ind
operator|<
name|count
condition|?
name|super
operator|.
name|getAttributeLocalName
argument_list|(
name|ind
argument_list|)
else|:
name|currentAttributes
operator|.
name|get
argument_list|(
name|ind
operator|-
name|count
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|getAttributeNamespace
parameter_list|(
name|int
name|ind
parameter_list|)
block|{
return|return
name|currentAttributes
operator|==
literal|null
condition|?
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|ind
argument_list|)
else|:
literal|""
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|int
name|ind
parameter_list|)
block|{
if|if
condition|(
name|currentAttributes
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getAttributeValue
argument_list|(
name|ind
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|count
init|=
name|super
operator|.
name|getAttributeCount
argument_list|()
decl_stmt|;
return|return
name|ind
operator|<
name|count
condition|?
name|super
operator|.
name|getAttributeValue
argument_list|(
name|ind
argument_list|)
else|:
name|currentAttributes
operator|.
name|get
argument_list|(
name|ind
operator|-
name|count
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|currentAttributes
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|currentQName
operator|!=
literal|null
condition|)
block|{
return|return
name|XMLStreamConstants
operator|.
name|START_ELEMENT
return|;
block|}
elseif|else
if|if
condition|(
name|previousDepth
operator|!=
operator|-
literal|1
operator|&&
name|previousDepth
operator|==
name|getDepth
argument_list|()
operator|+
literal|1
condition|)
block|{
name|previousDepth
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|XMLStreamConstants
operator|.
name|END_ELEMENT
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
block|}
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|INTERN_NAMES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|INTERN_NS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
return|return
name|super
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
name|QName
name|cQName
init|=
name|getCurrentName
argument_list|()
decl_stmt|;
if|if
condition|(
name|cQName
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|cQName
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|resetCurrentQName
argument_list|()
expr_stmt|;
return|return
name|name
return|;
block|}
return|return
name|super
operator|.
name|getLocalName
argument_list|()
return|;
block|}
specifier|private
name|QName
name|getCurrentName
parameter_list|()
block|{
return|return
name|currentQName
operator|!=
literal|null
condition|?
name|currentQName
else|:
name|previousQName
operator|!=
literal|null
condition|?
name|previousQName
else|:
literal|null
return|;
block|}
specifier|private
name|void
name|resetCurrentQName
parameter_list|()
block|{
name|currentQName
operator|=
name|previousQName
expr_stmt|;
name|previousQName
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|NamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
return|return
operator|new
name|DelegatingNamespaceContext
argument_list|(
name|super
operator|.
name|getNamespaceContext
argument_list|()
argument_list|,
name|nsMap
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
name|QName
name|theName
init|=
name|readCurrentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|inAttributes
operator|!=
literal|null
condition|)
block|{
name|currentAttributes
operator|=
name|inAttributes
operator|.
name|remove
argument_list|(
name|theName
argument_list|)
expr_stmt|;
block|}
name|QName
name|appendQName
init|=
name|inAppendMap
operator|.
name|remove
argument_list|(
name|theName
argument_list|)
decl_stmt|;
if|if
condition|(
name|appendQName
operator|!=
literal|null
condition|)
block|{
name|previousDepth
operator|=
name|getDepth
argument_list|()
expr_stmt|;
name|previousQName
operator|=
name|theName
expr_stmt|;
name|currentQName
operator|=
name|appendQName
expr_stmt|;
return|return
name|currentQName
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
name|QName
name|expected
init|=
name|inElementsMap
operator|.
name|get
argument_list|(
name|theName
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
return|return
name|theName
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
name|currentQName
operator|=
name|expected
expr_stmt|;
return|return
name|currentQName
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
specifier|private
name|QName
name|readCurrentElement
parameter_list|()
block|{
if|if
condition|(
name|currentQName
operator|!=
literal|null
condition|)
block|{
return|return
name|currentQName
return|;
block|}
name|String
name|ns
init|=
name|super
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|super
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DelegatingNamespaceContext
implements|implements
name|NamespaceContext
block|{
specifier|private
name|NamespaceContext
name|nc
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
decl_stmt|;
specifier|public
name|DelegatingNamespaceContext
parameter_list|(
name|NamespaceContext
name|nc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
parameter_list|)
block|{
name|this
operator|.
name|nc
operator|=
name|nc
expr_stmt|;
name|this
operator|.
name|nsMap
operator|=
name|nsMap
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|nc
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
name|String
name|value
init|=
name|nsMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|value
operator|!=
literal|null
condition|?
name|nc
operator|.
name|getPrefix
argument_list|(
name|value
argument_list|)
else|:
name|nc
operator|.
name|getPrefix
argument_list|(
name|ns
argument_list|)
return|;
block|}
specifier|public
name|Iterator
name|getPrefixes
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
return|return
name|nc
operator|.
name|getPrefixes
argument_list|(
name|ns
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

