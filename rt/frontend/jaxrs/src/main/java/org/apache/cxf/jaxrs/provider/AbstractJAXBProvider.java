begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ContextResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlJavaTypeAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJAXBProvider
implements|implements
name|MessageBodyReader
argument_list|<
name|Object
argument_list|>
implements|,
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractJAXBProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET_PARAMETER
init|=
literal|"charset"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASSPATH_PREFIX
init|=
literal|"classpath:"
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|JAXBContext
argument_list|>
name|packageContexts
init|=
operator|new
name|WeakHashMap
argument_list|<
name|String
argument_list|,
name|JAXBContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|JAXBContext
argument_list|>
name|classContexts
init|=
operator|new
name|WeakHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|JAXBContext
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Context
specifier|protected
name|ContextResolver
argument_list|<
name|JAXBContext
argument_list|>
name|resolver
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
return|return
name|isSupported
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|)
operator|||
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|)
block|{
return|return
name|isSupported
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSchemas
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|)
block|{
name|schema
operator|=
name|createSchema
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getSize
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|JAXBContext
name|getJAXBContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|)
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|context
init|=
name|resolver
operator|.
name|getContext
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// it's up to the resolver to keep its contexts in a map
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
return|return
name|context
return|;
block|}
block|}
synchronized|synchronized
init|(
name|classContexts
init|)
block|{
name|JAXBContext
name|context
init|=
name|classContexts
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
return|return
name|context
return|;
block|}
block|}
name|JAXBContext
name|context
init|=
name|getPackageContext
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|&&
name|type
operator|!=
name|genericType
condition|)
block|{
name|context
operator|=
name|getPackageContext
argument_list|(
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|context
operator|!=
literal|null
condition|?
name|context
else|:
name|getClassContext
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|private
name|JAXBContext
name|getClassContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
throws|throws
name|JAXBException
block|{
synchronized|synchronized
init|(
name|classContexts
init|)
block|{
name|JAXBContext
name|context
init|=
name|classContexts
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
operator|new
name|Class
index|[]
block|{
name|type
block|}
argument_list|)
expr_stmt|;
name|classContexts
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
block|}
specifier|private
name|JAXBContext
name|getPackageContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
synchronized|synchronized
init|(
name|packageContexts
init|)
block|{
name|String
name|packageName
init|=
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|JAXBContext
name|context
init|=
name|packageContexts
operator|.
name|get
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|packageName
argument_list|,
name|type
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|packageContexts
operator|.
name|put
argument_list|(
name|packageName
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Error creating a JAXBContext using ObjectFactory : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|boolean
name|isSupported
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|)
block|{
return|return
name|type
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|||
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|objectFactoryForClass
argument_list|(
name|type
argument_list|)
operator|||
operator|(
name|type
operator|!=
name|genericType
operator|&&
name|objectFactoryForType
argument_list|(
name|genericType
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|objectFactoryForClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
return|return
name|type
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|type
argument_list|)
operator|+
literal|".ObjectFactory"
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|objectFactoryForType
parameter_list|(
name|Type
name|genericType
parameter_list|)
block|{
return|return
name|objectFactoryForClass
argument_list|(
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|protected
name|Unmarshaller
name|createUnmarshaller
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|genericType
parameter_list|)
throws|throws
name|JAXBException
block|{
name|JAXBContext
name|context
init|=
name|getJAXBContext
argument_list|(
name|cls
argument_list|,
name|genericType
argument_list|)
decl_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|unmarshaller
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
return|return
name|unmarshaller
return|;
block|}
specifier|protected
name|Marshaller
name|createMarshaller
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|MediaType
name|m
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|objClazz
init|=
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|?
operator|(
operator|(
name|JAXBElement
operator|)
name|obj
operator|)
operator|.
name|getDeclaredType
argument_list|()
else|:
name|cls
decl_stmt|;
name|JAXBContext
name|context
init|=
name|getJAXBContext
argument_list|(
name|objClazz
argument_list|,
name|genericType
argument_list|)
decl_stmt|;
name|Marshaller
name|marshaller
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|String
name|enc
init|=
name|m
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|CHARSET_PARAMETER
argument_list|)
decl_stmt|;
if|if
condition|(
name|enc
operator|!=
literal|null
condition|)
block|{
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_ENCODING
argument_list|,
name|enc
argument_list|)
expr_stmt|;
block|}
return|return
name|marshaller
return|;
block|}
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getActualType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|theType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|theType
operator|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|theType
operator|=
name|type
expr_stmt|;
block|}
return|return
name|theType
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Object
name|checkAdapter
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
name|XmlJavaTypeAdapter
name|typeAdapter
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeAdapter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|XmlAdapter
name|xmlAdapter
init|=
name|typeAdapter
operator|.
name|value
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|xmlAdapter
operator|.
name|marshal
argument_list|(
name|obj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Problem using the XmlJavaTypeAdapter"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|obj
return|;
block|}
specifier|private
name|Schema
name|createSchema
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|)
block|{
name|SchemaFactory
name|factory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|Schema
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Source
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|Source
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|loc
range|:
name|locations
control|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|startsWith
argument_list|(
name|CLASSPATH_PREFIX
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|loc
operator|.
name|substring
argument_list|(
name|CLASSPATH_PREFIX
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|is
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"No schema resource "
operator|+
name|loc
operator|+
literal|" is available on classpath"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"No schema resource "
operator|+
name|loc
operator|+
literal|" is available on local disk"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|Reader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|sources
operator|.
name|add
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|factory
operator|.
name|newSchema
argument_list|(
name|sources
operator|.
name|toArray
argument_list|(
operator|new
name|Source
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Validation will be disabled, failed to create schema : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|protected
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
block|}
end_class

end_unit

