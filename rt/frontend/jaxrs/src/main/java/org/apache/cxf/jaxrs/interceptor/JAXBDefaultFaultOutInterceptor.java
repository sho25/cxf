begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|NSStack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractOutDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
specifier|public
class|class
name|JAXBDefaultFaultOutInterceptor
extends|extends
name|AbstractOutDatabindingInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|JAXBDefaultFaultOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|JAXBDefaultFaultOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|MARSHAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JAXBDefaultFaultOutInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|mustPropogateException
argument_list|(
name|message
argument_list|)
condition|)
block|{
throw|throw
operator|(
name|Fault
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
throw|;
block|}
name|Fault
name|f
init|=
operator|(
name|Fault
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|f
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|NSStack
name|nsStack
init|=
operator|new
name|NSStack
argument_list|()
decl_stmt|;
name|nsStack
operator|.
name|push
argument_list|()
expr_stmt|;
name|XMLStreamWriter
name|writer
init|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|nsStack
operator|.
name|add
argument_list|(
literal|"http://cxf.apache.org/bindings/xformat"
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
name|nsStack
operator|.
name|getPrefix
argument_list|(
literal|"http://cxf.apache.org/bindings/xformat"
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|writeStartElement
argument_list|(
name|writer
argument_list|,
name|prefix
argument_list|,
literal|"XMLFault"
argument_list|,
literal|"http://cxf.apache.org/bindings/xformat"
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|writeStartElement
argument_list|(
name|writer
argument_list|,
name|prefix
argument_list|,
literal|"faultstring"
argument_list|,
literal|"http://cxf.apache.org/bindings/xformat"
argument_list|)
expr_stmt|;
name|Throwable
name|t
init|=
name|f
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|t
operator|==
literal|null
condition|?
name|f
operator|.
name|getMessage
argument_list|()
else|:
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// fault string
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// call StaxUtils to write Fault detail.
if|if
condition|(
name|f
operator|.
name|getDetail
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StaxUtils
operator|.
name|writeStartElement
argument_list|(
name|writer
argument_list|,
name|prefix
argument_list|,
literal|"detail"
argument_list|,
literal|"http://cxf.apache.org/bindings/xformat"
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|writeNode
argument_list|(
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|f
operator|.
name|getDetail
argument_list|()
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
argument_list|,
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
comment|// fault root
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|xe
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"XML_WRITE_EXC"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|,
name|xe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|mustPropogateException
argument_list|(
name|message
argument_list|)
condition|)
block|{
throw|throw
operator|(
name|Fault
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|boolean
name|mustPropogateException
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROPOGATE_EXCEPTION
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

