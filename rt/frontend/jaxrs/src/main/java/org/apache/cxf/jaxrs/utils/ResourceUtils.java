begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|MethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|URITemplate
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ResourceUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ResourceUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|ResourceUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ResourceUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|ClassResourceInfo
name|createClassResourceInfo
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|rClass
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|sClass
parameter_list|,
name|boolean
name|root
parameter_list|,
name|boolean
name|enableStatic
parameter_list|)
block|{
name|ClassResourceInfo
name|cri
init|=
operator|new
name|ClassResourceInfo
argument_list|(
name|rClass
argument_list|,
name|sClass
argument_list|,
name|root
argument_list|,
name|enableStatic
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
condition|)
block|{
name|URITemplate
name|t
init|=
name|URITemplate
operator|.
name|createTemplate
argument_list|(
name|cri
argument_list|,
name|cri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|cri
operator|.
name|setURITemplate
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|evaluateResourceClass
argument_list|(
name|cri
argument_list|,
name|enableStatic
argument_list|)
expr_stmt|;
return|return
name|checkMethodDispatcher
argument_list|(
name|cri
argument_list|)
condition|?
name|cri
else|:
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|evaluateResourceClass
parameter_list|(
name|ClassResourceInfo
name|cri
parameter_list|,
name|boolean
name|enableStatic
parameter_list|)
block|{
name|MethodDispatcher
name|md
init|=
operator|new
name|MethodDispatcher
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|cri
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|Method
name|annotatedMethod
init|=
name|AnnotationUtils
operator|.
name|getAnnotatedMethod
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|String
name|httpMethod
init|=
name|AnnotationUtils
operator|.
name|getHttpMethodValue
argument_list|(
name|annotatedMethod
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|(
name|Path
operator|)
name|AnnotationUtils
operator|.
name|getMethodAnnotation
argument_list|(
name|annotatedMethod
argument_list|,
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpMethod
operator|!=
literal|null
operator|||
name|path
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|bind
argument_list|(
name|createOperationInfo
argument_list|(
name|m
argument_list|,
name|annotatedMethod
argument_list|,
name|cri
argument_list|,
name|path
argument_list|,
name|httpMethod
argument_list|)
argument_list|,
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpMethod
operator|==
literal|null
condition|)
block|{
comment|// subresource locator
name|Class
argument_list|<
name|?
argument_list|>
name|subClass
init|=
name|m
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
name|enableStatic
condition|)
block|{
name|ClassResourceInfo
name|subCri
init|=
name|cri
operator|.
name|findResource
argument_list|(
name|subClass
argument_list|,
name|subClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|subCri
operator|==
literal|null
condition|)
block|{
name|subCri
operator|=
name|subClass
operator|==
name|cri
operator|.
name|getServiceClass
argument_list|()
condition|?
name|cri
else|:
name|createClassResourceInfo
argument_list|(
name|subClass
argument_list|,
name|subClass
argument_list|,
literal|false
argument_list|,
name|enableStatic
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subCri
operator|!=
literal|null
condition|)
block|{
name|cri
operator|.
name|addSubClassResourceInfo
argument_list|(
name|subCri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|cri
operator|.
name|setMethodDispatcher
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Constructor
name|findResourceConstructor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|resourceClass
parameter_list|,
name|boolean
name|perRequest
parameter_list|)
block|{
name|List
argument_list|<
name|Constructor
argument_list|>
name|cs
init|=
operator|new
name|LinkedList
argument_list|<
name|Constructor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Constructor
name|c
range|:
name|resourceClass
operator|.
name|getConstructors
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|params
init|=
name|c
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Annotation
index|[]
index|[]
name|anns
init|=
name|c
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|perRequest
condition|)
block|{
if|if
condition|(
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
index|[
name|i
index|]
argument_list|,
name|Context
operator|.
name|class
argument_list|)
operator|==
literal|null
operator|||
operator|!
name|AnnotationUtils
operator|.
name|isContextClass
argument_list|(
name|params
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|AnnotationUtils
operator|.
name|isValidParamAnnotations
argument_list|(
name|anns
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
name|cs
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|cs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Constructor
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Constructor
name|c1
parameter_list|,
name|Constructor
name|c2
parameter_list|)
block|{
name|int
name|p1
init|=
name|c1
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
name|int
name|p2
init|=
name|c2
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
return|return
name|p1
operator|>
name|p2
condition|?
operator|-
literal|1
else|:
name|p1
operator|<
name|p2
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|cs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|cs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|OperationResourceInfo
name|createOperationInfo
parameter_list|(
name|Method
name|m
parameter_list|,
name|Method
name|annotatedMethod
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|httpMethod
parameter_list|)
block|{
name|OperationResourceInfo
name|ori
init|=
operator|new
name|OperationResourceInfo
argument_list|(
name|m
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|URITemplate
name|t
init|=
name|URITemplate
operator|.
name|createTemplate
argument_list|(
name|cri
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ori
operator|.
name|setURITemplate
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|ori
operator|.
name|setHttpMethod
argument_list|(
name|httpMethod
argument_list|)
expr_stmt|;
name|ori
operator|.
name|setAnnotatedMethod
argument_list|(
name|annotatedMethod
argument_list|)
expr_stmt|;
return|return
name|ori
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkMethodDispatcher
parameter_list|(
name|ClassResourceInfo
name|cr
parameter_list|)
block|{
if|if
condition|(
name|cr
operator|.
name|getMethodDispatcher
argument_list|()
operator|.
name|getOperationResourceInfos
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_RESOURCE_OP_EXC"
argument_list|,
name|BUNDLE
argument_list|,
name|cr
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

