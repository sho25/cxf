begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ApplicationPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|BeanParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|CookieParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Encoded
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HeaderParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|MatrixParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|PerRequestResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|ResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|SingletonResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|MethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|URITemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|UserOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|UserResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|wadl
operator|.
name|ElementClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|wadl
operator|.
name|XMLName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|JAXBElementProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ResourceUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ResourceUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|ResourceUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASSPATH_PREFIX
init|=
literal|"classpath:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SERVER_PROVIDER_CLASS_NAMES
decl_stmt|;
static|static
block|{
name|SERVER_PROVIDER_CLASS_NAMES
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.ext.MessageBodyWriter"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.ext.MessageBodyReader"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.ext.ExceptionMapper"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.ext.ContextResolver"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.ext.ReaderInterceptor"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.ext.WriterInterceptor"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.ext.ParamConverterProvider"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.container.ContainerRequestFilter"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.container.ContainerResponseFilter"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"javax.ws.rs.container.DynamicFeature"
argument_list|)
expr_stmt|;
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|add
argument_list|(
literal|"org.apache.cxf.jaxrs.ext.ContextResolver"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ResourceUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|Method
name|findPostConstructMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|Object
operator|.
name|class
operator|==
name|c
operator|||
literal|null
operator|==
name|c
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Method
name|m
range|:
name|c
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getAnnotation
argument_list|(
name|PostConstruct
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
name|Method
name|m
init|=
name|findPostConstructMethod
argument_list|(
name|c
operator|.
name|getSuperclass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|i
range|:
name|c
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|m
operator|=
name|findPostConstructMethod
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Method
name|findPreDestroyMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|Object
operator|.
name|class
operator|==
name|c
operator|||
literal|null
operator|==
name|c
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Method
name|m
range|:
name|c
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getAnnotation
argument_list|(
name|PreDestroy
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
name|Method
name|m
init|=
name|findPreDestroyMethod
argument_list|(
name|c
operator|.
name|getSuperclass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|i
range|:
name|c
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|m
operator|=
name|findPreDestroyMethod
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ClassResourceInfo
name|createClassResourceInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|UserResource
argument_list|>
name|resources
parameter_list|,
name|UserResource
name|model
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|enableStatic
parameter_list|)
block|{
return|return
name|createClassResourceInfo
argument_list|(
name|resources
argument_list|,
name|model
argument_list|,
name|isRoot
argument_list|,
name|enableStatic
argument_list|,
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClassResourceInfo
name|createClassResourceInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|UserResource
argument_list|>
name|resources
parameter_list|,
name|UserResource
name|model
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|enableStatic
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|sClass
init|=
name|loadClass
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createServiceClassResourceInfo
argument_list|(
name|resources
argument_list|,
name|model
argument_list|,
name|sClass
argument_list|,
name|isRoot
argument_list|,
name|enableStatic
argument_list|,
name|bus
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClassResourceInfo
name|createServiceClassResourceInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|UserResource
argument_list|>
name|resources
parameter_list|,
name|UserResource
name|model
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|sClass
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|enableStatic
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Resource class "
operator|+
name|sClass
operator|.
name|getName
argument_list|()
operator|+
literal|" has no model info"
argument_list|)
throw|;
block|}
name|ClassResourceInfo
name|cri
init|=
operator|new
name|ClassResourceInfo
argument_list|(
name|sClass
argument_list|,
name|sClass
argument_list|,
name|isRoot
argument_list|,
name|enableStatic
argument_list|,
literal|true
argument_list|,
name|model
operator|.
name|getConsumes
argument_list|()
argument_list|,
name|model
operator|.
name|getProduces
argument_list|()
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|URITemplate
name|t
init|=
name|URITemplate
operator|.
name|createTemplate
argument_list|(
name|model
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|cri
operator|.
name|setURITemplate
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|MethodDispatcher
name|md
init|=
operator|new
name|MethodDispatcher
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|UserOperation
argument_list|>
name|ops
init|=
name|model
operator|.
name|getOperationsAsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|cri
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|UserOperation
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|OperationResourceInfo
name|ori
init|=
operator|new
name|OperationResourceInfo
argument_list|(
name|m
argument_list|,
name|cri
argument_list|,
name|URITemplate
operator|.
name|createTemplate
argument_list|(
name|op
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|op
operator|.
name|getVerb
argument_list|()
argument_list|,
name|op
operator|.
name|getConsumes
argument_list|()
argument_list|,
name|op
operator|.
name|getProduces
argument_list|()
argument_list|,
name|op
operator|.
name|getParameters
argument_list|()
argument_list|,
name|op
operator|.
name|isOneway
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rClassName
init|=
name|m
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getVerb
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|resources
operator|.
name|containsKey
argument_list|(
name|rClassName
argument_list|)
condition|)
block|{
name|ClassResourceInfo
name|subCri
init|=
name|rClassName
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
name|cri
else|:
name|createServiceClassResourceInfo
argument_list|(
name|resources
argument_list|,
name|resources
operator|.
name|get
argument_list|(
name|rClassName
argument_list|)
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|,
literal|false
argument_list|,
name|enableStatic
argument_list|,
name|bus
argument_list|)
decl_stmt|;
if|if
condition|(
name|subCri
operator|!=
literal|null
condition|)
block|{
name|cri
operator|.
name|addSubClassResourceInfo
argument_list|(
name|subCri
argument_list|)
expr_stmt|;
name|md
operator|.
name|bind
argument_list|(
name|ori
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|md
operator|.
name|bind
argument_list|(
name|ori
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
name|cri
operator|.
name|setMethodDispatcher
argument_list|(
name|md
argument_list|)
expr_stmt|;
return|return
name|checkMethodDispatcher
argument_list|(
name|cri
argument_list|)
condition|?
name|cri
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
name|ClassResourceInfo
name|createClassResourceInfo
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|rClass
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|sClass
parameter_list|,
name|boolean
name|root
parameter_list|,
name|boolean
name|enableStatic
parameter_list|)
block|{
return|return
name|createClassResourceInfo
argument_list|(
name|rClass
argument_list|,
name|sClass
argument_list|,
name|root
argument_list|,
name|enableStatic
argument_list|,
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClassResourceInfo
name|createClassResourceInfo
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|rClass
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|sClass
parameter_list|,
name|boolean
name|root
parameter_list|,
name|boolean
name|enableStatic
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|ClassResourceInfo
name|cri
init|=
operator|new
name|ClassResourceInfo
argument_list|(
name|rClass
argument_list|,
name|sClass
argument_list|,
name|root
argument_list|,
name|enableStatic
argument_list|,
name|bus
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
condition|)
block|{
name|URITemplate
name|t
init|=
name|URITemplate
operator|.
name|createTemplate
argument_list|(
name|cri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|cri
operator|.
name|setURITemplate
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|evaluateResourceClass
argument_list|(
name|cri
argument_list|,
name|enableStatic
argument_list|)
expr_stmt|;
return|return
name|checkMethodDispatcher
argument_list|(
name|cri
argument_list|)
condition|?
name|cri
else|:
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|evaluateResourceClass
parameter_list|(
name|ClassResourceInfo
name|cri
parameter_list|,
name|boolean
name|enableStatic
parameter_list|)
block|{
name|MethodDispatcher
name|md
init|=
operator|new
name|MethodDispatcher
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|cri
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|Method
name|annotatedMethod
init|=
name|AnnotationUtils
operator|.
name|getAnnotatedMethod
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|String
name|httpMethod
init|=
name|AnnotationUtils
operator|.
name|getHttpMethodValue
argument_list|(
name|annotatedMethod
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|AnnotationUtils
operator|.
name|getMethodAnnotation
argument_list|(
name|annotatedMethod
argument_list|,
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpMethod
operator|!=
literal|null
operator|||
name|path
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|bind
argument_list|(
name|createOperationInfo
argument_list|(
name|m
argument_list|,
name|annotatedMethod
argument_list|,
name|cri
argument_list|,
name|path
argument_list|,
name|httpMethod
argument_list|)
argument_list|,
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpMethod
operator|==
literal|null
condition|)
block|{
comment|// subresource locator
name|Class
argument_list|<
name|?
argument_list|>
name|subClass
init|=
name|m
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
name|enableStatic
condition|)
block|{
name|ClassResourceInfo
name|subCri
init|=
name|cri
operator|.
name|findResource
argument_list|(
name|subClass
argument_list|,
name|subClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|subCri
operator|==
literal|null
condition|)
block|{
name|subCri
operator|=
name|subClass
operator|==
name|cri
operator|.
name|getServiceClass
argument_list|()
condition|?
name|cri
else|:
name|createClassResourceInfo
argument_list|(
name|subClass
argument_list|,
name|subClass
argument_list|,
literal|false
argument_list|,
name|enableStatic
argument_list|,
name|cri
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subCri
operator|!=
literal|null
condition|)
block|{
name|cri
operator|.
name|addSubClassResourceInfo
argument_list|(
name|subCri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|cri
operator|.
name|setMethodDispatcher
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Constructor
argument_list|<
name|?
argument_list|>
name|findResourceConstructor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|resourceClass
parameter_list|,
name|boolean
name|perRequest
parameter_list|)
block|{
name|List
argument_list|<
name|Constructor
argument_list|<
name|?
argument_list|>
argument_list|>
name|cs
init|=
operator|new
name|LinkedList
argument_list|<
name|Constructor
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
range|:
name|resourceClass
operator|.
name|getConstructors
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|params
init|=
name|c
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Annotation
index|[]
index|[]
name|anns
init|=
name|c
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|perRequest
condition|)
block|{
if|if
condition|(
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
index|[
name|i
index|]
argument_list|,
name|Context
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|AnnotationUtils
operator|.
name|isValidParamAnnotations
argument_list|(
name|anns
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
name|cs
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|cs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Constructor
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|c1
parameter_list|,
name|Constructor
argument_list|<
name|?
argument_list|>
name|c2
parameter_list|)
block|{
name|int
name|p1
init|=
name|c1
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
name|int
name|p2
init|=
name|c2
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
return|return
name|p1
operator|>
name|p2
condition|?
operator|-
literal|1
else|:
name|p1
operator|<
name|p2
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
block|)
function|;
return|return
name|cs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|cs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_class

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Parameter
argument_list|>
name|getParameters
parameter_list|(
name|Method
name|resourceMethod
parameter_list|)
block|{
name|Annotation
index|[]
index|[]
name|paramAnns
init|=
name|resourceMethod
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramAnns
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Parameter
operator|.
name|class
argument_list|)
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
init|=
name|resourceMethod
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Parameter
argument_list|>
argument_list|(
name|paramAnns
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramAnns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Parameter
name|p
init|=
name|getParameter
argument_list|(
name|i
argument_list|,
name|paramAnns
index|[
name|i
index|]
argument_list|,
name|types
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
end_function

begin_comment
comment|//CHECKSTYLE:OFF
end_comment

begin_function
specifier|public
specifier|static
name|Parameter
name|getParameter
parameter_list|(
name|int
name|index
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|Context
name|ctx
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|CONTEXT
argument_list|,
name|index
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|boolean
name|isEncoded
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|Encoded
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|BeanParam
name|bp
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|BeanParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|BEAN
argument_list|,
name|index
argument_list|,
literal|null
argument_list|,
name|isEncoded
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|String
name|dValue
init|=
name|AnnotationUtils
operator|.
name|getDefaultParameterValue
argument_list|(
name|anns
argument_list|)
decl_stmt|;
name|PathParam
name|a
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|PathParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|PATH
argument_list|,
name|index
argument_list|,
name|a
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|,
name|dValue
argument_list|)
return|;
block|}
name|QueryParam
name|q
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|QueryParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|QUERY
argument_list|,
name|index
argument_list|,
name|q
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|,
name|dValue
argument_list|)
return|;
block|}
name|MatrixParam
name|m
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|MatrixParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|MATRIX
argument_list|,
name|index
argument_list|,
name|m
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|,
name|dValue
argument_list|)
return|;
block|}
name|FormParam
name|f
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|FormParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|,
name|index
argument_list|,
name|f
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|,
name|dValue
argument_list|)
return|;
block|}
name|HeaderParam
name|h
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|HeaderParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|HEADER
argument_list|,
name|index
argument_list|,
name|h
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|,
name|dValue
argument_list|)
return|;
block|}
name|CookieParam
name|c
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|CookieParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|COOKIE
argument_list|,
name|index
argument_list|,
name|c
operator|.
name|value
argument_list|()
argument_list|,
name|isEncoded
argument_list|,
name|dValue
argument_list|)
return|;
block|}
return|return
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|REQUEST_BODY
argument_list|,
name|index
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_comment
comment|//CHECKSTYLE:ON
end_comment

begin_function
specifier|private
specifier|static
name|OperationResourceInfo
name|createOperationInfo
parameter_list|(
name|Method
name|m
parameter_list|,
name|Method
name|annotatedMethod
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|httpMethod
parameter_list|)
block|{
name|OperationResourceInfo
name|ori
init|=
operator|new
name|OperationResourceInfo
argument_list|(
name|m
argument_list|,
name|annotatedMethod
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|URITemplate
name|t
init|=
name|URITemplate
operator|.
name|createTemplate
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ori
operator|.
name|setURITemplate
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|ori
operator|.
name|setHttpMethod
argument_list|(
name|httpMethod
argument_list|)
expr_stmt|;
return|return
name|ori
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|checkMethodDispatcher
parameter_list|(
name|ClassResourceInfo
name|cr
parameter_list|)
block|{
if|if
condition|(
name|cr
operator|.
name|getMethodDispatcher
argument_list|()
operator|.
name|getOperationResourceInfos
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_RESOURCE_OP_EXC"
argument_list|,
name|BUNDLE
argument_list|,
name|cr
operator|.
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|cName
parameter_list|)
block|{
try|try
block|{
return|return
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|cName
operator|.
name|trim
argument_list|()
argument_list|,
name|ResourceUtils
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No class "
operator|+
name|cName
operator|.
name|trim
argument_list|()
operator|+
literal|" can be found"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|UserResource
argument_list|>
name|getUserResources
parameter_list|(
name|String
name|loc
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|ResourceUtils
operator|.
name|getResourceStream
argument_list|(
name|loc
argument_list|,
name|bus
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getUserResources
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Problem with processing a user model at "
operator|+
name|loc
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|InputStream
name|getResourceStream
parameter_list|(
name|String
name|loc
parameter_list|,
name|Bus
name|bus
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getResourceURL
argument_list|(
name|loc
argument_list|,
name|bus
argument_list|)
decl_stmt|;
return|return
name|url
operator|==
literal|null
condition|?
literal|null
else|:
name|url
operator|.
name|openStream
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|URL
name|getResourceURL
parameter_list|(
name|String
name|loc
parameter_list|,
name|Bus
name|bus
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|startsWith
argument_list|(
name|CLASSPATH_PREFIX
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|loc
operator|.
name|substring
argument_list|(
name|CLASSPATH_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|url
operator|=
name|ResourceUtils
operator|.
name|getClasspathResourceURL
argument_list|(
name|path
argument_list|,
name|ResourceUtils
operator|.
name|class
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// it can be either a classpath or file resource without a scheme
name|url
operator|=
name|ResourceUtils
operator|.
name|getClasspathResourceURL
argument_list|(
name|loc
argument_list|,
name|ResourceUtils
operator|.
name|class
argument_list|,
name|bus
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|url
operator|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"No resource "
operator|+
name|loc
operator|+
literal|" is available"
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|InputStream
name|getClasspathResourceStream
parameter_list|(
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|callingClass
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|InputStream
name|is
init|=
name|ClassLoaderUtils
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|,
name|callingClass
argument_list|)
decl_stmt|;
return|return
name|is
operator|==
literal|null
condition|?
name|getResource
argument_list|(
name|path
argument_list|,
name|InputStream
operator|.
name|class
argument_list|,
name|bus
argument_list|)
else|:
name|is
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|URL
name|getClasspathResourceURL
parameter_list|(
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|callingClass
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|URL
name|url
init|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
name|path
argument_list|,
name|callingClass
argument_list|)
decl_stmt|;
return|return
name|url
operator|==
literal|null
condition|?
name|getResource
argument_list|(
name|path
argument_list|,
name|URL
operator|.
name|class
argument_list|,
name|bus
argument_list|)
else|:
name|url
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getResource
parameter_list|(
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|resourceClass
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|ResourceManager
name|rm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
return|return
name|rm
operator|.
name|resolveResource
argument_list|(
name|path
argument_list|,
name|resourceClass
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|UserResource
argument_list|>
name|getUserResources
parameter_list|(
name|String
name|loc
parameter_list|)
block|{
return|return
name|getUserResources
argument_list|(
name|loc
argument_list|,
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|UserResource
argument_list|>
name|getUserResources
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getResourcesFromElement
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|UserResource
argument_list|>
name|getResourcesFromElement
parameter_list|(
name|Element
name|modelEl
parameter_list|)
block|{
name|List
argument_list|<
name|UserResource
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<
name|UserResource
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|resourceEls
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|modelEl
argument_list|,
literal|"http://cxf.apache.org/jaxrs"
argument_list|,
literal|"resource"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|e
range|:
name|resourceEls
control|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|getResourceFromElement
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resources
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|ResourceTypes
name|getAllRequestResponseTypes
parameter_list|(
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|cris
parameter_list|,
name|boolean
name|jaxbOnly
parameter_list|)
block|{
name|ResourceTypes
name|types
init|=
operator|new
name|ResourceTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassResourceInfo
name|resource
range|:
name|cris
control|)
block|{
name|getAllTypesForResource
argument_list|(
name|resource
argument_list|,
name|types
argument_list|,
name|jaxbOnly
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getActualJaxbType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Method
name|resourceMethod
parameter_list|,
name|boolean
name|inbound
parameter_list|)
block|{
name|ElementClass
name|element
init|=
name|resourceMethod
operator|.
name|getAnnotation
argument_list|(
name|ElementClass
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|inbound
condition|?
name|element
operator|.
name|request
argument_list|()
else|:
name|element
operator|.
name|response
argument_list|()
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
return|return
name|cls
return|;
block|}
block|}
return|return
name|type
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|getAllTypesForResource
parameter_list|(
name|ClassResourceInfo
name|resource
parameter_list|,
name|ResourceTypes
name|types
parameter_list|,
name|boolean
name|jaxbOnly
parameter_list|)
block|{
for|for
control|(
name|OperationResourceInfo
name|ori
range|:
name|resource
operator|.
name|getMethodDispatcher
argument_list|()
operator|.
name|getOperationResourceInfos
argument_list|()
control|)
block|{
name|Method
name|method
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realReturnType
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|realReturnType
decl_stmt|;
if|if
condition|(
name|cls
operator|==
name|Response
operator|.
name|class
condition|)
block|{
name|cls
operator|=
name|getActualJaxbType
argument_list|(
name|cls
argument_list|,
name|method
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Type
name|type
init|=
name|method
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
name|jaxbOnly
condition|)
block|{
name|checkJaxbType
argument_list|(
name|cls
argument_list|,
name|realReturnType
operator|==
name|Response
operator|.
name|class
condition|?
name|cls
else|:
name|type
argument_list|,
name|types
argument_list|,
name|method
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|types
operator|.
name|getAllTypes
argument_list|()
operator|.
name|put
argument_list|(
name|cls
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Parameter
name|pm
range|:
name|ori
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|REQUEST_BODY
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|inType
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|pm
operator|.
name|getIndex
argument_list|()
index|]
decl_stmt|;
name|Type
name|paramType
init|=
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|pm
operator|.
name|getIndex
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|jaxbOnly
condition|)
block|{
name|checkJaxbType
argument_list|(
name|inType
argument_list|,
name|paramType
argument_list|,
name|types
argument_list|,
name|method
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|pm
operator|.
name|getIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|types
operator|.
name|getAllTypes
argument_list|()
operator|.
name|put
argument_list|(
name|inType
argument_list|,
name|paramType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|ClassResourceInfo
name|sub
range|:
name|resource
operator|.
name|getSubResources
argument_list|()
control|)
block|{
if|if
condition|(
name|sub
operator|!=
name|resource
condition|)
block|{
name|getAllTypesForResource
argument_list|(
name|sub
argument_list|,
name|types
argument_list|,
name|jaxbOnly
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|checkJaxbType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|ResourceTypes
name|types
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
if|if
condition|(
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
expr_stmt|;
name|XMLName
name|name
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
argument_list|,
name|XMLName
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|getCollectionMap
argument_list|()
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|JAXRSUtils
operator|.
name|convertStringToQName
argument_list|(
name|name
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|JAXBElementProvider
argument_list|<
name|?
argument_list|>
name|provider
init|=
operator|new
name|JAXBElementProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|&&
name|provider
operator|.
name|isReadable
argument_list|(
name|type
argument_list|,
name|type
argument_list|,
operator|new
name|Annotation
index|[
literal|0
index|]
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
condition|)
block|{
name|types
operator|.
name|getAllTypes
argument_list|()
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|genCls
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
decl_stmt|;
if|if
condition|(
name|genCls
operator|!=
name|type
operator|&&
name|genCls
operator|!=
literal|null
operator|&&
name|genCls
operator|!=
name|Object
operator|.
name|class
operator|&&
operator|!
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|genCls
argument_list|)
condition|)
block|{
name|types
operator|.
name|getAllTypes
argument_list|()
operator|.
name|put
argument_list|(
name|genCls
argument_list|,
name|genCls
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|UserResource
name|getResourceFromElement
parameter_list|(
name|Element
name|e
parameter_list|)
block|{
name|UserResource
name|resource
init|=
operator|new
name|UserResource
argument_list|()
decl_stmt|;
name|resource
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setPath
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setConsumes
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"consumes"
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProduces
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"produces"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|operEls
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|e
argument_list|,
literal|"http://cxf.apache.org/jaxrs"
argument_list|,
literal|"operation"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserOperation
argument_list|>
name|opers
init|=
operator|new
name|ArrayList
argument_list|<
name|UserOperation
argument_list|>
argument_list|(
name|operEls
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|operEl
range|:
name|operEls
control|)
block|{
name|opers
operator|.
name|add
argument_list|(
name|getOperationFromElement
argument_list|(
name|operEl
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resource
operator|.
name|setOperations
argument_list|(
name|opers
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|UserOperation
name|getOperationFromElement
parameter_list|(
name|Element
name|e
parameter_list|)
block|{
name|UserOperation
name|op
init|=
operator|new
name|UserOperation
argument_list|()
decl_stmt|;
name|op
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|op
operator|.
name|setVerb
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"verb"
argument_list|)
argument_list|)
expr_stmt|;
name|op
operator|.
name|setPath
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|op
operator|.
name|setOneway
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"oneway"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|op
operator|.
name|setConsumes
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"consumes"
argument_list|)
argument_list|)
expr_stmt|;
name|op
operator|.
name|setProduces
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"produces"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|paramEls
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|e
argument_list|,
literal|"http://cxf.apache.org/jaxrs"
argument_list|,
literal|"param"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Parameter
argument_list|>
argument_list|(
name|paramEls
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramEls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|paramEl
init|=
name|paramEls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Parameter
name|p
init|=
operator|new
name|Parameter
argument_list|(
name|paramEl
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|i
argument_list|,
name|paramEl
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setEncoded
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|paramEl
operator|.
name|getAttribute
argument_list|(
literal|"encoded"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDefaultValue
argument_list|(
name|paramEl
operator|.
name|getAttribute
argument_list|(
literal|"defaultValue"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|op
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Object
index|[]
name|createConstructorArguments
parameter_list|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Message
name|m
parameter_list|,
name|boolean
name|perRequest
parameter_list|)
block|{
return|return
name|createConstructorArguments
argument_list|(
name|c
argument_list|,
name|m
argument_list|,
name|perRequest
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Object
index|[]
name|createConstructorArguments
parameter_list|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Message
name|m
parameter_list|,
name|boolean
name|perRequest
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|contextValues
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|params
init|=
name|c
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Annotation
index|[]
index|[]
name|anns
init|=
name|c
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
name|Type
index|[]
name|genericTypes
init|=
name|c
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateValues
init|=
name|m
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
name|URITemplate
operator|.
name|TEMPLATE_PARAMETERS
argument_list|)
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|params
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|anns
index|[
name|i
index|]
argument_list|,
name|Context
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Object
name|contextValue
init|=
name|contextValues
operator|!=
literal|null
condition|?
name|contextValues
operator|.
name|get
argument_list|(
name|params
index|[
name|i
index|]
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|contextValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|perRequest
condition|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|JAXRSUtils
operator|.
name|createContextValue
argument_list|(
name|m
argument_list|,
name|genericTypes
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
index|[
name|i
index|]
operator|=
name|InjectionUtils
operator|.
name|createThreadLocalProxy
argument_list|(
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|values
index|[
name|i
index|]
operator|=
name|contextValue
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// this branch won't execute for singletons given that the found constructor
comment|// is guaranteed to have only Context parameters, if any, for singletons
name|Parameter
name|p
init|=
name|ResourceUtils
operator|.
name|getParameter
argument_list|(
name|i
argument_list|,
name|anns
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|JAXRSUtils
operator|.
name|createHttpParameterValue
argument_list|(
name|p
argument_list|,
name|params
index|[
name|i
index|]
argument_list|,
name|genericTypes
index|[
name|i
index|]
argument_list|,
name|anns
index|[
name|i
index|]
argument_list|,
name|m
argument_list|,
name|templateValues
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|JAXRSServerFactoryBean
name|createApplication
parameter_list|(
name|Application
name|app
parameter_list|,
name|boolean
name|ignoreAppPath
parameter_list|)
block|{
return|return
name|createApplication
argument_list|(
name|app
argument_list|,
name|ignoreAppPath
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|JAXRSServerFactoryBean
name|createApplication
parameter_list|(
name|Application
name|app
parameter_list|,
name|boolean
name|ignoreAppPath
parameter_list|,
name|boolean
name|staticSubresourceResolution
parameter_list|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|singletons
init|=
name|app
operator|.
name|getSingletons
argument_list|()
decl_stmt|;
name|verifySingletons
argument_list|(
name|singletons
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resourceClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ResourceProvider
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ResourceProvider
argument_list|>
argument_list|()
decl_stmt|;
comment|// Note, app.getClasses() returns a list of per-request classes
comment|// or singleton provider classes
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|app
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|isValidApplicationClass
argument_list|(
name|cls
argument_list|,
name|singletons
argument_list|)
condition|)
block|{
if|if
condition|(
name|isValidProvider
argument_list|(
name|cls
argument_list|)
condition|)
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
init|=
name|ResourceUtils
operator|.
name|findResourceConstructor
argument_list|(
name|cls
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|providers
operator|.
name|add
argument_list|(
name|c
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|providers
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Provider "
operator|+
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be created"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|resourceClasses
operator|.
name|add
argument_list|(
name|cls
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|cls
argument_list|,
operator|new
name|PerRequestResourceProvider
argument_list|(
name|cls
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// we can get either a provider or resource class here
for|for
control|(
name|Object
name|o
range|:
name|singletons
control|)
block|{
if|if
condition|(
name|isValidProvider
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|providers
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resourceClasses
operator|.
name|add
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|SingletonResourceProvider
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|JAXRSServerFactoryBean
name|bean
init|=
operator|new
name|JAXRSServerFactoryBean
argument_list|()
decl_stmt|;
name|String
name|address
init|=
literal|"/"
decl_stmt|;
if|if
condition|(
operator|!
name|ignoreAppPath
condition|)
block|{
name|ApplicationPath
name|appPath
init|=
name|app
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ApplicationPath
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|appPath
operator|!=
literal|null
condition|)
block|{
name|address
operator|=
name|appPath
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|address
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|address
operator|=
literal|"/"
operator|+
name|address
expr_stmt|;
block|}
name|bean
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setStaticSubresourceResolution
argument_list|(
name|staticSubresourceResolution
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setResourceClasses
argument_list|(
name|resourceClasses
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setProviders
argument_list|(
name|providers
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ResourceProvider
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|bean
operator|.
name|setResourceProvider
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|appProps
init|=
name|app
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|appProps
operator|!=
literal|null
condition|)
block|{
name|bean
operator|.
name|getProperties
argument_list|(
literal|true
argument_list|)
operator|.
name|putAll
argument_list|(
name|appProps
argument_list|)
expr_stmt|;
block|}
name|bean
operator|.
name|setApplication
argument_list|(
name|app
argument_list|)
expr_stmt|;
return|return
name|bean
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|isValidProvider
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
operator|||
name|c
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|c
operator|.
name|getAnnotation
argument_list|(
name|Provider
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|itf
range|:
name|c
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|SERVER_PROVIDER_CLASS_NAMES
operator|.
name|contains
argument_list|(
name|itf
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|isValidProvider
argument_list|(
name|c
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|verifySingletons
parameter_list|(
name|Set
argument_list|<
name|Object
argument_list|>
name|singletons
parameter_list|)
block|{
if|if
condition|(
name|singletons
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|map
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|s
range|:
name|singletons
control|)
block|{
if|if
condition|(
name|map
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"More than one instance of the same singleton class "
operator|+
name|s
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is available"
argument_list|)
throw|;
block|}
else|else
block|{
name|map
operator|.
name|add
argument_list|(
name|s
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|isValidResourceClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|isInterface
argument_list|()
operator|||
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|c
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring invalid resource class "
operator|+
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|isValidApplicationClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Set
argument_list|<
name|Object
argument_list|>
name|singletons
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValidResourceClass
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Object
name|s
range|:
name|singletons
control|)
block|{
if|if
condition|(
name|c
operator|==
name|s
operator|.
name|getClass
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring per-request resource class "
operator|+
name|c
operator|.
name|getName
argument_list|()
operator|+
literal|" as it is also registered as singleton"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function

begin_comment
comment|//TODO : consider moving JAXBDataBinding.createContext to JAXBUtils
end_comment

begin_function
specifier|public
specifier|static
name|JAXBContext
name|createJaxbContext
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|extraClass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|contextProperties
parameter_list|)
block|{
if|if
condition|(
name|classes
operator|==
literal|null
operator|||
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JAXBUtils
operator|.
name|scanPackages
argument_list|(
name|classes
argument_list|,
name|extraClass
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|JAXBContext
name|ctx
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|classes
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[
name|classes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|contextProperties
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"No JAXB context can be created"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
end_function

unit|}
end_unit

