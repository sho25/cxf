begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|atom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|AtomPullHandler
extends|extends
name|Handler
block|{
specifier|private
name|AtomPullServer
name|engine
decl_stmt|;
comment|/**      * Creates handler using (package private).      *       * @param engine configured engine.      */
name|AtomPullHandler
parameter_list|(
name|AtomPullServer
name|engine
parameter_list|)
block|{
name|this
operator|.
name|engine
operator|=
name|engine
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publish
parameter_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
name|record
parameter_list|)
block|{
if|if
condition|(
name|LoggingThread
operator|.
name|isSilent
argument_list|()
condition|)
block|{
return|return;
block|}
name|LoggingThread
operator|.
name|markSilent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|LogRecord
name|rec
init|=
name|LogRecord
operator|.
name|fromJUL
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|engine
operator|.
name|publish
argument_list|(
name|rec
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LoggingThread
operator|.
name|markSilent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|SecurityException
block|{
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
block|{
comment|// no-op
block|}
block|}
end_class

end_unit

