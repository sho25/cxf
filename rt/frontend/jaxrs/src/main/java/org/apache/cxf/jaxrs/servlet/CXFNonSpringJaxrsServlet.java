begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PrimitiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|PerRequestResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|ResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|SingletonResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ApplicationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ProviderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|CXFNonSpringServlet
import|;
end_import

begin_class
specifier|public
class|class
name|CXFNonSpringJaxrsServlet
extends|extends
name|CXFNonSpringServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|8916352798780577499L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CXFNonSpringJaxrsServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER_MODEL_PARAM
init|=
literal|"user.model"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_ADDRESS_PARAM
init|=
literal|"jaxrs.address"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IGNORE_APP_PATH_PARAM
init|=
literal|"jaxrs.application.address.ignore"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_CLASSES_PARAM
init|=
literal|"jaxrs.serviceClasses"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROVIDERS_PARAM
init|=
literal|"jaxrs.providers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_PARAM
init|=
literal|"jaxrs.features"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUT_INTERCEPTORS_PARAM
init|=
literal|"jaxrs.outInterceptors"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUT_FAULT_INTERCEPTORS_PARAM
init|=
literal|"jaxrs.outFaultInterceptors"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IN_INTERCEPTORS_PARAM
init|=
literal|"jaxrs.inInterceptors"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INVOKER_PARAM
init|=
literal|"jaxrs.invoker"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_SCOPE_PARAM
init|=
literal|"jaxrs.scope"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTENSIONS_PARAM
init|=
literal|"jaxrs.extensions"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LANGUAGES_PARAM
init|=
literal|"jaxrs.languages"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTIES_PARAM
init|=
literal|"jaxrs.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMAS_PARAM
init|=
literal|"jaxrs.schemaLocations"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOC_LOCATION_PARAM
init|=
literal|"jaxrs.documentLocation"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STATIC_SUB_RESOLUTION_PARAM
init|=
literal|"jaxrs.static.subresources"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_SCOPE_SINGLETON
init|=
literal|"singleton"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_SCOPE_REQUEST
init|=
literal|"prototype"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAMETER_SPLIT_CHAR
init|=
literal|"class.parameter.split.char"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PARAMETER_SPLIT_CHAR
init|=
literal|","
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPACE_PARAMETER_SPLIT_CHAR
init|=
literal|"space"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXRS_APPLICATION_PARAM
init|=
literal|"javax.ws.rs.Application"
decl_stmt|;
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
specifier|private
name|Application
name|application
decl_stmt|;
specifier|public
name|CXFNonSpringJaxrsServlet
parameter_list|()
block|{              }
specifier|public
name|CXFNonSpringJaxrsServlet
parameter_list|(
name|Application
name|app
parameter_list|)
block|{
name|this
operator|.
name|application
operator|=
name|app
expr_stmt|;
block|}
specifier|public
name|CXFNonSpringJaxrsServlet
parameter_list|(
name|Object
name|singletonService
parameter_list|)
block|{
name|this
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|singletonService
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CXFNonSpringJaxrsServlet
parameter_list|(
name|Set
argument_list|<
name|Object
argument_list|>
name|applicationSingletons
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ApplicationImpl
argument_list|(
name|applicationSingletons
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|servletConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|getApplication
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createServerFromApplication
argument_list|(
name|servletConfig
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|applicationClass
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|JAXRS_APPLICATION_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicationClass
operator|!=
literal|null
condition|)
block|{
name|createServerFromApplication
argument_list|(
name|applicationClass
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|splitChar
init|=
name|getParameterSplitChar
argument_list|(
name|servletConfig
argument_list|)
decl_stmt|;
name|JAXRSServerFactoryBean
name|bean
init|=
operator|new
name|JAXRSServerFactoryBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|address
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|SERVICE_ADDRESS_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|address
operator|=
literal|"/"
expr_stmt|;
block|}
name|bean
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setStaticSubresourceResolution
argument_list|(
name|getStaticSubResolutionValue
argument_list|(
name|servletConfig
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|modelRef
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|USER_MODEL_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelRef
operator|!=
literal|null
condition|)
block|{
name|bean
operator|.
name|setModelRef
argument_list|(
name|modelRef
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setDocLocation
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
name|setSchemasLocations
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
name|setAllInterceptors
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|,
name|splitChar
argument_list|)
expr_stmt|;
name|setInvoker
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resourceClasses
init|=
name|getServiceClasses
argument_list|(
name|servletConfig
argument_list|,
name|modelRef
operator|!=
literal|null
argument_list|,
name|splitChar
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ResourceProvider
argument_list|>
name|resourceProviders
init|=
name|getResourceProviders
argument_list|(
name|servletConfig
argument_list|,
name|resourceClasses
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|providers
init|=
name|getProviders
argument_list|(
name|servletConfig
argument_list|,
name|splitChar
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setResourceClasses
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|resourceClasses
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setProviders
argument_list|(
name|providers
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ResourceProvider
argument_list|>
name|entry
range|:
name|resourceProviders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|bean
operator|.
name|setResourceProvider
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setExtensions
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Feature
argument_list|>
name|features
init|=
name|getFeatures
argument_list|(
name|servletConfig
argument_list|,
name|splitChar
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setFeatures
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|bean
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|getParameterSplitChar
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|)
block|{
name|String
name|param
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|PARAMETER_SPLIT_CHAR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|param
argument_list|)
operator|&&
name|SPACE_PARAMETER_SPLIT_CHAR
operator|.
name|equals
argument_list|(
name|param
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|" "
return|;
block|}
else|else
block|{
return|return
name|DEFAULT_PARAMETER_SPLIT_CHAR
return|;
block|}
block|}
specifier|protected
name|boolean
name|getStaticSubResolutionValue
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|)
block|{
name|String
name|param
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|STATIC_SUB_RESOLUTION_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|param
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|void
name|setExtensions
parameter_list|(
name|JAXRSServerFactoryBean
name|bean
parameter_list|,
name|ServletConfig
name|servletConfig
parameter_list|)
block|{
name|bean
operator|.
name|setExtensionMappings
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|parseMapSequence
argument_list|(
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|EXTENSIONS_PARAM
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setLanguageMappings
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|parseMapSequence
argument_list|(
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|LANGUAGES_PARAM
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setProperties
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
name|parseMapSequence
argument_list|(
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|PROPERTIES_PARAM
argument_list|)
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setAllInterceptors
parameter_list|(
name|JAXRSServerFactoryBean
name|bean
parameter_list|,
name|ServletConfig
name|servletConfig
parameter_list|,
name|String
name|splitChar
parameter_list|)
throws|throws
name|ServletException
block|{
name|setInterceptors
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|,
name|OUT_INTERCEPTORS_PARAM
argument_list|,
name|splitChar
argument_list|)
expr_stmt|;
name|setInterceptors
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|,
name|OUT_FAULT_INTERCEPTORS_PARAM
argument_list|,
name|splitChar
argument_list|)
expr_stmt|;
name|setInterceptors
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|,
name|IN_INTERCEPTORS_PARAM
argument_list|,
name|splitChar
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setSchemasLocations
parameter_list|(
name|JAXRSServerFactoryBean
name|bean
parameter_list|,
name|ServletConfig
name|servletConfig
parameter_list|)
block|{
name|String
name|schemas
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|SCHEMAS_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemas
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|locations
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|schemas
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|loc
range|:
name|locations
control|)
block|{
name|String
name|theLoc
init|=
name|loc
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|theLoc
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|theLoc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bean
operator|.
name|setSchemaLocations
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setDocLocation
parameter_list|(
name|JAXRSServerFactoryBean
name|bean
parameter_list|,
name|ServletConfig
name|servletConfig
parameter_list|)
block|{
name|String
name|wadlLoc
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|DOC_LOCATION_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|wadlLoc
operator|!=
literal|null
condition|)
block|{
name|bean
operator|.
name|setDocLocation
argument_list|(
name|wadlLoc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|setInterceptors
parameter_list|(
name|JAXRSServerFactoryBean
name|bean
parameter_list|,
name|ServletConfig
name|servletConfig
parameter_list|,
name|String
name|paramName
parameter_list|,
name|String
name|splitChar
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|value
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|values
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|value
argument_list|,
name|splitChar
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|interceptorVal
range|:
name|values
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|theValue
init|=
name|getClassNameAndProperties
argument_list|(
name|interceptorVal
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|theValue
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|intClass
init|=
name|loadClass
argument_list|(
name|theValue
argument_list|,
literal|"Interceptor"
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|intClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|injectProperties
argument_list|(
name|object
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|(
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Interceptor class "
operator|+
name|theValue
operator|+
literal|" can not be created"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|OUT_INTERCEPTORS_PARAM
operator|.
name|equals
argument_list|(
name|paramName
argument_list|)
condition|)
block|{
name|bean
operator|.
name|setOutInterceptors
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OUT_FAULT_INTERCEPTORS_PARAM
operator|.
name|equals
argument_list|(
name|paramName
argument_list|)
condition|)
block|{
name|bean
operator|.
name|setOutFaultInterceptors
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bean
operator|.
name|setInInterceptors
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|setInvoker
parameter_list|(
name|JAXRSServerFactoryBean
name|bean
parameter_list|,
name|ServletConfig
name|servletConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|value
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|INVOKER_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|theValue
init|=
name|getClassNameAndProperties
argument_list|(
name|value
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|theValue
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|intClass
init|=
name|loadClass
argument_list|(
name|theValue
argument_list|,
literal|"Invoker"
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|intClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|injectProperties
argument_list|(
name|object
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setInvoker
argument_list|(
operator|(
name|Invoker
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Invoker class "
operator|+
name|theValue
operator|+
literal|" can not be created"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getServiceClasses
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|,
name|boolean
name|modelAvailable
parameter_list|,
name|String
name|splitChar
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|serviceBeans
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|SERVICE_CLASSES_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceBeans
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|modelAvailable
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"At least one resource class should be specified"
argument_list|)
throw|;
block|}
name|String
index|[]
name|classNames
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|serviceBeans
argument_list|,
name|splitChar
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cName
range|:
name|classNames
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|theName
init|=
name|getClassNameAndProperties
argument_list|(
name|cName
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|theName
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|loadClass
argument_list|(
name|theName
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|cls
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"At least one resource class should be specified"
argument_list|)
throw|;
block|}
return|return
name|map
return|;
block|}
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|Feature
argument_list|>
name|getFeatures
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|,
name|String
name|splitChar
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|featuresList
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|FEATURES_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|featuresList
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|Feature
operator|>
name|emptyList
argument_list|()
return|;
block|}
name|String
index|[]
name|classNames
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|featuresList
argument_list|,
name|splitChar
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cName
range|:
name|classNames
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|theName
init|=
name|getClassNameAndProperties
argument_list|(
name|cName
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|theName
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|loadClass
argument_list|(
name|theName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Feature
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
operator|(
name|Feature
operator|)
name|createSingletonInstance
argument_list|(
name|cls
argument_list|,
name|props
argument_list|,
name|servletConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|features
return|;
block|}
specifier|protected
name|List
argument_list|<
name|?
argument_list|>
name|getProviders
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|,
name|String
name|splitChar
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|providersList
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|PROVIDERS_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|providersList
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|String
index|[]
name|classNames
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|providersList
argument_list|,
name|splitChar
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cName
range|:
name|classNames
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|theName
init|=
name|getClassNameAndProperties
argument_list|(
name|cName
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|theName
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|loadClass
argument_list|(
name|theName
argument_list|)
decl_stmt|;
name|providers
operator|.
name|add
argument_list|(
name|createSingletonInstance
argument_list|(
name|cls
argument_list|,
name|props
argument_list|,
name|servletConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|providers
return|;
block|}
specifier|private
name|String
name|getClassNameAndProperties
parameter_list|(
name|String
name|cName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|props
parameter_list|)
block|{
name|String
name|theName
init|=
name|cName
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|ind
init|=
name|theName
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind
operator|!=
operator|-
literal|1
operator|&&
name|theName
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
name|props
operator|.
name|putAll
argument_list|(
name|parseMapListSequence
argument_list|(
name|theName
operator|.
name|substring
argument_list|(
name|ind
operator|+
literal|1
argument_list|,
name|theName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|theName
operator|=
name|theName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
return|return
name|theName
return|;
block|}
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parseMapListSequence
parameter_list|(
name|String
name|sequence
parameter_list|)
block|{
if|if
condition|(
name|sequence
operator|!=
literal|null
condition|)
block|{
name|sequence
operator|=
name|sequence
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|pairs
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|sequence
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pair
range|:
name|pairs
control|)
block|{
name|String
name|thePair
init|=
name|pair
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|thePair
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|values
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|thePair
argument_list|,
literal|"="
argument_list|)
decl_stmt|;
name|String
name|key
decl_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|key
operator|=
name|values
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
name|value
operator|=
name|values
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
name|thePair
expr_stmt|;
name|value
operator|=
literal|""
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ResourceProvider
argument_list|>
name|getResourceProviders
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resourceClasses
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|scope
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|SERVICE_SCOPE_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
operator|&&
operator|!
name|SERVICE_SCOPE_SINGLETON
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
operator|&&
operator|!
name|SERVICE_SCOPE_REQUEST
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Only singleton and prototype scopes are supported"
argument_list|)
throw|;
block|}
name|boolean
name|isPrototype
init|=
name|SERVICE_SCOPE_REQUEST
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ResourceProvider
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ResourceProvider
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|resourceClasses
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|isPrototype
condition|?
operator|new
name|PerRequestResourceProvider
argument_list|(
name|c
argument_list|)
else|:
operator|new
name|SingletonResourceProvider
argument_list|(
name|createSingletonInstance
argument_list|(
name|c
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|servletConfig
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|protected
name|Object
name|createSingletonInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|props
parameter_list|,
name|ServletConfig
name|sc
parameter_list|)
throws|throws
name|ServletException
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
init|=
name|ResourceUtils
operator|.
name|findResourceConstructor
argument_list|(
name|cls
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No valid constructor found for "
operator|+
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|boolean
name|isApplication
init|=
name|Application
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ProviderInfo
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|provider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|isApplication
condition|)
block|{
name|provider
operator|=
operator|new
name|ApplicationInfo
argument_list|(
operator|(
name|Application
operator|)
name|c
operator|.
name|newInstance
argument_list|()
argument_list|,
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|provider
operator|=
operator|new
name|ProviderInfo
argument_list|<
name|Object
argument_list|>
argument_list|(
name|c
operator|.
name|newInstance
argument_list|()
argument_list|,
name|getBus
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|,
name|sc
operator|.
name|getServletContext
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
name|ServletConfig
operator|.
name|class
argument_list|,
name|sc
argument_list|)
expr_stmt|;
name|provider
operator|=
name|ProviderFactory
operator|.
name|createProviderFromConstructor
argument_list|(
name|c
argument_list|,
name|values
argument_list|,
name|getBus
argument_list|()
argument_list|,
name|isApplication
argument_list|)
expr_stmt|;
block|}
name|Object
name|instance
init|=
name|provider
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|injectProperties
argument_list|(
name|instance
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|configureSingleton
argument_list|(
name|instance
argument_list|)
expr_stmt|;
return|return
name|isApplication
condition|?
name|provider
else|:
name|instance
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Resource class "
operator|+
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be instantiated"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Resource class "
operator|+
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be instantiated due to IllegalAccessException"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Resource class "
operator|+
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be instantiated due to InvocationTargetException"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|injectProperties
parameter_list|(
name|Object
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|props
parameter_list|)
block|{
if|if
condition|(
name|props
operator|==
literal|null
operator|||
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Method
index|[]
name|methods
init|=
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|methodsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|methods
control|)
block|{
name|methodsMap
operator|.
name|put
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Method
name|m
init|=
name|methodsMap
operator|.
name|get
argument_list|(
literal|"set"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|value
decl_stmt|;
if|if
condition|(
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|value
operator|=
name|PrimitiveUtils
operator|.
name|read
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|InjectionUtils
operator|.
name|injectThroughMethod
argument_list|(
name|instance
argument_list|,
name|m
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|configureSingleton
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{              }
specifier|protected
name|void
name|createServerFromApplication
parameter_list|(
name|String
name|applicationNames
parameter_list|,
name|ServletConfig
name|servletConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|boolean
name|ignoreApplicationPath
init|=
name|isIgnoreApplicationPath
argument_list|(
name|servletConfig
argument_list|)
decl_stmt|;
name|String
index|[]
name|classNames
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|applicationNames
argument_list|,
name|getParameterSplitChar
argument_list|(
name|servletConfig
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|classNames
operator|.
name|length
operator|>
literal|1
operator|&&
name|ignoreApplicationPath
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"\""
operator|+
name|IGNORE_APP_PATH_PARAM
operator|+
literal|"\" parameter must be set to false for multiple Applications be supported"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|cName
range|:
name|classNames
control|)
block|{
name|ApplicationInfo
name|providerApp
init|=
name|createApplicationInfo
argument_list|(
name|cName
argument_list|,
name|servletConfig
argument_list|)
decl_stmt|;
name|JAXRSServerFactoryBean
name|bean
init|=
name|ResourceUtils
operator|.
name|createApplication
argument_list|(
name|providerApp
operator|.
name|getProvider
argument_list|()
argument_list|,
name|ignoreApplicationPath
argument_list|,
name|getStaticSubResolutionValue
argument_list|(
name|servletConfig
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|splitChar
init|=
name|getParameterSplitChar
argument_list|(
name|servletConfig
argument_list|)
decl_stmt|;
name|setAllInterceptors
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|,
name|splitChar
argument_list|)
expr_stmt|;
name|setInvoker
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
name|setExtensions
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
name|setDocLocation
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
name|setSchemasLocations
argument_list|(
name|bean
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setApplication
argument_list|(
name|providerApp
argument_list|)
expr_stmt|;
name|bean
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|isIgnoreApplicationPath
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|)
block|{
name|String
name|ignoreParam
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|IGNORE_APP_PATH_PARAM
argument_list|)
decl_stmt|;
return|return
name|ignoreParam
operator|==
literal|null
operator|||
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|ignoreParam
argument_list|)
return|;
block|}
specifier|protected
name|void
name|createServerFromApplication
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|JAXRSServerFactoryBean
name|bean
init|=
name|ResourceUtils
operator|.
name|createApplication
argument_list|(
name|getApplication
argument_list|()
argument_list|,
name|isIgnoreApplicationPath
argument_list|(
name|servletConfig
argument_list|)
argument_list|,
name|getStaticSubResolutionValue
argument_list|(
name|servletConfig
argument_list|)
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setApplication
argument_list|(
name|getApplication
argument_list|()
argument_list|)
expr_stmt|;
name|bean
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Application
name|createApplicationInstance
parameter_list|(
name|String
name|appClassName
parameter_list|,
name|ServletConfig
name|servletConfig
parameter_list|)
throws|throws
name|ServletException
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|ApplicationInfo
name|createApplicationInfo
parameter_list|(
name|String
name|appClassName
parameter_list|,
name|ServletConfig
name|servletConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|Application
name|customApp
init|=
name|createApplicationInstance
argument_list|(
name|appClassName
argument_list|,
name|servletConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|customApp
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ApplicationInfo
argument_list|(
name|customApp
argument_list|,
name|getBus
argument_list|()
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|appClassName
operator|=
name|getClassNameAndProperties
argument_list|(
name|appClassName
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|appClass
init|=
name|loadApplicationClass
argument_list|(
name|appClassName
argument_list|)
decl_stmt|;
name|ApplicationInfo
name|appInfo
init|=
operator|(
name|ApplicationInfo
operator|)
name|createSingletonInstance
argument_list|(
name|appClass
argument_list|,
name|props
argument_list|,
name|servletConfig
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|servletProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ServletContext
name|servletContext
init|=
name|servletConfig
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|names
init|=
name|servletContext
operator|.
name|getInitParameterNames
argument_list|()
init|;
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|servletProps
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|servletContext
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|names
init|=
name|servletConfig
operator|.
name|getInitParameterNames
argument_list|()
init|;
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|servletProps
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|appInfo
operator|.
name|setOverridingProps
argument_list|(
name|servletProps
argument_list|)
expr_stmt|;
return|return
name|appInfo
return|;
block|}
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|loadApplicationClass
parameter_list|(
name|String
name|appClassName
parameter_list|)
throws|throws
name|ServletException
block|{
return|return
name|loadClass
argument_list|(
name|appClassName
argument_list|,
literal|"Application"
argument_list|)
return|;
block|}
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|cName
parameter_list|)
throws|throws
name|ServletException
block|{
return|return
name|loadClass
argument_list|(
name|cName
argument_list|,
literal|"Resource"
argument_list|)
return|;
block|}
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|cName
parameter_list|,
name|String
name|classType
parameter_list|)
throws|throws
name|ServletException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|cls
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|cName
argument_list|,
name|CXFNonSpringJaxrsServlet
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cls
operator|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|cName
argument_list|)
expr_stmt|;
block|}
return|return
name|cls
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No "
operator|+
name|classType
operator|+
literal|" class "
operator|+
name|cName
operator|.
name|trim
argument_list|()
operator|+
literal|" can be found"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setClassLoader
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|classLoader
operator|=
name|loader
expr_stmt|;
block|}
specifier|protected
name|Application
name|getApplication
parameter_list|()
block|{
return|return
name|application
return|;
block|}
specifier|private
specifier|static
class|class
name|ApplicationImpl
extends|extends
name|Application
block|{
specifier|private
name|Set
argument_list|<
name|Object
argument_list|>
name|applicationSingletons
decl_stmt|;
specifier|public
name|ApplicationImpl
parameter_list|(
name|Set
argument_list|<
name|Object
argument_list|>
name|applicationSingletons
parameter_list|)
block|{
name|this
operator|.
name|applicationSingletons
operator|=
name|applicationSingletons
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|getSingletons
parameter_list|()
block|{
return|return
name|applicationSingletons
return|;
block|}
block|}
block|}
end_class

end_unit

