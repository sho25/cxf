begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|XMLEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractOutDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|WriterInterceptorMBW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|AbstractConfigurableProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ServerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|HttpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|CachingXmlEventWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_class
specifier|public
class|class
name|JAXRSOutInterceptor
extends|extends
name|AbstractOutDatabindingInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JAXRSOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|JAXRSOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|JAXRSOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|MARSHAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|ServerProviderFactory
name|providerFactory
init|=
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|(
name|message
argument_list|)
decl_stmt|;
try|try
block|{
name|processResponse
argument_list|(
name|providerFactory
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ServerProviderFactory
operator|.
name|releaseRequestState
argument_list|(
name|providerFactory
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
comment|// Response shouldn't be closed here
specifier|private
name|void
name|processResponse
parameter_list|(
name|ServerProviderFactory
name|providerFactory
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|isResponseAlreadyHandled
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return;
block|}
name|MessageContentsList
name|objs
init|=
name|MessageContentsList
operator|.
name|getContentsList
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|objs
operator|==
literal|null
operator|||
name|objs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Object
name|responseObj
init|=
name|objs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|responseObj
operator|instanceof
name|Response
condition|)
block|{
name|response
operator|=
operator|(
name|Response
operator|)
name|responseObj
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
literal|500
operator|&&
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|JAXRSUtils
operator|.
name|EXCEPTION_FROM_MAPPER
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
literal|500
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|int
name|status
init|=
name|getStatus
argument_list|(
name|message
argument_list|,
name|responseObj
operator|!=
literal|null
condition|?
literal|200
else|:
literal|204
argument_list|)
decl_stmt|;
name|response
operator|=
name|JAXRSUtils
operator|.
name|toResponseBuilder
argument_list|(
name|status
argument_list|)
operator|.
name|entity
argument_list|(
name|responseObj
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|OperationResourceInfo
name|ori
init|=
operator|(
name|OperationResourceInfo
operator|)
name|exchange
operator|.
name|get
argument_list|(
name|OperationResourceInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|serializeMessage
argument_list|(
name|providerFactory
argument_list|,
name|message
argument_list|,
name|response
argument_list|,
name|ori
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getStatus
parameter_list|(
name|Message
name|message
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|Object
name|customStatus
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
return|return
name|customStatus
operator|==
literal|null
condition|?
name|defaultValue
else|:
operator|(
name|Integer
operator|)
name|customStatus
return|;
block|}
specifier|private
name|void
name|serializeMessage
parameter_list|(
name|ServerProviderFactory
name|providerFactory
parameter_list|,
name|Message
name|message
parameter_list|,
name|Response
name|theResponse
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|boolean
name|firstTry
parameter_list|)
block|{
name|ResponseImpl
name|response
init|=
operator|(
name|ResponseImpl
operator|)
name|JAXRSUtils
operator|.
name|copyResponseIfNeeded
argument_list|(
name|theResponse
argument_list|)
decl_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|boolean
name|headResponse
init|=
name|response
operator|.
name|getStatus
argument_list|()
operator|==
literal|200
operator|&&
name|firstTry
operator|&&
name|ori
operator|!=
literal|null
operator|&&
name|HttpMethod
operator|.
name|HEAD
operator|.
name|equals
argument_list|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|entity
init|=
name|response
operator|.
name|getActualEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|headResponse
operator|&&
name|entity
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"HEAD_WITHOUT_ENTITY"
argument_list|,
name|BUNDLE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|=
literal|null
expr_stmt|;
block|}
name|Method
name|invoked
init|=
name|ori
operator|==
literal|null
condition|?
literal|null
else|:
name|ori
operator|.
name|getAnnotatedMethod
argument_list|()
operator|!=
literal|null
condition|?
name|ori
operator|.
name|getAnnotatedMethod
argument_list|()
else|:
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
decl_stmt|;
name|Annotation
index|[]
name|annotations
init|=
literal|null
decl_stmt|;
name|Annotation
index|[]
name|staticAnns
init|=
name|ori
operator|!=
literal|null
condition|?
name|ori
operator|.
name|getOutAnnotations
argument_list|()
else|:
operator|new
name|Annotation
index|[]
block|{}
decl_stmt|;
name|Annotation
index|[]
name|responseAnns
init|=
name|response
operator|.
name|getEntityAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseAnns
operator|!=
literal|null
condition|)
block|{
name|annotations
operator|=
operator|new
name|Annotation
index|[
name|staticAnns
operator|.
name|length
operator|+
name|responseAnns
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|staticAnns
argument_list|,
literal|0
argument_list|,
name|annotations
argument_list|,
literal|0
argument_list|,
name|staticAnns
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|responseAnns
argument_list|,
literal|0
argument_list|,
name|annotations
argument_list|,
name|staticAnns
operator|.
name|length
argument_list|,
name|responseAnns
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|annotations
operator|=
name|staticAnns
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|getActualStatus
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|,
name|annotations
argument_list|)
expr_stmt|;
comment|// Prepare the headers
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseHeaders
init|=
name|prepareResponseHeaders
argument_list|(
name|message
argument_list|,
name|response
argument_list|,
name|entity
argument_list|,
name|firstTry
argument_list|)
decl_stmt|;
comment|// Run the filters
try|try
block|{
name|JAXRSUtils
operator|.
name|runContainerResponseFilters
argument_list|(
name|providerFactory
argument_list|,
name|response
argument_list|,
name|message
argument_list|,
name|ori
argument_list|,
name|invoked
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|handleWriteException
argument_list|(
name|providerFactory
argument_list|,
name|message
argument_list|,
name|ex
argument_list|,
name|firstTry
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Write the entity
name|entity
operator|=
name|InjectionUtils
operator|.
name|getEntity
argument_list|(
name|response
operator|.
name|getActualEntity
argument_list|()
argument_list|)
expr_stmt|;
name|setResponseStatus
argument_list|(
name|message
argument_list|,
name|getActualStatus
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|headResponse
condition|)
block|{
name|responseHeaders
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
literal|"remove.content.type.for.empty.response"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|responseHeaders
operator|.
name|remove
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
name|message
operator|.
name|remove
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
name|HttpUtils
operator|.
name|convertHeaderValuesToString
argument_list|(
name|responseHeaders
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|Object
name|ignoreWritersProp
init|=
name|exchange
operator|.
name|get
argument_list|(
name|JAXRSUtils
operator|.
name|IGNORE_MESSAGE_WRITERS
argument_list|)
decl_stmt|;
name|boolean
name|ignoreWriters
init|=
name|ignoreWritersProp
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|valueOf
argument_list|(
name|ignoreWritersProp
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignoreWriters
condition|)
block|{
name|writeResponseToStream
argument_list|(
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
argument_list|,
name|entity
argument_list|)
expr_stmt|;
return|return;
block|}
name|MediaType
name|responseMediaType
init|=
name|getResponseMediaType
argument_list|(
name|responseHeaders
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|serviceCls
init|=
name|invoked
operator|!=
literal|null
condition|?
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getServiceClass
argument_list|()
else|:
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|targetType
init|=
name|InjectionUtils
operator|.
name|getRawResponseClass
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|Type
name|genericType
init|=
name|InjectionUtils
operator|.
name|getGenericResponseType
argument_list|(
name|invoked
argument_list|,
name|serviceCls
argument_list|,
name|response
operator|.
name|getActualEntity
argument_list|()
argument_list|,
name|targetType
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|targetType
operator|=
name|InjectionUtils
operator|.
name|updateParamClassToTypeIfNeeded
argument_list|(
name|targetType
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
name|annotations
operator|=
name|response
operator|.
name|getEntityAnnotations
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|WriterInterceptor
argument_list|>
name|writers
init|=
name|providerFactory
operator|.
name|createMessageBodyWriterInterceptor
argument_list|(
name|targetType
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|responseMediaType
argument_list|,
name|message
argument_list|,
name|ori
operator|==
literal|null
condition|?
literal|null
else|:
name|ori
operator|.
name|getNameBindings
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|outOriginal
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|writers
operator|==
literal|null
operator|||
name|writers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeResponseErrorMessage
argument_list|(
name|message
argument_list|,
name|outOriginal
argument_list|,
literal|"NO_MSG_WRITER"
argument_list|,
name|targetType
argument_list|,
name|responseMediaType
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|boolean
name|checkWriters
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|responseMediaType
operator|.
name|isWildcardSubtype
argument_list|()
condition|)
block|{
name|Produces
name|pM
init|=
name|AnnotationUtils
operator|.
name|getMethodAnnotation
argument_list|(
name|ori
operator|==
literal|null
condition|?
literal|null
else|:
name|ori
operator|.
name|getAnnotatedMethod
argument_list|()
argument_list|,
name|Produces
operator|.
name|class
argument_list|)
decl_stmt|;
name|Produces
name|pC
init|=
name|AnnotationUtils
operator|.
name|getClassAnnotation
argument_list|(
name|serviceCls
argument_list|,
name|Produces
operator|.
name|class
argument_list|)
decl_stmt|;
name|checkWriters
operator|=
name|pM
operator|==
literal|null
operator|&&
name|pC
operator|==
literal|null
expr_stmt|;
block|}
name|responseMediaType
operator|=
name|checkFinalContentType
argument_list|(
name|responseMediaType
argument_list|,
name|writers
argument_list|,
name|checkWriters
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|handleWriteException
argument_list|(
name|providerFactory
argument_list|,
name|message
argument_list|,
name|ex
argument_list|,
name|firstTry
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|finalResponseContentType
init|=
name|JAXRSUtils
operator|.
name|mediaTypeToString
argument_list|(
name|responseMediaType
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Response content type is: "
operator|+
name|finalResponseContentType
argument_list|)
expr_stmt|;
block|}
name|responseHeaders
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|finalResponseContentType
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|finalResponseContentType
argument_list|)
expr_stmt|;
name|boolean
name|enabled
init|=
name|checkBufferingMode
argument_list|(
name|message
argument_list|,
name|writers
argument_list|,
name|firstTry
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|JAXRSUtils
operator|.
name|writeMessageBody
argument_list|(
name|writers
argument_list|,
name|entity
argument_list|,
name|targetType
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|responseMediaType
argument_list|,
name|responseHeaders
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|isResponseRedirected
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return;
block|}
name|checkCachedStream
argument_list|(
name|message
argument_list|,
name|outOriginal
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|OutputStream
name|os
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|!=
name|outOriginal
operator|&&
name|os
operator|instanceof
name|CachedOutputStream
condition|)
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|outOriginal
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|XMLStreamWriter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|logWriteError
argument_list|(
name|firstTry
argument_list|,
name|targetType
argument_list|,
name|responseMediaType
argument_list|)
expr_stmt|;
name|handleWriteException
argument_list|(
name|providerFactory
argument_list|,
name|message
argument_list|,
name|ex
argument_list|,
name|firstTry
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|prepareResponseHeaders
parameter_list|(
name|Message
name|message
parameter_list|,
name|ResponseImpl
name|response
parameter_list|,
name|Object
name|entity
parameter_list|,
name|boolean
name|firstTry
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseHeaders
init|=
name|response
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|userHeaders
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstTry
operator|&&
name|userHeaders
operator|!=
literal|null
condition|)
block|{
name|responseHeaders
operator|.
name|putAll
argument_list|(
name|userHeaders
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|Object
name|customContentType
init|=
name|responseHeaders
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|customContentType
operator|==
literal|null
condition|)
block|{
name|String
name|initialResponseContentType
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialResponseContentType
operator|!=
literal|null
condition|)
block|{
name|responseHeaders
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|initialResponseContentType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|customContentType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|responseHeaders
argument_list|)
expr_stmt|;
name|setResponseDate
argument_list|(
name|responseHeaders
argument_list|,
name|firstTry
argument_list|)
expr_stmt|;
return|return
name|responseHeaders
return|;
block|}
specifier|private
name|MediaType
name|getResponseMediaType
parameter_list|(
name|Object
name|mediaTypeHeader
parameter_list|)
block|{
name|MediaType
name|responseMediaType
decl_stmt|;
if|if
condition|(
name|mediaTypeHeader
operator|instanceof
name|MediaType
condition|)
block|{
name|responseMediaType
operator|=
operator|(
name|MediaType
operator|)
name|mediaTypeHeader
expr_stmt|;
block|}
else|else
block|{
name|responseMediaType
operator|=
name|mediaTypeHeader
operator|==
literal|null
condition|?
name|MediaType
operator|.
name|WILDCARD_TYPE
else|:
name|JAXRSUtils
operator|.
name|toMediaType
argument_list|(
name|mediaTypeHeader
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|responseMediaType
return|;
block|}
specifier|private
name|int
name|getActualStatus
parameter_list|(
name|int
name|status
parameter_list|,
name|Object
name|responseObj
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|responseObj
operator|==
literal|null
condition|?
literal|204
else|:
literal|200
return|;
block|}
return|return
name|status
return|;
block|}
specifier|private
name|boolean
name|checkBufferingMode
parameter_list|(
name|Message
name|m
parameter_list|,
name|List
argument_list|<
name|WriterInterceptor
argument_list|>
name|writers
parameter_list|,
name|boolean
name|firstTry
parameter_list|)
block|{
if|if
condition|(
operator|!
name|firstTry
condition|)
block|{
return|return
literal|false
return|;
block|}
name|WriterInterceptor
name|last
init|=
name|writers
operator|.
name|get
argument_list|(
name|writers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
name|w
init|=
operator|(
operator|(
name|WriterInterceptorMBW
operator|)
name|last
operator|)
operator|.
name|getMBW
argument_list|()
decl_stmt|;
name|Object
name|outBuf
init|=
name|m
operator|.
name|getContextualProperty
argument_list|(
name|OUT_BUFFERING
argument_list|)
decl_stmt|;
name|boolean
name|enabled
init|=
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|outBuf
argument_list|)
decl_stmt|;
name|boolean
name|configurableProvider
init|=
name|w
operator|instanceof
name|AbstractConfigurableProvider
decl_stmt|;
if|if
condition|(
operator|!
name|enabled
operator|&&
name|outBuf
operator|==
literal|null
operator|&&
name|configurableProvider
condition|)
block|{
name|enabled
operator|=
operator|(
operator|(
name|AbstractConfigurableProvider
operator|)
name|w
operator|)
operator|.
name|getEnableBuffering
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|enabled
condition|)
block|{
name|boolean
name|streamingOn
init|=
name|configurableProvider
operator|&&
operator|(
operator|(
name|AbstractConfigurableProvider
operator|)
name|w
operator|)
operator|.
name|getEnableStreaming
argument_list|()
decl_stmt|;
if|if
condition|(
name|streamingOn
condition|)
block|{
name|m
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
operator|new
name|CachingXmlEventWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
operator|new
name|CachedOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|enabled
return|;
block|}
specifier|private
name|void
name|checkCachedStream
parameter_list|(
name|Message
name|m
parameter_list|,
name|OutputStream
name|osOriginal
parameter_list|,
name|boolean
name|enabled
parameter_list|)
throws|throws
name|Exception
block|{
name|XMLStreamWriter
name|writer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|writer
operator|=
name|m
operator|.
name|getContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|=
operator|(
name|XMLStreamWriter
operator|)
name|m
operator|.
name|get
argument_list|(
name|XMLStreamWriter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|instanceof
name|CachingXmlEventWriter
condition|)
block|{
name|CachingXmlEventWriter
name|cache
init|=
operator|(
name|CachingXmlEventWriter
operator|)
name|writer
decl_stmt|;
if|if
condition|(
name|cache
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|XMLStreamWriter
name|origWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|origWriter
operator|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|osOriginal
argument_list|)
expr_stmt|;
for|for
control|(
name|XMLEvent
name|event
range|:
name|cache
operator|.
name|getEvents
argument_list|()
control|)
block|{
name|StaxUtils
operator|.
name|writeEvent
argument_list|(
name|event
argument_list|,
name|origWriter
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|StaxUtils
operator|.
name|close
argument_list|(
name|origWriter
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|enabled
condition|)
block|{
name|OutputStream
name|os
init|=
name|m
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|!=
name|osOriginal
operator|&&
name|os
operator|instanceof
name|CachedOutputStream
condition|)
block|{
name|CachedOutputStream
name|cos
init|=
operator|(
name|CachedOutputStream
operator|)
name|os
decl_stmt|;
if|if
condition|(
name|cos
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|cos
operator|.
name|writeCacheTo
argument_list|(
name|osOriginal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|logWriteError
parameter_list|(
name|boolean
name|firstTry
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|MediaType
name|ct
parameter_list|)
block|{
if|if
condition|(
name|firstTry
condition|)
block|{
name|JAXRSUtils
operator|.
name|logMessageHandlerProblem
argument_list|(
literal|"MSG_WRITER_PROBLEM"
argument_list|,
name|cls
argument_list|,
name|ct
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleWriteException
parameter_list|(
name|ServerProviderFactory
name|pf
parameter_list|,
name|Message
name|message
parameter_list|,
name|Throwable
name|ex
parameter_list|,
name|boolean
name|firstTry
parameter_list|)
block|{
name|Response
name|excResponse
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|firstTry
condition|)
block|{
name|excResponse
operator|=
name|JAXRSUtils
operator|.
name|convertFaultToResponse
argument_list|(
name|ex
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|JAXRSUtils
operator|.
name|SECOND_JAXRS_EXCEPTION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excResponse
operator|==
literal|null
condition|)
block|{
name|setResponseStatus
argument_list|(
name|message
argument_list|,
literal|500
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|serializeMessage
argument_list|(
name|pf
argument_list|,
name|message
argument_list|,
name|excResponse
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeResponseErrorMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|MediaType
name|ct
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
literal|500
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|errorMessage
init|=
name|JAXRSUtils
operator|.
name|logMessageHandlerProblem
argument_list|(
name|name
argument_list|,
name|cls
argument_list|,
name|ct
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|errorMessage
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|another
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|private
name|MediaType
name|checkFinalContentType
parameter_list|(
name|MediaType
name|mt
parameter_list|,
name|List
argument_list|<
name|WriterInterceptor
argument_list|>
name|writers
parameter_list|,
name|boolean
name|checkWriters
parameter_list|)
block|{
if|if
condition|(
name|checkWriters
condition|)
block|{
name|int
name|mbwIndex
init|=
name|writers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|0
else|:
name|writers
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
name|writer
init|=
operator|(
operator|(
name|WriterInterceptorMBW
operator|)
name|writers
operator|.
name|get
argument_list|(
name|mbwIndex
argument_list|)
operator|)
operator|.
name|getMBW
argument_list|()
decl_stmt|;
name|Produces
name|pm
init|=
name|writer
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Produces
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pm
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|sorted
init|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|JAXRSUtils
operator|.
name|getMediaTypes
argument_list|(
name|pm
operator|.
name|value
argument_list|()
argument_list|)
argument_list|,
name|JAXRSUtils
operator|.
name|MEDIA_TYPE_QS_PARAM
argument_list|)
decl_stmt|;
name|mt
operator|=
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|sorted
argument_list|,
name|mt
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mt
operator|.
name|isWildcardType
argument_list|()
operator|||
name|mt
operator|.
name|isWildcardSubtype
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"application"
operator|.
name|equals
argument_list|(
name|mt
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
name|mt
operator|.
name|isWildcardType
argument_list|()
condition|)
block|{
name|mt
operator|=
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toNotAcceptableException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
return|return
name|mt
return|;
block|}
specifier|private
name|void
name|setResponseDate
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|boolean
name|firstTry
parameter_list|)
block|{
if|if
condition|(
operator|!
name|firstTry
operator|||
name|headers
operator|.
name|containsKey
argument_list|(
name|HttpHeaders
operator|.
name|DATE
argument_list|)
condition|)
block|{
return|return;
block|}
name|SimpleDateFormat
name|format
init|=
name|HttpUtils
operator|.
name|getHttpDateFormat
argument_list|()
decl_stmt|;
name|headers
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|DATE
argument_list|,
name|format
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isResponseAlreadyHandled
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
return|return
name|isResponseAlreadyCommited
argument_list|(
name|m
argument_list|)
operator|||
name|isResponseRedirected
argument_list|(
name|m
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isResponseAlreadyCommited
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|RESPONSE_COMMITED
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isResponseRedirected
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|REQUEST_REDIRECTED
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeResponseToStream
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|Object
name|responseObj
parameter_list|)
block|{
try|try
block|{
name|byte
index|[]
name|bytes
init|=
name|responseObj
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Problem with writing the data to the output stream"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|setResponseStatus
parameter_list|(
name|Message
name|message
parameter_list|,
name|int
name|status
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|boolean
name|responseHeadersCopied
init|=
name|isResponseHeadersCopied
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseHeadersCopied
condition|)
block|{
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|message
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_RESPONSE
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Some CXF interceptors such as FIStaxOutInterceptor will indirectly initiate
comment|// an early copying of response code and headers into the HttpServletResponse
comment|// TODO : Pushing the filter processing and copying response headers into say
comment|// PRE-LOGICAl and PREPARE_SEND interceptors will most likely be a good thing
comment|// however JAX-RS MessageBodyWriters are also allowed to add response headers
comment|// which is reason why a MultipartMap parameter in MessageBodyWriter.writeTo
comment|// method is modifiable. Thus we do need to know if the initial copy has already
comment|// occurred: for now we will just use to ensure the correct status is set
specifier|private
name|boolean
name|isResponseHeadersCopied
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|RESPONSE_HEADERS_COPIED
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
comment|// complete
block|}
block|}
end_class

end_unit

