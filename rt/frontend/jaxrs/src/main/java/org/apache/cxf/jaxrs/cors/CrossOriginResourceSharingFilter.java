begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|cors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|RequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * An single class that provides both an input and an output filter for CORS, following  * http://www.w3.org/TR/cors/. The input examines the input headers. If the request is valid, it stores the  * information in the Exchange to allow the response handler to add the appropriate headers to the response.  * If you need complex or subtle control of the behavior here (e.g. clearing the prefight cache) you might be  * better off reading the source of this and implementing this inside your service.  */
end_comment

begin_class
specifier|public
class|class
name|CrossOriginResourceSharingFilter
implements|implements
name|RequestHandler
implements|,
name|ResponseHandler
block|{
annotation|@
name|Context
specifier|private
name|HttpHeaders
name|headers
decl_stmt|;
comment|/**      * This would be a rather painful list to maintain for real, since it's entirely dependent on the      * deployment.      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|allowOrigins
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|allowMethods
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|allowHeaders
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|allowAllOrigins
decl_stmt|;
specifier|private
name|boolean
name|allowCredentials
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|exposeHeaders
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|Integer
name|maxAge
decl_stmt|;
specifier|private
name|CrossOriginResourceSharing
name|getAnnotation
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
return|return
name|ReflectionUtil
operator|.
name|getAnnotationForMethodOrContainingClass
argument_list|(
name|ori
operator|.
name|getAnnotatedMethod
argument_list|()
argument_list|,
name|CrossOriginResourceSharing
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|Response
name|handleRequest
parameter_list|(
name|Message
name|m
parameter_list|,
name|ClassResourceInfo
name|resourceClass
parameter_list|)
block|{
name|OperationResourceInfo
name|opResInfo
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|OperationResourceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|CrossOriginResourceSharing
name|annotation
init|=
name|getAnnotation
argument_list|(
name|opResInfo
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"OPTIONS"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
argument_list|)
condition|)
block|{
comment|// what if someone wants to use options for something else, and also for preflight?
comment|// in that case, they set the localPreflight flag, and we bow out.
if|if
condition|(
name|opResInfo
operator|!=
literal|null
operator|&&
operator|(
name|annotation
operator|==
literal|null
operator|||
name|annotation
operator|.
name|localPreflight
argument_list|()
operator|)
condition|)
block|{
return|return
literal|null
return|;
comment|// continue handling
block|}
return|return
name|preflightRequest
argument_list|(
name|m
argument_list|,
name|annotation
argument_list|,
name|resourceClass
argument_list|)
return|;
block|}
return|return
name|simpleRequest
argument_list|(
name|m
argument_list|,
name|annotation
argument_list|)
return|;
block|}
specifier|private
name|Response
name|simpleRequest
parameter_list|(
name|Message
name|m
parameter_list|,
name|CrossOriginResourceSharing
name|ann
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_ORIGIN
argument_list|)
decl_stmt|;
comment|// 5.1.1 there has to be an origin
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 5.1.2 check all the origins
if|if
condition|(
operator|!
name|effectiveAllowAllOrigins
argument_list|(
name|ann
argument_list|)
operator|&&
operator|!
name|effectiveAllowOrigins
argument_list|(
name|ann
argument_list|)
operator|.
name|containsAll
argument_list|(
name|values
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 5.1.3 credentials lives in the output filter
comment|// in any case
if|if
condition|(
name|effectiveAllowAllOrigins
argument_list|(
name|ann
argument_list|)
condition|)
block|{
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_ORIGIN
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_ORIGIN
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
comment|// 5.1.4 expose headers lives on the output side.
comment|// note what kind of processing we're doing.
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|CrossOriginResourceSharingFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * handle preflight.      *       * @param m the incoming message.      * @param ann the annotation, if any, derived from a method that matched the OPTIONS request for the      *            preflight. probably completely useless.      * @param resourceClass the resource class passed into the filter.      * @return      */
specifier|private
name|Response
name|preflightRequest
parameter_list|(
name|Message
name|m
parameter_list|,
name|CrossOriginResourceSharing
name|optionAnn
parameter_list|,
name|ClassResourceInfo
name|resourceClass
parameter_list|)
block|{
comment|/*          * CORS doesn't send enough information with a preflight to accurately identity the single method          * that will handle the request. So the code uses annotations from the containing class,          * only.           */
name|CrossOriginResourceSharing
name|ann
init|=
name|resourceClass
operator|.
name|getResourceClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|CrossOriginResourceSharing
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_ORIGIN
argument_list|)
decl_stmt|;
name|String
name|origin
decl_stmt|;
comment|// 5.2.1 -- must have origin, must have one origin.
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|origin
operator|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// 5.2.2 must be on the list or we must be matching *.
name|boolean
name|effectiveAllowAllOrigins
init|=
name|effectiveAllowAllOrigins
argument_list|(
name|ann
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|effectiveAllowAllOrigins
operator|&&
operator|!
name|effectiveAllowOrigins
argument_list|(
name|ann
argument_list|)
operator|.
name|contains
argument_list|(
name|origin
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|values
operator|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_AC_REQUEST_METHOD
argument_list|)
expr_stmt|;
comment|// 5.2.3 must have access-control-request-method, must be single-valued
comment|// we should reject parse errors but we cannot.
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|requestMethod
init|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// 5.2.4 get list of request headers. we should reject parse errors but we cannot.
name|List
argument_list|<
name|String
argument_list|>
name|requestHeaders
init|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_AC_REQUEST_HEADERS
argument_list|)
decl_stmt|;
comment|// 5.2.5 reject if the method is not on the list.
name|List
argument_list|<
name|String
argument_list|>
name|effectiveAllowMethods
init|=
name|effectiveAllowMethods
argument_list|(
name|ann
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|effectiveAllowMethods
operator|.
name|contains
argument_list|(
name|requestMethod
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 5.2.6 reject if the header is not listed.
if|if
condition|(
operator|!
name|effectiveAllowHeaders
argument_list|(
name|ann
argument_list|)
operator|.
name|containsAll
argument_list|(
name|requestHeaders
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 5.2.7: add allow credentials and allow-origin as required: this lives in the Output filter
if|if
condition|(
name|effectiveAllowAllOrigins
argument_list|(
name|ann
argument_list|)
condition|)
block|{
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_ORIGIN
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_ORIGIN
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
comment|// 5.2.8 max-age lives in the output filter.
comment|// 5.2.9 add allow-methods; we pass them from here to the output filter which actually adds them.
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_METHODS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|requestMethod
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5.2.10 add allow-headers; we pass them from here to the output filter which actually adds them.
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_HEADERS
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|CrossOriginResourceSharingFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"preflight"
argument_list|)
expr_stmt|;
comment|// and allow things to proceed to the output filter.
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Response
name|handleResponse
parameter_list|(
name|Message
name|m
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
name|String
name|op
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|CrossOriginResourceSharingFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
return|return
name|response
return|;
comment|// we're not here.
block|}
name|CrossOriginResourceSharing
name|annotation
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|originHeader
init|=
name|getHeadersFromInput
argument_list|(
name|m
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_ORIGIN
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rbuilder
init|=
name|Response
operator|.
name|fromResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"simple"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|annotation
operator|=
name|getAnnotation
argument_list|(
name|ori
argument_list|)
expr_stmt|;
comment|// 5.1.3: add Allow-Origin supplied from the input side, plus allow-credentials as requested
name|addHeaders
argument_list|(
name|rbuilder
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_ORIGIN
argument_list|,
name|originHeader
argument_list|)
expr_stmt|;
name|rbuilder
operator|.
name|header
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_CREDENTIALS
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|effectiveAllowCredentials
argument_list|(
name|annotation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5.1.4 add allowed headers
name|List
argument_list|<
name|String
argument_list|>
name|rqAllowedHeaders
init|=
name|getHeadersFromInput
argument_list|(
name|m
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|rqAllowedHeaders
operator|!=
literal|null
condition|)
block|{
name|addHeaders
argument_list|(
name|rbuilder
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_METHODS
argument_list|,
name|rqAllowedHeaders
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|effectiveExposeHeaders
init|=
name|effectiveExposeHeaders
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|effectiveExposeHeaders
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addHeaders
argument_list|(
name|rbuilder
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_AC_EXPOSE_HEADERS
argument_list|,
name|effectiveExposeHeaders
argument_list|)
expr_stmt|;
block|}
comment|// if someone wants to clear the cache, we can't help them.
return|return
name|rbuilder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|annotation
operator|=
name|ori
operator|.
name|getAnnotatedMethod
argument_list|()
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|CrossOriginResourceSharing
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// preflight
comment|// 5.2.7 add Allow-Origin supplied from the input side, plus allow-credentials as requested
name|addHeaders
argument_list|(
name|rbuilder
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_ORIGIN
argument_list|,
name|originHeader
argument_list|)
expr_stmt|;
name|rbuilder
operator|.
name|header
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_CREDENTIALS
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|allowCredentials
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5.2.8 max-age
if|if
condition|(
name|effectiveMaxAge
argument_list|(
name|annotation
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|rbuilder
operator|.
name|header
argument_list|(
name|CorsHeaderConstants
operator|.
name|HEADER_AC_MAX_AGE
argument_list|,
name|effectiveMaxAge
argument_list|(
name|annotation
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 5.2.9 add allowed methods
comment|/*              * Currently, input side just lists the one requested method, and spec endorses that.              */
name|addHeaders
argument_list|(
name|rbuilder
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_METHODS
argument_list|,
name|getHeadersFromInput
argument_list|(
name|m
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_METHODS
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5.2.10 add allowed headers
name|List
argument_list|<
name|String
argument_list|>
name|rqAllowedHeaders
init|=
name|getHeadersFromInput
argument_list|(
name|m
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|rqAllowedHeaders
operator|!=
literal|null
condition|)
block|{
name|addHeaders
argument_list|(
name|rbuilder
argument_list|,
name|CorsHeaderConstants
operator|.
name|HEADER_AC_ALLOW_HEADERS
argument_list|,
name|rqAllowedHeaders
argument_list|)
expr_stmt|;
block|}
return|return
name|rbuilder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|private
name|boolean
name|effectiveAllowAllOrigins
parameter_list|(
name|CrossOriginResourceSharing
name|ann
parameter_list|)
block|{
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
return|return
name|ann
operator|.
name|allowAllOrigins
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|allowAllOrigins
return|;
block|}
block|}
specifier|private
name|boolean
name|effectiveAllowCredentials
parameter_list|(
name|CrossOriginResourceSharing
name|ann
parameter_list|)
block|{
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
return|return
name|ann
operator|.
name|allowCredentials
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|allowCredentials
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|effectiveAllowOrigins
parameter_list|(
name|CrossOriginResourceSharing
name|ann
parameter_list|)
block|{
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ann
operator|.
name|allowOrigins
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ann
operator|.
name|allowOrigins
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|allowOrigins
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|effectiveAllowMethods
parameter_list|(
name|CrossOriginResourceSharing
name|ann
parameter_list|)
block|{
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ann
operator|.
name|allowMethods
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ann
operator|.
name|allowMethods
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|allowMethods
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|effectiveAllowHeaders
parameter_list|(
name|CrossOriginResourceSharing
name|ann
parameter_list|)
block|{
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ann
operator|.
name|allowHeaders
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ann
operator|.
name|allowHeaders
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|allowHeaders
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|effectiveExposeHeaders
parameter_list|(
name|CrossOriginResourceSharing
name|ann
parameter_list|)
block|{
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ann
operator|.
name|exposeHeaders
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ann
operator|.
name|exposeHeaders
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|exposeHeaders
return|;
block|}
block|}
specifier|private
name|Integer
name|effectiveMaxAge
parameter_list|(
name|CrossOriginResourceSharing
name|ann
parameter_list|)
block|{
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
name|int
name|ma
init|=
name|ann
operator|.
name|maxAge
argument_list|()
decl_stmt|;
if|if
condition|(
name|ma
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|ma
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|maxAge
return|;
block|}
block|}
comment|/**      * The origin strings to allow. Call {@link #setAllowAllOrigins(boolean)} to enable '*'.      *       * @param allowedOrigins a list of case-sensitive origin strings.      */
specifier|public
name|void
name|setAllowOrigins
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|allowedOrigins
parameter_list|)
block|{
name|this
operator|.
name|allowOrigins
operator|=
name|allowedOrigins
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllowOrigins
parameter_list|()
block|{
return|return
name|allowOrigins
return|;
block|}
comment|/**      * Whether to implement Access-Control-Allow-Origin: *      *       * @param allowAllOrigins if true, all origins are accepted and * is returned in the header. Sections      *            5.1.1 and 5.1.2, and 5.2.1 and 5.2.2. If false, then the list of allowed origins must be      */
specifier|public
name|void
name|setAllowAllOrigins
parameter_list|(
name|boolean
name|allowAllOrigins
parameter_list|)
block|{
name|this
operator|.
name|allowAllOrigins
operator|=
name|allowAllOrigins
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllowMethods
parameter_list|()
block|{
return|return
name|allowMethods
return|;
block|}
comment|/**      * The list of allowed non-simple methods for preflight checks. Section 5.2.3.      *       * @param allowedMethods a list of case-sensitive HTTP method names.      */
specifier|public
name|void
name|setAllowMethods
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|allowedMethods
parameter_list|)
block|{
name|this
operator|.
name|allowMethods
operator|=
name|allowedMethods
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllowHeaders
parameter_list|()
block|{
return|return
name|allowHeaders
return|;
block|}
comment|/**      * The list of allowed headers for preflight checks. Section 5.2.6      *       * @param allowedHeaders a list of permitted headers.      */
specifier|public
name|void
name|setAllowHeaders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|allowedHeaders
parameter_list|)
block|{
name|this
operator|.
name|allowHeaders
operator|=
name|allowedHeaders
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExposeHeaders
parameter_list|()
block|{
return|return
name|exposeHeaders
return|;
block|}
specifier|public
name|Integer
name|getMaxAge
parameter_list|()
block|{
return|return
name|maxAge
return|;
block|}
specifier|public
name|boolean
name|isAllowCredentials
parameter_list|()
block|{
return|return
name|allowCredentials
return|;
block|}
comment|/**      * The value for the Access-Control-Allow-Credentials header. If false, no header is added. If true, the      * header is added with the value 'true'.      *       * @param allowCredentials      */
specifier|public
name|void
name|setAllowCredentials
parameter_list|(
name|boolean
name|allowCredentials
parameter_list|)
block|{
name|this
operator|.
name|allowCredentials
operator|=
name|allowCredentials
expr_stmt|;
block|}
comment|/**      * A list of non-simple headers to be exposed via Access-Control-Expose-Headers.      *       * @param exposeHeaders the list of (case-sensitive) header names.      */
specifier|public
name|void
name|setExposeHeaders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|exposeHeaders
parameter_list|)
block|{
name|this
operator|.
name|exposeHeaders
operator|=
name|exposeHeaders
expr_stmt|;
block|}
comment|/**      * The value for Access-Control-Max-Age.      *       * @param maxAge An integer 'delta-seconds' or null. If null, no header is added.      */
specifier|public
name|void
name|setMaxAge
parameter_list|(
name|Integer
name|maxAge
parameter_list|)
block|{
name|this
operator|.
name|maxAge
operator|=
name|maxAge
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|getHeadersFromInput
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Object
name|obj
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|obj
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|addHeaders
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|vals
parameter_list|)
block|{
for|for
control|(
name|String
name|v
range|:
name|vals
control|)
block|{
name|rb
operator|.
name|header
argument_list|(
name|key
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

