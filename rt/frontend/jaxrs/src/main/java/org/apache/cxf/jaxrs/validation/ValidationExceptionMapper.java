begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintViolation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ExceptionMapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|validation
operator|.
name|ResponseConstraintViolationException
import|;
end_import

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|ValidationExceptionMapper
implements|implements
name|ExceptionMapper
argument_list|<
name|ValidationException
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ValidationExceptionMapper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|reportParameterInfo
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Response
name|toResponse
parameter_list|(
name|ValidationException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|ConstraintViolationException
condition|)
block|{
specifier|final
name|ConstraintViolationException
name|constraint
init|=
operator|(
name|ConstraintViolationException
operator|)
name|exception
decl_stmt|;
specifier|final
name|boolean
name|isResponseException
init|=
name|constraint
operator|instanceof
name|ResponseConstraintViolationException
decl_stmt|;
for|for
control|(
specifier|final
name|ConstraintViolation
argument_list|<
name|?
argument_list|>
name|violation
range|:
name|constraint
operator|.
name|getConstraintViolations
argument_list|()
control|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|violation
operator|.
name|getRootBeanClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
operator|+
name|getPropertyPathDescription
argument_list|(
name|violation
operator|.
name|getPropertyPath
argument_list|()
argument_list|,
name|isResponseException
argument_list|)
operator|+
literal|": "
operator|+
name|violation
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isResponseException
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|protected
name|String
name|getPropertyPathDescription
parameter_list|(
name|Path
name|propertyPath
parameter_list|,
name|boolean
name|isResponseException
parameter_list|)
block|{
specifier|final
name|String
name|path
init|=
name|propertyPath
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|isResponseException
operator|||
operator|!
name|isReportParameterInfo
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
name|int
name|index
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|".arg"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
operator|||
name|index
operator|+
literal|4
operator|>=
name|path
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
name|boolean
name|compositePath
init|=
literal|false
decl_stmt|;
name|int
name|argPos
decl_stmt|;
try|try
block|{
name|String
name|argPath
init|=
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|4
argument_list|)
decl_stmt|;
name|int
name|infoIndex
init|=
name|argPath
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|infoIndex
operator|=
name|argPath
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|infoIndex
operator|>
literal|0
condition|)
block|{
name|argPath
operator|=
name|argPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|infoIndex
argument_list|)
expr_stmt|;
name|compositePath
operator|=
literal|true
expr_stmt|;
block|}
name|argPos
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|argPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
return|return
name|path
return|;
block|}
specifier|final
name|OperationResourceInfo
name|ori
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|OperationResourceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|argPos
argument_list|<
literal|0
operator|||
name|argPos
argument_list|>
name|ori
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
name|Parameter
name|param
init|=
name|ori
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|argPos
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|compositePath
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"arg"
operator|+
name|argPos
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"JAXRS param is "
operator|+
name|param
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|param
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(\""
operator|+
name|param
operator|.
name|getName
argument_list|()
operator|+
literal|"\")"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", class: "
operator|+
name|ori
operator|.
name|getAnnotatedMethod
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
index|[
name|argPos
index|]
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|path
operator|+
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isReportParameterInfo
parameter_list|()
block|{
return|return
name|reportParameterInfo
return|;
block|}
specifier|public
name|void
name|setReportParameterInfo
parameter_list|(
name|boolean
name|reportParameterInfo
parameter_list|)
block|{
name|this
operator|.
name|reportParameterInfo
operator|=
name|reportParameterInfo
expr_stmt|;
block|}
block|}
end_class

end_unit

