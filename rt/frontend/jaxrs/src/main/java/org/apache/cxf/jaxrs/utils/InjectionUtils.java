begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|GenericEntity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|PathSegment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ContextResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ClassHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PrimitiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ProxyClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ProtocolHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|PathSegmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalContextResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalHttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalProtocolHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|tl
operator|.
name|ThreadLocalUriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|AbstractResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ServerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|InjectionUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|InjectionUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|InjectionUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVLET_CONFIG_CLASS_NAME
init|=
literal|"javax.servlet.ServletConfig"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVLET_CONTEXT_CLASS_NAME
init|=
literal|"javax.servlet.ServletContext"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_SERVLET_REQUEST_CLASS_NAME
init|=
literal|"javax.servlet.http.HttpServletRequest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_SERVLET_RESPONSE_CLASS_NAME
init|=
literal|"javax.servlet.http.HttpServletResponse"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENUM_CONVERSION_CASE_SENSITIVE
init|=
literal|"enum.conversion.case.sensitive"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IGNORE_MATRIX_PARAMETERS
init|=
literal|"ignore.matrix.parameters"
decl_stmt|;
specifier|private
name|InjectionUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|boolean
name|isConcreteClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
operator|!
name|cls
operator|.
name|isInterface
argument_list|()
operator|&&
operator|!
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|cls
operator|.
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Type
name|getSuperType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|serviceClass
parameter_list|,
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|var
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|TypeVariable
argument_list|<
name|?
argument_list|>
index|[]
name|vars
init|=
name|var
operator|.
name|getGenericDeclaration
argument_list|()
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|pos
operator|<
name|vars
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|vars
index|[
name|pos
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|var
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|Type
name|genericSubtype
init|=
name|serviceClass
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|genericSubtype
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
name|Type
index|[]
name|genInterfaces
init|=
name|serviceClass
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|genInterfaces
control|)
block|{
name|genericSubtype
operator|=
name|t
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|genericSubtype
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
name|genericSubtype
operator|=
literal|null
expr_stmt|;
block|}
name|Type
name|result
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericSubtype
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|==
name|Object
operator|.
name|class
condition|)
block|{
name|Type
index|[]
name|bounds
init|=
name|var
operator|.
name|getBounds
argument_list|()
decl_stmt|;
name|int
name|boundPos
init|=
name|bounds
operator|.
name|length
operator|>
name|pos
condition|?
name|pos
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|length
operator|>
name|boundPos
operator|&&
name|bounds
index|[
name|boundPos
index|]
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|bounds
index|[
name|boundPos
index|]
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Method
name|checkProxy
parameter_list|(
name|Method
name|methodToInvoke
parameter_list|,
name|Object
name|resourceObject
parameter_list|)
block|{
if|if
condition|(
name|Proxy
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|resourceObject
argument_list|)
condition|)
block|{
name|String
name|methodToInvokeName
init|=
name|methodToInvoke
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|methodToInvokeTypes
init|=
name|methodToInvoke
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|resourceObject
operator|.
name|getClass
argument_list|()
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
try|try
block|{
return|return
name|c
operator|.
name|getMethod
argument_list|(
name|methodToInvokeName
argument_list|,
name|methodToInvokeTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
name|methodToInvokeTypes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|c
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodToInvokeName
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
name|methodToInvokeTypes
operator|.
name|length
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|methodTypes
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methodTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|methodTypes
index|[
name|i
index|]
operator|.
name|isAssignableFrom
argument_list|(
name|methodToInvokeTypes
index|[
name|i
index|]
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|m
return|;
block|}
block|}
block|}
block|}
block|}
return|return
name|methodToInvoke
return|;
block|}
specifier|public
specifier|static
name|void
name|injectFieldValue
parameter_list|(
specifier|final
name|Field
name|f
parameter_list|,
specifier|final
name|Object
name|o
parameter_list|,
specifier|final
name|Object
name|v
parameter_list|)
block|{
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
try|try
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"FIELD_ACCESS_FAILURE"
argument_list|,
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Object
name|extractFieldValue
parameter_list|(
specifier|final
name|Field
name|f
parameter_list|,
specifier|final
name|Object
name|o
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
try|try
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
operator|.
name|get
argument_list|(
name|o
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"FIELD_ACCESS_FAILURE"
argument_list|,
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getActualType
parameter_list|(
name|Type
name|genericType
parameter_list|)
block|{
return|return
name|getActualType
argument_list|(
name|genericType
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getActualType
parameter_list|(
name|Type
name|genericType
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|genericType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|genericType
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|genericType
return|;
block|}
if|if
condition|(
operator|!
name|ParameterizedType
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|genericType
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|genericType
operator|instanceof
name|TypeVariable
condition|)
block|{
name|genericType
operator|=
name|getType
argument_list|(
operator|(
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|genericType
operator|)
operator|.
name|getBounds
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|genericType
operator|instanceof
name|WildcardType
condition|)
block|{
name|WildcardType
name|wildcardType
init|=
operator|(
name|WildcardType
operator|)
name|genericType
decl_stmt|;
name|Type
index|[]
name|bounds
init|=
name|wildcardType
operator|.
name|getLowerBounds
argument_list|()
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|bounds
operator|=
name|wildcardType
operator|.
name|getUpperBounds
argument_list|()
expr_stmt|;
block|}
name|genericType
operator|=
name|getType
argument_list|(
name|bounds
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|genericType
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|genericType
operator|=
operator|(
operator|(
name|GenericArrayType
operator|)
name|genericType
operator|)
operator|.
name|getGenericComponentType
argument_list|()
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|genericType
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
name|cls
operator|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|genericType
expr_stmt|;
block|}
else|else
block|{
name|cls
operator|=
call|(
name|Class
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|genericType
argument_list|)
operator|.
name|getRawType
argument_list|()
expr_stmt|;
block|}
return|return
name|cls
operator|.
name|isArray
argument_list|()
condition|?
name|cls
operator|.
name|getComponentType
argument_list|()
else|:
name|cls
return|;
block|}
name|ParameterizedType
name|paramType
init|=
operator|(
name|ParameterizedType
operator|)
name|genericType
decl_stmt|;
name|Type
name|t
init|=
name|getType
argument_list|(
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|,
name|pos
argument_list|)
decl_stmt|;
return|return
name|t
operator|instanceof
name|Class
condition|?
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|t
else|:
name|getActualType
argument_list|(
name|t
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Type
name|getType
parameter_list|(
name|Type
index|[]
name|types
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
name|types
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No type can be found at position "
operator|+
name|pos
argument_list|)
throw|;
block|}
return|return
name|types
index|[
name|pos
index|]
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getRawType
parameter_list|(
name|Type
name|genericType
parameter_list|)
block|{
if|if
condition|(
name|genericType
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|genericType
return|;
block|}
elseif|else
if|if
condition|(
name|genericType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|paramType
init|=
operator|(
name|ParameterizedType
operator|)
name|genericType
decl_stmt|;
name|Type
name|t
init|=
name|paramType
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|t
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|genericType
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|getRawType
argument_list|(
operator|(
operator|(
name|GenericArrayType
operator|)
name|genericType
operator|)
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Type
index|[]
name|getActualTypes
parameter_list|(
name|Type
name|genericType
parameter_list|)
block|{
if|if
condition|(
name|genericType
operator|==
literal|null
operator|||
operator|!
name|ParameterizedType
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|genericType
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ParameterizedType
name|paramType
init|=
operator|(
name|ParameterizedType
operator|)
name|genericType
decl_stmt|;
return|return
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|injectThroughMethod
parameter_list|(
name|Object
name|requestObject
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
name|parameterValue
parameter_list|)
block|{
name|injectThroughMethod
argument_list|(
name|requestObject
argument_list|,
name|method
argument_list|,
name|parameterValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|injectThroughMethod
parameter_list|(
name|Object
name|requestObject
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
name|parameterValue
parameter_list|,
name|Message
name|inMessage
parameter_list|)
block|{
try|try
block|{
name|Method
name|methodToInvoke
init|=
name|checkProxy
argument_list|(
name|method
argument_list|,
name|requestObject
argument_list|)
decl_stmt|;
name|methodToInvoke
operator|.
name|invoke
argument_list|(
name|requestObject
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parameterValue
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"METHOD_ACCESS_FAILURE"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|Response
name|r
init|=
name|JAXRSUtils
operator|.
name|convertFaultToResponse
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|inMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|inMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Response
operator|.
name|class
argument_list|,
name|r
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
name|reportServerError
argument_list|(
literal|"METHOD_ACCESS_FAILURE"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"METHOD_INJECTION_FAILURE"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|extractFromMethod
parameter_list|(
name|Object
name|requestObject
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
return|return
name|extractFromMethod
argument_list|(
name|requestObject
argument_list|,
name|method
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|extractFromMethod
parameter_list|(
name|Object
name|requestObject
parameter_list|,
name|Method
name|method
parameter_list|,
name|boolean
name|logError
parameter_list|)
block|{
try|try
block|{
name|Method
name|methodToInvoke
init|=
name|checkProxy
argument_list|(
name|method
argument_list|,
name|requestObject
argument_list|)
decl_stmt|;
return|return
name|methodToInvoke
operator|.
name|invoke
argument_list|(
name|requestObject
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"METHOD_ACCESS_FAILURE"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|logError
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"METHOD_INJECTION_FAILURE"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|logError
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|handleParameter
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|decoded
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|pClass
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|ParameterType
name|pType
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|pType
operator|==
name|ParameterType
operator|.
name|PATH
condition|)
block|{
if|if
condition|(
name|PathSegment
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|pClass
argument_list|)
condition|)
block|{
return|return
name|pClass
operator|.
name|cast
argument_list|(
operator|new
name|PathSegmentImpl
argument_list|(
name|value
argument_list|,
name|decoded
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|IGNORE_MATRIX_PARAMETERS
argument_list|)
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|PathSegmentImpl
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
name|value
operator|=
name|decodeValue
argument_list|(
name|value
argument_list|,
name|decoded
argument_list|,
name|pType
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|createFromParameterHandler
argument_list|(
name|value
argument_list|,
name|pClass
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|nfe
parameter_list|)
block|{
throw|throw
name|createParamConversionException
argument_list|(
name|pType
argument_list|,
name|nfe
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|pClass
operator|.
name|cast
argument_list|(
name|result
argument_list|)
return|;
block|}
if|if
condition|(
name|pClass
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|ret
init|=
operator|(
name|T
operator|)
name|PrimitiveUtils
operator|.
name|read
argument_list|(
name|value
argument_list|,
name|pClass
argument_list|)
decl_stmt|;
comment|// cannot us pClass.cast as the pClass is something like
comment|// Boolean.TYPE (representing the boolean primitive) and
comment|// the object is a Boolean object
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
name|createParamConversionException
argument_list|(
name|pType
argument_list|,
name|nfe
argument_list|)
throw|;
block|}
block|}
name|boolean
name|adapterHasToBeUsed
init|=
literal|false
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|pClass
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
init|=
name|JAXBUtils
operator|.
name|getValueTypeFromAdapter
argument_list|(
name|pClass
argument_list|,
name|pClass
argument_list|,
name|paramAnns
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueType
operator|!=
name|cls
condition|)
block|{
name|cls
operator|=
name|valueType
expr_stmt|;
name|adapterHasToBeUsed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|pClass
operator|==
name|String
operator|.
name|class
operator|&&
operator|!
name|adapterHasToBeUsed
condition|)
block|{
return|return
name|pClass
operator|.
name|cast
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|// check constructors accepting a single String value
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
init|=
name|cls
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
block|)
empty_stmt|;
name|result
operator|=
name|c
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|// try valueOf
block|}
catch|catch
parameter_list|(
name|WebApplicationException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|getOrThrowActualException
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"CLASS_CONSTRUCTOR_FAILURE"
argument_list|,
name|BUNDLE
argument_list|,
name|pClass
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Response
name|r
init|=
name|JAXRSUtils
operator|.
name|toResponse
argument_list|(
name|HttpUtils
operator|.
name|getParameterFailureStatus
argument_list|(
name|pType
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
name|ExceptionUtils
operator|.
name|toHttpException
argument_list|(
name|t
argument_list|,
name|r
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|// check for valueOf(String) static methods
name|String
index|[]
name|methodNames
init|=
name|cls
operator|.
name|isEnum
argument_list|()
condition|?
operator|new
name|String
index|[]
block|{
literal|"fromString"
block|,
literal|"fromValue"
block|,
literal|"valueOf"
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"valueOf"
block|,
literal|"fromString"
block|}
decl_stmt|;
name|result
operator|=
name|evaluateFactoryMethods
argument_list|(
name|value
argument_list|,
name|pType
argument_list|,
name|result
argument_list|,
name|cls
argument_list|,
name|methodNames
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|adapterHasToBeUsed
condition|)
block|{
comment|// as the last resort, try XmlJavaTypeAdapters
name|Object
name|valueToReplace
init|=
name|result
operator|!=
literal|null
condition|?
name|result
else|:
name|value
decl_stmt|;
try|try
block|{
name|result
operator|=
name|JAXBUtils
operator|.
name|convertWithAdapter
argument_list|(
name|valueToReplace
argument_list|,
name|pClass
argument_list|,
name|paramAnns
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|reportServerError
argument_list|(
literal|"WRONG_PARAMETER_TYPE"
argument_list|,
name|pClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pClass
operator|.
name|cast
argument_list|(
name|result
argument_list|)
return|;
block|}
end_class

begin_function
specifier|private
specifier|static
name|RuntimeException
name|createParamConversionException
parameter_list|(
name|ParameterType
name|pType
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
comment|//
comment|//  For path, query& matrix parameters this is 404,
comment|//  for others 400...
comment|//
if|if
condition|(
name|pType
operator|==
name|ParameterType
operator|.
name|PATH
operator|||
name|pType
operator|==
name|ParameterType
operator|.
name|QUERY
operator|||
name|pType
operator|==
name|ParameterType
operator|.
name|MATRIX
condition|)
block|{
return|return
name|ExceptionUtils
operator|.
name|toNotFoundException
argument_list|(
name|ex
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
name|ExceptionUtils
operator|.
name|toBadRequestException
argument_list|(
name|ex
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createFromParameterHandler
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|pClass
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|T
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|ServerProviderFactory
name|pf
init|=
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ParamConverter
argument_list|<
name|T
argument_list|>
name|pm
init|=
name|pf
operator|.
name|createParameterHandler
argument_list|(
name|pClass
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|)
decl_stmt|;
if|if
condition|(
name|pm
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|pm
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|reportServerError
parameter_list|(
name|String
name|messageName
parameter_list|,
name|String
name|parameter
parameter_list|)
block|{
name|reportServerError
argument_list|(
name|messageName
argument_list|,
name|parameter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|reportServerError
parameter_list|(
name|String
name|messageName
parameter_list|,
name|String
name|parameter
parameter_list|,
name|boolean
name|logError
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMessage
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|messageName
argument_list|,
name|BUNDLE
argument_list|,
name|parameter
argument_list|)
decl_stmt|;
if|if
condition|(
name|logError
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
name|errorMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Response
name|r
init|=
name|JAXRSUtils
operator|.
name|toResponseBuilder
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
operator|.
name|entity
argument_list|(
name|errorMessage
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
throw|throw
name|ExceptionUtils
operator|.
name|toInternalServerErrorException
argument_list|(
literal|null
argument_list|,
name|r
argument_list|)
throw|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Object
name|evaluateFactoryMethods
parameter_list|(
name|String
name|value
parameter_list|,
name|ParameterType
name|pType
parameter_list|,
name|Object
name|result
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|String
index|[]
name|methodNames
parameter_list|)
block|{
name|Exception
name|factoryMethodEx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|mName
range|:
name|methodNames
control|)
block|{
try|try
block|{
name|result
operator|=
name|evaluateFactoryMethod
argument_list|(
name|value
argument_list|,
name|cls
argument_list|,
name|pType
argument_list|,
name|mName
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|factoryMethodEx
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// If it is enum and the method name is "fromValue" then don't throw
comment|// the exception immediately but try the next factory method
name|factoryMethodEx
operator|=
name|ex
expr_stmt|;
if|if
condition|(
operator|!
name|cls
operator|.
name|isEnum
argument_list|()
operator|||
operator|!
literal|"fromValue"
operator|.
name|equals
argument_list|(
name|mName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|factoryMethodEx
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|t
init|=
name|getOrThrowActualException
argument_list|(
name|factoryMethodEx
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"CLASS_VALUE_OF_FAILURE"
argument_list|,
name|BUNDLE
argument_list|,
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|t
argument_list|,
name|HttpUtils
operator|.
name|getParameterFailureStatus
argument_list|(
name|pType
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluateFactoryMethod
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|pClass
parameter_list|,
name|ParameterType
name|pType
parameter_list|,
name|String
name|methodName
parameter_list|)
throws|throws
name|InvocationTargetException
block|{
try|try
block|{
name|Method
name|m
init|=
name|pClass
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
block|)
empty_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|pClass
operator|.
name|cast
argument_list|(
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
argument_list|)
return|;
block|}
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|// no luck: try another factory methods
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
comment|// factory method is not accessible: try another
block|}
end_catch

begin_return
return|return
literal|null
return|;
end_return

begin_function
unit|}          private
specifier|static
name|Throwable
name|getOrThrowActualException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|ex
operator|instanceof
name|InvocationTargetException
condition|?
operator|(
operator|(
name|InvocationTargetException
operator|)
name|ex
operator|)
operator|.
name|getCause
argument_list|()
else|:
name|ex
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|WebApplicationException
condition|)
block|{
throw|throw
operator|(
name|WebApplicationException
operator|)
name|t
throw|;
block|}
return|return
name|t
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Object
name|handleBean
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|ParameterType
name|pType
parameter_list|,
name|Message
name|message
parameter_list|,
name|boolean
name|decoded
parameter_list|)
block|{
name|Object
name|bean
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|paramType
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|paramType
operator|=
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXBUtils
operator|.
name|getValueTypeFromAdapter
argument_list|(
name|paramType
argument_list|,
name|paramType
argument_list|,
name|paramAnns
argument_list|)
expr_stmt|;
block|}
name|bean
operator|=
name|paramType
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"CLASS_ACCESS_FAILURE"
argument_list|,
name|paramType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"CLASS_INSTANTIATION_FAILURE"
argument_list|,
name|paramType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|parsedValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|memberKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|beanKey
init|=
literal|null
decl_stmt|;
name|int
name|idx
init|=
name|memberKey
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
name|beanKey
operator|=
literal|"."
operator|+
name|memberKey
expr_stmt|;
block|}
else|else
block|{
name|beanKey
operator|=
name|memberKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|memberKey
operator|=
name|memberKey
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|value
init|=
name|parsedValues
operator|.
name|get
argument_list|(
name|beanKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|parsedValues
operator|.
name|put
argument_list|(
name|beanKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|value
operator|.
name|put
argument_list|(
name|memberKey
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parsedValues
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|parsedValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|memberKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|boolean
name|isbean
init|=
operator|!
name|memberKey
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isbean
condition|)
block|{
name|memberKey
operator|=
name|memberKey
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Object
name|setter
init|=
literal|null
decl_stmt|;
name|Object
name|getter
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|paramType
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"set"
operator|+
name|memberKey
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|setter
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"get"
operator|+
name|memberKey
argument_list|)
operator|||
name|isBooleanType
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"is"
operator|+
name|memberKey
argument_list|)
condition|)
block|{
name|getter
operator|=
name|m
expr_stmt|;
block|}
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
name|getter
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|setter
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Field
name|f
range|:
name|paramType
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|memberKey
argument_list|)
condition|)
block|{
name|setter
operator|=
name|f
expr_stmt|;
name|getter
operator|=
name|f
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
name|getter
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
literal|null
decl_stmt|;
name|Type
name|genericType
init|=
literal|null
decl_stmt|;
name|Object
name|paramValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|setter
operator|instanceof
name|Method
condition|)
block|{
name|type
operator|=
name|Method
operator|.
name|class
operator|.
name|cast
argument_list|(
name|setter
argument_list|)
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|genericType
operator|=
name|Method
operator|.
name|class
operator|.
name|cast
argument_list|(
name|setter
argument_list|)
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|paramValue
operator|=
name|InjectionUtils
operator|.
name|extractFromMethod
argument_list|(
name|bean
argument_list|,
operator|(
name|Method
operator|)
name|getter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|Field
operator|.
name|class
operator|.
name|cast
argument_list|(
name|setter
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|genericType
operator|=
name|Field
operator|.
name|class
operator|.
name|cast
argument_list|(
name|setter
argument_list|)
operator|.
name|getGenericType
argument_list|()
expr_stmt|;
name|paramValue
operator|=
name|InjectionUtils
operator|.
name|extractFieldValue
argument_list|(
operator|(
name|Field
operator|)
name|getter
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|processedValuesList
init|=
name|processValues
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|isbean
argument_list|)
decl_stmt|;
for|for
control|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|processedValues
range|:
name|processedValuesList
control|)
block|{
if|if
condition|(
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Object
name|appendValue
init|=
name|InjectionUtils
operator|.
name|injectIntoCollectionOrArray
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|processedValues
argument_list|,
name|isbean
argument_list|,
literal|true
argument_list|,
name|pType
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|paramValue
operator|=
name|InjectionUtils
operator|.
name|mergeCollectionsOrArrays
argument_list|(
name|paramValue
argument_list|,
name|appendValue
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSupportedMap
argument_list|(
name|genericType
argument_list|)
condition|)
block|{
name|Object
name|appendValue
init|=
name|InjectionUtils
operator|.
name|injectIntoMap
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|processedValues
argument_list|,
literal|true
argument_list|,
name|pType
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|paramValue
operator|=
name|InjectionUtils
operator|.
name|mergeMap
argument_list|(
name|paramValue
argument_list|,
name|appendValue
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isbean
condition|)
block|{
name|paramValue
operator|=
name|InjectionUtils
operator|.
name|handleBean
argument_list|(
name|type
argument_list|,
name|paramAnns
argument_list|,
name|processedValues
argument_list|,
name|pType
argument_list|,
name|message
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paramValue
operator|=
name|InjectionUtils
operator|.
name|handleParameter
argument_list|(
name|processedValues
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|decoded
argument_list|,
name|type
argument_list|,
name|type
argument_list|,
name|paramAnns
argument_list|,
name|pType
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|paramValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|setter
operator|instanceof
name|Method
condition|)
block|{
name|InjectionUtils
operator|.
name|injectThroughMethod
argument_list|(
name|bean
argument_list|,
operator|(
name|Method
operator|)
name|setter
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InjectionUtils
operator|.
name|injectFieldValue
argument_list|(
operator|(
name|Field
operator|)
name|setter
argument_list|,
name|bean
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|bean
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Object
name|mergeMap
parameter_list|(
name|Object
name|first
parameter_list|,
name|Object
name|second
parameter_list|,
name|Type
name|genericType
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
name|second
return|;
block|}
elseif|else
if|if
condition|(
name|first
operator|instanceof
name|Map
condition|)
block|{
name|Map
operator|.
name|class
operator|.
name|cast
argument_list|(
name|first
argument_list|)
operator|.
name|putAll
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|second
argument_list|)
expr_stmt|;
return|return
name|first
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|// CHECKSTYLE:OFF
end_comment

begin_function
specifier|private
specifier|static
name|Object
name|injectIntoMap
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|processedValues
parameter_list|,
name|boolean
name|decoded
parameter_list|,
name|ParameterType
name|pathParam
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
comment|// CHECKSTYLE:ON
name|ParameterizedType
name|paramType
init|=
operator|(
name|ParameterizedType
operator|)
name|genericType
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|keyType
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Type
name|secondType
init|=
name|InjectionUtils
operator|.
name|getType
argument_list|(
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|theValues
init|=
operator|new
name|MetadataMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ParameterizedType
name|valueParamType
init|=
operator|(
name|ParameterizedType
operator|)
name|secondType
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|InjectionUtils
operator|.
name|getType
argument_list|(
name|valueParamType
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|processedValuesEntry
range|:
name|processedValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|valuesList
init|=
name|processedValuesEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|valuesList
control|)
block|{
name|Object
name|o
init|=
name|InjectionUtils
operator|.
name|handleParameter
argument_list|(
name|value
argument_list|,
name|decoded
argument_list|,
name|valueType
argument_list|,
name|valueType
argument_list|,
name|paramAnns
argument_list|,
name|pathParam
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|theValues
operator|.
name|add
argument_list|(
name|convertStringToPrimitive
argument_list|(
name|processedValuesEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyType
argument_list|)
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|theValues
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|theValues
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|InjectionUtils
operator|.
name|getType
argument_list|(
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|processedValuesEntry
range|:
name|processedValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|valuesList
init|=
name|processedValuesEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|valuesList
control|)
block|{
name|Object
name|o
init|=
name|InjectionUtils
operator|.
name|handleParameter
argument_list|(
name|value
argument_list|,
name|decoded
argument_list|,
name|valueType
argument_list|,
name|valueType
argument_list|,
name|paramAnns
argument_list|,
name|pathParam
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|theValues
operator|.
name|put
argument_list|(
name|convertStringToPrimitive
argument_list|(
name|processedValuesEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyType
argument_list|)
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|theValues
return|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|isSupportedMap
parameter_list|(
name|Type
name|genericType
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
init|=
name|getRawType
argument_list|(
name|genericType
argument_list|)
decl_stmt|;
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|rawType
argument_list|)
operator|&&
name|genericType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|paramType
init|=
operator|(
name|ParameterizedType
operator|)
name|genericType
decl_stmt|;
if|if
condition|(
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|firstType
init|=
name|getRawType
argument_list|(
name|getType
argument_list|(
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Type
name|secondType
init|=
name|getType
argument_list|(
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|secondRawType
init|=
name|getRawType
argument_list|(
name|secondType
argument_list|)
decl_stmt|;
return|return
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|firstType
argument_list|)
operator|&&
operator|(
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|secondRawType
argument_list|)
operator|||
name|allowedMapListValue
argument_list|(
name|secondRawType
argument_list|,
name|secondType
argument_list|)
operator|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|allowedMapListValue
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|listtype
init|=
name|getRawType
argument_list|(
name|getType
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|listtype
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|processValues
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|boolean
name|isbean
parameter_list|)
block|{
name|List
argument_list|<
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|valuesList
init|=
operator|new
name|ArrayList
argument_list|<
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isbean
operator|&&
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|realType
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|memberKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|memberType
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|realType
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"set"
operator|+
name|memberKey
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|memberType
operator|=
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|memberType
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Field
name|f
range|:
name|realType
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|memberKey
argument_list|)
condition|)
block|{
name|memberType
operator|=
name|f
operator|.
name|getType
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Strip values tied to collection/array fields from beans that are within
comment|// collection/array themselves, the only way to support this would be to have
comment|// an indexing syntax for nested beans, perhaps like this:
comment|//    a(0).b=1&a(0).b=2&a(1).b=3&a(1).b=4
comment|// For now though we simply don't support this capability. To illustrate, the 'c'
comment|// param is dropped from this multivaluedmap example since it is a list:
comment|//    {c=[71, 81, 91, 72, 82, 92], a=[C1, C2], b=[790, 791]}
if|if
condition|(
name|memberType
operator|!=
literal|null
operator|&&
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|memberType
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Split multivaluedmap value list contents into separate multivaluedmap instances
comment|// whose list contents are only 1 level deep, for example:
comment|//    {a=[C1, C2], b=[790, 791]}
comment|// becomes these 2 separate multivaluedmap instances:
comment|//    {a=[C1], b=[790]} and {a=[C2], b=[791]}
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|splitValues
init|=
operator|(
name|idx
operator|<
name|valuesList
operator|.
name|size
argument_list|()
operator|)
condition|?
name|valuesList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|splitValues
operator|==
literal|null
condition|)
block|{
name|splitValues
operator|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|valuesList
operator|.
name|add
argument_list|(
name|splitValues
argument_list|)
expr_stmt|;
block|}
name|splitValues
operator|.
name|add
argument_list|(
name|memberKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|valuesList
operator|.
name|add
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|valuesList
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|isSupportedCollectionOrArray
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|type
operator|.
name|isArray
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Object
name|mergeCollectionsOrArrays
parameter_list|(
name|Object
name|first
parameter_list|,
name|Object
name|second
parameter_list|,
name|Type
name|genericType
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
name|second
return|;
block|}
elseif|else
if|if
condition|(
name|first
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
operator|.
name|class
operator|.
name|cast
argument_list|(
name|first
argument_list|)
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|second
argument_list|)
expr_stmt|;
return|return
name|first
return|;
block|}
else|else
block|{
name|int
name|firstLen
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|int
name|secondLen
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|second
argument_list|)
decl_stmt|;
name|Object
name|mergedArray
init|=
name|Array
operator|.
name|newInstance
argument_list|(
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
argument_list|,
name|firstLen
operator|+
name|secondLen
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|first
argument_list|,
literal|0
argument_list|,
name|mergedArray
argument_list|,
literal|0
argument_list|,
name|firstLen
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|second
argument_list|,
literal|0
argument_list|,
name|mergedArray
argument_list|,
name|firstLen
argument_list|,
name|secondLen
argument_list|)
expr_stmt|;
return|return
name|mergedArray
return|;
block|}
block|}
end_function

begin_function
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getCollectionType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SortedSet
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|rawType
argument_list|)
condition|)
block|{
name|type
operator|=
name|TreeSet
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Set
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|rawType
argument_list|)
condition|)
block|{
name|type
operator|=
name|HashSet
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|rawType
argument_list|)
condition|)
block|{
name|type
operator|=
name|ArrayList
operator|.
name|class
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
end_function

begin_comment
comment|//CHECKSTYLE:OFF
end_comment

begin_function
specifier|private
specifier|static
name|Object
name|injectIntoCollectionOrArray
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|boolean
name|isbean
parameter_list|,
name|boolean
name|decoded
parameter_list|,
name|ParameterType
name|pathParam
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
comment|//CHECKSTYLE:ON
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|getCollectionType
argument_list|(
name|rawType
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realType
init|=
name|rawType
operator|.
name|isArray
argument_list|()
condition|?
name|rawType
operator|.
name|getComponentType
argument_list|()
else|:
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|genericType
argument_list|)
decl_stmt|;
name|Object
name|theValues
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|theValues
operator|=
name|type
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"CLASS_ACCESS_FAILURE"
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|reportServerError
argument_list|(
literal|"CLASS_INSTANTIATION_FAILURE"
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|theValues
operator|=
name|Array
operator|.
name|newInstance
argument_list|(
name|realType
argument_list|,
name|isbean
condition|?
literal|1
else|:
name|values
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isbean
condition|)
block|{
name|Object
name|o
init|=
name|InjectionUtils
operator|.
name|handleBean
argument_list|(
name|realType
argument_list|,
name|paramAnns
argument_list|,
name|values
argument_list|,
name|pathParam
argument_list|,
name|message
argument_list|,
name|decoded
argument_list|)
decl_stmt|;
name|addToCollectionValues
argument_list|(
name|theValues
argument_list|,
name|o
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|valuesList
init|=
name|values
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|valuesList
operator|=
name|checkPathSegment
argument_list|(
name|valuesList
argument_list|,
name|realType
argument_list|,
name|pathParam
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ind
init|=
literal|0
init|;
name|ind
operator|<
name|valuesList
operator|.
name|size
argument_list|()
condition|;
name|ind
operator|++
control|)
block|{
name|Object
name|o
init|=
name|InjectionUtils
operator|.
name|handleParameter
argument_list|(
name|valuesList
operator|.
name|get
argument_list|(
name|ind
argument_list|)
argument_list|,
name|decoded
argument_list|,
name|realType
argument_list|,
name|realType
argument_list|,
name|paramAnns
argument_list|,
name|pathParam
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|addToCollectionValues
argument_list|(
name|theValues
argument_list|,
name|o
argument_list|,
name|ind
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|theValues
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|void
name|addToCollectionValues
parameter_list|(
name|Object
name|theValues
parameter_list|,
name|Object
name|o
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|theValues
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
operator|.
name|class
operator|.
name|cast
argument_list|(
name|theValues
argument_list|)
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|theValues
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|Array
operator|.
name|set
argument_list|(
name|theValues
argument_list|,
name|index
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|Object
index|[]
operator|)
name|theValues
operator|)
index|[
name|index
index|]
operator|=
name|o
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|checkPathSegment
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|ParameterType
name|pathParam
parameter_list|)
block|{
if|if
condition|(
name|pathParam
operator|!=
name|ParameterType
operator|.
name|PATH
operator|||
operator|!
name|PathSegment
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|values
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|newValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|values
control|)
block|{
name|String
index|[]
name|segments
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|v
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|segments
control|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|newValues
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|v
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|newValues
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newValues
return|;
block|}
end_function

begin_comment
comment|//
end_comment

begin_comment
comment|//CHECKSTYLE:OFF
end_comment

begin_function
specifier|public
specifier|static
name|Object
name|createParameterObject
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|paramValues
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|paramAnns
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|boolean
name|decoded
parameter_list|,
name|ParameterType
name|pathParam
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
comment|//CHECKSTYLE:ON
if|if
condition|(
name|paramValues
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|paramValues
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|paramType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|paramValues
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|boolean
operator|.
name|class
operator|==
name|paramType
condition|?
literal|"false"
else|:
name|char
operator|.
name|class
operator|==
name|paramType
condition|?
name|Character
operator|.
name|toString
argument_list|(
literal|'\u0000'
argument_list|)
else|:
literal|"0"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|paramType
argument_list|)
condition|)
block|{
name|paramValues
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
name|Object
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|paramType
argument_list|)
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramValuesMap
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|paramValuesMap
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|paramValues
argument_list|)
expr_stmt|;
name|value
operator|=
name|InjectionUtils
operator|.
name|injectIntoCollectionOrArray
argument_list|(
name|paramType
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|paramValuesMap
argument_list|,
literal|false
argument_list|,
name|decoded
argument_list|,
name|pathParam
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|paramValues
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boolean
name|isLast
init|=
name|pathParam
operator|==
name|ParameterType
operator|.
name|PATH
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|result
operator|=
name|isLast
condition|?
name|paramValues
operator|.
name|get
argument_list|(
name|paramValues
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|paramValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|InjectionUtils
operator|.
name|handleParameter
argument_list|(
name|result
argument_list|,
name|decoded
argument_list|,
name|paramType
argument_list|,
name|genericType
argument_list|,
name|paramAnns
argument_list|,
name|pathParam
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
end_function

begin_comment
comment|// TODO : investigate the possibility of using generic proxies only
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|ThreadLocalProxy
argument_list|<
name|T
argument_list|>
name|createThreadLocalProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|ThreadLocalProxy
argument_list|<
name|?
argument_list|>
name|proxy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|UriInfo
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|proxy
operator|=
operator|new
name|ThreadLocalUriInfo
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|HttpHeaders
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|proxy
operator|=
operator|new
name|ThreadLocalHttpHeaders
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ProtocolHeaders
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|proxy
operator|=
operator|new
name|ThreadLocalProtocolHeaders
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SecurityContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|proxy
operator|=
operator|new
name|ThreadLocalSecurityContext
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ContextResolver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|proxy
operator|=
operator|new
name|ThreadLocalContextResolver
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Request
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|proxy
operator|=
operator|new
name|ThreadLocalRequest
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Providers
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|proxy
operator|=
operator|new
name|ThreadLocalProviders
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MessageContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|proxy
operator|=
operator|new
name|ThreadLocalMessageContext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proxy
operator|==
literal|null
operator|&&
name|isServletApiContext
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|proxy
operator|=
name|createThreadLocalServletApiContext
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
name|ProxyClassLoader
name|loader
init|=
operator|new
name|ProxyClassLoader
argument_list|(
name|Proxy
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|addLoader
argument_list|(
name|type
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|addLoader
argument_list|(
name|ThreadLocalProxy
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|ThreadLocalProxy
argument_list|<
name|T
argument_list|>
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|loader
argument_list|,
operator|new
name|Class
index|[]
block|{
name|type
block|,
name|ThreadLocalProxy
operator|.
name|class
block|}
argument_list|,
operator|new
name|ThreadLocalInvocationHandler
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|(
name|ThreadLocalProxy
argument_list|<
name|T
argument_list|>
operator|)
name|proxy
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|isServletApiContext
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|startsWith
argument_list|(
literal|"javax.servlet."
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|ThreadLocalProxy
argument_list|<
name|?
argument_list|>
name|createThreadLocalServletApiContext
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|proxyClassName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|HTTP_SERVLET_REQUEST_CLASS_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|proxyClassName
operator|=
literal|"org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletRequest"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|HTTP_SERVLET_RESPONSE_CLASS_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|proxyClassName
operator|=
literal|"org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SERVLET_CONTEXT_CLASS_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|proxyClassName
operator|=
literal|"org.apache.cxf.jaxrs.impl.tl.ThreadLocalServletContext"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SERVLET_CONFIG_CLASS_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|proxyClassName
operator|=
literal|"org.apache.cxf.jaxrs.impl.tl.ThreadLocalServletConfig"
expr_stmt|;
block|}
if|if
condition|(
name|proxyClassName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|(
name|ThreadLocalProxy
argument_list|<
name|?
argument_list|>
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|proxyClassName
argument_list|,
name|InjectionUtils
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Method
name|getGetterFromSetter
parameter_list|(
name|Method
name|setter
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setter
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"get"
operator|+
name|setter
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|injectContextProxiesAndApplication
parameter_list|(
name|AbstractResourceInfo
name|cri
parameter_list|,
name|Object
name|instance
parameter_list|,
name|Application
name|app
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cri
operator|.
name|contextsAvailable
argument_list|()
operator|||
operator|!
name|cri
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|instance
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Method
argument_list|>
name|entry
range|:
name|cri
operator|.
name|getContextMethods
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Method
name|method
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|Application
operator|.
name|class
condition|?
name|app
else|:
name|cri
operator|.
name|getContextSetterProxy
argument_list|(
name|method
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|==
name|InjectionUtils
operator|.
name|extractFromMethod
argument_list|(
name|instance
argument_list|,
name|getGetterFromSetter
argument_list|(
name|method
argument_list|)
argument_list|,
literal|false
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// continue
block|}
name|InjectionUtils
operator|.
name|injectThroughMethod
argument_list|(
name|instance
argument_list|,
name|method
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|f
range|:
name|cri
operator|.
name|getContextFields
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|f
operator|.
name|getType
argument_list|()
operator|==
name|Application
operator|.
name|class
condition|?
name|app
else|:
name|cri
operator|.
name|getContextFieldProxy
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|==
name|InjectionUtils
operator|.
name|extractFieldValue
argument_list|(
name|f
argument_list|,
name|instance
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// continue
block|}
name|InjectionUtils
operator|.
name|injectFieldValue
argument_list|(
name|f
argument_list|,
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|injectContextProxies
parameter_list|(
name|AbstractResourceInfo
name|cri
parameter_list|,
name|Object
name|instance
parameter_list|)
block|{
name|injectContextProxiesAndApplication
argument_list|(
name|cri
argument_list|,
name|instance
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|void
name|injectContextField
parameter_list|(
name|AbstractResourceInfo
name|cri
parameter_list|,
name|Field
name|f
parameter_list|,
name|Object
name|o
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cri
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
name|InjectionUtils
operator|.
name|injectFieldValue
argument_list|(
name|f
argument_list|,
name|o
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ThreadLocalProxy
argument_list|<
name|Object
argument_list|>
name|proxy
init|=
operator|(
name|ThreadLocalProxy
argument_list|<
name|Object
argument_list|>
operator|)
name|cri
operator|.
name|getContextFieldProxy
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|proxy
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|injectContexts
parameter_list|(
name|Object
name|requestObject
parameter_list|,
name|AbstractResourceInfo
name|resource
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|.
name|contextsAvailable
argument_list|()
condition|)
block|{
name|injectContextMethods
argument_list|(
name|requestObject
argument_list|,
name|resource
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|injectContextFields
argument_list|(
name|requestObject
argument_list|,
name|resource
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|injectConstructorProxies
argument_list|(
name|requestObject
argument_list|,
name|resource
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|void
name|injectContextMethods
parameter_list|(
name|Object
name|requestObject
parameter_list|,
name|AbstractResourceInfo
name|cri
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Method
argument_list|>
name|entry
range|:
name|cri
operator|.
name|getContextMethods
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Method
name|method
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|Application
operator|.
name|class
operator|&&
name|cri
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Object
name|o
init|=
name|JAXRSUtils
operator|.
name|createContextValue
argument_list|(
name|message
argument_list|,
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|cri
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
name|InjectionUtils
operator|.
name|injectThroughMethod
argument_list|(
name|requestObject
argument_list|,
name|method
argument_list|,
name|o
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ThreadLocalProxy
argument_list|<
name|Object
argument_list|>
name|proxy
init|=
operator|(
name|ThreadLocalProxy
argument_list|<
name|Object
argument_list|>
operator|)
name|cri
operator|.
name|getContextSetterProxy
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|proxy
operator|.
name|set
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|injectContextFields
parameter_list|(
name|Object
name|o
parameter_list|,
name|AbstractResourceInfo
name|cri
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
for|for
control|(
name|Field
name|f
range|:
name|cri
operator|.
name|getContextFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|==
name|Application
operator|.
name|class
operator|&&
name|cri
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Object
name|value
init|=
name|JAXRSUtils
operator|.
name|createContextValue
argument_list|(
name|m
argument_list|,
name|f
operator|.
name|getGenericType
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|InjectionUtils
operator|.
name|injectContextField
argument_list|(
name|cri
argument_list|,
name|f
argument_list|,
name|o
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|void
name|injectConstructorProxies
parameter_list|(
name|Object
name|o
parameter_list|,
name|AbstractResourceInfo
name|cri
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ThreadLocalProxy
argument_list|<
name|?
argument_list|>
argument_list|>
name|proxies
init|=
name|cri
operator|.
name|getConstructorProxies
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ThreadLocalProxy
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|proxies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|JAXRSUtils
operator|.
name|createContextValue
argument_list|(
name|m
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ThreadLocalProxy
argument_list|<
name|Object
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractValuesFromBean
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|baseName
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|fillInValuesFromBean
argument_list|(
name|bean
argument_list|,
name|baseName
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|isBooleanType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|boolean
operator|.
name|class
operator|==
name|cls
operator|||
name|Boolean
operator|.
name|class
operator|==
name|cls
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|fillInValuesFromBean
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|baseName
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|String
name|methodName
init|=
name|m
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|startsFromGet
init|=
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|startsFromGet
operator|||
name|isBooleanType
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|&&
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
operator|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|int
name|minLen
init|=
name|startsFromGet
condition|?
literal|3
else|:
literal|2
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|length
argument_list|()
operator|<=
name|minLen
condition|)
block|{
continue|continue;
block|}
name|String
name|propertyName
init|=
name|methodName
operator|.
name|substring
argument_list|(
name|minLen
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyName
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|propertyName
operator|=
name|propertyName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|propertyName
operator|=
name|propertyName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|propertyName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseName
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
operator|||
literal|"class"
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
operator|||
literal|"declaringClass"
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|baseName
argument_list|)
condition|)
block|{
name|propertyName
operator|=
name|baseName
operator|+
literal|"."
operator|+
name|propertyName
expr_stmt|;
block|}
name|Object
name|value
init|=
name|extractFromMethod
argument_list|(
name|bean
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isPrimitive
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
operator|||
name|Date
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|values
operator|.
name|putSingle
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|isEnum
argument_list|()
condition|)
block|{
name|values
operator|.
name|putSingle
argument_list|(
name|propertyName
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSupportedCollectionOrArray
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|theValues
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|theValues
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Set
condition|)
block|{
name|theValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|(
name|Set
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|theValues
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|theValues
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSupportedMap
argument_list|(
name|m
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|propertyName
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|fillInValuesFromBean
argument_list|(
name|value
argument_list|,
name|propertyName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|Map
argument_list|<
name|Parameter
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getParametersFromBeanClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|,
name|ParameterType
name|type
parameter_list|,
name|boolean
name|checkIgnorable
parameter_list|)
block|{
name|Map
argument_list|<
name|Parameter
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|params
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Parameter
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|beanClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|String
name|methodName
init|=
name|m
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|startsFromGet
init|=
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|startsFromGet
operator|||
name|isBooleanType
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|&&
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
operator|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|int
name|minLen
init|=
name|startsFromGet
condition|?
literal|3
else|:
literal|2
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|length
argument_list|()
operator|<=
name|minLen
condition|)
block|{
continue|continue;
block|}
name|String
name|propertyName
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|methodName
operator|.
name|substring
argument_list|(
name|minLen
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getReturnType
argument_list|()
operator|==
name|Class
operator|.
name|class
operator|||
name|checkIgnorable
operator|&&
name|canPropertyBeIgnored
argument_list|(
name|m
argument_list|,
name|propertyName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|params
operator|.
name|put
argument_list|(
operator|new
name|Parameter
argument_list|(
name|type
argument_list|,
name|propertyName
argument_list|)
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|params
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|canPropertyBeIgnored
parameter_list|(
name|Method
name|m
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
for|for
control|(
name|Annotation
name|ann
range|:
name|m
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|String
name|annType
init|=
name|ann
operator|.
name|annotationType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"org.apache.cxf.aegis.type.java5.IgnoreProperty"
operator|.
name|equals
argument_list|(
name|annType
argument_list|)
operator|||
literal|"javax.xml.bind.annotation.XmlTransient"
operator|.
name|equals
argument_list|(
name|annType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|isPrimitive
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|String
operator|.
name|class
operator|==
name|type
operator|||
name|isPrimitiveOnly
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|isPrimitiveOnly
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|isPrimitive
argument_list|()
operator|||
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|Boolean
operator|.
name|class
operator|==
name|type
operator|||
name|Character
operator|.
name|class
operator|==
name|type
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|String
name|decodeValue
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|decode
parameter_list|,
name|ParameterType
name|param
parameter_list|)
block|{
if|if
condition|(
operator|!
name|decode
condition|)
block|{
return|return
name|value
return|;
block|}
if|if
condition|(
name|param
operator|==
name|ParameterType
operator|.
name|PATH
operator|||
name|param
operator|==
name|ParameterType
operator|.
name|MATRIX
condition|)
block|{
return|return
name|HttpUtils
operator|.
name|pathDecode
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|HttpUtils
operator|.
name|urlDecode
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|invokeLifeCycleMethod
parameter_list|(
name|Object
name|instance
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|method
operator|=
name|InjectionUtils
operator|.
name|checkProxy
argument_list|(
name|method
argument_list|,
name|instance
argument_list|)
expr_stmt|;
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Method "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be invoked"
operator|+
literal|" due to InvocationTargetException"
decl_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|JAXRSUtils
operator|.
name|toResponseBuilder
argument_list|(
literal|500
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Method "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be invoked"
operator|+
literal|" due to IllegalAccessException"
decl_stmt|;
throw|throw
name|ExceptionUtils
operator|.
name|toInternalServerErrorException
argument_list|(
name|ex
argument_list|,
name|JAXRSUtils
operator|.
name|toResponseBuilder
argument_list|(
literal|500
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|Object
name|convertStringToPrimitive
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|convertStringToPrimitive
argument_list|(
name|value
argument_list|,
name|cls
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Object
name|convertStringToPrimitive
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
name|Message
name|m
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|Object
name|obj
init|=
name|createFromParameterHandler
argument_list|(
name|value
argument_list|,
name|cls
argument_list|,
name|cls
argument_list|,
name|anns
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
return|return
name|obj
return|;
block|}
if|if
condition|(
name|String
operator|.
name|class
operator|==
name|cls
condition|)
block|{
return|return
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
name|PrimitiveUtils
operator|.
name|read
argument_list|(
name|value
argument_list|,
name|cls
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|isEnum
argument_list|()
condition|)
block|{
if|if
condition|(
name|m
operator|!=
literal|null
operator|&&
operator|!
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|m
argument_list|,
name|ENUM_CONVERSION_CASE_SENSITIVE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|obj
operator|=
name|invokeValueOf
argument_list|(
name|value
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|obj
operator|=
name|invokeValueOf
argument_list|(
name|value
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|obj
operator|=
name|invokeValueOf
argument_list|(
name|value
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
return|return
name|obj
return|;
block|}
else|else
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
init|=
name|cls
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
block|)
empty_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// try valueOf
block|}
return|return
name|invokeValueOf
argument_list|(
name|value
argument_list|,
name|cls
argument_list|)
return|;
block|}
end_function

begin_function
unit|}          private
specifier|static
name|Object
name|invokeValueOf
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|cls
operator|.
name|getMethod
argument_list|(
literal|"valueOf"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getRawResponseClass
parameter_list|(
name|Object
name|targetObject
parameter_list|)
block|{
if|if
condition|(
name|targetObject
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|targetClass
init|=
name|targetObject
operator|.
name|getClass
argument_list|()
decl_stmt|;
return|return
name|ClassHelper
operator|.
name|getRealClassFromClass
argument_list|(
name|targetClass
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|Type
name|getGenericResponseType
parameter_list|(
name|Method
name|invoked
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|serviceCls
parameter_list|,
name|Object
name|targetObject
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|targetType
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|targetObject
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Type
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|GenericEntity
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|targetObject
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
name|processGenericTypeIfNeeded
argument_list|(
name|serviceCls
argument_list|,
name|targetType
argument_list|,
operator|(
operator|(
name|GenericEntity
argument_list|<
name|?
argument_list|>
operator|)
name|targetObject
operator|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|invoked
operator|==
literal|null
operator|||
operator|!
name|invoked
operator|.
name|getReturnType
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|targetType
argument_list|)
condition|)
block|{
comment|// when a method has been invoked it is still possible that either an ExceptionMapper
comment|// or a ResponseHandler filter overrides a response entity; if it happens then
comment|// the Type is the class of the response object, unless this new entity is assignable
comment|// to invoked.getReturnType(); same applies to the case when a method returns Response
name|type
operator|=
name|targetObject
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|processGenericTypeIfNeeded
argument_list|(
name|serviceCls
argument_list|,
name|targetType
argument_list|,
name|invoked
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|updateParamClassToTypeIfNeeded
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|paramCls
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|paramCls
operator|!=
name|type
operator|&&
name|type
operator|instanceof
name|Class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clsType
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
decl_stmt|;
if|if
condition|(
name|paramCls
operator|.
name|isAssignableFrom
argument_list|(
name|clsType
argument_list|)
operator|||
name|clsType
operator|!=
name|Object
operator|.
name|class
operator|&&
operator|!
name|clsType
operator|.
name|isInterface
argument_list|()
operator|&&
name|clsType
operator|.
name|isAssignableFrom
argument_list|(
name|paramCls
argument_list|)
condition|)
block|{
name|paramCls
operator|=
name|clsType
expr_stmt|;
block|}
block|}
return|return
name|paramCls
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Type
name|processGenericTypeIfNeeded
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|serviceCls
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|paramCls
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
name|type
operator|=
name|InjectionUtils
operator|.
name|getSuperType
argument_list|(
name|serviceCls
argument_list|,
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
operator|&&
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|TypeVariable
operator|&&
name|isSupportedCollectionOrArray
argument_list|(
name|getRawType
argument_list|(
name|type
argument_list|)
argument_list|)
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|typeVar
init|=
call|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|type
argument_list|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Type
name|theType
init|=
name|InjectionUtils
operator|.
name|getSuperType
argument_list|(
name|serviceCls
argument_list|,
name|typeVar
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|theType
operator|instanceof
name|Class
condition|?
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|theType
else|:
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|theType
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|type
operator|=
operator|new
name|ParameterizedCollectionType
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|==
name|Object
operator|.
name|class
condition|)
block|{
name|type
operator|=
name|paramCls
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Object
name|getEntity
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|GenericEntity
condition|?
operator|(
operator|(
name|GenericEntity
argument_list|<
name|?
argument_list|>
operator|)
name|o
operator|)
operator|.
name|getEntity
argument_list|()
else|:
name|o
return|;
block|}
end_function

unit|}
end_unit

