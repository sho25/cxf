begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|OffsetDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|OffsetTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParseException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverterProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_comment
comment|/**  * ParamConverterProvider for Java 8 JSR 310 Date Time API  */
end_comment

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|JavaTimeTypesParamConverterProvider
implements|implements
name|ParamConverterProvider
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ParamConverter
argument_list|<
name|T
argument_list|>
name|getConverter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|rawType
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|)
block|{
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|LocalDateTime
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|ParamConverter
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|LocalDateTimeConverter
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|LocalDate
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|ParamConverter
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|LocalDateConverter
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|LocalTime
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|ParamConverter
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|LocalTimeConverter
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|OffsetDateTime
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|ParamConverter
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|OffsetDateTimeConverter
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|OffsetTime
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|ParamConverter
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|OffsetTimeConverter
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|ZonedDateTime
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|ParamConverter
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|ZonedDateTimeConverter
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
class|class
name|LocalDateTimeConverter
implements|implements
name|ParamConverter
argument_list|<
name|LocalDateTime
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|LocalDateTime
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|LocalDateTime
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|getFormatter
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|parseException
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|LocalDateTime
name|localDateTime
parameter_list|)
block|{
return|return
name|getFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|localDateTime
argument_list|)
return|;
block|}
specifier|protected
name|DateTimeFormatter
name|getFormatter
parameter_list|()
block|{
return|return
name|DateTimeFormatter
operator|.
name|ISO_LOCAL_DATE_TIME
return|;
block|}
block|}
specifier|public
class|class
name|LocalDateConverter
implements|implements
name|ParamConverter
argument_list|<
name|LocalDate
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|LocalDate
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|LocalDate
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|getFormatter
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|parseException
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|LocalDate
name|localDate
parameter_list|)
block|{
return|return
name|getFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|localDate
argument_list|)
return|;
block|}
specifier|protected
name|DateTimeFormatter
name|getFormatter
parameter_list|()
block|{
return|return
name|DateTimeFormatter
operator|.
name|ISO_LOCAL_DATE
return|;
block|}
block|}
specifier|public
class|class
name|LocalTimeConverter
implements|implements
name|ParamConverter
argument_list|<
name|LocalTime
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|LocalTime
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|LocalTime
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|getFormatter
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|parseException
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|LocalTime
name|localTime
parameter_list|)
block|{
return|return
name|getFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|localTime
argument_list|)
return|;
block|}
specifier|protected
name|DateTimeFormatter
name|getFormatter
parameter_list|()
block|{
return|return
name|DateTimeFormatter
operator|.
name|ISO_LOCAL_TIME
return|;
block|}
block|}
specifier|public
class|class
name|OffsetDateTimeConverter
implements|implements
name|ParamConverter
argument_list|<
name|OffsetDateTime
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|OffsetDateTime
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|OffsetDateTime
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|getFormatter
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|parseException
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|OffsetDateTime
name|offsetDateTime
parameter_list|)
block|{
return|return
name|getFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|offsetDateTime
argument_list|)
return|;
block|}
specifier|protected
name|DateTimeFormatter
name|getFormatter
parameter_list|()
block|{
return|return
name|DateTimeFormatter
operator|.
name|ISO_OFFSET_DATE_TIME
return|;
block|}
block|}
specifier|public
class|class
name|OffsetTimeConverter
implements|implements
name|ParamConverter
argument_list|<
name|OffsetTime
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|OffsetTime
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|OffsetTime
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|getFormatter
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|parseException
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|OffsetTime
name|offsetTime
parameter_list|)
block|{
return|return
name|getFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|offsetTime
argument_list|)
return|;
block|}
specifier|protected
name|DateTimeFormatter
name|getFormatter
parameter_list|()
block|{
return|return
name|DateTimeFormatter
operator|.
name|ISO_OFFSET_TIME
return|;
block|}
block|}
specifier|public
class|class
name|ZonedDateTimeConverter
implements|implements
name|ParamConverter
argument_list|<
name|ZonedDateTime
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|ZonedDateTime
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|ZonedDateTime
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|getFormatter
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|parseException
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|parseException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|ZonedDateTime
name|zonedDateTime
parameter_list|)
block|{
return|return
name|getFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|zonedDateTime
argument_list|)
return|;
block|}
specifier|protected
name|DateTimeFormatter
name|getFormatter
parameter_list|()
block|{
return|return
name|DateTimeFormatter
operator|.
name|ISO_ZONED_DATE_TIME
return|;
block|}
block|}
block|}
end_class

end_unit

