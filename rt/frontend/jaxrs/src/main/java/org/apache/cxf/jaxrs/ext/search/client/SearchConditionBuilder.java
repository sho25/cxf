begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Builder of client-side search condition string using `fluent interface' style. It helps build create part  * of URL that will be parsed by server-side counterpart. It is factory of different implementations e.g. for  * {@link FiqlSearchConditionBuilder}, that has {@link org.apache.cxf.jaxrs.ext.search.FiqlParser FiqlParser}  * on server-side, one can use<tt>SearchConditionBuilder.instance("FIQL")</tt>.  *<p>  * See {@link FiqlSearchConditionBuilder} for examples of usage.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SearchConditionBuilder
implements|implements
name|PartialCondition
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|SearchConditionBuilder
argument_list|>
name|lang2impl
decl_stmt|;
specifier|private
specifier|static
name|SearchConditionBuilder
name|defaultImpl
decl_stmt|;
static|static
block|{
name|defaultImpl
operator|=
operator|new
name|FiqlSearchConditionBuilder
argument_list|()
expr_stmt|;
name|lang2impl
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SearchConditionBuilder
argument_list|>
argument_list|()
expr_stmt|;
name|lang2impl
operator|.
name|put
argument_list|(
literal|"fiql"
argument_list|,
name|defaultImpl
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates instance of builder.      *       * @return default implementation of builder.      */
specifier|public
specifier|static
name|SearchConditionBuilder
name|instance
parameter_list|()
block|{
return|return
name|instance
argument_list|(
literal|"FIQL"
argument_list|)
return|;
block|}
comment|/**      * Creates instance of builder for specific language.      *       * @param language alias of language, case insensitive. If alias is unknown, default FIQL implementation      *            is returned.      * @return implementation of expected or default builder.      */
specifier|public
specifier|static
name|SearchConditionBuilder
name|instance
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|SearchConditionBuilder
name|impl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|impl
operator|=
name|lang2impl
operator|.
name|get
argument_list|(
name|language
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
name|impl
operator|=
operator|new
name|FiqlSearchConditionBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|impl
return|;
block|}
comment|/** Finalize condition construction and build search condition query. */
specifier|public
specifier|abstract
name|String
name|query
parameter_list|()
function_decl|;
block|}
end_class

end_unit

