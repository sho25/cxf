begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|EntityTag
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ModCountCopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriBuilderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|HttpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseChainCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_comment
comment|/**  * Common proxy and http-centric client implementation  *  */
end_comment

begin_class
specifier|public
class|class
name|AbstractClient
implements|implements
name|Client
implements|,
name|InvocationHandlerAware
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|AbstractClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Interceptor
argument_list|>
name|inInterceptors
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Interceptor
argument_list|>
name|outInterceptors
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ConduitSelector
name|conduitSelector
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|private
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestHeaders
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ResponseBuilder
name|responseBuilder
decl_stmt|;
specifier|private
name|URI
name|baseURI
decl_stmt|;
specifier|private
name|UriBuilder
name|currentBuilder
decl_stmt|;
specifier|protected
name|AbstractClient
parameter_list|(
name|URI
name|baseURI
parameter_list|,
name|URI
name|currentURI
parameter_list|)
block|{
name|this
operator|.
name|baseURI
operator|=
name|baseURI
expr_stmt|;
name|this
operator|.
name|currentBuilder
operator|=
operator|new
name|UriBuilderImpl
argument_list|(
name|currentURI
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|header
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|values
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
for|for
control|(
name|Object
name|o
range|:
name|values
control|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|headers
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|requestHeaders
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|accept
parameter_list|(
name|MediaType
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|MediaType
name|mt
range|:
name|types
control|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|type
parameter_list|(
name|MediaType
name|ct
parameter_list|)
block|{
return|return
name|type
argument_list|(
name|ct
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|requestHeaders
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|accept
parameter_list|(
name|String
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|cookie
parameter_list|(
name|Cookie
name|cookie
parameter_list|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|COOKIE
argument_list|,
name|cookie
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|modified
parameter_list|(
name|Date
name|date
parameter_list|,
name|boolean
name|ifNot
parameter_list|)
block|{
name|SimpleDateFormat
name|dateFormat
init|=
name|HttpUtils
operator|.
name|getHttpDateFormat
argument_list|()
decl_stmt|;
name|String
name|hName
init|=
name|ifNot
condition|?
name|HttpHeaders
operator|.
name|IF_UNMODIFIED_SINCE
else|:
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
decl_stmt|;
name|requestHeaders
operator|.
name|putSingle
argument_list|(
name|hName
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|language
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|requestHeaders
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LANGUAGE
argument_list|,
name|language
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|match
parameter_list|(
name|EntityTag
name|tag
parameter_list|,
name|boolean
name|ifNot
parameter_list|)
block|{
name|String
name|hName
init|=
name|ifNot
condition|?
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
else|:
name|HttpHeaders
operator|.
name|IF_MATCH
decl_stmt|;
name|requestHeaders
operator|.
name|putSingle
argument_list|(
name|hName
argument_list|,
name|tag
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|acceptLanguage
parameter_list|(
name|String
modifier|...
name|languages
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|languages
control|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_LANGUAGE
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|acceptEncoding
parameter_list|(
name|String
modifier|...
name|encs
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|encs
control|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_ENCODING
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|encoding
parameter_list|(
name|String
name|enc
parameter_list|)
block|{
name|requestHeaders
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_ENCODING
argument_list|,
name|enc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaders
parameter_list|()
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|requestHeaders
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|URI
name|getBaseURI
parameter_list|()
block|{
return|return
name|baseURI
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|URI
name|getCurrentURI
parameter_list|()
block|{
return|return
name|getCurrentBuilder
argument_list|()
operator|.
name|clone
argument_list|()
operator|.
name|buildFromEncoded
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Response
name|getResponse
parameter_list|()
block|{
if|if
condition|(
name|responseBuilder
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|reset
parameter_list|()
block|{
name|requestHeaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resetResponse
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|protected
name|List
argument_list|<
name|MediaType
argument_list|>
name|getAccept
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|headers
init|=
name|requestHeaders
operator|.
name|get
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|==
literal|null
operator|||
name|headers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|MediaType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|headers
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|MediaType
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
specifier|protected
name|MediaType
name|getType
parameter_list|()
block|{
name|String
name|type
init|=
name|requestHeaders
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
return|return
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|MediaType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|protected
name|UriBuilder
name|getCurrentBuilder
parameter_list|()
block|{
return|return
name|currentBuilder
return|;
block|}
specifier|protected
name|void
name|resetResponse
parameter_list|()
block|{
name|responseBuilder
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|void
name|resetBaseAddress
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|baseURI
operator|=
name|uri
expr_stmt|;
name|resetCurrentBuilder
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|resetCurrentBuilder
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|currentBuilder
operator|=
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ResponseBuilder
name|setResponseBuilder
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
name|int
name|status
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|status
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|conn
operator|.
name|getHeaderFields
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|entry
operator|.
name|getKey
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|HttpUtils
operator|.
name|isDateRelatedHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|responseBuilder
operator|.
name|header
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|values
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|values
control|)
block|{
name|String
name|theValue
init|=
name|s
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|theValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|responseBuilder
operator|.
name|header
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|theValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|status
operator|>=
literal|400
condition|)
block|{
try|try
block|{
name|InputStream
name|errorStream
init|=
name|conn
operator|.
name|getErrorStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorStream
operator|!=
literal|null
condition|)
block|{
name|responseBuilder
operator|.
name|entity
argument_list|(
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|errorStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// nothing we can do really
block|}
block|}
return|return
name|responseBuilder
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|writeBody
parameter_list|(
name|Object
name|o
parameter_list|,
name|Message
name|m
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|OutputStream
name|os
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|MediaType
name|contentType
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|headers
operator|.
name|getFirst
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
decl_stmt|;
name|MessageBodyWriter
name|mbw
init|=
name|ProviderFactory
operator|.
name|getInstance
argument_list|(
name|m
argument_list|)
operator|.
name|createMessageBodyWriter
argument_list|(
name|cls
argument_list|,
name|type
argument_list|,
name|anns
argument_list|,
name|contentType
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|mbw
operator|==
literal|null
condition|)
block|{
name|mbw
operator|=
name|ProviderFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createMessageBodyWriter
argument_list|(
name|cls
argument_list|,
name|type
argument_list|,
name|anns
argument_list|,
name|contentType
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mbw
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mbw
operator|.
name|writeTo
argument_list|(
name|o
argument_list|,
name|cls
argument_list|,
name|type
argument_list|,
name|anns
argument_list|,
name|contentType
argument_list|,
name|headers
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
name|reportNoMessageHandler
argument_list|(
literal|"NO_MSG_WRITER"
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Object
name|readBody
parameter_list|(
name|Response
name|r
parameter_list|,
name|HttpURLConnection
name|conn
parameter_list|,
name|Message
name|inMessage
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
try|try
block|{
name|int
name|status
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
argument_list|<
literal|200
operator|||
name|status
operator|==
literal|204
operator|||
name|status
argument_list|>
literal|300
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// won't happen at this stage
block|}
name|MediaType
name|contentType
init|=
name|getResponseContentType
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MessageBodyReader
name|mbr
init|=
name|ProviderFactory
operator|.
name|getInstance
argument_list|(
name|inMessage
argument_list|)
operator|.
name|createMessageBodyReader
argument_list|(
name|cls
argument_list|,
name|type
argument_list|,
name|anns
argument_list|,
name|contentType
argument_list|,
name|inMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|mbr
operator|==
literal|null
condition|)
block|{
name|ProviderFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createMessageBodyReader
argument_list|(
name|cls
argument_list|,
name|type
argument_list|,
name|anns
argument_list|,
name|contentType
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mbr
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|mbr
operator|.
name|readFrom
argument_list|(
name|cls
argument_list|,
name|type
argument_list|,
name|anns
argument_list|,
name|contentType
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|r
operator|.
name|getMetadata
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
name|reportNoMessageHandler
argument_list|(
literal|"NO_MSG_READER"
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// TODO : shall we just do the reflective invocation here ?
specifier|protected
specifier|static
name|void
name|addParametersToBuilder
parameter_list|(
name|UriBuilder
name|ub
parameter_list|,
name|String
name|paramName
parameter_list|,
name|Object
name|pValue
parameter_list|,
name|ParameterType
name|pt
parameter_list|)
block|{
if|if
condition|(
name|pt
operator|!=
name|ParameterType
operator|.
name|MATRIX
operator|&&
name|pt
operator|!=
name|ParameterType
operator|.
name|QUERY
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This method currently deal "
operator|+
literal|"with matrix and query parameters only"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|paramName
argument_list|)
condition|)
block|{
name|addToBuilder
argument_list|(
name|ub
argument_list|,
name|paramName
argument_list|,
name|pValue
argument_list|,
name|pt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|InjectionUtils
operator|.
name|extractValuesFromBean
argument_list|(
name|pValue
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Object
name|v
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|addToBuilder
argument_list|(
name|ub
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
argument_list|,
name|pt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addToBuilder
parameter_list|(
name|UriBuilder
name|ub
parameter_list|,
name|String
name|paramName
parameter_list|,
name|Object
name|pValue
parameter_list|,
name|ParameterType
name|pt
parameter_list|)
block|{
if|if
condition|(
name|pt
operator|==
name|ParameterType
operator|.
name|MATRIX
condition|)
block|{
name|ub
operator|.
name|matrixParam
argument_list|(
name|paramName
argument_list|,
name|pValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ub
operator|.
name|queryParam
argument_list|(
name|paramName
argument_list|,
name|pValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|reportNoMessageHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMsg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|name
argument_list|,
name|BUNDLE
argument_list|,
name|cls
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|415
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|MediaType
name|getResponseContentType
parameter_list|(
name|Response
name|r
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|r
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|valueOf
argument_list|(
name|map
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|MediaType
operator|.
name|WILDCARD_TYPE
return|;
block|}
specifier|protected
specifier|static
name|HttpURLConnection
name|createHttpConnection
parameter_list|(
name|URI
name|uri
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
try|try
block|{
name|URL
name|url
init|=
name|uri
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
return|return
name|connect
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|setAllHeaders
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|HttpURLConnection
name|conn
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setConduitSelector
parameter_list|(
name|ConduitSelector
name|cs
parameter_list|)
block|{
name|this
operator|.
name|conduitSelector
operator|=
name|cs
expr_stmt|;
block|}
specifier|protected
name|void
name|setBus
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
block|}
specifier|protected
name|void
name|prepareConduitSelector
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|conduitSelector
operator|.
name|prepare
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|ConduitSelector
operator|.
name|class
argument_list|,
name|conduitSelector
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|PhaseInterceptorChain
name|setupOutInterceptorChain
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|PhaseManager
name|pm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|>
name|i1
init|=
name|bus
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|>
name|i2
init|=
name|outInterceptors
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|>
name|i3
init|=
name|endpoint
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
return|return
operator|new
name|PhaseChainCache
argument_list|()
operator|.
name|get
argument_list|(
name|pm
operator|.
name|getOutPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|)
return|;
block|}
specifier|protected
name|PhaseInterceptorChain
name|setupInInterceptorChain
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|PhaseManager
name|pm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|>
name|i1
init|=
name|bus
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|>
name|i2
init|=
name|inInterceptors
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|>
name|i3
init|=
name|endpoint
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
return|return
operator|new
name|PhaseChainCache
argument_list|()
operator|.
name|get
argument_list|(
name|pm
operator|.
name|getInPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|)
return|;
block|}
specifier|protected
name|Message
name|createSimpleMessage
parameter_list|()
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|String
name|httpMethod
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|URI
name|currentURI
parameter_list|)
block|{
name|Message
name|m
init|=
name|conduitSelector
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|httpMethod
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
name|currentURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|currentURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|headers
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setSynchronous
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|,
operator|new
name|ClientMessageObserver
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|conduitSelector
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOneWay
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
name|setupOutInterceptorChain
argument_list|(
name|conduitSelector
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
comment|//setup conduit selector
name|prepareConduitSelector
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|protected
name|void
name|setInInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|>
name|interceptors
parameter_list|)
block|{
name|inInterceptors
operator|=
name|interceptors
expr_stmt|;
block|}
specifier|protected
name|void
name|setOutInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|>
name|interceptors
parameter_list|)
block|{
name|outInterceptors
operator|=
name|interceptors
expr_stmt|;
block|}
specifier|private
class|class
name|ClientMessageObserver
implements|implements
name|MessageObserver
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|Message
name|message
init|=
name|conduitSelector
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
name|setupInInterceptorChain
argument_list|(
name|conduitSelector
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Bus
name|origBus
init|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|// execute chain
try|try
block|{
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|origBus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Object
name|getInvocationHandler
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

