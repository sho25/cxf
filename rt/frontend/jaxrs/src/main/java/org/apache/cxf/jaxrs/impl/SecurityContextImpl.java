begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|SecurityContextImpl
implements|implements
name|SecurityContext
block|{
specifier|private
name|Message
name|m
decl_stmt|;
specifier|public
name|SecurityContextImpl
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|this
operator|.
name|m
operator|=
name|m
expr_stmt|;
block|}
comment|// TODO
specifier|public
name|String
name|getAuthenticationScheme
parameter_list|()
block|{
if|if
condition|(
name|m
operator|.
name|get
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|SecurityContext
operator|.
name|BASIC_AUTH
return|;
block|}
return|return
literal|"Unknown scheme"
return|;
block|}
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
name|sc
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
operator|)
name|m
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|sc
operator|==
literal|null
condition|?
literal|null
else|:
name|sc
operator|.
name|getUserPrincipal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isSecure
parameter_list|()
block|{
name|String
name|value
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getDestination
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|value
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
name|sc
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
operator|)
name|m
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|sc
operator|==
literal|null
condition|?
literal|false
else|:
name|sc
operator|.
name|isUserInRole
argument_list|(
name|role
argument_list|)
return|;
block|}
block|}
end_class

end_unit

