begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|RuntimeDelegate
operator|.
name|HeaderDelegate
import|;
end_import

begin_class
specifier|public
class|class
name|CookieHeaderProvider
implements|implements
name|HeaderDelegate
argument_list|<
name|Cookie
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"$Version"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH
init|=
literal|"$Path"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOMAIN
init|=
literal|"$Domain"
decl_stmt|;
specifier|public
name|Cookie
name|fromString
parameter_list|(
name|String
name|c
parameter_list|)
block|{
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
name|String
name|domain
init|=
literal|null
decl_stmt|;
comment|// ignore the fact the possible version may be seperated by ','
name|String
index|[]
name|tokens
init|=
name|c
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
name|VERSION
argument_list|)
condition|)
block|{
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|token
operator|.
name|substring
argument_list|(
name|VERSION
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
name|PATH
argument_list|)
condition|)
block|{
name|path
operator|=
name|token
operator|.
name|substring
argument_list|(
name|PATH
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
name|DOMAIN
argument_list|)
condition|)
block|{
name|domain
operator|=
name|token
operator|.
name|substring
argument_list|(
name|DOMAIN
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|name
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|value
operator|=
name|i
operator|==
name|token
operator|.
name|length
argument_list|()
operator|+
literal|1
condition|?
literal|""
else|:
name|token
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cookie is malformed : "
operator|+
name|c
argument_list|)
throw|;
block|}
return|return
operator|new
name|Cookie
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|path
argument_list|,
name|domain
argument_list|,
name|version
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|Cookie
name|c
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getVersion
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|VERSION
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
operator|.
name|append
argument_list|(
name|PATH
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
operator|.
name|append
argument_list|(
name|DOMAIN
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|getDomain
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

