begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Composite 'and' search condition     */
end_comment

begin_class
specifier|public
class|class
name|AndSearchCondition
parameter_list|<
name|T
parameter_list|>
implements|implements
name|SearchCondition
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|SearchCondition
argument_list|<
name|T
argument_list|>
argument_list|>
name|conditions
decl_stmt|;
specifier|public
name|AndSearchCondition
parameter_list|()
block|{              }
specifier|public
name|AndSearchCondition
parameter_list|(
name|List
argument_list|<
name|SearchCondition
argument_list|<
name|T
argument_list|>
argument_list|>
name|conditions
parameter_list|)
block|{
name|this
operator|.
name|conditions
operator|=
name|conditions
expr_stmt|;
block|}
specifier|public
name|void
name|setConditions
parameter_list|(
name|List
argument_list|<
name|SearchCondition
argument_list|<
name|T
argument_list|>
argument_list|>
name|conditions
parameter_list|)
block|{
name|this
operator|.
name|conditions
operator|=
name|conditions
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMet
parameter_list|(
name|T
name|pojo
parameter_list|)
block|{
for|for
control|(
name|SearchCondition
argument_list|<
name|T
argument_list|>
name|sc
range|:
name|conditions
control|)
block|{
if|if
condition|(
operator|!
name|sc
operator|.
name|isMet
argument_list|(
name|pojo
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|T
name|getCondition
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|ConditionType
name|getConditionType
parameter_list|()
block|{
return|return
name|ConditionType
operator|.
name|AND
return|;
block|}
specifier|public
name|List
argument_list|<
name|SearchCondition
argument_list|<
name|T
argument_list|>
argument_list|>
name|getConditions
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|conditions
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|findAll
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|pojos
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|pojo
range|:
name|pojos
control|)
block|{
if|if
condition|(
name|isMet
argument_list|(
name|pojo
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pojo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

