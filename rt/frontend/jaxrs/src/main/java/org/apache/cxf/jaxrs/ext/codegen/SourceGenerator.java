begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|codegen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HEAD
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HeaderParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|MatrixParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|JCodeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|S2JJAXBModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|SchemaCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|wadl
operator|.
name|WadlGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_comment
comment|/**  * TODO: This will need to be moved into a separate module  */
end_comment

begin_class
specifier|public
class|class
name|SourceGenerator
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CODE_TYPE_GRAMMAR
init|=
literal|"grammar"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CODE_TYPE_PROXY
init|=
literal|"proxy"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CODE_TYPE_WEB
init|=
literal|"web"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LINE_SEP_PROPERTY
init|=
literal|"line.separator"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FILE_SEP_PROPERTY
init|=
literal|"file.separator"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SourceGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PACKAGE_NAME
init|=
literal|"application"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_RESOURCE_NAME
init|=
literal|"Resource"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TAB
init|=
literal|"    "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|HTTP_METHOD_ANNOTATIONS
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PARAM_ANNOTATIONS
decl_stmt|;
static|static
block|{
name|HTTP_METHOD_ANNOTATIONS
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|HTTP_METHOD_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"get"
argument_list|,
name|GET
operator|.
name|class
argument_list|)
expr_stmt|;
name|HTTP_METHOD_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"put"
argument_list|,
name|PUT
operator|.
name|class
argument_list|)
expr_stmt|;
name|HTTP_METHOD_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"post"
argument_list|,
name|POST
operator|.
name|class
argument_list|)
expr_stmt|;
name|HTTP_METHOD_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"delete"
argument_list|,
name|DELETE
operator|.
name|class
argument_list|)
expr_stmt|;
name|HTTP_METHOD_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"head"
argument_list|,
name|HEAD
operator|.
name|class
argument_list|)
expr_stmt|;
name|HTTP_METHOD_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"options"
argument_list|,
name|OPTIONS
operator|.
name|class
argument_list|)
expr_stmt|;
name|PARAM_ANNOTATIONS
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|PARAM_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"template"
argument_list|,
name|PathParam
operator|.
name|class
argument_list|)
expr_stmt|;
name|PARAM_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"header"
argument_list|,
name|HeaderParam
operator|.
name|class
argument_list|)
expr_stmt|;
name|PARAM_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"query"
argument_list|,
name|QueryParam
operator|.
name|class
argument_list|)
expr_stmt|;
name|PARAM_ANNOTATIONS
operator|.
name|put
argument_list|(
literal|"matrix"
argument_list|,
name|MatrixParam
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Comparator
argument_list|<
name|String
argument_list|>
name|importsComparator
decl_stmt|;
specifier|private
name|boolean
name|generateInterfaces
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|generateImpl
decl_stmt|;
specifier|private
name|String
name|resourcePackageName
decl_stmt|;
specifier|private
name|String
name|resourceName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|generatedServiceClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|generatedTypeClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SourceGenerator
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SourceGenerator
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|private
name|String
name|getClassPackageName
parameter_list|(
name|String
name|wadlPackageName
parameter_list|)
block|{
if|if
condition|(
name|resourcePackageName
operator|!=
literal|null
condition|)
block|{
return|return
name|resourcePackageName
return|;
block|}
elseif|else
if|if
condition|(
name|wadlPackageName
operator|!=
literal|null
operator|&&
name|wadlPackageName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|wadlPackageName
return|;
block|}
else|else
block|{
return|return
name|DEFAULT_PACKAGE_NAME
return|;
block|}
block|}
specifier|private
name|String
name|getLineSep
parameter_list|()
block|{
name|String
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|LINE_SEP_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
name|LINE_SEP_PROPERTY
argument_list|)
else|:
name|value
return|;
block|}
specifier|private
name|String
name|getFileSep
parameter_list|()
block|{
name|String
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|FILE_SEP_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
name|FILE_SEP_PROPERTY
argument_list|)
else|:
name|value
return|;
block|}
specifier|public
name|void
name|generateSource
parameter_list|(
name|String
name|wadl
parameter_list|,
name|File
name|srcDir
parameter_list|,
name|String
name|codeType
parameter_list|)
block|{
name|Element
name|appElement
init|=
name|readWadl
argument_list|(
name|wadl
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|schemaElements
init|=
name|getSchemaElements
argument_list|(
name|appElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaElements
operator|!=
literal|null
operator|&&
operator|!
name|schemaElements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// generate classes from schema
name|JCodeModel
name|codeModel
init|=
name|createCodeModel
argument_list|(
name|schemaElements
argument_list|,
name|typeClassNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|codeModel
operator|!=
literal|null
condition|)
block|{
name|generateClassesFromSchema
argument_list|(
name|codeModel
argument_list|,
name|srcDir
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|CODE_TYPE_GRAMMAR
operator|.
name|equals
argument_list|(
name|codeType
argument_list|)
condition|)
block|{
name|generateResourceClasses
argument_list|(
name|appElement
argument_list|,
name|schemaElements
argument_list|,
name|typeClassNames
argument_list|,
name|srcDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generateResourceClasses
parameter_list|(
name|Element
name|appElement
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|schemaElements
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|,
name|File
name|src
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|resourcesEls
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|appElement
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"resources"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourcesEls
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"WADL resources element is missing"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Element
argument_list|>
name|resourceEls
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|resourcesEls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"resource"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceEls
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"WADL has no resource elements"
argument_list|)
throw|;
block|}
name|GrammarInfo
name|gInfo
init|=
name|getGrammarInfo
argument_list|(
name|appElement
argument_list|,
name|schemaElements
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceEls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|resource
init|=
name|resourceEls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writeResourceClass
argument_list|(
name|resource
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
name|src
argument_list|,
literal|true
argument_list|,
name|generateInterfaces
argument_list|)
expr_stmt|;
if|if
condition|(
name|generateInterfaces
operator|&&
name|generateImpl
condition|)
block|{
name|writeResourceClass
argument_list|(
name|resource
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourceName
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
name|generateMainClass
argument_list|(
name|resourcesEls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
specifier|private
name|GrammarInfo
name|getGrammarInfo
parameter_list|(
name|Element
name|appElement
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|schemaElements
parameter_list|)
block|{
if|if
condition|(
name|schemaElements
operator|==
literal|null
operator|||
name|schemaElements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NamedNodeMap
name|attrMap
init|=
name|appElement
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrMap
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|attrMap
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|node
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|startsWith
argument_list|(
literal|"xmlns:"
argument_list|)
condition|)
block|{
name|String
name|nsValue
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|nsMap
operator|.
name|put
argument_list|(
name|nodeName
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
argument_list|,
name|nsValue
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|elementTypeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|schemaEl
range|:
name|schemaElements
control|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|elementEls
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|schemaEl
argument_list|,
name|XmlSchemaConstants
operator|.
name|XSD_NAMESPACE_URI
argument_list|,
literal|"element"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementEls
control|)
block|{
name|String
name|type
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|pair
init|=
name|type
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|elementTypeMap
operator|.
name|put
argument_list|(
name|el
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|pair
operator|.
name|length
operator|==
literal|1
condition|?
name|pair
index|[
literal|0
index|]
else|:
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|GrammarInfo
argument_list|(
name|nsMap
argument_list|,
name|elementTypeMap
argument_list|)
return|;
block|}
specifier|public
name|void
name|generateMainClass
parameter_list|(
name|Element
name|resourcesEl
parameter_list|,
name|File
name|src
parameter_list|)
block|{              }
specifier|private
name|void
name|writeResourceClass
parameter_list|(
name|Element
name|rElement
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|,
name|GrammarInfo
name|gInfo
parameter_list|,
name|File
name|src
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|interfaceIsGenerated
parameter_list|)
block|{
name|String
name|resourceId
init|=
name|resourceName
operator|!=
literal|null
condition|?
name|resourceName
else|:
name|rElement
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceId
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|resourceId
operator|=
name|DEFAULT_RESOURCE_NAME
expr_stmt|;
block|}
comment|//TODO: if it's expanded QName then use PackageUtils.getPackageNameByNameSpaceURI
comment|// otherwise assume the last segment after the last dot is the name of the class
comment|// and the package name is before the last dot
name|QName
name|qname
init|=
name|JAXRSUtils
operator|.
name|convertStringToQName
argument_list|(
name|resourceId
argument_list|)
decl_stmt|;
name|String
name|namespaceURI
init|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|getSchemaClassName
argument_list|(
name|PackageUtils
operator|.
name|getPackageNameByNameSpaceURI
argument_list|(
name|namespaceURI
argument_list|)
argument_list|,
name|gInfo
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|typeClassNames
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|sbImports
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|sbCode
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|imports
init|=
name|createImports
argument_list|()
decl_stmt|;
specifier|final
name|String
name|classPackage
init|=
name|getClassPackageName
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|getClassName
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|interfaceIsGenerated
argument_list|)
decl_stmt|;
name|sbImports
operator|.
name|append
argument_list|(
name|getClassComment
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
expr_stmt|;
name|sbImports
operator|.
name|append
argument_list|(
literal|"package "
operator|+
name|classPackage
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRoot
operator|&&
name|writeAnnotations
argument_list|(
name|interfaceIsGenerated
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|rElement
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
name|writeAnnotation
argument_list|(
name|sbCode
argument_list|,
name|imports
argument_list|,
name|Path
operator|.
name|class
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|sbCode
operator|.
name|append
argument_list|(
literal|"public "
operator|+
name|getClassType
argument_list|(
name|interfaceIsGenerated
argument_list|)
operator|+
literal|" "
operator|+
name|className
argument_list|)
expr_stmt|;
name|writeImplementsInterface
argument_list|(
name|sbCode
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|interfaceIsGenerated
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
literal|" {"
operator|+
name|getLineSep
argument_list|()
operator|+
name|getLineSep
argument_list|()
argument_list|)
expr_stmt|;
name|writeMethods
argument_list|(
name|rElement
argument_list|,
name|imports
argument_list|,
name|sbCode
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
name|isRoot
argument_list|,
name|interfaceIsGenerated
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|childEls
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|rElement
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"resource"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|childEl
range|:
name|childEls
control|)
block|{
if|if
condition|(
name|childEl
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writeMethods
argument_list|(
name|childEl
argument_list|,
name|imports
argument_list|,
name|sbCode
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
literal|false
argument_list|,
name|interfaceIsGenerated
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeResourceMethod
argument_list|(
name|childEl
argument_list|,
name|imports
argument_list|,
name|sbCode
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
literal|false
argument_list|,
name|interfaceIsGenerated
argument_list|)
expr_stmt|;
block|}
block|}
name|sbCode
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|writeImports
argument_list|(
name|sbImports
argument_list|,
name|imports
argument_list|,
name|classPackage
argument_list|)
expr_stmt|;
name|createJavaSourceFile
argument_list|(
name|src
argument_list|,
operator|new
name|QName
argument_list|(
name|classPackage
argument_list|,
name|className
argument_list|)
argument_list|,
name|sbCode
argument_list|,
name|sbImports
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|subEl
range|:
name|childEls
control|)
block|{
name|String
name|id
init|=
name|subEl
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|resourceId
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
operator|!
name|id
operator|.
name|startsWith
argument_list|(
literal|"{java"
argument_list|)
condition|)
block|{
name|writeResourceClass
argument_list|(
name|subEl
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
name|interfaceIsGenerated
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|getClassType
parameter_list|(
name|boolean
name|interfaceIsGenerated
parameter_list|)
block|{
return|return
name|interfaceIsGenerated
condition|?
literal|"interface"
else|:
literal|"class"
return|;
block|}
specifier|private
name|String
name|getClassName
parameter_list|(
name|String
name|clsName
parameter_list|,
name|boolean
name|interfaceIsGenerated
parameter_list|)
block|{
if|if
condition|(
name|interfaceIsGenerated
condition|)
block|{
return|return
name|clsName
return|;
block|}
else|else
block|{
return|return
name|generateInterfaces
condition|?
name|clsName
operator|+
literal|"Impl"
else|:
name|clsName
return|;
block|}
block|}
specifier|private
name|boolean
name|writeAnnotations
parameter_list|(
name|boolean
name|interfaceIsGenerated
parameter_list|)
block|{
if|if
condition|(
name|interfaceIsGenerated
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
operator|!
name|generateInterfaces
operator|&&
name|generateImpl
return|;
block|}
block|}
specifier|private
name|void
name|writeImplementsInterface
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|clsName
parameter_list|,
name|boolean
name|interfaceIsGenerated
parameter_list|)
block|{
if|if
condition|(
name|generateInterfaces
operator|&&
operator|!
name|interfaceIsGenerated
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" implements "
operator|+
name|clsName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getClassComment
parameter_list|()
block|{
return|return
literal|"/**"
operator|+
name|getLineSep
argument_list|()
operator|+
literal|" * Created by Apache CXF WadlToJava code generator"
operator|+
name|getLineSep
argument_list|()
operator|+
literal|"**/"
return|;
block|}
specifier|private
name|void
name|writeMethods
parameter_list|(
name|Element
name|rElement
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|StringBuilder
name|sbCode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|,
name|GrammarInfo
name|gInfo
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|interfaceIsGenerated
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|methodEls
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|rElement
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"method"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|methodEl
range|:
name|methodEls
control|)
block|{
name|writeResourceMethod
argument_list|(
name|methodEl
argument_list|,
name|imports
argument_list|,
name|sbCode
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
name|isRoot
argument_list|,
name|interfaceIsGenerated
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeAnnotation
parameter_list|(
name|StringBuilder
name|sbCode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|nextLine
parameter_list|,
name|boolean
name|addTab
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|addImport
argument_list|(
name|imports
argument_list|,
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|"(\""
operator|+
name|value
operator|+
literal|"\")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextLine
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|addTab
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addImport
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|String
name|clsName
parameter_list|)
block|{
if|if
condition|(
name|imports
operator|==
literal|null
operator|||
name|clsName
operator|.
name|startsWith
argument_list|(
literal|"java.lang"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|imports
operator|.
name|contains
argument_list|(
name|clsName
argument_list|)
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|clsName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeImports
parameter_list|(
name|StringBuilder
name|sbImports
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|String
name|classPackage
parameter_list|)
block|{
for|for
control|(
name|String
name|clsName
range|:
name|imports
control|)
block|{
name|int
name|index
init|=
name|clsName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
operator|&&
name|clsName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|equals
argument_list|(
name|classPackage
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|sbImports
operator|.
name|append
argument_list|(
literal|"import "
operator|+
name|clsName
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeResourceMethod
parameter_list|(
name|Element
name|methodEl
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|StringBuilder
name|sbCode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|,
name|GrammarInfo
name|gInfo
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|interfaceIsGenerated
parameter_list|)
block|{
name|Element
name|resourceEl
init|=
literal|"resource"
operator|.
name|equals
argument_list|(
name|methodEl
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|?
name|methodEl
else|:
operator|(
name|Element
operator|)
name|methodEl
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
name|String
name|methodName
init|=
name|methodEl
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|methodNameLowerCase
init|=
name|methodName
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|methodEl
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|id
operator|=
name|methodNameLowerCase
expr_stmt|;
block|}
name|List
argument_list|<
name|Element
argument_list|>
name|responseEls
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|methodEl
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"response"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|requestEls
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|methodEl
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"request"
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeAnnotations
argument_list|(
name|interfaceIsGenerated
argument_list|)
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
expr_stmt|;
if|if
condition|(
name|methodNameLowerCase
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|HTTP_METHOD_ANNOTATIONS
operator|.
name|containsKey
argument_list|(
name|methodNameLowerCase
argument_list|)
condition|)
block|{
name|writeAnnotation
argument_list|(
name|sbCode
argument_list|,
name|imports
argument_list|,
name|HTTP_METHOD_ANNOTATIONS
operator|.
name|get
argument_list|(
name|methodNameLowerCase
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO : write a custom annotation class name based on HttpMethod
block|}
name|writeFormatAnnotations
argument_list|(
name|requestEls
argument_list|,
name|sbCode
argument_list|,
name|imports
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeFormatAnnotations
argument_list|(
name|responseEls
argument_list|,
name|sbCode
argument_list|,
name|imports
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isRoot
condition|)
block|{
name|String
name|path
init|=
name|resourceEl
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
name|writeAnnotation
argument_list|(
name|sbCode
argument_list|,
name|imports
argument_list|,
name|Path
operator|.
name|class
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sbCode
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|interfaceIsGenerated
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|"public "
argument_list|)
expr_stmt|;
block|}
name|boolean
name|responseTypeAvailable
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|methodNameLowerCase
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|responseTypeAvailable
operator|=
name|writeResponseType
argument_list|(
name|responseEls
argument_list|,
name|sbCode
argument_list|,
name|imports
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QName
name|qname
init|=
name|JAXRSUtils
operator|.
name|convertStringToQName
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|packageName
init|=
name|PackageUtils
operator|.
name|getPackageNameByNameSpaceURI
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|clsSimpleName
init|=
name|getSchemaClassName
argument_list|(
name|packageName
argument_list|,
name|gInfo
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|typeClassNames
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|clsSimpleName
operator|==
literal|null
condition|?
name|qname
operator|.
name|getLocalPart
argument_list|()
else|:
name|clsSimpleName
operator|.
name|substring
argument_list|(
name|packageName
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|subResponseNs
init|=
name|clsSimpleName
operator|==
literal|null
condition|?
name|getClassPackageName
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
else|:
name|clsSimpleName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|packageName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|parentId
init|=
operator|(
operator|(
name|Element
operator|)
name|resourceEl
operator|.
name|getParentNode
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|writeSubResponseType
argument_list|(
name|id
operator|.
name|equals
argument_list|(
name|parentId
argument_list|)
argument_list|,
name|subResponseNs
argument_list|,
name|localName
argument_list|,
name|sbCode
argument_list|,
name|imports
argument_list|)
expr_stmt|;
comment|// TODO : we need to take care of multiple subresource locators with diff @Path
comment|// returning the same type; also we might have ids like "{org.apache.cxf}Book#getName"
name|sbCode
operator|.
name|append
argument_list|(
literal|"get"
operator|+
name|localName
argument_list|)
expr_stmt|;
block|}
name|sbCode
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|inParamElements
init|=
operator|new
name|LinkedList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
name|inParamElements
operator|.
name|addAll
argument_list|(
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|resourceEl
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|writeRequestTypes
argument_list|(
name|requestEls
argument_list|,
name|inParamElements
argument_list|,
name|sbCode
argument_list|,
name|imports
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
name|interfaceIsGenerated
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaceIsGenerated
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateEmptyMethodBody
argument_list|(
name|sbCode
argument_list|,
name|responseTypeAvailable
argument_list|)
expr_stmt|;
block|}
name|sbCode
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateEmptyMethodBody
parameter_list|(
name|StringBuilder
name|sbCode
parameter_list|,
name|boolean
name|responseTypeAvailable
parameter_list|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|" {"
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
literal|"//TODO: implement"
argument_list|)
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseTypeAvailable
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
operator|.
name|append
argument_list|(
literal|"return null;"
argument_list|)
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
expr_stmt|;
block|}
name|sbCode
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|addFormParameters
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|inParamElements
parameter_list|,
name|Element
name|requestEl
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|repElements
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|requestEl
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"representation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|repElements
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|mediaType
init|=
name|repElements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttribute
argument_list|(
literal|"mediaType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
operator|.
name|equals
argument_list|(
name|mediaType
argument_list|)
condition|)
block|{
name|inParamElements
operator|.
name|addAll
argument_list|(
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|repElements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|writeResponseType
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|responseEls
parameter_list|,
name|StringBuilder
name|sbCode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|,
name|GrammarInfo
name|gInfo
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|repElements
init|=
name|responseEls
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|responseEls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"representation"
argument_list|)
else|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|repElements
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|"void "
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|elementName
init|=
name|getElementRefName
argument_list|(
name|repElements
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
name|imports
argument_list|)
decl_stmt|;
if|if
condition|(
name|elementName
operator|!=
literal|null
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
name|elementName
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addImport
argument_list|(
name|imports
argument_list|,
name|Response
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
literal|"Response "
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|writeSubResponseType
parameter_list|(
name|boolean
name|recursive
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|localName
parameter_list|,
name|StringBuilder
name|sbCode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|)
block|{
if|if
condition|(
operator|!
name|recursive
operator|&&
name|ns
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addImport
argument_list|(
name|imports
argument_list|,
name|ns
operator|+
literal|"."
operator|+
name|localName
argument_list|)
expr_stmt|;
block|}
name|sbCode
operator|.
name|append
argument_list|(
name|localName
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeRequestTypes
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|requestEls
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|inParamEls
parameter_list|,
name|StringBuilder
name|sbCode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|,
name|GrammarInfo
name|gInfo
parameter_list|,
name|boolean
name|interfaceIsGenerated
parameter_list|)
block|{
name|boolean
name|form
init|=
literal|false
decl_stmt|;
name|boolean
name|formParamsAvailbale
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|requestEls
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|inParamEls
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|inParamEls
operator|.
name|addAll
argument_list|(
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|requestEls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|currentSize
init|=
name|inParamEls
operator|.
name|size
argument_list|()
decl_stmt|;
name|form
operator|=
name|addFormParameters
argument_list|(
name|inParamEls
argument_list|,
name|requestEls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|formParamsAvailbale
operator|=
name|currentSize
operator|<
name|inParamEls
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|form
operator|&&
operator|!
name|formParamsAvailbale
condition|)
block|{
name|addImport
argument_list|(
name|imports
argument_list|,
name|MultivaluedMap
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
literal|"MultivaluedMap map"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inParamEls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|paramEl
init|=
name|inParamEls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|paramEl
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeAnnotations
argument_list|(
name|interfaceIsGenerated
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|paramAnnotation
init|=
name|form
condition|?
name|FormParam
operator|.
name|class
else|:
name|PARAM_ANNOTATIONS
operator|.
name|get
argument_list|(
name|paramEl
operator|.
name|getAttribute
argument_list|(
literal|"style"
argument_list|)
argument_list|)
decl_stmt|;
name|writeAnnotation
argument_list|(
name|sbCode
argument_list|,
name|imports
argument_list|,
name|paramAnnotation
argument_list|,
name|name
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|getPrimitiveType
argument_list|(
name|paramEl
argument_list|)
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|paramEl
operator|.
name|getAttribute
argument_list|(
literal|"repeating"
argument_list|)
argument_list|)
condition|)
block|{
name|addImport
argument_list|(
name|imports
argument_list|,
name|List
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|=
literal|"List<"
operator|+
name|type
operator|+
literal|">"
expr_stmt|;
block|}
name|sbCode
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|inParamEls
operator|.
name|size
argument_list|()
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
literal|4
operator|&&
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|4
operator|)
operator|==
literal|0
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|form
condition|)
block|{
name|String
name|elementName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|repElements
init|=
name|requestEls
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|requestEls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"representation"
argument_list|)
else|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|repElements
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|elementName
operator|=
name|getElementRefName
argument_list|(
name|repElements
argument_list|,
name|typeClassNames
argument_list|,
name|gInfo
argument_list|,
name|imports
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elementName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|inParamEls
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sbCode
operator|.
name|append
argument_list|(
name|elementName
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|elementName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|getPrimitiveType
parameter_list|(
name|Element
name|paramEl
parameter_list|)
block|{
name|String
name|type
init|=
name|paramEl
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|"String"
return|;
block|}
name|String
index|[]
name|pair
init|=
name|type
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|pair
operator|.
name|length
operator|==
literal|2
condition|?
name|pair
index|[
literal|1
index|]
else|:
name|type
decl_stmt|;
return|return
literal|"string"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|?
literal|"String"
else|:
name|value
return|;
block|}
specifier|private
name|String
name|getElementRefName
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|repElements
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|,
name|GrammarInfo
name|gInfo
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|)
block|{
name|String
name|elementRef
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|repElements
control|)
block|{
name|String
name|value
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"element"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|elementRef
operator|=
name|value
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|elementRef
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|pair
init|=
name|elementRef
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|namespace
init|=
name|gInfo
operator|!=
literal|null
condition|?
name|gInfo
operator|.
name|getNsMap
argument_list|()
operator|.
name|get
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|packageName
init|=
name|PackageUtils
operator|.
name|getPackageNameByNameSpaceURI
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|String
name|clsName
init|=
name|getSchemaClassName
argument_list|(
name|packageName
argument_list|,
name|gInfo
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|,
name|typeClassNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|clsName
operator|!=
literal|null
condition|)
block|{
name|addImport
argument_list|(
name|imports
argument_list|,
name|clsName
argument_list|)
expr_stmt|;
return|return
name|clsName
operator|.
name|substring
argument_list|(
name|packageName
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getSchemaClassName
parameter_list|(
name|String
name|packageName
parameter_list|,
name|GrammarInfo
name|gInfo
parameter_list|,
name|String
name|localName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|)
block|{
name|String
name|clsName
init|=
name|matchClassName
argument_list|(
name|typeClassNames
argument_list|,
name|packageName
argument_list|,
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|clsName
operator|==
literal|null
operator|&&
name|gInfo
operator|!=
literal|null
condition|)
block|{
name|clsName
operator|=
name|matchClassName
argument_list|(
name|typeClassNames
argument_list|,
name|packageName
argument_list|,
name|gInfo
operator|.
name|getElementTypeMap
argument_list|()
operator|.
name|get
argument_list|(
name|localName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|clsName
return|;
block|}
specifier|private
name|String
name|matchClassName
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|,
name|String
name|packageName
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|localName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|clsName
init|=
name|packageName
operator|+
literal|"."
operator|+
name|localName
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|typeClassNames
control|)
block|{
if|if
condition|(
name|type
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|clsName
argument_list|)
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|writeFormatAnnotations
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|parentEls
parameter_list|,
name|StringBuilder
name|sbCode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|boolean
name|inRep
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|repElements
init|=
name|parentEls
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|parentEls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"representation"
argument_list|)
else|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|repElements
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|inRep
condition|?
name|Consumes
operator|.
name|class
else|:
name|Produces
operator|.
name|class
decl_stmt|;
name|addImport
argument_list|(
name|imports
argument_list|,
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|repElements
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repElements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|mediaType
init|=
name|repElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAttribute
argument_list|(
literal|"mediaType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|"\""
operator|+
name|mediaType
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|repElements
operator|.
name|size
argument_list|()
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|repElements
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sbCode
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
block|}
name|sbCode
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|sbCode
operator|.
name|append
argument_list|(
name|getLineSep
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createJavaSourceFile
parameter_list|(
name|File
name|src
parameter_list|,
name|QName
name|qname
parameter_list|,
name|StringBuilder
name|sbCode
parameter_list|,
name|StringBuilder
name|sbImports
parameter_list|)
block|{
name|String
name|content
init|=
name|sbImports
operator|.
name|toString
argument_list|()
operator|+
name|getLineSep
argument_list|()
operator|+
name|sbCode
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|generatedServiceClasses
operator|.
name|add
argument_list|(
name|namespace
operator|+
literal|"."
operator|+
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|namespace
operator|=
name|namespace
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
name|getFileSep
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|currentDir
init|=
operator|new
name|File
argument_list|(
name|src
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|currentDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|currentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|".java"
argument_list|)
decl_stmt|;
try|try
block|{
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Problem writing into "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Element
name|readWadl
parameter_list|(
name|String
name|wadl
parameter_list|)
block|{
try|try
block|{
return|return
name|StaxUtils
operator|.
name|read
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|wadl
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read wadl"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|generateClassesFromSchema
parameter_list|(
name|JCodeModel
name|codeModel
parameter_list|,
name|File
name|src
parameter_list|)
block|{
try|try
block|{
name|Object
name|writer
init|=
name|JAXBUtils
operator|.
name|createFileCodeWriter
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|codeModel
operator|.
name|build
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|generatedTypeClasses
operator|=
name|JAXBUtils
operator|.
name|getGeneratedClassNames
argument_list|(
name|codeModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to write generated Java files for schemas: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Element
argument_list|>
name|getSchemaElements
parameter_list|(
name|Element
name|appElement
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|grammarEls
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|appElement
argument_list|,
name|WadlGenerator
operator|.
name|WADL_NS
argument_list|,
literal|"grammars"
argument_list|)
decl_stmt|;
if|if
condition|(
name|grammarEls
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Element
argument_list|>
name|schemasEls
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|grammarEls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|XmlSchemaConstants
operator|.
name|XSD_NAMESPACE_URI
argument_list|,
literal|"schema"
argument_list|)
decl_stmt|;
comment|//TODO : check remote referencs if size() == 0
return|return
name|schemasEls
return|;
block|}
specifier|private
name|JCodeModel
name|createCodeModel
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|schemaElements
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|type
parameter_list|)
block|{
name|SchemaCompiler
name|compiler
init|=
name|createCompiler
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|addSchemas
argument_list|(
name|schemaElements
argument_list|,
name|compiler
argument_list|)
expr_stmt|;
name|Object
name|elForRun
init|=
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
operator|new
name|InnerErrorListener
argument_list|()
argument_list|,
name|JAXBUtils
operator|.
name|getParamClass
argument_list|(
name|compiler
argument_list|,
literal|"setErrorListener"
argument_list|)
argument_list|)
decl_stmt|;
name|compiler
operator|.
name|setErrorListener
argument_list|(
name|elForRun
argument_list|)
expr_stmt|;
name|S2JJAXBModel
name|intermediateModel
init|=
name|compiler
operator|.
name|bind
argument_list|()
decl_stmt|;
name|JCodeModel
name|codeModel
init|=
name|intermediateModel
operator|.
name|generateCode
argument_list|(
literal|null
argument_list|,
name|elForRun
argument_list|)
decl_stmt|;
name|JAXBUtils
operator|.
name|logGeneratedClassNames
argument_list|(
name|LOG
argument_list|,
name|codeModel
argument_list|)
expr_stmt|;
return|return
name|codeModel
return|;
block|}
specifier|private
name|SchemaCompiler
name|createCompiler
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|typeClassNames
parameter_list|)
block|{
return|return
name|JAXBUtils
operator|.
name|createSchemaCompilerWithDefaultAllocator
argument_list|(
name|typeClassNames
argument_list|)
return|;
block|}
specifier|private
name|void
name|addSchemas
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|schemaElements
parameter_list|,
name|SchemaCompiler
name|compiler
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|schemaElements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//For JAXB 2.1.8
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|(
name|InputStream
operator|)
literal|null
argument_list|)
decl_stmt|;
name|is
operator|.
name|setSystemId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|is
operator|.
name|setPublicId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|compiler
operator|.
name|getOptions
argument_list|()
operator|.
name|addGrammar
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|compiler
operator|.
name|parseSchema
argument_list|(
name|key
argument_list|,
name|schemaElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setImportsComparator
parameter_list|(
name|Comparator
argument_list|<
name|String
argument_list|>
name|importsComparator
parameter_list|)
block|{
name|this
operator|.
name|importsComparator
operator|=
name|importsComparator
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|createImports
parameter_list|()
block|{
return|return
name|importsComparator
operator|==
literal|null
condition|?
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|DefaultImportsComparator
argument_list|()
argument_list|)
else|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|importsComparator
argument_list|)
return|;
block|}
specifier|public
name|void
name|setGenerateInterfaces
parameter_list|(
name|boolean
name|generateInterfaces
parameter_list|)
block|{
name|this
operator|.
name|generateInterfaces
operator|=
name|generateInterfaces
expr_stmt|;
block|}
specifier|public
name|void
name|setGenerateImplementation
parameter_list|(
name|boolean
name|generate
parameter_list|)
block|{
name|this
operator|.
name|generateImpl
operator|=
name|generate
expr_stmt|;
block|}
specifier|public
name|void
name|setPackageName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|resourcePackageName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|setResourceName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|resourceName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGeneratedServiceClasses
parameter_list|()
block|{
return|return
name|generatedServiceClasses
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGeneratedTypeClasses
parameter_list|()
block|{
return|return
name|generatedTypeClasses
return|;
block|}
specifier|private
specifier|static
class|class
name|GrammarInfo
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|elementTypeMap
decl_stmt|;
specifier|public
name|GrammarInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|elementTypeMap
parameter_list|)
block|{
name|this
operator|.
name|nsMap
operator|=
name|nsMap
expr_stmt|;
name|this
operator|.
name|elementTypeMap
operator|=
name|elementTypeMap
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNsMap
parameter_list|()
block|{
return|return
name|nsMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getElementTypeMap
parameter_list|()
block|{
return|return
name|elementTypeMap
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DefaultImportsComparator
implements|implements
name|Comparator
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JAVAX_PREFIX
init|=
literal|"javax"
decl_stmt|;
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
name|boolean
name|javax1
init|=
name|s1
operator|.
name|startsWith
argument_list|(
name|JAVAX_PREFIX
argument_list|)
decl_stmt|;
name|boolean
name|javax2
init|=
name|s1
operator|.
name|startsWith
argument_list|(
name|JAVAX_PREFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|javax1
operator|&&
operator|!
name|javax2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|javax1
operator|&&
name|javax2
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
return|;
block|}
block|}
block|}
specifier|static
class|class
name|InnerErrorListener
block|{
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error compiling schema from WADL : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fatal error compiling schema from WADL : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
end_class

end_unit

