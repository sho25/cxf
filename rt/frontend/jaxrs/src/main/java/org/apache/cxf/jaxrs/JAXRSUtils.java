begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ConsumeMime
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HeaderParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|MatrixParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProduceMime
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|PathSegment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PrimitiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|interceptor
operator|.
name|JAXRSInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|URITemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|HttpHeadersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|PathSegmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|RequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|SecurityContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|UriInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JAXRSUtils
block|{
specifier|public
specifier|static
specifier|final
name|MediaType
name|ALL_TYPES
init|=
operator|new
name|MediaType
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JAXRSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|JAXRSUtils
parameter_list|()
block|{             }
specifier|public
specifier|static
name|String
name|getHttpMethodValue
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
for|for
control|(
name|Annotation
name|a
range|:
name|m
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|HttpMethod
name|httpM
init|=
name|a
operator|.
name|annotationType
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|HttpMethod
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpM
operator|!=
literal|null
condition|)
block|{
return|return
name|httpM
operator|.
name|value
argument_list|()
return|;
block|}
block|}
comment|// TODO : make it shorter
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|i
range|:
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
try|try
block|{
name|Method
name|interfaceMethod
init|=
name|i
operator|.
name|getMethod
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|interfaceMethod
operator|!=
literal|null
condition|)
block|{
return|return
name|getHttpMethodValue
argument_list|(
name|interfaceMethod
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|superC
init|=
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superC
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Method
name|cMethod
init|=
name|superC
operator|.
name|getMethod
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cMethod
operator|!=
literal|null
condition|)
block|{
return|return
name|getHttpMethodValue
argument_list|(
name|cMethod
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Annotation
name|getMethodAnnotation
parameter_list|(
name|Method
name|m
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|aClass
parameter_list|)
block|{
name|Annotation
name|a
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|aClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
return|return
name|a
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|i
range|:
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|a
operator|=
name|getClassMethodAnnotation
argument_list|(
name|m
argument_list|,
name|i
argument_list|,
name|aClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
return|return
name|a
return|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|superC
init|=
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superC
operator|!=
literal|null
condition|)
block|{
return|return
name|getClassMethodAnnotation
argument_list|(
name|m
argument_list|,
name|superC
argument_list|,
name|aClass
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Annotation
name|getClassMethodAnnotation
parameter_list|(
name|Method
name|m
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|aClass
parameter_list|)
block|{
try|try
block|{
name|Method
name|interfaceMethod
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|interfaceMethod
operator|!=
literal|null
condition|)
block|{
return|return
name|getMethodAnnotation
argument_list|(
name|interfaceMethod
argument_list|,
name|aClass
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Annotation
name|getClassAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|aClass
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Annotation
name|p
init|=
name|c
operator|.
name|getAnnotation
argument_list|(
name|aClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
return|return
name|p
return|;
block|}
return|return
name|getClassAnnotation
argument_list|(
name|c
operator|.
name|getSuperclass
argument_list|()
argument_list|,
name|aClass
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|PathSegment
argument_list|>
name|getPathSegments
parameter_list|(
name|String
name|thePath
parameter_list|,
name|boolean
name|decode
parameter_list|)
block|{
name|String
index|[]
name|segments
init|=
name|thePath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PathSegment
argument_list|>
name|theList
init|=
operator|new
name|ArrayList
argument_list|<
name|PathSegment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|segments
control|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|theList
operator|.
name|add
argument_list|(
operator|new
name|PathSegmentImpl
argument_list|(
name|path
argument_list|,
name|decode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|theList
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getMediaTypes
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMimeTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|supportedMimeTypes
operator|.
name|add
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|supportedMimeTypes
return|;
block|}
specifier|public
specifier|static
name|ClassResourceInfo
name|findSubResourceClass
parameter_list|(
name|ClassResourceInfo
name|resource
parameter_list|,
name|Class
name|subResourceClassType
parameter_list|)
block|{
for|for
control|(
name|ClassResourceInfo
name|subCri
range|:
name|resource
operator|.
name|getSubClassResourceInfo
argument_list|()
control|)
block|{
if|if
condition|(
name|subCri
operator|.
name|getResourceClass
argument_list|()
operator|==
name|subResourceClassType
condition|)
block|{
return|return
name|subCri
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|OperationResourceInfo
name|findTargetResourceClass
parameter_list|(
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|resources
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|httpMethod
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|String
name|requestContentType
parameter_list|,
name|String
name|acceptContentTypes
parameter_list|)
block|{
for|for
control|(
name|ClassResourceInfo
name|resource
range|:
name|resources
control|)
block|{
name|URITemplate
name|uriTemplate
init|=
name|resource
operator|.
name|getURITemplate
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|uriTemplate
operator|.
name|match
argument_list|(
name|path
argument_list|,
name|map
argument_list|)
condition|)
block|{
name|String
name|subResourcePath
init|=
name|map
operator|.
name|getFirst
argument_list|(
name|URITemplate
operator|.
name|FINAL_MATCH_GROUP
argument_list|)
decl_stmt|;
name|OperationResourceInfo
name|ori
init|=
name|findTargetMethod
argument_list|(
name|resource
argument_list|,
name|subResourcePath
argument_list|,
name|httpMethod
argument_list|,
name|map
argument_list|,
name|requestContentType
argument_list|,
name|acceptContentTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|ori
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|ori
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|OperationResourceInfo
name|findTargetMethod
parameter_list|(
name|ClassResourceInfo
name|resource
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|httpMethod
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|String
name|requestContentType
parameter_list|,
name|String
name|acceptContentTypes
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|OperationResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|candidateList
init|=
operator|new
name|TreeMap
argument_list|<
name|OperationResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
operator|new
name|OperationResourceInfoComparator
argument_list|()
argument_list|)
decl_stmt|;
name|MediaType
name|requestType
init|=
name|requestContentType
operator|==
literal|null
condition|?
name|ALL_TYPES
else|:
name|MediaType
operator|.
name|parse
argument_list|(
name|requestContentType
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|acceptTypes
init|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|acceptContentTypes
argument_list|)
decl_stmt|;
for|for
control|(
name|MediaType
name|acceptType
range|:
name|acceptTypes
control|)
block|{
for|for
control|(
name|OperationResourceInfo
name|ori
range|:
name|resource
operator|.
name|getMethodDispatcher
argument_list|()
operator|.
name|getOperationResourceInfos
argument_list|()
control|)
block|{
name|URITemplate
name|uriTemplate
init|=
name|ori
operator|.
name|getURITemplate
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|cloneMap
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriTemplate
operator|!=
literal|null
operator|&&
name|uriTemplate
operator|.
name|match
argument_list|(
name|path
argument_list|,
name|map
argument_list|)
condition|)
block|{
if|if
condition|(
name|ori
operator|.
name|isSubResourceLocator
argument_list|()
operator|&&
name|matchMimeTypes
argument_list|(
name|requestType
argument_list|,
name|acceptType
argument_list|,
name|ori
argument_list|)
condition|)
block|{
name|candidateList
operator|.
name|put
argument_list|(
name|ori
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|httpMethod
argument_list|)
operator|&&
name|matchMimeTypes
argument_list|(
name|requestType
argument_list|,
name|acceptType
argument_list|,
name|ori
argument_list|)
condition|)
block|{
name|String
name|finalGroup
init|=
name|map
operator|.
name|getFirst
argument_list|(
name|URITemplate
operator|.
name|FINAL_MATCH_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|finalGroup
operator|==
literal|null
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|finalGroup
argument_list|)
operator|||
name|finalGroup
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|candidateList
operator|.
name|put
argument_list|(
name|ori
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|candidateList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|OperationResourceInfo
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|firstEntry
init|=
name|candidateList
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|putAll
argument_list|(
name|firstEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|firstEntry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getConsumeTypes
parameter_list|(
name|ConsumeMime
name|cm
parameter_list|)
block|{
return|return
name|cm
operator|==
literal|null
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
name|ALL_TYPES
argument_list|)
else|:
name|getMediaTypes
argument_list|(
name|cm
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|getProduceTypes
parameter_list|(
name|ProduceMime
name|pm
parameter_list|)
block|{
return|return
name|pm
operator|==
literal|null
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
name|ALL_TYPES
argument_list|)
else|:
name|getMediaTypes
argument_list|(
name|pm
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|OperationResourceInfoComparator
implements|implements
name|Comparator
argument_list|<
name|OperationResourceInfo
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|OperationResourceInfo
name|e1
parameter_list|,
name|OperationResourceInfo
name|e2
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|mimeType1
init|=
name|getConsumeTypes
argument_list|(
name|e1
operator|.
name|getMethod
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ConsumeMime
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|mimeType2
init|=
name|getConsumeTypes
argument_list|(
name|e2
operator|.
name|getMethod
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ConsumeMime
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: we actually need to check all consume and produce types here ?
name|int
name|result
init|=
name|JAXRSUtils
operator|.
name|compareMediaTypes
argument_list|(
name|mimeType1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|mimeType2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
comment|//use the media type of output data as the secondary key.
name|List
argument_list|<
name|MediaType
argument_list|>
name|mimeTypeP1
init|=
name|getProduceTypes
argument_list|(
name|e1
operator|.
name|getMethod
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ProduceMime
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|mimeTypeP2
init|=
name|getProduceTypes
argument_list|(
name|e2
operator|.
name|getMethod
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ProduceMime
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|JAXRSUtils
operator|.
name|compareMediaTypes
argument_list|(
name|mimeTypeP1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|mimeTypeP2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|int
name|compareMediaTypes
parameter_list|(
name|MediaType
name|mt1
parameter_list|,
name|MediaType
name|mt2
parameter_list|)
block|{
if|if
condition|(
name|mt1
operator|.
name|equals
argument_list|(
name|mt2
argument_list|)
condition|)
block|{
name|float
name|q1
init|=
name|getMediaTypeQualityFactor
argument_list|(
name|mt1
argument_list|)
decl_stmt|;
name|float
name|q2
init|=
name|getMediaTypeQualityFactor
argument_list|(
name|mt2
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|Float
operator|.
name|compare
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|0
condition|?
name|result
else|:
operator|~
name|result
return|;
block|}
if|if
condition|(
name|mt1
operator|.
name|isWildcardType
argument_list|()
operator|&&
operator|!
name|mt2
operator|.
name|isWildcardType
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|mt1
operator|.
name|isWildcardType
argument_list|()
operator|&&
name|mt2
operator|.
name|isWildcardType
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|mt1
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|mt2
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|mt1
operator|.
name|isWildcardSubtype
argument_list|()
operator|&&
operator|!
name|mt2
operator|.
name|isWildcardSubtype
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|mt1
operator|.
name|isWildcardSubtype
argument_list|()
operator|&&
name|mt2
operator|.
name|isWildcardSubtype
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|mt1
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|mt2
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|float
name|getMediaTypeQualityFactor
parameter_list|(
name|MediaType
name|mt
parameter_list|)
block|{
name|String
name|q
init|=
name|mt
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|q
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|q
operator|=
literal|'0'
operator|+
name|q
expr_stmt|;
block|}
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|q
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|// default value will do
block|}
return|return
literal|1
return|;
block|}
comment|//Message contains following information: PATH, HTTP_REQUEST_METHOD, CONTENT_TYPE, InputStream.
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|processParameters
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|Method
name|method
init|=
name|ori
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|Class
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Type
index|[]
name|genericParameterTypes
init|=
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
name|Annotation
index|[]
index|[]
name|parameterAnnotations
init|=
name|method
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|parameterTypes
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|param
init|=
name|processParameter
argument_list|(
name|parameterTypes
index|[
name|i
index|]
argument_list|,
name|genericParameterTypes
index|[
name|i
index|]
argument_list|,
name|parameterAnnotations
index|[
name|i
index|]
argument_list|,
name|values
argument_list|,
name|message
argument_list|,
name|ori
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
specifier|private
specifier|static
name|Object
name|processParameter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|parameterClass
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|,
name|Message
name|message
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|InputStream
name|is
init|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|path
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|JAXRSInInterceptor
operator|.
name|RELATIVE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|parameterAnnotations
operator|==
literal|null
operator|||
name|parameterAnnotations
operator|.
name|length
operator|==
literal|0
operator|)
operator|&&
operator|(
literal|"PUT"
operator|.
name|equals
argument_list|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
operator|||
literal|"POST"
operator|.
name|equals
argument_list|(
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|String
name|contentType
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_CONTENT_TYPE_SPECIFIED"
argument_list|,
name|LOG
argument_list|,
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|readFromMessageBody
argument_list|(
name|parameterClass
argument_list|,
name|is
argument_list|,
name|MediaType
operator|.
name|parse
argument_list|(
name|contentType
argument_list|)
argument_list|,
name|ori
operator|.
name|getConsumeTypes
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|parameterAnnotations
index|[
literal|0
index|]
operator|.
name|annotationType
argument_list|()
operator|==
name|Context
operator|.
name|class
operator|&&
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
name|createHttpContextValue
argument_list|(
name|message
argument_list|,
name|parameterClass
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|parameterAnnotations
index|[
literal|0
index|]
operator|.
name|annotationType
argument_list|()
operator|==
name|PathParam
operator|.
name|class
condition|)
block|{
return|return
name|readFromUriParam
argument_list|(
operator|(
name|PathParam
operator|)
name|parameterAnnotations
index|[
literal|0
index|]
argument_list|,
name|parameterClass
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|path
argument_list|,
name|values
argument_list|)
return|;
block|}
name|Object
name|result
init|=
literal|null
decl_stmt|;
comment|// TODO : deal with @DefaultValues
if|if
condition|(
name|parameterAnnotations
index|[
literal|0
index|]
operator|.
name|annotationType
argument_list|()
operator|==
name|QueryParam
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|readQueryString
argument_list|(
operator|(
name|QueryParam
operator|)
name|parameterAnnotations
index|[
literal|0
index|]
argument_list|,
name|parameterClass
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameterAnnotations
index|[
literal|0
index|]
operator|.
name|annotationType
argument_list|()
operator|==
name|MatrixParam
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|processMatrixParam
argument_list|(
name|message
argument_list|,
operator|(
operator|(
name|MatrixParam
operator|)
name|parameterAnnotations
index|[
literal|0
index|]
operator|)
operator|.
name|value
argument_list|()
argument_list|,
name|parameterClass
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameterAnnotations
index|[
literal|0
index|]
operator|.
name|annotationType
argument_list|()
operator|==
name|HeaderParam
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|processHeaderParam
argument_list|(
name|message
argument_list|,
operator|(
operator|(
name|HeaderParam
operator|)
name|parameterAnnotations
index|[
literal|0
index|]
operator|)
operator|.
name|value
argument_list|()
argument_list|,
name|parameterClass
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|Object
name|processMatrixParam
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|pClass
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|List
argument_list|<
name|PathSegment
argument_list|>
name|segments
init|=
name|JAXRSUtils
operator|.
name|getPathSegments
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|segments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|segments
operator|.
name|get
argument_list|(
name|segments
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getMatrixParameters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|value
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|handleParameter
argument_list|(
name|value
argument_list|,
name|pClass
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMatrixParams
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|decode
parameter_list|)
block|{
name|int
name|index
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
return|return
name|index
operator|==
operator|-
literal|1
condition|?
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
else|:
name|JAXRSUtils
operator|.
name|getStructuredParams
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|,
literal|";"
argument_list|,
name|decode
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Object
name|processHeaderParam
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|header
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|pClass
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|get
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|values
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|handleParameter
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|pClass
argument_list|)
else|:
name|defaultValue
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Object
name|createHttpContextValue
parameter_list|(
name|Message
name|m
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|UriInfo
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateParams
init|=
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
name|URITemplate
operator|.
name|TEMPLATE_PARAMETERS
argument_list|)
decl_stmt|;
return|return
operator|new
name|UriInfoImpl
argument_list|(
name|m
argument_list|,
name|templateParams
argument_list|)
return|;
block|}
if|if
condition|(
name|HttpHeaders
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|new
name|HttpHeadersImpl
argument_list|(
name|m
argument_list|)
return|;
block|}
if|if
condition|(
name|Request
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|new
name|RequestImpl
argument_list|(
name|m
argument_list|)
return|;
block|}
if|if
condition|(
name|SecurityContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|new
name|SecurityContextImpl
argument_list|(
name|m
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Object
name|createServletResourceValue
parameter_list|(
name|Message
name|m
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|HttpServletRequest
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|HttpServletRequest
operator|)
name|m
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|)
return|;
block|}
if|if
condition|(
name|HttpServletResponse
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|HttpServletResponse
operator|)
name|m
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_RESPONSE
argument_list|)
return|;
block|}
if|if
condition|(
name|ServletContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|ServletContext
operator|)
name|m
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_CONTEXT
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Object
name|readFromUriParam
parameter_list|(
name|PathParam
name|uriParamAnnotation
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameter
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|String
name|path
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|String
name|parameterName
init|=
name|uriParamAnnotation
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterName
operator|==
literal|null
operator|||
name|parameterName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Invalid URI parameter name
return|return
literal|null
return|;
block|}
name|String
name|result
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|values
operator|.
name|get
argument_list|(
name|parameterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|handleParameter
argument_list|(
name|result
argument_list|,
name|parameter
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|Object
name|handleParameter
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|pClass
parameter_list|)
block|{
if|if
condition|(
name|pClass
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
name|PrimitiveUtils
operator|.
name|read
argument_list|(
name|value
argument_list|,
name|pClass
argument_list|)
return|;
block|}
comment|// check constructors accepting a single String value
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|c
init|=
name|pClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
block|)
empty_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
name|c
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// try valueOf
block|}
comment|// check for valueOf(String) static methods
try|try
block|{
name|Method
name|m
init|=
name|pClass
operator|.
name|getMethod
argument_list|(
literal|"valueOf"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
block|)
empty_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
operator|&&
name|Modifier
operator|.
name|isStatic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
return|;
block|}
block|}
end_class

begin_catch
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// no luck
block|}
end_catch

begin_return
return|return
literal|null
return|;
end_return

begin_comment
unit|}
comment|//TODO : multiple query string parsing, do it once
end_comment

begin_function
unit|private
specifier|static
name|Object
name|readQueryString
parameter_list|(
name|QueryParam
name|queryParam
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameter
parameter_list|,
name|Message
name|m
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|queryName
init|=
name|queryParam
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|getStructuredParams
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|)
argument_list|,
literal|"&"
argument_list|,
literal|true
argument_list|)
operator|.
name|getFirst
argument_list|(
name|queryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|handleParameter
argument_list|(
name|result
argument_list|,
name|parameter
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**      * Retrieve map of query parameters from the passed in message      * @param message      * @return a Map of query parameters.      */
end_comment

begin_function
specifier|public
specifier|static
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStructuredParams
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|sep
parameter_list|,
name|boolean
name|decode
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queries
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|query
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|query
operator|.
name|split
argument_list|(
name|sep
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|String
index|[]
name|values
init|=
name|part
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values
operator|.
name|length
operator|==
literal|1
condition|?
literal|""
else|:
name|decode
condition|?
name|uriDecode
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
else|:
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queries
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|String
name|uriDecode
parameter_list|(
name|String
name|query
parameter_list|)
block|{
try|try
block|{
name|query
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|query
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|//Swallow unsupported decoding exception
block|}
return|return
name|query
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Object
name|readFromMessageBody
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|targetTypeClass
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|MediaType
name|contentType
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|consumeTypes
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|types
init|=
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|consumeTypes
argument_list|,
name|contentType
argument_list|)
decl_stmt|;
name|MessageBodyReader
name|provider
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MediaType
name|type
range|:
name|types
control|)
block|{
name|provider
operator|=
name|ProviderFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createMessageBodyReader
argument_list|(
name|targetTypeClass
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// TODO : make the exceptions
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|provider
operator|.
name|readFrom
argument_list|(
name|targetTypeClass
argument_list|,
name|contentType
argument_list|,
literal|null
argument_list|,
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error deserializing input stream into target class "
operator|+
name|targetTypeClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|", content type : "
operator|+
name|contentType
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No message body reader found for target class "
operator|+
name|targetTypeClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|", content type : "
operator|+
name|contentType
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|matchMimeTypes
parameter_list|(
name|MediaType
name|requestContentType
parameter_list|,
name|MediaType
name|acceptContentType
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
if|if
condition|(
name|intersectMimeTypes
argument_list|(
name|ori
operator|.
name|getConsumeTypes
argument_list|()
argument_list|,
name|requestContentType
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|intersectMimeTypes
argument_list|(
name|ori
operator|.
name|getProduceTypes
argument_list|()
argument_list|,
name|acceptContentType
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|parseMediaTypes
parameter_list|(
name|String
name|types
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|acceptValues
init|=
operator|new
name|ArrayList
argument_list|<
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|types
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|tp
init|=
name|types
decl_stmt|;
name|int
name|index
init|=
name|types
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|tp
operator|=
name|types
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|types
operator|=
name|types
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|types
operator|=
literal|""
expr_stmt|;
block|}
name|acceptValues
operator|.
name|add
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
name|tp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|acceptValues
operator|.
name|add
argument_list|(
name|ALL_TYPES
argument_list|)
expr_stmt|;
block|}
return|return
name|acceptValues
return|;
block|}
end_function

begin_comment
comment|/**      * intersect two mime types      *       * @param mimeTypesA       * @param mimeTypesB       * @return return a list of intersected mime types      */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|intersectMimeTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|mimeTypesA
parameter_list|,
name|List
argument_list|<
name|MediaType
argument_list|>
name|mimeTypesB
parameter_list|)
block|{
name|Set
argument_list|<
name|MediaType
argument_list|>
name|supportedMimeTypeList
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MediaType
name|mimeTypeA
range|:
name|mimeTypesA
control|)
block|{
for|for
control|(
name|MediaType
name|mimeTypeB
range|:
name|mimeTypesB
control|)
block|{
if|if
condition|(
name|mimeTypeB
operator|.
name|isCompatible
argument_list|(
name|mimeTypeA
argument_list|)
operator|||
name|mimeTypeA
operator|.
name|isCompatible
argument_list|(
name|mimeTypeB
argument_list|)
condition|)
block|{
name|String
name|type
init|=
name|mimeTypeA
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|MEDIA_TYPE_WILDCARD
argument_list|)
condition|?
name|mimeTypeB
operator|.
name|getType
argument_list|()
else|:
name|mimeTypeA
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|subtype
init|=
name|mimeTypeA
operator|.
name|getSubtype
argument_list|()
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|MEDIA_TYPE_WILDCARD
argument_list|)
condition|?
name|mimeTypeB
operator|.
name|getSubtype
argument_list|()
else|:
name|mimeTypeA
operator|.
name|getSubtype
argument_list|()
decl_stmt|;
name|supportedMimeTypeList
operator|.
name|add
argument_list|(
operator|new
name|MediaType
argument_list|(
name|type
argument_list|,
name|subtype
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|supportedMimeTypeList
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|intersectMimeTypes
parameter_list|(
name|List
argument_list|<
name|MediaType
argument_list|>
name|mimeTypesA
parameter_list|,
name|MediaType
name|mimeTypeB
parameter_list|)
block|{
return|return
name|intersectMimeTypes
argument_list|(
name|mimeTypesA
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|mimeTypeB
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|intersectMimeTypes
parameter_list|(
name|String
name|mimeTypesA
parameter_list|,
name|String
name|mimeTypesB
parameter_list|)
block|{
return|return
name|intersectMimeTypes
argument_list|(
name|parseMediaTypes
argument_list|(
name|mimeTypesA
argument_list|)
argument_list|,
name|parseMediaTypes
argument_list|(
name|mimeTypesB
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|MediaType
argument_list|>
name|sortMediaTypes
parameter_list|(
name|String
name|mediaTypes
parameter_list|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|types
init|=
name|JAXRSUtils
operator|.
name|parseMediaTypes
argument_list|(
name|mediaTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|types
argument_list|,
operator|new
name|Comparator
argument_list|<
name|MediaType
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MediaType
name|mt1
parameter_list|,
name|MediaType
name|mt2
parameter_list|)
block|{
return|return
name|JAXRSUtils
operator|.
name|compareMediaTypes
argument_list|(
name|mt1
argument_list|,
name|mt2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|injectHttpContextValues
parameter_list|(
name|Object
name|o
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
for|for
control|(
name|Field
name|f
range|:
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getHttpContexts
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|createHttpContextValue
argument_list|(
name|m
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|f
operator|.
name|set
argument_list|(
name|o
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|injectServletResourceValues
parameter_list|(
name|Object
name|o
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
for|for
control|(
name|Field
name|f
range|:
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getResources
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|createServletResourceValue
argument_list|(
name|m
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|f
operator|.
name|set
argument_list|(
name|o
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MultivaluedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cloneMap
parameter_list|(
name|MultivaluedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map1
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map2
init|=
operator|new
name|MetadataMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|map1
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map2
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map2
return|;
block|}
end_function

unit|}
end_unit

