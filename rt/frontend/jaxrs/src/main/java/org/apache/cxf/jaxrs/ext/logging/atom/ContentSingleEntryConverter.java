begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|atom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|Abdera
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|factory
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Feed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|logging
operator|.
name|LogRecordsList
import|;
end_import

begin_comment
comment|/**  * Single entry in feed with content set to list of log records.  */
end_comment

begin_class
specifier|public
class|class
name|ContentSingleEntryConverter
implements|implements
name|Converter
block|{
specifier|private
name|Factory
name|factory
decl_stmt|;
specifier|private
name|Marshaller
name|marsh
decl_stmt|;
specifier|public
name|ContentSingleEntryConverter
parameter_list|()
block|{
name|factory
operator|=
name|Abdera
operator|.
name|getNewFactory
argument_list|()
expr_stmt|;
try|try
block|{
name|marsh
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|LogRecordsList
operator|.
name|class
argument_list|)
operator|.
name|createMarshaller
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Element
name|convert
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
parameter_list|)
block|{
name|Feed
name|feed
init|=
name|factory
operator|.
name|newFeed
argument_list|()
decl_stmt|;
name|Entry
name|entry
init|=
name|factory
operator|.
name|newEntry
argument_list|()
decl_stmt|;
name|feed
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Content
name|content
init|=
name|factory
operator|.
name|newContent
argument_list|()
decl_stmt|;
name|content
operator|.
name|setContentType
argument_list|(
name|Content
operator|.
name|Type
operator|.
name|XML
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|LogRecordsList
name|list
init|=
operator|new
name|LogRecordsList
argument_list|()
decl_stmt|;
name|list
operator|.
name|setLogRecords
argument_list|(
name|records
argument_list|)
expr_stmt|;
try|try
block|{
name|marsh
operator|.
name|marshal
argument_list|(
name|list
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|content
operator|.
name|setValue
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|feed
return|;
block|}
block|}
end_class

end_unit

