begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ContextResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ExceptionMapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ResponseExceptionMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MappingsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ParameterHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|RequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|RequestPreprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|WebApplicationExceptionMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ProviderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ProviderFactory
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ProviderFactory
argument_list|>
name|FACTORIES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProviderFactory
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ProviderFactory
name|DEFAULT_FACTORY
init|=
operator|new
name|ProviderFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SLASH
init|=
literal|"/"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
name|defaultMessageReaders
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
name|defaultMessageWriters
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
name|userMessageReaders
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
name|userMessageWriters
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|>
argument_list|>
name|userContextResolvers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|>
argument_list|>
name|defaultExceptionMappers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|>
argument_list|>
name|userExceptionMappers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|>
name|requestHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseHandler
argument_list|>
argument_list|>
name|responseHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseHandler
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ParameterHandler
argument_list|>
argument_list|>
name|jaxrsParamHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ParameterHandler
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseExceptionMapper
argument_list|>
argument_list|>
name|userResponseExceptionMappers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseExceptionMapper
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|RequestPreprocessor
name|requestPreprocessor
decl_stmt|;
specifier|private
name|ProviderFactory
parameter_list|()
block|{
comment|// TODO : this needs to be done differently,
comment|// we need to use cxf-jaxrs-extensions
comment|// TODO : make sure the default providers are shared between multiple
comment|// factories
name|setProviders
argument_list|(
name|defaultMessageReaders
argument_list|,
name|defaultMessageWriters
argument_list|,
name|userContextResolvers
argument_list|,
name|requestHandlers
argument_list|,
name|responseHandlers
argument_list|,
name|defaultExceptionMappers
argument_list|,
name|jaxrsParamHandlers
argument_list|,
name|userResponseExceptionMappers
argument_list|,
operator|new
name|JAXBElementProvider
argument_list|()
argument_list|,
operator|new
name|JSONProvider
argument_list|()
argument_list|,
operator|new
name|BinaryDataProvider
argument_list|()
argument_list|,
operator|new
name|SourceProvider
argument_list|()
argument_list|,
operator|new
name|FormEncodingProvider
argument_list|()
argument_list|,
operator|new
name|PrimitiveTextProvider
argument_list|()
argument_list|,
operator|new
name|ActivationProvider
argument_list|()
argument_list|,
operator|new
name|WebApplicationExceptionMapper
argument_list|()
argument_list|,
operator|new
name|MappingsHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ProviderFactory
name|getInstance
parameter_list|()
block|{
return|return
name|getInstance
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ProviderFactory
name|getInstance
parameter_list|(
name|String
name|baseAddress
parameter_list|)
block|{
if|if
condition|(
name|SLASH
operator|.
name|equals
argument_list|(
name|baseAddress
argument_list|)
condition|)
block|{
return|return
name|DEFAULT_FACTORY
return|;
block|}
name|ProviderFactory
name|pf
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|ProviderFactory
operator|.
name|class
init|)
block|{
name|pf
operator|=
name|FACTORIES
operator|.
name|get
argument_list|(
name|baseAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|pf
operator|==
literal|null
condition|)
block|{
name|pf
operator|=
operator|new
name|ProviderFactory
argument_list|()
expr_stmt|;
name|FACTORIES
operator|.
name|put
argument_list|(
name|baseAddress
argument_list|,
name|pf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pf
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ContextResolver
argument_list|<
name|T
argument_list|>
name|createContextResolver
parameter_list|(
name|Type
name|contextType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
comment|// TODO : get media type from message
return|return
name|createContextResolver
argument_list|(
name|contextType
argument_list|,
name|m
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ContextResolver
argument_list|<
name|T
argument_list|>
name|createContextResolver
parameter_list|(
name|Type
name|contextType
parameter_list|,
name|Message
name|m
parameter_list|,
name|MediaType
name|type
parameter_list|)
block|{
for|for
control|(
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|>
name|cr
range|:
name|userContextResolvers
control|)
block|{
name|Type
index|[]
name|types
init|=
name|cr
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|t
decl_stmt|;
name|Type
index|[]
name|args
init|=
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|contextType
operator|==
name|args
index|[
name|i
index|]
condition|)
block|{
name|InjectionUtils
operator|.
name|injectContextFields
argument_list|(
name|cr
operator|.
name|getProvider
argument_list|()
argument_list|,
name|cr
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|InjectionUtils
operator|.
name|injectContextMethods
argument_list|(
name|cr
operator|.
name|getProvider
argument_list|()
argument_list|,
name|cr
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|cr
operator|.
name|getProvider
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
name|createExceptionMapper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
name|mapper
init|=
name|doCreateExceptionMapper
argument_list|(
name|userExceptionMappers
argument_list|,
name|exceptionType
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
return|return
name|mapper
return|;
block|}
return|return
name|doCreateExceptionMapper
argument_list|(
name|defaultExceptionMappers
argument_list|,
name|exceptionType
argument_list|,
name|m
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
name|doCreateExceptionMapper
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|>
argument_list|>
name|mappers
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|List
argument_list|<
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|>
name|em
range|:
name|mappers
control|)
block|{
name|handleMapper
argument_list|(
operator|(
name|List
operator|)
name|candidates
argument_list|,
name|em
argument_list|,
name|exceptionType
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|ExceptionMapperComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ParameterHandler
argument_list|<
name|T
argument_list|>
name|createParameterHandler
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
parameter_list|)
block|{
name|List
argument_list|<
name|ParameterHandler
argument_list|<
name|T
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|ParameterHandler
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|ParameterHandler
argument_list|>
name|em
range|:
name|jaxrsParamHandlers
control|)
block|{
name|handleMapper
argument_list|(
operator|(
name|List
operator|)
name|candidates
argument_list|,
name|em
argument_list|,
name|paramType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|ParameterHandlerComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|ResponseExceptionMapper
argument_list|<
name|T
argument_list|>
name|createResponseExceptionMapper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
parameter_list|)
block|{
name|List
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|T
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|ResponseExceptionMapper
argument_list|>
name|em
range|:
name|userResponseExceptionMappers
control|)
block|{
name|handleMapper
argument_list|(
operator|(
name|List
operator|)
name|candidates
argument_list|,
name|em
argument_list|,
name|paramType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|ResponseExceptionMapperComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|handleMapper
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|candidates
parameter_list|,
name|ProviderInfo
name|em
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|Type
index|[]
name|types
init|=
name|em
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|t
decl_stmt|;
name|Type
index|[]
name|args
init|=
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|args
index|[
name|i
index|]
operator|)
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|InjectionUtils
operator|.
name|injectContextFields
argument_list|(
name|em
operator|.
name|getProvider
argument_list|()
argument_list|,
name|em
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|InjectionUtils
operator|.
name|injectContextMethods
argument_list|(
name|em
operator|.
name|getProvider
argument_list|()
argument_list|,
name|em
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|candidates
operator|.
name|add
argument_list|(
name|em
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|createMessageBodyReader
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|bodyType
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
comment|// Try user provided providers
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|mr
init|=
name|chooseMessageReader
argument_list|(
name|userMessageReaders
argument_list|,
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
decl_stmt|;
comment|//If none found try the default ones
if|if
condition|(
name|mr
operator|==
literal|null
condition|)
block|{
name|mr
operator|=
name|chooseMessageReader
argument_list|(
name|defaultMessageReaders
argument_list|,
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|mr
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|>
name|getRequestHandlers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|requestHandlers
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseHandler
argument_list|>
argument_list|>
name|getResponseHandlers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|responseHandlers
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|createMessageBodyWriter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|bodyType
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
comment|// Try user provided providers
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|mw
init|=
name|chooseMessageWriter
argument_list|(
name|userMessageWriters
argument_list|,
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
decl_stmt|;
comment|//If none found try the default ones
if|if
condition|(
name|mw
operator|==
literal|null
condition|)
block|{
name|mw
operator|=
name|chooseMessageWriter
argument_list|(
name|defaultMessageWriters
argument_list|,
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|mw
return|;
block|}
comment|//CHECKSTYLE:OFF
specifier|private
name|void
name|setProviders
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
name|readers
parameter_list|,
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
name|writers
parameter_list|,
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|>
argument_list|>
name|resolvers
parameter_list|,
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|>
name|requestFilters
parameter_list|,
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseHandler
argument_list|>
argument_list|>
name|responseFilters
parameter_list|,
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|>
argument_list|>
name|excMappers
parameter_list|,
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ParameterHandler
argument_list|>
argument_list|>
name|paramHandlers
parameter_list|,
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseExceptionMapper
argument_list|>
argument_list|>
name|responseExcMappers
parameter_list|,
name|Object
modifier|...
name|providers
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|providers
control|)
block|{
if|if
condition|(
name|MessageBodyReader
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|readers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|(
operator|(
name|MessageBodyReader
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MessageBodyWriter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|writers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|(
operator|(
name|MessageBodyWriter
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ContextResolver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|resolvers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|>
argument_list|(
operator|(
name|ContextResolver
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|RequestHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|requestFilters
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|(
operator|(
name|RequestHandler
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ResponseHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|responseFilters
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ResponseHandler
argument_list|>
argument_list|(
operator|(
name|ResponseHandler
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ExceptionMapper
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|excMappers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|>
argument_list|(
operator|(
name|ExceptionMapper
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ResponseExceptionMapper
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|responseExcMappers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ResponseExceptionMapper
argument_list|>
argument_list|(
operator|(
name|ResponseExceptionMapper
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ParameterHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|paramHandlers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ParameterHandler
argument_list|>
argument_list|(
operator|(
name|ParameterHandler
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sortReaders
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|sortWriters
argument_list|(
name|writers
argument_list|)
expr_stmt|;
name|injectContexts
argument_list|(
name|readers
argument_list|,
name|writers
argument_list|,
name|resolvers
argument_list|,
name|requestFilters
argument_list|,
name|responseFilters
argument_list|,
name|excMappers
argument_list|)
expr_stmt|;
block|}
comment|//CHECKSTYLE:ON
name|void
name|injectContexts
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
modifier|...
name|providerLists
parameter_list|)
block|{
for|for
control|(
name|List
argument_list|<
name|?
argument_list|>
name|list
range|:
name|providerLists
control|)
block|{
for|for
control|(
name|Object
name|p
range|:
name|list
control|)
block|{
name|ProviderInfo
name|pi
init|=
operator|(
name|ProviderInfo
operator|)
name|p
decl_stmt|;
name|InjectionUtils
operator|.
name|injectContextProxies
argument_list|(
name|pi
argument_list|,
name|pi
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      * sorts the available providers according to the media types they declare      * support for. Sorting of media types follows the general rule: x/y< * x< *,      * i.e. a provider that explicitly lists a media types is sorted before a      * provider that lists *. Quality parameter values are also used such that      * x/y;q=1.0< x/y;q=0.7.      */
specifier|private
name|void
name|sortReaders
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
name|entityProviders
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|entityProviders
argument_list|,
operator|new
name|MessageBodyReaderComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sortWriters
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
name|entityProviders
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|entityProviders
argument_list|,
operator|new
name|MessageBodyWriterComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Choose the first body reader provider that matches the requestedMimeType       * for a sorted list of Entity providers      * Returns null if none is found.      * @param<T>      * @param messageBodyReaders      * @param type      * @param requestedMimeType      * @return      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|chooseMessageReader
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
name|readers
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
for|for
control|(
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
name|ep
range|:
name|readers
control|)
block|{
if|if
condition|(
name|matchesReaderCriterias
argument_list|(
name|ep
operator|.
name|getProvider
argument_list|()
argument_list|,
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|)
condition|)
block|{
name|InjectionUtils
operator|.
name|injectContextFields
argument_list|(
name|ep
operator|.
name|getProvider
argument_list|()
argument_list|,
name|ep
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|InjectionUtils
operator|.
name|injectContextMethods
argument_list|(
name|ep
operator|.
name|getProvider
argument_list|()
argument_list|,
name|ep
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|ep
operator|.
name|getProvider
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|boolean
name|matchesReaderCriterias
parameter_list|(
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|ep
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ep
operator|.
name|isReadable
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
init|=
name|JAXRSUtils
operator|.
name|getProviderConsumeTypes
argument_list|(
name|ep
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|availableMimeTypes
init|=
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|supportedMediaTypes
argument_list|)
decl_stmt|;
return|return
name|availableMimeTypes
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|?
literal|true
else|:
literal|false
return|;
block|}
comment|/**      * Choose the first body writer provider that matches the requestedMimeType       * for a sorted list of Entity providers      * Returns null if none is found.      * @param<T>      * @param messageBodyWriters      * @param type      * @param requestedMimeType      * @return      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|chooseMessageWriter
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
name|writers
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
for|for
control|(
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
name|ep
range|:
name|writers
control|)
block|{
if|if
condition|(
name|matchesWriterCriterias
argument_list|(
name|ep
operator|.
name|getProvider
argument_list|()
argument_list|,
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|)
condition|)
block|{
name|InjectionUtils
operator|.
name|injectContextFields
argument_list|(
name|ep
operator|.
name|getProvider
argument_list|()
argument_list|,
name|ep
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|InjectionUtils
operator|.
name|injectContextMethods
argument_list|(
name|ep
operator|.
name|getProvider
argument_list|()
argument_list|,
name|ep
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|ep
operator|.
name|getProvider
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|boolean
name|matchesWriterCriterias
parameter_list|(
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|ep
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ep
operator|.
name|isWriteable
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
init|=
name|JAXRSUtils
operator|.
name|getProviderProduceTypes
argument_list|(
name|ep
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|availableMimeTypes
init|=
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|supportedMediaTypes
argument_list|)
decl_stmt|;
return|return
name|availableMimeTypes
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|?
literal|true
else|:
literal|false
return|;
block|}
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
name|getDefaultMessageReaders
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|defaultMessageReaders
argument_list|)
return|;
block|}
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
name|getDefaultMessageWriters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|defaultMessageWriters
argument_list|)
return|;
block|}
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
name|getUserMessageReaders
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|userMessageReaders
argument_list|)
return|;
block|}
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
name|getUserMessageWriters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|userMessageWriters
argument_list|)
return|;
block|}
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|>
argument_list|>
name|getUserContextResolvers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|userContextResolvers
argument_list|)
return|;
block|}
specifier|public
name|void
name|registerUserProvider
parameter_list|(
name|Object
name|provider
parameter_list|)
block|{
name|setUserProviders
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|provider
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Use for injection of entityProviders      * @param entityProviders the entityProviders to set      */
specifier|public
name|void
name|setUserProviders
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|userProviders
parameter_list|)
block|{
name|setProviders
argument_list|(
name|userMessageReaders
argument_list|,
name|userMessageWriters
argument_list|,
name|userContextResolvers
argument_list|,
name|requestHandlers
argument_list|,
name|responseHandlers
argument_list|,
name|userExceptionMappers
argument_list|,
name|jaxrsParamHandlers
argument_list|,
name|userResponseExceptionMappers
argument_list|,
name|userProviders
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MessageBodyReaderComparator
implements|implements
name|Comparator
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
name|p1
parameter_list|,
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
name|p2
parameter_list|)
block|{
name|MessageBodyReader
name|e1
init|=
name|p1
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|MessageBodyReader
name|e2
init|=
name|p2
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types1
init|=
name|JAXRSUtils
operator|.
name|getProviderConsumeTypes
argument_list|(
name|e1
argument_list|)
decl_stmt|;
name|types1
operator|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|types1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types2
init|=
name|JAXRSUtils
operator|.
name|getProviderConsumeTypes
argument_list|(
name|e2
argument_list|)
decl_stmt|;
name|types2
operator|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|types2
argument_list|)
expr_stmt|;
return|return
name|JAXRSUtils
operator|.
name|compareSortedMediaTypes
argument_list|(
name|types1
argument_list|,
name|types2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MessageBodyWriterComparator
implements|implements
name|Comparator
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
name|p1
parameter_list|,
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|>
name|p2
parameter_list|)
block|{
name|MessageBodyWriter
name|e1
init|=
name|p1
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|MessageBodyWriter
name|e2
init|=
name|p2
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types1
init|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|JAXRSUtils
operator|.
name|getProviderProduceTypes
argument_list|(
name|e1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types2
init|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|JAXRSUtils
operator|.
name|getProviderProduceTypes
argument_list|(
name|e2
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|JAXRSUtils
operator|.
name|compareSortedMediaTypes
argument_list|(
name|types1
argument_list|,
name|types2
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|setRequestPreprocessor
parameter_list|(
name|RequestPreprocessor
name|rp
parameter_list|)
block|{
name|this
operator|.
name|requestPreprocessor
operator|=
name|rp
expr_stmt|;
block|}
specifier|public
name|RequestPreprocessor
name|getRequestPreprocessor
parameter_list|()
block|{
return|return
name|requestPreprocessor
return|;
block|}
specifier|public
name|void
name|clearThreadLocalProxies
parameter_list|()
block|{
name|clearProxies
argument_list|(
name|defaultMessageReaders
argument_list|,
name|defaultMessageWriters
argument_list|,
name|userMessageReaders
argument_list|,
name|userMessageWriters
argument_list|,
name|userContextResolvers
argument_list|,
name|requestHandlers
argument_list|,
name|responseHandlers
argument_list|,
name|userExceptionMappers
argument_list|)
expr_stmt|;
block|}
name|void
name|clearProxies
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
modifier|...
name|lists
parameter_list|)
block|{
for|for
control|(
name|List
argument_list|<
name|?
argument_list|>
name|list
range|:
name|lists
control|)
block|{
for|for
control|(
name|Object
name|p
range|:
name|list
control|)
block|{
name|ProviderInfo
name|pi
init|=
operator|(
name|ProviderInfo
operator|)
name|p
decl_stmt|;
name|pi
operator|.
name|clearThreadLocalProxies
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|clearProviders
parameter_list|()
block|{
name|userMessageReaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|userMessageWriters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|userContextResolvers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|userExceptionMappers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|requestHandlers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responseHandlers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|jaxrsParamHandlers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setSchemaLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|schemas
parameter_list|)
block|{
name|setSchemasOnProviders
argument_list|(
name|userMessageReaders
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
name|setSchemasOnProviders
argument_list|(
name|defaultMessageReaders
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setSchemasOnProviders
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|>
name|providers
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemas
parameter_list|)
block|{
for|for
control|(
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|>
name|r
range|:
name|providers
control|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|r
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setSchemas"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|List
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|m
operator|.
name|invoke
argument_list|(
name|r
operator|.
name|getProvider
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
name|schemas
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ExceptionMapperComparator
implements|implements
name|Comparator
argument_list|<
name|ExceptionMapper
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ExceptionMapper
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|em1
parameter_list|,
name|ExceptionMapper
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|em2
parameter_list|)
block|{
return|return
name|compareClasses
argument_list|(
name|em1
operator|.
name|getClass
argument_list|()
argument_list|,
name|em2
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ResponseExceptionMapperComparator
implements|implements
name|Comparator
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ResponseExceptionMapper
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|em1
parameter_list|,
name|ResponseExceptionMapper
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|em2
parameter_list|)
block|{
return|return
name|compareClasses
argument_list|(
name|em1
operator|.
name|getClass
argument_list|()
argument_list|,
name|em2
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ParameterHandlerComparator
implements|implements
name|Comparator
argument_list|<
name|ParameterHandler
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ParameterHandler
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|em1
parameter_list|,
name|ParameterHandler
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|em2
parameter_list|)
block|{
return|return
name|compareClasses
argument_list|(
name|em1
operator|.
name|getClass
argument_list|()
argument_list|,
name|em2
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|compareClasses
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl1
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cl2
parameter_list|)
block|{
name|Type
index|[]
name|types1
init|=
name|cl1
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
name|Type
index|[]
name|types2
init|=
name|cl2
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realClass1
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|types1
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realClass2
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|types2
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|realClass1
operator|==
name|realClass2
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|realClass1
operator|.
name|isAssignableFrom
argument_list|(
name|realClass2
argument_list|)
condition|)
block|{
comment|// subclass should go first
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

