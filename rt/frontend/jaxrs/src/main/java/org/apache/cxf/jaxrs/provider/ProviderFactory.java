begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ConsumeMime
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProduceMime
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ProviderFactory
block|{
specifier|private
specifier|static
specifier|final
name|ProviderFactory
name|PF
init|=
operator|new
name|ProviderFactory
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MessageBodyReader
argument_list|>
name|defaultMessageReaders
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MessageBodyWriter
argument_list|>
name|defaultMessageWriters
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MessageBodyReader
argument_list|>
name|userMessageReaders
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageBodyReader
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MessageBodyWriter
argument_list|>
name|userMessageWriters
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageBodyWriter
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SystemQueryHandler
argument_list|>
name|queryHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|SystemQueryHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ProviderFactory
parameter_list|()
block|{
comment|// TODO : this needs to be done differently,
comment|// we need to use cxf-jaxrs-extensions
name|setProviders
argument_list|(
name|defaultMessageReaders
argument_list|,
name|defaultMessageWriters
argument_list|,
operator|new
name|JSONProvider
argument_list|()
argument_list|,
operator|new
name|BinaryDataProvider
argument_list|()
argument_list|,
operator|new
name|JAXBElementProvider
argument_list|()
argument_list|,
operator|new
name|StringProvider
argument_list|()
argument_list|,
operator|new
name|SourceProvider
argument_list|()
argument_list|,
operator|new
name|AtomFeedProvider
argument_list|()
argument_list|,
operator|new
name|AtomEntryProvider
argument_list|()
argument_list|,
operator|new
name|FormEncodingReaderProvider
argument_list|()
argument_list|)
expr_stmt|;
name|queryHandlers
operator|.
name|add
argument_list|(
operator|new
name|AcceptTypeQueryHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ProviderFactory
name|getInstance
parameter_list|()
block|{
return|return
name|PF
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|createMessageBodyReader
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|bodyType
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
comment|// Try user provided providers
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|mr
init|=
name|chooseMessageReader
argument_list|(
name|userMessageReaders
argument_list|,
name|bodyType
argument_list|,
name|mediaType
argument_list|)
decl_stmt|;
comment|//If none found try the default ones
if|if
condition|(
name|mr
operator|==
literal|null
condition|)
block|{
name|mr
operator|=
name|chooseMessageReader
argument_list|(
name|defaultMessageReaders
argument_list|,
name|bodyType
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
return|return
name|mr
return|;
block|}
specifier|public
name|SystemQueryHandler
name|getQueryHandler
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|query
parameter_list|)
block|{
for|for
control|(
name|SystemQueryHandler
name|h
range|:
name|queryHandlers
control|)
block|{
if|if
condition|(
name|h
operator|.
name|supports
argument_list|(
name|query
argument_list|)
condition|)
block|{
return|return
name|h
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|createMessageBodyWriter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|bodyType
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
comment|// Try user provided providers
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|mw
init|=
name|chooseMessageWriter
argument_list|(
name|userMessageWriters
argument_list|,
name|bodyType
argument_list|,
name|mediaType
argument_list|)
decl_stmt|;
comment|//If none found try the default ones
if|if
condition|(
name|mw
operator|==
literal|null
condition|)
block|{
name|mw
operator|=
name|chooseMessageWriter
argument_list|(
name|defaultMessageWriters
argument_list|,
name|bodyType
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
return|return
name|mw
return|;
block|}
specifier|private
name|void
name|setProviders
parameter_list|(
name|List
argument_list|<
name|MessageBodyReader
argument_list|>
name|readers
parameter_list|,
name|List
argument_list|<
name|MessageBodyWriter
argument_list|>
name|writers
parameter_list|,
name|Object
modifier|...
name|providers
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|providers
control|)
block|{
if|if
condition|(
name|MessageBodyReader
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|readers
operator|.
name|add
argument_list|(
operator|(
name|MessageBodyReader
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MessageBodyWriter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|writers
operator|.
name|add
argument_list|(
operator|(
name|MessageBodyWriter
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|sortReaders
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|sortWriters
argument_list|(
name|writers
argument_list|)
expr_stmt|;
block|}
comment|/*      * sorts the available providers according to the media types they declare      * support for. Sorting of media types follows the general rule: x/y< * x< *,      * i.e. a provider that explicitly lists a media types is sorted before a      * provider that lists *. Quality parameter values are also used such that      * x/y;q=1.0< x/y;q=0.7.      */
specifier|private
name|void
name|sortReaders
parameter_list|(
name|List
argument_list|<
name|MessageBodyReader
argument_list|>
name|entityProviders
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|entityProviders
argument_list|,
operator|new
name|MessageBodyReaderComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sortWriters
parameter_list|(
name|List
argument_list|<
name|MessageBodyWriter
argument_list|>
name|entityProviders
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|entityProviders
argument_list|,
operator|new
name|MessageBodyWriterComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Choose the first body reader provider that matches the requestedMimeType       * for a sorted list of Entity providers      * Returns null if none is found.      * @param<T>      * @param messageBodyReaders      * @param type      * @param requestedMimeType      * @return      */
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|chooseMessageReader
parameter_list|(
name|List
argument_list|<
name|MessageBodyReader
argument_list|>
name|readers
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
for|for
control|(
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|ep
range|:
name|readers
control|)
block|{
if|if
condition|(
operator|!
name|ep
operator|.
name|isReadable
argument_list|(
name|type
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
init|=
name|JAXRSUtils
operator|.
name|getConsumeTypes
argument_list|(
name|ep
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ConsumeMime
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|availableMimeTypes
init|=
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|supportedMediaTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableMimeTypes
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|ep
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Choose the first body writer provider that matches the requestedMimeType       * for a sorted list of Entity providers      * Returns null if none is found.      * @param<T>      * @param messageBodyWriters      * @param type      * @param requestedMimeType      * @return      */
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|chooseMessageWriter
parameter_list|(
name|List
argument_list|<
name|MessageBodyWriter
argument_list|>
name|writers
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
for|for
control|(
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|ep
range|:
name|writers
control|)
block|{
if|if
condition|(
operator|!
name|ep
operator|.
name|isWriteable
argument_list|(
name|type
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
init|=
name|JAXRSUtils
operator|.
name|getProduceTypes
argument_list|(
name|ep
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ProduceMime
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|availableMimeTypes
init|=
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|supportedMediaTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableMimeTypes
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|ep
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|//TODO : also scan for the @Provider annotated implementations
specifier|public
name|boolean
name|registerUserEntityProvider
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|setProviders
argument_list|(
name|userMessageReaders
argument_list|,
name|userMessageWriters
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|deregisterUserEntityProvider
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|MessageBodyReader
condition|)
block|{
name|result
operator|=
name|userMessageReaders
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
operator|instanceof
name|MessageBodyReader
condition|?
name|result
operator|&&
name|userMessageWriters
operator|.
name|remove
argument_list|(
name|o
argument_list|)
else|:
name|result
return|;
block|}
specifier|public
name|List
argument_list|<
name|MessageBodyReader
argument_list|>
name|getDefaultMessageReaders
parameter_list|()
block|{
return|return
name|defaultMessageReaders
return|;
block|}
specifier|public
name|List
argument_list|<
name|MessageBodyWriter
argument_list|>
name|getDefaultMessageWriters
parameter_list|()
block|{
return|return
name|defaultMessageWriters
return|;
block|}
specifier|public
name|List
argument_list|<
name|MessageBodyReader
argument_list|>
name|getUserMessageReaders
parameter_list|()
block|{
return|return
name|userMessageReaders
return|;
block|}
specifier|public
name|List
argument_list|<
name|MessageBodyWriter
argument_list|>
name|getUserMessageWriters
parameter_list|()
block|{
return|return
name|userMessageWriters
return|;
block|}
specifier|public
name|void
name|clearUserMessageProviders
parameter_list|()
block|{
name|userMessageReaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|userMessageWriters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Use for injection of entityProviders      * @param entityProviders the entityProviders to set      */
specifier|public
name|void
name|setUserEntityProviders
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|userProviders
parameter_list|)
block|{
name|setProviders
argument_list|(
name|userMessageReaders
argument_list|,
name|userMessageWriters
argument_list|,
name|userProviders
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MessageBodyReaderComparator
implements|implements
name|Comparator
argument_list|<
name|MessageBodyReader
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MessageBodyReader
name|e1
parameter_list|,
name|MessageBodyReader
name|e2
parameter_list|)
block|{
name|ConsumeMime
name|c
init|=
name|e1
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ConsumeMime
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|mimeType1
init|=
block|{
literal|"*/*"
block|}
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|mimeType1
operator|=
name|c
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|ConsumeMime
name|c2
init|=
name|e2
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ConsumeMime
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|mimeType2
init|=
block|{
literal|"*/*"
block|}
decl_stmt|;
if|if
condition|(
name|c2
operator|!=
literal|null
condition|)
block|{
name|mimeType2
operator|=
name|c2
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|compareString
argument_list|(
name|mimeType1
index|[
literal|0
index|]
argument_list|,
name|mimeType2
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|private
name|int
name|compareString
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|str1
operator|.
name|startsWith
argument_list|(
literal|"*/"
argument_list|)
operator|&&
name|str2
operator|.
name|startsWith
argument_list|(
literal|"*/"
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|str1
operator|.
name|startsWith
argument_list|(
literal|"*/"
argument_list|)
operator|&&
operator|!
name|str2
operator|.
name|startsWith
argument_list|(
literal|"*/"
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|str1
operator|.
name|compareTo
argument_list|(
name|str2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MessageBodyWriterComparator
implements|implements
name|Comparator
argument_list|<
name|MessageBodyWriter
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MessageBodyWriter
name|e1
parameter_list|,
name|MessageBodyWriter
name|e2
parameter_list|)
block|{
name|ProduceMime
name|c
init|=
name|e1
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ProduceMime
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|mimeType1
init|=
block|{
literal|"*/*"
block|}
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|mimeType1
operator|=
name|c
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|ProduceMime
name|c2
init|=
name|e2
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ProduceMime
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|mimeType2
init|=
block|{
literal|"*/*"
block|}
decl_stmt|;
if|if
condition|(
name|c2
operator|!=
literal|null
condition|)
block|{
name|mimeType2
operator|=
name|c2
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|compareString
argument_list|(
name|mimeType1
index|[
literal|0
index|]
argument_list|,
name|mimeType2
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|private
name|int
name|compareString
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|str1
operator|.
name|startsWith
argument_list|(
literal|"*/"
argument_list|)
operator|&&
name|str2
operator|.
name|startsWith
argument_list|(
literal|"*/"
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|str1
operator|.
name|startsWith
argument_list|(
literal|"*/"
argument_list|)
operator|&&
operator|!
name|str2
operator|.
name|startsWith
argument_list|(
literal|"*/"
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|str1
operator|.
name|compareTo
argument_list|(
name|str2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

