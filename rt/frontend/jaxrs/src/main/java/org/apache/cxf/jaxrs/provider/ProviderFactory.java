begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|BindingPriority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientResponseFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerResponseFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|PreMatching
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ContextResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ExceptionMapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ClassHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ResponseExceptionMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ContextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ParameterHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|RequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|HttpHeadersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ReaderInterceptorMBR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|RequestPreprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|WebApplicationExceptionMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|WriterInterceptorMBW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ProviderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|wadl
operator|.
name|WadlGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ProviderFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ACTIVE_JAXRS_PROVIDER_KEY
init|=
literal|"active.jaxrs.provider"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ProviderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ProviderFactory
name|SHARED_FACTORY
init|=
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FILTER_NAME_BINDING
init|=
literal|"org.apache.cxf.filter.binding"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXB_PROVIDER_NAME
init|=
literal|"org.apache.cxf.jaxrs.provider.JAXBElementProvider"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON_PROVIDER_NAME
init|=
literal|"org.apache.cxf.jaxrs.provider.json.JSONProvider"
decl_stmt|;
static|static
block|{
name|SHARED_FACTORY
operator|.
name|setProviders
argument_list|(
operator|new
name|BinaryDataProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|SourceProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DataSourceProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|FormEncodingProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|PrimitiveTextProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|MultipartProvider
argument_list|()
argument_list|,
operator|new
name|WebApplicationExceptionMapper
argument_list|()
argument_list|,
operator|new
name|WadlGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|messageReaders
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|messageWriters
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|contextResolvers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|contextProviders
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// ParamConverter and ParamConverterProvider is introduced in JAX-RS 2.0
comment|// ParameterHandler will have to be deprecated
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ParameterHandler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|paramHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ParameterHandler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|jaxbReaders
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|jaxbWriters
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ReaderInterceptor
argument_list|>
argument_list|>
name|readerInterceptors
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ReaderInterceptor
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|WriterInterceptor
argument_list|>
argument_list|>
name|writerInterceptors
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|WriterInterceptor
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Server specific providers
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|exceptionMappers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// RequestHandler& ResponseHandler will have to be deprecated for 2.7.0
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|>
name|requestHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseHandler
argument_list|>
argument_list|>
name|responseHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseHandler
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// ContainerRequestFilter& ContainerResponseFilter are introduced in JAX-RS 2.0
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|>
name|preMatchContainerRequestFilters
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|NameKey
argument_list|,
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|>
name|postMatchContainerRequestFilters
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|NameKey
argument_list|,
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|NameKey
argument_list|,
name|ProviderInfo
argument_list|<
name|ContainerResponseFilter
argument_list|>
argument_list|>
name|postMatchContainerResponseFilters
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|NameKey
argument_list|,
name|ProviderInfo
argument_list|<
name|ContainerResponseFilter
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RequestPreprocessor
name|requestPreprocessor
decl_stmt|;
specifier|private
name|ProviderInfo
argument_list|<
name|Application
argument_list|>
name|application
decl_stmt|;
comment|// Client-only providers, consider introducing ClientProviderFactory
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ClientRequestFilter
argument_list|>
argument_list|>
name|clientRequestFilters
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ClientRequestFilter
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ClientResponseFilter
argument_list|>
argument_list|>
name|clientResponseFilters
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ClientResponseFilter
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|responseExceptionMappers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// List of injected providers
specifier|private
name|Collection
argument_list|<
name|ProviderInfo
argument_list|<
name|?
argument_list|>
argument_list|>
name|injectedProviders
init|=
operator|new
name|LinkedList
argument_list|<
name|ProviderInfo
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|ProviderFactory
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
name|initJaxbProviders
argument_list|()
expr_stmt|;
block|}
comment|// Not ideal but in the end seems like the simplest option compared
comment|// to adding default readers/writers to existing messageReaders/Writers
comment|// (due to all sort of conflicts with custom providers) and cloning
comment|// at the request time
specifier|private
name|void
name|initJaxbProviders
parameter_list|()
block|{
name|Object
name|jaxbProvider
init|=
name|createProvider
argument_list|(
name|JAXB_PROVIDER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|jaxbProvider
operator|!=
literal|null
condition|)
block|{
name|jaxbReaders
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
operator|)
name|jaxbProvider
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
name|jaxbWriters
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
operator|)
name|jaxbProvider
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Object
name|jsonProvider
init|=
name|createProvider
argument_list|(
name|JSON_PROVIDER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonProvider
operator|!=
literal|null
condition|)
block|{
name|jaxbReaders
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
operator|)
name|jsonProvider
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
name|jaxbWriters
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
operator|)
name|jsonProvider
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|injectContextProxies
argument_list|(
name|jaxbReaders
argument_list|,
name|jaxbWriters
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Object
name|createProvider
parameter_list|(
name|String
name|className
parameter_list|)
block|{
try|try
block|{
return|return
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|className
argument_list|,
name|ProviderFactory
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Problem with creating the default provider "
operator|+
name|className
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|message
operator|+=
literal|", exception class : "
operator|+
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ProviderFactory
name|getInstance
parameter_list|()
block|{
return|return
operator|new
name|ProviderFactory
argument_list|(
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ProviderFactory
name|getInstance
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
return|return
operator|new
name|ProviderFactory
argument_list|(
name|bus
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ProviderFactory
name|getInstance
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|Endpoint
name|e
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|ProviderFactory
operator|)
name|e
operator|.
name|get
argument_list|(
name|ProviderFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ProviderFactory
name|getSharedInstance
parameter_list|()
block|{
return|return
name|SHARED_FACTORY
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ContextResolver
argument_list|<
name|T
argument_list|>
name|createContextResolver
parameter_list|(
name|Type
name|contextType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|boolean
name|isRequestor
init|=
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Message
name|requestMessage
init|=
name|isRequestor
condition|?
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
else|:
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
name|HttpHeaders
name|requestHeaders
init|=
operator|new
name|HttpHeadersImpl
argument_list|(
name|requestMessage
argument_list|)
decl_stmt|;
name|MediaType
name|mt
init|=
literal|null
decl_stmt|;
name|Message
name|responseMessage
init|=
name|isRequestor
condition|?
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
else|:
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseMessage
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|responseMessage
operator|.
name|containsKey
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|accepts
init|=
name|requestHeaders
operator|.
name|getAcceptableMediaTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|accepts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mt
operator|=
name|accepts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|mt
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|responseMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|mt
operator|=
name|requestHeaders
operator|.
name|getMediaType
argument_list|()
expr_stmt|;
block|}
return|return
name|createContextResolver
argument_list|(
name|contextType
argument_list|,
name|m
argument_list|,
name|mt
operator|==
literal|null
condition|?
name|MediaType
operator|.
name|WILDCARD_TYPE
else|:
name|mt
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ContextResolver
argument_list|<
name|T
argument_list|>
name|createContextResolver
parameter_list|(
name|Type
name|contextType
parameter_list|,
name|Message
name|m
parameter_list|,
name|MediaType
name|type
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|contextCls
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|contextType
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextCls
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ContextResolver
argument_list|<
name|T
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|ContextResolver
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
name|cr
range|:
name|contextResolvers
control|)
block|{
name|Type
index|[]
name|types
init|=
name|cr
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|t
decl_stmt|;
name|Type
index|[]
name|args
init|=
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|argCls
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|argCls
operator|!=
literal|null
operator|&&
name|argCls
operator|.
name|isAssignableFrom
argument_list|(
name|contextCls
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|MediaType
argument_list|>
name|mTypes
init|=
name|JAXRSUtils
operator|.
name|getProduceTypes
argument_list|(
name|cr
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Produces
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|mTypes
argument_list|,
name|type
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|injectContextValues
argument_list|(
name|cr
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|candidates
operator|.
name|add
argument_list|(
operator|(
name|ContextResolver
argument_list|<
name|T
argument_list|>
operator|)
name|cr
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|ClassComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ContextResolverProxy
argument_list|<
name|T
argument_list|>
argument_list|(
name|candidates
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ContextProvider
argument_list|<
name|T
argument_list|>
name|createContextProvider
parameter_list|(
name|Type
name|contextType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|contextCls
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|contextType
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextCls
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|ProviderInfo
argument_list|<
name|ContextProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|cr
range|:
name|contextProviders
control|)
block|{
name|Type
index|[]
name|types
init|=
name|cr
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|t
decl_stmt|;
name|Type
index|[]
name|args
init|=
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|argCls
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|argCls
operator|!=
literal|null
operator|&&
name|argCls
operator|.
name|isAssignableFrom
argument_list|(
name|contextCls
argument_list|)
condition|)
block|{
return|return
operator|(
name|ContextProvider
argument_list|<
name|T
argument_list|>
operator|)
name|cr
operator|.
name|getProvider
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|//This method can only be called from providers
specifier|public
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
name|createExceptionMapper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
return|return
name|createExceptionMapper
argument_list|(
literal|null
argument_list|,
name|exceptionType
argument_list|,
name|m
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
name|createExceptionMapper
parameter_list|(
name|T
name|ex
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
return|return
name|createExceptionMapper
argument_list|(
name|ex
argument_list|,
name|ex
operator|.
name|getClass
argument_list|()
argument_list|,
name|m
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
name|createExceptionMapper
parameter_list|(
name|T
name|ex
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
name|mapper
init|=
name|doCreateExceptionMapper
argument_list|(
name|ex
argument_list|,
name|exceptionType
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
operator|||
name|this
operator|==
name|SHARED_FACTORY
condition|)
block|{
return|return
name|mapper
return|;
block|}
return|return
name|SHARED_FACTORY
operator|.
name|createExceptionMapper
argument_list|(
name|ex
argument_list|,
name|exceptionType
argument_list|,
name|m
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
name|doCreateExceptionMapper
parameter_list|(
name|T
name|exception
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|List
argument_list|<
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|WebApplicationException
operator|.
name|class
operator|==
name|exceptionType
operator|&&
name|exception
operator|instanceof
name|WebApplicationException
condition|)
block|{
name|exceptionType
operator|=
name|JAXRSUtils
operator|.
name|getWebApplicationExceptionClass
argument_list|(
operator|(
operator|(
name|WebApplicationException
operator|)
name|exception
operator|)
operator|.
name|getResponse
argument_list|()
argument_list|,
name|exceptionType
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|em
range|:
name|exceptionMappers
control|)
block|{
name|handleMapper
argument_list|(
name|candidates
argument_list|,
name|em
argument_list|,
name|exceptionType
argument_list|,
name|m
argument_list|,
name|ExceptionMapper
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|ExceptionMapperComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|ExceptionMapper
argument_list|<
name|T
argument_list|>
operator|)
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ParameterHandler
argument_list|<
name|T
argument_list|>
name|createParameterHandler
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
parameter_list|)
block|{
name|List
argument_list|<
name|ParameterHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|ParameterHandler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|ParameterHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|em
range|:
name|paramHandlers
control|)
block|{
name|handleMapper
argument_list|(
name|candidates
argument_list|,
name|em
argument_list|,
name|paramType
argument_list|,
literal|null
argument_list|,
name|ParameterHandler
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|ClassComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|ParameterHandler
argument_list|<
name|T
argument_list|>
operator|)
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|ResponseExceptionMapper
argument_list|<
name|T
argument_list|>
name|createResponseExceptionMapper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
parameter_list|)
block|{
name|List
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|em
range|:
name|responseExceptionMappers
control|)
block|{
name|handleMapper
argument_list|(
name|candidates
argument_list|,
name|em
argument_list|,
name|paramType
argument_list|,
literal|null
argument_list|,
name|ResponseExceptionMapper
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|ClassComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|ResponseExceptionMapper
argument_list|<
name|T
argument_list|>
operator|)
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|handleMapper
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|candidates
parameter_list|,
name|ProviderInfo
argument_list|<
name|T
argument_list|>
name|em
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
parameter_list|,
name|Message
name|m
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|providerClass
parameter_list|,
name|boolean
name|injectContext
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|mapperClass
init|=
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|em
operator|.
name|getProvider
argument_list|()
argument_list|)
decl_stmt|;
name|Type
index|[]
name|types
init|=
name|getGenericInterfaces
argument_list|(
name|mapperClass
argument_list|)
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|t
decl_stmt|;
name|Type
index|[]
name|args
init|=
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Type
name|arg
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|arg
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|var
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|arg
decl_stmt|;
name|Type
index|[]
name|bounds
init|=
name|var
operator|.
name|getBounds
argument_list|()
decl_stmt|;
name|boolean
name|isResolved
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bounds
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|InjectionUtils
operator|.
name|getRawType
argument_list|(
name|bounds
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
operator|&&
name|cls
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
name|isResolved
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isResolved
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|injectContext
condition|)
block|{
name|injectContextValues
argument_list|(
name|em
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|candidates
operator|.
name|add
argument_list|(
name|em
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|actualClass
init|=
name|InjectionUtils
operator|.
name|getRawType
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualClass
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|actualClass
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
if|if
condition|(
name|injectContext
condition|)
block|{
name|injectContextValues
argument_list|(
name|em
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|candidates
operator|.
name|add
argument_list|(
name|em
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|Class
operator|&&
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|t
operator|)
operator|.
name|isAssignableFrom
argument_list|(
name|providerClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|injectContext
condition|)
block|{
name|injectContextValues
argument_list|(
name|em
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|candidates
operator|.
name|add
argument_list|(
name|em
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|ReaderInterceptor
argument_list|>
name|createMessageBodyReaderInterceptor
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|bodyType
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|mr
init|=
name|createMessageBodyReader
argument_list|(
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|ReaderInterceptor
name|mbrReader
init|=
operator|new
name|ReaderInterceptorMBR
argument_list|(
name|mr
argument_list|,
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|readerInterceptors
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReaderInterceptor
argument_list|>
name|interceptors
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|interceptors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ReaderInterceptor
argument_list|>
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|ReaderInterceptor
argument_list|>
name|p
range|:
name|readerInterceptors
control|)
block|{
name|InjectionUtils
operator|.
name|injectContexts
argument_list|(
name|p
operator|.
name|getProvider
argument_list|()
argument_list|,
name|p
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|interceptors
operator|.
name|add
argument_list|(
name|p
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|interceptors
operator|.
name|add
argument_list|(
name|mbrReader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|interceptors
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|mbrReader
argument_list|)
expr_stmt|;
block|}
return|return
name|interceptors
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|WriterInterceptor
argument_list|>
name|createMessageBodyWriterInterceptor
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|bodyType
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|mw
init|=
name|createMessageBodyWriter
argument_list|(
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|mw
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|WriterInterceptor
name|mbwWriter
init|=
operator|new
name|WriterInterceptorMBW
argument_list|(
operator|(
name|MessageBodyWriter
operator|)
name|mw
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|writerInterceptors
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WriterInterceptor
argument_list|>
name|interceptors
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|interceptors
operator|=
operator|new
name|ArrayList
argument_list|<
name|WriterInterceptor
argument_list|>
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|WriterInterceptor
argument_list|>
name|p
range|:
name|writerInterceptors
control|)
block|{
name|InjectionUtils
operator|.
name|injectContexts
argument_list|(
name|p
operator|.
name|getProvider
argument_list|()
argument_list|,
name|p
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|interceptors
operator|.
name|add
argument_list|(
name|p
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|interceptors
operator|.
name|add
argument_list|(
name|mbwWriter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|interceptors
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|mbwWriter
argument_list|)
expr_stmt|;
block|}
return|return
name|interceptors
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|createMessageBodyReader
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|bodyType
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
comment|// Try user provided providers
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|mr
init|=
name|chooseMessageReader
argument_list|(
name|messageReaders
argument_list|,
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|mr
operator|==
literal|null
condition|)
block|{
name|mr
operator|=
name|chooseMessageReader
argument_list|(
name|jaxbReaders
argument_list|,
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
operator|||
name|SHARED_FACTORY
operator|==
name|this
condition|)
block|{
return|return
name|mr
return|;
block|}
return|return
name|SHARED_FACTORY
operator|.
name|createMessageBodyReader
argument_list|(
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isJaxbBasedProvider
parameter_list|(
name|Object
name|sharedProvider
parameter_list|)
block|{
name|String
name|clsName
init|=
name|sharedProvider
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|JAXB_PROVIDER_NAME
operator|.
name|equals
argument_list|(
name|clsName
argument_list|)
operator|||
name|JSON_PROVIDER_NAME
operator|.
name|equals
argument_list|(
name|clsName
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|>
name|getPreMatchContainerRequestFilters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|preMatchContainerRequestFilters
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|>
name|getPostMatchContainerRequestFilters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|getPostMatchContainerFilters
argument_list|(
name|postMatchContainerRequestFilters
argument_list|,
name|names
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerResponseFilter
argument_list|>
argument_list|>
name|getContainerResponseFilters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|getPostMatchContainerFilters
argument_list|(
name|postMatchContainerResponseFilters
argument_list|,
name|names
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ClientRequestFilter
argument_list|>
argument_list|>
name|getClientRequestFilters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|clientRequestFilters
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ClientResponseFilter
argument_list|>
argument_list|>
name|getClientResponseFilters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|clientResponseFilters
argument_list|)
return|;
block|}
comment|//TODO: Also sort based on BindingPriority
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|getPostMatchContainerFilters
parameter_list|(
name|Map
argument_list|<
name|NameKey
argument_list|,
name|ProviderInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|boundFilters
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
if|if
condition|(
name|boundFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|boolean
name|namesEmpty
init|=
name|names
operator|==
literal|null
operator|||
name|names
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|ProviderInfo
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO: Replace with a plain array
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NameKey
argument_list|,
name|ProviderInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|entry
range|:
name|boundFilters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|entryName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|namesEmpty
operator|&&
name|names
operator|.
name|contains
argument_list|(
name|entryName
argument_list|)
operator|||
name|entryName
operator|.
name|equals
argument_list|(
name|DEFAULT_FILTER_NAME_BINDING
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|>
name|getRequestHandlers
parameter_list|()
block|{
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|>
name|handlers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requestHandlers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|handlers
operator|=
name|SHARED_FACTORY
operator|.
name|requestHandlers
expr_stmt|;
block|}
else|else
block|{
name|handlers
operator|=
operator|new
name|ArrayList
argument_list|<
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|boolean
name|customWADLHandler
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requestHandlers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|requestHandlers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getProvider
argument_list|()
operator|instanceof
name|WadlGenerator
condition|)
block|{
name|customWADLHandler
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|customWADLHandler
condition|)
block|{
comment|// TODO : this works only because we know we only have a single
comment|// system handler which is a default WADLGenerator, think of a better approach
name|handlers
operator|.
name|addAll
argument_list|(
name|SHARED_FACTORY
operator|.
name|requestHandlers
argument_list|)
expr_stmt|;
block|}
name|handlers
operator|.
name|addAll
argument_list|(
name|requestHandlers
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|handlers
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ResponseHandler
argument_list|>
argument_list|>
name|getResponseHandlers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|responseHandlers
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|createMessageBodyWriter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|bodyType
parameter_list|,
name|Type
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
comment|// Try user provided providers
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|mw
init|=
name|chooseMessageWriter
argument_list|(
name|messageWriters
argument_list|,
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|mw
operator|==
literal|null
condition|)
block|{
name|mw
operator|=
name|chooseMessageWriter
argument_list|(
name|jaxbWriters
argument_list|,
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mw
operator|!=
literal|null
operator|||
name|SHARED_FACTORY
operator|==
name|this
condition|)
block|{
return|return
name|mw
return|;
block|}
return|return
name|SHARED_FACTORY
operator|.
name|createMessageBodyWriter
argument_list|(
name|bodyType
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
return|;
block|}
comment|//CHECKSTYLE:OFF
specifier|private
name|void
name|setProviders
parameter_list|(
name|Object
modifier|...
name|providers
parameter_list|)
block|{
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|>
name|postMatchRequestFilters
init|=
operator|new
name|LinkedList
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerResponseFilter
argument_list|>
argument_list|>
name|postMatchResponseFilters
init|=
operator|new
name|LinkedList
argument_list|<
name|ProviderInfo
argument_list|<
name|ContainerResponseFilter
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|providers
control|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|oClass
init|=
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|MessageBodyReader
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|messageReaders
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MessageBodyWriter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|messageWriters
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ContextResolver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|contextResolvers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|ContextResolver
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ContextProvider
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|contextProviders
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ContextProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|ContextProvider
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|RequestHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|requestHandlers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|RequestHandler
argument_list|>
argument_list|(
operator|(
name|RequestHandler
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ResponseHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|responseHandlers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ResponseHandler
argument_list|>
argument_list|(
operator|(
name|ResponseHandler
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ContainerRequestFilter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|addContainerFilter
argument_list|(
name|postMatchRequestFilters
argument_list|,
operator|new
name|ProviderInfo
argument_list|<
name|ContainerRequestFilter
argument_list|>
argument_list|(
operator|(
name|ContainerRequestFilter
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|,
name|preMatchContainerRequestFilters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ContainerResponseFilter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|addContainerFilter
argument_list|(
name|postMatchResponseFilters
argument_list|,
operator|new
name|ProviderInfo
argument_list|<
name|ContainerResponseFilter
argument_list|>
argument_list|(
operator|(
name|ContainerResponseFilter
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ReaderInterceptor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|readerInterceptors
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ReaderInterceptor
argument_list|>
argument_list|(
operator|(
name|ReaderInterceptor
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|WriterInterceptor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|writerInterceptors
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|WriterInterceptor
argument_list|>
argument_list|(
operator|(
name|WriterInterceptor
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ClientRequestFilter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|clientRequestFilters
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ClientRequestFilter
argument_list|>
argument_list|(
operator|(
name|ClientRequestFilter
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ClientResponseFilter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|clientResponseFilters
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ClientResponseFilter
argument_list|>
argument_list|(
operator|(
name|ClientResponseFilter
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ExceptionMapper
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|exceptionMappers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|ExceptionMapper
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ResponseExceptionMapper
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|responseExceptionMappers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ParameterHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|oClass
argument_list|)
condition|)
block|{
name|paramHandlers
operator|.
name|add
argument_list|(
operator|new
name|ProviderInfo
argument_list|<
name|ParameterHandler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
operator|(
name|ParameterHandler
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sortReaders
argument_list|()
expr_stmt|;
name|sortWriters
argument_list|()
expr_stmt|;
name|sortContextResolvers
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|preMatchContainerRequestFilters
argument_list|,
operator|new
name|BindingPriorityComparator
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|mapContainerFilters
argument_list|(
name|postMatchContainerRequestFilters
argument_list|,
name|postMatchRequestFilters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapContainerFilters
argument_list|(
name|postMatchContainerResponseFilters
argument_list|,
name|postMatchResponseFilters
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|readerInterceptors
argument_list|,
operator|new
name|BindingPriorityComparator
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|writerInterceptors
argument_list|,
operator|new
name|BindingPriorityComparator
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|clientRequestFilters
argument_list|,
operator|new
name|BindingPriorityComparator
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|clientResponseFilters
argument_list|,
operator|new
name|BindingPriorityComparator
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|injectContextProxies
argument_list|(
name|messageReaders
argument_list|,
name|messageWriters
argument_list|,
name|contextResolvers
argument_list|,
name|requestHandlers
argument_list|,
name|responseHandlers
argument_list|,
name|exceptionMappers
argument_list|,
name|postMatchContainerRequestFilters
operator|.
name|values
argument_list|()
argument_list|,
name|preMatchContainerRequestFilters
argument_list|,
name|postMatchContainerResponseFilters
operator|.
name|values
argument_list|()
argument_list|,
name|responseExceptionMappers
argument_list|,
name|clientRequestFilters
argument_list|,
name|clientResponseFilters
argument_list|,
name|readerInterceptors
argument_list|,
name|writerInterceptors
argument_list|)
expr_stmt|;
block|}
comment|//CHECKSTYLE:ON
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|mapContainerFilters
parameter_list|(
name|Map
argument_list|<
name|NameKey
argument_list|,
name|ProviderInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|map
parameter_list|,
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|postMatchFilters
parameter_list|,
name|boolean
name|ascending
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|postMatchFilters
argument_list|,
operator|new
name|PostMatchFilterComparator
argument_list|(
name|ascending
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|T
argument_list|>
name|p
range|:
name|postMatchFilters
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|AnnotationUtils
operator|.
name|getNameBindings
argument_list|(
name|p
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|names
operator|=
name|names
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
name|DEFAULT_FILTER_NAME_BINDING
argument_list|)
else|:
name|names
expr_stmt|;
comment|//TODO:  Would it be faster to have a single NameKey to keep all the names ?
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|map
operator|.
name|put
argument_list|(
operator|new
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|addContainerFilter
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|postMatchFilters
parameter_list|,
name|ProviderInfo
argument_list|<
name|T
argument_list|>
name|p
parameter_list|,
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|preMatchFilters
parameter_list|)
block|{
name|T
name|filter
init|=
name|p
operator|.
name|getProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|preMatchFilters
operator|!=
literal|null
operator|&&
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|,
name|PreMatching
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|preMatchFilters
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|postMatchFilters
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|injectContextValues
parameter_list|(
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|pi
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|InjectionUtils
operator|.
name|injectContexts
argument_list|(
name|pi
operator|.
name|getProvider
argument_list|()
argument_list|,
name|pi
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|injectContextProxies
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
modifier|...
name|providerLists
parameter_list|)
block|{
for|for
control|(
name|Collection
argument_list|<
name|?
argument_list|>
name|list
range|:
name|providerLists
control|)
block|{
name|Collection
argument_list|<
name|ProviderInfo
argument_list|<
name|?
argument_list|>
argument_list|>
name|l2
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|list
argument_list|)
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|pi
range|:
name|l2
control|)
block|{
if|if
condition|(
name|ProviderFactory
operator|.
name|SHARED_FACTORY
operator|==
name|this
operator|&&
name|isJaxbBasedProvider
argument_list|(
name|pi
operator|.
name|getProvider
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pi
operator|.
name|contextsAvailable
argument_list|()
condition|)
block|{
name|InjectionUtils
operator|.
name|injectContextProxies
argument_list|(
name|pi
argument_list|,
name|pi
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|injectedProviders
operator|.
name|add
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*      * sorts the available providers according to the media types they declare      * support for. Sorting of media types follows the general rule: x/y< * x< *,      * i.e. a provider that explicitly lists a media types is sorted before a      * provider that lists *. Quality parameter values are also used such that      * x/y;q=1.0< x/y;q=0.7.      */
specifier|private
name|void
name|sortReaders
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|messageReaders
argument_list|,
operator|new
name|MessageBodyReaderComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sortWriters
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|messageWriters
argument_list|,
operator|new
name|MessageBodyWriterComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sortContextResolvers
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|contextResolvers
argument_list|,
operator|new
name|ContextResolverComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Choose the first body reader provider that matches the requestedMimeType       * for a sorted list of Entity providers      * Returns null if none is found.      * @param<T>      * @param messageBodyReaders      * @param type      * @param requestedMimeType      * @return      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|chooseMessageReader
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|readers
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|List
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
name|ep
range|:
name|readers
control|)
block|{
if|if
condition|(
name|matchesReaderCriterias
argument_list|(
name|ep
argument_list|,
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|==
name|SHARED_FACTORY
condition|)
block|{
return|return
operator|(
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
operator|)
name|ep
operator|.
name|getProvider
argument_list|()
return|;
block|}
name|handleMapper
argument_list|(
name|candidates
argument_list|,
name|ep
argument_list|,
name|type
argument_list|,
name|m
argument_list|,
name|MessageBodyReader
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|ClassComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
operator|)
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|boolean
name|matchesReaderCriterias
parameter_list|(
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
name|pi
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
name|ep
init|=
name|pi
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
init|=
name|JAXRSUtils
operator|.
name|getProviderConsumeTypes
argument_list|(
name|ep
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|availableMimeTypes
init|=
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|supportedMediaTypes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableMimeTypes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|injected
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|this
operator|!=
name|SHARED_FACTORY
operator|||
operator|!
name|isJaxbBasedProvider
argument_list|(
name|ep
argument_list|)
condition|)
block|{
name|injectContextValues
argument_list|(
name|pi
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|injected
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|matches
init|=
name|ep
operator|.
name|isReadable
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matches
operator|&&
name|injected
condition|)
block|{
name|pi
operator|.
name|clearThreadLocalProxies
argument_list|()
expr_stmt|;
block|}
return|return
name|matches
return|;
block|}
comment|/**      * Choose the first body writer provider that matches the requestedMimeType       * for a sorted list of Entity providers      * Returns null if none is found.      * @param<T>      * @param messageBodyWriters      * @param type      * @param requestedMimeType      * @return      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
name|chooseMessageWriter
parameter_list|(
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|writers
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|List
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
name|ep
range|:
name|writers
control|)
block|{
if|if
condition|(
name|matchesWriterCriterias
argument_list|(
name|ep
argument_list|,
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|,
name|m
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|==
name|SHARED_FACTORY
condition|)
block|{
return|return
operator|(
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
operator|)
name|ep
operator|.
name|getProvider
argument_list|()
return|;
block|}
name|handleMapper
argument_list|(
name|candidates
argument_list|,
name|ep
argument_list|,
name|type
argument_list|,
name|m
argument_list|,
name|MessageBodyWriter
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|candidates
argument_list|,
operator|new
name|ClassComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
operator|)
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|boolean
name|matchesWriterCriterias
parameter_list|(
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
name|pi
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
name|ep
init|=
name|pi
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
init|=
name|JAXRSUtils
operator|.
name|getProviderProduceTypes
argument_list|(
name|ep
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|availableMimeTypes
init|=
name|JAXRSUtils
operator|.
name|intersectMimeTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|supportedMediaTypes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableMimeTypes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|injected
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|this
operator|!=
name|SHARED_FACTORY
operator|||
operator|!
name|isJaxbBasedProvider
argument_list|(
name|ep
argument_list|)
operator|)
operator|&&
name|m
operator|.
name|get
argument_list|(
name|ACTIVE_JAXRS_PROVIDER_KEY
argument_list|)
operator|!=
name|ep
condition|)
block|{
name|injectContextValues
argument_list|(
name|pi
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|injected
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|matches
init|=
name|ep
operator|.
name|isWriteable
argument_list|(
name|type
argument_list|,
name|genericType
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matches
operator|&&
name|injected
condition|)
block|{
name|pi
operator|.
name|clearThreadLocalProxies
argument_list|()
expr_stmt|;
block|}
return|return
name|matches
return|;
block|}
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|getMessageReaders
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|messageReaders
argument_list|)
return|;
block|}
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|getMessageWriters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|messageWriters
argument_list|)
return|;
block|}
name|List
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|getContextResolvers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|contextResolvers
argument_list|)
return|;
block|}
specifier|public
name|void
name|registerUserProvider
parameter_list|(
name|Object
name|provider
parameter_list|)
block|{
name|setUserProviders
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|provider
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Use for injection of entityProviders      * @param entityProviders the entityProviders to set      */
specifier|public
name|void
name|setUserProviders
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|userProviders
parameter_list|)
block|{
name|setProviders
argument_list|(
name|userProviders
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MessageBodyReaderComparator
implements|implements
name|Comparator
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
name|p1
parameter_list|,
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
name|p2
parameter_list|)
block|{
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
name|e1
init|=
name|p1
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
name|e2
init|=
name|p2
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types1
init|=
name|JAXRSUtils
operator|.
name|getProviderConsumeTypes
argument_list|(
name|e1
argument_list|)
decl_stmt|;
name|types1
operator|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|types1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types2
init|=
name|JAXRSUtils
operator|.
name|getProviderConsumeTypes
argument_list|(
name|e2
argument_list|)
decl_stmt|;
name|types2
operator|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|types2
argument_list|)
expr_stmt|;
return|return
name|JAXRSUtils
operator|.
name|compareSortedMediaTypes
argument_list|(
name|types1
argument_list|,
name|types2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MessageBodyWriterComparator
implements|implements
name|Comparator
argument_list|<
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
name|p1
parameter_list|,
name|ProviderInfo
argument_list|<
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
argument_list|>
name|p2
parameter_list|)
block|{
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
name|e1
init|=
name|p1
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|MessageBodyWriter
argument_list|<
name|?
argument_list|>
name|e2
init|=
name|p2
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types1
init|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|JAXRSUtils
operator|.
name|getProviderProduceTypes
argument_list|(
name|e1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types2
init|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|JAXRSUtils
operator|.
name|getProviderProduceTypes
argument_list|(
name|e2
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|JAXRSUtils
operator|.
name|compareSortedMediaTypes
argument_list|(
name|types1
argument_list|,
name|types2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ContextResolverComparator
implements|implements
name|Comparator
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
name|p1
parameter_list|,
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
name|p2
parameter_list|)
block|{
name|ContextResolver
argument_list|<
name|?
argument_list|>
name|e1
init|=
name|p1
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|ContextResolver
argument_list|<
name|?
argument_list|>
name|e2
init|=
name|p2
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types1
init|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|JAXRSUtils
operator|.
name|getProduceTypes
argument_list|(
name|e1
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Produces
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|types2
init|=
name|JAXRSUtils
operator|.
name|sortMediaTypes
argument_list|(
name|JAXRSUtils
operator|.
name|getProduceTypes
argument_list|(
name|e2
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Produces
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|JAXRSUtils
operator|.
name|compareSortedMediaTypes
argument_list|(
name|types1
argument_list|,
name|types2
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|setApplicationProvider
parameter_list|(
name|ProviderInfo
argument_list|<
name|Application
argument_list|>
name|app
parameter_list|)
block|{
name|application
operator|=
name|app
expr_stmt|;
block|}
specifier|public
name|void
name|setRequestPreprocessor
parameter_list|(
name|RequestPreprocessor
name|rp
parameter_list|)
block|{
name|this
operator|.
name|requestPreprocessor
operator|=
name|rp
expr_stmt|;
block|}
specifier|public
name|RequestPreprocessor
name|getRequestPreprocessor
parameter_list|()
block|{
return|return
name|requestPreprocessor
return|;
block|}
specifier|public
name|void
name|clearExceptionMapperProxies
parameter_list|()
block|{
name|clearProxies
argument_list|(
name|exceptionMappers
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearThreadLocalProxies
parameter_list|()
block|{
name|clearProxies
argument_list|(
name|injectedProviders
argument_list|)
expr_stmt|;
if|if
condition|(
name|application
operator|!=
literal|null
condition|)
block|{
name|application
operator|.
name|clearThreadLocalProxies
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|!=
name|SHARED_FACTORY
condition|)
block|{
name|SHARED_FACTORY
operator|.
name|clearThreadLocalProxies
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|clearProxies
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
modifier|...
name|lists
parameter_list|)
block|{
for|for
control|(
name|Collection
argument_list|<
name|?
argument_list|>
name|list
range|:
name|lists
control|)
block|{
name|Collection
argument_list|<
name|ProviderInfo
argument_list|<
name|?
argument_list|>
argument_list|>
name|l2
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|list
argument_list|)
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|pi
range|:
name|l2
control|)
block|{
name|pi
operator|.
name|clearThreadLocalProxies
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|clearProviders
parameter_list|()
block|{
name|messageReaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|messageWriters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|contextResolvers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|contextProviders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|exceptionMappers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|requestHandlers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responseHandlers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|postMatchContainerRequestFilters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|postMatchContainerResponseFilters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preMatchContainerRequestFilters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|paramHandlers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responseExceptionMappers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clientRequestFilters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clientResponseFilters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
name|r
range|:
name|messageReaders
control|)
block|{
name|injectProviderProperty
argument_list|(
name|r
operator|.
name|getProvider
argument_list|()
argument_list|,
literal|"setBus"
argument_list|,
name|Bus
operator|.
name|class
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|injectProviderProperty
parameter_list|(
name|Object
name|provider
parameter_list|,
name|String
name|mName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|pClass
parameter_list|,
name|Object
name|pValue
parameter_list|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|provider
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|mName
argument_list|,
operator|new
name|Class
index|[]
block|{
name|pClass
block|}
argument_list|)
decl_stmt|;
name|m
operator|.
name|invoke
argument_list|(
name|provider
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pValue
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setSchemaLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|schemas
parameter_list|)
block|{
name|boolean
name|schemasMethodAvailable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
name|r
range|:
name|messageReaders
control|)
block|{
name|schemasMethodAvailable
operator|=
name|injectProviderProperty
argument_list|(
name|r
operator|.
name|getProvider
argument_list|()
argument_list|,
literal|"setSchemaLocations"
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|schemasMethodAvailable
condition|)
block|{
for|for
control|(
name|ProviderInfo
argument_list|<
name|MessageBodyReader
argument_list|<
name|?
argument_list|>
argument_list|>
name|r
range|:
name|jaxbReaders
control|)
block|{
name|injectProviderProperty
argument_list|(
name|r
operator|.
name|getProvider
argument_list|()
argument_list|,
literal|"setSchemaLocations"
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initProviders
parameter_list|(
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|cris
parameter_list|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|set
init|=
name|getReadersWriters
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|set
control|)
block|{
name|Object
name|provider
init|=
operator|(
operator|(
name|ProviderInfo
argument_list|<
name|?
argument_list|>
operator|)
name|o
operator|)
operator|.
name|getProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|provider
operator|instanceof
name|AbstractConfigurableProvider
condition|)
block|{
operator|(
operator|(
name|AbstractConfigurableProvider
operator|)
name|provider
operator|)
operator|.
name|init
argument_list|(
name|cris
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|!=
name|SHARED_FACTORY
condition|)
block|{
name|SHARED_FACTORY
operator|.
name|initProviders
argument_list|(
name|cris
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Object
argument_list|>
name|getReadersWriters
parameter_list|()
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|messageReaders
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|jaxbReaders
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|messageWriters
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|jaxbWriters
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
specifier|private
specifier|static
class|class
name|ExceptionMapperComparator
implements|implements
name|Comparator
argument_list|<
name|ExceptionMapper
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ExceptionMapper
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|em1
parameter_list|,
name|ExceptionMapper
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|em2
parameter_list|)
block|{
return|return
name|compareClasses
argument_list|(
name|em1
argument_list|,
name|em2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ClassComparator
implements|implements
name|Comparator
argument_list|<
name|Object
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|em1
parameter_list|,
name|Object
name|em2
parameter_list|)
block|{
return|return
name|compareClasses
argument_list|(
name|em1
argument_list|,
name|em2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|compareClasses
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cl1
init|=
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cl2
init|=
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|Type
index|[]
name|types1
init|=
name|getGenericInterfaces
argument_list|(
name|cl1
argument_list|)
decl_stmt|;
name|Type
index|[]
name|types2
init|=
name|getGenericInterfaces
argument_list|(
name|cl2
argument_list|)
decl_stmt|;
if|if
condition|(
name|types1
operator|.
name|length
operator|==
literal|0
operator|&&
name|types2
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|types1
operator|.
name|length
operator|>
literal|0
operator|&&
name|types2
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|realClass1
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|types1
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realClass2
init|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|types2
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|realClass1
operator|==
name|realClass2
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|realClass1
operator|.
name|isAssignableFrom
argument_list|(
name|realClass2
argument_list|)
condition|)
block|{
comment|// subclass should go first
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|Type
index|[]
name|getGenericInterfaces
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|Object
operator|.
name|class
operator|==
name|cls
condition|)
block|{
return|return
operator|new
name|Type
index|[]
block|{}
return|;
block|}
name|Type
name|genericSuperCls
init|=
name|cls
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|genericSuperCls
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
operator|new
name|Type
index|[]
block|{
name|genericSuperCls
block|}
return|;
block|}
name|Type
index|[]
name|types
init|=
name|cls
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|types
return|;
block|}
return|return
name|getGenericInterfaces
argument_list|(
name|cls
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|PostMatchFilterComparator
extends|extends
name|BindingPriorityComparator
block|{
specifier|public
name|PostMatchFilterComparator
parameter_list|(
name|boolean
name|ascending
parameter_list|)
block|{
name|super
argument_list|(
name|ascending
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|p1
parameter_list|,
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|p2
parameter_list|)
block|{
name|int
name|result
init|=
name|super
operator|.
name|compare
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|Integer
name|namesSize1
init|=
name|AnnotationUtils
operator|.
name|getNameBindings
argument_list|(
name|p1
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|Integer
name|namesSize2
init|=
name|AnnotationUtils
operator|.
name|getNameBindings
argument_list|(
name|p2
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// if we have two filters with the same binding priority,
comment|// then put a filter with more name bindings upfront
comment|// (this effectively puts name bound filters before global ones)
name|result
operator|=
name|namesSize1
operator|.
name|compareTo
argument_list|(
name|namesSize2
argument_list|)
operator|*
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BindingPriorityComparator
extends|extends
name|AbstactBindingPriorityComparator
block|{
specifier|public
name|BindingPriorityComparator
parameter_list|(
name|boolean
name|ascending
parameter_list|)
block|{
name|super
argument_list|(
name|ascending
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|abstract
specifier|static
class|class
name|AbstactBindingPriorityComparator
implements|implements
name|Comparator
argument_list|<
name|ProviderInfo
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
specifier|private
name|boolean
name|ascending
decl_stmt|;
specifier|protected
name|AbstactBindingPriorityComparator
parameter_list|(
name|boolean
name|ascending
parameter_list|)
block|{
name|this
operator|.
name|ascending
operator|=
name|ascending
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|p1
parameter_list|,
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|p2
parameter_list|)
block|{
name|Integer
name|b1Value
init|=
name|getBindingPriorityValue
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|Integer
name|b2Value
init|=
name|getBindingPriorityValue
argument_list|(
name|p2
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|b1Value
operator|.
name|compareTo
argument_list|(
name|b2Value
argument_list|)
decl_stmt|;
return|return
name|ascending
condition|?
name|result
else|:
name|result
operator|*
operator|-
literal|1
return|;
block|}
specifier|private
name|int
name|getBindingPriorityValue
parameter_list|(
name|ProviderInfo
argument_list|<
name|?
argument_list|>
name|p
parameter_list|)
block|{
name|BindingPriority
name|b
init|=
name|p
operator|.
name|getProvider
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|BindingPriority
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|b
operator|==
literal|null
condition|?
name|BindingPriority
operator|.
name|USER
else|:
name|b
operator|.
name|value
argument_list|()
return|;
block|}
block|}
specifier|static
class|class
name|ContextResolverProxy
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ContextResolver
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|ContextResolver
argument_list|<
name|T
argument_list|>
argument_list|>
name|candidates
decl_stmt|;
specifier|public
name|ContextResolverProxy
parameter_list|(
name|List
argument_list|<
name|ContextResolver
argument_list|<
name|T
argument_list|>
argument_list|>
name|candidates
parameter_list|)
block|{
name|this
operator|.
name|candidates
operator|=
name|candidates
expr_stmt|;
block|}
specifier|public
name|T
name|getContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
for|for
control|(
name|ContextResolver
argument_list|<
name|T
argument_list|>
name|resolver
range|:
name|candidates
control|)
block|{
name|T
name|context
init|=
name|resolver
operator|.
name|getContext
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
return|return
name|context
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|ContextResolver
argument_list|<
name|T
argument_list|>
argument_list|>
name|getResolvers
parameter_list|()
block|{
return|return
name|candidates
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NameKey
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|NameKey
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

