begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ClientErrorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ForbiddenException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|InternalServerErrorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotAcceptableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotAllowedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotAuthorizedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotSupportedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|RedirectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ServerErrorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ServiceUnavailableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_class
specifier|final
class|class
name|SpecExceptions
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|EXCEPTIONS_MAP
decl_stmt|;
static|static
block|{
name|EXCEPTIONS_MAP
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|EXCEPTIONS_MAP
operator|.
name|put
argument_list|(
literal|400
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|EXCEPTIONS_MAP
operator|.
name|put
argument_list|(
literal|401
argument_list|,
name|NotAuthorizedException
operator|.
name|class
argument_list|)
expr_stmt|;
name|EXCEPTIONS_MAP
operator|.
name|put
argument_list|(
literal|403
argument_list|,
name|ForbiddenException
operator|.
name|class
argument_list|)
expr_stmt|;
name|EXCEPTIONS_MAP
operator|.
name|put
argument_list|(
literal|404
argument_list|,
name|NotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|EXCEPTIONS_MAP
operator|.
name|put
argument_list|(
literal|405
argument_list|,
name|NotAllowedException
operator|.
name|class
argument_list|)
expr_stmt|;
name|EXCEPTIONS_MAP
operator|.
name|put
argument_list|(
literal|406
argument_list|,
name|NotAcceptableException
operator|.
name|class
argument_list|)
expr_stmt|;
name|EXCEPTIONS_MAP
operator|.
name|put
argument_list|(
literal|415
argument_list|,
name|NotSupportedException
operator|.
name|class
argument_list|)
expr_stmt|;
name|EXCEPTIONS_MAP
operator|.
name|put
argument_list|(
literal|500
argument_list|,
name|InternalServerErrorException
operator|.
name|class
argument_list|)
expr_stmt|;
name|EXCEPTIONS_MAP
operator|.
name|put
argument_list|(
literal|503
argument_list|,
name|ServiceUnavailableException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SpecExceptions
parameter_list|()
block|{             }
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getWebApplicationExceptionClass
parameter_list|(
name|Response
name|exResponse
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|defaultExceptionType
parameter_list|)
block|{
name|int
name|status
init|=
name|exResponse
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|EXCEPTIONS_MAP
operator|.
name|get
argument_list|(
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
name|int
name|family
init|=
name|status
operator|/
literal|100
decl_stmt|;
if|if
condition|(
name|family
operator|==
literal|3
condition|)
block|{
name|cls
operator|=
name|RedirectionException
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|family
operator|==
literal|4
condition|)
block|{
name|cls
operator|=
name|ClientErrorException
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|family
operator|==
literal|5
condition|)
block|{
name|cls
operator|=
name|ServerErrorException
operator|.
name|class
expr_stmt|;
block|}
block|}
return|return
name|cls
operator|==
literal|null
condition|?
name|defaultExceptionType
else|:
name|cls
return|;
block|}
specifier|public
specifier|static
name|InternalServerErrorException
name|toInternalServerErrorException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
return|return
operator|new
name|InternalServerErrorException
argument_list|(
name|checkResponse
argument_list|(
name|response
argument_list|,
literal|500
argument_list|)
argument_list|,
name|cause
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BadRequestException
name|toBadRequestException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
return|return
operator|new
name|BadRequestException
argument_list|(
name|checkResponse
argument_list|(
name|response
argument_list|,
literal|400
argument_list|)
argument_list|,
name|cause
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NotFoundException
name|toNotFoundException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
return|return
operator|new
name|NotFoundException
argument_list|(
name|checkResponse
argument_list|(
name|response
argument_list|,
literal|404
argument_list|)
argument_list|,
name|cause
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NotAuthorizedException
name|toNotAuthorizedException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
return|return
operator|new
name|NotAuthorizedException
argument_list|(
name|checkResponse
argument_list|(
name|response
argument_list|,
literal|401
argument_list|)
argument_list|,
name|cause
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ForbiddenException
name|toForbiddenException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
return|return
operator|new
name|ForbiddenException
argument_list|(
name|checkResponse
argument_list|(
name|response
argument_list|,
literal|403
argument_list|)
argument_list|,
name|cause
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NotAcceptableException
name|toNotAcceptableException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
return|return
operator|new
name|NotAcceptableException
argument_list|(
name|checkResponse
argument_list|(
name|response
argument_list|,
literal|406
argument_list|)
argument_list|,
name|cause
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NotSupportedException
name|toNotSupportedException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
return|return
operator|new
name|NotSupportedException
argument_list|(
name|checkResponse
argument_list|(
name|response
argument_list|,
literal|415
argument_list|)
argument_list|,
name|cause
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|WebApplicationException
name|toHttpException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
throw|throw
name|response
operator|.
name|getStatus
argument_list|()
operator|>=
literal|500
condition|?
operator|new
name|ServerErrorException
argument_list|(
name|response
argument_list|,
name|cause
argument_list|)
else|:
operator|new
name|ClientErrorException
argument_list|(
name|response
argument_list|,
name|cause
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|Response
name|checkResponse
parameter_list|(
name|Response
name|r
parameter_list|,
name|int
name|status
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
return|return
name|JAXRSUtils
operator|.
name|toResponse
argument_list|(
name|status
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|r
return|;
block|}
block|}
block|}
end_class

end_unit

