begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|WrapperHelper
block|{
specifier|private
specifier|static
specifier|final
name|Class
name|NO_PARAMS
index|[]
init|=
operator|new
name|Class
index|[
literal|0
index|]
decl_stmt|;
specifier|public
specifier|abstract
name|Object
name|createWrapperObject
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|lst
parameter_list|)
throws|throws
name|Fault
function_decl|;
specifier|public
specifier|abstract
name|List
argument_list|<
name|Object
argument_list|>
name|getWrapperParts
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|Fault
function_decl|;
specifier|public
specifier|abstract
name|String
name|getSignature
parameter_list|()
function_decl|;
specifier|public
specifier|static
name|WrapperHelper
name|createWrapperHelper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|wrapperType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|elTypeNames
parameter_list|,
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|partClasses
parameter_list|)
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|getMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|(
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Method
argument_list|>
name|setMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|(
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Method
argument_list|>
name|jaxbMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|(
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|(
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Method
name|allMethods
index|[]
init|=
name|wrapperType
operator|.
name|getMethods
argument_list|()
decl_stmt|;
name|String
name|packageName
init|=
name|wrapperType
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|wrapperType
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
comment|//if wrappertype class is generated by ASM,getPackage() always return null
if|if
condition|(
name|wrapperType
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|packageName
operator|=
name|wrapperType
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|objectFactoryClassName
init|=
name|packageName
operator|+
literal|".ObjectFactory"
decl_stmt|;
name|Object
name|objectFactory
init|=
literal|null
decl_stmt|;
try|try
block|{
name|objectFactory
operator|=
name|wrapperType
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|objectFactoryClassName
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore, probably won't need it
block|}
name|Method
name|allOFMethods
index|[]
decl_stmt|;
if|if
condition|(
name|objectFactory
operator|!=
literal|null
condition|)
block|{
name|allOFMethods
operator|=
name|objectFactory
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|allOFMethods
operator|=
operator|new
name|Method
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|partNames
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|String
name|partName
init|=
name|partNames
operator|.
name|get
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|partName
operator|==
literal|null
condition|)
block|{
name|getMethods
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setMethods
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|jaxbMethods
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|elementType
init|=
name|elTypeNames
operator|.
name|get
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|String
name|getAccessor
init|=
name|JAXBUtils
operator|.
name|nameToIdentifier
argument_list|(
name|partName
argument_list|,
name|JAXBUtils
operator|.
name|IdentifierType
operator|.
name|GETTER
argument_list|)
decl_stmt|;
name|String
name|setAccessor
init|=
name|JAXBUtils
operator|.
name|nameToIdentifier
argument_list|(
name|partName
argument_list|,
name|JAXBUtils
operator|.
name|IdentifierType
operator|.
name|SETTER
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
literal|null
decl_stmt|;
name|Method
name|setMethod
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getMethod
operator|=
name|wrapperType
operator|.
name|getMethod
argument_list|(
name|getAccessor
argument_list|,
name|NO_PARAMS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|//ignore for now
block|}
name|Field
name|elField
init|=
name|getElField
argument_list|(
name|partName
argument_list|,
name|wrapperType
argument_list|)
decl_stmt|;
if|if
condition|(
name|getMethod
operator|==
literal|null
operator|&&
name|elementType
operator|!=
literal|null
operator|&&
literal|"boolean"
operator|.
name|equals
argument_list|(
name|elementType
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|&&
operator|(
name|elField
operator|==
literal|null
operator|||
operator|(
operator|!
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|elField
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
operator|!
name|elField
operator|.
name|getType
argument_list|()
operator|.
name|isArray
argument_list|()
operator|)
operator|)
condition|)
block|{
try|try
block|{
name|String
name|newAcc
init|=
name|getAccessor
operator|.
name|replaceFirst
argument_list|(
literal|"get"
argument_list|,
literal|"is"
argument_list|)
decl_stmt|;
name|getMethod
operator|=
name|wrapperType
operator|.
name|getMethod
argument_list|(
name|newAcc
argument_list|,
name|NO_PARAMS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|//ignore for now
block|}
block|}
if|if
condition|(
name|getMethod
operator|==
literal|null
operator|&&
literal|"return"
operator|.
name|equals
argument_list|(
name|partName
argument_list|)
condition|)
block|{
comment|//RI generated code uses this
try|try
block|{
name|getMethod
operator|=
name|wrapperType
operator|.
name|getMethod
argument_list|(
literal|"get_return"
argument_list|,
name|NO_PARAMS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
try|try
block|{
name|getMethod
operator|=
name|wrapperType
operator|.
name|getMethod
argument_list|(
literal|"is_return"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex2
parameter_list|)
block|{
comment|//ignore for now
block|}
block|}
block|}
name|String
name|setAccessor2
init|=
name|setAccessor
decl_stmt|;
if|if
condition|(
literal|"return"
operator|.
name|equals
argument_list|(
name|partName
argument_list|)
condition|)
block|{
comment|//some versions of jaxb map "return" to "set_return" instead of "setReturn"
name|setAccessor2
operator|=
literal|"set_return"
expr_stmt|;
block|}
for|for
control|(
name|Method
name|method
range|:
name|allMethods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|!=
literal|null
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
operator|(
name|setAccessor
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|setAccessor2
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|setMethod
operator|=
name|method
expr_stmt|;
break|break;
block|}
block|}
name|getMethods
operator|.
name|add
argument_list|(
name|getMethod
argument_list|)
expr_stmt|;
name|setMethods
operator|.
name|add
argument_list|(
name|setMethod
argument_list|)
expr_stmt|;
if|if
condition|(
name|setMethod
operator|!=
literal|null
operator|&&
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|setMethod
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|String
name|methodName
init|=
literal|"create"
operator|+
name|wrapperType
operator|.
name|getSimpleName
argument_list|()
operator|+
name|setMethod
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|allOFMethods
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|jaxbMethods
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|jaxbMethods
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elField
operator|!=
literal|null
condition|)
block|{
comment|// JAXB Type get XmlElement Annotation
name|XmlElement
name|el
init|=
name|elField
operator|.
name|getAnnotation
argument_list|(
name|XmlElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
operator|&&
name|partName
operator|.
name|equals
argument_list|(
name|el
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|elField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|elField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|createWrapperHelper
argument_list|(
name|wrapperType
argument_list|,
name|setMethods
operator|.
name|toArray
argument_list|(
operator|new
name|Method
index|[
name|setMethods
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|getMethods
operator|.
name|toArray
argument_list|(
operator|new
name|Method
index|[
name|getMethods
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|jaxbMethods
operator|.
name|toArray
argument_list|(
operator|new
name|Method
index|[
name|jaxbMethods
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|Field
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|objectFactory
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Field
name|getElField
parameter_list|(
name|String
name|partName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|wrapperType
parameter_list|)
block|{
name|String
name|fieldName
init|=
name|JAXBUtils
operator|.
name|nameToIdentifier
argument_list|(
name|partName
argument_list|,
name|JAXBUtils
operator|.
name|IdentifierType
operator|.
name|VARIABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|wrapperType
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|XmlElement
name|el
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|XmlElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
operator|&&
name|partName
operator|.
name|equals
argument_list|(
name|el
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|field
return|;
block|}
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|field
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Object
name|getValue
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|in
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
if|if
condition|(
literal|"javax.xml.bind.JAXBElement"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
condition|)
block|{
name|JAXBElement
name|je
init|=
operator|(
name|JAXBElement
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|je
operator|==
literal|null
condition|?
name|je
else|:
name|je
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|WrapperHelper
name|createWrapperHelper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|wrapperType
parameter_list|,
name|Method
name|setMethods
index|[]
parameter_list|,
name|Method
name|getMethods
index|[]
parameter_list|,
name|Method
name|jaxbMethods
index|[]
parameter_list|,
name|Field
name|fields
index|[]
parameter_list|,
name|Object
name|objectFactory
parameter_list|)
block|{
name|WrapperHelper
name|wh
init|=
name|compileWrapperHelper
argument_list|(
name|wrapperType
argument_list|,
name|setMethods
argument_list|,
name|getMethods
argument_list|,
name|jaxbMethods
argument_list|,
name|fields
argument_list|,
name|objectFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|wh
operator|==
literal|null
condition|)
block|{
name|wh
operator|=
operator|new
name|ReflectWrapperHelper
argument_list|(
name|wrapperType
argument_list|,
name|setMethods
argument_list|,
name|getMethods
argument_list|,
name|jaxbMethods
argument_list|,
name|fields
argument_list|,
name|objectFactory
argument_list|)
expr_stmt|;
block|}
return|return
name|wh
return|;
block|}
specifier|private
specifier|static
name|WrapperHelper
name|compileWrapperHelper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|wrapperType
parameter_list|,
name|Method
name|setMethods
index|[]
parameter_list|,
name|Method
name|getMethods
index|[]
parameter_list|,
name|Method
name|jaxbMethods
index|[]
parameter_list|,
name|Field
name|fields
index|[]
parameter_list|,
name|Object
name|objectFactory
parameter_list|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.objectweb.asm.ClassWriter"
argument_list|)
expr_stmt|;
return|return
name|WrapperHelperCompiler
operator|.
name|compileWrapperHelper
argument_list|(
name|wrapperType
argument_list|,
name|setMethods
argument_list|,
name|getMethods
argument_list|,
name|jaxbMethods
argument_list|,
name|fields
argument_list|,
name|objectFactory
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|//ASM not found, just use reflection based stuff
block|}
return|return
literal|null
return|;
block|}
specifier|static
class|class
name|ReflectWrapperHelper
extends|extends
name|WrapperHelper
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|wrapperType
decl_stmt|;
specifier|final
name|Method
name|setMethods
index|[]
decl_stmt|;
specifier|final
name|Method
name|getMethods
index|[]
decl_stmt|;
specifier|final
name|Method
name|jaxbObjectMethods
index|[]
decl_stmt|;
specifier|final
name|Field
name|fields
index|[]
decl_stmt|;
specifier|final
name|Object
name|objectFactory
decl_stmt|;
name|ReflectWrapperHelper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|wt
parameter_list|,
name|Method
name|sets
index|[]
parameter_list|,
name|Method
name|gets
index|[]
parameter_list|,
name|Method
name|jaxbs
index|[]
parameter_list|,
name|Field
name|f
index|[]
parameter_list|,
name|Object
name|of
parameter_list|)
block|{
name|setMethods
operator|=
name|sets
expr_stmt|;
name|getMethods
operator|=
name|gets
expr_stmt|;
name|fields
operator|=
name|f
expr_stmt|;
name|jaxbObjectMethods
operator|=
name|jaxbs
expr_stmt|;
name|wrapperType
operator|=
name|wt
expr_stmt|;
name|objectFactory
operator|=
name|of
expr_stmt|;
block|}
specifier|public
name|String
name|getSignature
parameter_list|()
block|{
return|return
literal|""
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|Object
name|createWrapperObject
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|lst
parameter_list|)
throws|throws
name|Fault
block|{
try|try
block|{
name|Object
name|ret
init|=
name|wrapperType
operator|.
name|newInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|setMethods
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|getMethods
index|[
name|x
index|]
operator|==
literal|null
operator|&&
name|setMethods
index|[
name|x
index|]
operator|==
literal|null
operator|&&
name|fields
index|[
name|x
index|]
operator|==
literal|null
condition|)
block|{
comment|//this part is a header or something
comment|//that is not part of the wrapper.
continue|continue;
block|}
name|Object
name|o
init|=
name|lst
operator|.
name|get
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|jaxbObjectMethods
index|[
name|x
index|]
operator|!=
literal|null
condition|)
block|{
name|o
operator|=
name|jaxbObjectMethods
index|[
name|x
index|]
operator|.
name|invoke
argument_list|(
name|objectFactory
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|col
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
operator|)
name|getMethods
index|[
name|x
index|]
operator|.
name|invoke
argument_list|(
name|ret
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
comment|//broken generated java wrappers
if|if
condition|(
name|setMethods
index|[
name|x
index|]
operator|!=
literal|null
condition|)
block|{
name|setMethods
index|[
name|x
index|]
operator|.
name|invoke
argument_list|(
name|ret
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
index|[
name|x
index|]
operator|.
name|set
argument_list|(
name|ret
argument_list|,
name|lst
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|olst
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
operator|)
name|o
argument_list|)
decl_stmt|;
name|col
operator|.
name|addAll
argument_list|(
name|olst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|setMethods
index|[
name|x
index|]
operator|!=
literal|null
condition|)
block|{
name|setMethods
index|[
name|x
index|]
operator|.
name|invoke
argument_list|(
name|ret
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fields
index|[
name|x
index|]
operator|!=
literal|null
condition|)
block|{
name|fields
index|[
name|x
index|]
operator|.
name|set
argument_list|(
name|ret
argument_list|,
name|lst
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getWrapperParts
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|Fault
block|{
try|try
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|getMethods
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|getMethods
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|getMethods
index|[
name|x
index|]
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|getValue
argument_list|(
name|getMethods
index|[
name|x
index|]
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fields
index|[
name|x
index|]
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|fields
index|[
name|x
index|]
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//placeholder
name|ret
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

