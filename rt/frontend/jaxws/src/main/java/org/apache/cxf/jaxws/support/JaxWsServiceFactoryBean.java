begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlNsForm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlSeeAlso
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|FaultAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceFeature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|AddressingFeature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|MTOM
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|MTOMFeature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|SourceDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JAXWSMethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JAXWSMethodInvoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JAXWSProviderMethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|WrapperClassGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|interceptors
operator|.
name|WebFaultOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|spi
operator|.
name|ProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|FactoryBeanListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|FactoryBeanListener
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ServiceConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|SingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|service
operator|.
name|factory
operator|.
name|AbstractServiceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|service
operator|.
name|factory
operator|.
name|ReflectionServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Constructs a service model from JAX-WS service endpoint classes. Works  * with both @@WebServiceProvider and @@WebService annotated classes.  *  * @see org.apache.cxf.jaxws.JaxWsServerFactoryBean  */
end_comment

begin_class
annotation|@
name|NoJSR250Annotations
specifier|public
class|class
name|JaxWsServiceFactoryBean
extends|extends
name|ReflectionServiceFactoryBean
block|{
comment|// used to tag property on service.
specifier|public
specifier|static
specifier|final
name|String
name|WS_FEATURES
init|=
literal|"JAXWS-WS-FEATURES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|JaxWsServiceFactoryBean
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AbstractServiceConfiguration
name|jaxWsConfiguration
decl_stmt|;
specifier|private
name|JaxWsImplementorInfo
name|implInfo
decl_stmt|;
specifier|private
name|List
argument_list|<
name|WebServiceFeature
argument_list|>
name|setWsFeatures
decl_stmt|;
specifier|private
name|List
argument_list|<
name|WebServiceFeature
argument_list|>
name|wsFeatures
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|wrapperClasses
decl_stmt|;
specifier|public
name|JaxWsServiceFactoryBean
parameter_list|()
block|{
name|getIgnoredClasses
argument_list|()
operator|.
name|add
argument_list|(
name|Service
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//the JAXWS-RI doesn't qualify the schemas for the wrapper types
comment|//and thus won't work if we do.
name|setQualifyWrapperSchema
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|initSchemaLocations
argument_list|()
expr_stmt|;
block|}
specifier|public
name|JaxWsServiceFactoryBean
parameter_list|(
name|JaxWsImplementorInfo
name|implInfo
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|implInfo
operator|=
name|implInfo
expr_stmt|;
name|initConfiguration
argument_list|(
name|implInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|serviceClass
operator|=
name|implInfo
operator|.
name|getEndpointClass
argument_list|()
expr_stmt|;
name|this
operator|.
name|serviceType
operator|=
name|implInfo
operator|.
name|getSEIType
argument_list|()
expr_stmt|;
name|loadWSFeatureAnnotation
argument_list|(
name|implInfo
operator|.
name|getSEIClass
argument_list|()
argument_list|,
name|implInfo
operator|.
name|getImplementorClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|wrapperClasses
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|initSchemaLocations
parameter_list|()
block|{
name|this
operator|.
name|schemaLocationMapping
operator|.
name|put
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSA
argument_list|,
name|JAXWSAConstants
operator|.
name|WSA_XSD
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadWSFeatureAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|serviceClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|implementorClass
parameter_list|)
block|{
name|List
argument_list|<
name|WebServiceFeature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<
name|WebServiceFeature
argument_list|>
argument_list|()
decl_stmt|;
name|MTOM
name|mtom
init|=
name|implInfo
operator|.
name|getImplementorClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|MTOM
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtom
operator|==
literal|null
operator|&&
name|serviceClass
operator|!=
literal|null
condition|)
block|{
name|mtom
operator|=
name|serviceClass
operator|.
name|getAnnotation
argument_list|(
name|MTOM
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mtom
operator|!=
literal|null
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
operator|new
name|MTOMFeature
argument_list|(
name|mtom
operator|.
name|enabled
argument_list|()
argument_list|,
name|mtom
operator|.
name|threshold
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//deprecated way to set mtom
name|BindingType
name|bt
init|=
name|implInfo
operator|.
name|getImplementorClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|BindingType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bt
operator|!=
literal|null
operator|&&
operator|(
name|SOAPBinding
operator|.
name|SOAP11HTTP_MTOM_BINDING
operator|.
name|equals
argument_list|(
name|bt
operator|.
name|value
argument_list|()
argument_list|)
operator|||
name|SOAPBinding
operator|.
name|SOAP12HTTP_MTOM_BINDING
operator|.
name|equals
argument_list|(
name|bt
operator|.
name|value
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
operator|new
name|MTOMFeature
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Addressing
name|addressing
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|implementorClass
operator|!=
literal|null
condition|)
block|{
name|addressing
operator|=
name|implementorClass
operator|.
name|getAnnotation
argument_list|(
name|Addressing
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addressing
operator|==
literal|null
operator|&&
name|serviceClass
operator|!=
literal|null
condition|)
block|{
name|addressing
operator|=
name|serviceClass
operator|.
name|getAnnotation
argument_list|(
name|Addressing
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addressing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ProviderImpl
operator|.
name|isJaxWs22
argument_list|()
condition|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|Addressing
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"responses"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
name|Object
name|responses
init|=
name|method
operator|.
name|invoke
argument_list|(
name|addressing
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|AddressingFeature
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|boolean
operator|.
name|class
block|,
name|boolean
operator|.
name|class
block|,
name|responses
operator|.
name|getClass
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|addressing
operator|.
name|enabled
argument_list|()
argument_list|,
name|addressing
operator|.
name|required
argument_list|()
argument_list|,
name|responses
argument_list|)
decl_stmt|;
name|features
operator|.
name|add
argument_list|(
operator|(
name|WebServiceFeature
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|features
operator|.
name|add
argument_list|(
operator|new
name|AddressingFeature
argument_list|(
name|addressing
operator|.
name|enabled
argument_list|()
argument_list|,
name|addressing
operator|.
name|required
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|features
operator|.
name|add
argument_list|(
operator|new
name|AddressingFeature
argument_list|(
name|addressing
operator|.
name|enabled
argument_list|()
argument_list|,
name|addressing
operator|.
name|required
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|features
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|wsFeatures
operator|=
name|features
expr_stmt|;
if|if
condition|(
name|setWsFeatures
operator|!=
literal|null
condition|)
block|{
name|wsFeatures
operator|.
name|addAll
argument_list|(
name|setWsFeatures
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|wsFeatures
operator|=
name|setWsFeatures
expr_stmt|;
block|}
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
name|create
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
name|s
init|=
name|super
operator|.
name|create
argument_list|()
decl_stmt|;
name|s
operator|.
name|put
argument_list|(
name|ENDPOINT_CLASS
argument_list|,
name|implInfo
operator|.
name|getEndpointClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getDataBinding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setMTOMFeatures
argument_list|(
name|s
operator|.
name|getDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setServiceClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|serviceClass
parameter_list|)
block|{
if|if
condition|(
name|serviceClass
operator|==
literal|null
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"SERVICECLASS_MUST_BE_SET"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|setJaxWsImplementorInfo
argument_list|(
operator|new
name|JaxWsImplementorInfo
argument_list|(
name|serviceClass
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|setServiceClass
argument_list|(
name|getJaxWsImplementorInfo
argument_list|()
operator|.
name|getEndpointClass
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setServiceType
argument_list|(
name|getJaxWsImplementorInfo
argument_list|()
operator|.
name|getSEIType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|void
name|checkServiceClassAnnotations
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|sc
parameter_list|)
block|{
comment|//no need to check
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|void
name|initializeFaultInterceptors
parameter_list|()
block|{
name|getService
argument_list|()
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WebFaultOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Endpoint
name|createEndpoint
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
throws|throws
name|EndpointException
block|{
name|Endpoint
name|ep
init|=
operator|new
name|JaxWsEndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|getService
argument_list|()
argument_list|,
name|ei
argument_list|,
name|implInfo
argument_list|,
name|wsFeatures
argument_list|,
name|this
operator|.
name|getFeatures
argument_list|()
argument_list|,
name|this
operator|.
name|isFromWsdl
argument_list|()
argument_list|)
decl_stmt|;
name|sendEvent
argument_list|(
name|FactoryBeanListener
operator|.
name|Event
operator|.
name|ENDPOINT_CREATED
argument_list|,
name|ei
argument_list|,
name|ep
argument_list|)
expr_stmt|;
return|return
name|ep
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|void
name|initializeWSDLOperation
parameter_list|(
name|InterfaceInfo
name|intf
parameter_list|,
name|OperationInfo
name|o
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|method
operator|=
operator|(
operator|(
name|JaxWsServiceConfiguration
operator|)
name|jaxWsConfiguration
operator|)
operator|.
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|o
operator|.
name|setProperty
argument_list|(
name|Method
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|o
operator|.
name|setProperty
argument_list|(
name|METHOD
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|initializeWrapping
argument_list|(
name|o
argument_list|,
name|method
argument_list|)
expr_stmt|;
comment|// rpc out-message-part-info class mapping
name|Operation
name|op
init|=
operator|(
name|Operation
operator|)
name|o
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_OPERATION
argument_list|)
decl_stmt|;
name|initializeClassInfo
argument_list|(
name|o
argument_list|,
name|method
argument_list|,
name|op
operator|==
literal|null
condition|?
literal|null
else|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|op
operator|.
name|getParameterOrdering
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bindOperation
argument_list|(
name|o
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|sendEvent
argument_list|(
name|Event
operator|.
name|INTERFACE_OPERATION_BOUND
argument_list|,
name|o
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|bindOperation
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
try|try
block|{
comment|// Find the Async method which returns a Response
name|Method
name|responseMethod
init|=
name|ReflectionUtil
operator|.
name|getDeclaredMethod
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"Async"
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
comment|// Find the Async method whic has a Future& AsyncResultHandler
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|asyncHandlerParams
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
comment|//copy it to may it non-readonly
name|asyncHandlerParams
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|asyncHandlerParams
argument_list|)
expr_stmt|;
name|asyncHandlerParams
operator|.
name|add
argument_list|(
name|AsyncHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Method
name|futureMethod
init|=
name|ReflectionUtil
operator|.
name|getDeclaredMethod
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"Async"
argument_list|,
name|asyncHandlerParams
operator|.
name|toArray
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
name|asyncHandlerParams
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|getMethodDispatcher
argument_list|()
operator|.
name|bind
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|responseMethod
argument_list|,
name|futureMethod
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|getMethodDispatcher
argument_list|()
operator|.
name|bind
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|void
name|initializeWSDLOperations
parameter_list|()
block|{
if|if
condition|(
name|implInfo
operator|.
name|isWebServiceProvider
argument_list|()
condition|)
block|{
name|initializeWSDLOperationsForProvider
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|initializeWSDLOperations
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|protected
name|void
name|initializeWSDLOperationsForProvider
parameter_list|()
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|getProviderParameterType
argument_list|(
name|getServiceClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"INVALID_PROVIDER_EXC"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|getEndpointInfo
argument_list|()
operator|==
literal|null
operator|&&
name|isFromWsdl
argument_list|()
condition|)
block|{
comment|//most likely, they specified a WSDL, but for some reason
comment|//did not give a valid ServiceName/PortName.  For provider,
comment|//we'll allow this since everything is bound directly to
comment|//the invoke method, however, this CAN cause other problems
comment|//such as addresses in the wsdl not getting updated and such
comment|//so we'll WARN about it.....
name|List
argument_list|<
name|QName
argument_list|>
name|enames
init|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|si
range|:
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|EndpointInfo
name|ep
range|:
name|si
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
name|enames
operator|.
name|add
argument_list|(
name|ep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"COULD_NOT_FIND_ENDPOINT"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getEndpointName
argument_list|()
block|,
name|enames
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Method
name|invoke
init|=
name|getServiceClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"invoke"
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|QName
name|catchAll
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jaxws/provider"
argument_list|,
literal|"invoke"
argument_list|)
decl_stmt|;
comment|// Bind every operation to the invoke method.
for|for
control|(
name|ServiceInfo
name|si
range|:
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
name|si
operator|.
name|setProperty
argument_list|(
literal|"soap.force.doclit.bare"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isFromWsdl
argument_list|()
condition|)
block|{
for|for
control|(
name|EndpointInfo
name|ei
range|:
name|si
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
name|ei
operator|.
name|setProperty
argument_list|(
literal|"soap.no.validate.parts"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|BindingInfo
name|bind
range|:
name|si
operator|.
name|getBindings
argument_list|()
control|)
block|{
for|for
control|(
name|BindingOperationInfo
name|bop
range|:
name|bind
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|OperationInfo
name|o
init|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|bop
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
comment|//force to bare, no unwrapping
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|setUnwrappedOperation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|bop
operator|.
name|setUnwrappedOperation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MessagePartInfo
name|inf
init|=
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|addMessagePart
argument_list|(
name|o
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|inf
operator|.
name|setConcreteName
argument_list|(
name|o
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bop
operator|.
name|getInput
argument_list|()
operator|.
name|setMessageParts
argument_list|(
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MessagePartInfo
name|inf
range|:
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|inf
operator|.
name|setTypeClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|o
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MessagePartInfo
name|inf
init|=
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|addMessagePart
argument_list|(
name|o
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|inf
operator|.
name|setConcreteName
argument_list|(
operator|new
name|QName
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|o
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Response"
argument_list|)
argument_list|)
expr_stmt|;
name|bop
operator|.
name|getOutput
argument_list|()
operator|.
name|setMessageParts
argument_list|(
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MessagePartInfo
name|inf
range|:
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|inf
operator|.
name|setTypeClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|getMethodDispatcher
argument_list|()
operator|.
name|bind
argument_list|(
name|o
argument_list|,
name|invoke
argument_list|)
expr_stmt|;
block|}
name|BindingOperationInfo
name|bop
init|=
name|bind
operator|.
name|getOperation
argument_list|(
name|catchAll
argument_list|)
decl_stmt|;
if|if
condition|(
name|bop
operator|==
literal|null
condition|)
block|{
name|OperationInfo
name|op
init|=
name|bind
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
name|catchAll
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|op
operator|=
name|bind
operator|.
name|getInterface
argument_list|()
operator|.
name|addOperation
argument_list|(
name|catchAll
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|catchAll
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|MessageInfo
name|mInfo
init|=
name|op
operator|.
name|createMessage
argument_list|(
operator|new
name|QName
argument_list|(
name|catchAll
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
operator|+
literal|"Request"
argument_list|)
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
decl_stmt|;
name|op
operator|.
name|setInput
argument_list|(
name|catchAll
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Request"
argument_list|,
name|mInfo
argument_list|)
expr_stmt|;
name|MessagePartInfo
name|mpi
init|=
name|mInfo
operator|.
name|addMessagePart
argument_list|(
literal|"parameters"
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setTypeQName
argument_list|(
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
name|mInfo
operator|=
name|op
operator|.
name|createMessage
argument_list|(
operator|new
name|QName
argument_list|(
name|catchAll
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
operator|+
literal|"Response"
argument_list|)
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|)
expr_stmt|;
name|op
operator|.
name|setOutput
argument_list|(
name|name
operator|+
literal|"Response"
argument_list|,
name|mInfo
argument_list|)
expr_stmt|;
name|mpi
operator|=
name|mInfo
operator|.
name|addMessagePart
argument_list|(
literal|"parameters"
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setTypeQName
argument_list|(
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|bo
init|=
operator|new
name|BindingOperationInfo
argument_list|(
name|bind
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|op
operator|.
name|setProperty
argument_list|(
literal|"operation.is.synthetic"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|bo
operator|.
name|setProperty
argument_list|(
literal|"operation.is.synthetic"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|bind
operator|.
name|addOperation
argument_list|(
name|bo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getProviderParameterType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Type
index|[]
name|genericInterfaces
init|=
name|cls
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|type
range|:
name|genericInterfaces
control|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rawCls
init|=
call|(
name|Class
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|type
argument_list|)
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Provider
operator|.
name|class
operator|==
name|rawCls
condition|)
block|{
return|return
call|(
name|Class
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|type
argument_list|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|Class
operator|&&
name|Provider
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
argument_list|)
condition|)
block|{
return|return
name|getProviderParameterType
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
argument_list|)
return|;
block|}
block|}
return|return
name|getProviderParameterType
argument_list|(
name|cls
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|initializeWrapping
parameter_list|(
name|OperationInfo
name|o
parameter_list|,
name|Method
name|selected
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|responseWrapper
init|=
name|getResponseWrapper
argument_list|(
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseWrapper
operator|!=
literal|null
condition|)
block|{
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setTypeClass
argument_list|(
name|responseWrapper
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getResponseWrapperClassName
argument_list|(
name|selected
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"RESPONSE.WRAPPER.CLASSNAME"
argument_list|,
name|getResponseWrapperClassName
argument_list|(
name|selected
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|requestWrapper
init|=
name|getRequestWrapper
argument_list|(
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestWrapper
operator|!=
literal|null
condition|)
block|{
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setTypeClass
argument_list|(
name|requestWrapper
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getRequestWrapperClassName
argument_list|(
name|selected
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"REQUEST.WRAPPER.CLASSNAME"
argument_list|,
name|getRequestWrapperClassName
argument_list|(
name|selected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getBeanClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|exClass
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|java
operator|.
name|rmi
operator|.
name|ServerException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|exClass
argument_list|)
operator|||
name|java
operator|.
name|rmi
operator|.
name|RemoteException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|exClass
argument_list|)
operator|||
literal|"javax.xml.ws"
operator|.
name|equals
argument_list|(
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|exClass
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Method
name|getFaultInfo
init|=
name|exClass
operator|.
name|getMethod
argument_list|(
literal|"getFaultInfo"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|getFaultInfo
operator|.
name|getReturnType
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|//ignore for now
block|}
name|WebFault
name|fault
init|=
name|exClass
operator|.
name|getAnnotation
argument_list|(
name|WebFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fault
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fault
operator|.
name|faultBean
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|fault
operator|.
name|faultBean
argument_list|()
argument_list|,
name|exClass
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e1
parameter_list|)
block|{
comment|//ignore
block|}
block|}
return|return
name|super
operator|.
name|getBeanClass
argument_list|(
name|exClass
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setJaxWsConfiguration
parameter_list|(
name|JaxWsServiceConfiguration
name|jaxWsConfiguration
parameter_list|)
block|{
name|this
operator|.
name|jaxWsConfiguration
operator|=
name|jaxWsConfiguration
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|JaxWsImplementorInfo
name|getJaxWsImplementorInfo
parameter_list|()
block|{
return|return
name|implInfo
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setJaxWsImplementorInfo
parameter_list|(
name|JaxWsImplementorInfo
name|jaxWsImplementorInfo
parameter_list|)
block|{
name|this
operator|.
name|implInfo
operator|=
name|jaxWsImplementorInfo
expr_stmt|;
name|initConfiguration
argument_list|(
name|jaxWsImplementorInfo
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
specifier|final
name|void
name|initConfiguration
parameter_list|(
name|JaxWsImplementorInfo
name|ii
parameter_list|)
block|{
if|if
condition|(
name|ii
operator|.
name|isWebServiceProvider
argument_list|()
condition|)
block|{
name|jaxWsConfiguration
operator|=
operator|new
name|WebServiceProviderConfiguration
argument_list|()
expr_stmt|;
name|jaxWsConfiguration
operator|.
name|setServiceFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|getServiceConfigurations
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|jaxWsConfiguration
argument_list|)
expr_stmt|;
name|setWrapped
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setDataBinding
argument_list|(
operator|new
name|SourceDataBinding
argument_list|()
argument_list|)
expr_stmt|;
name|setMethodDispatcher
argument_list|(
operator|new
name|JAXWSProviderMethodDispatcher
argument_list|(
name|implInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jaxWsConfiguration
operator|=
operator|new
name|JaxWsServiceConfiguration
argument_list|()
expr_stmt|;
name|jaxWsConfiguration
operator|.
name|setServiceFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|getServiceConfigurations
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|jaxWsConfiguration
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|seiClass
init|=
name|ii
operator|.
name|getEndpointClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|seiClass
operator|!=
literal|null
operator|&&
name|seiClass
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XmlSchema
name|schema
init|=
name|seiClass
operator|.
name|getPackage
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlSchema
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
operator|&&
name|XmlNsForm
operator|.
name|QUALIFIED
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|elementFormDefault
argument_list|()
argument_list|)
condition|)
block|{
name|setQualifyWrapperSchema
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|setMethodDispatcher
argument_list|(
operator|new
name|JAXWSMethodDispatcher
argument_list|(
name|implInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|loadWSFeatureAnnotation
argument_list|(
name|ii
operator|.
name|getSEIClass
argument_list|()
argument_list|,
name|ii
operator|.
name|getImplementorClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|WebServiceFeature
argument_list|>
name|getWsFeatures
parameter_list|()
block|{
return|return
name|setWsFeatures
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setWsFeatures
parameter_list|(
name|List
argument_list|<
name|WebServiceFeature
argument_list|>
name|swsFeatures
parameter_list|)
block|{
name|this
operator|.
name|setWsFeatures
operator|=
name|swsFeatures
expr_stmt|;
if|if
condition|(
name|wsFeatures
operator|==
literal|null
condition|)
block|{
name|wsFeatures
operator|=
name|setWsFeatures
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|FaultInfo
name|getFaultInfo
parameter_list|(
specifier|final
name|OperationInfo
name|operation
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|expClass
parameter_list|)
block|{
for|for
control|(
name|FaultInfo
name|fault
range|:
name|operation
operator|.
name|getFaults
argument_list|()
control|)
block|{
if|if
condition|(
name|fault
operator|.
name|getProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
name|expClass
operator|||
name|fault
operator|.
name|getProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
name|expClass
condition|)
block|{
return|return
name|fault
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|buildWSAActions
parameter_list|(
name|OperationInfo
name|operation
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
comment|//nothing
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Action
name|action
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Action
operator|.
name|class
argument_list|)
decl_stmt|;
name|Addressing
name|addressing
init|=
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Addressing
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
operator|&&
name|addressing
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|WebMethod
name|wm
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|inputAction
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|inputAction
operator|=
name|action
operator|.
name|input
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wm
operator|!=
literal|null
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|inputAction
argument_list|)
condition|)
block|{
name|inputAction
operator|=
name|wm
operator|.
name|action
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|inputAction
argument_list|)
condition|)
block|{
name|inputAction
operator|=
name|computeAction
argument_list|(
name|operation
argument_list|,
literal|"Request"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|==
literal|null
operator|&&
name|addressing
operator|!=
literal|null
condition|)
block|{
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|,
name|inputAction
argument_list|)
expr_stmt|;
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|,
name|inputAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|operation
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operation
operator|.
name|getOutput
argument_list|()
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|,
name|computeAction
argument_list|(
name|operation
argument_list|,
literal|"Response"
argument_list|)
argument_list|)
expr_stmt|;
name|operation
operator|.
name|getOutput
argument_list|()
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|,
name|computeAction
argument_list|(
name|operation
argument_list|,
literal|"Response"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|MessageInfo
name|input
init|=
name|operation
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|,
name|inputAction
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|action
operator|.
name|input
argument_list|()
argument_list|)
condition|)
block|{
name|input
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|,
name|inputAction
argument_list|)
expr_stmt|;
block|}
name|MessageInfo
name|output
init|=
name|operation
operator|.
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|action
operator|.
name|output
argument_list|()
argument_list|)
condition|)
block|{
name|output
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|,
name|action
operator|.
name|output
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|,
name|action
operator|.
name|output
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|,
name|computeAction
argument_list|(
name|operation
argument_list|,
literal|"Response"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FaultAction
index|[]
name|faultActions
init|=
name|action
operator|.
name|fault
argument_list|()
decl_stmt|;
if|if
condition|(
name|faultActions
operator|!=
literal|null
operator|&&
name|faultActions
operator|.
name|length
operator|>
literal|0
operator|&&
name|operation
operator|.
name|getFaults
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FaultAction
name|faultAction
range|:
name|faultActions
control|)
block|{
name|FaultInfo
name|faultInfo
init|=
name|getFaultInfo
argument_list|(
name|operation
argument_list|,
name|faultAction
operator|.
name|className
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultInfo
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|faultAction
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
name|faultInfo
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|,
name|faultAction
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|faultInfo
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|,
name|faultAction
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|operation
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|faultInfo
operator|=
name|getFaultInfo
argument_list|(
name|operation
operator|.
name|getUnwrappedOperation
argument_list|()
argument_list|,
name|faultAction
operator|.
name|className
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|faultInfo
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|faultAction
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
name|faultInfo
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|,
name|faultAction
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|faultInfo
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|,
name|faultAction
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|FaultInfo
name|fi
range|:
name|operation
operator|.
name|getFaults
argument_list|()
control|)
block|{
if|if
condition|(
name|fi
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|f
init|=
literal|"/Fault/"
operator|+
name|fi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|fi
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|,
name|computeAction
argument_list|(
name|operation
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|operation
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|fi
operator|=
name|operation
operator|.
name|getUnwrappedOperation
argument_list|()
operator|.
name|getFault
argument_list|(
name|fi
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fi
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|,
name|computeAction
argument_list|(
name|operation
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|String
name|computeAction
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|String
name|postFix
parameter_list|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|op
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|postFix
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|OperationInfo
name|createOperation
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|InterfaceInfo
name|intf
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|OperationInfo
name|op
init|=
name|super
operator|.
name|createOperation
argument_list|(
name|serviceInfo
argument_list|,
name|intf
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getUnwrappedOperation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|op
operator|=
name|op
operator|.
name|getUnwrappedOperation
argument_list|()
expr_stmt|;
block|}
name|buildWSAActions
argument_list|(
name|op
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getExtraClass
parameter_list|()
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|wrapperClasses
operator|=
name|generatedWrapperBeanClass
argument_list|()
expr_stmt|;
if|if
condition|(
name|wrapperClasses
operator|!=
literal|null
condition|)
block|{
name|classes
operator|.
name|addAll
argument_list|(
name|wrapperClasses
argument_list|)
expr_stmt|;
block|}
name|XmlSeeAlso
name|xmlSeeAlsoAnno
init|=
name|getServiceClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlSeeAlso
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlSeeAlsoAnno
operator|!=
literal|null
operator|&&
name|xmlSeeAlsoAnno
operator|.
name|value
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xmlSeeAlsoAnno
operator|.
name|value
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|value
init|=
name|xmlSeeAlsoAnno
operator|.
name|value
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"XMLSEEALSO_NULL_CLASS"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
block|,
name|i
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classes
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|classes
return|;
block|}
end_function

begin_function
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|generatedWrapperBeanClass
parameter_list|()
block|{
name|DataBinding
name|b
init|=
name|getDataBinding
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"JAXBDataBinding"
argument_list|)
operator|&&
name|schemaLocations
operator|==
literal|null
condition|)
block|{
name|ServiceInfo
name|serviceInfo
init|=
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|WrapperClassGenerator
name|wrapperGen
init|=
operator|new
name|WrapperClassGenerator
argument_list|(
name|this
argument_list|,
name|serviceInfo
operator|.
name|getInterface
argument_list|()
argument_list|,
name|getQualifyWrapperSchema
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|wrapperGen
operator|.
name|generate
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|setMTOMFeatures
parameter_list|(
name|DataBinding
name|databinding
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|wsFeatures
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WebServiceFeature
name|wsf
range|:
name|this
operator|.
name|wsFeatures
control|)
block|{
if|if
condition|(
name|wsf
operator|instanceof
name|MTOMFeature
condition|)
block|{
name|databinding
operator|.
name|setMtomEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MTOMFeature
name|f
init|=
operator|(
name|MTOMFeature
operator|)
name|wsf
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getThreshold
argument_list|()
operator|>
literal|0
condition|)
block|{
name|databinding
operator|.
name|setMtomThreshold
argument_list|(
operator|(
operator|(
name|MTOMFeature
operator|)
name|wsf
operator|)
operator|.
name|getThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|void
name|buildServiceFromClass
parameter_list|()
block|{
name|super
operator|.
name|buildServiceFromClass
argument_list|()
expr_stmt|;
name|getService
argument_list|()
operator|.
name|put
argument_list|(
name|WS_FEATURES
argument_list|,
name|getWsFeatures
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|initializeParameter
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|rawClass
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|implInfo
operator|.
name|isWebServiceProvider
argument_list|()
condition|)
block|{
name|part
operator|.
name|setTypeQName
argument_list|(
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTypeClass
argument_list|(
name|rawClass
argument_list|)
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|initializeParameter
argument_list|(
name|part
argument_list|,
name|rawClass
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|Invoker
name|createInvoker
parameter_list|()
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|getServiceClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|cls
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|JAXWSMethodInvoker
argument_list|(
operator|new
name|SingletonFactory
argument_list|(
name|getServiceClass
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

