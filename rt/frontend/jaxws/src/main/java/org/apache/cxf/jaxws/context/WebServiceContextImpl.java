begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|EndpointReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReferenceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
operator|.
name|ClassLoaderHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointReferenceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_class
specifier|public
class|class
name|WebServiceContextImpl
implements|implements
name|WebServiceContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WebServiceContextImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|MessageContext
argument_list|>
name|context
init|=
operator|new
name|ThreadLocal
argument_list|<
name|MessageContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MessageContext
name|localCtx
decl_stmt|;
specifier|public
name|WebServiceContextImpl
parameter_list|()
block|{
name|localCtx
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|WebServiceContextImpl
parameter_list|(
name|MessageContext
name|c
parameter_list|)
block|{
name|localCtx
operator|=
name|c
expr_stmt|;
block|}
comment|// Implementation of javax.xml.ws.WebServiceContext
specifier|public
specifier|final
name|MessageContext
name|getMessageContext
parameter_list|()
block|{
return|return
name|localCtx
operator|==
literal|null
condition|?
name|context
operator|.
name|get
argument_list|()
else|:
name|localCtx
return|;
block|}
specifier|public
specifier|final
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
name|SecurityContext
name|ctx
init|=
operator|(
name|SecurityContext
operator|)
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ctx
operator|.
name|getUserPrincipal
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isUserInRole
parameter_list|(
specifier|final
name|String
name|role
parameter_list|)
block|{
name|SecurityContext
name|ctx
init|=
operator|(
name|SecurityContext
operator|)
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|ctx
operator|.
name|isUserInRole
argument_list|(
name|role
argument_list|)
return|;
block|}
specifier|public
name|EndpointReference
name|getEndpointReference
parameter_list|(
name|Element
modifier|...
name|referenceParameters
parameter_list|)
block|{
name|WrappedMessageContext
name|ctx
init|=
operator|(
name|WrappedMessageContext
operator|)
name|getMessageContext
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|msg
init|=
name|ctx
operator|.
name|getWrappedMessage
argument_list|()
decl_stmt|;
name|Endpoint
name|ep
init|=
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|W3CEndpointReferenceBuilder
name|builder
init|=
operator|new
name|W3CEndpointReferenceBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|address
argument_list|(
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|serviceName
argument_list|(
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endpointName
argument_list|(
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|wsdlDescription
init|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"URI"
argument_list|,
name|URI
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsdlDescription
operator|==
literal|null
condition|)
block|{
name|String
name|address
init|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
try|try
block|{
name|wsdlDescription
operator|=
operator|new
name|URI
argument_list|(
name|address
operator|+
literal|"?wsdl"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"URI"
argument_list|,
name|wsdlDescription
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlDescription
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|wsdlDocumentLocation
argument_list|(
name|wsdlDescription
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*         if (ep.getEndpointInfo().getService().getDescription() != null) {             builder.wsdlDocumentLocation(ep.getEndpointInfo().getService()                                      .getDescription().getBaseURI());         }         */
if|if
condition|(
name|referenceParameters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Element
name|referenceParameter
range|:
name|referenceParameters
control|)
block|{
name|builder
operator|.
name|referenceParameter
argument_list|(
name|referenceParameter
argument_list|)
expr_stmt|;
block|}
block|}
name|ClassLoaderHolder
name|orig
init|=
literal|null
decl_stmt|;
try|try
block|{
name|orig
operator|=
name|ClassLoaderUtils
operator|.
name|setThreadContextClassloader
argument_list|(
name|EndpointReferenceBuilder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|orig
operator|!=
literal|null
condition|)
block|{
name|orig
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|EndpointReference
parameter_list|>
name|T
name|getEndpointReference
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Element
modifier|...
name|referenceParameters
parameter_list|)
block|{
if|if
condition|(
name|W3CEndpointReference
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|getEndpointReference
argument_list|(
name|referenceParameters
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"ENDPOINTREFERENCE_TYPE_NOT_SUPPORTED"
argument_list|,
name|LOG
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Sets reference to the specified MessageContext and returns the previous reference, if any.      *       * @param ctx       The MessageContext to set      * @return          The former MessageContext reference, if any.      */
specifier|public
specifier|static
name|MessageContext
name|setMessageContext
parameter_list|(
name|MessageContext
name|ctx
parameter_list|)
block|{
name|MessageContext
name|oldCtx
init|=
name|context
operator|.
name|get
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
name|oldCtx
return|;
block|}
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|context
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

