begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap12
operator|.
name|SOAP12Address
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap12
operator|.
name|SOAP12Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Dispatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|EndpointReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceFeature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|HandlerResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|spi
operator|.
name|ServiceDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|BindingFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|SoapAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|SoapBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|URIParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|SourceDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServiceContractResolverRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractBasicInterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|binding
operator|.
name|soap
operator|.
name|JaxWsSoapBindingConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|HandlerResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|PortInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|spi
operator|.
name|ProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|BindingID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|DummyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|JaxWsClientEndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|JaxWsEndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|JaxWsServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|AbstractServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ReflectionServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ServiceConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceModelUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|OneShotAsyncExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|http
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ServiceImpl
extends|extends
name|ServiceDelegate
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|LOG
operator|.
name|getResourceBundle
argument_list|()
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|String
name|wsdlURL
decl_stmt|;
specifier|private
name|HandlerResolver
name|handlerResolver
decl_stmt|;
specifier|private
name|Executor
name|executor
decl_stmt|;
specifier|private
name|QName
name|serviceName
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|PortInfoImpl
argument_list|>
name|portInfos
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|PortInfoImpl
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|WebServiceFeature
name|serviceFeatures
index|[]
decl_stmt|;
specifier|public
name|ServiceImpl
parameter_list|(
name|Bus
name|b
parameter_list|,
name|URL
name|url
parameter_list|,
name|QName
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|WebServiceFeature
modifier|...
name|f
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|serviceName
operator|=
name|name
expr_stmt|;
name|clazz
operator|=
name|cls
expr_stmt|;
name|serviceFeatures
operator|=
name|f
expr_stmt|;
name|handlerResolver
operator|=
operator|new
name|HandlerResolverImpl
argument_list|(
name|bus
argument_list|,
name|name
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|url
operator|&&
literal|null
operator|!=
name|bus
condition|)
block|{
name|ServiceContractResolverRegistry
name|registry
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServiceContractResolverRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|registry
condition|)
block|{
name|URI
name|uri
init|=
name|registry
operator|.
name|getContractLocation
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|uri
condition|)
block|{
try|try
block|{
name|url
operator|=
name|uri
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"resolve qname failed"
argument_list|,
name|name
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|wsdlURL
operator|=
name|url
operator|==
literal|null
condition|?
literal|null
else|:
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|initializePorts
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceConstructionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|initializePorts
parameter_list|()
block|{
try|try
block|{
name|Definition
name|def
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getDefinition
argument_list|(
name|wsdlURL
argument_list|)
decl_stmt|;
name|javax
operator|.
name|wsdl
operator|.
name|Service
name|serv
init|=
name|def
operator|.
name|getService
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serv
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
literal|"Could not find service named "
operator|+
name|serviceName
operator|+
literal|" in wsdl "
operator|+
name|wsdlURL
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Port
argument_list|>
name|wsdlports
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|serv
operator|.
name|getPorts
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Port
name|port
range|:
name|wsdlports
operator|.
name|values
argument_list|()
control|)
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|serviceName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|port
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tpId
init|=
literal|null
decl_stmt|;
name|String
name|address
init|=
literal|null
decl_stmt|;
name|String
name|bindingID
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|ExtensibilityElement
argument_list|>
name|extensions
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|port
operator|.
name|getBinding
argument_list|()
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|extensions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|e
init|=
name|extensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SoapBinding
condition|)
block|{
name|bindingID
operator|=
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|SOAP12Binding
condition|)
block|{
name|bindingID
operator|=
name|SOAPBinding
operator|.
name|SOAP12HTTP_BINDING
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPBinding
condition|)
block|{
name|bindingID
operator|=
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
expr_stmt|;
block|}
block|}
name|extensions
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|port
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|extensions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|e
init|=
name|extensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|tpId
operator|==
literal|null
condition|)
block|{
name|tpId
operator|=
name|e
operator|.
name|getElementType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|SoapAddress
condition|)
block|{
name|address
operator|=
operator|(
operator|(
name|SoapAddress
operator|)
name|e
operator|)
operator|.
name|getLocationURI
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AddressType
condition|)
block|{
name|address
operator|=
operator|(
operator|(
name|AddressType
operator|)
name|e
operator|)
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|SOAP12Address
condition|)
block|{
name|address
operator|=
operator|(
operator|(
name|SOAP12Address
operator|)
name|e
operator|)
operator|.
name|getLocationURI
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|SOAPAddress
condition|)
block|{
name|address
operator|=
operator|(
operator|(
name|SOAPAddress
operator|)
name|e
operator|)
operator|.
name|getLocationURI
argument_list|()
expr_stmt|;
block|}
block|}
name|addPort
argument_list|(
name|name
argument_list|,
name|bindingID
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|WSDLServiceFactory
name|sf
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlURL
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|sf
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|si
range|:
name|service
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|EndpointInfo
name|ei
range|:
name|si
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
name|String
name|bindingID
init|=
name|BindingID
operator|.
name|getJaxwsBindingID
argument_list|(
name|ei
operator|.
name|getTransportId
argument_list|()
argument_list|)
decl_stmt|;
name|addPort
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|,
name|bindingID
argument_list|,
name|ei
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|addPort
parameter_list|(
name|QName
name|portName
parameter_list|,
name|String
name|bindingId
parameter_list|,
name|String
name|address
parameter_list|)
block|{
name|PortInfoImpl
name|portInfo
init|=
operator|new
name|PortInfoImpl
argument_list|(
name|bindingId
argument_list|,
name|portName
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|portInfo
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|portInfos
operator|.
name|put
argument_list|(
name|portName
argument_list|,
name|portInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WebServiceFeature
index|[]
name|getAllFeatures
parameter_list|(
name|WebServiceFeature
name|features
index|[]
parameter_list|)
block|{
if|if
condition|(
name|serviceFeatures
operator|==
literal|null
operator|||
name|serviceFeatures
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|features
return|;
block|}
elseif|else
if|if
condition|(
name|features
operator|==
literal|null
operator|||
name|features
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|serviceFeatures
return|;
block|}
name|List
argument_list|<
name|WebServiceFeature
argument_list|>
name|f
init|=
operator|new
name|ArrayList
argument_list|<
name|WebServiceFeature
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|features
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|serviceFeatures
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|f
operator|.
name|toArray
argument_list|(
operator|new
name|WebServiceFeature
index|[
name|f
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|JaxWsClientEndpointImpl
name|getJaxwsEndpoint
parameter_list|(
name|QName
name|portName
parameter_list|,
name|AbstractServiceFactoryBean
name|sf
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
name|Service
name|service
init|=
name|sf
operator|.
name|getService
argument_list|()
decl_stmt|;
name|EndpointInfo
name|ei
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|portName
operator|==
literal|null
condition|)
block|{
name|ei
operator|=
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEndpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ei
operator|=
name|service
operator|.
name|getEndpointInfo
argument_list|(
name|portName
argument_list|)
expr_stmt|;
if|if
condition|(
name|ei
operator|==
literal|null
condition|)
block|{
name|PortInfoImpl
name|portInfo
init|=
name|getPortInfo
argument_list|(
name|portName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|portInfo
condition|)
block|{
try|try
block|{
name|ei
operator|=
name|createEndpointInfo
argument_list|(
name|sf
argument_list|,
name|portName
argument_list|,
name|portInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BusException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|ei
operator|==
literal|null
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"INVALID_PORT"
argument_list|,
name|BUNDLE
argument_list|,
name|portName
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|//When the dispatch is created from EPR, the EPR's address will be set in portInfo
name|PortInfoImpl
name|portInfo
init|=
name|getPortInfo
argument_list|(
name|portName
argument_list|)
decl_stmt|;
if|if
condition|(
name|portInfo
operator|!=
literal|null
operator|&&
operator|!
name|portInfo
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|ei
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|ei
operator|.
name|setAddress
argument_list|(
name|portInfo
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|JaxWsClientEndpointImpl
argument_list|(
name|bus
argument_list|,
name|service
argument_list|,
name|ei
argument_list|,
name|this
argument_list|,
name|getAllFeatures
argument_list|(
name|features
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EndpointException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|AbstractServiceFactoryBean
name|createDispatchService
parameter_list|(
name|DataBinding
name|db
parameter_list|)
block|{
name|AbstractServiceFactoryBean
name|serviceFactory
decl_stmt|;
name|Service
name|dispatchService
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|wsdlURL
condition|)
block|{
name|WSDLServiceFactory
name|sf
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlURL
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|dispatchService
operator|=
name|sf
operator|.
name|create
argument_list|()
expr_stmt|;
name|dispatchService
operator|.
name|setDataBinding
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|serviceFactory
operator|=
name|sf
expr_stmt|;
block|}
else|else
block|{
name|ReflectionServiceFactoryBean
name|sf
init|=
operator|new
name|JaxWsServiceFactoryBean
argument_list|()
decl_stmt|;
name|sf
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setServiceName
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
comment|// maybe we can find another way to create service which have no SEI
name|sf
operator|.
name|setServiceClass
argument_list|(
name|DummyImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setDataBinding
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|dispatchService
operator|=
name|sf
operator|.
name|create
argument_list|()
expr_stmt|;
name|serviceFactory
operator|=
name|sf
expr_stmt|;
block|}
name|configureObject
argument_list|(
name|dispatchService
argument_list|)
expr_stmt|;
for|for
control|(
name|ServiceInfo
name|si
range|:
name|dispatchService
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
name|si
operator|.
name|setProperty
argument_list|(
literal|"soap.force.doclit.bare"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
return|return
name|serviceFactory
return|;
block|}
specifier|public
name|Executor
name|getExecutor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
specifier|public
name|HandlerResolver
name|getHandlerResolver
parameter_list|()
block|{
return|return
name|handlerResolver
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPort
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|serviceEndpointInterface
parameter_list|)
block|{
return|return
name|getPort
argument_list|(
name|serviceEndpointInterface
argument_list|,
operator|new
name|WebServiceFeature
index|[]
block|{}
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPort
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|serviceEndpointInterface
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
try|try
block|{
return|return
name|createPort
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|serviceEndpointInterface
argument_list|,
name|features
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceConstructionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPort
parameter_list|(
name|QName
name|portName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|serviceEndpointInterface
parameter_list|)
block|{
return|return
name|getPort
argument_list|(
name|portName
argument_list|,
name|serviceEndpointInterface
argument_list|,
operator|new
name|WebServiceFeature
index|[]
block|{}
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPort
parameter_list|(
name|QName
name|portName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|serviceEndpointInterface
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
if|if
condition|(
name|portName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|BUNDLE
operator|.
name|getString
argument_list|(
literal|"PORT_NAME_NULL_EXC"
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|portInfos
operator|.
name|containsKey
argument_list|(
name|portName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"INVALID_PORT"
argument_list|,
name|BUNDLE
argument_list|,
name|portName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|createPort
argument_list|(
name|portName
argument_list|,
literal|null
argument_list|,
name|serviceEndpointInterface
argument_list|,
name|features
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceConstructionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPort
parameter_list|(
name|EndpointReferenceType
name|endpointReference
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getPort
argument_list|(
name|endpointReference
argument_list|,
name|type
argument_list|,
operator|new
name|WebServiceFeature
index|[]
block|{}
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPort
parameter_list|(
name|EndpointReferenceType
name|endpointReference
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
name|endpointReference
operator|=
name|EndpointReferenceUtils
operator|.
name|resolve
argument_list|(
name|endpointReference
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|QName
name|serviceQName
init|=
name|EndpointReferenceUtils
operator|.
name|getServiceName
argument_list|(
name|endpointReference
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|String
name|portName
init|=
name|EndpointReferenceUtils
operator|.
name|getPortName
argument_list|(
name|endpointReference
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|portName
operator|!=
literal|null
operator|&&
name|serviceQName
operator|!=
literal|null
condition|)
block|{
name|String
name|ns
init|=
name|serviceQName
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|ns
argument_list|)
condition|)
block|{
comment|//hack to workaround a xalan bug
for|for
control|(
name|QName
name|qn
range|:
name|portInfos
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|portName
operator|.
name|equals
argument_list|(
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|ns
operator|=
name|qn
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|ns
argument_list|)
operator|&&
name|serviceName
operator|!=
literal|null
condition|)
block|{
name|ns
operator|=
name|serviceName
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
name|portQName
operator|=
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|portName
argument_list|)
expr_stmt|;
block|}
return|return
name|createPort
argument_list|(
name|portQName
argument_list|,
name|endpointReference
argument_list|,
name|type
argument_list|,
name|features
argument_list|)
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|QName
argument_list|>
name|getPorts
parameter_list|()
block|{
return|return
name|portInfos
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|QName
name|getServiceName
parameter_list|()
block|{
return|return
name|serviceName
return|;
block|}
specifier|public
name|URL
name|getWSDLDocumentLocation
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|wsdlURL
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setExecutor
parameter_list|(
name|Executor
name|e
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|e
expr_stmt|;
block|}
specifier|public
name|void
name|setHandlerResolver
parameter_list|(
name|HandlerResolver
name|hr
parameter_list|)
block|{
name|handlerResolver
operator|=
name|hr
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|createPort
parameter_list|(
name|QName
name|portName
parameter_list|,
name|EndpointReferenceType
name|epr
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|serviceEndpointInterface
parameter_list|)
block|{
return|return
name|createPort
argument_list|(
name|portName
argument_list|,
name|epr
argument_list|,
name|serviceEndpointInterface
argument_list|,
operator|new
name|WebServiceFeature
index|[]
block|{}
argument_list|)
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|createPort
parameter_list|(
name|QName
name|portName
parameter_list|,
name|EndpointReferenceType
name|epr
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|serviceEndpointInterface
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"creating port for portName"
argument_list|,
name|portName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"endpoint reference:"
argument_list|,
name|epr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"endpoint interface:"
argument_list|,
name|serviceEndpointInterface
argument_list|)
expr_stmt|;
name|JaxWsProxyFactoryBean
name|proxyFac
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|JaxWsClientFactoryBean
name|clientFac
init|=
operator|(
name|JaxWsClientFactoryBean
operator|)
name|proxyFac
operator|.
name|getClientFactoryBean
argument_list|()
decl_stmt|;
name|JaxWsServiceFactoryBean
name|serviceFactory
init|=
operator|(
name|JaxWsServiceFactoryBean
operator|)
name|proxyFac
operator|.
name|getServiceFactory
argument_list|()
decl_stmt|;
name|proxyFac
operator|.
name|initFeatures
argument_list|()
expr_stmt|;
name|WebServiceFeature
name|f
index|[]
init|=
name|getAllFeatures
argument_list|(
name|features
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|serviceFactory
operator|.
name|setWsFeatures
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|proxyFac
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|proxyFac
operator|.
name|setServiceClass
argument_list|(
name|serviceEndpointInterface
argument_list|)
expr_stmt|;
name|proxyFac
operator|.
name|setServiceName
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|epr
operator|!=
literal|null
operator|&&
name|epr
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
operator|&&
name|epr
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clientFac
operator|.
name|setAddress
argument_list|(
name|epr
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlURL
operator|!=
literal|null
condition|)
block|{
name|proxyFac
operator|.
name|setWsdlURL
argument_list|(
name|wsdlURL
argument_list|)
expr_stmt|;
block|}
name|configureObject
argument_list|(
name|proxyFac
argument_list|)
expr_stmt|;
name|configureObject
argument_list|(
name|clientFac
argument_list|)
expr_stmt|;
if|if
condition|(
name|portName
operator|==
literal|null
condition|)
block|{
name|QName
name|portTypeName
init|=
name|getPortTypeName
argument_list|(
name|serviceEndpointInterface
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|serviceFactory
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|serviceFactory
operator|.
name|setServiceClass
argument_list|(
name|serviceEndpointInterface
argument_list|)
expr_stmt|;
name|serviceFactory
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|=
name|serviceFactory
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|EndpointInfo
name|ei
init|=
name|ServiceModelUtil
operator|.
name|findBestEndpointInfo
argument_list|(
name|portTypeName
argument_list|,
name|service
operator|.
name|getServiceInfos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ei
operator|!=
literal|null
condition|)
block|{
name|portName
operator|=
name|ei
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|portName
operator|=
name|serviceFactory
operator|.
name|getEndpointName
argument_list|()
expr_stmt|;
block|}
block|}
name|serviceFactory
operator|.
name|setEndpointName
argument_list|(
name|portName
argument_list|)
expr_stmt|;
if|if
condition|(
name|epr
operator|!=
literal|null
condition|)
block|{
name|clientFac
operator|.
name|setEndpointReference
argument_list|(
name|epr
argument_list|)
expr_stmt|;
block|}
name|PortInfoImpl
name|portInfo
init|=
name|portInfos
operator|.
name|get
argument_list|(
name|portName
argument_list|)
decl_stmt|;
if|if
condition|(
name|portInfo
operator|!=
literal|null
condition|)
block|{
name|clientFac
operator|.
name|setBindingId
argument_list|(
name|portInfo
operator|.
name|getBindingID
argument_list|()
argument_list|)
expr_stmt|;
name|clientFac
operator|.
name|setAddress
argument_list|(
name|portInfo
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//configureObject(portName.toString() + ".jaxws-client.proxyFactory", proxyFac);
if|if
condition|(
name|clazz
operator|!=
name|ServiceImpl
operator|.
name|class
condition|)
block|{
comment|// handlerchain should be on the generated Service object
name|proxyFac
operator|.
name|setLoadHandlers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Object
name|obj
init|=
name|proxyFac
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Configure the Service
name|Service
name|service
init|=
name|serviceFactory
operator|.
name|getService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setExecutor
argument_list|(
operator|new
name|Executor
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|Executor
name|ex
init|=
name|getExecutor
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|ex
operator|=
name|OneShotAsyncExecutor
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
name|ex
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|configureObject
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// Configure the JaxWsEndpoitnImpl
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|client
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|JaxWsEndpointImpl
name|jaxwsEndpoint
init|=
operator|(
name|JaxWsEndpointImpl
operator|)
name|client
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|configureObject
argument_list|(
name|jaxwsEndpoint
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
argument_list|<
name|Handler
argument_list|>
name|hc
init|=
name|jaxwsEndpoint
operator|.
name|getJaxwsBinding
argument_list|()
operator|.
name|getHandlerChain
argument_list|()
decl_stmt|;
name|hc
operator|.
name|addAll
argument_list|(
name|handlerResolver
operator|.
name|getHandlerChain
argument_list|(
name|portInfos
operator|.
name|get
argument_list|(
name|portName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jaxwsEndpoint
operator|.
name|getJaxwsBinding
argument_list|()
operator|.
name|setHandlerChain
argument_list|(
name|hc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"created proxy"
argument_list|,
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|portInfo
operator|==
literal|null
condition|)
block|{
name|addPort
argument_list|(
name|portName
argument_list|,
name|clientFac
operator|.
name|getBindingId
argument_list|()
argument_list|,
name|clientFac
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|serviceEndpointInterface
operator|.
name|cast
argument_list|(
name|obj
argument_list|)
return|;
block|}
specifier|private
name|EndpointInfo
name|createEndpointInfo
parameter_list|(
name|AbstractServiceFactoryBean
name|serviceFactory
parameter_list|,
name|QName
name|portName
parameter_list|,
name|PortInfoImpl
name|portInfo
parameter_list|)
throws|throws
name|BusException
block|{
name|EndpointInfo
name|ei
init|=
literal|null
decl_stmt|;
name|String
name|address
init|=
name|portInfo
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|String
name|bindingID
init|=
name|BindingID
operator|.
name|getBindingID
argument_list|(
name|portInfo
operator|.
name|getBindingID
argument_list|()
argument_list|)
decl_stmt|;
name|DestinationFactoryManager
name|dfm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|//the bindingId might be the transportId, just attempt to
comment|//load it to force the factory to load
name|dfm
operator|.
name|getDestinationFactory
argument_list|(
name|bindingID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BusException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
name|DestinationFactory
name|df
init|=
name|dfm
operator|.
name|getDestinationFactoryForUri
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|String
name|transportId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|df
operator|!=
literal|null
operator|&&
name|df
operator|.
name|getTransportIds
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|df
operator|.
name|getTransportIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|transportId
operator|=
name|df
operator|.
name|getTransportIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportId
operator|=
name|bindingID
expr_stmt|;
block|}
name|Object
name|config
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|serviceFactory
operator|instanceof
name|JaxWsServiceFactoryBean
condition|)
block|{
name|config
operator|=
operator|new
name|JaxWsSoapBindingConfiguration
argument_list|(
operator|(
name|JaxWsServiceFactoryBean
operator|)
name|serviceFactory
argument_list|)
expr_stmt|;
block|}
name|BindingInfo
name|bindingInfo
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|BindingFactoryManager
operator|.
name|class
argument_list|)
operator|.
name|getBindingFactory
argument_list|(
name|bindingID
argument_list|)
operator|.
name|createBindingInfo
argument_list|(
name|serviceFactory
operator|.
name|getService
argument_list|()
argument_list|,
name|bindingID
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|serviceFactory
operator|.
name|getService
argument_list|()
decl_stmt|;
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addBinding
argument_list|(
name|bindingInfo
argument_list|)
expr_stmt|;
name|ei
operator|=
operator|new
name|EndpointInfo
argument_list|(
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|transportId
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setName
argument_list|(
name|portName
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setBinding
argument_list|(
name|bindingInfo
argument_list|)
expr_stmt|;
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addEndpoint
argument_list|(
name|ei
argument_list|)
expr_stmt|;
return|return
name|ei
return|;
block|}
specifier|private
name|void
name|configureObject
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|configureObject
argument_list|(
literal|null
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureObject
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|instance
parameter_list|)
block|{
name|Configurer
name|configurer
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|Configurer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|configurer
condition|)
block|{
name|configurer
operator|.
name|configureBean
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PortInfoImpl
name|getPortInfo
parameter_list|(
name|QName
name|portName
parameter_list|)
block|{
comment|// TODO if the portName null ?
return|return
name|portInfos
operator|.
name|get
argument_list|(
name|portName
argument_list|)
return|;
block|}
specifier|private
name|QName
name|getPortTypeName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|serviceEndpointInterface
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|seiClass
init|=
name|serviceEndpointInterface
decl_stmt|;
if|if
condition|(
operator|!
name|serviceEndpointInterface
operator|.
name|isAnnotationPresent
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"SEI_NO_WEBSERVICE_ANNOTATION"
argument_list|,
name|BUNDLE
argument_list|,
name|serviceEndpointInterface
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|serviceEndpointInterface
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|WebService
name|webService
init|=
name|serviceEndpointInterface
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|epi
init|=
name|webService
operator|.
name|endpointInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|epi
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|seiClass
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|epi
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"COULD_NOT_LOAD_CLASS"
argument_list|,
name|BUNDLE
argument_list|,
name|seiClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|seiClass
operator|.
name|isAnnotationPresent
argument_list|(
name|javax
operator|.
name|jws
operator|.
name|WebService
operator|.
name|class
argument_list|)
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"SEI_NO_WEBSERVICE_ANNOTATION"
argument_list|,
name|BUNDLE
argument_list|,
name|seiClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|WebService
name|webService
init|=
name|seiClass
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|webService
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|seiClass
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
name|String
name|tns
init|=
name|webService
operator|.
name|targetNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|tns
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tns
operator|=
name|URIParserUtil
operator|.
name|getNamespace
argument_list|(
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|seiClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Dispatch
argument_list|<
name|T
argument_list|>
name|createDispatch
parameter_list|(
name|QName
name|portName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Mode
name|mode
parameter_list|)
block|{
return|return
name|createDispatch
argument_list|(
name|portName
argument_list|,
name|type
argument_list|,
name|mode
argument_list|,
operator|new
name|WebServiceFeature
index|[]
block|{}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Dispatch
argument_list|<
name|T
argument_list|>
name|createDispatch
parameter_list|(
name|QName
name|portName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
return|return
name|createDispatch
argument_list|(
name|portName
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|mode
argument_list|,
name|features
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Dispatch
argument_list|<
name|T
argument_list|>
name|createDispatch
parameter_list|(
name|QName
name|portName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|JAXBContext
name|context
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
comment|//using this instead of JaxWsClientFactoryBean so that handlers are configured
name|JaxWsProxyFactoryBean
name|clientFac
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
comment|//Initialize Features.
name|configureObject
argument_list|(
name|portName
operator|.
name|toString
argument_list|()
operator|+
literal|".jaxws-client.proxyFactory"
argument_list|,
name|clientFac
argument_list|)
expr_stmt|;
name|AbstractServiceFactoryBean
name|sf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DataBinding
name|db
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|db
operator|=
operator|new
name|JAXBDataBinding
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|=
operator|new
name|SourceDataBinding
argument_list|()
expr_stmt|;
block|}
name|sf
operator|=
name|createDispatchService
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceConstructionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|JaxWsEndpointImpl
name|endpoint
init|=
name|getJaxwsEndpoint
argument_list|(
name|portName
argument_list|,
name|sf
argument_list|,
name|features
argument_list|)
decl_stmt|;
comment|// if the client factory has properties specified, then set those into the endpoint
if|if
condition|(
name|clientFac
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|putAll
argument_list|(
name|clientFac
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add all the client factory features onto the endpoint feature list
name|endpoint
operator|.
name|getFeatures
argument_list|()
operator|.
name|addAll
argument_list|(
name|clientFac
operator|.
name|getFeatures
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the client factory has a bus specified (other than the thread default),
comment|// then use that for the client.  Otherwise use the bus from this service.
name|Bus
name|clientBus
init|=
name|getBus
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientFac
operator|.
name|getBus
argument_list|()
operator|!=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|false
argument_list|)
operator|&&
name|clientFac
operator|.
name|getBus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clientBus
operator|=
name|clientFac
operator|.
name|getBus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
argument_list|<
name|Handler
argument_list|>
name|hc
init|=
name|clientFac
operator|.
name|getHandlers
argument_list|()
decl_stmt|;
comment|//CXF-3956
name|hc
operator|.
name|addAll
argument_list|(
name|handlerResolver
operator|.
name|getHandlerChain
argument_list|(
name|portInfos
operator|.
name|get
argument_list|(
name|portName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getJaxwsBinding
argument_list|()
operator|.
name|setHandlerChain
argument_list|(
name|hc
argument_list|)
expr_stmt|;
comment|// create the client object, then initialize the endpoint features against it
name|Client
name|client
init|=
operator|new
name|ClientImpl
argument_list|(
name|clientBus
argument_list|,
name|endpoint
argument_list|,
name|clientFac
operator|.
name|getConduitSelector
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AbstractFeature
name|af
range|:
name|endpoint
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|af
operator|.
name|initialize
argument_list|(
name|client
argument_list|,
name|clientBus
argument_list|)
expr_stmt|;
block|}
comment|//CXF-2822
name|initIntercepors
argument_list|(
name|client
argument_list|,
name|clientFac
argument_list|)
expr_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
comment|// if the client factory has an address specified, use that, if not
comment|// then try to get it from the wsdl
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|clientFac
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setAddress
argument_list|(
name|clientFac
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Set the the EPR's address in EndpointInfo
name|PortInfoImpl
name|portInfo
init|=
name|portInfos
operator|.
name|get
argument_list|(
name|portName
argument_list|)
decl_stmt|;
if|if
condition|(
name|portInfo
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|portInfo
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setAddress
argument_list|(
name|portInfo
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Dispatch
argument_list|<
name|T
argument_list|>
name|disp
init|=
operator|new
name|DispatchImpl
argument_list|<
name|T
argument_list|>
argument_list|(
name|client
argument_list|,
name|mode
argument_list|,
name|context
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|configureObject
argument_list|(
name|disp
argument_list|)
expr_stmt|;
return|return
name|disp
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Dispatch
argument_list|<
name|T
argument_list|>
name|createDispatch
parameter_list|(
name|EndpointReference
name|endpointReference
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
name|EndpointReferenceType
name|ref
init|=
name|ProviderImpl
operator|.
name|convertToInternal
argument_list|(
name|endpointReference
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|EndpointReferenceUtils
operator|.
name|getPortQName
argument_list|(
name|ref
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|updatePortInfoAddress
argument_list|(
name|portName
argument_list|,
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createDispatch
argument_list|(
name|portName
argument_list|,
name|type
argument_list|,
name|mode
argument_list|,
name|features
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Dispatch
argument_list|<
name|Object
argument_list|>
name|createDispatch
parameter_list|(
name|QName
name|portName
parameter_list|,
name|JAXBContext
name|context
parameter_list|,
name|Mode
name|mode
parameter_list|)
block|{
return|return
name|createDispatch
argument_list|(
name|portName
argument_list|,
name|context
argument_list|,
name|mode
argument_list|,
operator|new
name|WebServiceFeature
index|[]
block|{}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Dispatch
argument_list|<
name|Object
argument_list|>
name|createDispatch
parameter_list|(
name|QName
name|portName
parameter_list|,
name|JAXBContext
name|context
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
return|return
name|createDispatch
argument_list|(
name|portName
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|context
argument_list|,
name|mode
argument_list|,
name|features
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Dispatch
argument_list|<
name|Object
argument_list|>
name|createDispatch
parameter_list|(
name|EndpointReference
name|endpointReference
parameter_list|,
name|JAXBContext
name|context
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
name|EndpointReferenceType
name|ref
init|=
name|ProviderImpl
operator|.
name|convertToInternal
argument_list|(
name|endpointReference
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|EndpointReferenceUtils
operator|.
name|getPortQName
argument_list|(
name|ref
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|updatePortInfoAddress
argument_list|(
name|portName
argument_list|,
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createDispatch
argument_list|(
name|portName
argument_list|,
name|context
argument_list|,
name|mode
argument_list|,
name|features
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPort
parameter_list|(
name|EndpointReference
name|endpointReference
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|serviceEndpointInterface
parameter_list|,
name|WebServiceFeature
modifier|...
name|features
parameter_list|)
block|{
return|return
name|getPort
argument_list|(
name|ProviderImpl
operator|.
name|convertToInternal
argument_list|(
name|endpointReference
argument_list|)
argument_list|,
name|serviceEndpointInterface
argument_list|,
name|features
argument_list|)
return|;
block|}
specifier|private
name|void
name|initIntercepors
parameter_list|(
name|Client
name|client
parameter_list|,
name|AbstractBasicInterceptorProvider
name|clientFact
parameter_list|)
block|{
name|client
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|clientFact
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|clientFact
operator|.
name|getOutInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|clientFact
operator|.
name|getInFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|clientFact
operator|.
name|getOutFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updatePortInfoAddress
parameter_list|(
name|QName
name|portName
parameter_list|,
name|String
name|eprAddress
parameter_list|)
block|{
name|PortInfoImpl
name|portInfo
init|=
name|portInfos
operator|.
name|get
argument_list|(
name|portName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|eprAddress
argument_list|)
operator|&&
name|portInfo
operator|!=
literal|null
condition|)
block|{
name|portInfo
operator|.
name|setAddress
argument_list|(
name|eprAddress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

