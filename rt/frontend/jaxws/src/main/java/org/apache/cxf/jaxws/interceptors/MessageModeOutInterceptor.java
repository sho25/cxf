begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|annotations
operator|.
name|SchemaValidation
operator|.
name|SchemaValidationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap12
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|AbstractSoapInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJOutInterceptor
operator|.
name|SAAJOutEndingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractOutDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceModelUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_class
specifier|public
class|class
name|MessageModeOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
name|MessageModeOutInterceptorInternal
name|internal
decl_stmt|;
name|SAAJOutInterceptor
name|saajOut
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
name|QName
name|bindingName
decl_stmt|;
specifier|public
name|MessageModeOutInterceptor
parameter_list|(
name|SAAJOutInterceptor
name|saajOut
parameter_list|,
name|QName
name|bname
parameter_list|)
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|)
expr_stmt|;
name|this
operator|.
name|saajOut
operator|=
name|saajOut
expr_stmt|;
name|this
operator|.
name|bindingName
operator|=
name|bname
expr_stmt|;
name|internal
operator|=
operator|new
name|MessageModeOutInterceptorInternal
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MessageModeOutInterceptor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
parameter_list|,
name|QName
name|bname
parameter_list|)
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|)
expr_stmt|;
name|type
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|bindingName
operator|=
name|bname
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|checkSchemaValidation
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|bop
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bop
operator|!=
literal|null
operator|&&
operator|!
name|bindingName
operator|.
name|equals
argument_list|(
name|bop
operator|.
name|getBinding
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|saajOut
operator|!=
literal|null
condition|)
block|{
name|doSoap
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DataSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|//datasource stuff, must check if multi-source
name|MessageContentsList
name|list
init|=
operator|(
name|MessageContentsList
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataSource
name|ds
init|=
operator|(
name|DataSource
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|ct
init|=
name|ds
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|ct
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"multipart/related"
argument_list|)
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setExchange
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|ct
argument_list|)
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ds
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|AttachmentDeserializer
name|deser
init|=
operator|new
name|AttachmentDeserializer
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|deser
operator|.
name|initializeAttachments
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|message
operator|.
name|setAttachments
argument_list|(
name|msg
operator|.
name|getAttachments
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|msg
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ct2
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|DataSource
argument_list|()
block|{
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|ct2
return|;
block|}
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|ct2
return|;
block|}
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ct
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
comment|//not XML based, need to stream out directly.  This is a bit tricky as
comment|//we don't want the stax stuff triggering and such
name|OutputStream
name|out
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|ct
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|in
init|=
name|ds
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|CachedOutputStream
argument_list|()
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|XMLStreamWriter
name|writer
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doSoap
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|MessageContentsList
name|list
init|=
operator|(
name|MessageContentsList
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Object
name|o
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|SOAPMessage
condition|)
block|{
name|SOAPMessage
name|soapMessage
init|=
operator|(
name|SOAPMessage
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|soapMessage
operator|.
name|countAttachments
argument_list|()
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"write.attachments"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
name|cxfSoapMessage
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
operator|)
name|message
decl_stmt|;
name|String
name|cxfNamespace
init|=
name|cxfSoapMessage
operator|.
name|getVersion
argument_list|()
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|SOAPHeader
name|soapHeader
init|=
name|soapMessage
operator|.
name|getSOAPHeader
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|soapHeader
operator|==
literal|null
condition|?
literal|null
else|:
name|soapHeader
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|cxfNamespace
operator|!=
literal|null
operator|&&
operator|!
name|namespace
operator|.
name|equals
argument_list|(
name|cxfNamespace
argument_list|)
operator|&&
name|Soap12
operator|.
name|SOAP_NAMESPACE
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|cxfSoapMessage
operator|.
name|setVersion
argument_list|(
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|cxfSoapMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|cxfSoapMessage
operator|.
name|getVersion
argument_list|()
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
try|try
block|{
name|Object
name|enc
init|=
name|soapMessage
operator|.
name|getProperty
argument_list|(
name|SOAPMessage
operator|.
name|CHARACTER_SET_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|enc
operator|instanceof
name|String
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|,
name|enc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
try|try
block|{
name|Object
name|xmlDec
init|=
name|soapMessage
operator|.
name|getProperty
argument_list|(
name|SOAPMessage
operator|.
name|WRITE_XML_DECLARATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlDec
operator|!=
literal|null
condition|)
block|{
name|boolean
name|b
init|=
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|xmlDec
argument_list|)
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|StaxOutInterceptor
operator|.
name|FORCE_START_DOCUMENT
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|internal
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|MessageModeOutInterceptorInternal
extends|extends
name|AbstractSoapInterceptor
block|{
name|MessageModeOutInterceptorInternal
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
name|SAAJOutInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|MessageContentsList
name|list
init|=
operator|(
name|MessageContentsList
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SOAPMessage
name|soapMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|SOAPMessage
condition|)
block|{
name|soapMessage
operator|=
operator|(
name|SOAPMessage
operator|)
name|o
expr_stmt|;
if|if
condition|(
name|soapMessage
operator|.
name|countAttachments
argument_list|()
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"write.attachments"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|MessageFactory
name|factory
init|=
name|saajOut
operator|.
name|getFactory
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|soapMessage
operator|=
name|factory
operator|.
name|createMessage
argument_list|()
expr_stmt|;
name|SOAPPart
name|part
init|=
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Source
condition|)
block|{
name|StaxUtils
operator|.
name|copy
argument_list|(
operator|(
name|Source
operator|)
name|o
argument_list|,
operator|new
name|SAAJStreamWriter
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"Error creating SOAPMessage"
argument_list|,
name|e
argument_list|,
name|message
operator|.
name|getVersion
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"Error creating SOAPMessage"
argument_list|,
name|e
argument_list|,
name|message
operator|.
name|getVersion
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|message
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|message
operator|.
name|containsKey
argument_list|(
name|SAAJOutInterceptor
operator|.
name|ORIGINAL_XML_WRITER
argument_list|)
condition|)
block|{
name|XMLStreamWriter
name|origWriter
init|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SAAJOutInterceptor
operator|.
name|ORIGINAL_XML_WRITER
argument_list|,
name|origWriter
argument_list|)
expr_stmt|;
block|}
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|SAAJStreamWriter
argument_list|(
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
decl_stmt|;
comment|// Replace stax writer with DomStreamWriter
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|bop
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentFragment
name|frag
init|=
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|createDocumentFragment
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|body
init|=
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|soapMessage
argument_list|)
decl_stmt|;
name|Node
name|nd
init|=
name|body
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|removeChild
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|frag
operator|.
name|appendChild
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|nd
operator|=
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|soapMessage
argument_list|)
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
name|boolean
name|client
init|=
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|BindingMessageInfo
name|bmsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|client
operator|&&
name|bop
operator|!=
literal|null
condition|)
block|{
name|bmsg
operator|=
name|bop
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bop
operator|!=
literal|null
operator|&&
name|bop
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bmsg
operator|=
name|bop
operator|.
name|getOutput
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bmsg
operator|!=
literal|null
operator|&&
name|bmsg
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
operator|&&
name|bmsg
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|index
operator|=
name|bmsg
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
expr_stmt|;
block|}
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|frag
argument_list|)
expr_stmt|;
comment|//No need to buffer this as we're already a DOM,
comment|//but only do so if someone hasn't actually configured this
name|Object
name|buffer
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|AbstractOutDatabindingInterceptor
operator|.
name|OUT_BUFFERING
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|AbstractOutDatabindingInterceptor
operator|.
name|OUT_BUFFERING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|bop
operator|!=
literal|null
operator|&&
name|bop
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
name|bop
operator|=
name|bop
operator|.
name|getWrappedOperation
argument_list|()
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|bop
argument_list|)
expr_stmt|;
block|}
comment|// Add a final interceptor to write the message
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|SAAJOutEndingInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkSchemaValidation
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|ServiceUtils
operator|.
name|isSchemaValidationEnabled
argument_list|(
name|SchemaValidationType
operator|.
name|OUT
argument_list|,
name|message
argument_list|)
condition|)
block|{
name|Service
name|service
init|=
name|ServiceModelUtil
operator|.
name|getService
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Schema
name|schema
init|=
name|EndpointReferenceUtils
operator|.
name|getSchema
argument_list|(
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|MessageContentsList
name|list
init|=
operator|(
name|MessageContentsList
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Object
name|o
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SOAPMessage
name|soapMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|SOAPMessage
condition|)
block|{
name|soapMessage
operator|=
operator|(
name|SOAPMessage
operator|)
name|o
expr_stmt|;
try|try
block|{
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|soapMessage
operator|.
name|getSOAPBody
argument_list|()
operator|.
name|getFirstChild
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|newValidator
argument_list|()
operator|.
name|validate
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Source
condition|)
block|{
name|Source
name|source
init|=
operator|(
name|Source
operator|)
name|o
decl_stmt|;
try|try
block|{
name|schema
operator|.
name|newValidator
argument_list|()
operator|.
name|validate
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

