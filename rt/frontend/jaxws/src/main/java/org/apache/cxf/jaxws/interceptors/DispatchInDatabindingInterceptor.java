begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|util
operator|.
name|ByteArrayDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|AttachmentPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MimeHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MimeHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPBody
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|NodeDataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|XMLStreamDataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractInDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AttachmentInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|logical
operator|.
name|DispatchLogicalHandlerInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|soap
operator|.
name|DispatchSOAPHandlerInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|XMLMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceModelUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
specifier|public
class|class
name|DispatchInDatabindingInterceptor
extends|extends
name|AbstractInDatabindingInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DispatchInDatabindingInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Class
name|type
decl_stmt|;
specifier|private
specifier|final
name|Service
operator|.
name|Mode
name|mode
decl_stmt|;
specifier|private
name|MessageFactory
name|soap11Factory
decl_stmt|;
specifier|private
name|MessageFactory
name|soap12Factory
decl_stmt|;
specifier|public
name|DispatchInDatabindingInterceptor
parameter_list|(
name|Class
name|type
parameter_list|,
name|Mode
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|Phase
operator|.
name|READ
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|private
name|MessageFactory
name|getFactory
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
name|getFactory
argument_list|(
name|message
operator|.
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|MessageFactory
name|getFactory
parameter_list|(
name|SoapVersion
name|version
parameter_list|)
throws|throws
name|SOAPException
block|{
if|if
condition|(
name|version
operator|instanceof
name|Soap11
condition|)
block|{
if|if
condition|(
name|soap11Factory
operator|==
literal|null
condition|)
block|{
name|soap11Factory
operator|=
name|MessageFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|soap11Factory
return|;
block|}
if|if
condition|(
name|soap12Factory
operator|==
literal|null
condition|)
block|{
name|soap12Factory
operator|=
name|MessageFactory
operator|.
name|newInstance
argument_list|(
name|SOAPConstants
operator|.
name|SOAP_1_2_PROTOCOL
argument_list|)
expr_stmt|;
block|}
return|return
name|soap12Factory
return|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
if|if
condition|(
name|isGET
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|MessageContentsList
name|params
init|=
operator|new
name|MessageContentsList
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"DispatchInInterceptor skipped in HTTP GET method"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|InputStream
name|is
init|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|msgRead
init|=
literal|false
decl_stmt|;
name|Object
name|obj
init|=
literal|null
decl_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|Service
operator|.
name|Mode
operator|.
name|class
argument_list|,
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|SoapMessage
condition|)
block|{
name|SOAPMessage
name|soapMessage
init|=
name|newSOAPMessage
argument_list|(
name|is
argument_list|,
operator|(
name|SoapMessage
operator|)
name|message
argument_list|)
decl_stmt|;
comment|//workaround bugs in SAAJ
comment|//calling getSOAPBody does wacky things with the InputStream so
comment|//attachements can be lost.  Count them first to make sure they
comment|//are properly sucked in.
name|soapMessage
operator|.
name|countAttachments
argument_list|()
expr_stmt|;
comment|//This seems to be a problem in SAAJ. Envelope might not be initialized
comment|//properly without calling getEnvelope()
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
expr_stmt|;
if|if
condition|(
name|soapMessage
operator|.
name|getSOAPBody
argument_list|()
operator|.
name|hasFault
argument_list|()
condition|)
block|{
name|Endpoint
name|ep
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|abort
argument_list|()
expr_stmt|;
if|if
condition|(
name|ep
operator|.
name|getInFaultObserver
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
name|XMLStreamReader
name|reader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|soapMessage
operator|.
name|getSOAPBody
argument_list|()
operator|.
name|getFault
argument_list|()
argument_list|)
decl_stmt|;
name|reader
operator|.
name|nextTag
argument_list|()
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|ep
operator|.
name|getInFaultObserver
argument_list|()
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|PostDispatchSOAPHandlerInterceptor
name|postSoap
init|=
operator|new
name|PostDispatchSOAPHandlerInterceptor
argument_list|()
decl_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|postSoap
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
name|msgRead
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|XMLMessage
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|obj
operator|=
operator|new
name|ByteArrayDataSource
argument_list|(
name|is
argument_list|,
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//Treat DataSource specially here as it is not valid to call getPayload from
comment|//LogicalHandler for DataSource payload
name|message
operator|.
name|setContent
argument_list|(
name|DataSource
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|new
name|AttachmentInInterceptor
argument_list|()
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
operator|new
name|StaxInInterceptor
argument_list|()
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|DataReader
argument_list|<
name|XMLStreamReader
argument_list|>
name|dataReader
init|=
operator|new
name|XMLStreamDataReader
argument_list|()
decl_stmt|;
name|Class
name|readType
init|=
name|type
decl_stmt|;
if|if
condition|(
operator|!
name|Source
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|readType
operator|=
name|Source
operator|.
name|class
expr_stmt|;
block|}
name|obj
operator|=
name|dataReader
operator|.
name|read
argument_list|(
literal|null
argument_list|,
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
argument_list|,
name|readType
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
name|msgRead
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|msgRead
condition|)
block|{
name|PostDispatchLogicalHandlerInterceptor
name|postLogical
init|=
operator|new
name|PostDispatchLogicalHandlerInterceptor
argument_list|()
decl_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|postLogical
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|message
operator|.
name|removeContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|SOAPMessage
name|newSOAPMessage
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|SoapMessage
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|MimeHeaders
name|headers
init|=
operator|new
name|MimeHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|containsKey
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|heads
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|msg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|heads
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|val
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|headers
operator|.
name|addHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|getFactory
argument_list|(
name|msg
argument_list|)
operator|.
name|createMessage
argument_list|(
name|headers
argument_list|,
name|is
argument_list|)
return|;
block|}
name|void
name|setupBindingOperationInfo
parameter_list|(
name|Exchange
name|exch
parameter_list|,
name|SOAPMessage
name|msg
parameter_list|)
block|{
if|if
condition|(
name|exch
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|//need to know the operation to determine if oneway
name|QName
name|opName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SOAPBody
name|body
init|=
name|msg
operator|.
name|getSOAPBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
name|nd
init|=
name|body
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|nd
operator|instanceof
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
operator|)
condition|)
block|{
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|opName
operator|=
operator|new
name|QName
argument_list|(
name|nd
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|nd
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|opName
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|//ignore and return;
return|return;
block|}
name|BindingOperationInfo
name|bop
init|=
name|ServiceModelUtil
operator|.
name|getOperationForWrapperElement
argument_list|(
name|exch
argument_list|,
name|opName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|bop
operator|==
literal|null
condition|)
block|{
name|bop
operator|=
name|ServiceModelUtil
operator|.
name|getOperation
argument_list|(
name|exch
argument_list|,
name|opName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bop
operator|!=
literal|null
condition|)
block|{
name|exch
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|bop
argument_list|)
expr_stmt|;
name|exch
operator|.
name|put
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|,
name|bop
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bop
operator|.
name|getOutput
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exch
operator|.
name|setOneWay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//This interceptor is invoked after DispatchSOAPHandlerInterceptor, converts SOAPMessage to Source
specifier|private
class|class
name|PostDispatchSOAPHandlerInterceptor
extends|extends
name|AbstractInDatabindingInterceptor
block|{
specifier|public
name|PostDispatchSOAPHandlerInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|USER_PROTOCOL
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|DispatchSOAPHandlerInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Object
name|obj
init|=
literal|null
decl_stmt|;
comment|//Convert SOAPMessage to Source
if|if
condition|(
name|message
operator|instanceof
name|SoapMessage
condition|)
block|{
name|SOAPMessage
name|soapMessage
init|=
name|message
operator|.
name|getContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|removeContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
expr_stmt|;
name|setupBindingOperationInfo
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
name|DataReader
argument_list|<
name|Node
argument_list|>
name|dataReader
init|=
operator|new
name|NodeDataReader
argument_list|()
decl_stmt|;
name|Node
name|n
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|Service
operator|.
name|Mode
operator|.
name|MESSAGE
condition|)
block|{
try|try
block|{
name|n
operator|=
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
expr_stmt|;
comment|//This seems to be a problem in SAAJ. Envelope might not be initialized properly
comment|//without calling getEnvelope()
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
expr_stmt|;
if|if
condition|(
name|soapMessage
operator|.
name|countAttachments
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|getAttachments
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|setAttachments
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Attachment
argument_list|>
argument_list|(
name|soapMessage
operator|.
name|countAttachments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|AttachmentPart
argument_list|>
name|it
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|soapMessage
operator|.
name|getAttachments
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AttachmentPart
name|part
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|AttachmentImpl
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|part
operator|.
name|getContentId
argument_list|()
argument_list|)
decl_stmt|;
name|att
operator|.
name|setDataHandler
argument_list|(
name|part
operator|.
name|getDataHandler
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|MimeHeader
argument_list|>
name|it2
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|part
operator|.
name|getAllMimeHeaders
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MimeHeader
name|header
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|att
operator|.
name|setHeader
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|getAttachments
argument_list|()
operator|.
name|add
argument_list|(
name|att
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Service
operator|.
name|Mode
operator|.
name|PAYLOAD
condition|)
block|{
try|try
block|{
name|n
operator|=
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|soapMessage
operator|.
name|getSOAPBody
argument_list|()
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|Class
name|tempType
init|=
name|type
decl_stmt|;
if|if
condition|(
operator|!
name|Source
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|tempType
operator|=
name|Source
operator|.
name|class
expr_stmt|;
block|}
name|obj
operator|=
name|dataReader
operator|.
name|read
argument_list|(
literal|null
argument_list|,
name|n
argument_list|,
name|tempType
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//This interceptor is invoked after DispatchLogicalHandlerInterceptor, converts Source to object
specifier|private
class|class
name|PostDispatchLogicalHandlerInterceptor
extends|extends
name|AbstractInDatabindingInterceptor
block|{
specifier|public
name|PostDispatchLogicalHandlerInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|USER_LOGICAL
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|DispatchLogicalHandlerInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Object
name|obj
init|=
literal|null
decl_stmt|;
comment|//Convert Source to object
if|if
condition|(
name|message
operator|instanceof
name|SoapMessage
condition|)
block|{
name|Source
name|source
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|removeContent
argument_list|(
name|Source
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|SOAPMessage
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
try|try
block|{
name|MessageFactory
name|msgFactory
init|=
name|getFactory
argument_list|(
operator|(
name|SoapMessage
operator|)
name|message
argument_list|)
decl_stmt|;
name|SOAPMessage
name|msg
init|=
name|msgFactory
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|setContent
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getAttachments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Attachment
name|att
range|:
name|message
operator|.
name|getAttachments
argument_list|()
control|)
block|{
name|AttachmentPart
name|part
init|=
name|msg
operator|.
name|createAttachmentPart
argument_list|(
name|att
operator|.
name|getDataHandler
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|att
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setContentId
argument_list|(
name|att
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|att
operator|.
name|getHeaderNames
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|s
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|part
operator|.
name|setMimeHeader
argument_list|(
name|s
argument_list|,
name|att
operator|.
name|getHeader
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|addAttachmentPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|obj
operator|=
name|msg
expr_stmt|;
name|setupBindingOperationInfo
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Source
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|obj
operator|=
name|source
expr_stmt|;
block|}
else|else
block|{
comment|//JAXB
try|try
block|{
name|obj
operator|=
name|convertSourceToJaxb
argument_list|(
name|source
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|XMLMessage
condition|)
block|{
name|Source
name|source
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|removeContent
argument_list|(
name|Source
operator|.
name|class
argument_list|)
expr_stmt|;
name|DataSource
name|dataSource
init|=
name|message
operator|.
name|getContent
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|removeContent
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Source
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|obj
operator|=
operator|(
name|Source
operator|)
name|source
expr_stmt|;
block|}
else|else
block|{
comment|//jaxb
try|try
block|{
name|obj
operator|=
name|convertSourceToJaxb
argument_list|(
name|source
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|dataSource
operator|!=
literal|null
operator|&&
name|DataSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|obj
operator|=
operator|(
name|DataSource
operator|)
name|dataSource
expr_stmt|;
block|}
block|}
name|message
operator|.
name|setContent
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|convertSourceToJaxb
parameter_list|(
name|Source
name|source
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|CachedOutputStream
name|cos
init|=
operator|new
name|CachedOutputStream
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|XMLUtils
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|cos
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|encoding
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
name|XMLStreamReader
name|reader
init|=
literal|null
decl_stmt|;
name|reader
operator|=
name|StaxUtils
operator|.
name|getXMLInputFactory
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
name|cos
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|DataReader
argument_list|<
name|XMLStreamReader
argument_list|>
name|dataReader
init|=
name|getDataReader
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|dataReader
operator|.
name|setProperty
argument_list|(
name|JAXBDataBinding
operator|.
name|UNWRAP_JAXB_ELEMENT
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|dataReader
operator|.
name|read
argument_list|(
literal|null
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|cos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|obj
return|;
comment|//not sure why code below does not work
comment|/*                                 DataReader<XMLStreamReader> dataReader1 =              getDataReader(message, XMLStreamReader.class);         XMLStreamReader reader1 =              StaxUtils.getXMLInputFactory().createXMLStreamReader(source);         dataReader.setProperty(JAXBDataBinding.UNWRAP_JAXB_ELEMENT, Boolean.FALSE);         obj = dataReader1.read(null, reader1, null);*/
block|}
block|}
end_class

end_unit

