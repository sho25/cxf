begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|ResourceInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|types
operator|.
name|ParamValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|types
operator|.
name|PortComponentHandlerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceResolver
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
class|class
name|HandlerChainBuilder
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|HandlerChainBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|LOG
operator|.
name|getResourceBundle
argument_list|()
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|boolean
name|handlerInitEnabled
init|=
literal|true
decl_stmt|;
specifier|public
name|HandlerChainBuilder
parameter_list|(
name|Bus
name|aBus
parameter_list|)
block|{
name|bus
operator|=
name|aBus
expr_stmt|;
block|}
specifier|public
name|HandlerChainBuilder
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Handler
argument_list|>
name|buildHandlerChainFromConfiguration
parameter_list|(
name|PortComponentHandlerType
name|hc
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|hc
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|sortHandlers
argument_list|(
name|buildHandlerChain
argument_list|(
name|hc
argument_list|,
name|getHandlerClassLoader
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Handler
argument_list|>
name|buildHandlerChainFromConfiguration
parameter_list|(
name|List
argument_list|<
name|PortComponentHandlerType
argument_list|>
name|hc
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|hc
operator|||
name|hc
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PortComponentHandlerType
name|pt
range|:
name|hc
control|)
block|{
name|handlers
operator|.
name|addAll
argument_list|(
name|buildHandlerChain
argument_list|(
name|pt
argument_list|,
name|getHandlerClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sortHandlers
argument_list|(
name|handlers
argument_list|)
return|;
block|}
comment|// methods used by Geronimo to allow configuring things themselves
specifier|public
name|void
name|setHandlerInitEnabled
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|handlerInitEnabled
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|boolean
name|isHandlerInitEnabled
parameter_list|()
block|{
return|return
name|handlerInitEnabled
return|;
block|}
comment|/**      * sorts the handlers into correct order. All of the logical handlers first      * followed by the protocol handlers      *       * @param handlers      * @return sorted list of handlers      */
specifier|public
name|List
argument_list|<
name|Handler
argument_list|>
name|sortHandlers
parameter_list|(
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
parameter_list|)
block|{
name|List
argument_list|<
name|LogicalHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|logicalHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|LogicalHandler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|protocolHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Handler
argument_list|<
name|?
argument_list|>
name|handler
range|:
name|handlers
control|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|LogicalHandler
condition|)
block|{
name|logicalHandlers
operator|.
name|add
argument_list|(
operator|(
name|LogicalHandler
argument_list|<
name|?
argument_list|>
operator|)
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|protocolHandlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Handler
argument_list|>
name|sortedHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|>
argument_list|()
decl_stmt|;
name|sortedHandlers
operator|.
name|addAll
argument_list|(
name|logicalHandlers
argument_list|)
expr_stmt|;
name|sortedHandlers
operator|.
name|addAll
argument_list|(
name|protocolHandlers
argument_list|)
expr_stmt|;
return|return
name|sortedHandlers
return|;
block|}
specifier|protected
name|ClassLoader
name|getHandlerClassLoader
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Handler
argument_list|>
name|buildHandlerChain
parameter_list|(
name|PortComponentHandlerType
name|ht
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|List
argument_list|<
name|Handler
argument_list|>
name|handlerChain
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"loading handler"
argument_list|,
name|trimString
argument_list|(
name|ht
operator|.
name|getHandlerName
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Handler
argument_list|>
name|handlerClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|trimString
argument_list|(
name|ht
operator|.
name|getHandlerClass
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Handler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Handler
argument_list|<
name|?
argument_list|>
name|handler
init|=
name|handlerClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"adding handler to chain: "
operator|+
name|handler
argument_list|)
expr_stmt|;
name|configureHandler
argument_list|(
name|handler
argument_list|,
name|ht
argument_list|)
expr_stmt|;
name|handlerChain
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|BUNDLE
operator|.
name|getString
argument_list|(
literal|"HANDLER_INSTANTIATION_EXC"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|handlerChain
return|;
block|}
comment|/**      * Resolve handler chain configuration file associated with the given class      *       * @param clz      * @param filename      * @return A URL object or null if no resource with this name is found      */
specifier|protected
name|URL
name|resolveHandlerChainFile
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|URL
name|handlerFile
init|=
name|clz
operator|.
name|getResource
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|handlerFile
operator|==
literal|null
condition|)
block|{
comment|//the file location might be an absolute java.net.URL in externalForm.
try|try
block|{
name|handlerFile
operator|=
operator|new
name|URL
argument_list|(
name|filename
argument_list|)
expr_stmt|;
comment|//test if the URL can be opened
name|handlerFile
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//do nothing
block|}
block|}
return|return
name|handlerFile
return|;
block|}
specifier|private
name|void
name|configureHandler
parameter_list|(
name|Handler
argument_list|<
name|?
argument_list|>
name|handler
parameter_list|,
name|PortComponentHandlerType
name|h
parameter_list|)
block|{
if|if
condition|(
operator|!
name|handlerInitEnabled
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|h
operator|.
name|getInitParam
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ParamValueType
name|param
range|:
name|h
operator|.
name|getInitParam
argument_list|()
control|)
block|{
name|params
operator|.
name|put
argument_list|(
name|trimString
argument_list|(
name|param
operator|.
name|getParamName
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|param
operator|.
name|getParamName
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|trimString
argument_list|(
name|param
operator|.
name|getParamValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|param
operator|.
name|getParamValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Method
name|initMethod
init|=
name|getInitMethod
argument_list|(
name|handler
argument_list|)
decl_stmt|;
if|if
condition|(
name|initMethod
operator|!=
literal|null
condition|)
block|{
name|initializeViaInitMethod
argument_list|(
name|handler
argument_list|,
name|params
argument_list|,
name|initMethod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initializeViaInjection
argument_list|(
name|handler
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeViaInjection
parameter_list|(
name|Handler
argument_list|<
name|?
argument_list|>
name|handler
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|ResourceManager
name|resMgr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceResolver
argument_list|>
name|resolvers
init|=
name|resMgr
operator|.
name|getResourceResolvers
argument_list|()
decl_stmt|;
name|resolvers
operator|.
name|add
argument_list|(
operator|new
name|InitParamResourceResolver
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceInjector
name|resInj
init|=
operator|new
name|ResourceInjector
argument_list|(
name|resMgr
argument_list|,
name|resolvers
argument_list|)
decl_stmt|;
name|resInj
operator|.
name|inject
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|resInj
operator|.
name|construct
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeViaInitMethod
parameter_list|(
name|Handler
argument_list|<
name|?
argument_list|>
name|handler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Method
name|init
parameter_list|)
block|{
try|try
block|{
name|init
operator|.
name|invoke
argument_list|(
name|handler
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|ex
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|ex
operator|.
name|getCause
argument_list|()
else|:
name|ex
decl_stmt|;
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INIT_METHOD_THREW_EXCEPTION"
argument_list|,
name|t
argument_list|,
name|handler
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CANNOT_ACCESS_INIT"
argument_list|,
name|handler
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Method
name|getInitMethod
parameter_list|(
name|Handler
argument_list|<
name|?
argument_list|>
name|handler
parameter_list|)
block|{
name|Method
name|m
init|=
literal|null
decl_stmt|;
try|try
block|{
name|m
operator|=
name|handler
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"init"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
comment|// empty
block|}
return|return
name|m
return|;
block|}
specifier|private
name|String
name|trimString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|!=
literal|null
condition|?
name|str
operator|.
name|trim
argument_list|()
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

