begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Servlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ClassHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactoryAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|ServletConfigAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|servlet
operator|.
name|ModelAndView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|servlet
operator|.
name|handler
operator|.
name|AbstractUrlHandlerMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|servlet
operator|.
name|mvc
operator|.
name|Controller
import|;
end_import

begin_comment
comment|// All tests for this are in systests, since there's no place else to assemble all the necessary dependencies.
end_comment

begin_comment
comment|/**  * Bean to scan context for potential web services. This scans the beans for classes that  * are annotated with @WebService. Excepting those already declared via the JAX-WS Spring  * schema, it launches each as an endpoint.  *  * By default, it sets up a default JaxWsServiceFactory and JAX-B data binding,  * and then creates a URL under /services/ based on the service name. Properties of the bean  * permit you to configure this; if you set prototypeServiceFactoryBeanName, the code  * will fetch that bean. It must be a prototype, since service factory object can't be used  * for more than one endpoint. Similarly, prototypeDataBindingBeanName can be used to  * control the data binding.  *  * Note that this class uses {@link org.apache.cxf.transport.servlet#CXFServlet} from the  * cxf-rt-transports-http-jetty library, which is not part of  * the standard dependencies of the JAX-WS front  * end.  *  * If you use this processor in an environment with no servlet, it will still launch the  * endpoints using the embedded CXF server.  *  */
end_comment

begin_class
specifier|public
class|class
name|JaxWsWebServicePublisherBeanPostProcessor
extends|extends
name|AbstractUrlHandlerMapping
implements|implements
name|BeanPostProcessor
implements|,
name|ServletConfigAware
implements|,
name|BeanFactoryAware
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JaxWsWebServicePublisherBeanPostProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CXF_SERVLET_CLASS_NAME
init|=
literal|"org.apache.cxf.transport.servlet.CXFServlet"
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|servletClass
decl_stmt|;
specifier|private
name|Method
name|servletGetBusMethod
decl_stmt|;
specifier|private
name|String
name|urlPrefix
init|=
literal|"/services/"
decl_stmt|;
specifier|private
name|Servlet
name|shadowCxfServlet
decl_stmt|;
specifier|private
name|String
name|prototypeDataBindingBeanName
decl_stmt|;
specifier|private
name|String
name|prototypeServerFactoryBeanName
decl_stmt|;
specifier|private
name|BeanFactory
name|beanFactory
decl_stmt|;
comment|// for testing
specifier|private
name|boolean
name|customizedServerFactory
decl_stmt|;
specifier|private
name|boolean
name|customizedDataBinding
decl_stmt|;
specifier|public
name|JaxWsWebServicePublisherBeanPostProcessor
parameter_list|()
throws|throws
name|SecurityException
throws|,
name|NoSuchMethodException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|servletClass
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|CXF_SERVLET_CLASS_NAME
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"SERVLET_CLASS_MISSING"
argument_list|,
name|LOG
argument_list|,
name|CXF_SERVLET_CLASS_NAME
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|servletGetBusMethod
operator|=
name|servletClass
operator|.
name|getMethod
argument_list|(
literal|"getBus"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Bus
name|getServletBus
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|shadowCxfServlet
operator|==
literal|null
condition|)
block|{
comment|// no servlet going on. Just launch.
return|return
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|true
argument_list|)
return|;
block|}
return|return
operator|(
name|Bus
operator|)
name|servletGetBusMethod
operator|.
name|invoke
argument_list|(
name|shadowCxfServlet
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// CXF internally inconsistent?
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Set the prefix for the generated endpoint URLs.      * @param urlPrefix      */
specifier|public
name|void
name|setUrlPrefix
parameter_list|(
name|String
name|urlPrefix
parameter_list|)
block|{
name|this
operator|.
name|urlPrefix
operator|=
name|urlPrefix
expr_stmt|;
block|}
specifier|public
name|Object
name|postProcessBeforeInitialization
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
throws|throws
name|BeansException
block|{
return|return
name|bean
return|;
block|}
specifier|public
name|Object
name|postProcessAfterInitialization
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
throws|throws
name|BeansException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|getServletBus
argument_list|()
argument_list|,
name|bean
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
condition|)
block|{
name|WebService
name|ws
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|urlPrefix
operator|+
name|ws
operator|.
name|serviceName
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"SELECTED_SERVICE"
argument_list|,
name|LOG
argument_list|,
name|beanName
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|createAndPublishEndpoint
argument_list|(
name|url
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|registerHandler
argument_list|(
name|url
argument_list|,
operator|new
name|ServletAdapter
argument_list|(
name|shadowCxfServlet
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"REJECTED_NO_ANNOTATION"
argument_list|,
name|LOG
argument_list|,
name|beanName
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bean
return|;
block|}
specifier|private
name|void
name|createAndPublishEndpoint
parameter_list|(
name|String
name|url
parameter_list|,
name|Object
name|implementor
parameter_list|)
block|{
name|ServerFactoryBean
name|serverFactory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prototypeServerFactoryBeanName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|beanFactory
operator|.
name|isPrototype
argument_list|(
name|prototypeServerFactoryBeanName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"prototypeServerFactoryBeanName must indicate a scope='prototype' bean"
argument_list|)
throw|;
block|}
name|serverFactory
operator|=
name|beanFactory
operator|.
name|getBean
argument_list|(
name|prototypeServerFactoryBeanName
argument_list|,
name|ServerFactoryBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|customizedServerFactory
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|serverFactory
operator|=
operator|new
name|JaxWsServerFactoryBean
argument_list|()
expr_stmt|;
block|}
name|serverFactory
operator|.
name|setServiceBean
argument_list|(
name|implementor
argument_list|)
expr_stmt|;
name|serverFactory
operator|.
name|setServiceClass
argument_list|(
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|implementor
argument_list|)
argument_list|)
expr_stmt|;
name|serverFactory
operator|.
name|setAddress
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|DataBinding
name|dataBinding
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prototypeDataBindingBeanName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|beanFactory
operator|.
name|isPrototype
argument_list|(
name|prototypeDataBindingBeanName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"prototypeDataBindingBeanName must indicate a scope='prototype' bean"
argument_list|)
throw|;
block|}
name|customizedDataBinding
operator|=
literal|true
expr_stmt|;
name|dataBinding
operator|=
name|beanFactory
operator|.
name|getBean
argument_list|(
name|prototypeDataBindingBeanName
argument_list|,
name|DataBinding
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataBinding
operator|=
operator|new
name|JAXBDataBinding
argument_list|()
expr_stmt|;
block|}
name|serverFactory
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
name|serverFactory
operator|.
name|setBus
argument_list|(
name|getServletBus
argument_list|()
argument_list|)
expr_stmt|;
name|serverFactory
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setServletConfig
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|)
block|{
try|try
block|{
name|shadowCxfServlet
operator|=
operator|(
name|Servlet
operator|)
name|servletClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|shadowCxfServlet
operator|.
name|init
argument_list|(
name|servletConfig
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ServletAdapter
implements|implements
name|Controller
block|{
specifier|private
name|Servlet
name|controller
decl_stmt|;
specifier|public
name|ServletAdapter
parameter_list|(
name|Servlet
name|controller
parameter_list|)
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
block|}
specifier|public
name|ModelAndView
name|handleRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|controller
operator|.
name|service
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setBeanFactory
parameter_list|(
name|BeanFactory
name|beanFactory
parameter_list|)
throws|throws
name|BeansException
block|{
name|this
operator|.
name|beanFactory
operator|=
name|beanFactory
expr_stmt|;
block|}
specifier|public
name|String
name|getPrototypeServerFactoryBeanName
parameter_list|()
block|{
return|return
name|prototypeServerFactoryBeanName
return|;
block|}
comment|/**      * Set the server factory for all services launched by this bean. This must be the name of a      * scope='prototype' bean that implements      * {@link org.apache.cxf.frontend#ServerFactoryBean}.      * @param prototypeServerFactoryBeanName      */
specifier|public
name|void
name|setPrototypeServerFactoryBeanName
parameter_list|(
name|String
name|prototypeServerFactoryBeanName
parameter_list|)
block|{
name|this
operator|.
name|prototypeServerFactoryBeanName
operator|=
name|prototypeServerFactoryBeanName
expr_stmt|;
block|}
specifier|public
name|String
name|getPrototypeDataBindingBeanName
parameter_list|()
block|{
return|return
name|prototypeDataBindingBeanName
return|;
block|}
comment|/**      * Set the data binding for all services launched by this bean. This must be the name of a      * scope='prototype' bean that implements {@link org.apache.cxf.databinding#DataBinding}.      * @param prototypeDataBindingBeanName      */
specifier|public
name|void
name|setPrototypeDataBindingBeanName
parameter_list|(
name|String
name|prototypeDataBindingBeanName
parameter_list|)
block|{
name|this
operator|.
name|prototypeDataBindingBeanName
operator|=
name|prototypeDataBindingBeanName
expr_stmt|;
block|}
comment|/**      * For Unit Test.      * @return      */
specifier|public
name|boolean
name|isCustomizedServerFactory
parameter_list|()
block|{
return|return
name|customizedServerFactory
return|;
block|}
comment|/**      * For Unit Test.      * @return      */
specifier|public
name|boolean
name|isCustomizedDataBinding
parameter_list|()
block|{
return|return
name|customizedDataBinding
return|;
block|}
block|}
end_class

end_unit

