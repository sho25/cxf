begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|EndpointUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|EndpointUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|EndpointUtils
parameter_list|()
block|{
comment|// Utility class - never constructed
block|}
specifier|public
specifier|static
name|boolean
name|hasWebServiceAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|null
operator|!=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|inf
range|:
name|cls
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|inf
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|hasWebServiceAnnotation
argument_list|(
name|cls
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasWebServiceProviderAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|null
operator|!=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|WebServiceProvider
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|inf
range|:
name|cls
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|inf
operator|.
name|getAnnotation
argument_list|(
name|WebServiceProvider
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|hasWebServiceProviderAnnotation
argument_list|(
name|cls
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isValidImplementor
parameter_list|(
name|Object
name|implementor
parameter_list|)
block|{
return|return
name|isValidImplementor
argument_list|(
name|implementor
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isValidImplementor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implementorClass
parameter_list|)
block|{
if|if
condition|(
name|Provider
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|implementorClass
argument_list|)
operator|&&
name|hasWebServiceProviderAnnotation
argument_list|(
name|implementorClass
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// implementor MUST be an instance of a class with a WebService
comment|// annotation
comment|// (that implements an SEI) OR a Provider
if|if
condition|(
name|hasWebServiceAnnotation
argument_list|(
name|implementorClass
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Implementor is not annotated with WebService annotation."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

