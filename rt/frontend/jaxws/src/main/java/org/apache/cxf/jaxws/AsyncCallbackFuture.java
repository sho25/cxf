begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|AsyncCallbackFuture
implements|implements
name|Runnable
implements|,
name|Future
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AsyncCallbackFuture
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Response
name|response
decl_stmt|;
specifier|private
specifier|final
name|AsyncHandler
name|callback
decl_stmt|;
specifier|private
name|boolean
name|done
decl_stmt|;
specifier|public
name|AsyncCallbackFuture
parameter_list|(
name|Response
name|r
parameter_list|,
name|AsyncHandler
name|c
parameter_list|)
block|{
name|response
operator|=
name|r
expr_stmt|;
name|callback
operator|=
name|c
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|callback
operator|.
name|handleResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|interrupt
parameter_list|)
block|{
return|return
name|response
operator|.
name|cancel
argument_list|(
name|interrupt
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|response
operator|.
name|isCancelled
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|waitForCallbackExecutionToFinish
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|long
name|ms
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|waitForCallbackExecutionToFinish
argument_list|(
name|ms
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|waitForCallbackExecutionToFinish
parameter_list|()
block|{
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"waiting for callback to finish execution."
argument_list|)
expr_stmt|;
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// deliberately ignore
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|waitForCallbackExecutionToFinish
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|TimeoutException
block|{
while|while
condition|(
operator|!
name|done
operator|&&
name|millis
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"waiting (max "
operator|+
name|millis
operator|+
literal|" milliseconds for callback to finish execution (max ."
argument_list|)
expr_stmt|;
block|}
name|long
name|startedAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|wait
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// deliberately ignore
name|millis
operator|-=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startedAt
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"ASYNC_HANDLER_TIMEDOUT_EXC"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

