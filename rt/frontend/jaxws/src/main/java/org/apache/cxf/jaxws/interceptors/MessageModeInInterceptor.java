begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|LoadingByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamReader
import|;
end_import

begin_class
specifier|public
class|class
name|MessageModeInInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
name|QName
name|bindingName
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|soapMsgClass
decl_stmt|;
specifier|public
name|MessageModeInInterceptor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|QName
name|bName
parameter_list|)
block|{
name|super
argument_list|(
name|Phase
operator|.
name|POST_LOGICAL
argument_list|)
expr_stmt|;
name|bindingName
operator|=
name|bName
expr_stmt|;
name|type
operator|=
name|c
expr_stmt|;
try|try
block|{
name|soapMsgClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"javax.xml.soap.SOAPMessage"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|soapMsgClass
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|BindingOperationInfo
name|bop
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bop
operator|==
literal|null
operator|||
operator|!
name|bindingName
operator|.
name|equals
argument_list|(
name|bop
operator|.
name|getBinding
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Object
name|o
init|=
name|message
operator|.
name|getContent
argument_list|(
name|soapMsgClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|doFromSoapMessage
argument_list|(
name|message
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DataSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|doDataSource
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doDataSource
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
name|MessageContentsList
name|list
init|=
operator|(
name|MessageContentsList
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//reconstitute all the parts into a Mime data source
if|if
condition|(
name|message
operator|.
name|getAttachments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|getAttachments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|list
operator|!=
literal|null
operator|&&
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
operator|&&
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|DataSource
condition|)
block|{
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|MultiPartDataSource
argument_list|(
name|message
argument_list|,
operator|(
name|DataSource
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doFromSoapMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|Object
name|sm
parameter_list|)
block|{
name|SOAPMessage
name|m
init|=
operator|(
name|SOAPMessage
operator|)
name|sm
decl_stmt|;
name|MessageContentsList
name|list
init|=
operator|(
name|MessageContentsList
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|MessageContentsList
argument_list|()
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|Object
name|o
init|=
name|m
decl_stmt|;
if|if
condition|(
name|StreamSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
try|try
block|{
try|try
init|(
name|CachedOutputStream
name|out
init|=
operator|new
name|CachedOutputStream
argument_list|()
init|)
block|{
name|XMLStreamWriter
name|xsw
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|m
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
argument_list|,
name|xsw
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|close
argument_list|()
expr_stmt|;
name|o
operator|=
operator|new
name|StreamSource
argument_list|(
name|out
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|SAXSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|o
operator|=
operator|new
name|StaxSource
argument_list|(
operator|new
name|W3CDOMStreamReader
argument_list|(
name|m
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Source
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|o
operator|=
operator|new
name|DOMSource
argument_list|(
name|m
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MultiPartDataSource
implements|implements
name|DataSource
block|{
specifier|final
name|Iterator
argument_list|<
name|Attachment
argument_list|>
name|atts
decl_stmt|;
specifier|final
name|String
name|contentType
decl_stmt|;
specifier|final
name|String
name|boundary
decl_stmt|;
specifier|final
name|String
name|start
decl_stmt|;
specifier|final
name|LoadingByteArrayOutputStream
name|bout
init|=
operator|new
name|LoadingByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Writer
name|writer
decl_stmt|;
name|DataSource
name|rootPart
decl_stmt|;
name|InputStream
name|current
decl_stmt|;
name|boolean
name|writingHeaders
decl_stmt|;
name|Attachment
name|att
decl_stmt|;
specifier|public
name|MultiPartDataSource
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataSource
name|root
parameter_list|)
block|{
name|atts
operator|=
name|message
operator|.
name|getAttachments
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|boundary
operator|=
name|findBoundary
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|start
operator|=
name|findStart
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|contains
argument_list|(
name|boundary
argument_list|)
condition|)
block|{
name|s
operator|+=
literal|"; boundary=\""
operator|+
name|boundary
operator|+
literal|"\""
expr_stmt|;
block|}
name|contentType
operator|=
name|s
expr_stmt|;
name|rootPart
operator|=
name|root
expr_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|bout
argument_list|,
literal|"ASCII"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"Content-Type: "
argument_list|)
operator|.
name|append
argument_list|(
name|contentType
argument_list|)
operator|.
name|append
argument_list|(
literal|"\r\n\r\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|current
operator|=
name|bout
operator|.
name|createInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//nothing
block|}
block|}
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
return|;
block|}
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|InputStream
argument_list|()
block|{
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|current
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
name|nextCurrent
argument_list|()
expr_stmt|;
name|i
operator|=
name|current
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|nextCurrent
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rootPart
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|writingHeaders
condition|)
block|{
name|writingHeaders
operator|=
literal|false
expr_stmt|;
name|current
operator|=
name|rootPart
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|rootPart
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|writingHeaders
operator|=
literal|true
expr_stmt|;
name|bout
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"--"
argument_list|)
operator|.
name|append
argument_list|(
name|boundary
argument_list|)
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"Content-Type: "
argument_list|)
operator|.
name|append
argument_list|(
name|rootPart
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"Content-ID:<"
argument_list|)
operator|.
name|append
argument_list|(
name|start
argument_list|)
operator|.
name|append
argument_list|(
literal|">\r\n\r\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|current
operator|=
name|bout
operator|.
name|createInputStream
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|writingHeaders
condition|)
block|{
name|writingHeaders
operator|=
literal|false
expr_stmt|;
name|current
operator|=
name|att
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|att
operator|=
name|atts
operator|.
name|next
argument_list|()
expr_stmt|;
name|writingHeaders
operator|=
literal|true
expr_stmt|;
name|bout
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"--"
argument_list|)
operator|.
name|append
argument_list|(
name|boundary
argument_list|)
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|heads
init|=
name|att
operator|.
name|getHeaderNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|heads
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|s
init|=
name|heads
operator|.
name|next
argument_list|()
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|att
operator|.
name|getHeader
argument_list|(
name|s
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|current
operator|=
name|bout
operator|.
name|createInputStream
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|findStart
parameter_list|(
name|String
name|ct
parameter_list|)
block|{
name|int
name|idx
init|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|"start="
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|"root"
return|;
block|}
name|ct
operator|=
name|ct
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|ct
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'"'
condition|)
block|{
name|ct
operator|=
name|ct
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
return|return
name|ct
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
name|idx
operator|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|ct
return|;
block|}
return|return
name|ct
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
specifier|private
name|String
name|findBoundary
parameter_list|(
name|String
name|ct
parameter_list|)
block|{
name|int
name|idx
init|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|"boundary="
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|AttachmentUtil
operator|.
name|getUniqueBoundaryValue
argument_list|()
return|;
block|}
name|ct
operator|=
name|ct
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|9
argument_list|)
expr_stmt|;
if|if
condition|(
name|ct
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'"'
condition|)
block|{
name|ct
operator|=
name|ct
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
return|return
name|ct
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
name|idx
operator|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|ct
return|;
block|}
return|return
name|ct
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

