begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|Oneway
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebParam
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|ParameterStyle
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Style
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|RequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ResponseWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ServiceConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|service
operator|.
name|factory
operator|.
name|AbstractServiceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|service
operator|.
name|factory
operator|.
name|ReflectionServiceFactoryBean
import|;
end_import

begin_class
specifier|public
class|class
name|JaxWsServiceConfiguration
extends|extends
name|AbstractServiceConfiguration
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JaxWsServiceConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|JaxWsImplementorInfo
name|implInfo
decl_stmt|;
comment|/**      * We retrieve the wrapper methods more than once      * while creating an endpoint. So caching the wrapper      * classes saves CPU time.      *      * It would also be good to cache across creations,      * but Method.equals isn't good enough.      */
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|responseMethodClassCache
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|requestMethodClassCache
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Method
argument_list|>
name|responseMethodClassNotFoundCache
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Method
argument_list|>
name|requestMethodClassNotFoundCache
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Method
argument_list|,
name|Annotation
index|[]
index|[]
argument_list|>
name|methodAnnotationCache
decl_stmt|;
specifier|public
name|JaxWsServiceConfiguration
parameter_list|()
block|{
name|responseMethodClassCache
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|requestMethodClassCache
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|responseMethodClassNotFoundCache
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|requestMethodClassNotFoundCache
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|methodAnnotationCache
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setServiceFactory
parameter_list|(
name|ReflectionServiceFactoryBean
name|serviceFactory
parameter_list|)
block|{
name|super
operator|.
name|setServiceFactory
argument_list|(
name|serviceFactory
argument_list|)
expr_stmt|;
name|implInfo
operator|=
operator|(
operator|(
name|JaxWsServiceFactoryBean
operator|)
name|serviceFactory
operator|)
operator|.
name|getJaxWsImplementorInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getServiceName
parameter_list|()
block|{
name|QName
name|service
init|=
name|implInfo
operator|.
name|getServiceName
argument_list|()
decl_stmt|;
return|return
name|service
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getServiceNamespace
parameter_list|()
block|{
name|String
name|ret
init|=
name|super
operator|.
name|getServiceNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
name|QName
name|service
init|=
name|implInfo
operator|.
name|getServiceName
argument_list|()
decl_stmt|;
return|return
name|service
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getEndpointName
parameter_list|()
block|{
return|return
name|implInfo
operator|.
name|getEndpointName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getInterfaceName
parameter_list|()
block|{
return|return
name|implInfo
operator|.
name|getInterfaceName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getWsdlURL
parameter_list|()
block|{
name|String
name|wsdlLocation
init|=
name|implInfo
operator|.
name|getWsdlLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|wsdlLocation
operator|!=
literal|null
operator|&&
name|wsdlLocation
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|wsdlLocation
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getOperationName
parameter_list|(
name|InterfaceInfo
name|intf
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|WebMethod
name|wm
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wm
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|wm
operator|.
name|operationName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|method
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|intf
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|intf
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Boolean
name|isWebMethod
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|==
literal|null
operator|||
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|Future
operator|.
name|class
argument_list|)
operator|||
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|Response
operator|.
name|class
argument_list|)
operator|||
name|method
operator|.
name|isSynthetic
argument_list|()
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
name|WebMethod
name|wm
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|method
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|wm
operator|!=
literal|null
operator|)
operator|&&
name|wm
operator|.
name|exclude
argument_list|()
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
if|if
condition|(
operator|(
name|wm
operator|!=
literal|null
operator|&&
operator|!
name|wm
operator|.
name|exclude
argument_list|()
operator|)
operator|||
operator|(
name|implInfo
operator|.
name|getSEIClass
argument_list|()
operator|!=
literal|null
operator|&&
name|cls
operator|.
name|isInterface
argument_list|()
operator|&&
name|cls
operator|.
name|isAssignableFrom
argument_list|(
name|implInfo
operator|.
name|getSEIClass
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
if|if
condition|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
name|hasWebServiceAnnotation
argument_list|(
name|method
argument_list|)
return|;
block|}
if|if
condition|(
name|implInfo
operator|.
name|getSEIClass
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|hasWebServiceAnnotation
argument_list|(
name|method
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
return|return
name|implInfo
operator|.
name|getSEIClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isOperation
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|Object
operator|.
name|class
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|==
name|implInfo
operator|.
name|getSEIClass
argument_list|()
condition|)
block|{
name|WebMethod
name|wm
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wm
operator|!=
literal|null
operator|&&
name|wm
operator|.
name|exclude
argument_list|()
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"WEBMETHOD_EXCLUDE_NOT_ALLOWED"
argument_list|,
name|LOG
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|JaxWsConfigurationException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|implClz
init|=
name|implInfo
operator|.
name|getImplementorClass
argument_list|()
decl_stmt|;
name|Method
name|m
init|=
name|getDeclaredMethod
argument_list|(
name|implClz
argument_list|,
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|WebMethod
name|wm
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wm
operator|!=
literal|null
operator|&&
name|wm
operator|.
name|exclude
argument_list|()
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
if|if
condition|(
name|isWebMethod
argument_list|(
name|m
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|isWebMethod
argument_list|(
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasWebServiceAnnotation
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
name|Method
name|getDeclaredMethod
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
name|getDeclaredMethod
argument_list|(
name|implInfo
operator|.
name|getEndpointClass
argument_list|()
argument_list|,
name|method
argument_list|)
return|;
block|}
specifier|private
name|Method
name|getDeclaredMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|endpointClass
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|equals
argument_list|(
name|endpointClass
argument_list|)
condition|)
block|{
try|try
block|{
name|method
operator|=
name|endpointClass
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
name|isWebMethod
argument_list|(
name|method
argument_list|)
condition|?
name|method
else|:
literal|null
return|;
block|}
block|}
return|return
name|method
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getInPartName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|paramNumber
parameter_list|)
block|{
if|if
condition|(
name|paramNumber
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|,
name|op
operator|.
name|getInput
argument_list|()
argument_list|,
literal|"arg"
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getInParameterName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|paramNumber
parameter_list|)
block|{
if|if
condition|(
name|paramNumber
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|,
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|"arg"
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|QName
name|getPartName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|paramNumber
parameter_list|,
name|MessageInfo
name|mi
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|isIn
parameter_list|)
block|{
name|int
name|partIndex
init|=
name|getPartIndex
argument_list|(
name|method
argument_list|,
name|paramNumber
argument_list|,
name|isIn
argument_list|)
decl_stmt|;
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|WebParam
name|param
init|=
name|getWebParam
argument_list|(
name|method
argument_list|,
name|paramNumber
argument_list|)
decl_stmt|;
name|String
name|tns
init|=
name|mi
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|local
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|isRPC
argument_list|(
name|method
argument_list|)
argument_list|)
operator|||
name|isDocumentBare
argument_list|(
name|method
argument_list|)
operator|||
name|param
operator|.
name|header
argument_list|()
condition|)
block|{
name|local
operator|=
name|param
operator|.
name|partName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|local
operator|==
literal|null
operator|||
name|local
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|local
operator|=
name|param
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|local
operator|==
literal|null
operator|||
name|local
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|isRPC
argument_list|(
name|method
argument_list|)
argument_list|)
operator|||
operator|!
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|isWrapped
argument_list|(
name|method
argument_list|)
argument_list|)
condition|)
block|{
name|local
operator|=
name|getDefaultLocalName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|,
name|partIndex
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|local
operator|=
name|getOperationName
argument_list|(
name|op
operator|.
name|getInterface
argument_list|()
argument_list|,
name|method
argument_list|)
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|local
argument_list|)
return|;
block|}
specifier|private
name|int
name|getPartIndex
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|paraNumber
parameter_list|,
name|boolean
name|isIn
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isIn
operator|&&
name|isInParam
argument_list|(
name|method
argument_list|,
name|paraNumber
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paraNumber
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isInParam
argument_list|(
name|method
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|ret
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isIn
operator|&&
name|isOutParam
argument_list|(
name|method
argument_list|,
name|paraNumber
argument_list|)
condition|)
block|{
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|Void
operator|.
name|class
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|Void
operator|.
name|TYPE
condition|)
block|{
name|ret
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paraNumber
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isOutParam
argument_list|(
name|method
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|ret
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|QName
name|getParameterName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|paramNumber
parameter_list|,
name|int
name|curSize
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|input
parameter_list|)
block|{
name|int
name|partIndex
init|=
name|getPartIndex
argument_list|(
name|method
argument_list|,
name|paramNumber
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|WebParam
name|param
init|=
name|getWebParam
argument_list|(
name|method
argument_list|,
name|paramNumber
argument_list|)
decl_stmt|;
name|String
name|tns
init|=
literal|null
decl_stmt|;
name|String
name|local
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|tns
operator|=
name|param
operator|.
name|targetNamespace
argument_list|()
expr_stmt|;
name|local
operator|=
name|param
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tns
operator|==
literal|null
operator|||
name|tns
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|QName
name|wrappername
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|input
condition|)
block|{
name|wrappername
operator|=
name|getRequestWrapperName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wrappername
operator|=
name|getResponseWrapperName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wrappername
operator|!=
literal|null
condition|)
block|{
name|tns
operator|=
name|wrappername
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tns
operator|==
literal|null
operator|||
name|tns
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tns
operator|=
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|local
operator|==
literal|null
operator|||
name|local
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|isRPC
argument_list|(
name|method
argument_list|)
argument_list|)
operator|||
operator|!
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|isWrapped
argument_list|(
name|method
argument_list|)
argument_list|)
condition|)
block|{
name|local
operator|=
name|getDefaultLocalName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|,
name|partIndex
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|local
operator|=
name|getOperationName
argument_list|(
name|op
operator|.
name|getInterface
argument_list|()
argument_list|,
name|method
argument_list|)
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
block|{
name|local
operator|+=
literal|"Response"
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|local
argument_list|)
return|;
block|}
specifier|private
name|String
name|getDefaultLocalName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|paramNumber
parameter_list|,
name|int
name|partIndex
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|String
name|paramName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|paramNumber
operator|!=
operator|-
literal|1
condition|)
block|{
name|paramName
operator|=
name|prefix
operator|+
name|partIndex
expr_stmt|;
block|}
else|else
block|{
name|paramName
operator|=
name|prefix
expr_stmt|;
block|}
return|return
name|paramName
return|;
block|}
specifier|private
name|WebParam
name|getWebParam
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|parameter
parameter_list|)
block|{
comment|// we could really use a centralized location for this.
name|Annotation
index|[]
index|[]
name|annotations
init|=
name|methodAnnotationCache
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotations
operator|==
literal|null
condition|)
block|{
name|annotations
operator|=
name|method
operator|.
name|getParameterAnnotations
argument_list|()
expr_stmt|;
name|methodAnnotationCache
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|annotations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameter
operator|>=
name|annotations
operator|.
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotations
index|[
name|parameter
index|]
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Annotation
name|annotation
init|=
name|annotations
index|[
name|parameter
index|]
index|[
name|i
index|]
decl_stmt|;
comment|// With the ibm jdk, the condition:
comment|// if (annotation.annotationType().equals(WebParam.class)) {
comment|// SOMETIMES returns false even when the annotation type
comment|// is a WebParam.  Doing an instanceof check or using the
comment|// == operator seems to give the desired result.
if|if
condition|(
name|annotation
operator|instanceof
name|WebParam
condition|)
block|{
return|return
operator|(
name|WebParam
operator|)
name|annotation
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRequestWrapperPartName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|RequestWrapper
name|rw
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|RequestWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
return|return
name|getWithReflection
argument_list|(
name|RequestWrapper
operator|.
name|class
argument_list|,
name|rw
argument_list|,
literal|"partName"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getResponseWrapperPartName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|WebResult
name|webResult
init|=
name|getWebResult
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|ResponseWrapper
name|rw
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|ResponseWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|String
name|pn
init|=
name|getWithReflection
argument_list|(
name|ResponseWrapper
operator|.
name|class
argument_list|,
name|rw
argument_list|,
literal|"partName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pn
operator|!=
literal|null
condition|)
block|{
return|return
name|pn
return|;
block|}
block|}
name|int
name|countOut
init|=
literal|0
decl_stmt|;
name|int
name|countHeaders
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|webResult
operator|!=
literal|null
operator|&&
name|webResult
operator|.
name|header
argument_list|()
condition|)
block|{
name|countHeaders
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|Void
operator|.
name|TYPE
condition|)
block|{
name|countOut
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|WebParam
name|parm
init|=
name|getWebParam
argument_list|(
name|method
argument_list|,
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|parm
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parm
operator|.
name|header
argument_list|()
condition|)
block|{
name|countHeaders
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|parm
operator|.
name|mode
argument_list|()
operator|!=
name|WebParam
operator|.
name|Mode
operator|.
name|IN
condition|)
block|{
name|countOut
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|countHeaders
operator|>
literal|0
operator|&&
name|countOut
operator|==
literal|0
condition|)
block|{
comment|//all outs are headers, thus it's an empty body part
comment|//thus return the default for an empty part of "result"
return|return
literal|"result"
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getFaultMessageName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|exClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|)
block|{
name|WebFault
name|f
init|=
name|exClass
operator|.
name|getAnnotation
argument_list|(
name|WebFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
return|return
name|getWithReflection
argument_list|(
name|WebFault
operator|.
name|class
argument_list|,
name|f
argument_list|,
literal|"messageName"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|String
name|getWithReflection
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|,
name|T
name|obj
parameter_list|,
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|String
name|s
init|=
name|cls
operator|.
name|getMethod
argument_list|(
name|name
argument_list|)
operator|.
name|invoke
argument_list|(
name|obj
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore = possibly JAX-WS 2.1
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getOutParameterName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|paramNumber
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramNumber
operator|>=
literal|0
condition|)
block|{
return|return
name|getParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|,
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|"return"
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|WebResult
name|webResult
init|=
name|getWebResult
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|String
name|tns
init|=
literal|null
decl_stmt|;
name|String
name|local
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|webResult
operator|!=
literal|null
condition|)
block|{
name|tns
operator|=
name|webResult
operator|.
name|targetNamespace
argument_list|()
expr_stmt|;
name|local
operator|=
name|webResult
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tns
operator|==
literal|null
operator|||
name|tns
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|QName
name|wrappername
init|=
name|getResponseWrapperName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrappername
operator|!=
literal|null
condition|)
block|{
name|tns
operator|=
name|wrappername
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tns
operator|==
literal|null
operator|||
name|tns
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tns
operator|=
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|local
operator|==
literal|null
operator|||
name|local
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|isRPC
argument_list|(
name|method
argument_list|)
argument_list|)
operator|||
operator|!
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|isWrapped
argument_list|(
name|method
argument_list|)
argument_list|)
condition|)
block|{
name|local
operator|=
name|getDefaultLocalName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|,
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|"return"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|local
operator|=
name|getOperationName
argument_list|(
name|op
operator|.
name|getInterface
argument_list|()
argument_list|,
name|method
argument_list|)
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Response"
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|local
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getOutPartName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|paramNumber
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramNumber
operator|>=
literal|0
condition|)
block|{
return|return
name|getPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|,
name|op
operator|.
name|getOutput
argument_list|()
argument_list|,
literal|"return"
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|WebResult
name|webResult
init|=
name|getWebResult
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|String
name|tns
init|=
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|local
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|webResult
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|isRPC
argument_list|(
name|method
argument_list|)
argument_list|)
operator|||
name|isDocumentBare
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|local
operator|=
name|webResult
operator|.
name|partName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|local
operator|==
literal|null
operator|||
name|local
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|local
operator|=
name|webResult
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|local
operator|==
literal|null
operator|||
name|local
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|isRPC
argument_list|(
name|method
argument_list|)
argument_list|)
operator|||
operator|!
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|isWrapped
argument_list|(
name|method
argument_list|)
argument_list|)
condition|)
block|{
name|local
operator|=
literal|"return"
expr_stmt|;
block|}
else|else
block|{
name|local
operator|=
name|getOperationName
argument_list|(
name|op
operator|.
name|getInterface
argument_list|()
argument_list|,
name|method
argument_list|)
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Response"
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|local
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isInParam
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|j
parameter_list|)
block|{
if|if
condition|(
name|j
operator|<
literal|0
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|WebParam
name|webParam
init|=
name|getWebParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
return|return
name|webParam
operator|==
literal|null
operator|||
operator|(
name|webParam
operator|.
name|mode
argument_list|()
operator|.
name|equals
argument_list|(
name|Mode
operator|.
name|IN
argument_list|)
operator|||
name|webParam
operator|.
name|mode
argument_list|()
operator|.
name|equals
argument_list|(
name|Mode
operator|.
name|INOUT
argument_list|)
operator|)
return|;
block|}
specifier|private
name|WebResult
name|getWebResult
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|getAnnotation
argument_list|(
name|WebResult
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isOutParam
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|!
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|void
operator|.
name|class
argument_list|)
return|;
block|}
name|WebParam
name|webParam
init|=
name|getWebParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|webParam
operator|!=
literal|null
operator|&&
operator|(
name|webParam
operator|.
name|mode
argument_list|()
operator|.
name|equals
argument_list|(
name|Mode
operator|.
name|OUT
argument_list|)
operator|||
name|webParam
operator|.
name|mode
argument_list|()
operator|.
name|equals
argument_list|(
name|Mode
operator|.
name|INOUT
argument_list|)
operator|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
return|return
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|j
index|]
operator|==
name|Holder
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isInOutParam
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|!
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|void
operator|.
name|class
argument_list|)
return|;
block|}
name|WebParam
name|webParam
init|=
name|getWebParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|webParam
operator|!=
literal|null
operator|&&
name|webParam
operator|.
name|mode
argument_list|()
operator|.
name|equals
argument_list|(
name|Mode
operator|.
name|INOUT
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getRequestWrapperName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|Method
name|m
init|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|RequestWrapper
name|rw
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|RequestWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|nm
init|=
literal|null
decl_stmt|;
name|String
name|lp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|nm
operator|=
name|rw
operator|.
name|targetNamespace
argument_list|()
expr_stmt|;
name|lp
operator|=
name|rw
operator|.
name|localName
argument_list|()
expr_stmt|;
block|}
name|WebMethod
name|meth
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|meth
operator|!=
literal|null
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|lp
argument_list|)
condition|)
block|{
name|lp
operator|=
name|meth
operator|.
name|operationName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|nm
argument_list|)
condition|)
block|{
name|nm
operator|=
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|nm
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|lp
argument_list|)
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|nm
argument_list|,
name|lp
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getResponseWrapperName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|Method
name|m
init|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|ResponseWrapper
name|rw
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|ResponseWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|nm
init|=
literal|null
decl_stmt|;
name|String
name|lp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|nm
operator|=
name|rw
operator|.
name|targetNamespace
argument_list|()
expr_stmt|;
name|lp
operator|=
name|rw
operator|.
name|localName
argument_list|()
expr_stmt|;
block|}
name|WebMethod
name|meth
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|meth
operator|!=
literal|null
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|lp
argument_list|)
condition|)
block|{
name|lp
operator|=
name|meth
operator|.
name|operationName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|lp
argument_list|)
condition|)
block|{
name|lp
operator|+=
literal|"Response"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|nm
argument_list|)
condition|)
block|{
name|nm
operator|=
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|nm
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|lp
argument_list|)
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|nm
argument_list|,
name|lp
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getResponseWrapper
parameter_list|(
name|Method
name|selected
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|responseMethodClassNotFoundCache
operator|.
name|contains
argument_list|(
name|selected
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cachedClass
init|=
name|responseMethodClassCache
operator|.
name|get
argument_list|(
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedClass
operator|!=
literal|null
condition|)
block|{
return|return
name|cachedClass
return|;
block|}
name|Method
name|m
init|=
name|getDeclaredMethod
argument_list|(
name|selected
argument_list|)
decl_stmt|;
name|ResponseWrapper
name|rw
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|ResponseWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|clsName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|rw
operator|==
literal|null
condition|)
block|{
name|clsName
operator|=
name|getPackageName
argument_list|(
name|selected
argument_list|)
operator|+
literal|".jaxws."
operator|+
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|selected
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"Response"
expr_stmt|;
block|}
else|else
block|{
name|clsName
operator|=
name|rw
operator|.
name|className
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clsName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cachedClass
operator|=
name|responseMethodClassCache
operator|.
name|get
argument_list|(
name|clsName
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedClass
operator|!=
literal|null
condition|)
block|{
name|responseMethodClassCache
operator|.
name|put
argument_list|(
name|selected
argument_list|,
name|cachedClass
argument_list|)
expr_stmt|;
return|return
name|cachedClass
return|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|r
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|clsName
argument_list|,
name|implInfo
operator|.
name|getEndpointClass
argument_list|()
argument_list|)
decl_stmt|;
name|responseMethodClassCache
operator|.
name|put
argument_list|(
name|clsName
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|responseMethodClassCache
operator|.
name|put
argument_list|(
name|selected
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INVALID_RESPONSE_WRAPPER"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|clsName
block|,
name|m
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|//do nothing, we will mock a schema for wrapper bean later on
block|}
block|}
name|responseMethodClassNotFoundCache
operator|.
name|add
argument_list|(
name|selected
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getResponseWrapperClassName
parameter_list|(
name|Method
name|selected
parameter_list|)
block|{
name|Method
name|m
init|=
name|getDeclaredMethod
argument_list|(
name|selected
argument_list|)
decl_stmt|;
name|ResponseWrapper
name|rw
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|ResponseWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|clsName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|clsName
operator|=
name|rw
operator|.
name|className
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clsName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|clsName
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getRequestWrapperClassName
parameter_list|(
name|Method
name|selected
parameter_list|)
block|{
name|Method
name|m
init|=
name|getDeclaredMethod
argument_list|(
name|selected
argument_list|)
decl_stmt|;
name|RequestWrapper
name|rw
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|RequestWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|clsName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|rw
operator|!=
literal|null
condition|)
block|{
name|clsName
operator|=
name|rw
operator|.
name|className
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clsName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|clsName
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRequestWrapper
parameter_list|(
name|Method
name|selected
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|requestMethodClassNotFoundCache
operator|.
name|contains
argument_list|(
name|selected
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cachedClass
init|=
name|requestMethodClassCache
operator|.
name|get
argument_list|(
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedClass
operator|!=
literal|null
condition|)
block|{
return|return
name|cachedClass
return|;
block|}
name|Method
name|m
init|=
name|getDeclaredMethod
argument_list|(
name|selected
argument_list|)
decl_stmt|;
name|RequestWrapper
name|rw
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|RequestWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|clsName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|rw
operator|==
literal|null
condition|)
block|{
name|clsName
operator|=
name|getPackageName
argument_list|(
name|selected
argument_list|)
operator|+
literal|".jaxws."
operator|+
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|selected
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clsName
operator|=
name|rw
operator|.
name|className
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clsName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cachedClass
operator|=
name|requestMethodClassCache
operator|.
name|get
argument_list|(
name|clsName
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedClass
operator|!=
literal|null
condition|)
block|{
name|requestMethodClassCache
operator|.
name|put
argument_list|(
name|selected
argument_list|,
name|cachedClass
argument_list|)
expr_stmt|;
return|return
name|cachedClass
return|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|r
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|clsName
argument_list|,
name|implInfo
operator|.
name|getEndpointClass
argument_list|()
argument_list|)
decl_stmt|;
name|requestMethodClassCache
operator|.
name|put
argument_list|(
name|clsName
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|requestMethodClassCache
operator|.
name|put
argument_list|(
name|selected
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|r
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INVALID_REQUEST_WRAPPER"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|clsName
block|,
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|//do nothing, we will mock a schema for wrapper bean later on
block|}
block|}
name|requestMethodClassNotFoundCache
operator|.
name|add
argument_list|(
name|selected
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|String
name|getPackageName
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getFaultName
parameter_list|(
name|InterfaceInfo
name|service
parameter_list|,
name|OperationInfo
name|o
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|exClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|)
block|{
name|WebFault
name|fault
init|=
name|exClass
operator|.
name|getAnnotation
argument_list|(
name|WebFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fault
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|fault
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|exClass
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
name|String
name|ns
init|=
name|fault
operator|.
name|targetNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ns
operator|=
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|name
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isWrapped
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
comment|// see if someone overrode the default value
if|if
condition|(
name|getServiceFactory
argument_list|()
operator|.
name|getWrapped
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getServiceFactory
argument_list|()
operator|.
name|getWrapped
argument_list|()
return|;
block|}
name|m
operator|=
name|getDeclaredMethod
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|SOAPBinding
name|ann
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|SOAPBinding
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ann
operator|.
name|style
argument_list|()
operator|.
name|equals
argument_list|(
name|Style
operator|.
name|RPC
argument_list|)
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"SOAPBinding_MESSAGE_RPC"
argument_list|,
name|LOG
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|JaxWsConfigurationException
argument_list|(
name|message
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|!
operator|(
name|ann
operator|.
name|parameterStyle
argument_list|()
operator|.
name|equals
argument_list|(
name|ParameterStyle
operator|.
name|BARE
argument_list|)
operator|)
return|;
block|}
return|return
name|isWrapped
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isWrapped
parameter_list|()
block|{
name|SOAPBinding
name|ann
init|=
name|implInfo
operator|.
name|getEndpointClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|SOAPBinding
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
return|return
operator|!
operator|(
name|ann
operator|.
name|parameterStyle
argument_list|()
operator|.
name|equals
argument_list|(
name|ParameterStyle
operator|.
name|BARE
argument_list|)
operator|||
name|ann
operator|.
name|style
argument_list|()
operator|.
name|equals
argument_list|(
name|Style
operator|.
name|RPC
argument_list|)
operator|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isHeader
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|>=
literal|0
condition|)
block|{
name|WebParam
name|webParam
init|=
name|getWebParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
return|return
name|webParam
operator|!=
literal|null
operator|&&
name|webParam
operator|.
name|header
argument_list|()
return|;
block|}
name|WebResult
name|webResult
init|=
name|getWebResult
argument_list|(
name|method
argument_list|)
decl_stmt|;
return|return
name|webResult
operator|!=
literal|null
operator|&&
name|webResult
operator|.
name|header
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyle
parameter_list|()
block|{
name|SOAPBinding
name|ann
init|=
name|implInfo
operator|.
name|getEndpointClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|SOAPBinding
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
return|return
name|ann
operator|.
name|style
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getStyle
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isDocumentBare
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|SOAPBinding
name|ann
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|SOAPBinding
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
return|return
name|ann
operator|.
name|style
argument_list|()
operator|.
name|equals
argument_list|(
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
argument_list|)
operator|&&
name|ann
operator|.
name|parameterStyle
argument_list|()
operator|.
name|equals
argument_list|(
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|BARE
argument_list|)
return|;
block|}
name|ann
operator|=
name|implInfo
operator|.
name|getEndpointClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|SOAPBinding
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
return|return
name|ann
operator|.
name|style
argument_list|()
operator|.
name|equals
argument_list|(
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
argument_list|)
operator|&&
name|ann
operator|.
name|parameterStyle
argument_list|()
operator|.
name|equals
argument_list|(
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|BARE
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isRPC
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|SOAPBinding
name|ann
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|SOAPBinding
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
return|return
name|ann
operator|.
name|style
argument_list|()
operator|.
name|equals
argument_list|(
name|SOAPBinding
operator|.
name|Style
operator|.
name|RPC
argument_list|)
return|;
block|}
name|ann
operator|=
name|implInfo
operator|.
name|getEndpointClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|SOAPBinding
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
return|return
name|ann
operator|.
name|style
argument_list|()
operator|.
name|equals
argument_list|(
name|SOAPBinding
operator|.
name|Style
operator|.
name|RPC
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|isRPC
argument_list|(
name|method
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|hasOutMessage
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
return|return
operator|!
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|Oneway
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAction
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|method
operator|=
name|getDeclaredMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|WebMethod
name|wm
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|action
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|wm
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|wm
operator|.
name|action
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|Action
name|act
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Action
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|act
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|act
operator|.
name|input
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|action
return|;
block|}
specifier|public
name|Boolean
name|isHolder
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
return|return
name|Holder
operator|.
name|class
operator|.
name|equals
argument_list|(
name|cls
argument_list|)
return|;
block|}
specifier|public
name|Type
name|getHolderType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|Holder
operator|.
name|class
argument_list|)
operator|&&
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|paramType
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
return|return
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
return|return
name|cls
return|;
block|}
specifier|public
name|Boolean
name|isWrapperPartQualified
parameter_list|(
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
name|Annotation
index|[]
name|annotations
init|=
operator|(
name|Annotation
index|[]
operator|)
name|mpi
operator|.
name|getProperty
argument_list|(
literal|"parameter.annotations"
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|an
range|:
name|annotations
control|)
block|{
name|String
name|tns
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|an
operator|instanceof
name|WebParam
condition|)
block|{
name|tns
operator|=
operator|(
operator|(
name|WebParam
operator|)
name|an
operator|)
operator|.
name|targetNamespace
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|an
operator|instanceof
name|WebResult
condition|)
block|{
name|tns
operator|=
operator|(
operator|(
name|WebResult
operator|)
name|an
operator|)
operator|.
name|targetNamespace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tns
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tns
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Long
name|getWrapperPartMinOccurs
parameter_list|(
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
name|Annotation
index|[]
name|a
init|=
operator|(
name|Annotation
index|[]
operator|)
name|mpi
operator|.
name|getProperty
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|PARAM_ANNOTATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|a2
range|:
name|a
control|)
block|{
if|if
condition|(
name|a2
operator|instanceof
name|XmlElement
condition|)
block|{
name|XmlElement
name|e
init|=
operator|(
name|XmlElement
operator|)
name|a2
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|required
argument_list|()
condition|)
block|{
return|return
literal|1L
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

