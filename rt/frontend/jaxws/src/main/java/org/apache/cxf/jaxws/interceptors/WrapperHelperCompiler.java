begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ASMHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|FieldVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|MethodVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_class
specifier|final
class|class
name|WrapperHelperCompiler
extends|extends
name|ASMHelper
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|wrapperType
decl_stmt|;
specifier|final
name|Method
name|setMethods
index|[]
decl_stmt|;
specifier|final
name|Method
name|getMethods
index|[]
decl_stmt|;
specifier|final
name|Method
name|jaxbMethods
index|[]
decl_stmt|;
specifier|final
name|Field
name|fields
index|[]
decl_stmt|;
specifier|final
name|Object
name|objectFactory
decl_stmt|;
specifier|final
name|ClassWriter
name|cw
decl_stmt|;
specifier|private
name|WrapperHelperCompiler
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|wrapperType
parameter_list|,
name|Method
name|setMethods
index|[]
parameter_list|,
name|Method
name|getMethods
index|[]
parameter_list|,
name|Method
name|jaxbMethods
index|[]
parameter_list|,
name|Field
name|fields
index|[]
parameter_list|,
name|Object
name|objectFactory
parameter_list|)
block|{
name|this
operator|.
name|wrapperType
operator|=
name|wrapperType
expr_stmt|;
name|this
operator|.
name|setMethods
operator|=
name|setMethods
expr_stmt|;
name|this
operator|.
name|getMethods
operator|=
name|getMethods
expr_stmt|;
name|this
operator|.
name|jaxbMethods
operator|=
name|jaxbMethods
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|objectFactory
operator|=
name|objectFactory
expr_stmt|;
name|cw
operator|=
name|createClassWriter
argument_list|()
expr_stmt|;
block|}
specifier|static
name|WrapperHelper
name|compileWrapperHelper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|wrapperType
parameter_list|,
name|Method
name|setMethods
index|[]
parameter_list|,
name|Method
name|getMethods
index|[]
parameter_list|,
name|Method
name|jaxbMethods
index|[]
parameter_list|,
name|Field
name|fields
index|[]
parameter_list|,
name|Object
name|objectFactory
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|WrapperHelperCompiler
argument_list|(
name|wrapperType
argument_list|,
name|setMethods
argument_list|,
name|getMethods
argument_list|,
name|jaxbMethods
argument_list|,
name|fields
argument_list|,
name|objectFactory
argument_list|)
operator|.
name|compile
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Some error - probably a bad version of ASM or similar
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|WrapperHelper
name|compile
parameter_list|()
block|{
if|if
condition|(
name|cw
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|count
init|=
literal|1
decl_stmt|;
name|String
name|newClassName
init|=
name|wrapperType
operator|.
name|getName
argument_list|()
operator|+
literal|"_WrapperTypeHelper"
operator|+
name|count
decl_stmt|;
name|newClassName
operator|=
name|newClassName
operator|.
name|replaceAll
argument_list|(
literal|"\\$"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|newClassName
operator|=
name|periodToSlashes
argument_list|(
name|newClassName
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|super
operator|.
name|findClass
argument_list|(
name|newClassName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|wrapperType
argument_list|)
decl_stmt|;
while|while
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|WrapperHelper
name|helper
init|=
name|WrapperHelper
operator|.
name|class
operator|.
name|cast
argument_list|(
name|cls
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|helper
operator|.
name|getSignature
argument_list|()
operator|.
name|equals
argument_list|(
name|computeSignature
argument_list|()
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|newClassName
operator|=
name|wrapperType
operator|.
name|getName
argument_list|()
operator|+
literal|"_WrapperTypeHelper"
operator|+
name|count
expr_stmt|;
name|newClassName
operator|=
name|newClassName
operator|.
name|replaceAll
argument_list|(
literal|"\\$"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|newClassName
operator|=
name|periodToSlashes
argument_list|(
name|newClassName
argument_list|)
expr_stmt|;
name|cls
operator|=
name|super
operator|.
name|findClass
argument_list|(
name|newClassName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|wrapperType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|helper
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|cw
operator|.
name|visit
argument_list|(
name|Opcodes
operator|.
name|V1_5
argument_list|,
name|Opcodes
operator|.
name|ACC_PUBLIC
operator||
name|Opcodes
operator|.
name|ACC_SUPER
argument_list|,
name|newClassName
argument_list|,
literal|null
argument_list|,
name|periodToSlashes
argument_list|(
name|WrapperHelper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
name|newClassName
argument_list|,
name|cw
argument_list|,
name|objectFactory
operator|==
literal|null
condition|?
literal|null
else|:
name|objectFactory
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|b
init|=
name|addSignature
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|addCreateWrapperObject
argument_list|(
name|newClassName
argument_list|,
name|objectFactory
operator|==
literal|null
condition|?
literal|null
else|:
name|objectFactory
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
condition|)
block|{
name|b
operator|=
name|addGetWrapperParts
argument_list|(
name|newClassName
argument_list|,
name|wrapperType
argument_list|,
name|getMethods
argument_list|,
name|fields
argument_list|,
name|cw
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|b
condition|)
block|{
name|cw
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|byte
name|bt
index|[]
init|=
name|cw
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|loadClass
argument_list|(
name|newClassName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|wrapperType
argument_list|,
name|bt
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|WrapperHelper
operator|.
name|class
operator|.
name|cast
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore, we'll just fall down to reflection based
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|computeSignature
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|setMethods
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|setMethods
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|getMethods
index|[
name|x
index|]
operator|==
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"null,"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
name|getMethods
index|[
name|x
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|getMethods
index|[
name|x
index|]
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|addSignature
parameter_list|()
block|{
name|String
name|sig
init|=
name|computeSignature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sig
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MethodVisitor
name|mv
init|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"getSignature"
argument_list|,
literal|"()Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|Label
name|l0
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLdcInsn
argument_list|(
name|sig
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|Label
name|l1
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|void
name|addConstructor
parameter_list|(
name|String
name|newClassName
parameter_list|,
name|ClassWriter
name|cw
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|objectFactory
parameter_list|)
block|{
if|if
condition|(
name|objectFactory
operator|!=
literal|null
condition|)
block|{
name|String
name|ofName
init|=
literal|"L"
operator|+
name|periodToSlashes
argument_list|(
name|objectFactory
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|";"
decl_stmt|;
name|FieldVisitor
name|fv
init|=
name|cw
operator|.
name|visitField
argument_list|(
literal|0
argument_list|,
literal|"factory"
argument_list|,
name|ofName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
block|}
name|MethodVisitor
name|mv
init|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|Label
name|l0
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
name|periodToSlashes
argument_list|(
name|WrapperHelper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectFactory
operator|!=
literal|null
condition|)
block|{
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|NEW
argument_list|,
name|periodToSlashes
argument_list|(
name|objectFactory
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
name|periodToSlashes
argument_list|(
name|objectFactory
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|PUTFIELD
argument_list|,
name|periodToSlashes
argument_list|(
name|newClassName
argument_list|)
argument_list|,
literal|"factory"
argument_list|,
literal|"L"
operator|+
name|periodToSlashes
argument_list|(
name|objectFactory
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|RETURN
argument_list|)
expr_stmt|;
name|Label
name|l1
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|newClassName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|addCreateWrapperObject
parameter_list|(
name|String
name|newClassName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|objectFactoryClass
parameter_list|)
block|{
name|MethodVisitor
name|mv
init|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"createWrapperObject"
argument_list|,
literal|"(Ljava/util/List;)Ljava/lang/Object;"
argument_list|,
literal|"(Ljava/util/List<*>;)Ljava/lang/Object;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"org/apache/cxf/interceptor/Fault"
block|}
argument_list|)
decl_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|Label
name|lBegin
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|lBegin
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|NEW
argument_list|,
name|periodToSlashes
argument_list|(
name|wrapperType
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
name|periodToSlashes
argument_list|(
name|wrapperType
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ASTORE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|setMethods
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|getMethods
index|[
name|x
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|setMethods
index|[
name|x
index|]
operator|==
literal|null
operator|&&
name|fields
index|[
name|x
index|]
operator|==
literal|null
condition|)
block|{
comment|// null placeholder
continue|continue;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|tp
init|=
name|getMethods
index|[
name|x
index|]
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|tp
argument_list|)
condition|)
block|{
name|doCollection
argument_list|(
name|mv
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|tp
argument_list|)
condition|)
block|{
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|GETFIELD
argument_list|,
name|periodToSlashes
argument_list|(
name|newClassName
argument_list|)
argument_list|,
literal|"factory"
argument_list|,
literal|"L"
operator|+
name|periodToSlashes
argument_list|(
name|objectFactoryClass
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitIntInsn
argument_list|(
name|Opcodes
operator|.
name|BIPUSH
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEINTERFACE
argument_list|,
literal|"java/util/List"
argument_list|,
literal|"get"
argument_list|,
literal|"(I)Ljava/lang/Object;"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tp
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|CHECKCAST
argument_list|,
name|NONPRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|tp
argument_list|)
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEVIRTUAL
argument_list|,
name|NONPRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|tp
argument_list|)
argument_list|,
name|tp
operator|.
name|getName
argument_list|()
operator|+
literal|"Value"
argument_list|,
literal|"()"
operator|+
name|PRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|tp
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|tp
argument_list|)
condition|)
block|{
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|CHECKCAST
argument_list|,
name|periodToSlashes
argument_list|(
name|jaxbMethods
index|[
name|x
index|]
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEVIRTUAL
argument_list|,
name|periodToSlashes
argument_list|(
name|objectFactoryClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|jaxbMethods
index|[
name|x
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|getMethodSignature
argument_list|(
name|jaxbMethods
index|[
name|x
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tp
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|CHECKCAST
argument_list|,
name|getClassCode
argument_list|(
name|tp
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|CHECKCAST
argument_list|,
name|periodToSlashes
argument_list|(
name|tp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEVIRTUAL
argument_list|,
name|periodToSlashes
argument_list|(
name|wrapperType
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|setMethods
index|[
name|x
index|]
operator|.
name|getName
argument_list|()
argument_list|,
literal|"("
operator|+
name|getClassCode
argument_list|(
name|tp
argument_list|)
operator|+
literal|")V"
argument_list|)
expr_stmt|;
block|}
block|}
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|Label
name|lEnd
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|lEnd
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|newClassName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|lBegin
argument_list|,
name|lEnd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"lst"
argument_list|,
literal|"Ljava/util/List;"
argument_list|,
literal|"Ljava/util/List<*>;"
argument_list|,
name|lBegin
argument_list|,
name|lEnd
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"ok"
argument_list|,
literal|"L"
operator|+
name|periodToSlashes
argument_list|(
name|wrapperType
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|lBegin
argument_list|,
name|lEnd
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|doCollection
parameter_list|(
name|MethodVisitor
name|mv
parameter_list|,
name|int
name|x
parameter_list|)
block|{
comment|// List aVal = obj.getA();
comment|// List newA = (List)lst.get(99);
comment|// if (aVal == null) {
comment|// obj.setA(newA);
comment|// } else {
comment|// aVal.addAll(newA);
comment|// }
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEVIRTUAL
argument_list|,
name|periodToSlashes
argument_list|(
name|wrapperType
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|getMethods
index|[
name|x
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|getMethodSignature
argument_list|(
name|getMethods
index|[
name|x
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ASTORE
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitIntInsn
argument_list|(
name|Opcodes
operator|.
name|BIPUSH
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEINTERFACE
argument_list|,
literal|"java/util/List"
argument_list|,
literal|"get"
argument_list|,
literal|"(I)Ljava/lang/Object;"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|CHECKCAST
argument_list|,
literal|"java/util/List"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ASTORE
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Label
name|nonNullLabel
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IFNONNULL
argument_list|,
name|nonNullLabel
argument_list|)
expr_stmt|;
if|if
condition|(
name|setMethods
index|[
name|x
index|]
operator|==
literal|null
condition|)
block|{
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|NEW
argument_list|,
literal|"java/lang/RuntimeException"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLdcInsn
argument_list|(
name|getMethods
index|[
name|x
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" returned null and there isn't a set method."
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
literal|"java/lang/RuntimeException"
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Ljava/lang/String;)V"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ATHROW
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|CHECKCAST
argument_list|,
name|getMethods
index|[
name|x
index|]
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEVIRTUAL
argument_list|,
name|periodToSlashes
argument_list|(
name|wrapperType
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|setMethods
index|[
name|x
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|getMethodSignature
argument_list|(
name|setMethods
index|[
name|x
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Label
name|jumpOverLabel
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|GOTO
argument_list|,
name|jumpOverLabel
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|nonNullLabel
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEINTERFACE
argument_list|,
literal|"java/util/List"
argument_list|,
literal|"addAll"
argument_list|,
literal|"(Ljava/util/Collection;)Z"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|POP
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|jumpOverLabel
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|addGetWrapperParts
parameter_list|(
name|String
name|newClassName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|wrapperClass
parameter_list|,
name|Method
name|getMethods
index|[]
parameter_list|,
name|Field
name|fields
index|[]
parameter_list|,
name|ClassWriter
name|cw
parameter_list|)
block|{
name|MethodVisitor
name|mv
init|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"getWrapperParts"
argument_list|,
literal|"(Ljava/lang/Object;)Ljava/util/List;"
argument_list|,
literal|"(Ljava/lang/Object;)Ljava/util/List<Ljava/lang/Object;>;"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"org/apache/cxf/interceptor/Fault"
block|}
argument_list|)
decl_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|Label
name|lBegin
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|lBegin
argument_list|)
expr_stmt|;
comment|// the ret List
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|NEW
argument_list|,
literal|"java/util/ArrayList"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
literal|"java/util/ArrayList"
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ASTORE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// cast the Object to the wrapperType type
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|CHECKCAST
argument_list|,
name|periodToSlashes
argument_list|(
name|wrapperClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ASTORE
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|getMethods
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|Method
name|method
init|=
name|getMethods
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
operator|&&
name|fields
index|[
name|x
index|]
operator|!=
literal|null
condition|)
block|{
comment|// fallback to reflection mode
return|return
literal|false
return|;
block|}
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ACONST_NULL
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEINTERFACE
argument_list|,
literal|"java/util/List"
argument_list|,
literal|"add"
argument_list|,
literal|"(Ljava/lang/Object;)Z"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|POP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEVIRTUAL
argument_list|,
name|periodToSlashes
argument_list|(
name|wrapperClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|getMethodSignature
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
comment|// wrap into Object type
name|createObjectWrapper
argument_list|(
name|mv
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|JAXBElement
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEVIRTUAL
argument_list|,
literal|"javax/xml/bind/JAXBElement"
argument_list|,
literal|"getValue"
argument_list|,
literal|"()Ljava/lang/Object;"
argument_list|)
expr_stmt|;
block|}
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEINTERFACE
argument_list|,
literal|"java/util/List"
argument_list|,
literal|"add"
argument_list|,
literal|"(Ljava/lang/Object;)Z"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|POP
argument_list|)
expr_stmt|;
block|}
block|}
comment|// return the list
name|Label
name|l2
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|Label
name|lEnd
init|=
operator|new
name|Label
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|lEnd
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|newClassName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|lBegin
argument_list|,
name|lEnd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"o"
argument_list|,
literal|"Ljava/lang/Object;"
argument_list|,
literal|null
argument_list|,
name|lBegin
argument_list|,
name|lEnd
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"ret"
argument_list|,
literal|"Ljava/util/List;"
argument_list|,
literal|"Ljava/util/List<Ljava/lang/Object;>;"
argument_list|,
name|lBegin
argument_list|,
name|lEnd
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"ok"
argument_list|,
literal|"L"
operator|+
name|periodToSlashes
argument_list|(
name|wrapperClass
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|lBegin
argument_list|,
name|lEnd
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|void
name|createObjectWrapper
parameter_list|(
name|MethodVisitor
name|mv
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cl
parameter_list|)
block|{
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESTATIC
argument_list|,
name|NONPRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|cl
argument_list|)
argument_list|,
literal|"valueOf"
argument_list|,
literal|"("
operator|+
name|PRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|cl
argument_list|)
operator|+
literal|")L"
operator|+
name|NONPRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|cl
argument_list|)
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

