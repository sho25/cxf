begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Dispatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|EndpointReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|http
operator|.
name|HTTPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|http
operator|.
name|HTTPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|AbstractSoapInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJOutInterceptor
operator|.
name|SAAJOutEndingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AttachmentOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|JaxWsEndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|OverlayW3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_class
specifier|public
class|class
name|DispatchImpl
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Dispatch
argument_list|<
name|T
argument_list|>
implements|,
name|BindingProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DispatchImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DISPATCH_NS
init|=
literal|"http://cxf.apache.org/jaxws/dispatch"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INVOKE_NAME
init|=
literal|"Invoke"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INVOKE_ONEWAY_NAME
init|=
literal|"InvokeOneWay"
decl_stmt|;
specifier|private
specifier|final
name|Binding
name|binding
decl_stmt|;
specifier|private
specifier|final
name|EndpointReferenceBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cl
decl_stmt|;
specifier|private
specifier|final
name|JAXBContext
name|context
decl_stmt|;
specifier|private
name|Message
name|error
decl_stmt|;
name|DispatchImpl
parameter_list|(
name|Client
name|client
parameter_list|,
name|Service
operator|.
name|Mode
name|m
parameter_list|,
name|JAXBContext
name|ctx
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|binding
operator|=
operator|(
operator|(
name|JaxWsEndpointImpl
operator|)
name|client
operator|.
name|getEndpoint
argument_list|()
operator|)
operator|.
name|getJaxwsBinding
argument_list|()
expr_stmt|;
name|this
operator|.
name|builder
operator|=
operator|new
name|EndpointReferenceBuilder
argument_list|(
operator|(
name|JaxWsEndpointImpl
operator|)
name|client
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|context
operator|=
name|ctx
expr_stmt|;
name|cl
operator|=
name|clazz
expr_stmt|;
name|setupEndpointAddressContext
argument_list|(
name|client
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|addInvokeOperation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addInvokeOperation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|==
name|Service
operator|.
name|Mode
operator|.
name|MESSAGE
operator|&&
name|binding
operator|instanceof
name|SOAPBinding
condition|)
block|{
if|if
condition|(
name|DataSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|error
operator|=
operator|new
name|Message
argument_list|(
literal|"DISPATCH_OBJECT_NOT_SUPPORTED"
argument_list|,
name|LOG
argument_list|,
literal|"DataSource"
argument_list|,
name|m
argument_list|,
literal|"SOAP/HTTP"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|Service
operator|.
name|Mode
operator|.
name|MESSAGE
condition|)
block|{
name|SAAJOutInterceptor
name|saajOut
init|=
operator|new
name|SAAJOutInterceptor
argument_list|()
decl_stmt|;
name|client
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|saajOut
argument_list|)
expr_stmt|;
name|client
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MessageModeOutInterceptor
argument_list|(
name|saajOut
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SAAJInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MessageModeInInterceptor
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|Service
operator|.
name|Mode
operator|.
name|PAYLOAD
operator|&&
name|binding
operator|instanceof
name|SOAPBinding
operator|&&
name|SOAPMessage
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|error
operator|=
operator|new
name|Message
argument_list|(
literal|"DISPATCH_OBJECT_NOT_SUPPORTED"
argument_list|,
name|LOG
argument_list|,
literal|"SOAPMessage"
argument_list|,
name|m
argument_list|,
literal|"SOAP/HTTP"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DataSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
operator|&&
name|binding
operator|instanceof
name|HTTPBinding
condition|)
block|{
name|error
operator|=
operator|new
name|Message
argument_list|(
literal|"DISPATCH_OBJECT_NOT_SUPPORTED"
argument_list|,
name|LOG
argument_list|,
literal|"DataSource"
argument_list|,
name|m
argument_list|,
literal|"XML/HTTP"
argument_list|)
expr_stmt|;
block|}
block|}
name|DispatchImpl
parameter_list|(
name|Client
name|cl
parameter_list|,
name|Service
operator|.
name|Mode
name|m
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
argument_list|(
name|cl
argument_list|,
name|m
argument_list|,
literal|null
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addInvokeOperation
parameter_list|(
name|boolean
name|oneWay
parameter_list|)
block|{
name|String
name|name
init|=
name|oneWay
condition|?
name|INVOKE_ONEWAY_NAME
else|:
name|INVOKE_NAME
decl_stmt|;
name|ServiceInfo
name|info
init|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
name|OperationInfo
name|opInfo
init|=
name|info
operator|.
name|getInterface
argument_list|()
operator|.
name|addOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|DISPATCH_NS
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|MessageInfo
name|mInfo
init|=
name|opInfo
operator|.
name|createMessage
argument_list|(
operator|new
name|QName
argument_list|(
name|DISPATCH_NS
argument_list|,
name|name
operator|+
literal|"Request"
argument_list|)
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|)
decl_stmt|;
name|opInfo
operator|.
name|setInput
argument_list|(
name|name
operator|+
literal|"Request"
argument_list|,
name|mInfo
argument_list|)
expr_stmt|;
name|MessagePartInfo
name|mpi
init|=
name|mInfo
operator|.
name|addMessagePart
argument_list|(
literal|"parameters"
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oneWay
condition|)
block|{
name|mInfo
operator|=
name|opInfo
operator|.
name|createMessage
argument_list|(
operator|new
name|QName
argument_list|(
name|DISPATCH_NS
argument_list|,
name|name
operator|+
literal|"Response"
argument_list|)
argument_list|,
name|Type
operator|.
name|OUTPUT
argument_list|)
expr_stmt|;
name|opInfo
operator|.
name|setOutput
argument_list|(
name|name
operator|+
literal|"Response"
argument_list|,
name|mInfo
argument_list|)
expr_stmt|;
name|mpi
operator|=
name|mInfo
operator|.
name|addMessagePart
argument_list|(
literal|"parameters"
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|BindingInfo
name|bind
range|:
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getBindings
argument_list|()
control|)
block|{
name|BindingOperationInfo
name|bo
init|=
operator|new
name|BindingOperationInfo
argument_list|(
name|bind
argument_list|,
name|opInfo
argument_list|)
decl_stmt|;
name|bind
operator|.
name|addOperation
argument_list|(
name|bo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getRequestContext
parameter_list|()
block|{
return|return
operator|new
name|WrappedMessageContext
argument_list|(
name|client
operator|.
name|getRequestContext
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getResponseContext
parameter_list|()
block|{
return|return
operator|new
name|WrappedMessageContext
argument_list|(
name|client
operator|.
name|getResponseContext
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
return|;
block|}
specifier|public
name|Binding
name|getBinding
parameter_list|()
block|{
return|return
name|binding
return|;
block|}
specifier|public
name|EndpointReference
name|getEndpointReference
parameter_list|()
block|{
return|return
name|builder
operator|.
name|getEndpointReference
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|X
extends|extends
name|EndpointReference
parameter_list|>
name|X
name|getEndpointReference
parameter_list|(
name|Class
argument_list|<
name|X
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getEndpointReference
argument_list|(
name|clazz
argument_list|)
return|;
block|}
specifier|private
name|void
name|setupEndpointAddressContext
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
comment|//NOTE for jms transport the address would be null
if|if
condition|(
literal|null
operator|!=
name|endpoint
operator|&&
literal|null
operator|!=
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|client
operator|.
name|getRequestContext
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|T
name|invoke
parameter_list|(
name|T
name|obj
parameter_list|)
block|{
return|return
name|invoke
argument_list|(
name|obj
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkError
parameter_list|()
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getBinding
argument_list|()
operator|instanceof
name|SOAPBinding
condition|)
block|{
name|SOAPFault
name|soapFault
init|=
literal|null
decl_stmt|;
try|try
block|{
name|soapFault
operator|=
name|JaxWsClientProxy
operator|.
name|createSoapFault
argument_list|(
operator|(
name|SOAPBinding
operator|)
name|getBinding
argument_list|()
argument_list|,
operator|new
name|Exception
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
name|soapFault
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SOAPFaultException
argument_list|(
name|soapFault
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|getBinding
argument_list|()
operator|instanceof
name|HTTPBinding
condition|)
block|{
name|HTTPException
name|exception
init|=
operator|new
name|HTTPException
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
operator|new
name|Exception
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
throw|throw
operator|new
name|WebServiceException
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RuntimeException
name|mapException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|getBinding
argument_list|()
operator|instanceof
name|HTTPBinding
condition|)
block|{
name|HTTPException
name|exception
init|=
operator|new
name|HTTPException
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
return|return
name|exception
return|;
block|}
elseif|else
if|if
condition|(
name|getBinding
argument_list|()
operator|instanceof
name|SOAPBinding
condition|)
block|{
name|SOAPFault
name|soapFault
init|=
literal|null
decl_stmt|;
try|try
block|{
name|soapFault
operator|=
name|JaxWsClientProxy
operator|.
name|createSoapFault
argument_list|(
operator|(
name|SOAPBinding
operator|)
name|getBinding
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
name|soapFault
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|WebServiceException
argument_list|(
name|ex
argument_list|)
return|;
block|}
name|SOAPFaultException
name|exception
init|=
operator|new
name|SOAPFaultException
argument_list|(
name|soapFault
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
return|return
name|exception
return|;
block|}
return|return
operator|new
name|WebServiceException
argument_list|(
name|ex
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|T
name|invoke
parameter_list|(
name|T
name|obj
parameter_list|,
name|boolean
name|isOneWay
parameter_list|)
block|{
name|checkError
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SOAPMessage
condition|)
block|{
name|SOAPMessage
name|msg
init|=
operator|(
name|SOAPMessage
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|countAttachments
argument_list|()
operator|>
literal|0
condition|)
block|{
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|AttachmentOutInterceptor
operator|.
name|WRITE_ATTACHMENTS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|ret
index|[]
init|=
name|client
operator|.
name|invokeWrapped
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jaxws/dispatch"
argument_list|,
literal|"Invoke"
operator|+
operator|(
name|isOneWay
condition|?
literal|"OneWay"
else|:
literal|""
operator|)
argument_list|)
argument_list|,
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOneWay
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|T
operator|)
name|ret
index|[
literal|0
index|]
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|mapException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|invokeAsync
parameter_list|(
name|T
name|obj
parameter_list|,
name|AsyncHandler
argument_list|<
name|T
argument_list|>
name|asyncHandler
parameter_list|)
block|{
name|checkError
argument_list|()
expr_stmt|;
name|client
operator|.
name|setExecutor
argument_list|(
name|getClient
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|ClientCallback
name|callback
init|=
operator|new
name|JaxwsClientCallback
argument_list|<
name|T
argument_list|>
argument_list|(
name|asyncHandler
argument_list|)
decl_stmt|;
name|Response
argument_list|<
name|T
argument_list|>
name|ret
init|=
operator|new
name|JaxwsResponseCallback
argument_list|<
name|T
argument_list|>
argument_list|(
name|callback
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|invokeWrapped
argument_list|(
name|callback
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jaxws/dispatch"
argument_list|,
literal|"Invoke"
argument_list|)
argument_list|,
name|obj
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|mapException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Response
argument_list|<
name|T
argument_list|>
name|invokeAsync
parameter_list|(
name|T
name|obj
parameter_list|)
block|{
return|return
operator|(
name|Response
operator|)
name|invokeAsync
argument_list|(
name|obj
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|void
name|invokeOneWay
parameter_list|(
name|T
name|obj
parameter_list|)
block|{
name|invoke
argument_list|(
name|obj
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Client
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
specifier|static
class|class
name|MessageModeOutInterceptor
extends|extends
name|AbstractSoapInterceptor
block|{
name|SAAJOutInterceptor
name|saajOut
decl_stmt|;
specifier|public
name|MessageModeOutInterceptor
parameter_list|(
name|SAAJOutInterceptor
name|saajOut
parameter_list|)
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
name|SAAJOutInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|saajOut
operator|=
name|saajOut
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
operator|!
name|isDispatch
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Dispatch interceptor bailing on unrelated message"
argument_list|)
expr_stmt|;
return|return;
block|}
name|MessageContentsList
name|list
init|=
operator|(
name|MessageContentsList
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SOAPMessage
name|soapMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|SOAPMessage
condition|)
block|{
name|soapMessage
operator|=
operator|(
name|SOAPMessage
operator|)
name|o
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|MessageFactory
name|factory
init|=
name|saajOut
operator|.
name|getFactory
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|soapMessage
operator|=
name|factory
operator|.
name|createMessage
argument_list|()
expr_stmt|;
name|SOAPPart
name|part
init|=
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Source
condition|)
block|{
name|StaxUtils
operator|.
name|copy
argument_list|(
operator|(
name|Source
operator|)
name|o
argument_list|,
operator|new
name|W3CDOMStreamWriter
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"Error creating SOAPMessage"
argument_list|,
name|e
argument_list|,
name|message
operator|.
name|getVersion
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"Error creating SOAPMessage"
argument_list|,
name|e
argument_list|,
name|message
operator|.
name|getVersion
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|message
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|message
operator|.
name|containsKey
argument_list|(
name|SAAJOutInterceptor
operator|.
name|ORIGINAL_XML_WRITER
argument_list|)
condition|)
block|{
name|XMLStreamWriter
name|origWriter
init|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SAAJOutInterceptor
operator|.
name|ORIGINAL_XML_WRITER
argument_list|,
name|origWriter
argument_list|)
expr_stmt|;
block|}
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|OverlayW3CDOMStreamWriter
argument_list|(
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
decl_stmt|;
comment|// Replace stax writer with DomStreamWriter
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
name|DocumentFragment
name|frag
init|=
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|createDocumentFragment
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|body
init|=
name|soapMessage
operator|.
name|getSOAPBody
argument_list|()
decl_stmt|;
name|Node
name|nd
init|=
name|body
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|removeChild
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|frag
operator|.
name|appendChild
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|nd
operator|=
name|soapMessage
operator|.
name|getSOAPBody
argument_list|()
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|frag
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// Add a final interceptor to write the message
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|SAAJOutEndingInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MessageModeInInterceptor
extends|extends
name|AbstractSoapInterceptor
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
specifier|public
name|MessageModeInInterceptor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|Phase
operator|.
name|POST_LOGICAL
argument_list|)
expr_stmt|;
name|type
operator|=
name|c
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
operator|!
name|isDispatch
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Dispatch interceptor bailing on unrelated message"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SOAPMessage
name|m
init|=
name|message
operator|.
name|getContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|MessageContentsList
name|list
init|=
operator|(
name|MessageContentsList
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|MessageContentsList
argument_list|()
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|Object
name|o
init|=
name|m
decl_stmt|;
if|if
condition|(
name|StreamSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
try|try
block|{
name|CachedOutputStream
name|out
init|=
operator|new
name|CachedOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|XMLStreamWriter
name|xsw
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|m
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
argument_list|,
name|xsw
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|close
argument_list|()
expr_stmt|;
name|o
operator|=
operator|new
name|StreamSource
argument_list|(
name|out
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|SAXSource
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|o
operator|=
operator|new
name|StaxSource
argument_list|(
operator|new
name|W3CDOMStreamReader
argument_list|(
name|m
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Source
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|o
operator|=
operator|new
name|DOMSource
argument_list|(
name|m
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|boolean
name|isDispatch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|message
parameter_list|)
block|{
name|BindingOperationInfo
name|boi
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|boi
operator|!=
literal|null
operator|&&
name|DISPATCH_NS
operator|.
name|equals
argument_list|(
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
operator|(
name|INVOKE_NAME
operator|.
name|equals
argument_list|(
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|||
name|INVOKE_ONEWAY_NAME
operator|.
name|equals
argument_list|(
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

