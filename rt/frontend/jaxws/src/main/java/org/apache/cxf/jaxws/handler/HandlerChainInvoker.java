begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPBody
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalMessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJFactoryResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WebServiceContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * invoke the handlers in a registered handler chain  */
end_comment

begin_class
specifier|public
class|class
name|HandlerChainInvoker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|HandlerChainInvoker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|protocolHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|LogicalHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|logicalHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|LogicalHandler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|invokedHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|closeHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|outbound
decl_stmt|;
specifier|private
name|boolean
name|isRequestor
decl_stmt|;
specifier|private
name|boolean
name|responseExpected
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|faultExpected
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
name|boolean
name|messageDirectionReversed
decl_stmt|;
specifier|private
name|Exception
name|fault
decl_stmt|;
specifier|private
name|LogicalMessageContext
name|logicalMessageContext
decl_stmt|;
specifier|private
name|MessageContext
name|protocolMessageContext
decl_stmt|;
specifier|public
name|HandlerChainInvoker
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
argument_list|<
name|Handler
argument_list|>
name|hc
parameter_list|)
block|{
name|this
argument_list|(
name|hc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HandlerChainInvoker
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
argument_list|<
name|Handler
argument_list|>
name|hc
parameter_list|,
name|boolean
name|isOutbound
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"invoker for chain size: "
operator|+
operator|(
name|hc
operator|!=
literal|null
condition|?
name|hc
operator|.
name|size
argument_list|()
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hc
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Handler
argument_list|<
name|?
argument_list|>
name|h
range|:
name|hc
control|)
block|{
if|if
condition|(
name|h
operator|instanceof
name|LogicalHandler
condition|)
block|{
name|logicalHandlers
operator|.
name|add
argument_list|(
operator|(
name|LogicalHandler
argument_list|<
name|?
argument_list|>
operator|)
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|protocolHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|outbound
operator|=
name|isOutbound
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|LogicalHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|getLogicalHandlers
parameter_list|()
block|{
return|return
name|logicalHandlers
return|;
block|}
specifier|public
name|List
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|getProtocolHandlers
parameter_list|()
block|{
return|return
name|protocolHandlers
return|;
block|}
specifier|public
name|LogicalMessageContext
name|getLogicalMessageContext
parameter_list|()
block|{
return|return
name|logicalMessageContext
return|;
block|}
specifier|public
name|void
name|setLogicalMessageContext
parameter_list|(
name|LogicalMessageContext
name|mc
parameter_list|)
block|{
name|logicalMessageContext
operator|=
name|mc
expr_stmt|;
block|}
specifier|public
name|MessageContext
name|getProtocolMessageContext
parameter_list|()
block|{
return|return
name|protocolMessageContext
return|;
block|}
specifier|public
name|void
name|setProtocolMessageContext
parameter_list|(
name|MessageContext
name|mc
parameter_list|)
block|{
name|protocolMessageContext
operator|=
name|mc
expr_stmt|;
block|}
specifier|public
name|boolean
name|invokeLogicalHandlers
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|LogicalMessageContext
name|context
parameter_list|)
block|{
return|return
name|invokeHandlerChain
argument_list|(
name|logicalHandlers
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|invokeLogicalHandlersHandleFault
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|LogicalMessageContext
name|context
parameter_list|)
block|{
return|return
name|invokeHandlerChainHandleFault
argument_list|(
name|logicalHandlers
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|invokeProtocolHandlers
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|MessageContext
name|context
parameter_list|)
block|{
return|return
name|invokeHandlerChain
argument_list|(
name|protocolHandlers
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|invokeProtocolHandlersHandleFault
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|MessageContext
name|context
parameter_list|)
block|{
return|return
name|invokeHandlerChainHandleFault
argument_list|(
name|protocolHandlers
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|public
name|void
name|setResponseExpected
parameter_list|(
name|boolean
name|expected
parameter_list|)
block|{
name|responseExpected
operator|=
name|expected
expr_stmt|;
block|}
specifier|public
name|boolean
name|isResponseExpected
parameter_list|()
block|{
return|return
name|responseExpected
return|;
block|}
specifier|public
name|boolean
name|isOutbound
parameter_list|()
block|{
return|return
name|outbound
return|;
block|}
specifier|public
name|boolean
name|isInbound
parameter_list|()
block|{
return|return
operator|!
name|outbound
return|;
block|}
comment|/**      * We need HandlerChainInvoker behaves differently on the client and server      * side. For the client side, as there is no inbound faultChain, we need to call      * handleFault and close within HandlerChainInvoker directly.      */
specifier|public
name|boolean
name|isRequestor
parameter_list|()
block|{
return|return
name|isRequestor
return|;
block|}
specifier|public
name|void
name|setRequestor
parameter_list|(
name|boolean
name|requestor
parameter_list|)
block|{
name|isRequestor
operator|=
name|requestor
expr_stmt|;
block|}
specifier|public
name|void
name|setInbound
parameter_list|()
block|{
name|outbound
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|setOutbound
parameter_list|()
block|{
name|outbound
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|faultRaised
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|fault
operator|||
name|faultExpected
return|;
block|}
specifier|public
name|Exception
name|getFault
parameter_list|()
block|{
return|return
name|fault
return|;
block|}
specifier|public
name|void
name|setFault
parameter_list|(
name|boolean
name|fe
parameter_list|)
block|{
name|faultExpected
operator|=
name|fe
expr_stmt|;
block|}
comment|/**      * Invoke handlers at the end of an MEP calling close on each. The handlers      * must be invoked in the reverse order that they appear in the handler      * chain. On the server side this will not be the reverse order in which      * they were invoked so use the handler chain directly and not simply the      * invokedHandler list.      */
specifier|public
name|void
name|mepComplete
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"closing protocol handlers - handler count:"
operator|+
name|invokedHandlers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
name|invokeReversedClose
argument_list|()
expr_stmt|;
block|}
comment|/**      * Indicates that the invoker is closed. When closed, only      * @see #mepComplete may be called. The invoker will become closed if during      *      a invocation of handlers, a handler throws a runtime exception that      *      is not a protocol exception and no futher handler or message      *      processing is possible.      */
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
comment|/**      * Allows an the logical handler chain for one invoker to be used as an      * alternate chain for another.      *      * @param invoker the invoker encalsulting the alternate logical handler      *            chain      */
specifier|public
name|void
name|adoptLogicalHandlers
parameter_list|(
name|HandlerChainInvoker
name|invoker
parameter_list|)
block|{
name|logicalHandlers
operator|=
name|invoker
operator|.
name|getLogicalHandlers
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|getInvokedHandlers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|invokedHandlers
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|invokeHandlerChain
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|handlerChain
parameter_list|,
name|MessageContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|handlerChain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
literal|"no handlers registered"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"invoking handlers, direction: "
operator|+
operator|(
name|outbound
condition|?
literal|"outbound"
else|:
literal|"inbound"
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
name|handlerChain
operator|=
name|reverseHandlerChain
argument_list|(
name|handlerChain
argument_list|)
expr_stmt|;
block|}
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
try|try
block|{
name|WebServiceContextImpl
operator|.
name|setMessageContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invokeHandleMessage
argument_list|(
name|handlerChain
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|WebServiceContextImpl
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|continueProcessing
return|;
block|}
comment|/*      * REVISIT: the logic of current implemetation is if the exception is thrown      * from previous handlers, we only invoke handleFault if it is      * ProtocolException (per spec), if the exception is thrown from other      * places other than handlers, we always invoke handleFault.      */
specifier|private
name|boolean
name|invokeHandlerChainHandleFault
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|handlerChain
parameter_list|,
name|MessageContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|handlerChain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
literal|"no handlers registered"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//The fault is raised from previous handlers, in this case, we only invoke handleFault
comment|//if the fault is a ProtocolException
if|if
condition|(
name|fault
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|fault
operator|instanceof
name|ProtocolException
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|responseExpected
operator|&&
operator|!
name|messageDirectionReversed
condition|)
block|{
comment|// According to jsr224 9.3.2.1,
comment|// If throw ProtocolException or a subclass:
comment|// No response, normal message processing stops, close is called on each previously invoked handler
comment|// in the chain, the exception is dispatched (see section 9.1.2.3).
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"invoking handlers, direction: "
operator|+
operator|(
name|outbound
condition|?
literal|"outbound"
else|:
literal|"inbound"
operator|)
argument_list|)
expr_stmt|;
block|}
name|setMessageOutboundProperty
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
name|handlerChain
operator|=
name|reverseHandlerChain
argument_list|(
name|handlerChain
argument_list|)
expr_stmt|;
block|}
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
try|try
block|{
name|WebServiceContextImpl
operator|.
name|setMessageContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invokeHandleFault
argument_list|(
name|handlerChain
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|WebServiceContextImpl
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|continueProcessing
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|boolean
name|invokeHandleFault
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|handlerChain
parameter_list|,
name|MessageContext
name|ctx
parameter_list|)
block|{
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
try|try
block|{
for|for
control|(
name|Handler
argument_list|<
name|?
argument_list|>
name|h
range|:
name|handlerChain
control|)
block|{
if|if
condition|(
name|invokeThisHandler
argument_list|(
name|h
argument_list|)
condition|)
block|{
name|closeHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|markHandlerInvoked
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|Handler
argument_list|<
name|MessageContext
argument_list|>
name|lh
init|=
operator|(
name|Handler
argument_list|<
name|MessageContext
argument_list|>
operator|)
name|h
decl_stmt|;
name|continueProcessing
operator|=
name|lh
operator|.
name|handleFault
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|continueProcessing
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"HANDLER_RAISED_RUNTIME_EXCEPTION"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
literal|false
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|continueProcessing
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|boolean
name|invokeHandleMessage
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Handler
argument_list|<
name|?
argument_list|>
argument_list|>
name|handlerChain
parameter_list|,
name|MessageContext
name|ctx
parameter_list|)
block|{
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
try|try
block|{
for|for
control|(
name|Handler
argument_list|<
name|?
argument_list|>
name|h
range|:
name|handlerChain
control|)
block|{
if|if
condition|(
name|invokeThisHandler
argument_list|(
name|h
argument_list|)
condition|)
block|{
name|closeHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|markHandlerInvoked
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|Handler
argument_list|<
name|MessageContext
argument_list|>
name|lh
init|=
operator|(
name|Handler
argument_list|<
name|MessageContext
argument_list|>
operator|)
name|h
decl_stmt|;
name|continueProcessing
operator|=
name|lh
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|continueProcessing
condition|)
block|{
if|if
condition|(
name|responseExpected
condition|)
block|{
name|changeMessageDirection
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|messageDirectionReversed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|invokeReversedClose
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"handleMessage raised exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseExpected
condition|)
block|{
name|changeMessageDirection
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|messageDirectionReversed
operator|=
literal|true
expr_stmt|;
block|}
comment|//special case for client side, this is because we do nothing in client fault
comment|//observer, we have to call handleFault and close here.
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
if|if
condition|(
name|responseExpected
condition|)
block|{
name|setFaultMessage
argument_list|(
name|ctx
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|invokeReversedHandleFault
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|invokeReversedClose
argument_list|()
expr_stmt|;
block|}
name|continueProcessing
operator|=
literal|false
expr_stmt|;
name|setFault
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseExpected
operator|||
name|isInbound
argument_list|()
condition|)
block|{
comment|//brain dead spec - if it's one way, swallow it
if|if
condition|(
name|e
operator|instanceof
name|SOAPFaultException
condition|)
block|{
throw|throw
name|mapSoapFault
argument_list|(
operator|(
name|SOAPFaultException
operator|)
name|e
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
name|continueProcessing
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|responseExpected
operator|||
name|outbound
condition|)
block|{
name|setFault
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SOAPFaultException
condition|)
block|{
throw|throw
name|mapSoapFault
argument_list|(
operator|(
name|SOAPFaultException
operator|)
name|e
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
name|invokeReversedClose
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"HANDLER_RAISED_RUNTIME_EXCEPTION"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseExpected
condition|)
block|{
name|changeMessageDirection
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|messageDirectionReversed
operator|=
literal|true
expr_stmt|;
block|}
comment|//special case for client side, this is because we do nothing in client fault
comment|//observer, we have to call close here.
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|invokeReversedClose
argument_list|()
expr_stmt|;
name|continueProcessing
operator|=
literal|false
expr_stmt|;
name|setFault
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|responseExpected
operator|&&
operator|!
name|outbound
condition|)
block|{
name|invokeReversedClose
argument_list|()
expr_stmt|;
name|continueProcessing
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|continueProcessing
operator|=
literal|false
expr_stmt|;
name|setFault
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|continueProcessing
return|;
block|}
specifier|private
name|SoapFault
name|mapSoapFault
parameter_list|(
name|SOAPFaultException
name|sfe
parameter_list|)
block|{
name|SoapFault
name|sf
init|=
operator|new
name|SoapFault
argument_list|(
name|sfe
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultString
argument_list|()
argument_list|,
name|sfe
argument_list|,
name|sfe
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultCodeAsQName
argument_list|()
argument_list|)
decl_stmt|;
name|sf
operator|.
name|setRole
argument_list|(
name|sfe
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultActor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sfe
operator|.
name|getFault
argument_list|()
operator|.
name|hasDetail
argument_list|()
condition|)
block|{
name|sf
operator|.
name|setDetail
argument_list|(
name|sfe
operator|.
name|getFault
argument_list|()
operator|.
name|getDetail
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sf
return|;
block|}
comment|/*      * When the message direction is reversed, if the message is not already a      * fault message then it is replaced with a fault message      */
specifier|private
name|void
name|setFaultMessage
parameter_list|(
name|MessageContext
name|mc
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|(
operator|(
name|WrappedMessageContext
operator|)
name|mc
operator|)
operator|.
name|getWrappedMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|msg
operator|.
name|removeContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|msg
operator|.
name|removeContent
argument_list|(
name|Source
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|SOAPMessage
name|soapMessage
init|=
literal|null
decl_stmt|;
name|SoapVersion
name|version
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|msg
operator|instanceof
name|SoapMessage
condition|)
block|{
name|version
operator|=
operator|(
operator|(
name|SoapMessage
operator|)
name|msg
operator|)
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
name|soapMessage
operator|=
name|SAAJFactoryResolver
operator|.
name|createMessageFactory
argument_list|(
name|version
argument_list|)
operator|.
name|createMessage
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
name|SOAPBody
name|body
init|=
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|soapMessage
argument_list|)
decl_stmt|;
name|SOAPFault
name|soapFault
init|=
name|body
operator|.
name|addFault
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|SOAPFaultException
condition|)
block|{
name|SOAPFaultException
name|sf
init|=
operator|(
name|SOAPFaultException
operator|)
name|exception
decl_stmt|;
name|soapFault
operator|.
name|setFaultString
argument_list|(
name|sf
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultString
argument_list|()
argument_list|)
expr_stmt|;
name|SAAJUtils
operator|.
name|setFaultCode
argument_list|(
name|soapFault
argument_list|,
name|sf
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultCodeAsQName
argument_list|()
argument_list|)
expr_stmt|;
name|soapFault
operator|.
name|setFaultActor
argument_list|(
name|sf
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultActor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sf
operator|.
name|getFault
argument_list|()
operator|.
name|hasDetail
argument_list|()
condition|)
block|{
name|Node
name|nd
init|=
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|importNode
argument_list|(
name|sf
operator|.
name|getFault
argument_list|()
operator|.
name|getDetail
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|nd
operator|=
name|nd
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|soapFault
operator|.
name|addDetail
argument_list|()
expr_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|soapFault
operator|.
name|getDetail
argument_list|()
operator|.
name|appendChild
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|Fault
condition|)
block|{
name|SoapFault
name|sf
init|=
name|SoapFault
operator|.
name|createFault
argument_list|(
operator|(
name|Fault
operator|)
name|exception
argument_list|,
operator|(
operator|(
name|SoapMessage
operator|)
name|msg
operator|)
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|soapFault
operator|.
name|setFaultString
argument_list|(
name|sf
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|SAAJUtils
operator|.
name|setFaultCode
argument_list|(
name|soapFault
argument_list|,
name|sf
operator|.
name|getFaultCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sf
operator|.
name|hasDetails
argument_list|()
condition|)
block|{
name|soapFault
operator|.
name|addDetail
argument_list|()
expr_stmt|;
name|Node
name|nd
init|=
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|importNode
argument_list|(
name|sf
operator|.
name|getDetail
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|nd
operator|=
name|nd
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|soapFault
operator|.
name|getDetail
argument_list|()
operator|.
name|appendChild
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|SAAJUtils
operator|.
name|setFaultCode
argument_list|(
name|soapFault
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/faultcode"
argument_list|,
literal|"HandlerFault"
argument_list|)
argument_list|)
expr_stmt|;
name|soapFault
operator|.
name|setFaultString
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// do nothing
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|boolean
name|invokeReversedHandleFault
parameter_list|(
name|MessageContext
name|ctx
parameter_list|)
block|{
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
try|try
block|{
name|int
name|index
init|=
name|invokedHandlers
operator|.
name|size
argument_list|()
operator|-
literal|2
decl_stmt|;
while|while
condition|(
name|index
operator|>=
literal|0
operator|&&
name|continueProcessing
condition|)
block|{
name|Handler
argument_list|<
name|?
extends|extends
name|MessageContext
argument_list|>
name|h
init|=
name|invokedHandlers
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|instanceof
name|LogicalHandler
condition|)
block|{
name|LogicalHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|lh
init|=
operator|(
name|LogicalHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
operator|)
name|h
decl_stmt|;
name|continueProcessing
operator|=
name|lh
operator|.
name|handleFault
argument_list|(
name|logicalMessageContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Handler
argument_list|<
name|MessageContext
argument_list|>
name|ph
init|=
operator|(
name|Handler
argument_list|<
name|MessageContext
argument_list|>
operator|)
name|h
decl_stmt|;
name|continueProcessing
operator|=
name|ph
operator|.
name|handleFault
argument_list|(
name|protocolMessageContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|continueProcessing
condition|)
block|{
name|invokeReversedClose
argument_list|()
expr_stmt|;
break|break;
block|}
name|index
operator|--
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"HANDLER_RAISED_RUNTIME_EXCEPTION"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|invokeReversedClose
argument_list|()
expr_stmt|;
name|continueProcessing
operator|=
literal|false
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|invokeReversedClose
argument_list|()
expr_stmt|;
return|return
name|continueProcessing
return|;
block|}
comment|/*      * close is called on each previously invoked handler in the chain, the      * close method is only called on handlers that were previously invoked via      * either handleMessage or handleFault      */
specifier|private
name|void
name|invokeReversedClose
parameter_list|()
block|{
name|int
name|index
init|=
name|invokedHandlers
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|Handler
argument_list|<
name|?
argument_list|>
name|handler
init|=
name|invokedHandlers
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|LogicalHandler
condition|)
block|{
name|handler
operator|.
name|close
argument_list|(
name|logicalMessageContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|.
name|close
argument_list|(
name|protocolMessageContext
argument_list|)
expr_stmt|;
block|}
name|invokedHandlers
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|index
operator|--
expr_stmt|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|boolean
name|invokeThisHandler
parameter_list|(
name|Handler
argument_list|<
name|?
argument_list|>
name|h
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
comment|// when handler processing has been aborted, only invoke on
comment|// previously invoked handlers
comment|//Only invoke the next handler (take the reversed direction into account)
if|if
condition|(
name|messageDirectionReversed
condition|)
block|{
name|ret
operator|=
name|invokedHandlers
operator|.
name|contains
argument_list|(
name|h
argument_list|)
operator|&&
operator|!
name|isTheLastInvokedHandler
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|&&
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"invoking handler of type "
operator|+
name|h
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|isTheLastInvokedHandler
parameter_list|(
name|Handler
argument_list|<
name|?
argument_list|>
name|h
parameter_list|)
block|{
return|return
name|invokedHandlers
operator|.
name|contains
argument_list|(
name|h
argument_list|)
operator|&&
name|invokedHandlers
operator|.
name|indexOf
argument_list|(
name|h
argument_list|)
operator|==
operator|(
name|invokedHandlers
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
specifier|private
name|void
name|markHandlerInvoked
parameter_list|(
name|Handler
argument_list|<
name|?
argument_list|>
name|h
parameter_list|)
block|{
if|if
condition|(
operator|!
name|invokedHandlers
operator|.
name|contains
argument_list|(
name|h
argument_list|)
condition|)
block|{
name|invokedHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|changeMessageDirection
parameter_list|(
name|MessageContext
name|context
parameter_list|)
block|{
name|outbound
operator|=
operator|!
name|outbound
expr_stmt|;
name|setMessageOutboundProperty
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setMessageOutboundProperty
parameter_list|(
name|MessageContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|,
name|this
operator|.
name|outbound
argument_list|)
expr_stmt|;
if|if
condition|(
name|logicalMessageContext
operator|!=
literal|null
condition|)
block|{
name|logicalMessageContext
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|,
name|this
operator|.
name|outbound
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|protocolMessageContext
operator|!=
literal|null
condition|)
block|{
name|protocolMessageContext
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|,
name|this
operator|.
name|outbound
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Handler
argument_list|<
name|?
argument_list|>
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|reverseHandlerChain
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|handlerChain
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|reversedHandlerChain
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|reversedHandlerChain
operator|.
name|addAll
argument_list|(
name|handlerChain
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|reversedHandlerChain
argument_list|)
expr_stmt|;
return|return
name|reversedHandlerChain
return|;
block|}
specifier|protected
specifier|final
name|void
name|setFault
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fault
operator|=
name|ex
expr_stmt|;
block|}
block|}
end_class

end_unit

