begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|LazyAttachmentCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBindingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|// Do some context mapping work from rt-core to jaxws standard.
end_comment

begin_comment
comment|// NOTE if there are changes in cxf Message property names, this
end_comment

begin_comment
comment|// class should be updated.
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ContextPropertiesMapping
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cxf2jaxwsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jaxws2cxfMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|cxf2jaxwsMap
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|)
expr_stmt|;
name|cxf2jaxwsMap
operator|.
name|put
argument_list|(
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|,
name|BindingProvider
operator|.
name|SESSION_MAINTAIN_PROPERTY
argument_list|)
expr_stmt|;
name|cxf2jaxwsMap
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|MessageContext
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
expr_stmt|;
name|cxf2jaxwsMap
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|MessageContext
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
expr_stmt|;
name|cxf2jaxwsMap
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|,
name|MessageContext
operator|.
name|PATH_INFO
argument_list|)
expr_stmt|;
name|cxf2jaxwsMap
operator|.
name|put
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|,
name|MessageContext
operator|.
name|QUERY_STRING
argument_list|)
expr_stmt|;
name|cxf2jaxwsMap
operator|.
name|put
argument_list|(
literal|"HTTP.REQUEST"
argument_list|,
name|MessageContext
operator|.
name|SERVLET_REQUEST
argument_list|)
expr_stmt|;
name|cxf2jaxwsMap
operator|.
name|put
argument_list|(
literal|"HTTP.RESPONSE"
argument_list|,
name|MessageContext
operator|.
name|SERVLET_RESPONSE
argument_list|)
expr_stmt|;
name|cxf2jaxwsMap
operator|.
name|put
argument_list|(
literal|"HTTP.CONTEXT"
argument_list|,
name|MessageContext
operator|.
name|SERVLET_CONTEXT
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|SESSION_MAINTAIN_PROPERTY
argument_list|,
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|PATH_INFO
argument_list|,
name|Message
operator|.
name|PATH_INFO
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|QUERY_STRING
argument_list|,
name|Message
operator|.
name|QUERY_STRING
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|SERVLET_REQUEST
argument_list|,
literal|"HTTP.REQUEST"
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|SERVLET_RESPONSE
argument_list|,
literal|"HTTP.RESPONSE"
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|SERVLET_CONTEXT
argument_list|,
literal|"HTTP.CONTEXT"
argument_list|)
expr_stmt|;
name|jaxws2cxfMap
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|SOAPACTION_URI_PROPERTY
argument_list|,
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ContextPropertiesMapping
parameter_list|()
block|{              }
specifier|private
specifier|static
name|void
name|mapContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|o
init|=
name|context
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|mapRequestfromJaxws2Cxf
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
block|{
comment|//deal with PROTOCOL_HEADERS mapping
name|Object
name|requestHeaders
init|=
name|context
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|HTTP_REQUEST_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|requestHeaders
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
name|mapJaxws2Cxf
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|mapResponsefromCxf2Jaxws
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
block|{
comment|//deal with PROTOCOL_HEADERS mapping
name|Object
name|responseHeaders
init|=
name|context
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|responseHeaders
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|HTTP_RESPONSE_HEADERS
argument_list|,
name|responseHeaders
argument_list|)
expr_stmt|;
block|}
name|mapContext
argument_list|(
name|context
argument_list|,
name|cxf2jaxwsMap
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ATTACHMENTS
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|dataHandlers
init|=
name|getDHMap
argument_list|(
name|attachments
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|INBOUND_MESSAGE_ATTACHMENTS
argument_list|,
name|dataHandlers
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Scope
argument_list|>
name|scopes
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|WrappedMessageContext
operator|.
name|SCOPES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|scopes
operator|!=
literal|null
condition|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|INBOUND_MESSAGE_ATTACHMENTS
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|mapJaxws2Cxf
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
block|{
name|mapContext
argument_list|(
name|context
argument_list|,
name|jaxws2cxfMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|containsKey
argument_list|(
name|BindingProvider
operator|.
name|USERNAME_PROPERTY
argument_list|)
condition|)
block|{
name|AuthorizationPolicy
name|authPolicy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|authPolicy
operator|.
name|setUserName
argument_list|(
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|BindingProvider
operator|.
name|USERNAME_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|authPolicy
operator|.
name|setPassword
argument_list|(
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|BindingProvider
operator|.
name|PASSWORD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|authPolicy
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|mapCxf2Jaxws
parameter_list|(
name|WrappedMessageContext
name|context
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|cxf2jaxwsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|o
init|=
name|context
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|o
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|context
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|containsKey
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|AuthorizationPolicy
name|authPolicy
init|=
operator|(
name|AuthorizationPolicy
operator|)
name|context
operator|.
name|get
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|USERNAME_PROPERTY
argument_list|,
name|authPolicy
operator|.
name|getUserName
argument_list|()
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|PASSWORD_PROPERTY
argument_list|,
name|authPolicy
operator|.
name|getPassword
argument_list|()
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|MessageContext
name|createWebServiceContext
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|WrappedMessageContext
name|ctx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|exchange
operator|.
name|getInMessage
argument_list|()
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
decl_stmt|;
name|mapCxf2Jaxws
argument_list|(
name|exchange
argument_list|,
name|ctx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
specifier|public
specifier|static
name|void
name|mapCxf2Jaxws
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|WrappedMessageContext
name|ctx
parameter_list|,
name|boolean
name|requestor
parameter_list|)
block|{
name|ctx
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_DESCRIPTION
argument_list|,
name|exchange
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_INTERFACE
argument_list|,
name|exchange
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_INTERFACE
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_OPERATION
argument_list|,
name|exchange
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_PORT
argument_list|,
name|exchange
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_PORT
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_SERVICE
argument_list|,
name|exchange
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_SERVICE
argument_list|)
argument_list|)
expr_stmt|;
name|mapCxf2Jaxws
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Message
name|inMessage
init|=
name|exchange
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
name|Message
name|outMessage
init|=
name|exchange
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|inMessage
operator|==
literal|null
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|ctx
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|)
argument_list|)
condition|)
block|{
comment|//inbound partial responses and stuff are not set in the exchange
name|inMessage
operator|=
name|ctx
operator|.
name|getWrappedMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inMessage
operator|!=
literal|null
condition|)
block|{
name|addMessageAttachments
argument_list|(
name|ctx
argument_list|,
name|inMessage
argument_list|,
name|MessageContext
operator|.
name|INBOUND_MESSAGE_ATTACHMENTS
argument_list|)
expr_stmt|;
name|Object
name|inHeaders
init|=
name|inMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|inHeaders
condition|)
block|{
if|if
condition|(
name|requestor
condition|)
block|{
name|ctx
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|HTTP_RESPONSE_HEADERS
argument_list|,
name|inHeaders
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|HTTP_REQUEST_HEADERS
argument_list|,
name|inHeaders
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
name|outMessage
operator|=
name|exchange
operator|.
name|getOutMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|outMessage
operator|==
literal|null
condition|)
block|{
name|Endpoint
name|ep
init|=
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|outMessage
operator|=
name|ep
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|outMessage
operator|!=
literal|null
condition|)
block|{
name|addMessageAttachments
argument_list|(
name|ctx
argument_list|,
name|outMessage
argument_list|,
name|MessageContext
operator|.
name|OUTBOUND_MESSAGE_ATTACHMENTS
argument_list|)
expr_stmt|;
name|Object
name|outHeaders
init|=
name|outMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|outHeaders
operator|!=
literal|null
operator|&&
operator|!
name|requestor
condition|)
block|{
name|ctx
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|HTTP_REQUEST_HEADERS
argument_list|,
name|outHeaders
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|getDHMap
parameter_list|(
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|dataHandlers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|attachments
operator|instanceof
name|LazyAttachmentCollection
condition|)
block|{
name|dataHandlers
operator|=
operator|(
operator|(
name|LazyAttachmentCollection
operator|)
name|attachments
operator|)
operator|.
name|createDataHandlerMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//preserve the order of iteration
name|dataHandlers
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Attachment
name|attachment
range|:
name|attachments
control|)
block|{
name|dataHandlers
operator|.
name|put
argument_list|(
name|attachment
operator|.
name|getId
argument_list|()
argument_list|,
name|attachment
operator|.
name|getDataHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dataHandlers
return|;
block|}
specifier|private
specifier|static
name|void
name|addMessageAttachments
parameter_list|(
name|WrappedMessageContext
name|ctx
parameter_list|,
name|Message
name|message
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
init|=
name|message
operator|.
name|getAttachments
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|dataHandlers
init|=
name|getDHMap
argument_list|(
name|attachments
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|dataHandlers
operator|==
literal|null
condition|?
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|()
else|:
name|dataHandlers
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|updateWebServiceContext
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MessageContext
name|ctx
parameter_list|)
block|{
comment|//get the context response code and setback to out message
if|if
condition|(
name|ctx
operator|.
name|containsKey
argument_list|(
name|MessageContext
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
condition|)
block|{
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Guard against wrong type associated with header list.
comment|// Need to copy header only if the message is going out.
if|if
condition|(
name|ctx
operator|.
name|containsKey
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
operator|&&
name|ctx
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
operator|&&
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|instanceof
name|SoapMessage
condition|)
block|{
name|SoapMessage
name|sm
init|=
operator|(
name|SoapMessage
operator|)
name|exchange
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
name|Iterator
name|iter
init|=
operator|(
operator|(
name|List
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sm
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|Header
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ctx
operator|.
name|containsKey
argument_list|(
name|MessageContext
operator|.
name|HTTP_RESPONSE_HEADERS
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|other
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|HTTP_RESPONSE_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|heads
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|heads
operator|!=
literal|null
condition|)
block|{
name|heads
operator|.
name|putAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|HTTP_RESPONSE_HEADERS
argument_list|)
argument_list|)
expr_stmt|;
name|heads
operator|=
name|other
expr_stmt|;
block|}
if|if
condition|(
name|heads
operator|.
name|containsKey
argument_list|(
literal|"Content-Type"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ct
init|=
name|heads
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|ct
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|heads
operator|.
name|remove
argument_list|(
literal|"Content-Type"
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|dataHandlers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|OUTBOUND_MESSAGE_ATTACHMENTS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataHandlers
operator|!=
literal|null
operator|&&
operator|!
name|dataHandlers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
init|=
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|.
name|getAttachments
argument_list|()
decl_stmt|;
if|if
condition|(
name|attachments
operator|==
literal|null
condition|)
block|{
name|attachments
operator|=
operator|new
name|ArrayList
argument_list|<
name|Attachment
argument_list|>
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|.
name|setAttachments
argument_list|(
name|attachments
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|entry
range|:
name|dataHandlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Attachment
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|attachments
operator|.
name|add
argument_list|(
name|att
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

unit|}
end_unit

