begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|annotations
operator|.
name|SchemaValidation
operator|.
name|SchemaValidationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|FaultOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|FaultMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_class
specifier|public
class|class
name|WebFaultOutInterceptor
extends|extends
name|FaultOutInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WebFaultOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|WebFaultOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|WebFaultOutInterceptor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|private
name|QName
name|getFaultName
parameter_list|(
name|WebFault
name|wf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|OperationInfo
name|op
parameter_list|)
block|{
name|String
name|ns
init|=
name|wf
operator|.
name|targetNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|ns
operator|=
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
name|String
name|name
init|=
name|wf
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|cls
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
name|WebFault
name|getWebFaultAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
name|WebFault
name|fault
init|=
name|t
operator|.
name|getAnnotation
argument_list|(
name|WebFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fault
operator|==
literal|null
operator|&&
name|t
operator|.
name|getSuperclass
argument_list|()
operator|!=
literal|null
operator|&&
name|Throwable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|t
operator|.
name|getSuperclass
argument_list|()
argument_list|)
condition|)
block|{
name|fault
operator|=
name|getWebFaultAnnotation
argument_list|(
name|t
operator|.
name|getSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fault
return|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Fault
name|f
init|=
operator|(
name|Fault
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Throwable
name|thr
init|=
name|f
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|SOAPFaultException
name|sf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|thr
operator|instanceof
name|SOAPFaultException
condition|)
block|{
name|sf
operator|=
operator|(
name|SOAPFaultException
operator|)
name|thr
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|thr
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SOAPFaultException
condition|)
block|{
name|sf
operator|=
operator|(
name|SOAPFaultException
operator|)
name|thr
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|f
operator|instanceof
name|SoapFault
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|QName
argument_list|>
name|it
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|sf
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultSubcodes
argument_list|()
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|SoapFault
operator|)
name|f
operator|)
operator|.
name|addSubCode
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sf
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultReasonLocales
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Locale
name|lang
init|=
operator|(
name|Locale
operator|)
name|sf
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultReasonLocales
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|convertedLang
init|=
name|lang
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
name|String
name|country
init|=
name|lang
operator|.
name|getCountry
argument_list|()
decl_stmt|;
if|if
condition|(
name|country
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|convertedLang
operator|=
name|convertedLang
operator|+
literal|'-'
operator|+
name|country
expr_stmt|;
block|}
name|f
operator|.
name|setLang
argument_list|(
name|convertedLang
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing;
block|}
name|Throwable
name|cause
init|=
name|f
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|WebFault
name|fault
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|fault
operator|=
name|getWebFaultAnnotation
argument_list|(
name|cause
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|Exception
operator|&&
name|fault
operator|!=
literal|null
condition|)
block|{
name|Exception
name|ex
init|=
operator|(
name|Exception
operator|)
name|cause
decl_stmt|;
name|Object
name|faultInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Method
name|method
init|=
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getFaultInfo"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|faultInfo
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|cause
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|faultInfo
operator|=
name|createFaultInfoBean
argument_list|(
name|fault
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INVOCATION_TARGET_EXC"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_INVOKE"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_INVOKE"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Service
name|service
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|DataWriter
argument_list|<
name|XMLStreamWriter
argument_list|>
name|writer
init|=
name|service
operator|.
name|getDataBinding
argument_list|()
operator|.
name|createWriter
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ServiceUtils
operator|.
name|isSchemaValidationEnabled
argument_list|(
name|SchemaValidationType
operator|.
name|OUT
argument_list|,
name|message
argument_list|)
condition|)
block|{
name|Schema
name|schema
init|=
name|EndpointReferenceUtils
operator|.
name|getSchema
argument_list|(
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
name|OperationInfo
name|op
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
operator|.
name|getOperationInfo
argument_list|()
decl_stmt|;
name|QName
name|faultName
init|=
name|getFaultName
argument_list|(
name|fault
argument_list|,
name|cause
operator|.
name|getClass
argument_list|()
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
name|getFaultMessagePart
argument_list|(
name|faultName
argument_list|,
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|hasDetails
argument_list|()
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|faultInfo
argument_list|,
name|part
argument_list|,
operator|new
name|W3CDOMStreamWriter
argument_list|(
name|f
operator|.
name|getDetail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|faultInfo
argument_list|,
name|part
argument_list|,
operator|new
name|W3CDOMStreamWriter
argument_list|(
name|f
operator|.
name|getOrCreateDetail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|getDetail
argument_list|()
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|f
operator|.
name|setDetail
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|f
operator|.
name|setMessage
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|nex
parameter_list|)
block|{
if|if
condition|(
name|nex
operator|instanceof
name|Fault
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|nex
argument_list|)
expr_stmt|;
name|super
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//if exception occurs while writing a fault, we'll just let things continue
comment|//and let the rest of the chain try handling it as is.
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"EXCEPTION_WHILE_WRITING_FAULT"
argument_list|,
name|nex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|FaultMode
name|mode
init|=
name|message
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|FaultMode
operator|.
name|CHECKED_APPLICATION_FAULT
condition|)
block|{
comment|//only convert checked exceptions with this
comment|//otherwise delegate down to the normal protocol specific stuff
name|super
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Object
name|createFaultInfoBean
parameter_list|(
name|WebFault
name|fault
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fault
operator|.
name|faultBean
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|fault
operator|.
name|faultBean
argument_list|()
argument_list|,
name|cause
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
name|Object
name|ret
init|=
name|cls
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|//copy props
name|Method
name|meth
index|[]
init|=
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|meth
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
operator|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|||
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|String
name|name
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"set"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|"set"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|Method
name|m2
init|=
name|cls
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
decl_stmt|;
name|m2
operator|.
name|invoke
argument_list|(
name|ret
argument_list|,
name|m
operator|.
name|invoke
argument_list|(
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e1
parameter_list|)
block|{
comment|//ignore
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Using @WebFault annotated class "
operator|+
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" as faultInfo since getFaultInfo() was not found"
argument_list|)
expr_stmt|;
return|return
name|cause
return|;
block|}
specifier|private
name|MessagePartInfo
name|getFaultMessagePart
parameter_list|(
name|QName
name|qname
parameter_list|,
name|OperationInfo
name|op
parameter_list|)
block|{
for|for
control|(
name|FaultInfo
name|faultInfo
range|:
name|op
operator|.
name|getFaults
argument_list|()
control|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|faultInfo
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|String
name|ns
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mpi
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|ns
operator|=
name|mpi
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ns
operator|=
name|mpi
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|mpi
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|&&
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
return|return
name|mpi
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

