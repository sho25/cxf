begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|AttachmentPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MimeHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MimeHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap12
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|NodeDataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractInDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractOutDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AttachmentOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|logical
operator|.
name|DispatchLogicalHandlerInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|XMLMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLConstants
import|;
end_import

begin_class
specifier|public
class|class
name|DispatchOutDatabindingInterceptor
extends|extends
name|AbstractOutDatabindingInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DispatchOutDatabindingInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DispatchOutDatabindingEndingInterceptor
name|ending
decl_stmt|;
specifier|private
name|Service
operator|.
name|Mode
name|mode
decl_stmt|;
specifier|public
name|DispatchOutDatabindingInterceptor
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|Phase
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|ending
operator|=
operator|new
name|DispatchOutDatabindingEndingInterceptor
argument_list|()
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Object
name|obj
init|=
literal|null
decl_stmt|;
name|Object
name|result
init|=
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|obj
operator|=
operator|(
operator|(
name|List
operator|)
name|result
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|obj
operator|=
name|message
operator|.
name|getContent
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|removeContent
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"DISPATCH_OBJECT_CANNOT_BE_NULL"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|message
operator|instanceof
name|SoapMessage
condition|)
block|{
name|Source
name|source
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|Service
operator|.
name|Mode
operator|.
name|PAYLOAD
condition|)
block|{
name|source
operator|=
name|handlePayloadMode
argument_list|(
name|obj
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|obj
operator|instanceof
name|DataSource
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"DISPATCH_OBJECT_NOT_SUPPORTED_SOAPBINDING"
argument_list|,
name|LOG
argument_list|,
literal|"DataSource"
argument_list|,
literal|"MESSAGE"
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|SOAPMessage
condition|)
block|{
name|source
operator|=
name|handleSOAPMessage
argument_list|(
name|obj
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Source
condition|)
block|{
name|source
operator|=
operator|(
name|Source
operator|)
name|obj
expr_stmt|;
block|}
block|}
name|PostDispatchOutLogicalHandlerInterceptor
name|postSoap
init|=
operator|new
name|PostDispatchOutLogicalHandlerInterceptor
argument_list|()
decl_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|postSoap
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|XMLMessage
condition|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SOAPMessage
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"DISPATCH_OBJECT_NOT_SUPPORTED_XMLBINDING"
argument_list|,
name|LOG
argument_list|,
literal|"SOAPMessage"
argument_list|,
literal|"PAYLOAD/MESSAGE"
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|mode
operator|==
name|Service
operator|.
name|Mode
operator|.
name|PAYLOAD
operator|&&
name|obj
operator|instanceof
name|DataSource
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"DISPATCH_OBJECT_NOT_SUPPORTED_XMLBINDING"
argument_list|,
name|LOG
argument_list|,
literal|"DataSource"
argument_list|,
literal|"PAYLOAD"
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|DataSource
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|DataSource
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Source
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// JAXB element
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
name|service
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataWriter
argument_list|<
name|XMLStreamWriter
argument_list|>
name|dataWriter
init|=
name|getDataWriter
argument_list|(
name|message
argument_list|,
name|service
argument_list|,
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|W3CDOMStreamWriter
name|xmlWriter
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|dataWriter
operator|.
name|write
argument_list|(
name|obj
argument_list|,
name|xmlWriter
argument_list|)
expr_stmt|;
name|Source
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|xmlWriter
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"EXCEPTION_WRITING_OBJECT"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|ending
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Source
name|handleSOAPMessage
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|SOAPMessage
name|soapMessage
init|=
operator|(
name|SOAPMessage
operator|)
name|obj
decl_stmt|;
try|try
block|{
comment|//workaround bug in Sun SAAJ impl
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e1
parameter_list|)
block|{
comment|//ignore
block|}
name|Source
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|soapMessage
operator|.
name|countAttachments
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|getAttachments
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|setAttachments
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Attachment
argument_list|>
argument_list|(
name|soapMessage
operator|.
name|countAttachments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|AttachmentPart
argument_list|>
name|it
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|soapMessage
operator|.
name|getAttachments
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AttachmentPart
name|part
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|AttachmentImpl
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|part
operator|.
name|getContentId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|att
operator|.
name|setDataHandler
argument_list|(
name|part
operator|.
name|getDataHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Iterator
argument_list|<
name|MimeHeader
argument_list|>
name|it2
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|part
operator|.
name|getAllMimeHeaders
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MimeHeader
name|header
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|att
operator|.
name|setHeader
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|getAttachments
argument_list|()
operator|.
name|add
argument_list|(
name|att
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|source
return|;
block|}
specifier|private
name|Source
name|handlePayloadMode
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|Source
name|source
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|SOAPMessage
operator|||
name|obj
operator|instanceof
name|DataSource
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"DISPATCH_OBJECT_NOT_SUPPORTED_SOAPBINDING"
argument_list|,
name|LOG
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"PAYLOAD"
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Source
condition|)
block|{
name|source
operator|=
operator|(
name|Source
operator|)
name|obj
expr_stmt|;
block|}
else|else
block|{
comment|//JAXB
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
name|service
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|SOAPMessage
name|msg
init|=
name|newSOAPMessage
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|SoapMessage
operator|)
name|message
operator|)
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|DataWriter
argument_list|<
name|Node
argument_list|>
name|dataWriter
init|=
name|getDataWriter
argument_list|(
name|message
argument_list|,
name|service
argument_list|,
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
name|dataWriter
operator|.
name|write
argument_list|(
name|obj
argument_list|,
name|msg
operator|.
name|getSOAPBody
argument_list|()
argument_list|)
expr_stmt|;
comment|//msg.writeTo(System.out);
name|source
operator|=
operator|new
name|DOMSource
argument_list|(
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|msg
operator|.
name|getSOAPBody
argument_list|()
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"EXCEPTION_WRITING_OBJECT"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|source
return|;
block|}
specifier|private
class|class
name|DispatchOutDatabindingEndingInterceptor
extends|extends
name|AbstractOutDatabindingInterceptor
block|{
specifier|public
name|DispatchOutDatabindingEndingInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|WRITE_ENDING
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|XMLStreamWriter
name|xmlWriter
init|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|SOAPMessage
name|soapMessage
init|=
name|message
operator|.
name|getContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataSource
name|dataSource
init|=
name|message
operator|.
name|getContent
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|xmlWriter
operator|!=
literal|null
condition|)
block|{
name|xmlWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|soapMessage
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|heads
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|heads
operator|==
literal|null
condition|)
block|{
name|heads
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|heads
argument_list|)
expr_stmt|;
block|}
name|soapMessage
operator|.
name|saveChanges
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|MimeHeader
argument_list|>
name|smh
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|soapMessage
operator|.
name|getMimeHeaders
argument_list|()
operator|.
name|getAllHeaders
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|smh
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MimeHeader
name|head
init|=
name|smh
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"Content-Type"
operator|.
name|equals
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|head
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
literal|"Content-Length"
operator|.
name|equals
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|heads
operator|.
name|containsKey
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|heads
operator|.
name|put
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|heads
operator|.
name|get
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|head
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|OutputStream
name|os
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|soapMessage
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|getAttachments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|getAttachments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|AttachmentOutInterceptor
operator|.
name|WRITE_ATTACHMENTS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
operator|new
name|AttachmentOutInterceptor
argument_list|()
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|os
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTransform
argument_list|(
name|source
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|getAttachments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|getAttachments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|AttachmentOutInterceptor
operator|.
name|WRITE_ATTACHMENTS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
operator|new
name|AttachmentOutInterceptor
argument_list|()
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|os
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTransform
argument_list|(
name|dataSource
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"EXCEPTION_WRITING_OBJECT"
argument_list|,
name|LOG
argument_list|,
name|ex
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|//This interceptor is invoked after DispatchLogicalHandlerInterceptor, converts Source to SOAPMessage
specifier|private
class|class
name|PostDispatchOutLogicalHandlerInterceptor
extends|extends
name|AbstractInDatabindingInterceptor
block|{
specifier|public
name|PostDispatchOutLogicalHandlerInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_MARSHAL
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|DispatchLogicalHandlerInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Object
name|obj
init|=
literal|null
decl_stmt|;
comment|//Convert Source to SOAPMessage
if|if
condition|(
name|message
operator|instanceof
name|SoapMessage
condition|)
block|{
name|Source
name|source
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|removeContent
argument_list|(
name|Source
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//workaround bug in Sun SAAJ impl where
comment|//source doesn't work if the SOAPPart was already
comment|//created from a source
if|if
condition|(
name|source
operator|instanceof
name|DOMSource
condition|)
block|{
name|DOMSource
name|ds
init|=
operator|(
name|DOMSource
operator|)
name|source
decl_stmt|;
if|if
condition|(
name|ds
operator|.
name|getNode
argument_list|()
operator|instanceof
name|SOAPPart
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|SOAPPart
operator|)
name|ds
operator|.
name|getNode
argument_list|()
operator|)
operator|.
name|getEnvelope
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
if|if
condition|(
name|mode
operator|==
name|Service
operator|.
name|Mode
operator|.
name|PAYLOAD
condition|)
block|{
comment|// Input is Source in payload mode, need to wrap it
comment|// with a SOAPMessage
try|try
block|{
name|obj
operator|=
name|newSOAPMessage
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|SoapMessage
operator|)
name|message
operator|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|DataWriter
argument_list|<
name|Node
argument_list|>
name|dataWriter
init|=
operator|new
name|NodeDataWriter
argument_list|()
decl_stmt|;
name|dataWriter
operator|.
name|write
argument_list|(
name|source
argument_list|,
operator|(
operator|(
name|SOAPMessage
operator|)
name|obj
operator|)
operator|.
name|getSOAPBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"EXCEPTION_WRITING_OBJECT"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|SoapVersion
name|version
init|=
operator|(
operator|(
name|SoapMessage
operator|)
name|message
operator|)
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|MessageFactory
name|msgFactory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
operator|||
name|version
operator|instanceof
name|Soap11
condition|)
block|{
name|msgFactory
operator|=
name|MessageFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|instanceof
name|Soap12
condition|)
block|{
name|msgFactory
operator|=
name|MessageFactory
operator|.
name|newInstance
argument_list|(
name|SOAPConstants
operator|.
name|SOAP_1_2_PROTOCOL
argument_list|)
expr_stmt|;
block|}
name|SOAPMessage
name|msg
init|=
name|msgFactory
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|setContent
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getAttachments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Attachment
name|att
range|:
name|message
operator|.
name|getAttachments
argument_list|()
control|)
block|{
name|AttachmentPart
name|part
init|=
name|msg
operator|.
name|createAttachmentPart
argument_list|(
name|att
operator|.
name|getDataHandler
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|att
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setContentId
argument_list|(
name|att
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|att
operator|.
name|getHeaderNames
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|s
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|part
operator|.
name|setMimeHeader
argument_list|(
name|s
argument_list|,
name|att
operator|.
name|getHeader
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|addAttachmentPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|msg
operator|.
name|saveChanges
argument_list|()
expr_stmt|;
name|obj
operator|=
name|msg
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|message
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|SOAPMessage
name|newSOAPMessage
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|SoapVersion
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|SOAPMessage
name|msg
init|=
literal|null
decl_stmt|;
name|MimeHeaders
name|headers
init|=
operator|new
name|MimeHeaders
argument_list|()
decl_stmt|;
name|MessageFactory
name|msgFactory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
operator|||
name|version
operator|instanceof
name|Soap11
condition|)
block|{
name|msgFactory
operator|=
name|MessageFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|instanceof
name|Soap12
condition|)
block|{
name|msgFactory
operator|=
name|MessageFactory
operator|.
name|newInstance
argument_list|(
name|SOAPConstants
operator|.
name|SOAP_1_2_PROTOCOL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|msgFactory
operator|.
name|createMessage
argument_list|(
name|headers
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|msgFactory
operator|.
name|createMessage
argument_list|()
expr_stmt|;
block|}
name|msg
operator|.
name|setProperty
argument_list|(
name|SOAPMessage
operator|.
name|WRITE_XML_DECLARATION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
operator|.
name|addNamespaceDeclaration
argument_list|(
name|WSDLConstants
operator|.
name|NP_SCHEMA_XSD
argument_list|,
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
operator|.
name|addNamespaceDeclaration
argument_list|(
name|WSDLConstants
operator|.
name|NP_SCHEMA_XSI
argument_list|,
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSI
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|private
name|void
name|doTransform
parameter_list|(
name|Object
name|obj
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Source
condition|)
block|{
name|Transformer
name|transformer
init|=
name|XMLUtils
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
operator|(
name|Source
operator|)
name|obj
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|os
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|DataSource
condition|)
block|{
name|InputStream
name|is
init|=
operator|(
operator|(
name|DataSource
operator|)
name|obj
operator|)
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

