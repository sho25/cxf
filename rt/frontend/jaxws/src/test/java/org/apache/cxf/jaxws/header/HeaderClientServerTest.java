begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|header
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|AbstractJaxWsTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|SOAPHeaderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|TestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|TestHeaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|rpc
operator|.
name|SOAPRPCHeaderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|rpc
operator|.
name|TestRPCHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|rpc
operator|.
name|TestRPCHeaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|rpc
operator|.
name|types
operator|.
name|HeaderMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader1Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader2Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader5ResponseBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader6
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|header_test
operator|.
name|types
operator|.
name|TestHeader6Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tests
operator|.
name|type_test
operator|.
name|all
operator|.
name|SimpleAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tests
operator|.
name|type_test
operator|.
name|choice
operator|.
name|SimpleChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tests
operator|.
name|type_test
operator|.
name|sequence
operator|.
name|SimpleStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|HeaderClientServerTest
extends|extends
name|AbstractJaxWsTest
block|{
specifier|private
specifier|final
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/header_test"
argument_list|,
literal|"SOAPHeaderService"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/header_test"
argument_list|,
literal|"SoapHeaderPort"
argument_list|)
decl_stmt|;
specifier|private
name|EndpointImpl
name|endpoint
decl_stmt|;
specifier|private
name|EndpointImpl
name|rpcEndpoint
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|implementor
init|=
operator|new
name|TestHeaderImpl
argument_list|()
decl_stmt|;
name|String
name|address
init|=
literal|"http://localhost:9104/SoapHeaderContext/SoapHeaderPort"
decl_stmt|;
name|endpoint
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|address
argument_list|,
name|implementor
argument_list|)
expr_stmt|;
name|implementor
operator|=
operator|new
name|TestRPCHeaderImpl
argument_list|()
expr_stmt|;
name|address
operator|=
literal|"http://localhost:9104/SoapHeaderRPCContext/SoapHeaderRPCPort"
expr_stmt|;
name|rpcEndpoint
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|address
argument_list|,
name|implementor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopendpoints
parameter_list|()
block|{
if|if
condition|(
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rpcEndpoint
operator|!=
literal|null
condition|)
block|{
name|rpcEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|endpoint
operator|=
literal|null
expr_stmt|;
name|rpcEndpoint
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPHeaderService
name|service
init|=
operator|new
name|SOAPHeaderService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestHeader
name|proxy
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|TestHeader
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|TestHeader1
name|val
init|=
operator|new
name|TestHeader1
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|TestHeader1Response
name|returnVal
init|=
name|proxy
operator|.
name|testHeader1
argument_list|(
name|val
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|returnVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestHeader1
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|returnVal
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPHeaderService
name|service
init|=
operator|new
name|SOAPHeaderService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestHeader
name|proxy
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|TestHeader
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|TestHeader2
name|in
init|=
operator|new
name|TestHeader2
argument_list|()
decl_stmt|;
name|String
name|val
init|=
operator|new
name|String
argument_list|(
name|TestHeader2Response
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|TestHeader2Response
argument_list|>
name|out
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|TestHeader2Response
argument_list|>
name|outHeader
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|val
operator|+=
name|idx
expr_stmt|;
name|in
operator|.
name|setRequestType
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|testHeader2
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|outHeader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|out
operator|.
name|value
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|outHeader
operator|.
name|value
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInOutHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPHeaderService
name|service
init|=
operator|new
name|SOAPHeaderService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestHeader
name|proxy
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|TestHeader
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|TestHeader3
name|in
init|=
operator|new
name|TestHeader3
argument_list|()
decl_stmt|;
name|String
name|val
init|=
operator|new
name|String
argument_list|(
name|TestHeader3
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|TestHeader3
argument_list|>
name|inoutHeader
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|val
operator|+=
name|idx
expr_stmt|;
name|in
operator|.
name|setRequestType
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|inoutHeader
operator|.
name|value
operator|=
operator|new
name|TestHeader3
argument_list|()
expr_stmt|;
name|TestHeader3Response
name|returnVal
init|=
name|proxy
operator|.
name|testHeader3
argument_list|(
name|in
argument_list|,
name|inoutHeader
argument_list|)
decl_stmt|;
comment|//inoutHeader copied to return
comment|//in copied to inoutHeader
name|assertNotNull
argument_list|(
name|returnVal
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|returnVal
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|inoutHeader
operator|.
name|value
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|setRequestType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|inoutHeader
operator|.
name|value
operator|.
name|setRequestType
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|returnVal
operator|=
name|proxy
operator|.
name|testHeader3
argument_list|(
name|in
argument_list|,
name|inoutHeader
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|returnVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|returnVal
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|inoutHeader
operator|.
name|value
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReturnHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPHeaderService
name|service
init|=
operator|new
name|SOAPHeaderService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestHeader
name|proxy
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|TestHeader
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|Holder
argument_list|<
name|TestHeader5ResponseBody
argument_list|>
name|out
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|TestHeader5
argument_list|>
name|outHeader
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|TestHeader5
name|in
init|=
operator|new
name|TestHeader5
argument_list|()
decl_stmt|;
name|String
name|val
init|=
operator|new
name|String
argument_list|(
name|TestHeader5
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|val
operator|+=
name|idx
expr_stmt|;
name|in
operator|.
name|setRequestType
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|testHeader5
argument_list|(
name|out
argument_list|,
name|outHeader
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|out
operator|.
name|value
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|outHeader
operator|.
name|value
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeaderPartBeforeBodyPart
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPHeaderService
name|service
init|=
operator|new
name|SOAPHeaderService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestHeader
name|proxy
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|TestHeader
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestHeader6
name|in
init|=
operator|new
name|TestHeader6
argument_list|()
decl_stmt|;
name|String
name|val
init|=
operator|new
name|String
argument_list|(
name|TestHeader6
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|TestHeader3
argument_list|>
name|inoutHeader
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|1
condition|;
name|idx
operator|++
control|)
block|{
name|val
operator|+=
name|idx
expr_stmt|;
name|in
operator|.
name|setRequestType
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|inoutHeader
operator|.
name|value
operator|=
operator|new
name|TestHeader3
argument_list|()
expr_stmt|;
name|TestHeader6Response
name|returnVal
init|=
name|proxy
operator|.
name|testHeaderPartBeforeBodyPart
argument_list|(
name|inoutHeader
argument_list|,
name|in
argument_list|)
decl_stmt|;
comment|//inoutHeader copied to return
comment|//in copied to inoutHeader
name|assertNotNull
argument_list|(
name|returnVal
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|returnVal
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|inoutHeader
operator|.
name|value
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|setRequestType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|inoutHeader
operator|.
name|value
operator|.
name|setRequestType
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|returnVal
operator|=
name|proxy
operator|.
name|testHeaderPartBeforeBodyPart
argument_list|(
name|inoutHeader
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|returnVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|returnVal
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|inoutHeader
operator|.
name|value
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeader4
parameter_list|()
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPHeaderService
name|service
init|=
operator|new
name|SOAPHeaderService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestHeader
name|proxy
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|TestHeader
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|testHeader4
argument_list|(
literal|"cxf"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// REVISIT
comment|// fail("No exception should happen in testHeader4");
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeader7
parameter_list|()
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPHeaderService
name|service
init|=
operator|new
name|SOAPHeaderService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestHeader
name|proxy
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|TestHeader
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|proxy
operator|.
name|testHeader7
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRPCInHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader_rpc.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPRPCHeaderService
name|service
init|=
operator|new
name|SOAPRPCHeaderService
argument_list|(
name|wsdl
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://apache.org/header_test/rpc"
argument_list|,
literal|"SOAPRPCHeaderService"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestRPCHeader
name|proxy
init|=
name|service
operator|.
name|getSoapRPCHeaderPort
argument_list|()
decl_stmt|;
try|try
block|{
name|HeaderMessage
name|header
init|=
operator|new
name|HeaderMessage
argument_list|()
decl_stmt|;
name|header
operator|.
name|setHeaderVal
argument_list|(
literal|"header"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|returnVal
init|=
name|proxy
operator|.
name|testHeader1
argument_list|(
name|header
argument_list|,
literal|"part"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|returnVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"part/header"
argument_list|,
name|returnVal
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRPCInOutHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader_rpc.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPRPCHeaderService
name|service
init|=
operator|new
name|SOAPRPCHeaderService
argument_list|(
name|wsdl
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://apache.org/header_test/rpc"
argument_list|,
literal|"SOAPRPCHeaderService"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestRPCHeader
name|proxy
init|=
name|service
operator|.
name|getSoapRPCHeaderPort
argument_list|()
decl_stmt|;
try|try
block|{
name|HeaderMessage
name|header
init|=
operator|new
name|HeaderMessage
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|HeaderMessage
argument_list|>
name|holder
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|header
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|holder
operator|.
name|value
operator|.
name|setHeaderVal
argument_list|(
literal|"header"
operator|+
name|idx
argument_list|)
expr_stmt|;
name|String
name|returnVal
init|=
name|proxy
operator|.
name|testInOutHeader
argument_list|(
literal|"part"
operator|+
name|idx
argument_list|,
name|holder
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|returnVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"header"
operator|+
name|idx
argument_list|,
name|returnVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"part"
operator|+
name|idx
argument_list|,
name|holder
operator|.
name|value
operator|.
name|getHeaderVal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHolderOutIsTheFirstMessagePart
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/soapheader.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPHeaderService
name|service
init|=
operator|new
name|SOAPHeaderService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|TestHeader
name|proxy
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|TestHeader
operator|.
name|class
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SimpleAll
argument_list|>
name|simpleAll
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleAll
name|sa
init|=
operator|new
name|SimpleAll
argument_list|()
decl_stmt|;
name|sa
operator|.
name|setVarAttrString
argument_list|(
literal|"varAttrString"
argument_list|)
expr_stmt|;
name|sa
operator|.
name|setVarInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|sa
operator|.
name|setVarString
argument_list|(
literal|"varString"
argument_list|)
expr_stmt|;
name|simpleAll
operator|.
name|value
operator|=
name|sa
expr_stmt|;
name|SimpleChoice
name|sc
init|=
operator|new
name|SimpleChoice
argument_list|()
decl_stmt|;
name|sc
operator|.
name|setVarString
argument_list|(
literal|"scVarString"
argument_list|)
expr_stmt|;
name|SimpleStruct
name|ss
init|=
name|proxy
operator|.
name|sendReceiveAnyType
argument_list|(
name|simpleAll
argument_list|,
name|sc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|simpleAll
operator|.
name|value
operator|.
name|getVarString
argument_list|()
argument_list|,
literal|"scVarString"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ss
operator|.
name|getVarInt
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ss
operator|.
name|getVarAttrString
argument_list|()
argument_list|,
literal|"varAttrStringRet"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

