begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|WebServiceContextImplTest
extends|extends
name|Assert
block|{
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|WebServiceContextImpl
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetMessageContext
parameter_list|()
block|{
name|WebServiceContextImpl
name|wsci
init|=
operator|new
name|WebServiceContextImpl
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|wsci
operator|.
name|getMessageContext
argument_list|()
argument_list|)
expr_stmt|;
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
specifier|final
name|MessageContext
name|ctx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|WebServiceContextImpl
operator|.
name|setMessageContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ctx
argument_list|,
name|wsci
operator|.
name|getMessageContext
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|WebServiceContextImpl
name|threadLocalWSCI
init|=
operator|new
name|WebServiceContextImpl
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|threadLocalWSCI
operator|.
name|getMessageContext
argument_list|()
argument_list|)
expr_stmt|;
name|MessageImpl
name|msg1
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|MessageContext
name|threadLocalCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg1
argument_list|)
decl_stmt|;
name|WebServiceContextImpl
operator|.
name|setMessageContext
argument_list|(
name|threadLocalCtx
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|threadLocalCtx
argument_list|,
name|threadLocalWSCI
operator|.
name|getMessageContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ctx
operator|!=
name|threadLocalWSCI
operator|.
name|getMessageContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// CXF-3989
annotation|@
name|Test
specifier|public
name|void
name|testSetHttpRequestHeadersScope
parameter_list|()
block|{
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|MessageContext
name|context
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"Value1"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"Header1"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|HTTP_REQUEST_HEADERS
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|context
operator|.
name|setScope
argument_list|(
name|MessageContext
operator|.
name|HTTP_REQUEST_HEADERS
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

