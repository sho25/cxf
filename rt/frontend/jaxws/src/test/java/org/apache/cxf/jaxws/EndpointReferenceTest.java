begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|EndpointReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceFeature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|spi
operator|.
name|ProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|GreeterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|EndpointReferenceTest
extends|extends
name|AbstractJaxWsTest
block|{
specifier|private
specifier|final
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testBindingProviderSOAPBinding
parameter_list|()
throws|throws
name|Exception
block|{
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
name|s
init|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|create
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|s
operator|.
name|getPort
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingProvider
name|bindingProvider
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|EndpointReference
name|er
init|=
name|bindingProvider
operator|.
name|getEndpointReference
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|er
argument_list|)
expr_stmt|;
comment|//If the BindingProvider instance has a binding that is either SOAP 1.1/HTTP or SOAP
comment|//1.2/HTTP, then a W3CEndpointReference MUST be returned.
name|assertTrue
argument_list|(
name|er
operator|instanceof
name|W3CEndpointReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindingProviderSOAPBindingStaicService
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|SOAPService
name|s
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|SOAPService
argument_list|()
decl_stmt|;
name|Greeter
name|greeter
init|=
name|s
operator|.
name|getPort
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingProvider
name|bindingProvider
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|EndpointReference
name|er
init|=
name|bindingProvider
operator|.
name|getEndpointReference
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|er
argument_list|)
expr_stmt|;
comment|//If the BindingProvider instance has a binding that is either SOAP 1.1/HTTP or SOAP
comment|//1.2/HTTP, then a W3CEndpointReference MUST be returned.
name|assertTrue
argument_list|(
name|er
operator|instanceof
name|W3CEndpointReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindingProviderXMLBindingStaticService
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|XMLService
name|s
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|XMLService
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|Greeter
name|greeter
init|=
name|s
operator|.
name|getXMLPort
argument_list|()
decl_stmt|;
name|BindingProvider
name|bindingProvider
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
comment|//If the binding is XML/HTTP an java.lang.UnsupportedOperationException MUST be thrown.
try|try
block|{
name|bindingProvider
operator|.
name|getEndpointReference
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Did not get expected UnsupportedOperationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|//do nothing
block|}
block|}
comment|/*      * Any JAX-WS supported epr metadata MUST match the Service instances      * ServiceName, otherwise a WebServiceExeption MUST be thrown. Any JAX-WS      * supported epr metadata MUST match the PortName for the sei, otherwise a      * WebServiceException MUST be thrown. If the Service instance has an      * associated WSDL, its WSDL MUST be used to determine any binding      * information, anyWSDL in a JAX-WS suppported epr metadata MUST be ignored.      * If the Service instance does not have a WSDL, then any WSDL inlined in      * the JAX-WS supported metadata of the epr MUST be used to determine      * binding information. If there is not enough metadata in the Service      * instance or in the epr metadata to determine a port, then a      * WebServiceException MUST be thrown.      */
annotation|@
name|Test
specifier|public
name|void
name|testServiceGetPortUsingEndpointReference
parameter_list|()
throws|throws
name|Exception
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|GreeterImpl
name|greeter1
init|=
operator|new
name|GreeterImpl
argument_list|()
decl_stmt|;
try|try
init|(
name|EndpointImpl
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|greeter1
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:8080/test"
argument_list|)
expr_stmt|;
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
name|s
init|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|create
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/hello_world_soap_http_infoset.xml"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|DOMSource
name|erXML
init|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|EndpointReference
name|endpointReference
init|=
name|EndpointReference
operator|.
name|readFrom
argument_list|(
name|erXML
argument_list|)
decl_stmt|;
name|WebServiceFeature
index|[]
name|wfs
init|=
operator|new
name|WebServiceFeature
index|[]
block|{}
decl_stmt|;
name|Greeter
name|greeter
init|=
name|s
operator|.
name|getPort
argument_list|(
name|endpointReference
argument_list|,
name|Greeter
operator|.
name|class
argument_list|,
name|wfs
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"John"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello John"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpointReferenceGetPort
parameter_list|()
throws|throws
name|Exception
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|GreeterImpl
name|greeter1
init|=
operator|new
name|GreeterImpl
argument_list|()
decl_stmt|;
try|try
init|(
name|EndpointImpl
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|greeter1
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:8080/test"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/hello_world_soap_http_infoset.xml"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|DOMSource
name|erXML
init|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|EndpointReference
name|endpointReference
init|=
name|EndpointReference
operator|.
name|readFrom
argument_list|(
name|erXML
argument_list|)
decl_stmt|;
name|WebServiceFeature
index|[]
name|wfs
init|=
operator|new
name|WebServiceFeature
index|[]
block|{}
decl_stmt|;
name|Greeter
name|greeter
init|=
name|endpointReference
operator|.
name|getPort
argument_list|(
name|Greeter
operator|.
name|class
argument_list|,
name|wfs
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"John"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello John"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpointGetEndpointReferenceSOAPBinding
parameter_list|()
throws|throws
name|Exception
block|{
name|GreeterImpl
name|greeter
init|=
operator|new
name|GreeterImpl
argument_list|()
decl_stmt|;
try|try
init|(
name|EndpointImpl
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|greeter
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:8080/test"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/hello_world_soap_http_infoset.xml"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Element
name|referenceParameters
init|=
name|fetchElementByNameAttribute
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"wsa:ReferenceParameters"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|EndpointReference
name|endpointReference
init|=
name|endpoint
operator|.
name|getEndpointReference
argument_list|(
name|referenceParameters
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpointReference
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpointReference
operator|instanceof
name|W3CEndpointReference
argument_list|)
expr_stmt|;
comment|//A returned W3CEndpointReferenceMUST also contain the specified referenceParameters.
comment|//W3CEndpointReference wer = (W3CEndpointReference)endpointReference;
name|endpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Not implemented yet"
argument_list|)
specifier|public
name|void
name|testEndpointGetEndpointReferenceXMLBinding
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|Greeter
name|greeter
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|GreeterImpl
argument_list|()
decl_stmt|;
try|try
init|(
name|EndpointImpl
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|greeter
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:8080/test"
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/hello_world_soap_http_infoset.xml"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Element
name|referenceParameters
init|=
name|fetchElementByNameAttribute
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"wsa:ReferenceParameters"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getEndpointReference
argument_list|(
name|referenceParameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not get expected UnsupportedOperationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|//do nothing
block|}
name|endpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpointGetEndpointReferenceW3C
parameter_list|()
throws|throws
name|Exception
block|{
name|GreeterImpl
name|greeter
init|=
operator|new
name|GreeterImpl
argument_list|()
decl_stmt|;
try|try
init|(
name|EndpointImpl
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|greeter
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:8080/test"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/hello_world_soap_http_infoset.xml"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Element
name|referenceParameters
init|=
name|fetchElementByNameAttribute
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"wsa:ReferenceParameters"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|EndpointReference
name|endpointReference
init|=
name|endpoint
operator|.
name|getEndpointReference
argument_list|(
name|W3CEndpointReference
operator|.
name|class
argument_list|,
name|referenceParameters
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpointReference
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpointReference
operator|instanceof
name|W3CEndpointReference
argument_list|)
expr_stmt|;
comment|//A returned W3CEndpointReferenceMUST also contain the specified referenceParameters.
comment|//W3CEndpointReference wer = (W3CEndpointReference)endpointReference;
name|endpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpointGetEndpointReferenceInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|GreeterImpl
name|greeter
init|=
operator|new
name|GreeterImpl
argument_list|()
decl_stmt|;
try|try
init|(
name|EndpointImpl
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|greeter
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:8080/test"
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/hello_world_soap_http_infoset.xml"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Element
name|referenceParameters
init|=
name|fetchElementByNameAttribute
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"wsa:ReferenceParameters"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getEndpointReference
argument_list|(
name|MyEndpointReference
operator|.
name|class
argument_list|,
name|referenceParameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not get expected WebServiceException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|endpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProviderReadEndpointReference
parameter_list|()
throws|throws
name|Exception
block|{
name|ProviderImpl
name|provider
init|=
operator|new
name|ProviderImpl
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/hello_world_soap_http_infoset.xml"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|DOMSource
name|erXML
init|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|EndpointReference
name|endpointReference
init|=
name|provider
operator|.
name|readEndpointReference
argument_list|(
name|erXML
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpointReference
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpointReference
operator|instanceof
name|W3CEndpointReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProviderCreateW3CEndpointReference
parameter_list|()
throws|throws
name|Exception
block|{
name|ProviderImpl
name|provider
init|=
operator|new
name|ProviderImpl
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/hello_world_soap_http_infoset.xml"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Element
name|referenceParameter
init|=
name|fetchElementByNameAttribute
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"wsa:ReferenceParameters"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|referenceParameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|referenceParameter
operator|!=
literal|null
condition|)
block|{
name|referenceParameters
operator|.
name|add
argument_list|(
name|referenceParameter
argument_list|)
expr_stmt|;
block|}
name|Element
name|metadata
init|=
name|fetchElementByNameAttribute
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"wsa:metadata"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|metadataList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|metadataList
operator|.
name|add
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
name|W3CEndpointReference
name|endpointReference
init|=
name|provider
operator|.
name|createW3CEndpointReference
argument_list|(
literal|"http://localhost:8080/test"
argument_list|,
name|serviceName
argument_list|,
name|portName
argument_list|,
name|metadataList
argument_list|,
literal|"wsdlDocumentLocation"
argument_list|,
name|referenceParameters
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpointReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProviderGetPort
parameter_list|()
throws|throws
name|Exception
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|GreeterImpl
name|greeter1
init|=
operator|new
name|GreeterImpl
argument_list|()
decl_stmt|;
try|try
init|(
name|EndpointImpl
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|greeter1
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:8080/test"
argument_list|)
expr_stmt|;
name|ProviderImpl
name|provider
init|=
operator|new
name|ProviderImpl
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/hello_world_soap_http_infoset.xml"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|DOMSource
name|erXML
init|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|EndpointReference
name|endpointReference
init|=
name|EndpointReference
operator|.
name|readFrom
argument_list|(
name|erXML
argument_list|)
decl_stmt|;
name|WebServiceFeature
index|[]
name|wfs
init|=
operator|new
name|WebServiceFeature
index|[]
block|{}
decl_stmt|;
name|Greeter
name|greeter
init|=
name|provider
operator|.
name|getPort
argument_list|(
name|endpointReference
argument_list|,
name|Greeter
operator|.
name|class
argument_list|,
name|wfs
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"John"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello John"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
class|class
name|MyEndpointReference
extends|extends
name|EndpointReference
block|{
specifier|protected
name|MyEndpointReference
parameter_list|()
block|{         }
specifier|public
name|void
name|writeTo
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
comment|// NOT_IMPLEMENTED
block|}
block|}
specifier|public
specifier|static
name|Element
name|fetchElementByNameAttribute
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|elementName
parameter_list|,
name|String
name|nameValue
parameter_list|)
block|{
if|if
condition|(
name|elementName
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|&&
name|parent
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
operator|.
name|equals
argument_list|(
name|nameValue
argument_list|)
condition|)
block|{
return|return
name|parent
return|;
block|}
name|Element
name|elem
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|parent
argument_list|)
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
name|Element
name|el
init|=
name|fetchElementByNameAttribute
argument_list|(
name|elem
argument_list|,
name|elementName
argument_list|,
name|nameValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
return|return
name|el
return|;
block|}
name|elem
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

