begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Dispatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|JaxWsEndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|JaxWsServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|BeanInvoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|service
operator|.
name|factory
operator|.
name|ReflectionServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|BadRecordLitFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|GreeterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JaxWsClientTest
extends|extends
name|AbstractJaxWsTest
block|{
specifier|private
specifier|final
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|address
init|=
literal|"http://localhost:9000/SoapContext/SoapPort"
decl_stmt|;
specifier|private
name|Destination
name|d
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUpBus
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|(
literal|null
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/http"
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|d
operator|=
name|localTransport
operator|.
name|getDestination
argument_list|(
name|ei
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
name|s
init|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|create
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|create
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file:/does/not/exist.wsdl"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|sce
parameter_list|)
block|{
comment|// ignore, this is expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestContext
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
name|s
init|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|create
argument_list|(
name|url
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Greeter
name|greeter
init|=
name|s
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|InvocationHandler
name|handler
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|greeter
argument_list|)
decl_stmt|;
name|BindingProvider
name|bp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|BindingProvider
condition|)
block|{
name|bp
operator|=
operator|(
name|BindingProvider
operator|)
name|handler
expr_stmt|;
comment|//System.out.println(bp.toString());
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|bp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|String
name|reqAddr
init|=
operator|(
name|String
operator|)
name|requestContext
operator|.
name|get
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the address get from requestContext is not equal"
argument_list|,
name|address
argument_list|,
name|reqAddr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"can't get the requset context"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestContextPutAndRemoveEcho
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
name|s
init|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|create
argument_list|(
name|url
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
specifier|final
name|Greeter
name|handler
init|=
name|s
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|handler
operator|)
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JaxWsClientProxy
operator|.
name|THREAD_LOCAL_REQUEST_CONTEXT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// future calls to getRequestContext() will use a thread local request context.
comment|// That allows the request context to be threadsafe.
name|requestContext
operator|=
operator|(
operator|(
name|BindingProvider
operator|)
name|handler
operator|)
operator|.
name|getRequestContext
argument_list|()
expr_stmt|;
specifier|final
name|String
name|key
init|=
literal|"Hi"
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|"ho"
argument_list|)
expr_stmt|;
specifier|final
name|Object
index|[]
name|result
init|=
operator|new
name|Object
index|[
literal|2
index|]
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|//requestContext in main thread shouldn't affect the requestContext in this thread
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|handler
operator|)
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|requestContext
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|requestContext
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"thread shouldn't see the put"
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"thread did not remove the put"
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"main thread does not see removal"
argument_list|,
literal|"ho"
argument_list|,
name|requestContext
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestContextPutAndRemoveEchoDispatch
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
name|s
init|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|create
argument_list|(
name|url
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
specifier|final
name|Dispatch
argument_list|<
name|DOMSource
argument_list|>
name|disp
init|=
name|s
operator|.
name|createDispatch
argument_list|(
name|portName
argument_list|,
name|DOMSource
operator|.
name|class
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|Mode
operator|.
name|PAYLOAD
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|disp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JaxWsClientProxy
operator|.
name|THREAD_LOCAL_REQUEST_CONTEXT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// future calls to getRequestContext() will use a thread local request context.
comment|// That allows the request context to be threadsafe.
name|requestContext
operator|=
name|disp
operator|.
name|getRequestContext
argument_list|()
expr_stmt|;
specifier|final
name|String
name|key
init|=
literal|"Hi"
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|"ho"
argument_list|)
expr_stmt|;
specifier|final
name|Object
index|[]
name|result
init|=
operator|new
name|Object
index|[
literal|2
index|]
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|//requestContext in main thread shouldn't affect the requestContext in this thread
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|disp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|requestContext
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|requestContext
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"thread shouldn't see the put"
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"thread did not remove the put"
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"main thread does not see removal"
argument_list|,
literal|"ho"
argument_list|,
name|requestContext
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThreadLocalRequestContextIsIsolated
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
name|s
init|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|create
argument_list|(
name|url
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
specifier|final
name|Greeter
name|handler
init|=
name|s
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|isPropertyAPresent
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Makes request context thread local
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|handler
argument_list|)
operator|.
name|setThreadLocalRequestContext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// PropertyA should be added to the request context of current thread only
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|handler
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"PropertyA"
argument_list|,
literal|"PropertyAVal"
argument_list|)
expr_stmt|;
name|Runnable
name|checkRequestContext
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|handler
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"PropertyA"
argument_list|)
condition|)
block|{
name|isPropertyAPresent
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|checkRequestContext
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"If we have per thread isolation propertyA should be not present in the context of another thread."
argument_list|,
name|isPropertyAPresent
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|ReflectionServiceFactoryBean
name|bean
init|=
operator|new
name|JaxWsServiceFactoryBean
argument_list|()
decl_stmt|;
name|URL
name|resource
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setWsdlURL
argument_list|(
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setServiceClass
argument_list|(
name|GreeterImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|GreeterImpl
name|greeter
init|=
operator|new
name|GreeterImpl
argument_list|()
decl_stmt|;
name|BeanInvoker
name|invoker
init|=
operator|new
name|BeanInvoker
argument_list|(
name|greeter
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setInvoker
argument_list|(
name|invoker
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|bean
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
literal|"http://apache.org/hello_world_soap_http"
decl_stmt|;
name|EndpointInfo
name|ei
init|=
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEndpoint
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
literal|"SoapPort"
argument_list|)
argument_list|)
decl_stmt|;
name|JaxWsEndpointImpl
name|endpoint
init|=
operator|new
name|JaxWsEndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|service
argument_list|,
name|ei
argument_list|)
decl_stmt|;
name|ClientImpl
name|client
init|=
operator|new
name|ClientImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|bop
init|=
name|ei
operator|.
name|getBinding
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
literal|"sayHi"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bop
argument_list|)
expr_stmt|;
name|bop
operator|=
name|bop
operator|.
name|getUnwrappedOperation
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|bop
argument_list|)
expr_stmt|;
name|MessagePartInfo
name|part
init|=
name|bop
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|part
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setMessageObserver
argument_list|(
operator|new
name|MessageReplayObserver
argument_list|(
literal|"sayHiResponse.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|ret
index|[]
init|=
name|client
operator|.
name|invoke
argument_list|(
name|bop
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"hi"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of return objects"
argument_list|,
literal|1
argument_list|,
name|ret
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// test fault handling
name|bop
operator|=
name|ei
operator|.
name|getBinding
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
literal|"testDocLitFault"
argument_list|)
argument_list|)
expr_stmt|;
name|bop
operator|=
name|bop
operator|.
name|getUnwrappedOperation
argument_list|()
expr_stmt|;
name|d
operator|.
name|setMessageObserver
argument_list|(
operator|new
name|MessageReplayObserver
argument_list|(
literal|"testDocLitFault.xml"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|invoke
argument_list|(
name|bop
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"BadRecordLitFault"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have returned a fault!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRecordLitFault
name|fault
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|fault
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hadrian did it."
argument_list|,
name|fault
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|NestedFaultThrower
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FaultThrower
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|invoke
argument_list|(
name|bop
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"BadRecordLitFault"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have returned a fault!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|fault
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|fault
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Foo"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|NestedFaultThrower
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|NestedFaultThrower
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
name|FaultThrower
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|boolean
name|result
init|=
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"doIntercept not return false"
argument_list|,
name|result
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientProxyFactory
parameter_list|()
block|{
name|JaxWsProxyFactoryBean
name|cf
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|cf
operator|.
name|setAddress
argument_list|(
literal|"http://localhost:9000/test"
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|cf
operator|.
name|create
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/*  .n.b. don't call call create with an argument and change the SEI. */
name|Greeter
name|greeter2
init|=
operator|(
name|Greeter
operator|)
name|cf
operator|.
name|create
argument_list|()
decl_stmt|;
name|Greeter
name|greeter3
init|=
operator|(
name|Greeter
operator|)
name|cf
operator|.
name|create
argument_list|()
decl_stmt|;
name|Client
name|c
init|=
operator|(
name|Client
operator|)
name|greeter
decl_stmt|;
name|Client
name|c2
init|=
operator|(
name|Client
operator|)
name|greeter2
decl_stmt|;
name|Client
name|c3
init|=
operator|(
name|Client
operator|)
name|greeter3
decl_stmt|;
name|assertNotSame
argument_list|(
name|c
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|c
argument_list|,
name|c3
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|c3
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|c
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|c2
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|c
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|c3
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|c3
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|c2
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|c3
operator|.
name|getInInterceptors
argument_list|()
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"manny"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter2
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"moe"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter3
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"jack"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"manny"
argument_list|,
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"moe"
argument_list|,
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter2
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jack"
argument_list|,
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter3
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|FaultThrower
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|FaultThrower
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"Foo"
argument_list|,
operator|(
name|ResourceBundle
operator|)
literal|null
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

