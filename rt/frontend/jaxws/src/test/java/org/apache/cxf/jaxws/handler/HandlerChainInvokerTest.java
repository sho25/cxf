begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalMessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|soap
operator|.
name|SOAPMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|logical
operator|.
name|LogicalMessageContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|soap
operator|.
name|SOAPMessageContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|HandlerChainInvokerTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|int
name|HANDLER_COUNT
init|=
literal|4
decl_stmt|;
name|HandlerChainInvoker
name|invoker
decl_stmt|;
name|Message
name|message
decl_stmt|;
name|LogicalMessageContext
name|lmc
decl_stmt|;
name|MessageContext
name|pmc
decl_stmt|;
name|TestLogicalHandler
index|[]
name|logicalHandlers
init|=
operator|new
name|TestLogicalHandler
index|[
name|HANDLER_COUNT
index|]
decl_stmt|;
name|TestProtocolHandler
index|[]
name|protocolHandlers
init|=
operator|new
name|TestProtocolHandler
index|[
name|HANDLER_COUNT
index|]
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|AbstractHandlerBase
operator|.
name|clear
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logicalHandlers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|logicalHandlers
index|[
name|i
index|]
operator|=
operator|new
name|TestLogicalHandler
argument_list|()
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|logicalHandlers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|protocolHandlers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|protocolHandlers
index|[
name|i
index|]
operator|=
operator|new
name|TestProtocolHandler
argument_list|()
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|protocolHandlers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|invoker
operator|=
operator|new
name|HandlerChainInvoker
argument_list|(
name|handlers
argument_list|)
expr_stmt|;
name|message
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|Exchange
name|e
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|lmc
operator|=
operator|new
name|LogicalMessageContextImpl
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|pmc
operator|=
operator|new
name|WrappedMessageContext
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|/*         payload = new DOMSource();         message.setContent(Source.class, payload);*/
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeEmptyHandlerChain
parameter_list|()
block|{
name|invoker
operator|=
operator|new
name|HandlerChainInvoker
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|invokeProtocolHandlers
argument_list|(
literal|false
argument_list|,
name|pmc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlerPartitioning
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|HANDLER_COUNT
argument_list|,
name|invoker
operator|.
name|getLogicalHandlers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Handler
argument_list|<
name|?
argument_list|>
name|h
range|:
name|invoker
operator|.
name|getLogicalHandlers
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|h
operator|instanceof
name|LogicalHandler
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|HANDLER_COUNT
argument_list|,
name|invoker
operator|.
name|getProtocolHandlers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Handler
argument_list|<
name|?
argument_list|>
name|h
range|:
name|invoker
operator|.
name|getProtocolHandlers
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
operator|!
operator|(
name|h
operator|instanceof
name|LogicalHandler
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeHandlersInbound
parameter_list|()
block|{
name|invoker
operator|.
name|setInbound
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isInbound
argument_list|()
argument_list|)
expr_stmt|;
name|checkProtocolHandlersInvoked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isInbound
argument_list|()
argument_list|)
expr_stmt|;
name|checkLogicalHandlersInvoked
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isInbound
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invoker
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|>
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|>
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|>
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerReturnFalseOutboundResponseExpected
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isOutbound
argument_list|()
argument_list|)
expr_stmt|;
comment|// invoke the handlers.  when a handler returns false, processing
comment|// of handlers is stopped and message direction is reversed.
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invoker
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isInbound
argument_list|()
argument_list|)
expr_stmt|;
comment|// the next time invokeHandler is invoked, the 'next' handler is invoked.
comment|// As message direction has been reversed this means the that the previous
comment|// one on the list is actually invoked.
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ret
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invoker
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isInbound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerInboundProcessingStoppedResponseExpected
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setInbound
argument_list|()
expr_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|invoker
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isOutbound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageReturnsFalseOutbound
parameter_list|()
block|{
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isOutbound
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
name|invoker
operator|.
name|setLogicalMessageContext
argument_list|(
name|lmc
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setProtocolMessageContext
argument_list|(
name|pmc
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeProtocolHandlers
argument_list|(
literal|false
argument_list|,
name|pmc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|pmc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|lmc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isInbound
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setProtocolMessageContext
argument_list|(
name|pmc
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeProtocolHandlers
argument_list|(
literal|false
argument_list|,
name|pmc
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setLogicalMessageContext
argument_list|(
name|lmc
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageThrowsProtocolExceptionOutbound
parameter_list|()
block|{
name|message
operator|=
operator|new
name|SoapMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|lmc
operator|=
operator|new
name|LogicalMessageContextImpl
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|pmc
operator|=
operator|new
name|WrappedMessageContext
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|ProtocolException
name|pe
init|=
operator|new
name|ProtocolException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|setException
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setRequestor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isOutbound
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
name|invoker
operator|.
name|setLogicalMessageContext
argument_list|(
name|lmc
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
comment|//create an empty SOAP body for testing
try|try
block|{
name|pmc
operator|=
operator|new
name|SOAPMessageContextImpl
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|MessageFactory
name|factory
init|=
name|MessageFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SOAPMessage
name|soapMessage
init|=
name|factory
operator|.
name|createMessage
argument_list|()
decl_stmt|;
operator|(
operator|(
name|SOAPMessageContext
operator|)
name|pmc
operator|)
operator|.
name|setMessage
argument_list|(
name|soapMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|//do nothing
block|}
try|try
block|{
name|invoker
operator|.
name|setProtocolMessageContext
argument_list|(
name|pmc
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeProtocolHandlers
argument_list|(
literal|false
argument_list|,
name|pmc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"banzai"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|pmc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|lmc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isInbound
argument_list|()
argument_list|)
expr_stmt|;
comment|//the message is replaced by fault message
name|Source
name|responseMessage
init|=
name|lmc
operator|.
name|getMessage
argument_list|()
operator|.
name|getPayload
argument_list|()
decl_stmt|;
comment|//System.out.println(getSourceAsString(responseMessage));
name|assertTrue
argument_list|(
name|getSourceAsString
argument_list|(
name|responseMessage
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"banzai"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//assertFalse(continueProcessing);
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleFaultReturnsFalseOutbound
parameter_list|()
block|{
name|ProtocolException
name|pe
init|=
operator|new
name|ProtocolException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|setException
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|setHandleFaultRet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setRequestor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isOutbound
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
name|invoker
operator|.
name|setLogicalMessageContext
argument_list|(
name|lmc
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
try|try
block|{
name|invoker
operator|.
name|setProtocolMessageContext
argument_list|(
name|pmc
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeProtocolHandlers
argument_list|(
literal|false
argument_list|,
name|pmc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"banzai"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|pmc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|lmc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isInbound
argument_list|()
argument_list|)
expr_stmt|;
comment|//assertFalse(continueProcessing);
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|protocolHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protocolHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageReturnsTrue
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//JAX-WS 9.3.2.1:
comment|//Return false This indicates that normal message processing should cease. Subsequent actions
comment|//depend on whether the message exchange pattern (MEP) in use requires a response to the
comment|//message currently being processed or not:
comment|//Response The message direction is reversed, the runtime invokes handleMessage on the next
comment|//handler or dispatches the message (see section 9.1.2.2) if there are no further handlers.
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageReturnsFalseWithResponseExpected
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setResponseExpected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
name|invoker
operator|.
name|setLogicalMessageContext
argument_list|(
name|lmc
argument_list|)
expr_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|lmc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//JAX-WS 9.3.2.1:
comment|//Return false This indicates that normal message processing should cease. Subsequent actions
comment|//depend on whether the message exchange pattern (MEP) in use requires a response to the
comment|//message currently being processed or not:
comment|//No response Normal message processing stops, close is called on each previously invoked handler
comment|//in the chain, the message is dispatched
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageReturnsFalseWithNoResponseExpected
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setResponseExpected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//JAX-WS 9.3.2.1:
comment|//Throw ProtocolException or a subclass This indicates that normal message processing should cease.
comment|//Subsequent actions depend on whether the MEP in use requires a response to the message currently
comment|//being processed or not:
comment|//Response Normal message processing stops, fault message processing starts. The message direction
comment|//is reversed, if the message is not already a fault message then it is replaced with a fault message,
comment|//and the runtime invokes handleFault on the next handler or dispatches the message (see
comment|//section 9.1.2.2) if there are no further handlers.
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageThrowsProtocolExceptionWithResponseExpected
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
name|ProtocolException
name|pe
init|=
operator|new
name|ProtocolException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setException
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setRequestor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//boolean continueProcessing = true;
try|try
block|{
name|invoker
operator|.
name|setLogicalMessageContext
argument_list|(
name|lmc
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"banzai"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
comment|//assertFalse(continueProcessing);
comment|//assertTrue(invoker.isClosed());
name|assertSame
argument_list|(
name|pe
argument_list|,
name|invoker
operator|.
name|getFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|lmc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
comment|/*          continueProcessing = invoker.invokeLogicalHandlers(false, lmc);          assertFalse(continueProcessing);         assertTrue(invoker.faultRaised());         assertTrue(invoker.isClosed());         assertSame(pe, invoker.getFault());          assertEquals(1, logicalHandlers[0].getHandleMessageCount());         assertEquals(1, logicalHandlers[1].getHandleMessageCount());         assertEquals(1, logicalHandlers[0].getHandleFaultCount());         assertEquals(0, logicalHandlers[1].getHandleFaultCount());*/
block|}
comment|//JAX-WS 9.3.2.1:
comment|//Throw ProtocolException or a subclass This indicates that normal message processing should cease.
comment|//Subsequent actions depend on whether the MEP in use requires a response to the message currently
comment|//being processed or not:
comment|//No response Normal message processing stops, close is called on each previously invoked handler
comment|//in the chain, the exception is dispatched
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageThrowsProtocolExceptionWithNoResponseExpected
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
name|ProtocolException
name|pe
init|=
operator|new
name|ProtocolException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setException
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setResponseExpected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setRequestor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//boolean continueProcessing = true;
try|try
block|{
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
comment|//don't fail.  TCK says this shouldn't be thrown.
comment|//fail("did not get expected exception");
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"banzai"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
comment|//assertFalse(continueProcessing);
comment|//assertTrue(invoker.isClosed());
name|assertSame
argument_list|(
name|pe
argument_list|,
name|invoker
operator|.
name|getFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Throw any other runtime exception This indicates that normal message processing should cease.
comment|//Subsequent actions depend on whether the MEP in use includes a response to the message currently being
comment|//processed or not:
comment|//Response Normal message processing stops, close is called on each previously invoked handler in
comment|//the chain, the message direction is reversed, and the exception is dispatched
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageThrowsRuntimeExceptionWithResponseExpected
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
name|RuntimeException
name|re
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setException
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setRequestor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//boolean continueProcessing = true;
try|try
block|{
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"banzai"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//assertTrue(invoker.faultRaised());
comment|//assertFalse(continueProcessing);
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|//assertSame(re, invoker.getFault());
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFaultRaised
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setFault
argument_list|(
operator|new
name|ProtocolException
argument_list|(
literal|"test exception"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset
name|invoker
operator|.
name|setFault
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setFault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset
name|invoker
operator|.
name|setFault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setFault
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invoker
operator|.
name|faultRaised
argument_list|()
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setFault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setFault
argument_list|(
operator|new
name|ProtocolException
argument_list|(
literal|"test exception"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// JAXB spec 9.3.2.2: Throw ProtocolException or a subclass This indicates
comment|// that fault message processing should cease. Fault message processing
comment|// stops, close is called on each previously invoked handler in the chain, the
comment|// exception is dispatched
annotation|@
name|Test
specifier|public
name|void
name|testHandleFaultThrowsProtocolException
parameter_list|()
block|{
name|ProtocolException
name|pe
init|=
operator|new
name|ProtocolException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
name|ProtocolException
name|pe2
init|=
operator|new
name|ProtocolException
argument_list|(
literal|"banzai2"
argument_list|)
decl_stmt|;
comment|// throw exception during handleFault processing
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setException
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setFaultException
argument_list|(
name|pe2
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setRequestor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|false
decl_stmt|;
try|try
block|{
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"banzai2"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfHandleMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// JAXB spec 9.3.2.2: Throw any other runtime exception This indicates
comment|// that fault message processing should cease. Fault message processing stops,
comment|// close is called on each previously invoked handler in the chain, the exception is
comment|// dispatched
annotation|@
name|Test
specifier|public
name|void
name|testHandleFaultThrowsRuntimeException
parameter_list|()
block|{
name|ProtocolException
name|pe
init|=
operator|new
name|ProtocolException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
name|RuntimeException
name|re
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
comment|// throw exception during handleFault processing
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setException
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setFaultException
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setRequestor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|false
decl_stmt|;
try|try
block|{
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"banzai"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//JAXB spec 9.3.2.2: Return true This indicates that fault message processing
comment|//should continue. The runtime invokes handle Fault on the next handler or dispatches
comment|//the fault message (see section 9.1.2.2) if there are no further handlers.
annotation|@
name|Test
specifier|public
name|void
name|testHandleFaultReturnsTrue
parameter_list|()
block|{
name|ProtocolException
name|pe
init|=
operator|new
name|ProtocolException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setException
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setRequestor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|setHandleFaultRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleFaultRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setHandleFaultRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|setHandleFaultRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|false
decl_stmt|;
try|try
block|{
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"banzai"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
comment|//assertTrue(invoker.isClosed());
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfHandleFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//JAXB spec 9.3.2.2: Return false This indicates that fault message processing
comment|//should cease. Fault message processing stops, close is called on each previously invoked
comment|//handler in the chain, the fault message is dispatched
annotation|@
name|Test
specifier|public
name|void
name|testHandleFaultReturnsFalse
parameter_list|()
block|{
name|ProtocolException
name|pe
init|=
operator|new
name|ProtocolException
argument_list|(
literal|"banzai"
argument_list|)
decl_stmt|;
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|setException
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setRequestor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|setHandleFaultRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleFaultRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|setHandleFaultRet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|setHandleFaultRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|continueProcessing
init|=
literal|false
decl_stmt|;
try|try
block|{
name|continueProcessing
operator|=
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"banzai"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|continueProcessing
argument_list|)
expr_stmt|;
comment|//assertTrue(invoker.isClosed());
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getHandleFaultCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getCloseCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|3
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|2
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMEPComplete
parameter_list|()
block|{
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|false
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|invokeProtocolHandlers
argument_list|(
literal|false
argument_list|,
name|pmc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|mepComplete
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"close not invoked on logicalHandlers"
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|isCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"close not invoked on logicalHandlers"
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|isCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"close not invoked on protocolHandlers"
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|isCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"close not invoked on protocolHandlers"
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|isCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"incorrect invocation order of close"
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"incorrect invocation order of close"
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"incorrect invocation order of close"
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponseExpectedDefault
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|invoker
operator|.
name|isResponseExpected
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* test invoking logical handlers when processing has been aborted      * with both protocol and logical handlers in invokedHandlers list.      *      */
annotation|@
name|Test
specifier|public
name|void
name|testInvokedAlreadyInvokedMixed
parameter_list|()
block|{
comment|// simulate an invocation being aborted by a logical handler
comment|//
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|setInbound
argument_list|()
expr_stmt|;
name|invoker
operator|.
name|invokeProtocolHandlers
argument_list|(
literal|true
argument_list|,
name|pmc
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|true
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//        assertTrue(!invoker.getInvokedHandlers().contains(logicalHandlers[1]));
name|assertTrue
argument_list|(
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|contains
argument_list|(
name|protocolHandlers
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|contains
argument_list|(
name|protocolHandlers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|setHandleMessageRet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
literal|true
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|invoker
operator|.
name|invokeProtocolHandlers
argument_list|(
literal|true
argument_list|,
name|pmc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|getHandleMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*public void testHandlerReturnFalse() {         logicalHandlers[1].setHandleMessageRet(false);         invoker.setInbound();         doInvokeProtocolHandlers(true);         invoker.invokeLogicalHandlers(true, lmc);      }*/
specifier|protected
name|void
name|checkLogicalHandlersInvoked
parameter_list|(
name|boolean
name|outboundProperty
parameter_list|,
name|boolean
name|requestorProperty
parameter_list|)
block|{
name|invoker
operator|.
name|invokeLogicalHandlers
argument_list|(
name|requestorProperty
argument_list|,
name|lmc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"handler not invoked"
argument_list|,
name|logicalHandlers
index|[
literal|0
index|]
operator|.
name|isHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"handler not invoked"
argument_list|,
name|logicalHandlers
index|[
literal|1
index|]
operator|.
name|isHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|contains
argument_list|(
name|logicalHandlers
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|contains
argument_list|(
name|logicalHandlers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkProtocolHandlersInvoked
parameter_list|(
name|boolean
name|outboundProperty
parameter_list|)
block|{
name|invoker
operator|.
name|invokeProtocolHandlers
argument_list|(
literal|false
argument_list|,
name|pmc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"handler not invoked"
argument_list|,
name|protocolHandlers
index|[
literal|0
index|]
operator|.
name|isHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"handler not invoked"
argument_list|,
name|protocolHandlers
index|[
literal|1
index|]
operator|.
name|isHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|contains
argument_list|(
name|protocolHandlers
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoker
operator|.
name|getInvokedHandlers
argument_list|()
operator|.
name|contains
argument_list|(
name|protocolHandlers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getSourceAsString
parameter_list|(
name|Source
name|s
parameter_list|)
block|{
name|String
name|result
init|=
literal|""
decl_stmt|;
try|try
block|{
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|transformerFactory
operator|.
name|setFeature
argument_list|(
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Transformer
name|transformer
init|=
name|transformerFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|StreamResult
name|streamResult
init|=
operator|new
name|StreamResult
argument_list|()
decl_stmt|;
name|streamResult
operator|.
name|setOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|s
argument_list|,
name|streamResult
argument_list|)
expr_stmt|;
return|return
name|streamResult
operator|.
name|getOutputStream
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//do nothing
block|}
return|return
name|result
return|;
block|}
specifier|static
class|class
name|TestProtocolHandler
extends|extends
name|AbstractHandlerBase
argument_list|<
name|SOAPMessageContext
argument_list|>
block|{      }
specifier|static
class|class
name|TestLogicalHandler
extends|extends
name|AbstractHandlerBase
argument_list|<
name|LogicalMessageContextImpl
argument_list|>
implements|implements
name|LogicalHandler
argument_list|<
name|LogicalMessageContextImpl
argument_list|>
block|{      }
specifier|static
class|class
name|AbstractHandlerBase
parameter_list|<
name|T
extends|extends
name|MessageContext
parameter_list|>
implements|implements
name|Handler
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
name|int
name|sinvokedOrder
decl_stmt|;
specifier|private
specifier|static
name|int
name|sid
decl_stmt|;
specifier|private
name|int
name|invokeOrderOfHandleMessage
decl_stmt|;
specifier|private
name|int
name|invokeOrderOfHandleFault
decl_stmt|;
specifier|private
name|int
name|invokeOrderOfClose
decl_stmt|;
specifier|private
specifier|final
name|int
name|id
init|=
operator|++
name|sid
decl_stmt|;
specifier|private
name|int
name|handleMessageInvoked
decl_stmt|;
specifier|private
name|int
name|handleFaultInvoked
decl_stmt|;
specifier|private
name|boolean
name|handleMessageRet
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|handleFaultRet
init|=
literal|true
decl_stmt|;
specifier|private
name|RuntimeException
name|exception
decl_stmt|;
specifier|private
name|RuntimeException
name|faultException
decl_stmt|;
specifier|private
name|int
name|closeInvoked
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|handleMessageInvoked
operator|=
literal|0
expr_stmt|;
name|handleFaultInvoked
operator|=
literal|0
expr_stmt|;
name|handleMessageRet
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|T
name|arg0
parameter_list|)
block|{
name|invokeOrderOfHandleMessage
operator|=
operator|++
name|sinvokedOrder
expr_stmt|;
name|handleMessageInvoked
operator|++
expr_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|RuntimeException
name|e
init|=
name|exception
decl_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|handleMessageRet
return|;
block|}
specifier|public
name|boolean
name|handleFault
parameter_list|(
name|T
name|arg0
parameter_list|)
block|{
name|invokeOrderOfHandleFault
operator|=
operator|++
name|sinvokedOrder
expr_stmt|;
name|handleFaultInvoked
operator|++
expr_stmt|;
if|if
condition|(
name|faultException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|faultException
throw|;
block|}
return|return
name|handleFaultRet
return|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|MessageContext
name|arg0
parameter_list|)
block|{
name|invokeOrderOfClose
operator|=
operator|++
name|sinvokedOrder
expr_stmt|;
name|closeInvoked
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arg0
parameter_list|)
block|{         }
specifier|public
name|void
name|destroy
parameter_list|()
block|{         }
specifier|public
name|int
name|getHandleMessageCount
parameter_list|()
block|{
return|return
name|handleMessageInvoked
return|;
block|}
specifier|public
name|int
name|getHandleFaultCount
parameter_list|()
block|{
return|return
name|handleFaultInvoked
return|;
block|}
specifier|public
name|boolean
name|isHandleMessageInvoked
parameter_list|()
block|{
return|return
name|handleMessageInvoked
operator|>
literal|0
return|;
block|}
specifier|public
name|boolean
name|isCloseInvoked
parameter_list|()
block|{
return|return
name|closeInvoked
operator|>
literal|0
return|;
block|}
specifier|public
name|int
name|getCloseCount
parameter_list|()
block|{
return|return
name|closeInvoked
return|;
block|}
specifier|public
name|int
name|getInvokeOrderOfHandleMessage
parameter_list|()
block|{
return|return
name|invokeOrderOfHandleMessage
return|;
block|}
specifier|public
name|int
name|getInvokeOrderOfHandleFault
parameter_list|()
block|{
return|return
name|invokeOrderOfHandleFault
return|;
block|}
specifier|public
name|int
name|getInvokeOrderOfClose
parameter_list|()
block|{
return|return
name|invokeOrderOfClose
return|;
block|}
specifier|public
name|void
name|setHandleMessageRet
parameter_list|(
name|boolean
name|ret
parameter_list|)
block|{
name|handleMessageRet
operator|=
name|ret
expr_stmt|;
block|}
specifier|public
name|void
name|setHandleFaultRet
parameter_list|(
name|boolean
name|ret
parameter_list|)
block|{
name|handleFaultRet
operator|=
name|ret
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" id: "
operator|+
name|id
operator|+
literal|" invoke order: "
operator|+
name|invokeOrderOfHandleMessage
operator|+
literal|"]"
return|;
block|}
specifier|public
name|void
name|setException
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
name|exception
operator|=
name|rte
expr_stmt|;
block|}
specifier|public
name|void
name|setFaultException
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
name|faultException
operator|=
name|rte
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|sinvokedOrder
operator|=
literal|0
expr_stmt|;
name|sid
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

