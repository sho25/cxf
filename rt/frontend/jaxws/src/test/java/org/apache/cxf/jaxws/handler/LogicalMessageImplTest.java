begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|logical
operator|.
name|LogicalMessageContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|logical
operator|.
name|LogicalMessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handlers
operator|.
name|types
operator|.
name|AddNumbers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handlers
operator|.
name|types
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|LogicalMessageImplTest
extends|extends
name|Assert
block|{
name|AddNumbers
name|req
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|args
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|req
operator|=
operator|new
name|AddNumbers
argument_list|()
expr_stmt|;
name|req
operator|.
name|setArg0
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|req
operator|.
name|setArg1
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPayloadOfJAXB
parameter_list|()
throws|throws
name|Exception
block|{
comment|//using Dispatch
name|JAXBContext
name|ctx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|ObjectFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|e
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LogicalMessageContextImpl
name|lmci
init|=
operator|new
name|LogicalMessageContextImpl
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|AddNumbers
argument_list|>
name|el
init|=
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createAddNumbers
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LogicalMessageImpl
name|lmi
init|=
operator|new
name|LogicalMessageImpl
argument_list|(
name|lmci
argument_list|)
decl_stmt|;
name|lmi
operator|.
name|setPayload
argument_list|(
name|el
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|lmi
operator|.
name|getPayload
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|JAXBElement
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|el2
init|=
operator|(
name|JAXBElement
operator|)
name|obj
decl_stmt|;
name|assertTrue
argument_list|(
name|el2
operator|.
name|getValue
argument_list|()
operator|instanceof
name|AddNumbers
argument_list|)
expr_stmt|;
name|AddNumbers
name|resp
init|=
operator|(
name|AddNumbers
operator|)
name|el2
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|req
operator|.
name|getArg0
argument_list|()
argument_list|,
name|resp
operator|.
name|getArg0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|req
operator|.
name|getArg1
argument_list|()
argument_list|,
name|resp
operator|.
name|getArg1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

