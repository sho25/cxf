begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|Detail
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|UserDataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap12
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test case for https://bugzilla.redhat.com/show_bug.cgi?id=1177704  *  * Scenario:  *  * Let WebFaultOutInterceptor process a message containing a SoapFault.  *  * If SoapFault's exception or its' cause is instance of SOAPFaultException, values of SOAPFaultException.subCodes  * should be copied to SoapFault.subCodes.  *  * @author Tomas Hofman (thofman@redhat.com)  */
end_comment

begin_class
specifier|public
class|class
name|WebFaultOutInterceptorTestCase
block|{
specifier|private
specifier|static
specifier|final
name|QName
name|CODE
init|=
operator|new
name|QName
argument_list|(
literal|"ns"
argument_list|,
literal|"code"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SUBCODE
init|=
operator|new
name|QName
argument_list|(
literal|"ns"
argument_list|,
literal|"subcode"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
name|SUBCODES
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|SUBCODE
argument_list|)
decl_stmt|;
specifier|private
name|WebFaultOutInterceptor
name|interceptor
init|=
operator|new
name|WebFaultOutInterceptor
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSoapFaultException
parameter_list|()
block|{
comment|// create message that contains Fault that contains exception
name|SOAPFaultException
name|soapFaultException
init|=
operator|new
name|SOAPFaultException
argument_list|(
operator|new
name|SOAPFaultStub
argument_list|()
argument_list|)
decl_stmt|;
name|SoapFault
name|soapFault
init|=
operator|new
name|SoapFault
argument_list|(
literal|"message"
argument_list|,
name|soapFaultException
argument_list|,
name|CODE
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|soapFault
argument_list|)
decl_stmt|;
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|soapFault
operator|.
name|getSubCodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapFault
operator|.
name|getSubCodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SUBCODE
argument_list|,
name|soapFault
operator|.
name|getSubCodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CODE
argument_list|,
name|soapFault
operator|.
name|getFaultCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSoapFaultCause
parameter_list|()
block|{
name|SOAPFaultException
name|cause
init|=
operator|new
name|SOAPFaultException
argument_list|(
operator|new
name|SOAPFaultStub
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
operator|new
name|Exception
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|SoapFault
name|soapFault
init|=
operator|new
name|SoapFault
argument_list|(
literal|"message"
argument_list|,
name|exception
argument_list|,
name|CODE
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|soapFault
argument_list|)
decl_stmt|;
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|soapFault
operator|.
name|getSubCodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapFault
operator|.
name|getSubCodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SUBCODE
argument_list|,
name|soapFault
operator|.
name|getSubCodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CODE
argument_list|,
name|soapFault
operator|.
name|getFaultCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSoapFaultCauseCause
parameter_list|()
block|{
name|SOAPFaultException
name|cause
init|=
operator|new
name|SOAPFaultException
argument_list|(
operator|new
name|SOAPFaultStub
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|innerException
init|=
operator|new
name|Exception
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|Exception
name|outerException
init|=
operator|new
name|Exception
argument_list|(
name|innerException
argument_list|)
decl_stmt|;
name|SoapFault
name|soapFault
init|=
operator|new
name|SoapFault
argument_list|(
literal|"message"
argument_list|,
name|outerException
argument_list|,
name|CODE
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|soapFault
argument_list|)
decl_stmt|;
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"SoapFault.subCodes are expected to be empty."
argument_list|,
name|soapFault
operator|.
name|getSubCodes
argument_list|()
operator|==
literal|null
operator|||
name|soapFault
operator|.
name|getSubCodes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CODE
argument_list|,
name|soapFault
operator|.
name|getFaultCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOtherException
parameter_list|()
block|{
name|Exception
name|exception
init|=
operator|new
name|Exception
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|SoapFault
name|soapFault
init|=
operator|new
name|SoapFault
argument_list|(
literal|"message"
argument_list|,
name|exception
argument_list|,
name|CODE
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|soapFault
argument_list|)
decl_stmt|;
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"SoapFault.subCodes are expected to be empty."
argument_list|,
name|soapFault
operator|.
name|getSubCodes
argument_list|()
operator|==
literal|null
operator|||
name|soapFault
operator|.
name|getSubCodes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CODE
argument_list|,
name|soapFault
operator|.
name|getFaultCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Message
name|createMessage
parameter_list|(
name|SoapFault
name|soapFault
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|SoapMessage
argument_list|(
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|soapFault
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|private
class|class
name|SOAPFaultStub
implements|implements
name|SOAPFault
block|{
annotation|@
name|Override
specifier|public
name|void
name|setFaultCode
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|setFaultCode
parameter_list|(
name|QName
name|qName
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|setFaultCode
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|Name
name|getFaultCodeAsName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getFaultCodeAsQName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getFaultSubcodes
parameter_list|()
block|{
return|return
name|SUBCODES
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAllFaultSubcodes
parameter_list|()
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|appendFaultSubcode
parameter_list|(
name|QName
name|qName
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|getFaultCode
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFaultActor
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|getFaultActor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFaultString
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|setFaultString
parameter_list|(
name|String
name|s
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|getFaultString
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Locale
name|getFaultStringLocale
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasDetail
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Detail
name|getDetail
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Detail
name|addDetail
parameter_list|()
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getFaultReasonLocales
parameter_list|()
throws|throws
name|SOAPException
block|{
return|return
name|Collections
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getFaultReasonTexts
parameter_list|()
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFaultReasonText
parameter_list|(
name|Locale
name|locale
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addFaultReasonText
parameter_list|(
name|String
name|s
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|getFaultNode
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFaultNode
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|getFaultRole
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFaultRole
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addChildElement
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addChildElement
parameter_list|(
name|QName
name|qName
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addChildElement
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addChildElement
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addChildElement
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addChildElement
parameter_list|(
name|SOAPElement
name|soapElement
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeContents
parameter_list|()
block|{          }
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addTextNode
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addAttribute
parameter_list|(
name|Name
name|name
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addAttribute
parameter_list|(
name|QName
name|qName
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SOAPElement
name|addNamespaceDeclaration
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|Name
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|QName
name|qName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getAllAttributes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getAllAttributesAsQNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getNamespacePrefixes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getVisibleNamespacePrefixes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|createQName
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Name
name|getElementName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getElementQName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SOAPElement
name|setElementQName
parameter_list|(
name|QName
name|qName
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAttribute
parameter_list|(
name|Name
name|name
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAttribute
parameter_list|(
name|QName
name|qName
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeNamespaceDeclaration
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getChildElements
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getChildElements
parameter_list|(
name|Name
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
name|getChildElements
parameter_list|(
name|QName
name|qName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEncodingStyle
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|getEncodingStyle
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTagName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttribute
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|removeAttribute
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|Attr
name|getAttributeNode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Attr
name|setAttributeNode
parameter_list|(
name|Attr
name|attr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Attr
name|removeAttributeNode
parameter_list|(
name|Attr
name|attr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeNS
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAttributeNS
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|removeAttributeNS
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|Attr
name|getAttributeNodeNS
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Attr
name|setAttributeNodeNS
parameter_list|(
name|Attr
name|attr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAttribute
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAttributeNS
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeInfo
name|getSchemaTypeInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setIdAttribute
parameter_list|(
name|String
name|s
parameter_list|,
name|boolean
name|b
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|setIdAttributeNS
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|boolean
name|b
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|setIdAttributeNode
parameter_list|(
name|Attr
name|attr
parameter_list|,
name|boolean
name|b
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|s
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|setParentElement
parameter_list|(
name|SOAPElement
name|soapElement
parameter_list|)
throws|throws
name|SOAPException
block|{          }
annotation|@
name|Override
specifier|public
name|SOAPElement
name|getParentElement
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|detachNode
parameter_list|()
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|recycleNode
parameter_list|()
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodeValue
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNodeValue
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|short
name|getNodeType
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getLastChild
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getPreviousSibling
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getNextSibling
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamedNodeMap
name|getAttributes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Document
name|getOwnerDocument
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|insertBefore
parameter_list|(
name|Node
name|node
parameter_list|,
name|Node
name|node1
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|replaceChild
parameter_list|(
name|Node
name|node
parameter_list|,
name|Node
name|node1
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|removeChild
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|appendChild
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNodes
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|cloneNode
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|normalize
parameter_list|()
block|{          }
annotation|@
name|Override
specifier|public
name|boolean
name|isSupported
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAttributes
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|compareDocumentPosition
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTextContent
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTextContent
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|DOMException
block|{          }
annotation|@
name|Override
specifier|public
name|boolean
name|isSameNode
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|lookupPrefix
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDefaultNamespace
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|lookupNamespaceURI
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqualNode
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getFeature
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setUserData
parameter_list|(
name|String
name|s
parameter_list|,
name|Object
name|o
parameter_list|,
name|UserDataHandler
name|userDataHandler
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getUserData
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

