begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|util
operator|.
name|ByteArrayDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|WrappedMessageContextTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPutAndGetJaxwsAttachments
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedMessageContext
name|context
init|=
operator|new
name|WrappedMessageContext
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
decl_stmt|;
name|DataHandler
name|dh1
init|=
operator|new
name|DataHandler
argument_list|(
operator|new
name|ByteArrayDataSource
argument_list|(
literal|"Hello world!"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|DataHandler
name|dh2
init|=
operator|new
name|DataHandler
argument_list|(
operator|new
name|ByteArrayDataSource
argument_list|(
literal|"Hola mundo!"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|DataHandler
name|dh3
init|=
operator|new
name|DataHandler
argument_list|(
operator|new
name|ByteArrayDataSource
argument_list|(
literal|"Bonjour tout le monde!"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|jattachments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|OUTBOUND_MESSAGE_ATTACHMENTS
argument_list|,
name|jattachments
argument_list|)
expr_stmt|;
name|jattachments
operator|.
name|put
argument_list|(
literal|"attachment-1"
argument_list|,
name|dh1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Attachment
argument_list|>
name|cattachments
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Set
argument_list|<
name|?
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ATTACHMENTS
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cattachments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cattachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|jattachments
operator|.
name|put
argument_list|(
literal|"attachment-2"
argument_list|,
name|dh2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cattachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AttachmentImpl
name|ca
init|=
operator|new
name|AttachmentImpl
argument_list|(
literal|"attachment-3"
argument_list|,
name|dh3
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setHeader
argument_list|(
literal|"X-test"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cattachments
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|jattachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cattachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Attachment
name|a
range|:
name|cattachments
control|)
block|{
if|if
condition|(
literal|"attachment-1"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Hello world!"
argument_list|,
name|a
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"attachment-2"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Hola mundo!"
argument_list|,
name|a
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"attachment-3"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Bonjour tout le monde!"
argument_list|,
name|a
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|a
operator|.
name|getHeader
argument_list|(
literal|"X-test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unknown attachment"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContainsKey
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedMessageContext
name|context
init|=
operator|new
name|WrappedMessageContext
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Scope
operator|.
name|APPLICATION
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|HTTP_REQUEST_HEADERS
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|HTTP_REQUEST_HEADERS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|containsKey
argument_list|(
name|MessageContext
operator|.
name|HTTP_REQUEST_HEADERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

