begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|InitParamResourceResolverTest
extends|extends
name|Assert
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STRING_PARAM
init|=
literal|"stringParam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STRING_VALUE
init|=
literal|"a string"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INT_PARAM
init|=
literal|"intParam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INT_VALUE
init|=
literal|"42"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FLOAT_PARAM
init|=
literal|"floatParam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FLOAT_VALUE
init|=
name|Float
operator|.
name|toString
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CHAR_PARAM
init|=
literal|"charParam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CHAR_VALUE
init|=
literal|"a"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BYTE_PARAM
init|=
literal|"byteParam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BYTE_VALUE
init|=
name|Byte
operator|.
name|toString
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHORT_PARAM
init|=
literal|"shortParam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHORT_VALUE
init|=
literal|"12"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LONG_PARAM
init|=
literal|"longParam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LONG_VALUE
init|=
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DOUBLE_PARAM
init|=
literal|"doubleParam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DOUBLE_VALUE
init|=
name|Double
operator|.
name|toString
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BOOLEAN_PARAM
init|=
literal|"booleanParam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BOOLEAN_VALUE
init|=
literal|"true"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|InitParamResourceResolver
name|resolver
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|params
operator|.
name|put
argument_list|(
name|STRING_PARAM
argument_list|,
name|STRING_VALUE
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|INT_PARAM
argument_list|,
name|INT_VALUE
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|FLOAT_PARAM
argument_list|,
name|FLOAT_VALUE
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CHAR_PARAM
argument_list|,
name|CHAR_VALUE
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|BYTE_PARAM
argument_list|,
name|BYTE_VALUE
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|SHORT_PARAM
argument_list|,
name|SHORT_VALUE
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|LONG_PARAM
argument_list|,
name|LONG_VALUE
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|DOUBLE_PARAM
argument_list|,
name|DOUBLE_VALUE
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|BOOLEAN_PARAM
argument_list|,
name|BOOLEAN_VALUE
argument_list|)
expr_stmt|;
name|resolver
operator|=
operator|new
name|InitParamResourceResolver
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
comment|/*      char, byte, short, int, long, float, double, boolean      */
annotation|@
name|Test
specifier|public
name|void
name|testResolveChar
parameter_list|()
block|{
name|doResolveTypeTest
argument_list|(
name|CHAR_PARAM
argument_list|,
name|Character
operator|.
name|class
argument_list|,
name|CHAR_VALUE
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveByte
parameter_list|()
block|{
name|doResolveTypeTest
argument_list|(
name|BYTE_PARAM
argument_list|,
name|Byte
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|BYTE_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveShort
parameter_list|()
block|{
name|doResolveTypeTest
argument_list|(
name|SHORT_PARAM
argument_list|,
name|Short
operator|.
name|class
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|SHORT_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveLong
parameter_list|()
block|{
name|doResolveTypeTest
argument_list|(
name|LONG_PARAM
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|LONG_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveFloat
parameter_list|()
block|{
name|doResolveTypeTest
argument_list|(
name|FLOAT_PARAM
argument_list|,
name|Float
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|FLOAT_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveDouble
parameter_list|()
block|{
name|doResolveTypeTest
argument_list|(
name|DOUBLE_PARAM
argument_list|,
name|Double
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
name|DOUBLE_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tesResolveBoolean
parameter_list|()
block|{
name|doResolveTypeTest
argument_list|(
name|BOOLEAN_PARAM
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|BOOLEAN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveInt
parameter_list|()
block|{
name|doResolveTypeTest
argument_list|(
name|INT_PARAM
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|INT_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveString
parameter_list|()
block|{
name|String
name|ret
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|STRING_PARAM
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect string value returned"
argument_list|,
name|STRING_VALUE
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|doResolveTypeTest
parameter_list|(
name|String
name|param
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|expectedValue
parameter_list|)
block|{
name|T
name|ret
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|param
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect string value returned"
argument_list|,
name|expectedValue
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

