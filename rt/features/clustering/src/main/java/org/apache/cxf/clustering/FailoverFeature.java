begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|annotations
operator|.
name|EvaluateAllEndpoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelectorHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_comment
comment|/**  * This feature may be applied to a Client so as to enable  * failover from the initial target endpoint to any other  * compatible endpoint for the target service.  */
end_comment

begin_class
annotation|@
name|NoJSR250Annotations
annotation|@
name|EvaluateAllEndpoints
specifier|public
class|class
name|FailoverFeature
extends|extends
name|AbstractFeature
block|{
specifier|private
name|FailoverStrategy
name|failoverStrategy
decl_stmt|;
specifier|private
name|FailoverTargetSelector
name|targetSelector
decl_stmt|;
specifier|private
name|String
name|clientBootstrapAddress
decl_stmt|;
specifier|public
name|FailoverFeature
parameter_list|()
block|{              }
specifier|public
name|FailoverFeature
parameter_list|(
name|String
name|clientBootstrapAddress
parameter_list|)
block|{
name|this
operator|.
name|clientBootstrapAddress
operator|=
name|clientBootstrapAddress
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeProvider
parameter_list|(
name|InterceptorProvider
name|provider
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
if|if
condition|(
name|provider
operator|instanceof
name|ConduitSelectorHolder
condition|)
block|{
name|ConduitSelectorHolder
name|csHolder
init|=
operator|(
name|ConduitSelectorHolder
operator|)
name|provider
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|csHolder
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|ConduitSelector
name|conduitSelector
init|=
name|initTargetSelector
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|csHolder
operator|.
name|setConduitSelector
argument_list|(
name|conduitSelector
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Client
name|client
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|ConduitSelector
name|selector
init|=
name|initTargetSelector
argument_list|(
name|client
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|setConduitSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ConduitSelector
name|initTargetSelector
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|FailoverTargetSelector
name|selector
init|=
name|getTargetSelector
argument_list|()
decl_stmt|;
name|selector
operator|.
name|setEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|getStrategy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|selector
operator|.
name|setStrategy
argument_list|(
name|getStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|selector
return|;
block|}
specifier|public
name|FailoverTargetSelector
name|getTargetSelector
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|targetSelector
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|targetSelector
operator|=
operator|new
name|FailoverTargetSelector
argument_list|(
name|clientBootstrapAddress
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|targetSelector
return|;
block|}
specifier|public
name|void
name|setTargetSelector
parameter_list|(
name|FailoverTargetSelector
name|selector
parameter_list|)
block|{
name|this
operator|.
name|targetSelector
operator|=
name|selector
expr_stmt|;
block|}
specifier|public
name|void
name|setStrategy
parameter_list|(
name|FailoverStrategy
name|strategy
parameter_list|)
block|{
name|failoverStrategy
operator|=
name|strategy
expr_stmt|;
block|}
specifier|public
name|FailoverStrategy
name|getStrategy
parameter_list|()
block|{
return|return
name|failoverStrategy
return|;
block|}
specifier|public
name|String
name|getClientBootstrapAddress
parameter_list|()
block|{
return|return
name|clientBootstrapAddress
return|;
block|}
specifier|public
name|void
name|setClientBootstrapAddress
parameter_list|(
name|String
name|clientBootstrapAddress
parameter_list|)
block|{
name|this
operator|.
name|clientBootstrapAddress
operator|=
name|clientBootstrapAddress
expr_stmt|;
block|}
block|}
end_class

end_unit

