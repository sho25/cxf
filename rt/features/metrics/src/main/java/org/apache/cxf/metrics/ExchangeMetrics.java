begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|interceptors
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|interceptors
operator|.
name|CountingOutputStream
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|ExchangeMetrics
block|{
name|Deque
argument_list|<
name|MetricsContext
argument_list|>
name|contexts
init|=
operator|new
name|LinkedList
argument_list|<
name|MetricsContext
argument_list|>
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
decl_stmt|;
name|boolean
name|started
decl_stmt|;
name|long
name|startTime
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|ExchangeMetrics
parameter_list|(
name|Exchange
name|e
parameter_list|)
block|{
name|exchange
operator|=
name|e
expr_stmt|;
block|}
specifier|public
name|ExchangeMetrics
name|addContext
parameter_list|(
name|MetricsContext
name|ctx
parameter_list|)
block|{
name|contexts
operator|.
name|addLast
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|started
condition|)
block|{
name|ctx
operator|.
name|start
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
name|started
operator|=
literal|true
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
for|for
control|(
name|MetricsContext
name|ctx
range|:
name|contexts
control|)
block|{
name|ctx
operator|.
name|start
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|started
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|startTime
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
name|CountingInputStream
name|in
init|=
name|exchange
operator|.
name|get
argument_list|(
name|CountingInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|inSize
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|outSize
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|inSize
operator|=
name|in
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|CountingOutputStream
name|out
init|=
name|exchange
operator|.
name|get
argument_list|(
name|CountingOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|outSize
operator|=
name|out
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|long
name|l
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
decl_stmt|;
for|for
control|(
name|MetricsContext
name|ctx
range|:
name|contexts
control|)
block|{
name|ctx
operator|.
name|stop
argument_list|(
name|l
argument_list|,
name|inSize
argument_list|,
name|outSize
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

