begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|codahale
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|FaultMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|CodahaleMetricsContext
implements|implements
name|MetricsContext
implements|,
name|Closeable
block|{
specifier|protected
name|Counter
name|inFlight
decl_stmt|;
specifier|protected
name|Timer
name|totals
decl_stmt|;
specifier|protected
name|Timer
name|uncheckedApplicationFaults
decl_stmt|;
specifier|protected
name|Timer
name|checkedApplicationFaults
decl_stmt|;
specifier|protected
name|Timer
name|runtimeFaults
decl_stmt|;
specifier|protected
name|Timer
name|logicalRuntimeFaults
decl_stmt|;
specifier|protected
name|Meter
name|incomingData
decl_stmt|;
specifier|protected
name|Meter
name|outgoingData
decl_stmt|;
specifier|protected
specifier|final
name|String
name|baseName
decl_stmt|;
specifier|protected
specifier|final
name|MetricRegistry
name|registry
decl_stmt|;
specifier|public
name|CodahaleMetricsContext
parameter_list|(
name|String
name|prefix
parameter_list|,
name|MetricRegistry
name|registry
parameter_list|)
block|{
name|baseName
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|totals
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Totals"
argument_list|)
expr_stmt|;
name|uncheckedApplicationFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Unchecked Application Faults"
argument_list|)
expr_stmt|;
name|checkedApplicationFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Checked Application Faults"
argument_list|)
expr_stmt|;
name|runtimeFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Runtime Faults"
argument_list|)
expr_stmt|;
name|logicalRuntimeFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Logical Runtime Faults"
argument_list|)
expr_stmt|;
name|inFlight
operator|=
name|registry
operator|.
name|counter
argument_list|(
name|baseName
operator|+
literal|"Attribute=In Flight"
argument_list|)
expr_stmt|;
name|incomingData
operator|=
name|registry
operator|.
name|meter
argument_list|(
name|baseName
operator|+
literal|"Attribute=Data Read"
argument_list|)
expr_stmt|;
name|outgoingData
operator|=
name|registry
operator|.
name|meter
argument_list|(
name|baseName
operator|+
literal|"Attribute=Data Written"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Totals"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Unchecked Application Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Checked Application Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Runtime Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Logical Runtime Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=In Flight"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Data Read"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Data Written"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|(
name|Exchange
name|ex
parameter_list|)
block|{
name|inFlight
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|long
name|timeInNS
parameter_list|,
name|long
name|inSize
parameter_list|,
name|long
name|outSize
parameter_list|,
name|Exchange
name|ex
parameter_list|)
block|{
name|totals
operator|.
name|update
argument_list|(
name|timeInNS
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|inSize
operator|!=
operator|-
literal|1
condition|)
block|{
name|incomingData
operator|.
name|mark
argument_list|(
name|inSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outSize
operator|!=
operator|-
literal|1
condition|)
block|{
name|outgoingData
operator|.
name|mark
argument_list|(
name|outSize
argument_list|)
expr_stmt|;
block|}
name|FaultMode
name|fm
init|=
name|ex
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fm
operator|==
literal|null
operator|&&
name|ex
operator|.
name|getOutFaultMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fm
operator|=
name|ex
operator|.
name|getOutFaultMessage
argument_list|()
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fm
operator|==
literal|null
operator|&&
name|ex
operator|.
name|getInMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fm
operator|=
name|ex
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fm
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|fm
condition|)
block|{
case|case
name|CHECKED_APPLICATION_FAULT
case|:
name|checkedApplicationFaults
operator|.
name|update
argument_list|(
name|timeInNS
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNCHECKED_APPLICATION_FAULT
case|:
name|uncheckedApplicationFaults
operator|.
name|update
argument_list|(
name|timeInNS
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
break|break;
case|case
name|RUNTIME_FAULT
case|:
name|runtimeFaults
operator|.
name|update
argument_list|(
name|timeInNS
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOGICAL_RUNTIME_FAULT
case|:
name|logicalRuntimeFaults
operator|.
name|update
argument_list|(
name|timeInNS
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
name|inFlight
operator|.
name|dec
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Counter
name|getInFlight
parameter_list|()
block|{
return|return
name|inFlight
return|;
block|}
specifier|public
name|Timer
name|getTotals
parameter_list|()
block|{
return|return
name|totals
return|;
block|}
specifier|public
name|Timer
name|getUncheckedApplicationFaults
parameter_list|()
block|{
return|return
name|uncheckedApplicationFaults
return|;
block|}
specifier|public
name|Timer
name|getCheckedApplicationFaults
parameter_list|()
block|{
return|return
name|checkedApplicationFaults
return|;
block|}
specifier|public
name|Timer
name|getRuntimeFaults
parameter_list|()
block|{
return|return
name|runtimeFaults
return|;
block|}
specifier|public
name|Timer
name|getLogicalRuntimeFaults
parameter_list|()
block|{
return|return
name|logicalRuntimeFaults
return|;
block|}
specifier|public
name|Meter
name|getIncomingData
parameter_list|()
block|{
return|return
name|incomingData
return|;
block|}
specifier|public
name|Meter
name|getOutgoingData
parameter_list|()
block|{
return|return
name|outgoingData
return|;
block|}
specifier|public
name|String
name|getBaseName
parameter_list|()
block|{
return|return
name|baseName
return|;
block|}
specifier|public
name|MetricRegistry
name|getRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
block|}
end_class

end_unit

