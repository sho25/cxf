begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|ConfiguredBeanLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|ExchangeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|MetricsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMetricsInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|AbstractMetricsInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ExchangeMetrics
name|getExchangeMetrics
parameter_list|(
name|Message
name|m
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
name|ExchangeMetrics
name|ctx
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|ExchangeMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|ctx
operator|=
operator|new
name|ExchangeMetrics
argument_list|(
name|m
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|ExchangeMetrics
operator|.
name|class
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|addEndpointMetrics
argument_list|(
name|ctx
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
specifier|private
name|void
name|addEndpointMetrics
parameter_list|(
name|ExchangeMetrics
name|ctx
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|Endpoint
name|ep
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|ep
operator|.
name|get
argument_list|(
name|MetricsContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|ep
init|)
block|{
name|o
operator|=
name|createEndpointMetrics
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|MetricsContext
argument_list|>
name|list
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|)
decl_stmt|;
for|for
control|(
name|MetricsContext
name|c
range|:
name|list
control|)
block|{
name|ctx
operator|.
name|addContext
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|MetricsContext
condition|)
block|{
name|ctx
operator|.
name|addContext
argument_list|(
operator|(
name|MetricsContext
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|createEndpointMetrics
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
specifier|final
name|Endpoint
name|ep
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|ep
operator|.
name|get
argument_list|(
name|MetricsContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|ConfiguredBeanLocator
name|b
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|ConfiguredBeanLocator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|MetricsContext
argument_list|>
name|contexts
init|=
operator|new
name|ArrayList
argument_list|<
name|MetricsContext
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetricsProvider
name|p
range|:
name|b
operator|.
name|getBeansOfType
argument_list|(
name|MetricsProvider
operator|.
name|class
argument_list|)
control|)
block|{
name|MetricsContext
name|c
init|=
name|p
operator|.
name|createEndpointContext
argument_list|(
name|ep
argument_list|,
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|m
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|contexts
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|Closeable
condition|)
block|{
name|ep
operator|.
name|addCleanupHook
argument_list|(
operator|(
name|Closeable
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contexts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|o
operator|=
name|contexts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|o
operator|=
name|contexts
expr_stmt|;
block|}
name|ep
operator|.
name|put
argument_list|(
name|MetricsContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
specifier|protected
name|void
name|addOperationMetrics
parameter_list|(
name|ExchangeMetrics
name|ctx
parameter_list|,
name|Message
name|m
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
if|if
condition|(
name|boi
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
name|boi
operator|=
name|boi
operator|.
name|getWrappedOperation
argument_list|()
expr_stmt|;
block|}
name|Object
name|o
init|=
name|boi
operator|.
name|getProperty
argument_list|(
name|MetricsContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|boi
init|)
block|{
name|o
operator|=
name|createMetricsContextForOperation
argument_list|(
name|m
argument_list|,
name|boi
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|MetricsContext
argument_list|>
name|list
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|)
decl_stmt|;
for|for
control|(
name|MetricsContext
name|c
range|:
name|list
control|)
block|{
name|ctx
operator|.
name|addContext
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|MetricsContext
condition|)
block|{
name|ctx
operator|.
name|addContext
argument_list|(
operator|(
name|MetricsContext
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|createMetricsContextForOperation
parameter_list|(
name|Message
name|message
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|Object
name|o
init|=
name|boi
operator|.
name|getProperty
argument_list|(
name|MetricsContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|ConfiguredBeanLocator
name|b
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|ConfiguredBeanLocator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|MetricsContext
argument_list|>
name|contexts
init|=
operator|new
name|ArrayList
argument_list|<
name|MetricsContext
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetricsProvider
name|p
range|:
name|b
operator|.
name|getBeansOfType
argument_list|(
name|MetricsProvider
operator|.
name|class
argument_list|)
control|)
block|{
name|MetricsContext
name|c
init|=
name|p
operator|.
name|createOperationContext
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|boi
argument_list|,
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|contexts
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|Closeable
condition|)
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|addCleanupHook
argument_list|(
operator|(
name|Closeable
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contexts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|o
operator|=
name|contexts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|o
operator|=
name|contexts
expr_stmt|;
block|}
name|boi
operator|.
name|setProperty
argument_list|(
name|MetricsContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|ExchangeMetrics
name|ctx
init|=
name|getExchangeMetrics
argument_list|(
name|m
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

