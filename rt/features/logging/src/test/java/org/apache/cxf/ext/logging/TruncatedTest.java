begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|event
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TruncatedTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|truncatedOutboundInterceptorOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|LogEventSenderMock
name|logEventSender
init|=
operator|new
name|LogEventSenderMock
argument_list|()
decl_stmt|;
name|LoggingOutInterceptor
name|interceptor
init|=
operator|new
name|LoggingOutInterceptor
argument_list|(
name|logEventSender
argument_list|)
decl_stmt|;
name|interceptor
operator|.
name|setLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// set limit to 1 byte in order to get a truncated message!
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|byte
index|[]
name|payload
init|=
literal|"TestMessage"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|LogEvent
name|event
init|=
name|logEventSender
operator|.
name|getLogEvent
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|event
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
comment|// only the first byte is read!
name|assertTrue
argument_list|(
name|event
operator|.
name|isTruncated
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|truncatedOutboundInterceptorWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|Writer
operator|.
name|class
argument_list|,
name|stringWriter
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|LogEventSenderMock
name|logEventSender
init|=
operator|new
name|LogEventSenderMock
argument_list|()
decl_stmt|;
name|LoggingOutInterceptor
name|interceptor
init|=
operator|new
name|LoggingOutInterceptor
argument_list|(
name|logEventSender
argument_list|)
decl_stmt|;
name|interceptor
operator|.
name|setLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// set limit to 1 byte in order to get a truncated message!
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Writer
name|out
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Writer
operator|.
name|class
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"TestMessage"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|LogEvent
name|event
init|=
name|logEventSender
operator|.
name|getLogEvent
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|event
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
comment|// only the first byte is read!
name|assertTrue
argument_list|(
name|event
operator|.
name|isTruncated
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|truncatedInboundInterceptorInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|inputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"TestMessage"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|LogEventSenderMock
name|logEventSender
init|=
operator|new
name|LogEventSenderMock
argument_list|()
decl_stmt|;
name|LoggingInInterceptor
name|interceptor
init|=
operator|new
name|LoggingInInterceptor
argument_list|(
name|logEventSender
argument_list|)
decl_stmt|;
name|interceptor
operator|.
name|setLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// set limit to 1 byte in order to get a truncated message!
name|Collection
argument_list|<
name|PhaseInterceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
init|=
name|interceptor
operator|.
name|getAdditionalInterceptors
argument_list|()
decl_stmt|;
for|for
control|(
name|PhaseInterceptor
name|intercept
range|:
name|interceptors
control|)
block|{
name|intercept
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LogEvent
name|event
init|=
name|logEventSender
operator|.
name|getLogEvent
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|event
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
comment|// only the first byte is read!
name|assertTrue
argument_list|(
name|event
operator|.
name|isTruncated
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|truncatedInboundInterceptorReader
parameter_list|()
throws|throws
name|IOException
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|StringReader
name|stringReader
init|=
operator|new
name|StringReader
argument_list|(
literal|"TestMessage"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|Reader
operator|.
name|class
argument_list|,
name|stringReader
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|LogEventSenderMock
name|logEventSender
init|=
operator|new
name|LogEventSenderMock
argument_list|()
decl_stmt|;
name|LoggingInInterceptor
name|interceptor
init|=
operator|new
name|LoggingInInterceptor
argument_list|(
name|logEventSender
argument_list|)
decl_stmt|;
name|interceptor
operator|.
name|setLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// set limit to 1 byte in order to get a truncated message!
name|Collection
argument_list|<
name|PhaseInterceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
init|=
name|interceptor
operator|.
name|getAdditionalInterceptors
argument_list|()
decl_stmt|;
for|for
control|(
name|PhaseInterceptor
name|intercept
range|:
name|interceptors
control|)
block|{
name|intercept
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LogEvent
name|event
init|=
name|logEventSender
operator|.
name|getLogEvent
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|event
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
comment|// only the first byte is read!
name|assertTrue
argument_list|(
name|event
operator|.
name|isTruncated
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

