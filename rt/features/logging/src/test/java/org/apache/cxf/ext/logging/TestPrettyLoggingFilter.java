begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|event
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|event
operator|.
name|LogEventSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|event
operator|.
name|PrettyLoggingFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *   * Test {@linkplain PrettyLoggingFilter}} with well-formed and non-well-formed XML payloads.  *   */
end_comment

begin_class
specifier|public
class|class
name|TestPrettyLoggingFilter
block|{
annotation|@
name|Test
specifier|public
name|void
name|testWellformedXMLMessage
parameter_list|()
block|{
name|String
name|message
init|=
literal|"<parent><child>text</child></parent>"
decl_stmt|;
name|String
name|expected
init|=
literal|"<parent>\n<child>text</child>\n</parent>\n"
decl_stmt|;
name|filter
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidXMLMessageUnexpectedEndTag
parameter_list|()
block|{
name|String
name|message
init|=
literal|"<parentA><child>text</child></parentB>"
decl_stmt|;
name|filter
argument_list|(
name|message
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidXMLMessageMissingEndTag
parameter_list|()
block|{
name|String
name|message
init|=
literal|"<parentA><child>text</child>"
decl_stmt|;
name|filter
argument_list|(
name|message
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidXMLMessageGarbageStartTag
parameter_list|()
block|{
name|String
name|message
init|=
literal|"<a b c><child>text</child>"
decl_stmt|;
name|filter
argument_list|(
name|message
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * In case of a truncated message we do not want the pretty print to auto close the tags       * giving a false impression of how to message looks like.      */
annotation|@
name|Test
specifier|public
name|void
name|testInvalidButTruncatedXMLMessageWithMissingEndTag
parameter_list|()
block|{
name|String
name|message
init|=
literal|"<parent><child>text</child>"
decl_stmt|;
name|String
name|expected
init|=
literal|"<parent>\n<child>text</child>"
decl_stmt|;
name|filter
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|filter
parameter_list|(
name|String
name|payload
parameter_list|,
name|String
name|expected
parameter_list|,
name|boolean
name|truncated
parameter_list|)
block|{
name|LogEvent
name|logEvent
init|=
operator|new
name|LogEvent
argument_list|()
decl_stmt|;
name|logEvent
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|logEvent
operator|.
name|setContentType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
name|logEvent
operator|.
name|setTruncated
argument_list|(
name|truncated
argument_list|)
expr_stmt|;
name|LogEventSender
name|dummy
init|=
operator|new
name|LogEventSender
argument_list|()
block|{
specifier|public
name|void
name|send
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{             }
block|}
decl_stmt|;
name|PrettyLoggingFilter
name|prettyFilter
init|=
operator|new
name|PrettyLoggingFilter
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
name|prettyFilter
operator|.
name|setPrettyLogging
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prettyFilter
operator|.
name|send
argument_list|(
name|logEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|logEvent
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

