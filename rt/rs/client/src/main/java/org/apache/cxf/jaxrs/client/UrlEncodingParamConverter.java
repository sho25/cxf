begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|HttpUtils
import|;
end_import

begin_class
specifier|public
class|class
name|UrlEncodingParamConverter
implements|implements
name|ParamConverter
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|Set
argument_list|<
name|Character
argument_list|>
name|encodeClientParametersList
decl_stmt|;
specifier|public
name|UrlEncodingParamConverter
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UrlEncodingParamConverter
parameter_list|(
name|String
name|encodeClientParametersListStr
parameter_list|)
block|{
if|if
condition|(
name|encodeClientParametersListStr
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|chars
init|=
name|encodeClientParametersListStr
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|encodeClientParametersList
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|ch
range|:
name|chars
control|)
block|{
comment|// this may need to be tuned though this should cover URI reserved chars
name|encodeClientParametersList
operator|.
name|add
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
name|ch
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|HttpUtils
operator|.
name|urlDecode
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|encodeClientParametersList
operator|==
literal|null
operator|||
name|encodeClientParametersList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|HttpUtils
operator|.
name|urlEncode
argument_list|(
name|s
argument_list|)
return|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Character
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodeClientParametersList
operator|.
name|contains
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|HttpUtils
operator|.
name|urlEncode
argument_list|(
name|ch
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

