begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Priorities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|CacheControl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|Headers
import|;
end_import

begin_class
annotation|@
name|Priority
argument_list|(
name|Priorities
operator|.
name|USER
operator|-
literal|1
argument_list|)
specifier|public
class|class
name|CacheControlClientReaderInterceptor
implements|implements
name|ReaderInterceptor
block|{
specifier|private
name|Cache
argument_list|<
name|Key
argument_list|,
name|Entry
argument_list|>
name|cache
decl_stmt|;
annotation|@
name|Context
specifier|private
name|UriInfo
name|uriInfo
decl_stmt|;
specifier|private
name|boolean
name|cacheResponseInputStream
decl_stmt|;
specifier|public
name|CacheControlClientReaderInterceptor
parameter_list|(
specifier|final
name|Cache
argument_list|<
name|Key
argument_list|,
name|Entry
argument_list|>
name|cache
parameter_list|)
block|{
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CacheControlClientReaderInterceptor
parameter_list|()
block|{
comment|// no-op: use setCache then
block|}
specifier|public
name|CacheControlClientReaderInterceptor
name|setCache
parameter_list|(
specifier|final
name|Cache
argument_list|<
name|Key
argument_list|,
name|Entry
argument_list|>
name|c
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|c
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|aroundReadFrom
parameter_list|(
specifier|final
name|ReaderInterceptorContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|Object
name|cachedEntity
init|=
name|context
operator|.
name|getProperty
argument_list|(
name|CacheControlClientRequestFilter
operator|.
name|CACHED_ENTITY_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedEntity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cachedEntity
operator|instanceof
name|BytesEntity
condition|)
block|{
comment|// InputStream or byte[]
name|BytesEntity
name|bytesEntity
init|=
operator|(
name|BytesEntity
operator|)
name|cachedEntity
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|bytesEntity
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|cachedEntity
operator|=
name|bytesEntity
operator|.
name|isFromStream
argument_list|()
condition|?
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
else|:
name|bytes
expr_stmt|;
if|if
condition|(
name|cacheResponseInputStream
condition|)
block|{
name|InputStream
name|is
init|=
name|bytesEntity
operator|.
name|isFromStream
argument_list|()
condition|?
operator|(
name|InputStream
operator|)
name|cachedEntity
else|:
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|cachedEntity
argument_list|)
decl_stmt|;
name|context
operator|.
name|setInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|proceed
argument_list|()
return|;
block|}
block|}
return|return
name|cachedEntity
return|;
block|}
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|context
operator|.
name|getProperty
argument_list|(
name|CacheControlClientRequestFilter
operator|.
name|NO_CACHE_PROPERTY
argument_list|)
argument_list|)
condition|)
block|{
comment|// non GET HTTP method or other restriction applies
return|return
name|context
operator|.
name|proceed
argument_list|()
return|;
block|}
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|responseHeaders
init|=
name|context
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
specifier|final
name|String
name|cacheControlHeader
init|=
name|responseHeaders
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CACHE_CONTROL
argument_list|)
decl_stmt|;
specifier|final
name|CacheControl
name|cacheControl
init|=
name|CacheControl
operator|.
name|valueOf
argument_list|(
name|cacheControlHeader
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cachedBytes
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|validCacheControl
init|=
name|isCacheControlValid
argument_list|(
name|context
argument_list|,
name|cacheControl
argument_list|)
decl_stmt|;
if|if
condition|(
name|validCacheControl
operator|&&
name|cacheResponseInputStream
condition|)
block|{
comment|// if Cache-Control is set and the stream needs to be cached then do it
name|cachedBytes
operator|=
name|IOUtils
operator|.
name|readBytesFromStream
argument_list|(
operator|(
name|InputStream
operator|)
name|context
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|cachedBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Read the stream and get the actual entity
name|Object
name|responseEntity
init|=
name|context
operator|.
name|proceed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|validCacheControl
condition|)
block|{
return|return
name|responseEntity
return|;
block|}
comment|// if a max-age property is set then it overrides Expires
name|long
name|expiry
init|=
name|cacheControl
operator|.
name|getMaxAge
argument_list|()
decl_stmt|;
if|if
condition|(
name|expiry
operator|==
operator|-
literal|1
condition|)
block|{
comment|//TODO: Review if Expires can be supported as an alternative to Cache-Control
name|String
name|expiresHeader
init|=
name|responseHeaders
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|EXPIRES
argument_list|)
decl_stmt|;
if|if
condition|(
name|expiresHeader
operator|.
name|startsWith
argument_list|(
literal|"'"
argument_list|)
operator|&&
name|expiresHeader
operator|.
name|endsWith
argument_list|(
literal|"'"
argument_list|)
condition|)
block|{
name|expiresHeader
operator|=
name|expiresHeader
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|expiresHeader
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|expiry
operator|=
operator|(
name|Headers
operator|.
name|getHttpDateFormat
argument_list|()
operator|.
name|parse
argument_list|(
name|expiresHeader
argument_list|)
operator|.
name|getTime
argument_list|()
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|)
operator|/
literal|1000
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ParseException
name|e
parameter_list|)
block|{
comment|// TODO: Revisit the possibility of supporting multiple formats
block|}
block|}
name|Serializable
name|ser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cachedBytes
operator|!=
literal|null
condition|)
block|{
comment|// store the cached bytes - they will be parsed again when a client cache will return them
name|ser
operator|=
operator|new
name|BytesEntity
argument_list|(
name|cachedBytes
argument_list|,
name|responseEntity
operator|instanceof
name|InputStream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|responseEntity
operator|instanceof
name|Serializable
condition|)
block|{
comment|// store the entity directly
name|ser
operator|=
operator|(
name|Serializable
operator|)
name|responseEntity
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|responseEntity
operator|instanceof
name|InputStream
condition|)
block|{
comment|// read the stream, cache it, the cached bytes will be returned immediately
comment|// when a client cache will return them
name|byte
index|[]
name|bytes
init|=
name|IOUtils
operator|.
name|readBytesFromStream
argument_list|(
operator|(
name|InputStream
operator|)
name|responseEntity
argument_list|)
decl_stmt|;
name|ser
operator|=
operator|new
name|BytesEntity
argument_list|(
name|bytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|responseEntity
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|responseEntity
operator|instanceof
name|byte
index|[]
condition|)
block|{
comment|// the cached bytes will be returned immediately when a client cache will return them
name|ser
operator|=
operator|new
name|BytesEntity
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|responseEntity
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ser
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Entry
name|entry
init|=
operator|new
name|Entry
argument_list|(
name|ser
argument_list|,
name|responseHeaders
argument_list|,
name|computeCacheHeaders
argument_list|(
name|responseHeaders
argument_list|)
argument_list|,
name|expiry
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
decl_stmt|;
specifier|final
name|String
name|accepts
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperty
argument_list|(
name|CacheControlClientRequestFilter
operator|.
name|CLIENT_ACCEPTS
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
operator|new
name|Key
argument_list|(
name|uri
argument_list|,
name|accepts
argument_list|)
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|responseEntity
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeCacheHeaders
parameter_list|(
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|responseHeaders
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cacheHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|etagHeader
init|=
name|responseHeaders
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|ETAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|etagHeader
operator|!=
literal|null
condition|)
block|{
name|cacheHeaders
operator|.
name|put
argument_list|(
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|,
name|etagHeader
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|lastModifiedHeader
init|=
name|responseHeaders
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|LAST_MODIFIED
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastModifiedHeader
operator|!=
literal|null
condition|)
block|{
name|cacheHeaders
operator|.
name|put
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|,
name|lastModifiedHeader
argument_list|)
expr_stmt|;
block|}
return|return
name|cacheHeaders
return|;
block|}
specifier|public
name|boolean
name|isCacheInputStream
parameter_list|()
block|{
return|return
name|cacheResponseInputStream
return|;
block|}
comment|/**      * Enforce the caching of the response stream.       * This is not recommended if the client code expects Serializable data,      * example, String or custom JAXB beans marked as Serializable,       * which can be stored in the cache directly.      * Use this property only if returning a cached entity does require a       * repeated stream parsing.      *       * @param cacheInputStream      */
specifier|public
name|void
name|setCacheResponseInputStream
parameter_list|(
name|boolean
name|cacheInputStream
parameter_list|)
block|{
name|this
operator|.
name|cacheResponseInputStream
operator|=
name|cacheInputStream
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isCacheControlValid
parameter_list|(
specifier|final
name|ReaderInterceptorContext
name|context
parameter_list|,
specifier|final
name|CacheControl
name|responseControl
parameter_list|)
block|{
name|boolean
name|valid
init|=
name|responseControl
operator|!=
literal|null
operator|&&
operator|!
name|responseControl
operator|.
name|isNoCache
argument_list|()
operator|&&
operator|!
name|responseControl
operator|.
name|isNoStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|String
name|clientHeader
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperty
argument_list|(
name|CacheControlClientRequestFilter
operator|.
name|CLIENT_CACHE_CONTROL
argument_list|)
decl_stmt|;
name|CacheControl
name|clientControl
init|=
name|clientHeader
operator|==
literal|null
condition|?
literal|null
else|:
name|CacheControl
operator|.
name|valueOf
argument_list|(
name|clientHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientControl
operator|!=
literal|null
operator|&&
name|clientControl
operator|.
name|isPrivate
argument_list|()
operator|!=
name|responseControl
operator|.
name|isPrivate
argument_list|()
condition|)
block|{
name|valid
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|valid
return|;
block|}
block|}
end_class

end_unit

