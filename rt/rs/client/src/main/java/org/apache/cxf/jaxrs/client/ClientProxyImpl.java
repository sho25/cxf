begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|BeanParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|CookieParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HeaderParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|MatrixParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|InvocationCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|AsyncResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
operator|.
name|ClassLoaderHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PrimitiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Multipart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|FormUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Proxy-based client implementation  *  */
end_comment

begin_class
specifier|public
class|class
name|ClientProxyImpl
extends|extends
name|AbstractClient
implements|implements
name|InvocationHandlerAware
implements|,
name|InvocationHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ClientProxyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|ClientProxyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SLASH
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BUFFER_PROXY_RESPONSE
init|=
literal|"buffer.proxy.response"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_METHOD_PARAM_BODY_INDEX
init|=
literal|"proxy.method.parameter.body.index"
decl_stmt|;
specifier|private
name|ClassResourceInfo
name|cri
decl_stmt|;
specifier|private
name|ClassLoader
name|proxyLoader
decl_stmt|;
specifier|private
name|boolean
name|inheritHeaders
decl_stmt|;
specifier|private
name|boolean
name|isRoot
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|valuesMap
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|BodyWriter
name|bodyWriter
init|=
operator|new
name|BodyWriter
argument_list|()
decl_stmt|;
specifier|private
name|Client
name|proxy
decl_stmt|;
specifier|public
name|ClientProxyImpl
parameter_list|(
name|URI
name|baseURI
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|inheritHeaders
parameter_list|,
name|Object
modifier|...
name|varValues
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|LocalClientState
argument_list|(
name|baseURI
argument_list|)
argument_list|,
name|loader
argument_list|,
name|cri
argument_list|,
name|isRoot
argument_list|,
name|inheritHeaders
argument_list|,
name|varValues
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClientProxyImpl
parameter_list|(
name|ClientState
name|initialState
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|inheritHeaders
parameter_list|,
name|Object
modifier|...
name|varValues
parameter_list|)
block|{
name|super
argument_list|(
name|initialState
argument_list|)
expr_stmt|;
name|this
operator|.
name|proxyLoader
operator|=
name|loader
expr_stmt|;
name|this
operator|.
name|cri
operator|=
name|cri
expr_stmt|;
name|this
operator|.
name|isRoot
operator|=
name|isRoot
expr_stmt|;
name|this
operator|.
name|inheritHeaders
operator|=
name|inheritHeaders
expr_stmt|;
name|initValuesMap
argument_list|(
name|varValues
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ClientAsyncResponseInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|setProxyClient
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|this
operator|.
name|proxy
operator|=
name|client
expr_stmt|;
block|}
specifier|private
name|void
name|initValuesMap
parameter_list|(
name|Object
modifier|...
name|varValues
parameter_list|)
block|{
if|if
condition|(
name|isRoot
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vars
init|=
name|cri
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getVariables
argument_list|()
decl_stmt|;
name|valuesMap
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vars
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|varValues
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|varValues
operator|.
name|length
condition|)
block|{
name|valuesMap
operator|.
name|put
argument_list|(
name|vars
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|varValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"ROOT_VARS_MISMATCH"
argument_list|,
name|BUNDLE
argument_list|,
name|vars
operator|.
name|size
argument_list|()
argument_list|,
name|varValues
operator|.
name|length
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|valuesMap
operator|.
name|put
argument_list|(
name|vars
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Updates the current state if Client method is invoked, otherwise      * does the remote invocation or returns a new proxy if subresource      * method is invoked. Can throw an expected exception if ResponseExceptionMapper      * is registered      */
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|o
parameter_list|,
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
throws|throws
name|Throwable
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
init|=
name|m
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|Client
operator|.
name|class
operator|==
name|declaringClass
operator|||
name|InvocationHandlerAware
operator|.
name|class
operator|==
name|declaringClass
operator|||
name|Object
operator|.
name|class
operator|==
name|declaringClass
condition|)
block|{
return|return
name|m
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|params
argument_list|)
return|;
block|}
name|resetResponse
argument_list|()
expr_stmt|;
name|OperationResourceInfo
name|ori
init|=
name|cri
operator|.
name|getMethodDispatcher
argument_list|()
operator|.
name|getOperationResourceInfo
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|ori
operator|==
literal|null
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|m
argument_list|,
literal|"INVALID_RESOURCE_METHOD"
argument_list|)
expr_stmt|;
block|}
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|types
init|=
name|getParametersInfo
argument_list|(
name|m
argument_list|,
name|params
argument_list|,
name|ori
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|beanParamsList
init|=
name|getParameters
argument_list|(
name|types
argument_list|,
name|ParameterType
operator|.
name|BEAN
argument_list|)
decl_stmt|;
name|int
name|bodyIndex
init|=
name|getBodyIndex
argument_list|(
name|types
argument_list|,
name|ori
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|pathParams
init|=
name|getPathParamValues
argument_list|(
name|m
argument_list|,
name|params
argument_list|,
name|types
argument_list|,
name|beanParamsList
argument_list|,
name|ori
argument_list|,
name|bodyIndex
argument_list|)
decl_stmt|;
name|UriBuilder
name|builder
init|=
name|getCurrentBuilder
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRoot
condition|)
block|{
name|addNonEmptyPath
argument_list|(
name|builder
argument_list|,
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addNonEmptyPath
argument_list|(
name|builder
argument_list|,
name|ori
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|handleMatrixes
argument_list|(
name|m
argument_list|,
name|params
argument_list|,
name|types
argument_list|,
name|beanParamsList
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|handleQueries
argument_list|(
name|m
argument_list|,
name|params
argument_list|,
name|types
argument_list|,
name|beanParamsList
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|builder
operator|.
name|buildFromEncoded
argument_list|(
name|pathParams
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|getHeaders
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramHeaders
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|handleHeaders
argument_list|(
name|m
argument_list|,
name|params
argument_list|,
name|paramHeaders
argument_list|,
name|beanParamsList
argument_list|,
name|types
argument_list|)
expr_stmt|;
name|handleCookies
argument_list|(
name|m
argument_list|,
name|params
argument_list|,
name|paramHeaders
argument_list|,
name|beanParamsList
argument_list|,
name|types
argument_list|)
expr_stmt|;
if|if
condition|(
name|ori
operator|.
name|isSubResourceLocator
argument_list|()
condition|)
block|{
name|ClassResourceInfo
name|subCri
init|=
name|cri
operator|.
name|getSubResource
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subCri
operator|==
literal|null
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|m
argument_list|,
literal|"INVALID_SUBRESOURCE"
argument_list|)
expr_stmt|;
block|}
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subHeaders
init|=
name|paramHeaders
decl_stmt|;
if|if
condition|(
name|inheritHeaders
condition|)
block|{
name|subHeaders
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
name|ClientState
name|newState
init|=
name|getState
argument_list|()
operator|.
name|newState
argument_list|(
name|uri
argument_list|,
name|subHeaders
argument_list|,
name|getTemplateParametersMap
argument_list|(
name|ori
operator|.
name|getURITemplate
argument_list|()
argument_list|,
name|pathParams
argument_list|)
argument_list|)
decl_stmt|;
name|ClientProxyImpl
name|proxyImpl
init|=
operator|new
name|ClientProxyImpl
argument_list|(
name|newState
argument_list|,
name|proxyLoader
argument_list|,
name|subCri
argument_list|,
literal|false
argument_list|,
name|inheritHeaders
argument_list|)
decl_stmt|;
name|proxyImpl
operator|.
name|setConfiguration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JAXRSClientFactory
operator|.
name|createProxy
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|proxyLoader
argument_list|,
name|proxyImpl
argument_list|)
return|;
block|}
name|headers
operator|.
name|putAll
argument_list|(
name|paramHeaders
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setTemplates
argument_list|(
name|getTemplateParametersMap
argument_list|(
name|ori
operator|.
name|getURITemplate
argument_list|()
argument_list|,
name|pathParams
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|body
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bodyIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|body
operator|=
name|params
index|[
name|bodyIndex
index|]
expr_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|bodyIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|)
condition|)
block|{
name|body
operator|=
name|handleForm
argument_list|(
name|m
argument_list|,
name|params
argument_list|,
name|types
argument_list|,
name|beanParamsList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|REQUEST_BODY
argument_list|)
condition|)
block|{
name|body
operator|=
name|handleMultipart
argument_list|(
name|types
argument_list|,
name|ori
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|setRequestHeaders
argument_list|(
name|headers
argument_list|,
name|ori
argument_list|,
name|types
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|)
argument_list|,
name|body
operator|==
literal|null
condition|?
literal|null
else|:
name|body
operator|.
name|getClass
argument_list|()
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|doChainedInvocation
argument_list|(
name|uri
argument_list|,
name|headers
argument_list|,
name|ori
argument_list|,
name|params
argument_list|,
name|body
argument_list|,
name|bodyIndex
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|resetResponseStateImmediatelyIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addNonEmptyPath
parameter_list|(
name|UriBuilder
name|builder
parameter_list|,
name|String
name|pathValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|SLASH
operator|.
name|equals
argument_list|(
name|pathValue
argument_list|)
condition|)
block|{
name|builder
operator|.
name|path
argument_list|(
name|pathValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|getParametersInfo
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
name|ori
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|map
return|;
block|}
name|int
name|requestBodyParam
init|=
literal|0
decl_stmt|;
name|int
name|multipartParam
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|parameters
control|)
block|{
if|if
condition|(
name|isIgnorableParameter
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|REQUEST_BODY
condition|)
block|{
name|requestBodyParam
operator|++
expr_stmt|;
if|if
condition|(
name|getMultipart
argument_list|(
name|ori
argument_list|,
name|p
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|multipartParam
operator|++
expr_stmt|;
block|}
block|}
name|map
operator|.
name|add
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|REQUEST_BODY
argument_list|)
condition|)
block|{
if|if
condition|(
name|requestBodyParam
operator|>
literal|1
operator|&&
name|requestBodyParam
operator|!=
name|multipartParam
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
argument_list|,
literal|"SINGLE_BODY_ONLY"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|ParameterType
operator|.
name|FORM
argument_list|)
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
argument_list|,
literal|"ONLY_FORM_ALLOWED"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isIgnorableParameter
parameter_list|(
name|Method
name|m
parameter_list|,
name|Parameter
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|CONTEXT
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|p
operator|.
name|getType
argument_list|()
operator|==
name|ParameterType
operator|.
name|REQUEST_BODY
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|==
name|AsyncResponse
operator|.
name|class
return|;
block|}
specifier|private
specifier|static
name|int
name|getBodyIndex
parameter_list|(
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|list
init|=
name|map
operator|.
name|get
argument_list|(
name|ParameterType
operator|.
name|REQUEST_BODY
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
operator|-
literal|1
else|:
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|ori
operator|.
name|isSubResourceLocator
argument_list|()
operator|&&
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|reportInvalidResourceMethod
argument_list|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
argument_list|,
literal|"NO_BODY_IN_SUBRESOURCE"
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|private
name|void
name|checkResponse
parameter_list|(
name|Method
name|m
parameter_list|,
name|Response
name|r
parameter_list|,
name|Message
name|inMessage
parameter_list|)
throws|throws
name|Throwable
block|{
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
name|int
name|status
init|=
name|r
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|>=
literal|300
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|exTypes
init|=
name|m
operator|.
name|getExceptionTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|exTypes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|exTypes
operator|=
operator|new
name|Class
index|[]
block|{
name|WebApplicationException
operator|.
name|class
block|}
expr_stmt|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|exType
range|:
name|exTypes
control|)
block|{
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
name|mapper
init|=
name|findExceptionMapper
argument_list|(
name|inMessage
argument_list|,
name|exType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
name|mapper
operator|.
name|fromResponse
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
throw|throw
name|t
throw|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|t
operator|==
literal|null
operator|)
operator|&&
operator|(
name|m
operator|.
name|getReturnType
argument_list|()
operator|==
name|Response
operator|.
name|class
operator|)
operator|&&
operator|(
name|m
operator|.
name|getExceptionTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return;
block|}
name|t
operator|=
name|convertToWebApplicationException
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|inMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
name|t
throw|;
block|}
name|Endpoint
name|ep
init|=
name|inMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|InterceptorProvider
operator|.
name|class
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
operator|new
name|Fault
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|abort
argument_list|()
expr_stmt|;
if|if
condition|(
name|ep
operator|.
name|getInFaultObserver
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ep
operator|.
name|getInFaultObserver
argument_list|()
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
throw|throw
name|t
throw|;
block|}
block|}
specifier|private
specifier|static
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
name|findExceptionMapper
parameter_list|(
name|Message
name|message
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|exType
parameter_list|)
block|{
name|ClientProviderFactory
name|pf
init|=
name|ClientProviderFactory
operator|.
name|getInstance
argument_list|(
name|message
argument_list|)
decl_stmt|;
return|return
name|pf
operator|.
name|createResponseExceptionMapper
argument_list|(
name|message
argument_list|,
name|exType
argument_list|)
return|;
block|}
specifier|private
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setRequestHeaders
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|boolean
name|formParams
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|bodyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|responseClass
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|formParams
operator|||
name|bodyClass
operator|!=
literal|null
operator|&&
name|MultivaluedMap
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|bodyClass
argument_list|)
condition|)
block|{
name|headers
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|ctType
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MediaType
argument_list|>
name|consumeTypes
init|=
name|ori
operator|.
name|getConsumeTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|consumeTypes
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|consumeTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|WILDCARD_TYPE
argument_list|)
condition|)
block|{
name|ctType
operator|=
name|JAXRSUtils
operator|.
name|mediaTypeToString
argument_list|(
name|ori
operator|.
name|getConsumeTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctType
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|ctType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|MediaType
argument_list|>
name|accepts
init|=
name|getAccept
argument_list|(
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|accepts
operator|==
literal|null
condition|)
block|{
name|boolean
name|produceWildcard
init|=
name|ori
operator|.
name|getProduceTypes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|ori
operator|.
name|getProduceTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|WILDCARD_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|produceWildcard
condition|)
block|{
name|accepts
operator|=
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|responseClass
argument_list|)
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
else|:
name|Collections
operator|.
name|singletonList
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|responseClass
operator|==
name|Void
operator|.
name|class
operator|||
name|responseClass
operator|==
name|Void
operator|.
name|TYPE
condition|)
block|{
name|accepts
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|MediaType
operator|.
name|WILDCARD_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accepts
operator|=
name|ori
operator|.
name|getProduceTypes
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|MediaType
name|mt
range|:
name|accepts
control|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|JAXRSUtils
operator|.
name|mediaTypeToString
argument_list|(
name|mt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|headers
return|;
block|}
specifier|private
name|List
argument_list|<
name|MediaType
argument_list|>
name|getAccept
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|allHeaders
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|headers
init|=
name|allHeaders
operator|.
name|get
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|==
literal|null
operator|||
name|headers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|MediaType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|headers
control|)
block|{
name|types
operator|.
name|addAll
argument_list|(
name|JAXRSUtils
operator|.
name|parseMediaTypes
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|getPathParamValues
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|beanParams
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|int
name|bodyIndex
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methodVars
init|=
name|ori
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getVariables
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|paramsList
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|PATH
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|beanParamValues
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|beanParams
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|beanParams
control|)
block|{
name|beanParamValues
operator|.
name|putAll
argument_list|(
name|getValuesFromBeanParam
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|PathParam
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|beanParamValues
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|methodVars
operator|.
name|containsAll
argument_list|(
name|beanParamValues
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|classVars
init|=
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getURITemplate
argument_list|()
operator|.
name|getVariables
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|classVar
range|:
name|classVars
control|)
block|{
name|BeanPair
name|pair
init|=
name|beanParamValues
operator|.
name|get
argument_list|(
name|classVar
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|!=
literal|null
condition|)
block|{
name|Object
name|paramValue
init|=
name|convertParamValue
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|,
name|pair
operator|.
name|getAnns
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRoot
condition|)
block|{
name|valuesMap
operator|.
name|put
argument_list|(
name|classVar
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|paramValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|isRoot
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|valuesMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Parameter
argument_list|>
name|paramsMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Parameter
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|paramsList
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|InjectionUtils
operator|.
name|extractValuesFromBean
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|var
range|:
name|methodVars
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|paramsMap
operator|.
name|put
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|requestBody
init|=
name|bodyIndex
operator|==
operator|-
literal|1
condition|?
literal|null
else|:
name|params
index|[
name|bodyIndex
index|]
decl_stmt|;
for|for
control|(
name|String
name|varName
range|:
name|methodVars
control|)
block|{
name|Parameter
name|p
init|=
name|paramsMap
operator|.
name|remove
argument_list|(
name|varName
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|convertParamValue
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|getParamAnnotations
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|beanParamValues
operator|.
name|containsKey
argument_list|(
name|varName
argument_list|)
condition|)
block|{
name|BeanPair
name|pair
init|=
name|beanParamValues
operator|.
name|get
argument_list|(
name|varName
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|convertParamValue
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|,
name|pair
operator|.
name|getAnns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|requestBody
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Method
name|getter
init|=
name|requestBody
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"get"
operator|+
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|varName
argument_list|)
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
name|list
operator|.
name|add
argument_list|(
name|getter
operator|.
name|invoke
argument_list|(
name|requestBody
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
for|for
control|(
name|Parameter
name|p
range|:
name|paramsMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|valuesMap
operator|.
name|containsKey
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|valuesMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|index
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|convertParamValue
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|list
return|;
block|}
end_class

begin_function
specifier|private
specifier|static
name|Annotation
index|[]
name|getParamAnnotations
parameter_list|(
name|Method
name|m
parameter_list|,
name|Parameter
name|p
parameter_list|)
block|{
return|return
name|m
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|Parameter
argument_list|>
name|getParameters
parameter_list|(
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|ParameterType
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|handleQueries
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|beanParams
parameter_list|,
name|UriBuilder
name|ub
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|qs
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|QUERY
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|qs
control|)
block|{
if|if
condition|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|!=
literal|null
condition|)
block|{
name|addMatrixQueryParamsToBuilder
argument_list|(
name|ub
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|ParameterType
operator|.
name|QUERY
argument_list|,
name|getParamAnnotations
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
argument_list|,
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Parameter
name|p
range|:
name|beanParams
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|values
init|=
name|getValuesFromBeanParam
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|QueryParam
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addMatrixQueryParamsToBuilder
argument_list|(
name|ub
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ParameterType
operator|.
name|QUERY
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAnns
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|getValuesFromBeanParam
parameter_list|(
name|Object
name|bean
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annClass
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|getValuesFromBeanParam
argument_list|(
name|bean
argument_list|,
name|annClass
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|getValuesFromBeanParam
parameter_list|(
name|Object
name|bean
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annClass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|values
parameter_list|)
block|{
name|boolean
name|completeFieldIntrospectionNeeded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|propertyName
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Annotation
name|methodAnnotation
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|annClass
argument_list|)
decl_stmt|;
name|boolean
name|beanParam
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|BeanParam
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|methodAnnotation
operator|!=
literal|null
operator|||
name|beanParam
condition|)
block|{
name|Method
name|getter
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"get"
operator|+
name|propertyName
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|getter
operator|.
name|invoke
argument_list|(
name|bean
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|methodAnnotation
operator|!=
literal|null
condition|)
block|{
name|String
name|annotationValue
init|=
name|AnnotationUtils
operator|.
name|getAnnotationValue
argument_list|(
name|methodAnnotation
argument_list|)
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
name|annotationValue
argument_list|,
operator|new
name|BeanPair
argument_list|(
name|value
argument_list|,
name|m
operator|.
name|getParameterAnnotations
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getValuesFromBeanParam
argument_list|(
name|value
argument_list|,
name|annClass
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
name|fieldName
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
name|InjectionUtils
operator|.
name|getDeclaredField
argument_list|(
name|bean
operator|.
name|getClass
argument_list|()
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|completeFieldIntrospectionNeeded
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|boolean
name|jaxrsParamAnnAvailable
init|=
name|getValuesFromBeanParamField
argument_list|(
name|bean
argument_list|,
name|f
argument_list|,
name|annClass
argument_list|,
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jaxrsParamAnnAvailable
operator|&&
name|f
operator|.
name|getAnnotation
argument_list|(
name|BeanParam
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|ReflectionUtil
operator|.
name|accessDeclaredField
argument_list|(
name|f
argument_list|,
name|bean
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|getValuesFromBeanParam
argument_list|(
name|value
argument_list|,
name|annClass
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|completeFieldIntrospectionNeeded
condition|)
block|{
for|for
control|(
name|Field
name|f
range|:
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|boolean
name|jaxrsParamAnnAvailable
init|=
name|getValuesFromBeanParamField
argument_list|(
name|bean
argument_list|,
name|f
argument_list|,
name|annClass
argument_list|,
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jaxrsParamAnnAvailable
operator|&&
name|f
operator|.
name|getAnnotation
argument_list|(
name|BeanParam
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|ReflectionUtil
operator|.
name|accessDeclaredField
argument_list|(
name|f
argument_list|,
name|bean
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|getValuesFromBeanParam
argument_list|(
name|value
argument_list|,
name|annClass
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|values
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|getValuesFromBeanParamField
parameter_list|(
name|Object
name|bean
parameter_list|,
name|Field
name|f
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annClass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|values
parameter_list|)
block|{
name|boolean
name|jaxrsParamAnnAvailable
init|=
literal|false
decl_stmt|;
name|Annotation
name|fieldAnnotation
init|=
name|f
operator|.
name|getAnnotation
argument_list|(
name|annClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldAnnotation
operator|!=
literal|null
condition|)
block|{
name|jaxrsParamAnnAvailable
operator|=
literal|true
expr_stmt|;
name|Object
name|value
init|=
name|ReflectionUtil
operator|.
name|accessDeclaredField
argument_list|(
name|f
argument_list|,
name|bean
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|annotationValue
init|=
name|AnnotationUtils
operator|.
name|getAnnotationValue
argument_list|(
name|fieldAnnotation
argument_list|)
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
name|annotationValue
argument_list|,
operator|new
name|BeanPair
argument_list|(
name|value
argument_list|,
name|f
operator|.
name|getAnnotations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jaxrsParamAnnAvailable
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|handleMatrixes
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|beanParams
parameter_list|,
name|UriBuilder
name|ub
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|mx
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|MATRIX
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|mx
control|)
block|{
if|if
condition|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|!=
literal|null
condition|)
block|{
name|addMatrixQueryParamsToBuilder
argument_list|(
name|ub
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|ParameterType
operator|.
name|MATRIX
argument_list|,
name|getParamAnnotations
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
argument_list|,
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Parameter
name|p
range|:
name|beanParams
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|values
init|=
name|getValuesFromBeanParam
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|MatrixParam
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addMatrixQueryParamsToBuilder
argument_list|(
name|ub
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ParameterType
operator|.
name|MATRIX
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAnns
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|handleForm
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|beanParams
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|form
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|fm
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|FORM
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|fm
control|)
block|{
name|addFormValue
argument_list|(
name|form
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|getParamAnnotations
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Parameter
name|p
range|:
name|beanParams
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|values
init|=
name|getValuesFromBeanParam
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|FormParam
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addFormValue
argument_list|(
name|form
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAnns
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|form
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|addFormValue
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|form
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|pValue
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
if|if
condition|(
name|pValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|pValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|c
init|=
name|pValue
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|pValue
argument_list|)
else|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|pValue
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|FormUtils
operator|.
name|addPropertyToForm
argument_list|(
name|form
argument_list|,
name|name
argument_list|,
name|convertParamValue
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|anns
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|FormUtils
operator|.
name|addPropertyToForm
argument_list|(
name|form
argument_list|,
name|name
argument_list|,
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
name|pValue
else|:
name|convertParamValue
argument_list|(
name|pValue
argument_list|,
name|anns
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|List
argument_list|<
name|Attachment
argument_list|>
name|handleMultipart
parameter_list|(
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
name|List
argument_list|<
name|Attachment
argument_list|>
name|atts
init|=
operator|new
name|LinkedList
argument_list|<
name|Attachment
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|fm
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|REQUEST_BODY
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|fm
control|)
block|{
name|Multipart
name|part
init|=
name|getMultipart
argument_list|(
name|ori
argument_list|,
name|p
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|Object
name|partObject
init|=
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|partObject
operator|!=
literal|null
condition|)
block|{
name|atts
operator|.
name|add
argument_list|(
operator|new
name|Attachment
argument_list|(
name|part
operator|.
name|value
argument_list|()
argument_list|,
name|part
operator|.
name|type
argument_list|()
argument_list|,
name|partObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|atts
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|handleHeaders
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|beanParams
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|hs
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|HEADER
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|hs
control|)
block|{
if|if
condition|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|convertParamValue
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|getParamAnnotations
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Parameter
name|p
range|:
name|beanParams
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|values
init|=
name|getValuesFromBeanParam
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|HeaderParam
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|convertParamValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAnns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|Multipart
name|getMultipart
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|Method
name|aMethod
init|=
name|ori
operator|.
name|getAnnotatedMethod
argument_list|()
decl_stmt|;
return|return
name|aMethod
operator|!=
literal|null
condition|?
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|aMethod
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|index
index|]
argument_list|,
name|Multipart
operator|.
name|class
argument_list|)
else|:
literal|null
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|handleCookies
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|beanParams
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|cs
init|=
name|getParameters
argument_list|(
name|map
argument_list|,
name|ParameterType
operator|.
name|COOKIE
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|cs
control|)
block|{
if|if
condition|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|COOKIE
argument_list|,
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|'='
operator|+
name|convertParamValue
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|getParamAnnotations
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Parameter
name|p
range|:
name|beanParams
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|values
init|=
name|getValuesFromBeanParam
argument_list|(
name|params
index|[
name|p
operator|.
name|getIndex
argument_list|()
index|]
argument_list|,
name|CookieParam
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|BeanPair
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|COOKIE
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|convertParamValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAnns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|//CHECKSTYLE:OFF
end_comment

begin_function
specifier|private
name|Object
name|doChainedInvocation
parameter_list|(
name|URI
name|uri
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|Object
index|[]
name|methodParams
parameter_list|,
name|Object
name|body
parameter_list|,
name|int
name|bodyIndex
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invocationContext
parameter_list|)
throws|throws
name|Throwable
block|{
comment|//CHECKSTYLE:ON
name|Bus
name|configuredBus
init|=
name|getConfiguration
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|Bus
name|origBus
init|=
name|BusFactory
operator|.
name|getAndSetThreadDefaultBus
argument_list|(
name|configuredBus
argument_list|)
decl_stmt|;
name|ClassLoaderHolder
name|origLoader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ClassLoader
name|loader
init|=
name|configuredBus
operator|.
name|getExtension
argument_list|(
name|ClassLoader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
name|origLoader
operator|=
name|ClassLoaderUtils
operator|.
name|setThreadContextClassloader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
name|Message
name|outMessage
init|=
name|createMessage
argument_list|(
name|body
argument_list|,
name|ori
operator|.
name|getHttpMethod
argument_list|()
argument_list|,
name|headers
argument_list|,
name|uri
argument_list|,
name|exchange
argument_list|,
name|invocationContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|bodyIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|outMessage
operator|.
name|put
argument_list|(
name|Type
operator|.
name|class
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|bodyIndex
index|]
argument_list|)
expr_stmt|;
block|}
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|setOneWay
argument_list|(
name|ori
operator|.
name|isOneway
argument_list|()
argument_list|)
expr_stmt|;
name|setSupportOnewayResponseProperty
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|outMessage
operator|.
name|setContent
argument_list|(
name|OperationResourceInfo
operator|.
name|class
argument_list|,
name|ori
argument_list|)
expr_stmt|;
name|setPlainOperationNameProperty
argument_list|(
name|outMessage
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Method
operator|.
name|class
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
argument_list|)
expr_stmt|;
name|outMessage
operator|.
name|put
argument_list|(
name|Annotation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|getMethodAnnotations
argument_list|(
name|ori
operator|.
name|getAnnotatedMethod
argument_list|()
argument_list|,
name|bodyIndex
argument_list|)
argument_list|)
expr_stmt|;
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|SERVICE_OBJECT
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|methodParams
operator|!=
literal|null
condition|)
block|{
name|outMessage
operator|.
name|put
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|methodParams
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|outMessage
operator|.
name|put
argument_list|(
name|PROXY_METHOD_PARAM_BODY_INDEX
argument_list|,
name|bodyIndex
argument_list|)
expr_stmt|;
block|}
name|outMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|bodyWriter
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
init|=
name|getRequestContext
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
name|reqContext
operator|.
name|put
argument_list|(
name|OperationResourceInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ori
argument_list|)
expr_stmt|;
name|reqContext
operator|.
name|put
argument_list|(
name|PROXY_METHOD_PARAM_BODY_INDEX
argument_list|,
name|bodyIndex
argument_list|)
expr_stmt|;
comment|// execute chain
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|asyncCallback
init|=
name|checkAsyncCallback
argument_list|(
name|ori
argument_list|,
name|reqContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncCallback
operator|!=
literal|null
condition|)
block|{
name|doInvokeAsync
argument_list|(
name|ori
argument_list|,
name|outMessage
argument_list|,
name|asyncCallback
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|doRunInterceptorChain
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|Object
index|[]
name|results
init|=
name|preProcessResult
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|results
index|[
literal|0
index|]
return|;
block|}
try|try
block|{
return|return
name|handleResponse
argument_list|(
name|outMessage
argument_list|,
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getServiceClass
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|completeExchange
argument_list|(
name|outMessage
operator|.
name|getExchange
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|origLoader
operator|!=
literal|null
condition|)
block|{
name|origLoader
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|origBus
operator|!=
name|configuredBus
condition|)
block|{
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|origBus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|checkAsyncCallback
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
parameter_list|)
block|{
name|Object
name|callbackProp
init|=
name|reqContext
operator|.
name|get
argument_list|(
name|InvocationCallback
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|callbackProp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|callbackProp
operator|instanceof
name|Collection
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Collection
argument_list|<
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
argument_list|>
name|callbacks
init|=
operator|(
name|Collection
argument_list|<
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|callbackProp
decl_stmt|;
for|for
control|(
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|doCheckAsyncCallback
argument_list|(
name|ori
argument_list|,
name|callback
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|callback
return|;
block|}
block|}
block|}
else|else
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|callback
init|=
operator|(
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
operator|)
name|callbackProp
decl_stmt|;
return|return
name|doCheckAsyncCallback
argument_list|(
name|ori
argument_list|,
name|callback
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|private
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|doCheckAsyncCallback
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|callback
parameter_list|)
block|{
name|Type
name|callbackOutType
init|=
name|getCallbackType
argument_list|(
name|callback
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|callbackRespClass
init|=
name|getCallbackClass
argument_list|(
name|callbackOutType
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|methodReturnType
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Object
operator|.
name|class
operator|==
name|callbackRespClass
operator|||
name|callbackRespClass
operator|.
name|isAssignableFrom
argument_list|(
name|methodReturnType
argument_list|)
operator|||
name|PrimitiveUtils
operator|.
name|canPrimitiveTypeBeAutoboxed
argument_list|(
name|methodReturnType
argument_list|,
name|callbackRespClass
argument_list|)
condition|)
block|{
return|return
name|callback
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|protected
name|void
name|doInvokeAsync
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Message
name|outMessage
parameter_list|,
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|asyncCallback
parameter_list|)
block|{
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|setSynchronous
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAsyncMessageObserverIfNeeded
argument_list|(
name|outMessage
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|JaxrsClientCallback
argument_list|<
name|?
argument_list|>
name|cb
init|=
operator|new
name|JaxrsClientCallback
argument_list|<
name|Object
argument_list|>
argument_list|(
name|asyncCallback
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
decl_stmt|;
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|JaxrsClientCallback
operator|.
name|class
argument_list|,
name|cb
argument_list|)
expr_stmt|;
name|doRunInterceptorChain
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|Object
name|retryInvoke
parameter_list|(
name|URI
name|newRequestURI
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|Object
name|body
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invContext
parameter_list|)
throws|throws
name|Throwable
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|invContext
operator|.
name|get
argument_list|(
name|REQUEST_CONTEXT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|bodyIndex
init|=
name|body
operator|!=
literal|null
condition|?
operator|(
name|Integer
operator|)
name|reqContext
operator|.
name|get
argument_list|(
name|PROXY_METHOD_PARAM_BODY_INDEX
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
name|OperationResourceInfo
name|ori
init|=
operator|(
name|OperationResourceInfo
operator|)
name|reqContext
operator|.
name|get
argument_list|(
name|OperationResourceInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|doChainedInvocation
argument_list|(
name|newRequestURI
argument_list|,
name|headers
argument_list|,
name|ori
argument_list|,
literal|null
argument_list|,
name|body
argument_list|,
name|bodyIndex
argument_list|,
name|exchange
argument_list|,
name|invContext
argument_list|)
return|;
block|}
end_function

begin_function
specifier|protected
name|Object
name|handleResponse
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|serviceCls
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
name|Response
name|r
init|=
name|setResponseBuilder
argument_list|(
name|outMessage
argument_list|,
name|outMessage
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|(
operator|(
name|ResponseImpl
operator|)
name|r
operator|)
operator|.
name|setOutMessage
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setResponse
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Method
operator|.
name|class
argument_list|)
decl_stmt|;
name|checkResponse
argument_list|(
name|method
argument_list|,
name|r
argument_list|,
name|outMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|Void
operator|.
name|class
operator|||
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|Void
operator|.
name|TYPE
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|Response
operator|.
name|class
operator|&&
operator|(
name|r
operator|.
name|getEntity
argument_list|()
operator|==
literal|null
operator|||
name|InputStream
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|r
operator|.
name|getEntity
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
operator|(
operator|(
name|InputStream
operator|)
name|r
operator|.
name|getEntity
argument_list|()
operator|)
operator|.
name|available
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return
name|r
return|;
block|}
if|if
condition|(
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|super
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getResponseContext
argument_list|()
operator|.
name|get
argument_list|(
name|BUFFER_PROXY_RESPONSE
argument_list|)
argument_list|)
condition|)
block|{
name|r
operator|.
name|bufferEntity
argument_list|()
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|Type
name|genericType
init|=
name|InjectionUtils
operator|.
name|processGenericTypeIfNeeded
argument_list|(
name|serviceCls
argument_list|,
name|returnType
argument_list|,
name|method
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
decl_stmt|;
name|returnType
operator|=
name|InjectionUtils
operator|.
name|updateParamClassToTypeIfNeeded
argument_list|(
name|returnType
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
return|return
name|readBody
argument_list|(
name|r
argument_list|,
name|outMessage
argument_list|,
name|returnType
argument_list|,
name|genericType
argument_list|,
name|method
operator|.
name|getDeclaredAnnotations
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|ClientProviderFactory
operator|.
name|getInstance
argument_list|(
name|outMessage
argument_list|)
operator|.
name|clearThreadLocalProxies
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|Object
name|getInvocationHandler
parameter_list|()
block|{
return|return
name|this
return|;
block|}
end_function

begin_function
specifier|protected
specifier|static
name|void
name|reportInvalidResourceMethod
parameter_list|(
name|Method
name|m
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMsg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|name
argument_list|,
name|BUNDLE
argument_list|,
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcessingException
argument_list|(
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
end_function

begin_function
specifier|protected
specifier|static
name|Annotation
index|[]
name|getMethodAnnotations
parameter_list|(
name|Method
name|aMethod
parameter_list|,
name|int
name|bodyIndex
parameter_list|)
block|{
return|return
name|aMethod
operator|==
literal|null
operator|||
name|bodyIndex
operator|==
operator|-
literal|1
condition|?
operator|new
name|Annotation
index|[
literal|0
index|]
else|:
name|aMethod
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|bodyIndex
index|]
return|;
block|}
end_function

begin_class
specifier|private
class|class
name|BodyWriter
extends|extends
name|AbstractBodyWriter
block|{
specifier|protected
name|void
name|doWriteBody
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|Object
name|body
parameter_list|,
name|Type
name|bodyType
parameter_list|,
name|Annotation
index|[]
name|customAnns
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|Fault
block|{
name|OperationResourceInfo
name|ori
init|=
name|outMessage
operator|.
name|getContent
argument_list|(
name|OperationResourceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ori
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Method
name|method
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
decl_stmt|;
name|int
name|bodyIndex
init|=
operator|(
name|Integer
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|PROXY_METHOD_PARAM_BODY_INDEX
argument_list|)
decl_stmt|;
name|Annotation
index|[]
name|anns
init|=
name|customAnns
operator|!=
literal|null
condition|?
name|customAnns
else|:
name|getMethodAnnotations
argument_list|(
name|ori
operator|.
name|getAnnotatedMethod
argument_list|()
argument_list|,
name|bodyIndex
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|bodyIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|paramClass
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|bodyIndex
index|]
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|bodyClass
init|=
name|paramClass
operator|.
name|isAssignableFrom
argument_list|(
name|body
operator|.
name|getClass
argument_list|()
argument_list|)
condition|?
name|paramClass
else|:
name|body
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Type
name|genericType
init|=
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|bodyIndex
index|]
decl_stmt|;
if|if
condition|(
name|bodyType
operator|!=
literal|null
condition|)
block|{
name|genericType
operator|=
name|bodyType
expr_stmt|;
block|}
name|genericType
operator|=
name|InjectionUtils
operator|.
name|processGenericTypeIfNeeded
argument_list|(
name|ori
operator|.
name|getClassResourceInfo
argument_list|()
operator|.
name|getServiceClass
argument_list|()
argument_list|,
name|bodyClass
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
name|bodyClass
operator|=
name|InjectionUtils
operator|.
name|updateParamClassToTypeIfNeeded
argument_list|(
name|bodyClass
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
name|writeBody
argument_list|(
name|body
argument_list|,
name|outMessage
argument_list|,
name|bodyClass
argument_list|,
name|genericType
argument_list|,
name|anns
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Type
name|paramType
init|=
name|body
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|bodyType
operator|!=
literal|null
condition|)
block|{
name|paramType
operator|=
name|bodyType
expr_stmt|;
block|}
name|writeBody
argument_list|(
name|body
argument_list|,
name|outMessage
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|,
name|paramType
argument_list|,
name|anns
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|BeanPair
block|{
specifier|private
name|Object
name|value
decl_stmt|;
specifier|private
name|Annotation
index|[]
name|anns
decl_stmt|;
name|BeanPair
parameter_list|(
name|Object
name|value
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|anns
operator|=
name|anns
expr_stmt|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|Annotation
index|[]
name|getAnns
parameter_list|()
block|{
return|return
name|anns
return|;
block|}
block|}
end_class

begin_class
class|class
name|ClientAsyncResponseInterceptor
extends|extends
name|AbstractClientAsyncResponseInterceptor
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doHandleAsyncResponse
parameter_list|(
name|Message
name|message
parameter_list|,
name|Response
name|r
parameter_list|,
name|JaxrsClientCallback
argument_list|<
name|?
argument_list|>
name|cb
parameter_list|)
block|{
try|try
block|{
name|Object
name|entity
init|=
name|handleResponse
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
argument_list|,
name|cb
operator|.
name|getResponseClass
argument_list|()
argument_list|)
decl_stmt|;
name|cb
operator|.
name|handleResponse
argument_list|(
name|message
argument_list|,
operator|new
name|Object
index|[]
block|{
name|entity
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|cb
operator|.
name|handleException
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|completeExchange
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|closeAsyncResponseIfPossible
argument_list|(
name|r
argument_list|,
name|message
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

unit|}
end_unit

