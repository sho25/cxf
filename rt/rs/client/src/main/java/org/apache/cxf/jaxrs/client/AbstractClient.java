begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|EntityTag
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Retryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractOutDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InFaultChainInitiatorObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxInEndingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|spec
operator|.
name|ClientRequestFilterInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|spec
operator|.
name|ClientResponseFilterInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriBuilderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|URITemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|HttpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseChainCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_comment
comment|/**  * Common proxy and http-centric client implementation  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractClient
implements|implements
name|Client
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|REQUEST_CONTEXT
init|=
literal|"RequestContext"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|RESPONSE_CONTEXT
init|=
literal|"ResponseContext"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|KEEP_CONDUIT_ALIVE
init|=
literal|"KeepConduitAlive"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|HTTP_SCHEME
init|=
literal|"http"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_PROPERTY
init|=
literal|"jaxrs.proxy"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_SPLIT_PROPERTY
init|=
literal|"org.apache.cxf.http.header.split"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|KNOWN_METHODS
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"GET"
argument_list|,
literal|"POST"
argument_list|,
literal|"HEAD"
argument_list|,
literal|"OPTIONS"
argument_list|,
literal|"PUT"
argument_list|,
literal|"DELETE"
argument_list|,
literal|"TRACE"
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
name|ClientConfiguration
name|cfg
init|=
operator|new
name|ClientConfiguration
argument_list|()
decl_stmt|;
specifier|private
name|ClientState
name|state
decl_stmt|;
specifier|private
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|protected
name|AbstractClient
parameter_list|(
name|ClientState
name|initialState
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|initialState
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|query
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
name|addMatrixQueryParamsToBuilder
argument_list|(
name|getCurrentBuilder
argument_list|()
argument_list|,
name|name
argument_list|,
name|ParameterType
operator|.
name|QUERY
argument_list|,
literal|null
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|header
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Content-Type can have a single value only"
argument_list|)
throw|;
block|}
name|type
argument_list|(
name|convertParamValue
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Object
name|o
range|:
name|values
control|)
block|{
name|possiblyAddHeader
argument_list|(
name|name
argument_list|,
name|convertParamValue
argument_list|(
name|o
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|headers
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|state
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|accept
parameter_list|(
name|MediaType
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|MediaType
name|mt
range|:
name|types
control|)
block|{
name|possiblyAddHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|JAXRSUtils
operator|.
name|mediaTypeToString
argument_list|(
name|mt
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|type
parameter_list|(
name|MediaType
name|ct
parameter_list|)
block|{
return|return
name|type
argument_list|(
name|JAXRSUtils
operator|.
name|mediaTypeToString
argument_list|(
name|ct
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|state
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|accept
parameter_list|(
name|String
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|possiblyAddHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|cookie
parameter_list|(
name|Cookie
name|cookie
parameter_list|)
block|{
name|possiblyAddHeader
argument_list|(
name|HttpHeaders
operator|.
name|COOKIE
argument_list|,
name|cookie
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|authorization
parameter_list|(
name|Object
name|auth
parameter_list|)
block|{
name|String
name|value
init|=
name|convertParamValue
argument_list|(
name|auth
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|state
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|modified
parameter_list|(
name|Date
name|date
parameter_list|,
name|boolean
name|ifNot
parameter_list|)
block|{
name|SimpleDateFormat
name|dateFormat
init|=
name|HttpUtils
operator|.
name|getHttpDateFormat
argument_list|()
decl_stmt|;
name|String
name|hName
init|=
name|ifNot
condition|?
name|HttpHeaders
operator|.
name|IF_UNMODIFIED_SINCE
else|:
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
decl_stmt|;
name|state
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|putSingle
argument_list|(
name|hName
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|language
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|state
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LANGUAGE
argument_list|,
name|language
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|match
parameter_list|(
name|EntityTag
name|tag
parameter_list|,
name|boolean
name|ifNot
parameter_list|)
block|{
name|String
name|hName
init|=
name|ifNot
condition|?
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
else|:
name|HttpHeaders
operator|.
name|IF_MATCH
decl_stmt|;
name|state
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|putSingle
argument_list|(
name|hName
argument_list|,
name|tag
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|acceptLanguage
parameter_list|(
name|String
modifier|...
name|languages
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|languages
control|)
block|{
name|possiblyAddHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_LANGUAGE
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|acceptEncoding
parameter_list|(
name|String
modifier|...
name|encs
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|encs
control|)
block|{
name|possiblyAddHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_ENCODING
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|encoding
parameter_list|(
name|String
name|enc
parameter_list|)
block|{
name|state
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_ENCODING
argument_list|,
name|enc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaders
parameter_list|()
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|getRequestHeaders
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|URI
name|getBaseURI
parameter_list|()
block|{
return|return
name|state
operator|.
name|getBaseURI
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|URI
name|getCurrentURI
parameter_list|()
block|{
return|return
name|getCurrentBuilder
argument_list|()
operator|.
name|clone
argument_list|()
operator|.
name|buildFromEncoded
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Response
name|getResponse
parameter_list|()
block|{
return|return
name|state
operator|.
name|getResponse
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Client
name|reset
parameter_list|()
block|{
name|state
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|cfg
operator|.
name|getBus
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Closeable
name|c
range|:
name|cfg
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getCleanupHooks
argument_list|()
control|)
block|{
try|try
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
name|ClientLifeCycleManager
name|mgr
init|=
name|cfg
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|ClientLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|mgr
condition|)
block|{
name|mgr
operator|.
name|clientDestroyed
argument_list|(
operator|new
name|FrontendClientAdapter
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cfg
operator|.
name|getConduitSelector
argument_list|()
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|cfg
operator|.
name|getConduitSelector
argument_list|()
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore, we're destroying anyway
block|}
block|}
else|else
block|{
name|cfg
operator|.
name|getConduit
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|state
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isShutdownBusOnClose
argument_list|()
condition|)
block|{
name|cfg
operator|.
name|getBus
argument_list|()
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|state
operator|=
literal|null
expr_stmt|;
name|cfg
operator|=
literal|null
expr_stmt|;
block|}
name|closed
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|possiblyAddHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|state
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isDuplicate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|state
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
specifier|protected
name|ClientState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|protected
name|UriBuilder
name|getCurrentBuilder
parameter_list|()
block|{
return|return
name|state
operator|.
name|getCurrentBuilder
argument_list|()
return|;
block|}
specifier|protected
name|void
name|resetResponse
parameter_list|()
block|{
name|state
operator|.
name|setResponse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|resetBaseAddress
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|state
operator|.
name|setBaseURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|resetCurrentBuilder
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|state
operator|.
name|setCurrentBuilder
argument_list|(
operator|new
name|UriBuilderImpl
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTemplateParametersMap
parameter_list|(
name|URITemplate
name|template
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vars
init|=
name|template
operator|.
name|getVariables
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templatesMap
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|vars
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vars
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|)
block|{
name|templatesMap
operator|.
name|add
argument_list|(
name|vars
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|templatesMap
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|ResponseBuilder
name|setResponseBuilder
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Response
name|response
init|=
name|exchange
operator|.
name|get
argument_list|(
name|Response
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|response
operator|.
name|getStringHeaders
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JAXRSUtils
operator|.
name|fromResponse
argument_list|(
name|JAXRSUtils
operator|.
name|copyResponseIfNeeded
argument_list|(
name|response
argument_list|)
argument_list|)
return|;
block|}
name|Integer
name|status
init|=
name|getResponseCode
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|currentResponseBuilder
init|=
name|JAXRSUtils
operator|.
name|toResponseBuilder
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|Message
name|responseMessage
init|=
name|exchange
operator|.
name|getInMessage
argument_list|()
operator|!=
literal|null
condition|?
name|exchange
operator|.
name|getInMessage
argument_list|()
else|:
name|exchange
operator|.
name|getInFaultMessage
argument_list|()
decl_stmt|;
comment|// if there is no response message, we just send the response back directly
if|if
condition|(
name|responseMessage
operator|==
literal|null
condition|)
block|{
return|return
name|currentResponseBuilder
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|protocolHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|responseMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|splitHeaders
init|=
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|outMessage
operator|.
name|getContextualProperty
argument_list|(
name|HEADER_SPLIT_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|protocolHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|entry
operator|.
name|getKey
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|HttpUtils
operator|.
name|isDateRelatedHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|currentResponseBuilder
operator|.
name|header
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Object
name|valObject
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|splitHeaders
operator|&&
name|valObject
operator|instanceof
name|String
condition|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|valObject
decl_stmt|;
name|String
index|[]
name|values
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
operator|||
name|val
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|values
operator|=
operator|new
name|String
index|[]
block|{
literal|""
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'"'
operator|&&
name|val
operator|.
name|charAt
argument_list|(
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'"'
condition|)
block|{
comment|// if the value starts with a quote and ends with a quote, we do a best
comment|// effort attempt to determine what the individual values are.
name|values
operator|=
name|parseQuotedHeaderValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|splitPossible
init|=
operator|!
operator|(
name|HttpHeaders
operator|.
name|SET_COOKIE
operator|.
name|equalsIgnoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|val
operator|.
name|toUpperCase
argument_list|()
operator|.
name|contains
argument_list|(
name|HttpHeaders
operator|.
name|EXPIRES
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|values
operator|=
name|splitPossible
condition|?
name|val
operator|.
name|split
argument_list|(
literal|","
argument_list|)
else|:
operator|new
name|String
index|[]
block|{
name|val
block|}
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|values
control|)
block|{
name|String
name|theValue
init|=
name|s
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|theValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|currentResponseBuilder
operator|.
name|header
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|theValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|currentResponseBuilder
operator|.
name|header
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|valObject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|String
name|ct
init|=
operator|(
name|String
operator|)
name|responseMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ct
operator|!=
literal|null
condition|)
block|{
name|currentResponseBuilder
operator|.
name|type
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|mStream
init|=
name|responseMessage
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|currentResponseBuilder
operator|.
name|entity
argument_list|(
name|mStream
argument_list|)
expr_stmt|;
return|return
name|currentResponseBuilder
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|void
name|writeBody
parameter_list|(
name|T
name|o
parameter_list|,
name|Message
name|outMessage
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|OutputStream
name|os
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|T
argument_list|>
name|theClass
init|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|cls
decl_stmt|;
name|MediaType
name|contentType
init|=
name|JAXRSUtils
operator|.
name|toMediaType
argument_list|(
name|headers
operator|.
name|getFirst
argument_list|(
literal|"Content-Type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WriterInterceptor
argument_list|>
name|writers
init|=
name|ClientProviderFactory
operator|.
name|getInstance
argument_list|(
name|outMessage
argument_list|)
operator|.
name|createMessageBodyWriterInterceptor
argument_list|(
name|theClass
argument_list|,
name|type
argument_list|,
name|anns
argument_list|,
name|contentType
argument_list|,
name|outMessage
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|writers
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JAXRSUtils
operator|.
name|writeMessageBody
argument_list|(
name|writers
argument_list|,
name|o
argument_list|,
name|theClass
argument_list|,
name|type
argument_list|,
name|anns
argument_list|,
name|contentType
argument_list|,
name|headers
argument_list|,
name|outMessage
argument_list|)
expr_stmt|;
name|OutputStream
name|realOs
init|=
name|outMessage
operator|.
name|get
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|realOs
operator|!=
literal|null
condition|)
block|{
name|realOs
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|reportMessageHandlerProblem
argument_list|(
literal|"MSG_WRITER_PROBLEM"
argument_list|,
name|cls
argument_list|,
name|contentType
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|reportMessageHandlerProblem
argument_list|(
literal|"NO_MSG_WRITER"
argument_list|,
name|cls
argument_list|,
name|contentType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|WebApplicationException
name|convertToWebApplicationException
parameter_list|(
name|Response
name|r
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionClass
init|=
name|ExceptionUtils
operator|.
name|getWebApplicationExceptionClass
argument_list|(
name|r
argument_list|,
name|WebApplicationException
operator|.
name|class
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|ctr
init|=
name|exceptionClass
operator|.
name|getConstructor
argument_list|(
name|Response
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|WebApplicationException
operator|)
name|ctr
operator|.
name|newInstance
argument_list|(
name|r
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex2
parameter_list|)
block|{
return|return
operator|new
name|WebApplicationException
argument_list|(
name|r
argument_list|)
return|;
block|}
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|readBody
parameter_list|(
name|Response
name|r
parameter_list|,
name|Message
name|outMessage
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|==
name|Response
operator|.
name|class
condition|)
block|{
return|return
name|cls
operator|.
name|cast
argument_list|(
name|r
argument_list|)
return|;
block|}
name|int
name|status
init|=
name|r
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|status
operator|<
literal|200
operator|||
name|status
operator|==
literal|204
operator|)
operator|&&
name|r
operator|.
name|getLength
argument_list|()
operator|<=
literal|0
operator|||
name|status
operator|>=
literal|300
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
operator|(
name|ResponseImpl
operator|)
name|r
operator|)
operator|.
name|doReadEntity
argument_list|(
name|cls
argument_list|,
name|type
argument_list|,
name|anns
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|responseStreamCanBeClosed
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|cls
operator|!=
name|InputStream
operator|.
name|class
operator|&&
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|outMessage
operator|.
name|getContextualProperty
argument_list|(
literal|"response.stream.auto.close"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|completeExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|proxy
parameter_list|)
block|{
comment|// higher level conduits such as FailoverTargetSelector need to
comment|// clear the request state but a fair number of response objects
comment|// depend on InputStream being still open thus lower-level conduits
comment|// operating on InputStream don't have to close streams pro-actively
name|exchange
operator|.
name|put
argument_list|(
name|KEEP_CONDUIT_ALIVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getConfiguration
argument_list|()
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|complete
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
operator|!
name|state
operator|.
name|getBaseURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
comment|// usually the (failover) conduit change will result in a retry call
comment|// which in turn will reset the base and current request URI.
comment|// In some cases, such as the "upfront" load-balancing, etc, the retries
comment|// won't be executed so it is necessary to reset the base address
name|calculateNewRequestURI
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|s
argument_list|)
argument_list|,
name|getCurrentURI
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return;
block|}
name|s
operator|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|.
name|get
argument_list|(
literal|"transport.retransmit.url"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
operator|!
name|state
operator|.
name|getBaseURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|calculateNewRequestURI
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|s
argument_list|)
argument_list|,
name|getCurrentURI
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|protected
name|Object
index|[]
name|preProcessResult
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|Exception
name|ex
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|complete
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|checkClientException
argument_list|(
name|message
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|checkClientException
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|result
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|result
operator|!=
literal|null
condition|?
name|result
operator|.
name|toArray
argument_list|()
else|:
literal|null
return|;
block|}
specifier|protected
name|void
name|checkClientException
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|Exception
name|ex
parameter_list|)
throws|throws
name|Exception
block|{
name|Throwable
name|actualEx
init|=
name|ex
operator|instanceof
name|Fault
condition|?
operator|(
operator|(
name|Fault
operator|)
name|ex
operator|)
operator|.
name|getCause
argument_list|()
else|:
name|ex
decl_stmt|;
name|Integer
name|responseCode
init|=
name|getResponseCode
argument_list|(
name|outMessage
operator|.
name|getExchange
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseCode
operator|==
literal|null
operator|||
name|actualEx
operator|instanceof
name|IOException
operator|&&
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
literal|"client.redirect.exception"
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|actualEx
operator|instanceof
name|ProcessingException
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
elseif|else
if|if
condition|(
name|actualEx
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProcessingException
argument_list|(
name|actualEx
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
operator|||
name|cfg
operator|.
name|isResponseExpectedForOneway
argument_list|()
condition|)
block|{
name|waitForResponseCode
argument_list|(
name|outMessage
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|waitForResponseCode
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
synchronized|synchronized
init|(
name|exchange
init|)
block|{
if|if
condition|(
name|getResponseCode
argument_list|(
name|exchange
argument_list|)
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|exchange
operator|.
name|wait
argument_list|(
name|cfg
operator|.
name|getSynchronousTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
return|return;
block|}
block|}
if|if
condition|(
name|getResponseCode
argument_list|(
name|exchange
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProcessingException
argument_list|(
literal|"Response timeout"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Integer
name|getResponseCode
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Integer
name|responseCode
init|=
operator|(
name|Integer
operator|)
name|exchange
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseCode
operator|==
literal|null
operator|&&
name|exchange
operator|.
name|getInMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|responseCode
operator|=
operator|(
name|Integer
operator|)
name|exchange
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
expr_stmt|;
block|}
return|return
name|responseCode
return|;
block|}
specifier|protected
name|URI
name|calculateNewRequestURI
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
parameter_list|)
block|{
name|URI
name|newBaseURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|reqContext
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|requestURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|reqContext
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|calculateNewRequestURI
argument_list|(
name|newBaseURI
argument_list|,
name|requestURI
argument_list|,
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|reqContext
operator|.
name|get
argument_list|(
name|PROXY_PROPERTY
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|URI
name|calculateNewRequestURI
parameter_list|(
name|URI
name|newBaseURI
parameter_list|,
name|URI
name|requestURI
parameter_list|,
name|boolean
name|proxy
parameter_list|)
block|{
name|String
name|baseURIPath
init|=
name|newBaseURI
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
name|String
name|reqURIPath
init|=
name|requestURI
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
name|UriBuilder
name|builder
init|=
operator|new
name|UriBuilderImpl
argument_list|()
operator|.
name|uri
argument_list|(
name|newBaseURI
argument_list|)
decl_stmt|;
name|String
name|basePath
init|=
name|reqURIPath
operator|.
name|startsWith
argument_list|(
name|baseURIPath
argument_list|)
condition|?
name|baseURIPath
else|:
name|getBaseURI
argument_list|()
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
name|builder
operator|.
name|path
argument_list|(
name|reqURIPath
operator|.
name|equals
argument_list|(
name|basePath
argument_list|)
condition|?
literal|""
else|:
name|reqURIPath
operator|.
name|substring
argument_list|(
name|basePath
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|newQuery
init|=
name|newBaseURI
operator|.
name|getRawQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|newQuery
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|replaceQuery
argument_list|(
name|requestURI
operator|.
name|getRawQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|replaceQuery
argument_list|(
name|newQuery
argument_list|)
expr_stmt|;
block|}
name|URI
name|newRequestURI
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|resetBaseAddress
argument_list|(
name|newBaseURI
argument_list|)
expr_stmt|;
name|URI
name|current
init|=
name|proxy
condition|?
name|newBaseURI
else|:
name|newRequestURI
decl_stmt|;
name|resetCurrentBuilder
argument_list|(
name|current
argument_list|)
expr_stmt|;
return|return
name|newRequestURI
return|;
block|}
specifier|protected
name|void
name|doRunInterceptorChain
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
try|try
block|{
name|m
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|doIntercept
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|m
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Object
index|[]
name|retryInvoke
parameter_list|(
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|Object
name|body
init|=
name|params
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|params
index|[
literal|0
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|REQUEST_CONTEXT
argument_list|)
argument_list|)
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|reqContext
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
name|URI
name|newRequestURI
init|=
name|calculateNewRequestURI
argument_list|(
name|reqContext
argument_list|)
decl_stmt|;
comment|// TODO: if failover conduit selector fails to find a failover target
comment|// then it will revert to the previous endpoint; that is not very likely
comment|// but possible - thus ideally we need to resert base and current URI only
comment|// if we get the same ConduitInitiatior endpoint instance before and after
comment|// retryInvoke.
name|Object
name|response
init|=
name|retryInvoke
argument_list|(
name|newRequestURI
argument_list|,
name|headers
argument_list|,
name|body
argument_list|,
name|exchange
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|getContentsList
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|response
block|}
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Exception
name|ex
init|=
name|t
operator|instanceof
name|Exception
condition|?
operator|(
name|Exception
operator|)
name|t
else|:
operator|new
name|Exception
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|protected
specifier|abstract
name|Object
name|retryInvoke
parameter_list|(
name|URI
name|newRequestURI
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|Object
name|body
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invContext
parameter_list|)
throws|throws
name|Throwable
function_decl|;
specifier|protected
name|void
name|addMatrixQueryParamsToBuilder
parameter_list|(
name|UriBuilder
name|ub
parameter_list|,
name|String
name|paramName
parameter_list|,
name|ParameterType
name|pt
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|Object
modifier|...
name|pValues
parameter_list|)
block|{
if|if
condition|(
name|pt
operator|!=
name|ParameterType
operator|.
name|MATRIX
operator|&&
name|pt
operator|!=
name|ParameterType
operator|.
name|QUERY
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This method currently deal "
operator|+
literal|"with matrix and query parameters only"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|paramName
argument_list|)
condition|)
block|{
if|if
condition|(
name|pValues
operator|!=
literal|null
operator|&&
name|pValues
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Object
name|pValue
range|:
name|pValues
control|)
block|{
if|if
condition|(
name|InjectionUtils
operator|.
name|isSupportedCollectionOrArray
argument_list|(
name|pValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|c
init|=
name|pValue
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|pValue
argument_list|)
else|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|pValue
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|convertMatrixOrQueryToBuilder
argument_list|(
name|ub
argument_list|,
name|paramName
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|pt
argument_list|,
name|anns
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|convertMatrixOrQueryToBuilder
argument_list|(
name|ub
argument_list|,
name|paramName
argument_list|,
name|pValue
argument_list|,
name|pt
argument_list|,
name|anns
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|addMatrixOrQueryToBuilder
argument_list|(
name|ub
argument_list|,
name|paramName
argument_list|,
name|pt
argument_list|,
name|pValues
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Object
name|pValue
init|=
name|pValues
index|[
literal|0
index|]
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|InjectionUtils
operator|.
name|extractValuesFromBean
argument_list|(
name|pValue
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Object
name|v
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|convertMatrixOrQueryToBuilder
argument_list|(
name|ub
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
argument_list|,
name|pt
argument_list|,
name|anns
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|convertMatrixOrQueryToBuilder
parameter_list|(
name|UriBuilder
name|ub
parameter_list|,
name|String
name|paramName
parameter_list|,
name|Object
name|pValue
parameter_list|,
name|ParameterType
name|pt
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
name|Object
name|convertedValue
init|=
name|convertParamValue
argument_list|(
name|pValue
argument_list|,
name|anns
argument_list|)
decl_stmt|;
name|addMatrixOrQueryToBuilder
argument_list|(
name|ub
argument_list|,
name|paramName
argument_list|,
name|pt
argument_list|,
name|convertedValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addMatrixOrQueryToBuilder
parameter_list|(
name|UriBuilder
name|ub
parameter_list|,
name|String
name|paramName
parameter_list|,
name|ParameterType
name|pt
parameter_list|,
name|Object
modifier|...
name|pValue
parameter_list|)
block|{
if|if
condition|(
name|pt
operator|==
name|ParameterType
operator|.
name|MATRIX
condition|)
block|{
name|ub
operator|.
name|matrixParam
argument_list|(
name|paramName
argument_list|,
name|pValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ub
operator|.
name|queryParam
argument_list|(
name|paramName
argument_list|,
name|pValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|convertParamValue
parameter_list|(
name|Object
name|pValue
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
if|if
condition|(
name|pValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ProviderFactory
name|pf
init|=
name|ClientProviderFactory
operator|.
name|getInstance
argument_list|(
name|cfg
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pf
operator|!=
literal|null
condition|)
block|{
name|Message
name|m
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pf
operator|.
name|isParamConverterContextsAvailable
argument_list|()
condition|)
block|{
name|m
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
operator|new
name|ExchangeImpl
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|setOutMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|cfg
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|pClass
init|=
name|pValue
operator|.
name|getClass
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ParamConverter
argument_list|<
name|Object
argument_list|>
name|prov
init|=
operator|(
name|ParamConverter
argument_list|<
name|Object
argument_list|>
operator|)
name|pf
operator|.
name|createParameterHandler
argument_list|(
name|pClass
argument_list|,
name|pClass
argument_list|,
name|anns
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|prov
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|prov
operator|.
name|toString
argument_list|(
name|pValue
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|pf
operator|.
name|clearThreadLocalProxies
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|pValue
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|void
name|reportMessageHandlerProblem
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|MediaType
name|ct
parameter_list|,
name|Throwable
name|ex
parameter_list|)
block|{
name|String
name|errorMessage
init|=
name|JAXRSUtils
operator|.
name|logMessageHandlerProblem
argument_list|(
literal|"NO_MSG_WRITER"
argument_list|,
name|cls
argument_list|,
name|ct
argument_list|)
decl_stmt|;
name|Throwable
name|actualEx
init|=
name|ex
operator|instanceof
name|Fault
condition|?
operator|(
operator|(
name|Fault
operator|)
name|ex
operator|)
operator|.
name|getCause
argument_list|()
else|:
name|ex
decl_stmt|;
throw|throw
operator|new
name|ProcessingException
argument_list|(
name|errorMessage
argument_list|,
name|actualEx
argument_list|)
throw|;
block|}
specifier|protected
specifier|static
name|void
name|setAllHeaders
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|HttpURLConnection
name|conn
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
index|[]
name|parseQuotedHeaderValue
parameter_list|(
name|String
name|originalValue
parameter_list|)
block|{
comment|// this algorithm isn't perfect; see CXF-3518 for further discussion.
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|char
index|[]
name|chars
init|=
name|originalValue
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|lastIndex
init|=
name|chars
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|boolean
name|quote
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<=
name|lastIndex
condition|;
name|pos
operator|++
control|)
block|{
name|char
name|c
init|=
name|chars
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|pos
operator|==
name|lastIndex
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\"'
case|:
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|quote
operator|=
operator|!
name|quote
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
if|if
condition|(
name|quote
condition|)
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|<=
name|lastIndex
condition|)
block|{
name|c
operator|=
name|chars
index|[
name|pos
index|]
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|==
name|lastIndex
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|','
case|:
if|if
condition|(
name|quote
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ClientConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|cfg
return|;
block|}
specifier|protected
name|void
name|setConfiguration
parameter_list|(
name|ClientConfiguration
name|config
parameter_list|)
block|{
name|cfg
operator|=
name|config
expr_stmt|;
block|}
comment|// Note that some conduit selectors may update Message.ENDPOINT_ADDRESS
comment|// after the conduit selector has been prepared but before the actual
comment|// invocation thus it is also important to have baseURI and currentURI
comment|// synched up with the latest endpoint address, after a successful proxy
comment|// or web client invocation has returned
specifier|protected
name|void
name|prepareConduitSelector
parameter_list|(
name|Message
name|message
parameter_list|,
name|URI
name|currentURI
parameter_list|,
name|boolean
name|proxy
parameter_list|)
block|{
try|try
block|{
name|cfg
operator|.
name|prepareConduitSelector
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Failure to prepare a message from conduit selector"
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|ConduitSelector
operator|.
name|class
argument_list|,
name|cfg
operator|.
name|getConduitSelector
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Service
operator|.
name|class
argument_list|,
name|cfg
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|address
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|)
decl_stmt|;
comment|// custom conduits may override the initial/current address
if|if
condition|(
name|address
operator|.
name|startsWith
argument_list|(
name|HTTP_SCHEME
argument_list|)
operator|&&
operator|!
name|address
operator|.
name|equals
argument_list|(
name|currentURI
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|URI
name|baseAddress
init|=
name|URI
operator|.
name|create
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|currentURI
operator|=
name|calculateNewRequestURI
argument_list|(
name|baseAddress
argument_list|,
name|currentURI
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
name|currentURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|currentURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|,
name|getBaseURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|PhaseInterceptorChain
name|setupOutInterceptorChain
parameter_list|(
name|ClientConfiguration
name|cfg
parameter_list|)
block|{
name|PhaseManager
name|pm
init|=
name|cfg
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i1
init|=
name|cfg
operator|.
name|getBus
argument_list|()
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i2
init|=
name|cfg
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i3
init|=
name|cfg
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
operator|new
name|PhaseChainCache
argument_list|()
operator|.
name|get
argument_list|(
name|pm
operator|.
name|getOutPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|)
decl_stmt|;
name|chain
operator|.
name|add
argument_list|(
operator|new
name|ClientRequestFilterInterceptor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|chain
return|;
block|}
specifier|protected
specifier|static
name|PhaseInterceptorChain
name|setupInInterceptorChain
parameter_list|(
name|ClientConfiguration
name|cfg
parameter_list|)
block|{
name|PhaseManager
name|pm
init|=
name|cfg
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i1
init|=
name|cfg
operator|.
name|getBus
argument_list|()
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i2
init|=
name|cfg
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i3
init|=
name|cfg
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
operator|new
name|PhaseChainCache
argument_list|()
operator|.
name|get
argument_list|(
name|pm
operator|.
name|getInPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|)
decl_stmt|;
name|chain
operator|.
name|add
argument_list|(
operator|new
name|ClientResponseFilterInterceptor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|chain
return|;
block|}
specifier|protected
specifier|static
name|MessageObserver
name|setupInFaultObserver
parameter_list|(
specifier|final
name|ClientConfiguration
name|cfg
parameter_list|)
block|{
return|return
operator|new
name|InFaultChainInitiatorObserver
argument_list|(
name|cfg
operator|.
name|getBus
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|initializeInterceptors
parameter_list|(
name|Exchange
name|ex
parameter_list|,
name|PhaseInterceptorChain
name|chain
parameter_list|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|cfg
operator|.
name|getInFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
operator|new
name|ConnectionFaultInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|protected
name|void
name|setSupportOnewayResponseProperty
parameter_list|(
name|Message
name|outMessage
parameter_list|)
block|{
if|if
condition|(
operator|!
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|outMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROCESS_ONEWAY_RESPONSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkClosed
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Client is closed"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|Object
name|body
parameter_list|,
name|String
name|httpMethod
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|URI
name|currentURI
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invocationContext
parameter_list|,
name|boolean
name|proxy
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|Message
name|m
init|=
name|cfg
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|setRequestMethod
argument_list|(
name|m
argument_list|,
name|httpMethod
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|headers
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentURI
operator|.
name|isAbsolute
argument_list|()
operator|&&
name|currentURI
operator|.
name|getScheme
argument_list|()
operator|.
name|startsWith
argument_list|(
name|HTTP_SCHEME
argument_list|)
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
name|currentURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
name|state
operator|.
name|getBaseURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|requestURIProperty
init|=
name|cfg
operator|.
name|getRequestContext
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestURIProperty
operator|==
literal|null
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|currentURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|requestURIProperty
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|headers
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|body
operator|=
name|checkIfBodyEmpty
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|setEmptyRequestPropertyIfNeeded
argument_list|(
name|m
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|m
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|getContentsList
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|URITemplate
operator|.
name|TEMPLATE_PARAMETERS
argument_list|,
name|getState
argument_list|()
operator|.
name|getTemplates
argument_list|()
argument_list|)
expr_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
name|setupOutInterceptorChain
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|chain
operator|.
name|setFaultObserver
argument_list|(
name|setupInFaultObserver
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|exchange
operator|=
name|createExchange
argument_list|(
name|m
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REST_MESSAGE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOneWay
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|headers
operator|.
name|getFirst
argument_list|(
name|Message
operator|.
name|ONE_WAY_REQUEST
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Retryable
operator|.
name|class
argument_list|,
operator|new
name|RetryableImpl
argument_list|()
argument_list|)
expr_stmt|;
comment|// context
name|setContexts
argument_list|(
name|m
argument_list|,
name|exchange
argument_list|,
name|invocationContext
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
comment|//setup conduit selector
name|prepareConduitSelector
argument_list|(
name|m
argument_list|,
name|currentURI
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|private
name|void
name|setRequestMethod
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|httpMethod
parameter_list|)
block|{
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|httpMethod
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|KNOWN_METHODS
operator|.
name|contains
argument_list|(
name|httpMethod
argument_list|)
operator|&&
operator|!
name|m
operator|.
name|containsKey
argument_list|(
literal|"use.async.http.conduit"
argument_list|)
condition|)
block|{
comment|// if the async conduit is loaded then let it handle this method without users
comment|// having to explicitly request it given that, without reflectively updating
comment|// HTTPUrlConnection, it will not work without the async conduit anyway
name|m
operator|.
name|put
argument_list|(
literal|"use.async.http.conduit"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//TODO: consider setting "use.httpurlconnection.method.reflection" here too -
comment|// if the async conduit is not loaded then the only way for the custom HTTP verb
comment|// to be supported is to attempt to reflectively modify HTTPUrlConnection
block|}
specifier|protected
name|void
name|setEmptyRequestPropertyIfNeeded
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|Object
name|body
parameter_list|)
block|{
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|outMessage
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.empty.request"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Object
name|checkIfBodyEmpty
parameter_list|(
name|Object
name|body
parameter_list|)
block|{
comment|//CHECKSTYLE:OFF
if|if
condition|(
name|body
operator|!=
literal|null
operator|&&
operator|(
name|body
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
operator|&&
operator|(
operator|(
name|String
operator|)
name|body
operator|)
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|body
operator|.
name|getClass
argument_list|()
operator|==
name|Form
operator|.
name|class
operator|&&
operator|(
operator|(
name|Form
operator|)
name|body
operator|)
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|body
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
operator|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|body
operator|)
operator|.
name|isEmpty
argument_list|()
operator|||
name|body
operator|instanceof
name|byte
index|[]
operator|&&
operator|(
operator|(
name|byte
index|[]
operator|)
name|body
operator|)
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|body
operator|=
literal|null
expr_stmt|;
block|}
comment|//CHECKSTYLE:ON
return|return
name|body
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getRequestContext
parameter_list|(
name|Message
name|outMessage
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invContext
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INVOCATION_CONTEXT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|invContext
operator|.
name|get
argument_list|(
name|REQUEST_CONTEXT
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|?
argument_list|>
name|getContentsList
parameter_list|(
name|Object
name|body
parameter_list|)
block|{
return|return
name|body
operator|==
literal|null
condition|?
operator|new
name|MessageContentsList
argument_list|()
else|:
operator|new
name|MessageContentsList
argument_list|(
name|body
argument_list|)
return|;
block|}
specifier|protected
name|Exchange
name|createExchange
parameter_list|(
name|Message
name|m
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
name|exchange
operator|=
operator|new
name|ExchangeImpl
argument_list|()
expr_stmt|;
block|}
name|exchange
operator|.
name|setSynchronous
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|cfg
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|,
operator|new
name|ClientMessageObserver
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|cfg
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.transport.no_io_exceptions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//REVISIT - when response handling is actually put onto the in chain, this will likely not be needed
name|exchange
operator|.
name|put
argument_list|(
name|StaxInEndingInterceptor
operator|.
name|STAX_IN_NOCLOSE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
specifier|protected
name|void
name|setContexts
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|,
name|boolean
name|proxy
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|reqContext
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|REQUEST_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|resContext
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reqContext
operator|==
literal|null
condition|)
block|{
name|reqContext
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|cfg
operator|.
name|getRequestContext
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|REQUEST_CONTEXT
argument_list|,
name|reqContext
argument_list|)
expr_stmt|;
block|}
name|reqContext
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
expr_stmt|;
name|reqContext
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
argument_list|)
expr_stmt|;
name|reqContext
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|reqContext
operator|.
name|put
argument_list|(
name|PROXY_PROPERTY
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|resContext
operator|==
literal|null
condition|)
block|{
name|resContext
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|RESPONSE_CONTEXT
argument_list|,
name|resContext
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INVOCATION_CONTEXT
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|message
operator|.
name|putAll
argument_list|(
name|reqContext
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|putAll
argument_list|(
name|reqContext
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setPlainOperationNameProperty
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.resource.operation.name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
class|class
name|AbstractBodyWriter
extends|extends
name|AbstractOutDatabindingInterceptor
block|{
specifier|public
name|AbstractBodyWriter
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|outMessage
parameter_list|)
throws|throws
name|Fault
block|{
name|MessageContentsList
name|objs
init|=
name|MessageContentsList
operator|.
name|getContentsList
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|objs
operator|==
literal|null
operator|||
name|objs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|OutputStream
name|os
init|=
name|outMessage
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|==
literal|null
condition|)
block|{
name|XMLStreamWriter
name|writer
init|=
name|outMessage
operator|.
name|getContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
name|Object
name|body
init|=
name|objs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Annotation
index|[]
name|customAnns
init|=
operator|(
name|Annotation
index|[]
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|Annotation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Type
name|t
init|=
name|outMessage
operator|.
name|get
argument_list|(
name|Type
operator|.
name|class
argument_list|)
decl_stmt|;
name|doWriteBody
argument_list|(
name|outMessage
argument_list|,
name|body
argument_list|,
name|t
argument_list|,
name|customAnns
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|doWriteBody
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|Object
name|body
parameter_list|,
name|Type
name|bodyType
parameter_list|,
name|Annotation
index|[]
name|customAnns
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|Fault
function_decl|;
block|}
specifier|private
class|class
name|RetryableImpl
implements|implements
name|Retryable
block|{
specifier|public
name|Object
index|[]
name|invoke
parameter_list|(
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|AbstractClient
operator|.
name|this
operator|.
name|retryInvoke
argument_list|(
name|oi
argument_list|,
name|params
argument_list|,
name|context
argument_list|,
name|exchange
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ConnectionFaultInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|ConnectionFaultInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_STREAM
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
operator|!
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isSynchronous
argument_list|()
condition|)
block|{
name|Throwable
name|ex
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|ex
operator|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|JaxrsClientCallback
argument_list|<
name|?
argument_list|>
name|cb
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|JaxrsClientCallback
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|Fault
condition|)
block|{
name|ex
operator|=
name|ex
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|ex
operator|=
name|ex
operator|instanceof
name|ProcessingException
condition|?
name|ex
else|:
operator|new
name|ProcessingException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|cb
operator|.
name|handleException
argument_list|(
name|message
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

