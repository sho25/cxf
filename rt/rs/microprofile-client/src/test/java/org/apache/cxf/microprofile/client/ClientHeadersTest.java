begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|HeaderCaptureClientRequestFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|HeadersFactoryClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|HeadersOnInterfaceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|HeadersOnMethodClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|MyClientHeadersFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|RestClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|HeaderCaptureClientRequestFilter
operator|.
name|getOutboundHeaders
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|MyClientHeadersFactory
operator|.
name|getInitialHeaders
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|ClientHeadersTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|clearHeaders
parameter_list|()
block|{
name|HeaderCaptureClientRequestFilter
operator|.
name|setOutboundHeaders
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|MyClientHeadersFactory
operator|.
name|setInitialHeaders
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientHeaderParamsOnInterface
parameter_list|()
block|{
name|HeadersOnInterfaceClient
name|client
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|baseUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://localhost/notUsed"
argument_list|)
argument_list|)
operator|.
name|register
argument_list|(
name|HeaderCaptureClientRequestFilter
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|(
name|HeadersOnInterfaceClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SUCCESS"
argument_list|,
name|client
operator|.
name|put
argument_list|(
literal|"ignored"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getOutboundHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"IntfHeader1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2,value3"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"IntfHeader2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HeadersOnInterfaceClientValueForIntfHeader3"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"IntfHeader3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueForIntfHeader4"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"IntfHeader4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientHeaderParamsOnMethod
parameter_list|()
block|{
name|HeadersOnMethodClient
name|client
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|baseUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://localhost/notUsed"
argument_list|)
argument_list|)
operator|.
name|register
argument_list|(
name|HeaderCaptureClientRequestFilter
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|(
name|HeadersOnMethodClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SUCCESS"
argument_list|,
name|client
operator|.
name|delete
argument_list|(
literal|"ignored"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getOutboundHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueA"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"MethodHeader1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueB,valueC"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"MethodHeader2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HeadersOnMethodClientValueForMethodHeader3"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"MethodHeader3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueForMethodHeader4"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"MethodHeader4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientHeadersFactory
parameter_list|()
block|{
name|HeadersFactoryClient
name|client
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|baseUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://localhost/notUsed"
argument_list|)
argument_list|)
operator|.
name|register
argument_list|(
name|HeaderCaptureClientRequestFilter
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|(
name|HeadersFactoryClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SUCCESS"
argument_list|,
name|client
operator|.
name|get
argument_list|(
literal|"headerParamValue1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getInitialHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"headerParamValue1"
argument_list|,
name|getInitialHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"HeaderParam1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|getInitialHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"IntfHeader1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|getInitialHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"MethodHeader1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getOutboundHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1eulaVmaraPredaeh"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"HeaderParam1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cba"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"IntfHeader1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fed"
argument_list|,
name|getOutboundHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"MethodHeader1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

