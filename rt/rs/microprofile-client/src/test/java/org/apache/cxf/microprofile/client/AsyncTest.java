begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|mockwebserver
operator|.
name|MockResponse
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|mockwebserver
operator|.
name|MockWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|AsyncClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|RestClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|AsyncTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAsyncClient
parameter_list|()
throws|throws
name|Exception
block|{
name|MockWebServer
name|mockWebServer
init|=
operator|new
name|MockWebServer
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|mockWebServer
operator|.
name|url
argument_list|(
literal|"/"
argument_list|)
operator|.
name|uri
argument_list|()
decl_stmt|;
name|AsyncClient
name|client
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|baseUri
argument_list|(
name|uri
argument_list|)
operator|.
name|connectTimeout
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|readTimeout
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|AsyncClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|mockWebServer
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|mockWebServer
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|combined
init|=
name|client
operator|.
name|get
argument_list|()
operator|.
name|thenCombine
argument_list|(
name|client
operator|.
name|get
argument_list|()
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
return|return
name|a
operator|+
literal|" "
operator|+
name|b
return|;
block|}
argument_list|)
operator|.
name|toCompletableFuture
argument_list|()
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Hello World"
operator|.
name|equals
argument_list|(
name|combined
argument_list|)
operator|||
literal|"World Hello"
operator|.
name|equals
argument_list|(
name|combined
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

