begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClientUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|EchoClientReqFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|ExceptionMappingClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|HighPriorityClientReqFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|HighPriorityMBW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|InvokedMethodClientRequestFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|LowPriorityClientReqFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|MyClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|NotFoundClientReqFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|mock
operator|.
name|NotFoundExceptionMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|RestClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|tck
operator|.
name|interfaces
operator|.
name|InterfaceWithoutProvidersDefined
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|tck
operator|.
name|providers
operator|.
name|TestClientRequestFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|tck
operator|.
name|providers
operator|.
name|TestClientResponseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|tck
operator|.
name|providers
operator|.
name|TestMessageBodyReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|tck
operator|.
name|providers
operator|.
name|TestMessageBodyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|tck
operator|.
name|providers
operator|.
name|TestParamConverterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|tck
operator|.
name|providers
operator|.
name|TestReaderInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|tck
operator|.
name|providers
operator|.
name|TestWriterInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|CxfTypeSafeClientBuilderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConfigMethods
parameter_list|()
block|{
name|RestClientBuilder
name|builder
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|builder
operator|.
name|property
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|register
argument_list|(
name|HighPriorityMBW
operator|.
name|class
argument_list|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isRegistered
argument_list|(
name|HighPriorityMBW
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|HighPriorityMBW
name|mbw
init|=
operator|new
name|HighPriorityMBW
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|register
argument_list|(
name|mbw
argument_list|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isRegistered
argument_list|(
name|mbw
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigPriorityOverrides
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClientBuilder
name|builder
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|property
argument_list|(
literal|"microprofile.rest.client.disable.default.mapper"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|register
argument_list|(
name|HighPriorityClientReqFilter
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// annotation priority of 10
name|builder
operator|.
name|register
argument_list|(
name|LowPriorityClientReqFilter
operator|.
name|class
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// overriding priority to be 5 (preferred)
name|assertTrue
argument_list|(
name|builder
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isRegistered
argument_list|(
name|LowPriorityClientReqFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MyClient
name|c
init|=
name|builder
operator|.
name|baseUrl
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost/null"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|MyClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|Response
name|r
init|=
name|c
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"low"
argument_list|,
name|r
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokesPostOperationWithRegisteredProviders
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|inputBody
init|=
literal|"input body will be removed"
decl_stmt|;
name|String
name|expectedResponseBody
init|=
name|TestMessageBodyReader
operator|.
name|REPLACED_BODY
decl_stmt|;
name|InterfaceWithoutProvidersDefined
name|api
init|=
operator|new
name|CxfTypeSafeClientBuilder
argument_list|()
operator|.
name|register
argument_list|(
name|TestClientRequestFilter
operator|.
name|class
argument_list|)
operator|.
name|register
argument_list|(
name|TestClientResponseFilter
operator|.
name|class
argument_list|)
operator|.
name|register
argument_list|(
name|TestMessageBodyReader
operator|.
name|class
argument_list|,
literal|4999
argument_list|)
operator|.
name|register
argument_list|(
name|TestMessageBodyWriter
operator|.
name|class
argument_list|)
operator|.
name|register
argument_list|(
name|TestParamConverterProvider
operator|.
name|class
argument_list|)
operator|.
name|register
argument_list|(
name|TestReaderInterceptor
operator|.
name|class
argument_list|)
operator|.
name|register
argument_list|(
name|TestWriterInterceptor
operator|.
name|class
argument_list|)
operator|.
name|register
argument_list|(
name|EchoClientReqFilter
operator|.
name|class
argument_list|)
operator|.
name|property
argument_list|(
literal|"microprofile.rest.client.disable.default.mapper"
argument_list|,
literal|true
argument_list|)
operator|.
name|baseUrl
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost/null"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|InterfaceWithoutProvidersDefined
operator|.
name|class
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|api
operator|.
name|executePost
argument_list|(
name|inputBody
argument_list|)
decl_stmt|;
name|String
name|body
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResponseBody
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestClientResponseFilter
operator|.
name|getAndResetValue
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestClientRequestFilter
operator|.
name|getAndResetValue
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestReaderInterceptor
operator|.
name|getAndResetValue
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// If we use the EchoClientReqFilter, it will be executed before the TestWriterInterceptor,
comment|// so that interceptor won't be called in this test.
comment|// TODO: add a test for writer interceptors - possibly in systests
comment|//assertEquals(TestWriterInterceptor.getAndResetValue(), 1);
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchEntityException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testResponseExceptionMapper
parameter_list|()
throws|throws
name|Exception
block|{
name|ExceptionMappingClient
name|client
init|=
operator|new
name|CxfTypeSafeClientBuilder
argument_list|()
operator|.
name|register
argument_list|(
name|NotFoundExceptionMapper
operator|.
name|class
argument_list|)
operator|.
name|register
argument_list|(
name|NotFoundClientReqFilter
operator|.
name|class
argument_list|)
operator|.
name|baseUrl
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost/null"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|ExceptionMappingClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|Response
name|r
init|=
name|client
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|fail
argument_list|(
name|r
argument_list|,
literal|"Did not throw expected mapped exception: NoSuchEntityException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|WebApplicationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDefaultResponseExceptionMapper
parameter_list|()
throws|throws
name|Exception
block|{
name|ExceptionMappingClient
name|client
init|=
operator|new
name|CxfTypeSafeClientBuilder
argument_list|()
operator|.
name|register
argument_list|(
name|NotFoundClientReqFilter
operator|.
name|class
argument_list|)
operator|.
name|baseUrl
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost/null"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|ExceptionMappingClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|Response
name|r
init|=
name|client
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|fail
argument_list|(
name|r
argument_list|,
literal|"Did not throw expected mapped exception: WebApplicationException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientRequestFilterCanAccessInvokedMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|InterfaceWithoutProvidersDefined
name|client
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|register
argument_list|(
name|InvokedMethodClientRequestFilter
operator|.
name|class
argument_list|)
operator|.
name|baseUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://localhost:8080/neverUsed"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|InterfaceWithoutProvidersDefined
operator|.
name|class
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|executePut
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Response
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"ReturnType"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PUT"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"PUT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/{id}"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Parm1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathParam
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Parm1Annotation"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Parm2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientPropertiesAreSet
parameter_list|()
throws|throws
name|Exception
block|{
name|InterfaceWithoutProvidersDefined
name|client
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|register
argument_list|(
name|InvokedMethodClientRequestFilter
operator|.
name|class
argument_list|)
operator|.
name|property
argument_list|(
literal|"hello"
argument_list|,
literal|"world"
argument_list|)
operator|.
name|baseUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://localhost:8080/neverUsed"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|InterfaceWithoutProvidersDefined
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"world"
argument_list|,
name|WebClientUtil
operator|.
name|getClientConfigFromProxy
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanInvokeDefaultInterfaceMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|MyClient
name|client
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|register
argument_list|(
name|InvokedMethodClientRequestFilter
operator|.
name|class
argument_list|)
operator|.
name|baseUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://localhost:8080/neverUsed"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|MyClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"defaultValue"
argument_list|,
name|client
operator|.
name|myDefaultMethod
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCanInvokeDefaultInterfaceMethodsWithException
parameter_list|()
throws|throws
name|Exception
block|{
name|MyClient
name|client
init|=
name|RestClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|register
argument_list|(
name|InvokedMethodClientRequestFilter
operator|.
name|class
argument_list|)
operator|.
name|baseUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://localhost:8080/neverUsed"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|MyClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|client
operator|.
name|myDefaultMethod
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should have thrown IOException"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fail
parameter_list|(
name|Response
name|r
parameter_list|,
name|String
name|failureMessage
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|failureMessage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

