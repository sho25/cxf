begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|proxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionStage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|InvocationCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientProxyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JaxrsClientCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|LocalClientState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|MPRestClientCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|MicroProfileClientProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|ext
operator|.
name|ResponseExceptionMapper
import|;
end_import

begin_class
specifier|public
class|class
name|MicroProfileClientProxyImpl
extends|extends
name|ClientProxyImpl
block|{
specifier|private
specifier|static
specifier|final
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|NO_OP_CALLBACK
init|=
operator|new
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|completed
parameter_list|(
name|Object
name|o
parameter_list|)
block|{ }
block|}
decl_stmt|;
specifier|private
specifier|final
name|MPAsyncInvocationInterceptorImpl
name|aiiImpl
init|=
operator|new
name|MPAsyncInvocationInterceptorImpl
argument_list|()
decl_stmt|;
specifier|public
name|MicroProfileClientProxyImpl
parameter_list|(
name|URI
name|baseURI
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|inheritHeaders
parameter_list|,
name|ExecutorService
name|executorService
parameter_list|,
name|Object
modifier|...
name|varValues
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|LocalClientState
argument_list|(
name|baseURI
argument_list|)
argument_list|,
name|loader
argument_list|,
name|cri
argument_list|,
name|isRoot
argument_list|,
name|inheritHeaders
argument_list|,
name|varValues
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|EXECUTOR_SERVICE_PROPERTY
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MicroProfileClientProxyImpl
parameter_list|(
name|ClientState
name|initialState
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|inheritHeaders
parameter_list|,
name|ExecutorService
name|executorService
parameter_list|,
name|Object
modifier|...
name|varValues
parameter_list|)
block|{
name|super
argument_list|(
name|initialState
argument_list|,
name|loader
argument_list|,
name|cri
argument_list|,
name|isRoot
argument_list|,
name|inheritHeaders
argument_list|,
name|varValues
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|EXECUTOR_SERVICE_PROPERTY
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|checkAsyncCallback
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
parameter_list|,
name|Message
name|outMessage
parameter_list|)
block|{
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|callback
init|=
name|outMessage
operator|.
name|getContent
argument_list|(
name|InvocationCallback
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|callback
operator|==
literal|null
operator|&&
name|CompletionStage
operator|.
name|class
operator|.
name|equals
argument_list|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|callback
operator|=
name|NO_OP_CALLBACK
expr_stmt|;
name|outMessage
operator|.
name|setContent
argument_list|(
name|InvocationCallback
operator|.
name|class
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
return|return
name|callback
return|;
block|}
specifier|protected
name|boolean
name|checkAsyncReturnType
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
parameter_list|,
name|Message
name|outMessage
parameter_list|)
block|{
return|return
name|CompletionStage
operator|.
name|class
operator|.
name|equals
argument_list|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|doInvokeAsync
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Message
name|outMessage
parameter_list|,
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|asyncCallback
parameter_list|)
block|{
name|outMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|aiiImpl
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MPAsyncInvocationInterceptorPostAsyncImpl
argument_list|(
name|aiiImpl
operator|.
name|getInterceptors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|doInvokeAsync
argument_list|(
name|ori
argument_list|,
name|outMessage
argument_list|,
name|asyncCallback
argument_list|)
expr_stmt|;
name|JaxrsClientCallback
argument_list|<
name|?
argument_list|>
name|cb
init|=
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|JaxrsClientCallback
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|cb
operator|.
name|createFuture
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|JaxrsClientCallback
argument_list|<
name|?
argument_list|>
name|newJaxrsClientCallback
parameter_list|(
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|asyncCallback
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|responseClass
parameter_list|,
name|Type
name|outGenericType
parameter_list|)
block|{
return|return
operator|new
name|MPRestClientCallback
argument_list|<
name|Object
argument_list|>
argument_list|(
name|asyncCallback
argument_list|,
name|responseClass
argument_list|,
name|outGenericType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkResponse
parameter_list|(
name|Method
name|m
parameter_list|,
name|Response
name|r
parameter_list|,
name|Message
name|inMessage
parameter_list|)
throws|throws
name|Throwable
block|{
name|MicroProfileClientProviderFactory
name|factory
init|=
name|MicroProfileClientProviderFactory
operator|.
name|getInstance
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|mappers
init|=
name|factory
operator|.
name|createResponseExceptionMapper
argument_list|(
name|inMessage
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
name|mapper
range|:
name|mappers
control|)
block|{
if|if
condition|(
name|mapper
operator|.
name|handles
argument_list|(
name|r
operator|.
name|getStatus
argument_list|()
argument_list|,
name|r
operator|.
name|getHeaders
argument_list|()
argument_list|)
condition|)
block|{
name|Throwable
name|t
init|=
name|mapper
operator|.
name|toThrowable
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getExceptionTypes
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// its a checked exception, make sure its declared
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|m
operator|.
name|getExceptionTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
throw|throw
name|t
throw|;
block|}
block|}
comment|// TODO Log the unhandled declarable
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getReturnType
parameter_list|(
name|Method
name|method
parameter_list|,
name|Message
name|outMessage
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|super
operator|.
name|getReturnType
argument_list|(
name|method
argument_list|,
name|outMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|CompletionStage
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
name|Type
name|t
init|=
name|method
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
name|returnType
operator|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|returnType
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|Object
name|body
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|URI
name|currentURI
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invocationContext
parameter_list|,
name|boolean
name|proxy
parameter_list|)
block|{
name|Method
name|m
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filterProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|filterProps
operator|.
name|put
argument_list|(
literal|"org.eclipse.microprofile.rest.client.invokedMethod"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|super
operator|.
name|createMessage
argument_list|(
name|body
argument_list|,
name|ori
argument_list|,
name|headers
argument_list|,
name|currentURI
argument_list|,
name|exchange
argument_list|,
name|invocationContext
argument_list|,
name|proxy
argument_list|)
decl_stmt|;
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
literal|"jaxrs.filter.properties"
argument_list|,
name|filterProps
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
block|}
end_class

end_unit

