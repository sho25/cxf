begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|proxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionStage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|InvocationCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientProxyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JaxrsClientCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|LocalClientState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|OperationResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ParameterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|HttpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|MPRestClientCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|MicroProfileClientProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|cdi
operator|.
name|CDIInterceptorWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|annotation
operator|.
name|ClientHeaderParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|annotation
operator|.
name|RegisterClientHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|ext
operator|.
name|ClientHeadersFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|ext
operator|.
name|ResponseExceptionMapper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientProperties
operator|.
name|HTTP_CONNECTION_TIMEOUT_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientProperties
operator|.
name|HTTP_RECEIVE_TIMEOUT_PROP
import|;
end_import

begin_class
specifier|public
class|class
name|MicroProfileClientProxyImpl
extends|extends
name|ClientProxyImpl
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|MicroProfileClientProxyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|NO_OP_CALLBACK
init|=
operator|new
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|completed
parameter_list|(
name|Object
name|o
parameter_list|)
block|{ }
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Method
name|JAXRS_UTILS_GET_CURRENT_MESSAGE_METHOD
decl_stmt|;
static|static
block|{
name|Method
name|m
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|jaxrsUtilsClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.cxf.jaxrs.utils.JAXRSUtils"
argument_list|)
decl_stmt|;
name|m
operator|=
name|ReflectionUtil
operator|.
name|getDeclaredMethod
argument_list|(
name|jaxrsUtilsClass
argument_list|,
literal|"getCurrentMessage"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// expected in non-JAX-RS server environments
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
literal|"Caught exception getting JAXRUtils class"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|m
operator|=
literal|null
expr_stmt|;
block|}
name|JAXRS_UTILS_GET_CURRENT_MESSAGE_METHOD
operator|=
name|m
expr_stmt|;
block|}
specifier|private
specifier|final
name|CDIInterceptorWrapper
name|interceptorWrapper
decl_stmt|;
specifier|private
name|Object
name|objectInstance
decl_stmt|;
comment|//CHECKSTYLE:OFF
specifier|public
name|MicroProfileClientProxyImpl
parameter_list|(
name|URI
name|baseURI
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|inheritHeaders
parameter_list|,
name|ExecutorService
name|executorService
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|CDIInterceptorWrapper
name|interceptorWrapper
parameter_list|,
name|Object
modifier|...
name|varValues
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|LocalClientState
argument_list|(
name|baseURI
argument_list|,
name|configuration
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|,
name|loader
argument_list|,
name|cri
argument_list|,
name|isRoot
argument_list|,
name|inheritHeaders
argument_list|,
name|varValues
argument_list|)
expr_stmt|;
name|this
operator|.
name|interceptorWrapper
operator|=
name|interceptorWrapper
expr_stmt|;
name|init
argument_list|(
name|executorService
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MicroProfileClientProxyImpl
parameter_list|(
name|ClientState
name|initialState
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|ClassResourceInfo
name|cri
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|boolean
name|inheritHeaders
parameter_list|,
name|ExecutorService
name|executorService
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|CDIInterceptorWrapper
name|interceptorWrapper
parameter_list|,
name|Object
modifier|...
name|varValues
parameter_list|)
block|{
name|super
argument_list|(
name|initialState
argument_list|,
name|loader
argument_list|,
name|cri
argument_list|,
name|isRoot
argument_list|,
name|inheritHeaders
argument_list|,
name|varValues
argument_list|)
expr_stmt|;
name|this
operator|.
name|interceptorWrapper
operator|=
name|interceptorWrapper
expr_stmt|;
name|init
argument_list|(
name|executorService
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|//CHECKSTYLE:ON
specifier|private
name|void
name|init
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|cfg
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|EXECUTOR_SERVICE_PROPERTY
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getRequestContext
argument_list|()
operator|.
name|putAll
argument_list|(
name|configuration
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|inboundChain
init|=
name|cfg
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
name|inboundChain
operator|.
name|add
argument_list|(
operator|new
name|MPAsyncInvocationInterceptorPostAsyncImpl
argument_list|()
argument_list|)
expr_stmt|;
name|inboundChain
operator|.
name|add
argument_list|(
operator|new
name|MPAsyncInvocationInterceptorRemoveContextImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|checkAsyncCallback
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
parameter_list|,
name|Message
name|outMessage
parameter_list|)
block|{
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|callback
init|=
name|outMessage
operator|.
name|getContent
argument_list|(
name|InvocationCallback
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|callback
operator|==
literal|null
operator|&&
name|CompletionStage
operator|.
name|class
operator|.
name|equals
argument_list|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|callback
operator|=
name|NO_OP_CALLBACK
expr_stmt|;
name|outMessage
operator|.
name|setContent
argument_list|(
name|InvocationCallback
operator|.
name|class
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
return|return
name|callback
return|;
block|}
specifier|protected
name|boolean
name|checkAsyncReturnType
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
parameter_list|,
name|Message
name|outMessage
parameter_list|)
block|{
return|return
name|CompletionStage
operator|.
name|class
operator|.
name|equals
argument_list|(
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
operator|.
name|getReturnType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|doInvokeAsync
parameter_list|(
name|OperationResourceInfo
name|ori
parameter_list|,
name|Message
name|outMessage
parameter_list|,
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|asyncCallback
parameter_list|)
block|{
name|MPAsyncInvocationInterceptorImpl
name|aiiImpl
init|=
operator|new
name|MPAsyncInvocationInterceptorImpl
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
name|outMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|aiiImpl
argument_list|)
expr_stmt|;
name|setTimeouts
argument_list|(
name|cfg
operator|.
name|getRequestContext
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|doInvokeAsync
argument_list|(
name|ori
argument_list|,
name|outMessage
argument_list|,
name|asyncCallback
argument_list|)
expr_stmt|;
name|JaxrsClientCallback
argument_list|<
name|?
argument_list|>
name|cb
init|=
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|JaxrsClientCallback
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|cb
operator|.
name|createFuture
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRunInterceptorChain
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|setTimeouts
argument_list|(
name|cfg
operator|.
name|getRequestContext
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|doRunInterceptorChain
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|JaxrsClientCallback
argument_list|<
name|?
argument_list|>
name|newJaxrsClientCallback
parameter_list|(
name|InvocationCallback
argument_list|<
name|Object
argument_list|>
name|asyncCallback
parameter_list|,
name|Message
name|outMessage
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|responseClass
parameter_list|,
name|Type
name|outGenericType
parameter_list|)
block|{
return|return
operator|new
name|MPRestClientCallback
argument_list|<
name|Object
argument_list|>
argument_list|(
name|asyncCallback
argument_list|,
name|outMessage
argument_list|,
name|responseClass
argument_list|,
name|outGenericType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkResponse
parameter_list|(
name|Method
name|m
parameter_list|,
name|Response
name|r
parameter_list|,
name|Message
name|inMessage
parameter_list|)
throws|throws
name|Throwable
block|{
name|MicroProfileClientProviderFactory
name|factory
init|=
name|MicroProfileClientProviderFactory
operator|.
name|getInstance
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|mappers
init|=
name|factory
operator|.
name|createResponseExceptionMapper
argument_list|(
name|inMessage
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ResponseExceptionMapper
argument_list|<
name|?
argument_list|>
name|mapper
range|:
name|mappers
control|)
block|{
if|if
condition|(
name|mapper
operator|.
name|handles
argument_list|(
name|r
operator|.
name|getStatus
argument_list|()
argument_list|,
name|r
operator|.
name|getHeaders
argument_list|()
argument_list|)
condition|)
block|{
name|Throwable
name|t
init|=
name|mapper
operator|.
name|toThrowable
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getExceptionTypes
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// its a checked exception, make sure its declared
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|m
operator|.
name|getExceptionTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
throw|throw
name|t
throw|;
block|}
block|}
comment|// TODO Log the unhandled declarable
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getReturnType
parameter_list|(
name|Method
name|method
parameter_list|,
name|Message
name|outMessage
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|super
operator|.
name|getReturnType
argument_list|(
name|method
argument_list|,
name|outMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|CompletionStage
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
name|Type
name|t
init|=
name|method
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
name|returnType
operator|=
name|InjectionUtils
operator|.
name|getActualType
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|returnType
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|Object
name|body
parameter_list|,
name|OperationResourceInfo
name|ori
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|URI
name|currentURI
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invocationContext
parameter_list|,
name|boolean
name|proxy
parameter_list|)
block|{
name|Method
name|m
init|=
name|ori
operator|.
name|getMethodToInvoke
argument_list|()
decl_stmt|;
name|Message
name|msg
init|=
name|super
operator|.
name|createMessage
argument_list|(
name|body
argument_list|,
name|ori
argument_list|,
name|headers
argument_list|,
name|currentURI
argument_list|,
name|exchange
argument_list|,
name|invocationContext
argument_list|,
name|proxy
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filterProps
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
literal|"jaxrs.filter.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterProps
operator|==
literal|null
condition|)
block|{
name|filterProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
literal|"jaxrs.filter.properties"
argument_list|,
name|filterProps
argument_list|)
expr_stmt|;
block|}
name|filterProps
operator|.
name|put
argument_list|(
literal|"org.eclipse.microprofile.rest.client.invokedMethod"
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|protected
name|void
name|setTimeouts
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
block|{
try|try
block|{
name|Long
name|connectTimeout
init|=
name|getIntFromProps
argument_list|(
name|props
argument_list|,
name|HTTP_CONNECTION_TIMEOUT_PROP
argument_list|)
decl_stmt|;
name|Long
name|readTimeout
init|=
name|getIntFromProps
argument_list|(
name|props
argument_list|,
name|HTTP_RECEIVE_TIMEOUT_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectTimeout
operator|>
operator|-
literal|1
condition|)
block|{
name|cfg
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setConnectionTimeout
argument_list|(
name|connectTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readTimeout
operator|>
operator|-
literal|1
condition|)
block|{
name|cfg
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
name|readTimeout
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
literal|"Caught exception setting timeouts"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Long
name|getIntFromProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Object
name|o
init|=
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1L
return|;
comment|// not declared
block|}
name|Long
name|l
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
name|l
operator|=
operator|(
name|Long
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|l
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INVALID_TIMEOUT_PROPERTY"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|key
block|,
name|o
block|}
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1L
return|;
comment|//
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INVALID_TIMEOUT_PROPERTY"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|key
block|,
name|o
block|}
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1L
return|;
block|}
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INVALID_TIMEOUT_PROPERTY"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|key
block|,
name|o
block|}
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1L
return|;
block|}
return|return
name|l
return|;
block|}
specifier|private
name|String
name|invokeBestFitComputeMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clientIntf
parameter_list|,
name|ClientHeaderParam
name|anno
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|methodName
init|=
name|anno
operator|.
name|value
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|methodName
operator|=
name|methodName
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|methodName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|computeClass
init|=
name|clientIntf
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|String
name|className
init|=
name|methodName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|methodName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|methodName
operator|=
name|methodName
operator|.
name|substring
argument_list|(
name|methodName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|computeClass
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|className
argument_list|,
name|clientIntf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Cannot find specified computeValue class, "
operator|+
name|className
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|Method
name|m
init|=
literal|null
decl_stmt|;
name|boolean
name|includeHeaderName
init|=
literal|false
decl_stmt|;
try|try
block|{
name|m
operator|=
name|computeClass
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|includeHeaderName
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|expected
parameter_list|)
block|{
try|try
block|{
name|m
operator|=
name|computeClass
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|expected2
parameter_list|)
block|{ }
block|}
name|String
name|value
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
literal|"Cannot find specified computeValue method, "
operator|+
name|methodName
operator|+
literal|", on client interface, "
operator|+
name|clientIntf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Object
name|valueFromComputeMethod
decl_stmt|;
if|if
condition|(
name|includeHeaderName
condition|)
block|{
name|valueFromComputeMethod
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|computeClass
operator|==
name|clientIntf
condition|?
name|objectInstance
else|:
literal|null
argument_list|,
name|anno
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueFromComputeMethod
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|computeClass
operator|==
name|clientIntf
condition|?
name|objectInstance
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueFromComputeMethod
operator|instanceof
name|String
index|[]
condition|)
block|{
name|value
operator|=
name|HttpUtils
operator|.
name|getHeaderString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|valueFromComputeMethod
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
operator|(
name|String
operator|)
name|valueFromComputeMethod
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
literal|"Caught exception invoking compute method"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|InvocationTargetException
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
throw|throw
name|t
throw|;
block|}
block|}
return|return
name|value
return|;
block|}
specifier|private
name|Parameter
name|createClientHeaderParameter
parameter_list|(
name|ClientHeaderParam
name|anno
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clientIntf
parameter_list|)
block|{
name|Parameter
name|p
init|=
operator|new
name|Parameter
argument_list|(
name|ParameterType
operator|.
name|HEADER
argument_list|,
name|anno
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
name|anno
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
name|headerValue
decl_stmt|;
if|if
condition|(
name|values
index|[
literal|0
index|]
operator|!=
literal|null
operator|&&
name|values
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|&&
name|values
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
operator|&&
name|values
index|[
literal|0
index|]
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
try|try
block|{
name|headerValue
operator|=
name|invokeBestFitComputeMethod
argument_list|(
name|clientIntf
argument_list|,
name|anno
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|anno
operator|.
name|required
argument_list|()
condition|)
block|{
name|throwException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|headerValue
operator|=
name|HttpUtils
operator|.
name|getHeaderString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setDefaultValue
argument_list|(
name|headerValue
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleHeaders
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|List
argument_list|<
name|Parameter
argument_list|>
name|beanParams
parameter_list|,
name|MultivaluedMap
argument_list|<
name|ParameterType
argument_list|,
name|Parameter
argument_list|>
name|map
parameter_list|)
block|{
name|super
operator|.
name|handleHeaders
argument_list|(
name|m
argument_list|,
name|params
argument_list|,
name|headers
argument_list|,
name|beanParams
argument_list|,
name|map
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
init|=
name|m
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
name|ClientHeaderParam
index|[]
name|clientHeaderAnnosOnInterface
init|=
name|declaringClass
operator|.
name|getAnnotationsByType
argument_list|(
name|ClientHeaderParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientHeaderParam
index|[]
name|clientHeaderAnnosOnMethod
init|=
name|m
operator|.
name|getAnnotationsByType
argument_list|(
name|ClientHeaderParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|RegisterClientHeaders
name|headersFactoryAnno
init|=
name|declaringClass
operator|.
name|getAnnotation
argument_list|(
name|RegisterClientHeaders
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientHeaderAnnosOnInterface
operator|.
name|length
operator|<
literal|1
operator|&&
name|clientHeaderAnnosOnMethod
operator|.
name|length
operator|<
literal|1
operator|&&
name|headersFactoryAnno
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ClientHeaderParam
name|methodAnno
range|:
name|clientHeaderAnnosOnMethod
control|)
block|{
name|String
name|headerName
init|=
name|methodAnno
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
name|Parameter
name|p
init|=
name|createClientHeaderParameter
argument_list|(
name|methodAnno
argument_list|,
name|declaringClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|putSingle
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ClientHeaderParam
name|intfAnno
range|:
name|clientHeaderAnnosOnInterface
control|)
block|{
name|String
name|headerName
init|=
name|intfAnno
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
name|Parameter
name|p
init|=
name|createClientHeaderParameter
argument_list|(
name|intfAnno
argument_list|,
name|declaringClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|putSingle
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ClientHeadersFactory
name|headersFactory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|headersFactoryAnno
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|headersFactoryClass
init|=
name|headersFactoryAnno
operator|.
name|value
argument_list|()
decl_stmt|;
name|headersFactory
operator|=
operator|(
name|ClientHeadersFactory
operator|)
name|headersFactoryClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|mergeHeaders
argument_list|(
name|headersFactory
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|throwException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|mergeHeaders
parameter_list|(
name|ClientHeadersFactory
name|factory
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|existingHeaders
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jaxrsHeaders
init|=
name|getJaxrsHeaders
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updatedHeaders
init|=
name|factory
operator|.
name|update
argument_list|(
name|jaxrsHeaders
argument_list|,
name|existingHeaders
argument_list|)
decl_stmt|;
name|existingHeaders
operator|.
name|putAll
argument_list|(
name|updatedHeaders
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|o
parameter_list|,
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
throws|throws
name|Throwable
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|objectInstance
operator|=
name|o
expr_stmt|;
return|return
name|interceptorWrapper
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|m
argument_list|,
name|params
argument_list|,
operator|new
name|Invoker
argument_list|(
name|o
argument_list|,
name|m
argument_list|,
name|params
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Object
name|invokeActual
parameter_list|(
name|Object
name|o
parameter_list|,
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|super
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|m
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|Invoker
implements|implements
name|Callable
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|Object
name|targetObject
decl_stmt|;
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|params
decl_stmt|;
specifier|private
specifier|final
name|MicroProfileClientProxyImpl
name|proxy
decl_stmt|;
name|Invoker
parameter_list|(
name|Object
name|o
parameter_list|,
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|MicroProfileClientProxyImpl
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|targetObject
operator|=
name|o
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|m
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|proxy
operator|.
name|invokeActual
argument_list|(
name|targetObject
argument_list|,
name|method
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|throwException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|t
throw|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getJaxrsHeaders
parameter_list|()
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|MultivaluedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|JAXRS_UTILS_GET_CURRENT_MESSAGE_METHOD
operator|!=
literal|null
condition|)
block|{
name|Message
name|m
init|=
operator|(
name|Message
operator|)
name|JAXRS_UTILS_GET_CURRENT_MESSAGE_METHOD
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|headers
operator|.
name|putAll
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// expected if not running in a JAX-RS server environment.
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
literal|"Caught exception getting JAX-RS incoming headers"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|headers
return|;
block|}
block|}
end_class

end_unit

