begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|config
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|config
operator|.
name|ConfigProvider
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ConfigFacade
block|{
specifier|private
name|ConfigFacade
parameter_list|()
block|{     }
specifier|private
specifier|static
name|Optional
argument_list|<
name|Config
argument_list|>
name|config
parameter_list|()
block|{
name|Config
name|c
decl_stmt|;
try|try
block|{
name|c
operator|=
name|ConfigProvider
operator|.
name|getConfig
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExceptionInInitializerError
decl||
name|NoClassDefFoundError
decl||
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected if no MP Config implementation is available
name|c
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|getOptionalValue
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|Optional
argument_list|<
name|Config
argument_list|>
name|c
init|=
name|config
argument_list|()
decl_stmt|;
return|return
name|c
operator|.
name|isPresent
argument_list|()
condition|?
name|c
operator|.
name|get
argument_list|()
operator|.
name|getOptionalValue
argument_list|(
name|propertyName
argument_list|,
name|clazz
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|Optional
argument_list|<
name|Config
argument_list|>
name|c
init|=
name|config
argument_list|()
decl_stmt|;
return|return
name|c
operator|.
name|isPresent
argument_list|()
condition|?
name|c
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|(
name|propertyName
argument_list|,
name|clazz
argument_list|)
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

