begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|URITemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|RestClientDefinitionException
import|;
end_import

begin_class
specifier|final
class|class
name|Validator
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|Validator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Validator
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|checkValid
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|userType
parameter_list|)
throws|throws
name|RestClientDefinitionException
block|{
if|if
condition|(
operator|!
name|userType
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|throwException
argument_list|(
literal|"VALIDATION_NOT_AN_INTERFACE"
argument_list|,
name|userType
argument_list|)
expr_stmt|;
block|}
name|Method
index|[]
name|methods
init|=
name|userType
operator|.
name|getMethods
argument_list|()
decl_stmt|;
name|checkMethodsForMultipleHTTPMethodAnnotations
argument_list|(
name|methods
argument_list|)
expr_stmt|;
name|checkMethodsForInvalidURITemplates
argument_list|(
name|userType
argument_list|,
name|methods
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkMethodsForMultipleHTTPMethodAnnotations
parameter_list|(
name|Method
index|[]
name|clientMethods
parameter_list|)
throws|throws
name|RestClientDefinitionException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|httpMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clientMethods
control|)
block|{
for|for
control|(
name|Annotation
name|anno
range|:
name|method
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annoClass
init|=
name|anno
operator|.
name|annotationType
argument_list|()
decl_stmt|;
name|HttpMethod
name|verb
init|=
name|annoClass
operator|.
name|getAnnotation
argument_list|(
name|HttpMethod
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|verb
operator|!=
literal|null
condition|)
block|{
name|httpMethods
operator|.
name|put
argument_list|(
name|verb
operator|.
name|value
argument_list|()
argument_list|,
name|annoClass
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|httpMethods
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|throwException
argument_list|(
literal|"VALIDATION_METHOD_WITH_MULTIPLE_VERBS"
argument_list|,
name|method
argument_list|,
name|httpMethods
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|httpMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkMethodsForInvalidURITemplates
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|userType
parameter_list|,
name|Method
index|[]
name|methods
parameter_list|)
throws|throws
name|RestClientDefinitionException
block|{
name|Path
name|classPathAnno
init|=
name|userType
operator|.
name|getAnnotation
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|classLevelVariables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|URITemplate
name|classTemplate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classPathAnno
operator|!=
literal|null
condition|)
block|{
name|classTemplate
operator|=
operator|new
name|URITemplate
argument_list|(
name|classPathAnno
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|classLevelVariables
operator|.
name|addAll
argument_list|(
name|classTemplate
operator|.
name|getVariables
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|URITemplate
name|template
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|Path
name|methodPathAnno
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodPathAnno
operator|!=
literal|null
condition|)
block|{
name|template
operator|=
name|classPathAnno
operator|==
literal|null
condition|?
operator|new
name|URITemplate
argument_list|(
name|methodPathAnno
operator|.
name|value
argument_list|()
argument_list|)
else|:
operator|new
name|URITemplate
argument_list|(
name|classPathAnno
operator|.
name|value
argument_list|()
operator|+
literal|"/"
operator|+
name|methodPathAnno
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|=
name|classTemplate
expr_stmt|;
block|}
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|allVariables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|template
operator|.
name|getVariables
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allVariables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|method
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|PathParam
name|pathParam
init|=
name|p
operator|.
name|getAnnotation
argument_list|(
name|PathParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathParam
operator|!=
literal|null
condition|)
block|{
name|paramMap
operator|.
name|put
argument_list|(
name|pathParam
operator|.
name|value
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|template
operator|.
name|substitute
argument_list|(
name|paramMap
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|throwException
argument_list|(
literal|"VALIDATION_UNRESOLVED_PATH_PARAMS"
argument_list|,
name|userType
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|foundParams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|method
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|PathParam
name|pathParam
init|=
name|p
operator|.
name|getAnnotation
argument_list|(
name|PathParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathParam
operator|!=
literal|null
condition|)
block|{
name|foundParams
operator|.
name|add
argument_list|(
name|pathParam
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|foundParams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|throwException
argument_list|(
literal|"VALIDATION_EXTRA_PATH_PARAMS"
argument_list|,
name|userType
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|throwException
parameter_list|(
name|String
name|msgKey
parameter_list|,
name|Object
modifier|...
name|msgParams
parameter_list|)
throws|throws
name|RestClientDefinitionException
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
name|msgKey
argument_list|,
name|BUNDLE
argument_list|,
name|msgParams
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RestClientDefinitionException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

