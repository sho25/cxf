begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|interceptor
operator|.
name|InvocationContext
import|;
end_import

begin_class
class|class
name|MPRestClientInvocationContextImpl
implements|implements
name|InvocationContext
block|{
specifier|private
specifier|final
name|Object
name|target
decl_stmt|;
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
specifier|private
name|Object
index|[]
name|args
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|InterceptorInvoker
argument_list|>
name|interceptorInvokers
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|contextData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Callable
argument_list|<
name|Object
argument_list|>
name|callable
decl_stmt|;
comment|/**      * @param target      * @param method      * @param args      * @param interceptorInvokers      */
name|MPRestClientInvocationContextImpl
parameter_list|(
name|Object
name|target
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|,
name|List
argument_list|<
name|InterceptorInvoker
argument_list|>
name|interceptorInvokers
parameter_list|,
name|Callable
argument_list|<
name|Object
argument_list|>
name|callable
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
operator|==
literal|null
condition|?
operator|new
name|Object
index|[]
block|{}
else|:
name|args
expr_stmt|;
name|this
operator|.
name|interceptorInvokers
operator|=
name|interceptorInvokers
expr_stmt|;
name|this
operator|.
name|callable
operator|=
name|callable
expr_stmt|;
block|}
name|boolean
name|hasNextInterceptor
parameter_list|()
block|{
return|return
name|index
operator|<
name|interceptorInvokers
operator|.
name|size
argument_list|()
return|;
block|}
specifier|protected
name|Object
name|invokeNextInterceptor
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|oldIndex
init|=
name|index
decl_stmt|;
try|try
block|{
comment|// Note that some FaultTolerance interceptors can cause
comment|// some interesting behaviors if they are invoked before
comment|// other interceptors. The CDIInterceptorWrapperImpl
comment|// intentionally orders the FT interceptor last to
comment|// avoid these side effects.
return|return
name|interceptorInvokers
operator|.
name|get
argument_list|(
name|index
operator|++
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|)
return|;
block|}
finally|finally
block|{
name|index
operator|=
name|oldIndex
expr_stmt|;
block|}
block|}
specifier|protected
name|Object
name|interceptorChainCompleted
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|proceed
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hasNextInterceptor
argument_list|()
condition|)
block|{
return|return
name|invokeNextInterceptor
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|interceptorChainCompleted
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getTarget
parameter_list|()
block|{
return|return
name|target
return|;
block|}
annotation|@
name|Override
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
annotation|@
name|Override
specifier|public
name|Constructor
argument_list|<
name|?
argument_list|>
name|getConstructor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|getParameters
parameter_list|()
throws|throws
name|IllegalStateException
block|{
return|return
name|args
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setParameters
parameter_list|(
name|Object
index|[]
name|params
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IllegalArgumentException
block|{
name|this
operator|.
name|args
operator|=
name|params
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getContextData
parameter_list|()
block|{
return|return
name|contextData
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getTimer
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

