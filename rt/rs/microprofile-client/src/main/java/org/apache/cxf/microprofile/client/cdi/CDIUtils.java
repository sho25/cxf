begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|CDI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|CDIUtils
block|{
specifier|private
name|CDIUtils
parameter_list|()
block|{     }
specifier|static
name|BeanManager
name|getCurrentBeanManager
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|BeanManager
name|bm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|BeanManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bm
operator|==
literal|null
condition|)
block|{
name|bm
operator|=
name|getCurrentBeanManager
argument_list|()
expr_stmt|;
name|bus
operator|.
name|setExtension
argument_list|(
name|bm
argument_list|,
name|BeanManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|bm
return|;
block|}
specifier|static
name|BeanManager
name|getCurrentBeanManager
parameter_list|()
block|{
return|return
name|CDI
operator|.
name|current
argument_list|()
operator|.
name|getBeanManager
argument_list|()
return|;
block|}
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Instance
argument_list|<
name|T
argument_list|>
name|getInstanceFromCDI
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|getInstanceFromCDI
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Instance
argument_list|<
name|T
argument_list|>
name|getInstanceFromCDI
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|Instance
argument_list|<
name|T
argument_list|>
name|instance
decl_stmt|;
try|try
block|{
name|instance
operator|=
name|findBean
argument_list|(
name|clazz
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExceptionInInitializerError
decl||
name|NoClassDefFoundError
decl||
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected if no CDI implementation is available
name|instance
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|ex
parameter_list|)
block|{
comment|// expected if ClientHeadersFactory is not managed by CDI
name|instance
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Instance
argument_list|<
name|T
argument_list|>
name|findBean
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|BeanManager
name|beanManager
init|=
name|bus
operator|==
literal|null
condition|?
name|getCurrentBeanManager
argument_list|()
else|:
name|getCurrentBeanManager
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|beanManager
operator|.
name|getBeans
argument_list|(
name|clazz
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CreationalContext
argument_list|<
name|?
argument_list|>
name|ctx
init|=
name|beanManager
operator|.
name|createCreationalContext
argument_list|(
name|bean
argument_list|)
decl_stmt|;
name|Instance
argument_list|<
name|T
argument_list|>
name|instance
init|=
operator|new
name|Instance
argument_list|<>
argument_list|(
operator|(
name|T
operator|)
name|beanManager
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|clazz
argument_list|,
name|ctx
argument_list|)
argument_list|,
name|beanManager
operator|.
name|isNormalScope
argument_list|(
name|bean
operator|.
name|getScope
argument_list|()
argument_list|)
condition|?
parameter_list|()
lambda|->
block|{ }
else|:
name|ctx
operator|::
name|release
argument_list|)
decl_stmt|;
return|return
name|instance
return|;
block|}
block|}
end_class

end_unit

