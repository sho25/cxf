begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|RuntimeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientResponseFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ConfigurableImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|config
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|config
operator|.
name|ConfigProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
operator|.
name|ext
operator|.
name|ResponseExceptionMapper
import|;
end_import

begin_class
specifier|public
class|class
name|MicroProfileClientConfigurableImpl
parameter_list|<
name|C
extends|extends
name|Configurable
parameter_list|<
name|C
parameter_list|>
parameter_list|>
extends|extends
name|ConfigurableImpl
argument_list|<
name|C
argument_list|>
implements|implements
name|Configurable
argument_list|<
name|C
argument_list|>
block|{
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|CONTRACTS
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|ClientRequestFilter
operator|.
name|class
operator|,
name|ClientResponseFilter
operator|.
name|class
operator|,
name|ReaderInterceptor
operator|.
name|class
operator|,
name|WriterInterceptor
operator|.
name|class
operator|,
name|MessageBodyWriter
operator|.
name|class
operator|,
name|MessageBodyReader
operator|.
name|class
operator|,
name|ResponseExceptionMapper
operator|.
name|class
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_KEY_DISABLE_MAPPER
init|=
literal|"microprofile.rest.client.disable.default.mapper"
decl_stmt|;
specifier|public
name|MicroProfileClientConfigurableImpl
parameter_list|(
name|C
name|configurable
parameter_list|)
block|{
name|this
argument_list|(
name|configurable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MicroProfileClientConfigurableImpl
parameter_list|(
name|C
name|configurable
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|configurable
argument_list|,
name|CONTRACTS
argument_list|,
name|config
operator|==
literal|null
condition|?
operator|new
name|ConfigurationImpl
argument_list|(
name|RuntimeType
operator|.
name|CLIENT
argument_list|)
else|:
operator|new
name|ConfigurationImpl
argument_list|(
name|config
argument_list|,
name|CONTRACTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isDefaultExceptionMapperDisabled
parameter_list|()
block|{
name|Object
name|prop
init|=
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|CONFIG_KEY_DISABLE_MAPPER
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|prop
return|;
block|}
else|else
block|{
name|Config
name|config
init|=
name|ConfigProvider
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|optionalValue
init|=
name|config
operator|.
name|getOptionalValue
argument_list|(
name|CONFIG_KEY_DISABLE_MAPPER
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionalValue
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|optionalValue
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

