begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|microprofile
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|InvocationCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JaxrsClientCallback
import|;
end_import

begin_class
specifier|public
class|class
name|MPRestClientCallback
parameter_list|<
name|T
parameter_list|>
extends|extends
name|JaxrsClientCallback
argument_list|<
name|T
argument_list|>
block|{
specifier|public
name|MPRestClientCallback
parameter_list|(
name|InvocationCallback
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|responseClass
parameter_list|,
name|Type
name|outGenericType
parameter_list|)
block|{
name|super
argument_list|(
name|handler
argument_list|,
name|responseClass
argument_list|,
name|outGenericType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|T
argument_list|>
name|createFuture
parameter_list|()
block|{
return|return
operator|new
name|MPRestClientResponseFuture
argument_list|<
name|T
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|static
class|class
name|MPRestClientResponseFuture
parameter_list|<
name|T
parameter_list|>
extends|extends
name|CompletableFuture
argument_list|<
name|T
argument_list|>
implements|implements
name|Future
argument_list|<
name|T
argument_list|>
block|{
name|MPRestClientCallback
argument_list|<
name|T
argument_list|>
name|callback
decl_stmt|;
name|MPRestClientResponseFuture
parameter_list|(
name|MPRestClientCallback
argument_list|<
name|T
argument_list|>
name|cb
parameter_list|)
block|{
name|callback
operator|=
name|cb
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getContext
parameter_list|()
block|{
try|try
block|{
return|return
name|callback
operator|.
name|getResponseContext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
name|callback
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
return|;
block|}
specifier|public
name|T
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
try|try
block|{
return|return
name|getObject
argument_list|(
name|callback
operator|.
name|get
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|InvocationCallback
argument_list|<
name|T
argument_list|>
name|handler
init|=
name|callback
operator|.
name|getHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|failed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
block|}
specifier|public
name|T
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
try|try
block|{
return|return
name|getObject
argument_list|(
name|callback
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|InvocationCallback
argument_list|<
name|T
argument_list|>
name|handler
init|=
name|callback
operator|.
name|getHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|failed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|T
name|getObject
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|object
return|;
block|}
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|callback
operator|.
name|isCancelled
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|callback
operator|.
name|isDone
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

