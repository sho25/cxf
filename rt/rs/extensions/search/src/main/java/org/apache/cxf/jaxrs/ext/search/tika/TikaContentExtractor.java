begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|DefaultDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ToTextContentHandler
import|;
end_import

begin_class
specifier|public
class|class
name|TikaContentExtractor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|TikaContentExtractor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Parser
name|parser
decl_stmt|;
specifier|private
specifier|final
name|DefaultDetector
name|detector
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|validateMediaType
decl_stmt|;
specifier|private
specifier|final
name|String
name|contentFieldName
decl_stmt|;
comment|/**      * Create new Tika-based content extractor using the provided parser instance.        * @param parser parser instance      */
specifier|public
name|TikaContentExtractor
parameter_list|(
specifier|final
name|Parser
name|parser
parameter_list|)
block|{
name|this
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create new Tika-based content extractor using the provided parser instance and      * optional media type validation. If validation is enabled, the implementation       * will try to detect the media type of the input and validate it against media types      * supported by the parser.      * @param parser parser instance      * @param validateMediaType enabled or disable media type validation      */
specifier|public
name|TikaContentExtractor
parameter_list|(
specifier|final
name|Parser
name|parser
parameter_list|,
specifier|final
name|boolean
name|validateMediaType
parameter_list|)
block|{
name|this
argument_list|(
name|parser
argument_list|,
name|validateMediaType
argument_list|,
literal|"contents"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create new Tika-based content extractor using the provided parser instance and      * optional media type validation. If validation is enabled, the implementation       * will try to detect the media type of the input and validate it against media types      * supported by the parser.      * @param parser parser instance      * @param validateMediaType enabled or disable media type validation      * @param contentFieldName name of the content field, default is "contents"      */
specifier|public
name|TikaContentExtractor
parameter_list|(
specifier|final
name|Parser
name|parser
parameter_list|,
specifier|final
name|boolean
name|validateMediaType
parameter_list|,
specifier|final
name|String
name|contentFieldName
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|validateMediaType
operator|=
name|validateMediaType
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|validateMediaType
condition|?
operator|new
name|DefaultDetector
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|contentFieldName
operator|=
name|contentFieldName
expr_stmt|;
block|}
comment|/**      * Extract the content and metadata from the input stream. Depending on media type validation,      * the detector could be run against input stream in order to ensure that parser supports this      * type of content.       * @param in input stream to extract the content and metadata from        * @return the extracted document or null if extraction is not possible or was unsuccessful      */
specifier|public
name|Document
name|extract
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
return|return
name|extractAll
argument_list|(
name|in
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Extract the content only from the input stream. Depending on media type validation,      * the detector could be run against input stream in order to ensure that parser supports this      * type of content.       * @param in input stream to extract the content from        * @return the extracted document or null if extraction is not possible or was unsuccessful      */
specifier|public
name|Document
name|extractContent
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
return|return
name|extractAll
argument_list|(
name|in
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Extract the metadata only from the input stream. Depending on media type validation,      * the detector could be run against input stream in order to ensure that parser supports this      * type of content.       * @param in input stream to extract the metadata from        * @return the extracted document or null if extraction is not possible or was unsuccessful      */
specifier|public
name|Document
name|extractMetadata
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
return|return
name|extractAll
argument_list|(
name|in
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|Document
name|extractAll
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
name|boolean
name|extractContent
parameter_list|,
name|boolean
name|extractMetadata
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
specifier|final
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
specifier|final
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
comment|// Try to validate that input stream media type is supported by the parser
if|if
condition|(
name|validateMediaType
condition|)
block|{
specifier|final
name|MediaType
name|mediaType
init|=
name|detector
operator|.
name|detect
argument_list|(
name|in
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|==
literal|null
operator|||
operator|!
name|parser
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
operator|.
name|contains
argument_list|(
name|mediaType
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|final
name|ToTextContentHandler
name|handler
init|=
operator|new
name|ToTextContentHandler
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|in
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
name|extractContent
condition|)
block|{
specifier|final
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|content
argument_list|)
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|contentFieldName
argument_list|,
name|content
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|extractMetadata
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|property
range|:
name|metadata
operator|.
name|names
argument_list|()
control|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|property
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|document
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Unable to extract media type from input stream"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Unable to parse input stream"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TikaException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Unable to parse input stream"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

