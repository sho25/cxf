begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|DefaultDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ToTextContentHandler
import|;
end_import

begin_class
specifier|public
class|class
name|TikaContentExtractor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|TikaContentExtractor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Parser
argument_list|>
name|parsers
decl_stmt|;
specifier|private
specifier|final
name|Detector
name|detector
decl_stmt|;
comment|/**      * Create new Tika-based content extractor using the provided parser instance.        * @param parser parser instance      */
specifier|public
name|TikaContentExtractor
parameter_list|(
specifier|final
name|Parser
name|parser
parameter_list|)
block|{
name|this
argument_list|(
name|parser
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create new Tika-based content extractor using the provided parser instances.        * @param parsers parser instances      */
specifier|public
name|TikaContentExtractor
parameter_list|(
specifier|final
name|List
argument_list|<
name|Parser
argument_list|>
name|parsers
parameter_list|)
block|{
name|this
argument_list|(
name|parsers
argument_list|,
operator|new
name|DefaultDetector
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create new Tika-based content extractor using the provided parser instances.        * @param parsers parser instances      */
specifier|public
name|TikaContentExtractor
parameter_list|(
specifier|final
name|List
argument_list|<
name|Parser
argument_list|>
name|parsers
parameter_list|,
name|Detector
name|detector
parameter_list|)
block|{
name|this
operator|.
name|parsers
operator|=
name|parsers
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|detector
expr_stmt|;
block|}
comment|/**      * Create new Tika-based content extractor using the provided parser instance and      * optional media type validation. If validation is enabled, the implementation parser      * will try to detect the media type of the input and validate it against media types      * supported by the parser.      * @param parser parser instance      * @param validateMediaType enabled or disable media type validationparser      */
specifier|public
name|TikaContentExtractor
parameter_list|(
specifier|final
name|Parser
name|parser
parameter_list|,
specifier|final
name|boolean
name|validateMediaType
parameter_list|)
block|{
name|this
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|parser
argument_list|)
argument_list|,
name|validateMediaType
condition|?
operator|new
name|DefaultDetector
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Extract the content and metadata from the input stream. Depending on media type validation,      * the detector could be run against input stream in order to ensure that parser supports this      * type of content.       * @param in input stream to extract the content and metadata from        * @return the extracted content and metadata or null if extraction is not possible or was unsuccessful      */
specifier|public
name|TikaContent
name|extract
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
return|return
name|extract
argument_list|(
name|in
argument_list|,
operator|(
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * Extract the content and metadata from the input stream with a media type hint.       * @param in input stream to extract the content and metadata from        * @param mt JAX-RS MediaType of the stream content      * @return the extracted content and metadata or null if extraction is not possible or was unsuccessful      */
specifier|public
name|TikaContent
name|extract
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|extract
argument_list|(
name|in
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|,
name|mt
argument_list|)
return|;
block|}
comment|/**      * Extract the content and metadata from the input stream. Depending on media type validation,      * the detector could be run against input stream in order to ensure that parser supports this      * type of content.       * @param in input stream to extract the content and metadata from       * @param handler custom ContentHandler       * @return the extracted content and metadata or null if extraction is not possible       *         or was unsuccessful      */
specifier|public
name|TikaContent
name|extract
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|ContentHandler
name|handler
parameter_list|)
block|{
return|return
name|extract
argument_list|(
name|in
argument_list|,
name|handler
argument_list|,
operator|(
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * Extract the content and metadata from the input stream with a media type hint.       * @param in input stream to extract the content and metadata from       * @param handler custom ContentHandler       * @param mt JAX-RS MediaType of the stream content      * @return the extracted content and metadata or null if extraction is not possible       *         or was unsuccessful      */
specifier|public
name|TikaContent
name|extract
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|ContentHandler
name|handler
parameter_list|,
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|extract
argument_list|(
name|in
argument_list|,
name|handler
argument_list|,
name|mt
argument_list|,
operator|(
name|ParseContext
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * Extract the content and metadata from the input stream. Depending on media type validation,      * the detector could be run against input stream in order to ensure that parser supports this      * type of content.       * @param in input stream to extract the content and metadata from       * @param handler custom ContentHandler      * @param context custom context       * @return the extracted content and metadata or null if extraction is not possible       *         or was unsuccessful      */
specifier|public
name|TikaContent
name|extract
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|ContentHandler
name|handler
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|extract
argument_list|(
name|in
argument_list|,
name|handler
argument_list|,
operator|(
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|)
literal|null
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|/**      * Extract the content and metadata from the input stream with a media type hint      * type of content.       * @param in input stream to extract the metadata from       * @param handler custom ContentHandler      * @param mt JAX-RS MediaType of the stream content      * @param context custom context       * @return the extracted content and metadata or null if extraction is not possible       *         or was unsuccessful      */
specifier|public
name|TikaContent
name|extract
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|ContentHandler
name|handler
parameter_list|,
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
name|mtHint
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|ParseContext
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Try to validate that input stream media type is supported by the parser
name|MediaType
name|mediaType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mtHint
operator|!=
literal|null
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|parse
argument_list|(
name|mtHint
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|detector
operator|!=
literal|null
operator|&&
name|in
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|mediaType
operator|=
name|detector
operator|.
name|detect
argument_list|(
name|in
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|Parser
name|parser
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Parser
name|p
range|:
name|parsers
control|)
block|{
if|if
condition|(
name|mediaType
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
operator|.
name|contains
argument_list|(
name|mediaType
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|parser
operator|=
name|p
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|in
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Starting from Tika 1.6 PDFParser (with other parsers to be updated in the future) will skip
comment|// the content processing if the content handler is null. This can be used to optimize the
comment|// extraction process. If we get an exception with a null handler then a given parser is still
comment|// not ready to accept null handlers so lets retry with IgnoreContentHandler.
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|in
argument_list|,
operator|new
name|IgnoreContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
return|return
operator|new
name|TikaContent
argument_list|(
name|handler
operator|==
literal|null
condition|?
literal|null
else|:
name|handler
operator|.
name|toString
argument_list|()
argument_list|,
name|metadata
argument_list|,
name|mediaType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Unable to extract media type from input stream"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Unable to parse input stream"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TikaException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Unable to parse input stream"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Extract the metadata only from the input stream. Depending on media type validation,      * the detector could be run against input stream in order to ensure that parser supports this      * type of content.       * @param in input stream to extract the metadata from        * @return the extracted content or null if extraction is not possible or was unsuccessful      */
specifier|public
name|TikaContent
name|extractMetadata
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
return|return
name|extract
argument_list|(
name|in
argument_list|,
operator|(
name|ContentHandler
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * Extract the metadata only from the input stream. Depending on media type validation,      * the detector could be run against input stream in order to ensure that parser supports this      * type of content.       * @param in input stream to extract the metadata from        * @return the extracted metadata converted to SearchBean or null if extraction is not possible       *         or was unsuccessful      */
specifier|public
name|SearchBean
name|extractMetadataToSearchBean
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
name|TikaContent
name|tc
init|=
name|extractMetadata
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Metadata
name|metadata
init|=
name|tc
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|SearchBean
name|bean
init|=
operator|new
name|SearchBean
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|property
range|:
name|metadata
operator|.
name|names
argument_list|()
control|)
block|{
name|bean
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|bean
return|;
block|}
comment|/**      * Extracted content, metadata and media type container      */
specifier|public
specifier|static
class|class
name|TikaContent
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1240120543378490963L
decl_stmt|;
specifier|private
name|String
name|content
decl_stmt|;
specifier|private
name|Metadata
name|metadata
decl_stmt|;
specifier|private
name|MediaType
name|mediaType
decl_stmt|;
specifier|public
name|TikaContent
parameter_list|(
name|String
name|content
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|mediaType
operator|=
name|mediaType
expr_stmt|;
block|}
comment|/**          * Return the content cached by ContentHandler           * @return the content, may be empty or null if a custom non-caching ContentHandler was used          *         to parse the content            */
specifier|public
name|String
name|getContent
parameter_list|()
block|{
return|return
name|content
return|;
block|}
comment|/**          * Return the metadata          * @return the metadata          */
specifier|public
name|Metadata
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
comment|/**          * Return the detected media type of the content          * @return the media type, null if no auto-detection was done          */
specifier|public
name|MediaType
name|getMediaType
parameter_list|()
block|{
return|return
name|mediaType
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|IgnoreContentHandler
extends|extends
name|ToTextContentHandler
block|{
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// Complete
block|}
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// Complete
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

end_unit

