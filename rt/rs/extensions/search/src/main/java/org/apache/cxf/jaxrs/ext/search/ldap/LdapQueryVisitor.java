begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|ConditionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|PrimitiveStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|visitor
operator|.
name|AbstractUntypedSearchConditionVisitor
import|;
end_import

begin_comment
comment|/**  * Initial Implementation of http://tools.ietf.org/html/rfc4515  */
end_comment

begin_class
specifier|public
class|class
name|LdapQueryVisitor
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractUntypedSearchConditionVisitor
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
block|{
specifier|public
name|LdapQueryVisitor
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LdapQueryVisitor
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fieldMap
parameter_list|)
block|{
name|super
argument_list|(
name|fieldMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|SearchCondition
argument_list|<
name|T
argument_list|>
name|sc
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
name|getStringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|PrimitiveStatement
name|statement
init|=
name|sc
operator|.
name|getStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|statement
operator|.
name|getProperty
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|getRealPropertyName
argument_list|(
name|statement
operator|.
name|getProperty
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rvalStr
init|=
name|getPropertyValue
argument_list|(
name|name
argument_list|,
name|statement
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|validatePropertyValue
argument_list|(
name|name
argument_list|,
name|rvalStr
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|sc
operator|.
name|getConditionType
argument_list|()
operator|==
name|ConditionType
operator|.
name|NOT_EQUALS
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"!"
argument_list|)
expr_stmt|;
block|}
name|String
name|ldapOperator
init|=
name|conditionTypeToLdapOperator
argument_list|(
name|sc
operator|.
name|getConditionType
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
name|ldapOperator
argument_list|)
operator|.
name|append
argument_list|(
name|rvalStr
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|sc
operator|.
name|getConditionType
argument_list|()
operator|==
name|ConditionType
operator|.
name|AND
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"|"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SearchCondition
argument_list|<
name|T
argument_list|>
name|condition
range|:
name|sc
operator|.
name|getSearchConditions
argument_list|()
control|)
block|{
name|saveStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|condition
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|sb
operator|=
name|getStringBuilder
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|saveStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|conditionTypeToLdapOperator
parameter_list|(
name|ConditionType
name|ct
parameter_list|)
block|{
name|String
name|op
decl_stmt|;
switch|switch
condition|(
name|ct
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
name|op
operator|=
literal|"="
expr_stmt|;
break|break;
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_OR_EQUALS
case|:
name|op
operator|=
literal|">="
expr_stmt|;
break|break;
case|case
name|LESS_THAN
case|:
case|case
name|LESS_OR_EQUALS
case|:
name|op
operator|=
literal|"<="
expr_stmt|;
break|break;
default|default:
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Condition type %s is not supported"
argument_list|,
name|ct
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|op
return|;
block|}
block|}
end_class

end_unit

