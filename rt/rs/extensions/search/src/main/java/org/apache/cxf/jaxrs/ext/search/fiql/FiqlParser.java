begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|fiql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|AndSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|Beanspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|ConditionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|OrSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|PropertyNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchConditionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SimpleSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_comment
comment|/**  * Parses<a href="http://tools.ietf.org/html/draft-nottingham-atompub-fiql-00">FIQL</a> expression to  * construct {@link SearchCondition} structure. Since this class operates on Java type T, not on XML  * structures "selectors" part of specification is not applicable; instead selectors describes getters of type  * T used as search condition type (see {@link SimpleSearchCondition#isMet(Object)} for details.  *   * @param<T> type of search condition.  */
end_comment

begin_class
specifier|public
class|class
name|FiqlParser
parameter_list|<
name|T
parameter_list|>
implements|implements
name|SearchConditionParser
argument_list|<
name|T
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OR
init|=
literal|","
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AND
init|=
literal|";"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GT
init|=
literal|"=gt="
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GE
init|=
literal|"=ge="
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LT
init|=
literal|"=lt="
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LE
init|=
literal|"=le="
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EQ
init|=
literal|"=="
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NEQ
init|=
literal|"!="
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|COMPARATORS_PATTERN
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConditionType
argument_list|>
name|OPERATORS_MAP
decl_stmt|;
static|static
block|{
comment|// operatorsMap
name|OPERATORS_MAP
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConditionType
argument_list|>
argument_list|()
expr_stmt|;
name|OPERATORS_MAP
operator|.
name|put
argument_list|(
name|GT
argument_list|,
name|ConditionType
operator|.
name|GREATER_THAN
argument_list|)
expr_stmt|;
name|OPERATORS_MAP
operator|.
name|put
argument_list|(
name|GE
argument_list|,
name|ConditionType
operator|.
name|GREATER_OR_EQUALS
argument_list|)
expr_stmt|;
name|OPERATORS_MAP
operator|.
name|put
argument_list|(
name|LT
argument_list|,
name|ConditionType
operator|.
name|LESS_THAN
argument_list|)
expr_stmt|;
name|OPERATORS_MAP
operator|.
name|put
argument_list|(
name|LE
argument_list|,
name|ConditionType
operator|.
name|LESS_OR_EQUALS
argument_list|)
expr_stmt|;
name|OPERATORS_MAP
operator|.
name|put
argument_list|(
name|EQ
argument_list|,
name|ConditionType
operator|.
name|EQUALS
argument_list|)
expr_stmt|;
name|OPERATORS_MAP
operator|.
name|put
argument_list|(
name|NEQ
argument_list|,
name|ConditionType
operator|.
name|NOT_EQUALS
argument_list|)
expr_stmt|;
comment|// pattern
name|String
name|comparators
init|=
name|GT
operator|+
literal|"|"
operator|+
name|GE
operator|+
literal|"|"
operator|+
name|LT
operator|+
literal|"|"
operator|+
name|LE
operator|+
literal|"|"
operator|+
name|EQ
operator|+
literal|"|"
operator|+
name|NEQ
decl_stmt|;
name|String
name|s1
init|=
literal|"[\\p{ASCII}]+("
operator|+
name|comparators
operator|+
literal|")"
decl_stmt|;
name|COMPARATORS_PATTERN
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|s1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Beanspector
argument_list|<
name|T
argument_list|>
name|beanspector
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|T
argument_list|>
name|conditionClass
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contextProperties
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|beanPropertiesMap
decl_stmt|;
comment|/**      * Creates FIQL parser.      *       * @param tclass - class of T used to create condition objects in built syntax tree. Class T must have      *            accessible no-arg constructor and complementary setters to these used in FIQL expressions.      */
specifier|public
name|FiqlParser
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tclass
parameter_list|)
block|{
name|this
argument_list|(
name|tclass
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates FIQL parser.      *       * @param tclass - class of T used to create condition objects in built syntax tree. Class T must have      *            accessible no-arg constructor and complementary setters to these used in FIQL expressions.      * @param contextProperties                  */
specifier|public
name|FiqlParser
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tclass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contextProperties
parameter_list|)
block|{
name|this
argument_list|(
name|tclass
argument_list|,
name|contextProperties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates FIQL parser.      *       * @param tclass - class of T used to create condition objects in built syntax tree. Class T must have      *            accessible no-arg constructor and complementary setters to these used in FIQL expressions.      * @param contextProperties                  */
specifier|public
name|FiqlParser
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tclass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contextProperties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|beanProperties
parameter_list|)
block|{
name|beanspector
operator|=
name|SearchBean
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|tclass
argument_list|)
condition|?
literal|null
else|:
operator|new
name|Beanspector
argument_list|<
name|T
argument_list|>
argument_list|(
name|tclass
argument_list|)
expr_stmt|;
name|conditionClass
operator|=
name|tclass
expr_stmt|;
name|this
operator|.
name|contextProperties
operator|=
name|contextProperties
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|emptyMap
argument_list|()
operator|:
name|contextProperties
expr_stmt|;
name|this
operator|.
name|beanPropertiesMap
operator|=
name|beanProperties
expr_stmt|;
block|}
comment|/**      * Parses expression and builds search filter. Names used in FIQL expression are names of getters/setters      * in type T.      *<p>      * Example:      *       *<pre>      * class Condition {      *   public String getFoo() {...}      *   public void setFoo(String foo) {...}      *   public int getBar() {...}      *   public void setBar(int bar) {...}      * }      *       * FiqlParser&lt;Condition> parser = new FiqlParser&lt;Condition&gt;(Condition.class);      * parser.parse("foo==mystery*;bar=ge=10");      *</pre>      *       * @param fiqlExpression expression of filter.      * @return tree of {@link SearchCondition} objects representing runtime search structure.      * @throws SearchParseException when expression does not follow FIQL grammar      */
specifier|public
name|SearchCondition
argument_list|<
name|T
argument_list|>
name|parse
parameter_list|(
name|String
name|fiqlExpression
parameter_list|)
throws|throws
name|SearchParseException
block|{
name|ASTNode
argument_list|<
name|T
argument_list|>
name|ast
init|=
name|parseAndsOrsBrackets
argument_list|(
name|fiqlExpression
argument_list|)
decl_stmt|;
comment|// System.out.println(ast);
return|return
name|ast
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|ASTNode
argument_list|<
name|T
argument_list|>
name|parseAndsOrsBrackets
parameter_list|(
name|String
name|expr
parameter_list|)
throws|throws
name|SearchParseException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|subexpressions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|operators
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
name|int
name|lastIdx
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
name|expr
operator|.
name|length
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|char
name|c
init|=
name|expr
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'('
condition|)
block|{
name|level
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|')'
condition|)
block|{
name|level
operator|--
expr_stmt|;
if|if
condition|(
name|level
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected closing bracket at position %d"
argument_list|,
name|idx
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|String
name|cs
init|=
name|Character
operator|.
name|toString
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|boolean
name|isOperator
init|=
name|AND
operator|.
name|equals
argument_list|(
name|cs
argument_list|)
operator|||
name|OR
operator|.
name|equals
argument_list|(
name|cs
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|==
literal|0
operator|&&
name|isOperator
condition|)
block|{
name|String
name|s1
init|=
name|expr
operator|.
name|substring
argument_list|(
name|lastIdx
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|expr
operator|.
name|substring
argument_list|(
name|idx
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|subexpressions
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|operators
operator|.
name|add
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|lastIdx
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
block|}
name|boolean
name|isEnd
init|=
name|idx
operator|==
name|expr
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|isEnd
condition|)
block|{
name|String
name|s1
init|=
name|expr
operator|.
name|substring
argument_list|(
name|lastIdx
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|subexpressions
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|operators
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|lastIdx
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|level
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unmatched opening and closing brackets in expression: %s"
argument_list|,
name|expr
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|operators
operator|.
name|get
argument_list|(
name|operators
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|op
init|=
name|operators
operator|.
name|get
argument_list|(
name|operators
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|ex
init|=
name|subexpressions
operator|.
name|get
argument_list|(
name|subexpressions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|SearchParseException
argument_list|(
literal|"Dangling operator at the end of expression: ..."
operator|+
name|ex
operator|+
name|op
argument_list|)
throw|;
block|}
comment|// looking for adjacent ANDs then group them into ORs
comment|// Note: in case not ANDs is found (e.g only ORs) every single subexpression is
comment|// treated as "single item group of ANDs"
name|int
name|from
init|=
literal|0
decl_stmt|;
name|int
name|to
init|=
literal|0
decl_stmt|;
name|SubExpression
name|ors
init|=
operator|new
name|SubExpression
argument_list|(
name|OR
argument_list|)
decl_stmt|;
while|while
condition|(
name|to
operator|<
name|operators
operator|.
name|size
argument_list|()
condition|)
block|{
while|while
condition|(
name|to
operator|<
name|operators
operator|.
name|size
argument_list|()
operator|&&
name|AND
operator|.
name|equals
argument_list|(
name|operators
operator|.
name|get
argument_list|(
name|to
argument_list|)
argument_list|)
condition|)
block|{
name|to
operator|++
expr_stmt|;
block|}
name|SubExpression
name|ands
init|=
operator|new
name|SubExpression
argument_list|(
name|AND
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|from
operator|<=
name|to
condition|;
name|from
operator|++
control|)
block|{
name|String
name|subex
init|=
name|subexpressions
operator|.
name|get
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|ASTNode
argument_list|<
name|T
argument_list|>
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subex
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|node
operator|=
name|parseAndsOrsBrackets
argument_list|(
name|subex
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|subex
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
name|parseComparison
argument_list|(
name|subex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|ands
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|to
operator|=
name|from
expr_stmt|;
if|if
condition|(
name|ands
operator|.
name|getSubnodes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ors
operator|.
name|add
argument_list|(
name|ands
operator|.
name|getSubnodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ors
operator|.
name|add
argument_list|(
name|ands
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ors
operator|.
name|getSubnodes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|ors
operator|.
name|getSubnodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ors
return|;
block|}
block|}
specifier|private
name|Comparison
name|parseComparison
parameter_list|(
name|String
name|expr
parameter_list|)
throws|throws
name|SearchParseException
block|{
name|Matcher
name|m
init|=
name|COMPARATORS_PATTERN
operator|.
name|matcher
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|expr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|m
operator|.
name|start
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|operator
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|expr
operator|.
name|substring
argument_list|(
name|m
operator|.
name|end
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
literal|"Not a comparison expression: "
operator|+
name|expr
argument_list|)
throw|;
block|}
name|String
name|beanPropertyName
init|=
name|beanPropertiesMap
operator|==
literal|null
condition|?
literal|null
else|:
name|beanPropertiesMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanPropertyName
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|beanPropertyName
expr_stmt|;
block|}
name|Object
name|castedValue
init|=
name|parseType
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|castedValue
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Comparison
argument_list|(
name|name
argument_list|,
name|operator
argument_list|,
name|castedValue
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|contextProperties
operator|.
name|get
argument_list|(
name|SearchUtils
operator|.
name|LAX_PROPERTY_MATCH
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|PropertyNotFoundException
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
literal|"Not a comparison expression: "
operator|+
name|expr
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Object
name|parseType
parameter_list|(
name|String
name|setter
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SearchParseException
block|{
name|String
name|name
init|=
name|getSetter
argument_list|(
name|setter
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
init|=
name|beanspector
operator|!=
literal|null
condition|?
name|beanspector
operator|.
name|getAccessorType
argument_list|(
name|name
argument_list|)
else|:
name|String
operator|.
name|class
decl_stmt|;
return|return
name|parseType
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|setter
argument_list|,
name|valueType
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Object
name|parseType
parameter_list|(
name|Object
name|ownerBean
parameter_list|,
name|Object
name|lastCastedValue
parameter_list|,
name|String
name|setter
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SearchParseException
block|{
name|int
name|index
init|=
name|setter
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|Object
name|castedValue
init|=
name|value
decl_stmt|;
if|if
condition|(
name|Date
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
name|castedValue
operator|=
name|convertToDate
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|castedValue
operator|=
name|InjectionUtils
operator|.
name|convertStringToPrimitive
argument_list|(
name|value
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|boolean
name|throwEx
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|valueType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
try|try
block|{
name|Method
name|setterM
init|=
name|valueType
operator|.
name|getMethod
argument_list|(
literal|"set"
operator|+
name|getMethodNameSuffix
argument_list|(
name|setter
argument_list|)
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|setterM
operator|.
name|invoke
argument_list|(
name|ownerBean
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
expr_stmt|;
name|castedValue
operator|=
name|lastCastedValue
expr_stmt|;
name|throwEx
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// continue
block|}
block|}
if|if
condition|(
name|throwEx
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
literal|"Cannot convert String value \""
operator|+
name|value
operator|+
literal|"\" to a value of class "
operator|+
name|valueType
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|castedValue
return|;
block|}
else|else
block|{
name|String
index|[]
name|names
init|=
name|setter
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|nextPart
init|=
name|getMethodNameSuffix
argument_list|(
name|names
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Method
name|getterM
init|=
name|valueType
operator|.
name|getMethod
argument_list|(
literal|"get"
operator|+
name|nextPart
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|getterM
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|boolean
name|isPrimitive
init|=
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|boolean
name|lastTry
init|=
name|names
operator|.
name|length
operator|==
literal|2
operator|&&
operator|(
name|isPrimitive
operator|||
name|returnType
operator|==
name|Date
operator|.
name|class
operator|)
decl_stmt|;
name|Object
name|valueObject
init|=
name|lastTry
operator|&&
name|ownerBean
operator|!=
literal|null
condition|?
name|ownerBean
else|:
name|valueType
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Object
name|nextObject
decl_stmt|;
if|if
condition|(
name|lastTry
condition|)
block|{
name|nextObject
operator|=
name|isPrimitive
condition|?
name|InjectionUtils
operator|.
name|convertStringToPrimitive
argument_list|(
name|value
argument_list|,
name|returnType
argument_list|)
else|:
name|convertToDate
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nextObject
operator|=
name|returnType
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
name|Method
name|setterM
init|=
name|valueType
operator|.
name|getMethod
argument_list|(
literal|"set"
operator|+
name|nextPart
argument_list|,
operator|new
name|Class
index|[]
block|{
name|getterM
operator|.
name|getReturnType
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|setterM
operator|.
name|invoke
argument_list|(
name|valueObject
argument_list|,
operator|new
name|Object
index|[]
block|{
name|nextObject
block|}
argument_list|)
expr_stmt|;
name|lastCastedValue
operator|=
name|lastCastedValue
operator|==
literal|null
condition|?
name|valueObject
else|:
name|lastCastedValue
expr_stmt|;
if|if
condition|(
name|lastTry
condition|)
block|{
return|return
name|lastCastedValue
return|;
block|}
return|return
name|parseType
argument_list|(
name|nextObject
argument_list|,
name|lastCastedValue
argument_list|,
name|setter
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|nextObject
operator|.
name|getClass
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
literal|"Cannot convert String value \""
operator|+
name|value
operator|+
literal|"\" to a value of class "
operator|+
name|valueType
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|Object
name|convertToDate
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|SearchParseException
block|{
try|try
block|{
name|DateFormat
name|df
init|=
name|SearchUtils
operator|.
name|getDateFormat
argument_list|(
name|contextProperties
argument_list|)
decl_stmt|;
name|String
name|dateValue
init|=
name|value
decl_stmt|;
if|if
condition|(
name|SearchUtils
operator|.
name|isTimeZoneSupported
argument_list|(
name|contextProperties
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
condition|)
block|{
comment|// zone in XML is "+01:00" in Java is "+0100"; stripping semicolon
name|int
name|idx
init|=
name|value
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|dateValue
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|df
operator|.
name|parse
argument_list|(
name|dateValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// is that duration?
try|try
block|{
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDuration
argument_list|(
name|value
argument_list|)
operator|.
name|addTo
argument_list|(
name|now
argument_list|)
expr_stmt|;
return|return
name|now
return|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
literal|"Can parse "
operator|+
name|value
operator|+
literal|" neither as date nor duration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|String
name|getSetter
parameter_list|(
name|String
name|setter
parameter_list|)
block|{
name|int
name|index
init|=
name|setter
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|setter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|setter
return|;
block|}
block|}
specifier|private
name|String
name|getMethodNameSuffix
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|name
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Character
operator|.
name|toUpperCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
comment|// node of abstract syntax tree
specifier|private
interface|interface
name|ASTNode
parameter_list|<
name|T
parameter_list|>
block|{
name|SearchCondition
argument_list|<
name|T
argument_list|>
name|build
parameter_list|()
throws|throws
name|SearchParseException
function_decl|;
block|}
specifier|private
class|class
name|SubExpression
implements|implements
name|ASTNode
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|String
name|operator
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ASTNode
argument_list|<
name|T
argument_list|>
argument_list|>
name|subnodes
init|=
operator|new
name|ArrayList
argument_list|<
name|ASTNode
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SubExpression
parameter_list|(
name|String
name|operator
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|ASTNode
argument_list|<
name|T
argument_list|>
name|node
parameter_list|)
block|{
name|subnodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ASTNode
argument_list|<
name|T
argument_list|>
argument_list|>
name|getSubnodes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|subnodes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
init|=
name|operator
operator|.
name|equals
argument_list|(
name|AND
argument_list|)
condition|?
literal|"AND"
else|:
literal|"OR"
decl_stmt|;
name|s
operator|+=
literal|":["
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subnodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|+=
name|subnodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|subnodes
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|s
operator|+=
literal|", "
expr_stmt|;
block|}
block|}
name|s
operator|+=
literal|"]"
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|public
name|SearchCondition
argument_list|<
name|T
argument_list|>
name|build
parameter_list|()
throws|throws
name|SearchParseException
block|{
name|List
argument_list|<
name|SearchCondition
argument_list|<
name|T
argument_list|>
argument_list|>
name|scNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|SearchCondition
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ASTNode
argument_list|<
name|T
argument_list|>
name|node
range|:
name|subnodes
control|)
block|{
name|scNodes
operator|.
name|add
argument_list|(
name|node
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|OR
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
condition|)
block|{
return|return
operator|new
name|OrSearchCondition
argument_list|<
name|T
argument_list|>
argument_list|(
name|scNodes
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|AndSearchCondition
argument_list|<
name|T
argument_list|>
argument_list|(
name|scNodes
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
class|class
name|Comparison
implements|implements
name|ASTNode
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|operator
decl_stmt|;
specifier|private
name|Object
name|value
decl_stmt|;
specifier|public
name|Comparison
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|operator
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|+
literal|" "
operator|+
name|operator
operator|+
literal|" "
operator|+
name|value
operator|+
literal|" ("
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")"
return|;
block|}
specifier|public
name|SearchCondition
argument_list|<
name|T
argument_list|>
name|build
parameter_list|()
throws|throws
name|SearchParseException
block|{
name|String
name|templateName
init|=
name|getSetter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|T
name|cond
init|=
name|createTemplate
argument_list|(
name|templateName
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|ConditionType
name|ct
init|=
name|OPERATORS_MAP
operator|.
name|get
argument_list|(
name|operator
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPrimitive
argument_list|(
name|cond
argument_list|)
condition|)
block|{
return|return
operator|new
name|SimpleSearchCondition
argument_list|<
name|T
argument_list|>
argument_list|(
name|ct
argument_list|,
name|cond
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SimpleSearchCondition
argument_list|<
name|T
argument_list|>
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|templateName
argument_list|,
name|ct
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|templateName
argument_list|,
name|name
argument_list|)
argument_list|,
name|cond
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|isPrimitive
parameter_list|(
name|T
name|pojo
parameter_list|)
block|{
return|return
name|pojo
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"java.lang"
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|T
name|createTemplate
parameter_list|(
name|String
name|setter
parameter_list|,
name|Object
name|val
parameter_list|)
throws|throws
name|SearchParseException
block|{
try|try
block|{
if|if
condition|(
name|beanspector
operator|!=
literal|null
condition|)
block|{
name|beanspector
operator|.
name|instantiate
argument_list|()
operator|.
name|setValue
argument_list|(
name|setter
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|beanspector
operator|.
name|getBean
argument_list|()
return|;
block|}
else|else
block|{
name|SearchBean
name|bean
init|=
operator|(
name|SearchBean
operator|)
name|conditionClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|bean
operator|.
name|set
argument_list|(
name|setter
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|bean
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

