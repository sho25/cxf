begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
operator|.
name|Resolution
import|;
end_import

begin_comment
comment|/**  * Default ParamConverterProvider with support of primitive Java type converters including Date.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultParamConverterProvider
implements|implements
name|ParamConverterProvider
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ParamConverter
argument_list|<
name|?
argument_list|>
argument_list|>
name|converters
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ParamConverter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Date type converter.       */
specifier|private
specifier|static
class|class
name|DateParamConverter
implements|implements
name|ParamConverter
argument_list|<
name|Date
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Date
name|fromString
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|SearchUtils
operator|.
name|dateFromStringWithDefaultFormats
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|Date
name|value
parameter_list|)
block|{
return|return
name|DateTools
operator|.
name|dateToString
argument_list|(
name|value
argument_list|,
name|Resolution
operator|.
name|MILLISECOND
argument_list|)
return|;
block|}
block|}
comment|/**      * Long type converter.       */
specifier|private
specifier|static
class|class
name|LongParamConverter
implements|implements
name|ParamConverter
argument_list|<
name|Long
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Long
name|fromString
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|Long
name|value
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|/**      * Double type converter.       */
specifier|private
specifier|static
class|class
name|DoubleParamConverter
implements|implements
name|ParamConverter
argument_list|<
name|Double
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Double
name|fromString
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|Double
name|value
parameter_list|)
block|{
return|return
name|Double
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|/**      * Float type converter.       */
specifier|private
specifier|static
class|class
name|FloatParamConverter
implements|implements
name|ParamConverter
argument_list|<
name|Float
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Float
name|fromString
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|Float
name|value
parameter_list|)
block|{
return|return
name|Float
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|/**      * Integer type converter.       */
specifier|private
specifier|static
class|class
name|IntegerParamConverter
implements|implements
name|ParamConverter
argument_list|<
name|Integer
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|fromString
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|Integer
name|value
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
specifier|public
name|DefaultParamConverterProvider
parameter_list|()
block|{
name|converters
operator|.
name|put
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|DateParamConverter
argument_list|()
argument_list|)
expr_stmt|;
name|converters
operator|.
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
operator|new
name|LongParamConverter
argument_list|()
argument_list|)
expr_stmt|;
name|converters
operator|.
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
operator|new
name|DoubleParamConverter
argument_list|()
argument_list|)
expr_stmt|;
name|converters
operator|.
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
operator|new
name|FloatParamConverter
argument_list|()
argument_list|)
expr_stmt|;
name|converters
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|new
name|IntegerParamConverter
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ParamConverter
argument_list|<
name|T
argument_list|>
name|getConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|rawType
parameter_list|,
specifier|final
name|Type
name|genericType
parameter_list|,
specifier|final
name|Annotation
index|[]
name|annotations
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|converters
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|rawType
argument_list|)
condition|)
block|{
return|return
operator|(
name|ParamConverter
argument_list|<
name|T
argument_list|>
operator|)
name|converters
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

