begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSearchConditionVisitor
parameter_list|<
name|T
parameter_list|,
name|E
parameter_list|>
implements|implements
name|SearchConditionVisitor
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractSearchConditionVisitor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fieldMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|primitiveFieldTypeMap
decl_stmt|;
specifier|protected
name|AbstractSearchConditionVisitor
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fieldMap
parameter_list|)
block|{
name|this
operator|.
name|fieldMap
operator|=
name|fieldMap
expr_stmt|;
block|}
specifier|protected
name|String
name|getRealPropertyName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|fieldMap
operator|!=
literal|null
operator|&&
operator|!
name|fieldMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|fieldMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|fieldMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Unrecognized field alias : "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|name
return|;
block|}
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getPrimitiveFieldClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|defaultCls
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|primitiveFieldTypeMap
operator|!=
literal|null
condition|)
block|{
name|cls
operator|=
name|primitiveFieldTypeMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
name|cls
operator|=
name|defaultCls
expr_stmt|;
block|}
return|return
name|cls
return|;
block|}
specifier|public
name|void
name|setPrimitiveFieldTypeMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|primitiveFieldTypeMap
parameter_list|)
block|{
name|this
operator|.
name|primitiveFieldTypeMap
operator|=
name|primitiveFieldTypeMap
expr_stmt|;
block|}
specifier|public
name|SearchConditionVisitor
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|visitor
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

