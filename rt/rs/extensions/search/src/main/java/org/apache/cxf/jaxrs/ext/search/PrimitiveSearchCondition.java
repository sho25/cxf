begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|InjectionUtils
import|;
end_import

begin_class
specifier|public
class|class
name|PrimitiveSearchCondition
parameter_list|<
name|T
parameter_list|>
implements|implements
name|SearchCondition
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|String
name|propertyName
decl_stmt|;
specifier|private
name|Object
name|propertyValue
decl_stmt|;
specifier|private
name|Type
name|propertyType
decl_stmt|;
specifier|private
name|T
name|condition
decl_stmt|;
specifier|private
name|ConditionType
name|cType
decl_stmt|;
specifier|private
name|Beanspector
argument_list|<
name|T
argument_list|>
name|beanspector
decl_stmt|;
specifier|public
name|PrimitiveSearchCondition
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|,
name|ConditionType
name|ct
parameter_list|,
name|T
name|condition
parameter_list|)
block|{
name|this
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|,
name|propertyValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|ct
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PrimitiveSearchCondition
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|,
name|Type
name|propertyType
parameter_list|,
name|ConditionType
name|ct
parameter_list|,
name|T
name|condition
parameter_list|)
block|{
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|this
operator|.
name|propertyValue
operator|=
name|propertyValue
expr_stmt|;
name|this
operator|.
name|propertyType
operator|=
name|propertyType
expr_stmt|;
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
name|this
operator|.
name|cType
operator|=
name|ct
expr_stmt|;
if|if
condition|(
name|propertyName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|beanspector
operator|=
name|SearchBean
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|condition
operator|.
name|getClass
argument_list|()
argument_list|)
condition|?
literal|null
else|:
operator|new
name|Beanspector
argument_list|<
name|T
argument_list|>
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|findAll
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|pojos
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|pojo
range|:
name|pojos
control|)
block|{
if|if
condition|(
name|isMet
argument_list|(
name|pojo
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pojo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|T
name|getCondition
parameter_list|()
block|{
return|return
name|condition
return|;
block|}
specifier|public
name|ConditionType
name|getConditionType
parameter_list|()
block|{
return|return
name|cType
return|;
block|}
specifier|public
name|List
argument_list|<
name|SearchCondition
argument_list|<
name|T
argument_list|>
argument_list|>
name|getSearchConditions
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|PrimitiveStatement
name|getStatement
parameter_list|()
block|{
return|return
operator|new
name|PrimitiveStatement
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|,
name|propertyType
argument_list|,
name|cType
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isMet
parameter_list|(
name|T
name|pojo
parameter_list|)
block|{
if|if
condition|(
name|isPrimitive
argument_list|(
name|pojo
argument_list|)
condition|)
block|{
return|return
name|compare
argument_list|(
name|pojo
argument_list|,
name|cType
argument_list|,
name|propertyValue
argument_list|)
return|;
block|}
else|else
block|{
name|Object
name|lValue
init|=
name|getValue
argument_list|(
name|propertyName
argument_list|,
name|pojo
argument_list|)
decl_stmt|;
name|Object
name|rValue
init|=
name|getPrimitiveValue
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
decl_stmt|;
return|return
name|lValue
operator|==
literal|null
condition|?
literal|false
else|:
name|compare
argument_list|(
name|lValue
argument_list|,
name|cType
argument_list|,
name|rValue
argument_list|)
return|;
block|}
block|}
specifier|private
name|Object
name|getValue
parameter_list|(
name|String
name|getter
parameter_list|,
name|T
name|pojo
parameter_list|)
block|{
name|String
name|thePropertyName
decl_stmt|;
name|int
name|index
init|=
name|getter
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|thePropertyName
operator|=
name|getter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|thePropertyName
operator|=
name|getter
expr_stmt|;
block|}
name|Object
name|value
decl_stmt|;
try|try
block|{
if|if
condition|(
name|beanspector
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|beanspector
operator|.
name|swap
argument_list|(
name|pojo
argument_list|)
operator|.
name|getValue
argument_list|(
name|thePropertyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
operator|(
operator|(
name|SearchBean
operator|)
name|pojo
operator|)
operator|.
name|get
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
return|return
name|getPrimitiveValue
argument_list|(
name|getter
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|toSQL
parameter_list|(
name|String
name|table
parameter_list|,
name|String
modifier|...
name|columns
parameter_list|)
block|{
return|return
name|SearchUtils
operator|.
name|toSQL
argument_list|(
name|this
argument_list|,
name|table
argument_list|,
name|columns
argument_list|)
return|;
block|}
specifier|public
name|void
name|accept
parameter_list|(
name|SearchConditionVisitor
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|visitor
parameter_list|)
block|{
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isPrimitive
parameter_list|(
name|T
name|pojo
parameter_list|)
block|{
return|return
name|pojo
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"java.lang"
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
name|boolean
name|compare
parameter_list|(
name|Object
name|lval
parameter_list|,
name|ConditionType
name|cond
parameter_list|,
name|Object
name|rval
parameter_list|)
block|{
name|boolean
name|compares
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|cond
operator|==
name|ConditionType
operator|.
name|EQUALS
operator|||
name|cond
operator|==
name|ConditionType
operator|.
name|NOT_EQUALS
condition|)
block|{
if|if
condition|(
name|rval
operator|==
literal|null
condition|)
block|{
name|compares
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lval
operator|==
literal|null
condition|)
block|{
name|compares
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lval
operator|instanceof
name|String
condition|)
block|{
name|compares
operator|=
name|textCompare
argument_list|(
operator|(
name|String
operator|)
name|lval
argument_list|,
operator|(
name|String
operator|)
name|rval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compares
operator|=
name|lval
operator|.
name|equals
argument_list|(
name|rval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cond
operator|==
name|ConditionType
operator|.
name|NOT_EQUALS
condition|)
block|{
name|compares
operator|=
operator|!
name|compares
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|lval
operator|instanceof
name|Comparable
operator|&&
name|rval
operator|instanceof
name|Comparable
condition|)
block|{
name|Comparable
name|lcomp
init|=
operator|(
name|Comparable
operator|)
name|lval
decl_stmt|;
name|Comparable
name|rcomp
init|=
operator|(
name|Comparable
operator|)
name|rval
decl_stmt|;
name|int
name|comp
init|=
name|lcomp
operator|.
name|compareTo
argument_list|(
name|rcomp
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cond
condition|)
block|{
case|case
name|GREATER_THAN
case|:
name|compares
operator|=
name|comp
operator|>
literal|0
expr_stmt|;
break|break;
case|case
name|GREATER_OR_EQUALS
case|:
name|compares
operator|=
name|comp
operator|>=
literal|0
expr_stmt|;
break|break;
case|case
name|LESS_THAN
case|:
name|compares
operator|=
name|comp
operator|<
literal|0
expr_stmt|;
break|break;
case|case
name|LESS_OR_EQUALS
case|:
name|compares
operator|=
name|comp
operator|<=
literal|0
expr_stmt|;
break|break;
default|default:
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Condition type %s is not supported"
argument_list|,
name|cond
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|compares
return|;
block|}
specifier|private
name|boolean
name|textCompare
parameter_list|(
name|String
name|lval
parameter_list|,
name|String
name|rval
parameter_list|)
block|{
comment|// check wild cards
name|boolean
name|starts
init|=
literal|false
decl_stmt|;
name|boolean
name|ends
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|rval
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'*'
condition|)
block|{
name|starts
operator|=
literal|true
expr_stmt|;
name|rval
operator|=
name|rval
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rval
operator|.
name|charAt
argument_list|(
name|rval
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'*'
condition|)
block|{
name|ends
operator|=
literal|true
expr_stmt|;
name|rval
operator|=
name|rval
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rval
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|starts
operator|||
name|ends
condition|)
block|{
comment|// wild card tests
if|if
condition|(
name|starts
operator|&&
operator|!
name|ends
condition|)
block|{
return|return
name|lval
operator|.
name|endsWith
argument_list|(
name|rval
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ends
operator|&&
operator|!
name|starts
condition|)
block|{
return|return
name|lval
operator|.
name|startsWith
argument_list|(
name|rval
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|lval
operator|.
name|contains
argument_list|(
name|rval
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|lval
operator|.
name|equals
argument_list|(
name|rval
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|static
name|Object
name|getPrimitiveValue
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|int
name|index
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
index|[]
name|names
init|=
name|name
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|InjectionUtils
operator|.
name|isPrimitive
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|nextPart
init|=
name|names
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|nextPart
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|nextPart
operator|=
name|nextPart
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nextPart
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|nextPart
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|nextPart
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Method
name|m
init|=
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"get"
operator|+
name|nextPart
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|value
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|value
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
return|return
name|getPrimitiveValue
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

