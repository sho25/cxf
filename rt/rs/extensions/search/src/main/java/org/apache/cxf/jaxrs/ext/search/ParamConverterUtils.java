begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ParamConverterProvider
import|;
end_import

begin_comment
comment|/**  * Helper class to work with parameter converter providers and parameter converters.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ParamConverterUtils
block|{
specifier|private
name|ParamConverterUtils
parameter_list|()
block|{     }
comment|/**      * Converts the string-based representation of the value to the instance of particular type      * using parameter converter provider and available parameter converter.      * @param type type to convert from string-based representation      * @param provider parameter converter provider to use      * @param value the string-based representation to convert      * @return instance of particular type converter from its string representation      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
specifier|final
name|ParamConverterProvider
name|provider
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|value
return|;
block|}
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ParamConverter
argument_list|<
name|T
argument_list|>
name|converter
init|=
name|provider
operator|.
name|getConverter
argument_list|(
name|type
argument_list|,
literal|null
argument_list|,
operator|new
name|Annotation
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|converter
operator|!=
literal|null
condition|)
block|{
return|return
name|converter
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to convert string '%s' to instance of class '%s': no appropriate converter provided"
argument_list|,
name|value
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Converts the instance of particular type into its string-based representation      * using parameter converter provider and available parameter converter.      * @param type type to convert to string-based representation      * @param provider parameter converter provider to use      * @param value the typed instance to convert to string representation      * @return string-based representation of the instance of particular type      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|String
name|getString
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
specifier|final
name|ParamConverterProvider
name|provider
parameter_list|,
specifier|final
name|T
name|value
parameter_list|)
block|{
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ParamConverter
argument_list|<
name|T
argument_list|>
name|converter
init|=
name|provider
operator|.
name|getConverter
argument_list|(
name|type
argument_list|,
literal|null
argument_list|,
operator|new
name|Annotation
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|converter
operator|!=
literal|null
condition|)
block|{
return|return
name|converter
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

