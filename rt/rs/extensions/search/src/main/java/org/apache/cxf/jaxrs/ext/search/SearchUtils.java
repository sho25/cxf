begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|sql
operator|.
name|SQLPrinterVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SearchUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TIMESTAMP_NO_TIMEZONE
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIMESTAMP_WITH_TIMEZONE_Z
init|=
literal|"yyyy-MM-dd'T'HH:mm:ssZ"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DATE_FORMAT
init|=
literal|"yyyy-MM-dd"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATE_FORMAT_PROPERTY
init|=
literal|"search.date-format"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIMEZONE_SUPPORT_PROPERTY
init|=
literal|"search.timezone.support"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LAX_PROPERTY_MATCH
init|=
literal|"search.lax.property.match"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BEAN_PROPERTY_MAP
init|=
literal|"search.bean.property.map"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BEAN_PROPERTY_CONVERTER
init|=
literal|"search.bean.property.converter"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_VISITOR_PROPERTY
init|=
literal|"search.visitor"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DECODE_QUERY_VALUES
init|=
literal|"search.decode.values"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ESCAPE_UNDERSCORE_CHAR
init|=
literal|"search.escape.underscore.char"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SearchUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SearchUtils
parameter_list|()
block|{      }
specifier|public
specifier|static
name|SimpleDateFormat
name|getContextualDateFormat
parameter_list|()
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|getDateFormat
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|DATE_FORMAT_PROPERTY
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|boolean
name|escapeUnderscoreChar
parameter_list|()
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
return|return
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|m
argument_list|,
name|ESCAPE_UNDERSCORE_CHAR
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SimpleDateFormat
name|getContextualDateFormatOrDefault
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|)
block|{
specifier|final
name|SimpleDateFormat
name|format
init|=
name|getContextualDateFormat
argument_list|()
decl_stmt|;
return|return
name|format
operator|!=
literal|null
condition|?
name|format
else|:
operator|new
name|SimpleDateFormat
argument_list|(
name|pattern
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Date
name|dateFromStringWithContextProperties
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
specifier|final
name|SimpleDateFormat
name|format
init|=
name|getContextualDateFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
return|return
name|format
operator|.
name|parse
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Unable to parse date using contextual date format specification"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|dateFromStringWithDefaultFormats
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SimpleDateFormat
name|getDateFormat
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
return|return
name|getDateFormat
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|DATE_FORMAT_PROPERTY
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SimpleDateFormat
name|getDateFormat
parameter_list|(
name|String
name|dfProperty
parameter_list|)
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
name|dfProperty
operator|==
literal|null
condition|?
name|DEFAULT_DATE_FORMAT
else|:
name|dfProperty
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isTimeZoneSupported
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
name|String
name|tzProperty
init|=
name|properties
operator|.
name|get
argument_list|(
name|SearchUtils
operator|.
name|TIMEZONE_SUPPORT_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|tzProperty
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|Boolean
operator|.
name|valueOf
argument_list|(
name|tzProperty
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|String
name|toSQL
parameter_list|(
name|SearchCondition
argument_list|<
name|T
argument_list|>
name|sc
parameter_list|,
name|String
name|table
parameter_list|,
name|String
modifier|...
name|columns
parameter_list|)
block|{
name|SQLPrinterVisitor
argument_list|<
name|T
argument_list|>
name|visitor
init|=
operator|new
name|SQLPrinterVisitor
argument_list|<
name|T
argument_list|>
argument_list|(
name|table
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|sc
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|getQuery
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toSqlWildcardString
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|alwaysWildcard
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|"\\"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"\\\\\\\\"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|"_"
argument_list|)
operator|&&
name|escapeUnderscoreChar
argument_list|()
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|"\\\\_"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"%"
argument_list|,
literal|"\\\\%"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|containsWildcard
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|alwaysWildcard
condition|?
literal|"%"
operator|+
name|value
operator|+
literal|"%"
else|:
name|value
return|;
block|}
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|"%"
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|String
name|duplicateSingleQuoteIfNeeded
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|indexOf
argument_list|(
literal|'\''
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
name|value
operator|.
name|indexOf
argument_list|(
literal|"\'\'"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"\'"
argument_list|,
literal|"\'\'"
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|boolean
name|containsEscapedChar
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|containsEscapedPercent
argument_list|(
name|value
argument_list|)
operator|||
name|value
operator|.
name|contains
argument_list|(
literal|"\\\\"
argument_list|)
operator|||
name|value
operator|.
name|contains
argument_list|(
literal|"\\_"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|containsWildcard
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|containsEscapedPercent
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|contains
argument_list|(
literal|"\\%"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|startSqlQuery
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|tableAlias
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableAlias
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|tableAlias
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|conditionTypeToSqlOperator
parameter_list|(
name|ConditionType
name|ct
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|)
block|{
comment|// TODO : if we have the same column involved, ex a>= 123 and a<=244 then
comment|// we may try to use IN or BETWEEN, depending on the values
specifier|final
name|boolean
name|wildcardAvailable
init|=
name|SearchUtils
operator|.
name|containsWildcard
argument_list|(
name|originalValue
argument_list|)
decl_stmt|;
name|String
name|op
decl_stmt|;
switch|switch
condition|(
name|ct
condition|)
block|{
case|case
name|EQUALS
case|:
name|op
operator|=
name|wildcardAvailable
condition|?
literal|"LIKE"
else|:
literal|"="
expr_stmt|;
break|break;
case|case
name|NOT_EQUALS
case|:
name|op
operator|=
name|wildcardAvailable
condition|?
literal|"NOT LIKE"
else|:
literal|"<>"
expr_stmt|;
break|break;
case|case
name|GREATER_THAN
case|:
name|op
operator|=
literal|">"
expr_stmt|;
break|break;
case|case
name|GREATER_OR_EQUALS
case|:
name|op
operator|=
literal|">="
expr_stmt|;
break|break;
case|case
name|LESS_THAN
case|:
name|op
operator|=
literal|"<"
expr_stmt|;
break|break;
case|case
name|LESS_OR_EQUALS
case|:
name|op
operator|=
literal|"<="
expr_stmt|;
break|break;
default|default:
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Condition type %s is not supported"
argument_list|,
name|ct
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|op
return|;
block|}
specifier|public
specifier|static
name|Date
name|dateFromStringWithDefaultFormats
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"Z$"
argument_list|,
literal|"+0000"
argument_list|)
expr_stmt|;
name|Date
name|date
init|=
name|timestampFromString
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
name|TIMESTAMP_WITH_TIMEZONE_Z
argument_list|)
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
name|date
operator|=
name|timestampFromString
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
name|TIMESTAMP_NO_TIMEZONE
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
name|date
operator|=
name|timestampFromString
argument_list|(
name|getContextualDateFormatOrDefault
argument_list|(
name|DEFAULT_DATE_FORMAT
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|date
return|;
block|}
specifier|private
specifier|static
name|Date
name|timestampFromString
parameter_list|(
specifier|final
name|SimpleDateFormat
name|formatter
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|formatter
operator|.
name|parse
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ParseException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Unable to parse date using format specification: "
operator|+
name|formatter
operator|.
name|toPattern
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

