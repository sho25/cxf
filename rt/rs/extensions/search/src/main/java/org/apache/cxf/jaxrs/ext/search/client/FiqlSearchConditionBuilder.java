begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|ConditionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|fiql
operator|.
name|FiqlParser
import|;
end_import

begin_comment
comment|/**  * Builds a FIQL search condition.  *<p>  * Examples:  *  *<pre>  * SearchConditionBuilder b = SearchConditionBuilder.instance("fiql");  * b.is(&quot;price&quot;).equalTo(123.5).query();  * // gives&quot;price==123.5&quot;  * b.is(&quot;price&quot;).greaterThan(30).and().is(&quot;price&quot;).lessThan(50).query();  * // gives&quot;price=gt=30.0;price=lt=50.0&quot;  *</pre>  *  * For very complex junctions nested "and"/"or" are allowed (breaking a bit fluency of interface) and looks  * like the following example:  *  *<pre>  * SearchConditionBuilder b = SearchConditionBuilder.instance("fiql");  * b.is(&quot;price&quot;).lessThan(100).and().or(  *     b.is(&quot;title&quot;).equalTo(&quot;The lord*&quot;),  *     b.is(&quot;author&quot;).equalTo(&quot;R.R.Tolkien&quot;)).query();  * // gives&quot;price=lt=100.0;(title==The lord*,author==R.R.Tolkien)&quot;  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|FiqlSearchConditionBuilder
extends|extends
name|SearchConditionBuilder
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|public
name|FiqlSearchConditionBuilder
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FiqlSearchConditionBuilder
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|protected
name|Builder
name|newBuilderInstance
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|(
name|properties
argument_list|)
return|;
block|}
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|Property
name|is
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|newBuilderInstance
argument_list|()
operator|.
name|is
argument_list|(
name|property
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|and
parameter_list|(
name|CompleteCondition
name|c1
parameter_list|,
name|CompleteCondition
name|c2
parameter_list|,
name|CompleteCondition
modifier|...
name|cn
parameter_list|)
block|{
return|return
name|newBuilderInstance
argument_list|()
operator|.
name|and
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|cn
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|and
parameter_list|(
name|List
argument_list|<
name|CompleteCondition
argument_list|>
name|conditions
parameter_list|)
block|{
return|return
name|newBuilderInstance
argument_list|()
operator|.
name|and
argument_list|(
name|conditions
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|or
parameter_list|(
name|List
argument_list|<
name|CompleteCondition
argument_list|>
name|conditions
parameter_list|)
block|{
return|return
name|newBuilderInstance
argument_list|()
operator|.
name|or
argument_list|(
name|conditions
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|or
parameter_list|(
name|CompleteCondition
name|c1
parameter_list|,
name|CompleteCondition
name|c2
parameter_list|,
name|CompleteCondition
modifier|...
name|cn
parameter_list|)
block|{
return|return
name|newBuilderInstance
argument_list|()
operator|.
name|or
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|cn
argument_list|)
return|;
block|}
specifier|protected
specifier|static
class|class
name|Builder
implements|implements
name|Property
implements|,
name|CompleteCondition
implements|,
name|PartialCondition
block|{
specifier|protected
name|String
name|result
init|=
literal|""
decl_stmt|;
specifier|protected
name|Builder
name|parent
decl_stmt|;
specifier|protected
name|DateFormat
name|df
decl_stmt|;
specifier|protected
name|boolean
name|timeZoneSupported
decl_stmt|;
specifier|protected
name|String
name|currentCompositeOp
decl_stmt|;
specifier|public
name|Builder
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|parent
operator|=
literal|null
expr_stmt|;
name|df
operator|=
name|SearchUtils
operator|.
name|getDateFormat
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|timeZoneSupported
operator|=
name|SearchUtils
operator|.
name|isTimeZoneSupported
argument_list|(
name|properties
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Builder
parameter_list|(
name|Builder
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|df
operator|=
name|parent
operator|.
name|getDateFormat
argument_list|()
expr_stmt|;
name|timeZoneSupported
operator|=
name|parent
operator|.
name|isTimeZoneSupported
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
name|buildPartial
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|DateFormat
name|getDateFormat
parameter_list|()
block|{
return|return
name|df
return|;
block|}
specifier|protected
name|boolean
name|isTimeZoneSupported
parameter_list|()
block|{
return|return
name|timeZoneSupported
return|;
block|}
comment|// builds from parent but not further then exclude builder
specifier|protected
name|String
name|buildPartial
parameter_list|(
name|Builder
name|exclude
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|equals
argument_list|(
name|exclude
argument_list|)
condition|)
block|{
return|return
name|parent
operator|.
name|buildPartial
argument_list|(
name|exclude
argument_list|)
operator|+
name|result
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
specifier|public
name|CompleteCondition
name|after
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GT
argument_list|,
name|toString
argument_list|(
name|date
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|before
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LT
argument_list|,
name|toString
argument_list|(
name|date
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|comparesTo
parameter_list|(
name|ConditionType
name|type
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|toFiqlPrimitiveCondition
argument_list|(
name|type
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|comparesTo
parameter_list|(
name|ConditionType
name|type
parameter_list|,
name|Double
name|value
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|toFiqlPrimitiveCondition
argument_list|(
name|type
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|comparesTo
parameter_list|(
name|ConditionType
name|type
parameter_list|,
name|Integer
name|value
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|toFiqlPrimitiveCondition
argument_list|(
name|type
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|comparesTo
parameter_list|(
name|ConditionType
name|type
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|toFiqlPrimitiveCondition
argument_list|(
name|type
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|comparesTo
parameter_list|(
name|ConditionType
name|type
parameter_list|,
name|Date
name|value
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|toFiqlPrimitiveCondition
argument_list|(
name|type
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|comparesTo
parameter_list|(
name|ConditionType
name|type
parameter_list|,
name|Duration
name|value
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|toFiqlPrimitiveCondition
argument_list|(
name|type
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|equalTo
parameter_list|(
name|String
name|value
parameter_list|,
name|String
modifier|...
name|moreValues
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|EQ
argument_list|,
name|value
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|moreValues
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|equalTo
parameter_list|(
name|Double
name|number
parameter_list|,
name|Double
modifier|...
name|moreValues
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|EQ
argument_list|,
name|number
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|moreValues
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|equalTo
parameter_list|(
name|Long
name|number
parameter_list|,
name|Long
modifier|...
name|moreValues
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|EQ
argument_list|,
name|number
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|moreValues
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|equalTo
parameter_list|(
name|Integer
name|number
parameter_list|,
name|Integer
modifier|...
name|moreValues
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|EQ
argument_list|,
name|number
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|moreValues
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|equalTo
parameter_list|(
name|Date
name|date
parameter_list|,
name|Date
modifier|...
name|moreValues
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|EQ
argument_list|,
name|date
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|moreValues
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|equalTo
parameter_list|(
name|Duration
name|distanceFromNow
parameter_list|,
name|Duration
modifier|...
name|moreValues
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|EQ
argument_list|,
name|distanceFromNow
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|moreValues
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|greaterOrEqualTo
parameter_list|(
name|Double
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GE
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|greaterOrEqualTo
parameter_list|(
name|Long
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GE
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|greaterOrEqualTo
parameter_list|(
name|Integer
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GE
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|greaterThan
parameter_list|(
name|Double
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GT
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|greaterThan
parameter_list|(
name|Long
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GT
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|greaterThan
parameter_list|(
name|Integer
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GT
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lessOrEqualTo
parameter_list|(
name|Double
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LE
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lessOrEqualTo
parameter_list|(
name|Long
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LE
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lessOrEqualTo
parameter_list|(
name|Integer
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LE
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lessThan
parameter_list|(
name|Double
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LT
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lessThan
parameter_list|(
name|Long
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LT
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lessThan
parameter_list|(
name|Integer
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LT
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lexicalAfter
parameter_list|(
name|String
name|literal
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GT
argument_list|,
name|literal
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lexicalBefore
parameter_list|(
name|String
name|literal
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LT
argument_list|,
name|literal
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lexicalNotAfter
parameter_list|(
name|String
name|literal
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LE
argument_list|,
name|literal
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|lexicalNotBefore
parameter_list|(
name|String
name|literal
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GE
argument_list|,
name|literal
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notAfter
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LE
argument_list|,
name|toString
argument_list|(
name|date
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notBefore
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GE
argument_list|,
name|toString
argument_list|(
name|date
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notEqualTo
parameter_list|(
name|String
name|literalOrPattern
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|NEQ
argument_list|,
name|literalOrPattern
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notEqualTo
parameter_list|(
name|Double
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|NEQ
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notEqualTo
parameter_list|(
name|Long
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|NEQ
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notEqualTo
parameter_list|(
name|Integer
name|number
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|NEQ
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notEqualTo
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|NEQ
argument_list|,
name|toString
argument_list|(
name|date
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|after
parameter_list|(
name|Duration
name|distanceFromNow
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GT
argument_list|,
name|distanceFromNow
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|before
parameter_list|(
name|Duration
name|distanceFromNow
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LT
argument_list|,
name|distanceFromNow
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notAfter
parameter_list|(
name|Duration
name|distanceFromNow
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|LE
argument_list|,
name|distanceFromNow
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notBefore
parameter_list|(
name|Duration
name|distanceFromNow
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|GE
argument_list|,
name|distanceFromNow
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|notEqualTo
parameter_list|(
name|Duration
name|distanceFromNow
parameter_list|)
block|{
return|return
name|condition
argument_list|(
name|FiqlParser
operator|.
name|NEQ
argument_list|,
name|distanceFromNow
argument_list|)
return|;
block|}
specifier|protected
name|CompleteCondition
name|condition
parameter_list|(
name|String
name|operator
parameter_list|,
name|Object
name|value
parameter_list|,
name|Object
modifier|...
name|moreValues
parameter_list|)
block|{
name|String
name|name
init|=
name|result
decl_stmt|;
name|result
operator|+=
name|operator
operator|+
name|toString
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|moreValues
operator|!=
literal|null
operator|&&
name|moreValues
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Object
name|next
range|:
name|moreValues
control|)
block|{
name|result
operator|+=
literal|","
operator|+
name|name
operator|+
name|operator
operator|+
name|toString
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|currentCompositeOp
operator|=
name|FiqlParser
operator|.
name|OR
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|PartialCondition
name|and
parameter_list|()
block|{
if|if
condition|(
name|currentCompositeOp
operator|==
name|FiqlParser
operator|.
name|OR
operator|||
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|currentCompositeOp
operator|==
name|FiqlParser
operator|.
name|OR
condition|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|result
operator|=
literal|"("
operator|+
name|parent
operator|.
name|result
expr_stmt|;
name|result
operator|+=
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|wrap
argument_list|()
expr_stmt|;
block|}
name|currentCompositeOp
operator|=
name|FiqlParser
operator|.
name|AND
expr_stmt|;
block|}
name|result
operator|+=
name|FiqlParser
operator|.
name|AND
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Property
name|and
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|and
argument_list|()
operator|.
name|is
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|PartialCondition
name|or
parameter_list|()
block|{
if|if
condition|(
name|currentCompositeOp
operator|==
name|FiqlParser
operator|.
name|AND
operator|||
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|currentCompositeOp
operator|==
name|FiqlParser
operator|.
name|AND
condition|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|result
operator|=
literal|"("
operator|+
name|parent
operator|.
name|result
expr_stmt|;
name|result
operator|+=
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|wrap
argument_list|()
expr_stmt|;
block|}
name|currentCompositeOp
operator|=
name|FiqlParser
operator|.
name|OR
expr_stmt|;
block|}
name|result
operator|+=
name|FiqlParser
operator|.
name|OR
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Property
name|or
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|or
argument_list|()
operator|.
name|is
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|wrap
parameter_list|()
block|{
name|result
operator|=
literal|"("
operator|+
name|result
operator|+
literal|")"
expr_stmt|;
name|this
operator|.
name|currentCompositeOp
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CompleteCondition
name|and
parameter_list|(
name|CompleteCondition
name|c1
parameter_list|,
name|CompleteCondition
name|c2
parameter_list|,
name|CompleteCondition
modifier|...
name|cn
parameter_list|)
block|{
name|result
operator|+=
literal|"("
operator|+
operator|(
operator|(
name|Builder
operator|)
name|c1
operator|)
operator|.
name|buildPartial
argument_list|(
name|this
argument_list|)
operator|+
name|FiqlParser
operator|.
name|AND
operator|+
operator|(
operator|(
name|Builder
operator|)
name|c2
operator|)
operator|.
name|buildPartial
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|CompleteCondition
name|c
range|:
name|cn
control|)
block|{
name|result
operator|+=
name|FiqlParser
operator|.
name|AND
operator|+
operator|(
operator|(
name|Builder
operator|)
name|c
operator|)
operator|.
name|buildPartial
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|result
operator|+=
literal|")"
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CompleteCondition
name|or
parameter_list|(
name|CompleteCondition
name|c1
parameter_list|,
name|CompleteCondition
name|c2
parameter_list|,
name|CompleteCondition
modifier|...
name|cn
parameter_list|)
block|{
name|result
operator|+=
literal|"("
operator|+
operator|(
operator|(
name|Builder
operator|)
name|c1
operator|)
operator|.
name|buildPartial
argument_list|(
name|this
argument_list|)
operator|+
name|FiqlParser
operator|.
name|OR
operator|+
operator|(
operator|(
name|Builder
operator|)
name|c2
operator|)
operator|.
name|buildPartial
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|CompleteCondition
name|c
range|:
name|cn
control|)
block|{
name|result
operator|+=
name|FiqlParser
operator|.
name|OR
operator|+
operator|(
operator|(
name|Builder
operator|)
name|c
operator|)
operator|.
name|buildPartial
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|result
operator|+=
literal|")"
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CompleteCondition
name|and
parameter_list|(
name|List
argument_list|<
name|CompleteCondition
argument_list|>
name|conditions
parameter_list|)
block|{
return|return
name|conditionsList
argument_list|(
name|FiqlParser
operator|.
name|AND
argument_list|,
name|conditions
argument_list|)
return|;
block|}
specifier|public
name|CompleteCondition
name|or
parameter_list|(
name|List
argument_list|<
name|CompleteCondition
argument_list|>
name|conditions
parameter_list|)
block|{
return|return
name|conditionsList
argument_list|(
name|FiqlParser
operator|.
name|OR
argument_list|,
name|conditions
argument_list|)
return|;
block|}
specifier|protected
name|CompleteCondition
name|conditionsList
parameter_list|(
name|String
name|op
parameter_list|,
name|List
argument_list|<
name|CompleteCondition
argument_list|>
name|conditions
parameter_list|)
block|{
if|if
condition|(
name|conditions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|result
operator|+=
operator|(
operator|(
name|Builder
operator|)
name|conditions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|buildPartial
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|+=
literal|"("
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CompleteCondition
argument_list|>
name|it
init|=
name|conditions
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|result
operator|+=
operator|(
operator|(
name|Builder
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|buildPartial
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|+=
name|op
expr_stmt|;
block|}
block|}
name|result
operator|+=
literal|")"
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Property
name|is
parameter_list|(
name|String
name|property
parameter_list|)
block|{
name|Builder
name|b
init|=
operator|new
name|Builder
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|b
operator|.
name|result
operator|=
name|property
expr_stmt|;
return|return
name|b
return|;
block|}
specifier|protected
name|String
name|toString
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|==
name|Date
operator|.
name|class
condition|)
block|{
name|String
name|s
init|=
name|df
operator|.
name|format
argument_list|(
operator|(
name|Date
operator|)
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeZoneSupported
condition|)
block|{
comment|// zone in XML is "+01:00" in Java is "+0100"; adding semicolon
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|2
argument_list|)
operator|+
literal|":"
operator|+
name|s
operator|.
name|substring
argument_list|(
name|len
operator|-
literal|2
argument_list|,
name|len
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
else|else
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|protected
name|String
name|toFiqlPrimitiveCondition
parameter_list|(
name|ConditionType
name|type
parameter_list|)
block|{
name|String
name|fiqlType
init|=
name|FiqlParser
operator|.
name|CONDITION_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|fiqlType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only primitive condition types are supported"
argument_list|)
throw|;
block|}
return|return
name|fiqlType
return|;
block|}
block|}
block|}
end_class

end_unit

