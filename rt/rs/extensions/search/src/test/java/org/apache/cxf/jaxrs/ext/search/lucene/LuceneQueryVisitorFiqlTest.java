begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchConditionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|fiql
operator|.
name|FiqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneQueryVisitorFiqlTest
extends|extends
name|AbstractLuceneQueryVisitorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTextContentMatch
argument_list|(
literal|"ct==text"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchNotEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"ct!=text"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchNotEqualPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"ct!=bar"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchWildcardEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTextContentMatch
argument_list|(
literal|"ct==tex*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchWildcardStart
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTextContentMatch
argument_list|(
literal|"ct==*ext"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreater
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntContentMatch
argument_list|(
literal|"ct=gt=3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreaterWithClassFiled
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithFieldClass
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct=gt=3"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreaterNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct=gt=5"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreaterOrEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntContentMatch
argument_list|(
literal|"ct=ge=4"
argument_list|)
expr_stmt|;
name|doTestIntContentMatch
argument_list|(
literal|"ct=ge=3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreaterOrEqualNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct=ge=5"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchLess
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntContentMatch
argument_list|(
literal|"ct=lt=5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchLessNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct=lt=3"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchLessOrEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntContentMatch
argument_list|(
literal|"ct=le=4"
argument_list|)
expr_stmt|;
name|doTestIntContentMatch
argument_list|(
literal|"ct=le=5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchLessOrEqualNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct=le=3"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithFieldClass
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct==4"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextAndContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents==name;contents==text"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextAndContentNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents==bar;contents==text"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextOrContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents==bar,contents==text"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextOrContentNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents==bar,contents==foo"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntAndTextContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithFieldClass
argument_list|(
literal|"intfield==4;contents==text"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntAndTextContentNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield==3;contents==text"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntOrTextContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield==3,contents==text"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntOrTextContentNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield==3,contents==bar"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchEqualPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createPhraseQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"name==text"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchNotEqualPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createPhraseQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"name!=text"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchEqualPhraseWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createPhraseQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"name==tex*"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatMultipleQueriesForTheSameFieldAreHandledProperly
parameter_list|()
block|{
specifier|final
name|SearchCondition
argument_list|<
name|SearchBean
argument_list|>
name|filter1
init|=
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"name==text"
argument_list|)
decl_stmt|;
specifier|final
name|SearchCondition
argument_list|<
name|SearchBean
argument_list|>
name|filter2
init|=
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"name==word"
argument_list|)
decl_stmt|;
specifier|final
name|LuceneQueryVisitor
argument_list|<
name|SearchBean
argument_list|>
name|visitor
init|=
operator|new
name|LuceneQueryVisitor
argument_list|<>
argument_list|()
decl_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|filter1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|visitor
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name:text"
argument_list|)
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|filter2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|visitor
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name:word"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatMultipleQueriesForTheSameFieldAreThreadSafe
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|LuceneQueryVisitor
argument_list|<
name|SearchBean
argument_list|>
name|visitor
init|=
operator|new
name|LuceneQueryVisitor
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|SearchCondition
argument_list|<
name|SearchBean
argument_list|>
name|filter
init|=
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"name==text"
operator|+
name|index
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Query should not be null"
argument_list|,
name|visitor
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|visitor
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name:text"
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"All threads should be terminated"
argument_list|,
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|future
range|:
name|futures
control|)
block|{
comment|// The exception will be raised if queries are messed up
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|SearchConditionParser
argument_list|<
name|SearchBean
argument_list|>
name|getParser
parameter_list|()
block|{
return|return
operator|new
name|FiqlParser
argument_list|<
name|SearchBean
argument_list|>
argument_list|(
name|SearchBean
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

