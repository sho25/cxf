begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchConditionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|fiql
operator|.
name|FiqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneQueryVisitorAnalyzerFiqlTest
extends|extends
name|AbstractLuceneQueryVisitorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTextContentMatchWithAnalyzer
argument_list|(
literal|"ct==tEXt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchStopWord
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
literal|"No query should be returned for stop words"
argument_list|,
name|createTermQueryWithAnalyzer
argument_list|(
literal|"ct==the"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextAndContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithAnalyzer
argument_list|(
literal|"contents==namE;contents==tExt"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextOrContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithAnalyzer
argument_list|(
literal|"contents==BAR,contents==TEXT"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntAndTextContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithFieldClassWithAnalyzer
argument_list|(
literal|"intfield==4;contents==teXt"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntOrTextContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithAnalyzer
argument_list|(
literal|"intfield==3,contents==tExt"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchEqualPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createPhraseQueryWithAnalyzer
argument_list|(
literal|"contents"
argument_list|,
literal|"name==TEXT"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|SearchConditionParser
argument_list|<
name|SearchBean
argument_list|>
name|getParser
parameter_list|()
block|{
return|return
operator|new
name|FiqlParser
argument_list|<
name|SearchBean
argument_list|>
argument_list|(
name|SearchBean
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

