begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Persistence
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|TypedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|fiql
operator|.
name|FiqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JPATypedQueryVisitorTest
extends|extends
name|Assert
block|{
specifier|private
name|EntityManagerFactory
name|emFactory
decl_stmt|;
specifier|private
name|EntityManager
name|em
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.hsqldb.jdbcDriver"
argument_list|)
expr_stmt|;
name|connection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:books-jpa"
argument_list|,
literal|"sa"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception during HSQL database init."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|emFactory
operator|=
name|Persistence
operator|.
name|createEntityManagerFactory
argument_list|(
literal|"testUnit"
argument_list|)
expr_stmt|;
name|em
operator|=
name|emFactory
operator|.
name|createEntityManager
argument_list|()
expr_stmt|;
name|em
operator|.
name|getTransaction
argument_list|()
operator|.
name|begin
argument_list|()
expr_stmt|;
name|Book
name|b1
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|b1
operator|.
name|setId
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|b1
operator|.
name|setName
argument_list|(
literal|"num9"
argument_list|)
expr_stmt|;
name|em
operator|.
name|persist
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|em
operator|.
name|contains
argument_list|(
name|b1
argument_list|)
argument_list|)
expr_stmt|;
name|Book
name|b2
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|b2
operator|.
name|setId
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|b2
operator|.
name|setName
argument_list|(
literal|"num10"
argument_list|)
expr_stmt|;
name|em
operator|.
name|persist
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|em
operator|.
name|contains
argument_list|(
name|b2
argument_list|)
argument_list|)
expr_stmt|;
name|Book
name|b3
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|b3
operator|.
name|setId
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|b3
operator|.
name|setName
argument_list|(
literal|"num11"
argument_list|)
expr_stmt|;
name|em
operator|.
name|persist
argument_list|(
name|b3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|em
operator|.
name|contains
argument_list|(
name|b3
argument_list|)
argument_list|)
expr_stmt|;
name|em
operator|.
name|getTransaction
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception during JPA EntityManager creation."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|em
operator|!=
literal|null
condition|)
block|{
name|em
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|emFactory
operator|!=
literal|null
condition|)
block|{
name|emFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|execute
argument_list|(
literal|"SHUTDOWN"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"id=lt=10,id=gt=10"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|9
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|11
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
operator|||
literal|11
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|9
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrQueryNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"id==7,id==5"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"id==10;name==num10"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|10
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|"num10"
operator|.
name|equals
argument_list|(
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndQueryNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"id==10;name==num9"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"id==10"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|10
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"name==num1*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|10
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|11
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
operator|||
literal|11
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|10
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGreaterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"id=gt=10"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|11
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGreaterEqualQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"id=ge=10"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|10
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|11
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
operator|||
literal|11
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|10
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLessEqualQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"id=le=10"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|9
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|10
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
operator|||
literal|9
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|10
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualsQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|queryBooks
argument_list|(
literal|"id!=10"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|books
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|9
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|11
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
operator|||
literal|11
operator|==
name|books
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|&&
literal|9
operator|==
name|books
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Book
argument_list|>
name|queryBooks
parameter_list|(
name|String
name|expression
parameter_list|)
throws|throws
name|Exception
block|{
name|SearchCondition
argument_list|<
name|Book
argument_list|>
name|filter
init|=
operator|new
name|FiqlParser
argument_list|<
name|Book
argument_list|>
argument_list|(
name|Book
operator|.
name|class
argument_list|)
operator|.
name|parse
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|JPATypedQueryVisitor
argument_list|<
name|Book
argument_list|>
name|jpa
init|=
operator|new
name|JPATypedQueryVisitor
argument_list|<
name|Book
argument_list|>
argument_list|(
name|em
argument_list|,
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|filter
operator|.
name|accept
argument_list|(
name|jpa
argument_list|)
expr_stmt|;
name|TypedQuery
argument_list|<
name|Book
argument_list|>
name|query
init|=
name|jpa
operator|.
name|getQuery
argument_list|()
decl_stmt|;
return|return
name|query
operator|.
name|getResultList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

