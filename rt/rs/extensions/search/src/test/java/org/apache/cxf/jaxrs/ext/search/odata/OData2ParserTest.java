begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|odata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|OData2ParserTest
extends|extends
name|Assert
block|{
specifier|private
name|OData2Parser
argument_list|<
name|Person
argument_list|>
name|parser
decl_stmt|;
specifier|public
specifier|static
class|class
name|Person
block|{
specifier|private
name|String
name|firstName
decl_stmt|;
specifier|private
name|String
name|lastName
decl_stmt|;
specifier|private
name|int
name|age
decl_stmt|;
specifier|public
name|Person
parameter_list|()
block|{         }
specifier|public
name|Person
parameter_list|(
specifier|final
name|String
name|firstName
parameter_list|,
specifier|final
name|String
name|lastName
parameter_list|)
block|{
name|this
operator|.
name|firstName
operator|=
name|firstName
expr_stmt|;
name|this
operator|.
name|lastName
operator|=
name|lastName
expr_stmt|;
block|}
specifier|public
name|void
name|setFirstName
parameter_list|(
name|String
name|firstName
parameter_list|)
block|{
name|this
operator|.
name|firstName
operator|=
name|firstName
expr_stmt|;
block|}
specifier|public
name|void
name|setLastName
parameter_list|(
name|String
name|lastName
parameter_list|)
block|{
name|this
operator|.
name|lastName
operator|=
name|lastName
expr_stmt|;
block|}
specifier|public
name|String
name|getFirstName
parameter_list|()
block|{
return|return
name|firstName
return|;
block|}
specifier|public
name|String
name|getLastName
parameter_list|()
block|{
return|return
name|lastName
return|;
block|}
specifier|public
name|int
name|getAge
parameter_list|()
block|{
return|return
name|age
return|;
block|}
specifier|public
name|void
name|setAge
parameter_list|(
name|int
name|age
parameter_list|)
block|{
name|this
operator|.
name|age
operator|=
name|age
expr_stmt|;
block|}
name|Person
name|withAge
parameter_list|(
name|int
name|newAge
parameter_list|)
block|{
name|setAge
argument_list|(
name|newAge
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|parser
operator|=
operator|new
name|OData2Parser
argument_list|<
name|Person
argument_list|>
argument_list|(
name|Person
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterByFirstNameEqualsValue
parameter_list|()
throws|throws
name|SearchParseException
block|{
name|SearchCondition
argument_list|<
name|Person
argument_list|>
name|filter
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"FirstName eq 'Tom'"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Tom"
argument_list|,
literal|"Bombadil"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Peter"
argument_list|,
literal|"Bombadil"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterByFirstAndLastNameEqualValue
parameter_list|()
throws|throws
name|SearchParseException
block|{
name|SearchCondition
argument_list|<
name|Person
argument_list|>
name|filter
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"FirstName eq 'Tom' and LastName eq 'Bombadil'"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Tom"
argument_list|,
literal|"Bombadil"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Peter"
argument_list|,
literal|"Bombadil"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterByFirstOrLastNameEqualValue
parameter_list|()
throws|throws
name|SearchParseException
block|{
name|SearchCondition
argument_list|<
name|Person
argument_list|>
name|filter
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"FirstName eq 'Tom' or FirstName eq 'Peter' and LastName eq 'Bombadil'"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Tom"
argument_list|,
literal|"Bombadil"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Peter"
argument_list|,
literal|"Bombadil"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterByFirstAndLastNameEqualValueWithAlternative
parameter_list|()
throws|throws
name|SearchParseException
block|{
name|SearchCondition
argument_list|<
name|Person
argument_list|>
name|filter
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(FirstName eq 'Tom' and LastName eq 'Tommyknocker')"
operator|+
literal|" or (FirstName eq 'Peter' and LastName eq 'Bombadil')"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Tom"
argument_list|,
literal|"Tommyknocker"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Peter"
argument_list|,
literal|"Bombadil"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Tom"
argument_list|,
literal|"Bombadil"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterByValueEqualsFirstName
parameter_list|()
throws|throws
name|SearchParseException
block|{
name|SearchCondition
argument_list|<
name|Person
argument_list|>
name|filter
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"'Tom' eq FirstName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Tom"
argument_list|,
literal|"Bombadil"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterByAgeGreatThanValue
parameter_list|()
throws|throws
name|SearchParseException
block|{
name|SearchCondition
argument_list|<
name|Person
argument_list|>
name|filter
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"Age gt 17"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Tom"
argument_list|,
literal|"Bombadil"
argument_list|)
operator|.
name|withAge
argument_list|(
literal|18
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isMet
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Tom"
argument_list|,
literal|"Bombadil"
argument_list|)
operator|.
name|withAge
argument_list|(
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

