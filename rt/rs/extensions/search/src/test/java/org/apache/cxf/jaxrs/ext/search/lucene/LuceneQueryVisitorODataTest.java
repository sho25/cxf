begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchConditionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|odata
operator|.
name|ODataParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneQueryVisitorODataTest
extends|extends
name|AbstractLuceneQueryVisitorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTextContentMatch
argument_list|(
literal|"ct eq 'text'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchNotEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"ct ne 'text'"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchNotEqualPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"ct ne 'bar'"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchWildcardEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTextContentMatch
argument_list|(
literal|"ct eq 'tex*'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchWildcardStart
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTextContentMatch
argument_list|(
literal|"ct eq '*ext'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreater
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntContentMatch
argument_list|(
literal|"ct gt 3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreaterWithClassFiled
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithFieldClass
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct gt 3"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreaterNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct gt 5"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreaterOrEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntContentMatch
argument_list|(
literal|"ct ge 4"
argument_list|)
expr_stmt|;
name|doTestIntContentMatch
argument_list|(
literal|"ct ge 3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchGreaterOrEqualNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct ge 5"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchLess
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntContentMatch
argument_list|(
literal|"ct lt 5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchLessNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct lt 3"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchLessOrEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntContentMatch
argument_list|(
literal|"ct le 4"
argument_list|)
expr_stmt|;
name|doTestIntContentMatch
argument_list|(
literal|"ct le 5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchLessOrEqualNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct le 3"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntContentMatchEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithFieldClass
argument_list|(
literal|"intfield"
argument_list|,
literal|"ct eq 4"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextAndContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents eq 'name' and contents eq 'text'"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextAndContentNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents eq 'bar' and contents eq 'text'"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextOrContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents eq 'bar' or contents eq 'text'"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextOrContentNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"contents eq 'bar' or contents eq 'foo'"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntAndTextContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQueryWithFieldClass
argument_list|(
literal|"intfield eq 4 and contents eq 'text'"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntAndTextContentNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield eq 3 and contents eq 'text'"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntOrTextContentMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield eq 3 or contents eq 'text'"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|doTestIntContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntOrTextContentNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createTermQuery
argument_list|(
literal|"intfield eq 3 or contents eq 'bar'"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchEqualPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createPhraseQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"name eq 'text'"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchNotEqualPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createPhraseQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"name ne 'text'"
argument_list|)
decl_stmt|;
name|doTestNoMatch
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextContentMatchEqualPhraseWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createPhraseQuery
argument_list|(
literal|"contents"
argument_list|,
literal|"name eq 'tex*'"
argument_list|)
decl_stmt|;
name|doTestTextContentMatchWithQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|SearchConditionParser
argument_list|<
name|SearchBean
argument_list|>
name|getParser
parameter_list|()
block|{
return|return
operator|new
name|ODataParser
argument_list|<
name|SearchBean
argument_list|>
argument_list|(
name|SearchBean
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

