begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|provider
operator|.
name|xmlbeans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlObject
import|;
end_import

begin_comment
comment|/**  * Serializes an XMLBean data object to an XML stream Note: uses an intermediate file created by  * File.createTempFile(String, String) as I couldn't work out how to fit a normal stream into an event driven  * XML stream.  */
end_comment

begin_class
specifier|public
class|class
name|XMLBeanStreamSerializer
block|{
comment|/**      * Serialize the given XML data object. Writes the data object to a temporary file then reads it back in      * with an<code>XMLStreamReader<code>.       *  This allows the events from the reader to drive the output to the<code>XMLStreamWriter</code>.      *  Probably not the best way to do this.      *       * @param obj      * @param writer      */
specifier|public
name|void
name|serialize
parameter_list|(
name|XmlObject
name|xObj
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|IOException
throws|,
name|XMLStreamException
block|{
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// create tmp file
name|tmpFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|xObj
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
comment|// TODO may need to set some XMLOptions here
comment|// write to tmp file
name|xObj
operator|.
name|save
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|InputStream
name|tmpIn
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|XMLStreamReader
name|rdr
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|tmpIn
argument_list|)
decl_stmt|;
while|while
condition|(
name|rdr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|event
init|=
name|rdr
operator|.
name|next
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
case|:
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
case|:
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
name|String
name|name
init|=
name|rdr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// handle attributes
name|int
name|attrCount
init|=
name|rdr
operator|.
name|getAttributeCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attrName
init|=
name|rdr
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attrNS
init|=
name|rdr
operator|.
name|getAttributeNamespace
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attrVal
init|=
name|rdr
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrNS
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|attrName
argument_list|,
name|attrVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|attrNS
argument_list|,
name|attrName
argument_list|,
name|attrVal
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
case|:
comment|// do nothing
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
name|String
name|txt
init|=
name|rdr
operator|.
name|getText
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|txt
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// ignore
break|break;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|tmpFile
operator|!=
literal|null
operator|&&
name|tmpFile
operator|.
name|exists
argument_list|()
operator|&&
name|tmpFile
operator|.
name|canWrite
argument_list|()
condition|)
block|{
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

