begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|dom4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotAcceptableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotSupportedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|AbstractConfigurableProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
annotation|@
name|Produces
argument_list|(
block|{
literal|"application/xml"
block|,
literal|"application/*+xml"
block|,
literal|"text/xml"
block|,
literal|"application/json"
block|,
literal|"application/*+json"
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"application/xml"
block|,
literal|"application/*+xml"
block|,
literal|"text/xml"
block|,
literal|"application/json"
block|,
literal|"application/*+json"
block|}
argument_list|)
specifier|public
class|class
name|DOM4JProvider
extends|extends
name|AbstractConfigurableProvider
implements|implements
name|MessageBodyReader
argument_list|<
name|org
operator|.
name|dom4j
operator|.
name|Document
argument_list|>
implements|,
name|MessageBodyWriter
argument_list|<
name|org
operator|.
name|dom4j
operator|.
name|Document
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
argument_list|>
name|DOM_DOC_CLS
init|=
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
operator|.
name|class
decl_stmt|;
specifier|private
name|Providers
name|providers
decl_stmt|;
annotation|@
name|Context
specifier|public
name|void
name|setProviders
parameter_list|(
name|Providers
name|providers
parameter_list|)
block|{
name|this
operator|.
name|providers
operator|=
name|providers
expr_stmt|;
block|}
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|dom4j
operator|.
name|Document
name|readFrom
parameter_list|(
name|Class
argument_list|<
name|org
operator|.
name|dom4j
operator|.
name|Document
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|MessageBodyReader
argument_list|<
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
argument_list|>
name|reader
init|=
name|providers
operator|.
name|getMessageBodyReader
argument_list|(
name|DOM_DOC_CLS
argument_list|,
name|DOM_DOC_CLS
argument_list|,
name|anns
argument_list|,
name|mt
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotSupportedException
argument_list|()
throw|;
block|}
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|domDoc
init|=
name|reader
operator|.
name|readFrom
argument_list|(
name|DOM_DOC_CLS
argument_list|,
name|DOM_DOC_CLS
argument_list|,
name|anns
argument_list|,
name|mt
argument_list|,
name|headers
argument_list|,
name|is
argument_list|)
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|DOMReader
argument_list|()
operator|.
name|read
argument_list|(
name|domDoc
argument_list|)
return|;
block|}
specifier|public
name|long
name|getSize
parameter_list|(
name|org
operator|.
name|dom4j
operator|.
name|Document
name|doc
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|org
operator|.
name|dom4j
operator|.
name|Document
name|doc
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
if|if
condition|(
name|mt
operator|.
name|getSubtype
argument_list|()
operator|.
name|contains
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
name|writer
init|=
operator|new
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|domDoc
init|=
name|convertToDOM
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|MessageBodyWriter
argument_list|<
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
argument_list|>
name|writer
init|=
name|providers
operator|.
name|getMessageBodyWriter
argument_list|(
name|DOM_DOC_CLS
argument_list|,
name|DOM_DOC_CLS
argument_list|,
name|anns
argument_list|,
name|mt
argument_list|)
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotAcceptableException
argument_list|()
throw|;
block|}
name|writer
operator|.
name|writeTo
argument_list|(
name|domDoc
argument_list|,
name|DOM_DOC_CLS
argument_list|,
name|DOM_DOC_CLS
argument_list|,
name|anns
argument_list|,
name|mt
argument_list|,
name|headers
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|convertToDOM
parameter_list|(
name|org
operator|.
name|dom4j
operator|.
name|Document
name|doc
parameter_list|)
block|{
name|String
name|xml
init|=
name|doc
operator|.
name|asXML
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|StaxUtils
operator|.
name|read
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|InternalServerErrorException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

