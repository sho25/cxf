begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionStage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|bind
operator|.
name|Jsonb
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|bind
operator|.
name|spi
operator|.
name|JsonbProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ContextResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ProviderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_class
annotation|@
name|Produces
argument_list|(
block|{
literal|"*/*"
block|,
literal|"application/json"
block|,
literal|"application/*+json"
block|}
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|,
literal|"application/json"
block|,
literal|"application/*+json"
block|}
argument_list|)
annotation|@
name|Provider
specifier|public
class|class
name|JSONBProvider
implements|implements
name|MessageBodyWriter
argument_list|<
name|Object
argument_list|>
implements|,
name|MessageBodyReader
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JSONBProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Jsonb
name|jsonb
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|contextResolvers
decl_stmt|;
specifier|public
name|JSONBProvider
parameter_list|(
name|ProviderFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|contextResolvers
operator|=
name|factory
operator|.
name|getContextResolvers
argument_list|()
expr_stmt|;
try|try
block|{
name|JsonbProvider
name|provider
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|JsonbProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonbProvider
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first try thread context classloader
name|Iterator
argument_list|<
name|JsonbProvider
argument_list|>
name|providers
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|JsonbProvider
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|providers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|providers
operator|.
name|next
argument_list|()
return|;
block|}
comment|// next try this classloader
name|providers
operator|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|JsonbProvider
operator|.
name|class
argument_list|,
name|JSONBProvider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|providers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|providers
operator|.
name|next
argument_list|()
return|;
block|}
name|LOG
operator|.
name|warning
argument_list|(
parameter_list|()
lambda|->
block|{
return|return
literal|"Cannot find a suitable JSON-B Provider"
return|;
block|}
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot find a suitable JSON-B Provider"
argument_list|)
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|jsonb
operator|=
name|provider
operator|.
name|create
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|jsonb
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|ex
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|t
throw|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
operator|!
name|isJSONPClass
argument_list|(
name|type
argument_list|)
operator|&&
name|isJsonType
argument_list|(
name|mediaType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readFrom
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|clazz
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|,
name|InputStream
name|entityStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|Object
name|obj
init|=
literal|null
decl_stmt|;
comment|// For most generic return types, we want to use the genericType so as to ensure
comment|// that the generic value is not lost on conversion - specifically in collections.
comment|// But for CompletionStage<SomeType> we want to use clazz to pull the right value
comment|// - and then client code will handle the result, storing it in the CompletionStage.
if|if
condition|(
operator|(
name|genericType
operator|instanceof
name|ParameterizedType
operator|)
operator|&&
name|CompletionStage
operator|.
name|class
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|genericType
operator|)
operator|.
name|getRawType
argument_list|()
argument_list|)
condition|)
block|{
name|obj
operator|=
name|getJsonb
argument_list|()
operator|.
name|fromJson
argument_list|(
name|entityStream
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|obj
operator|=
name|getJsonb
argument_list|()
operator|.
name|fromJson
argument_list|(
name|entityStream
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
operator|!
name|isJSONPClass
argument_list|(
name|type
argument_list|)
operator|&&
name|isJsonType
argument_list|(
name|mediaType
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isJSONPClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|jsonpClasses
init|=
operator|new
name|String
index|[]
block|{
literal|"javax.json.JsonArray"
block|,
literal|"javax.json.JsonObject"
block|,
literal|"javax.json.JsonStructure"
block|}
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|jsonpClasses
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isJsonType
parameter_list|(
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|mediaType
operator|.
name|getSubtype
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"json"
argument_list|)
operator|||
name|mediaType
operator|.
name|getSubtype
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"+json"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|,
name|OutputStream
name|entityStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|getJsonb
argument_list|()
operator|.
name|toJson
argument_list|(
name|obj
argument_list|,
name|entityStream
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Jsonb
name|getJsonb
parameter_list|()
block|{
for|for
control|(
name|ProviderInfo
argument_list|<
name|ContextResolver
argument_list|<
name|?
argument_list|>
argument_list|>
name|crPi
range|:
name|contextResolvers
control|)
block|{
name|ContextResolver
argument_list|<
name|?
argument_list|>
name|cr
init|=
name|crPi
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|cr
operator|.
name|getContext
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Jsonb
condition|)
block|{
return|return
operator|(
name|Jsonb
operator|)
name|o
return|;
block|}
block|}
return|return
name|this
operator|.
name|jsonb
return|;
block|}
block|}
end_class

end_unit

