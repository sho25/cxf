begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|dom4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|SequenceInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|ProvidersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ServerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|json
operator|.
name|JSONProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DOM4JProviderTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testReadXML
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|str
init|=
name|readXML
argument_list|()
operator|.
name|asXML
argument_list|()
decl_stmt|;
comment|// starts with the xml PI
name|assertTrue
argument_list|(
name|str
operator|.
name|contains
argument_list|(
literal|"<a/>"
argument_list|)
operator|||
name|str
operator|.
name|contains
argument_list|(
literal|"<a></a>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadXMLWithBom
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|str
init|=
name|readXMLBom
argument_list|()
operator|.
name|asXML
argument_list|()
decl_stmt|;
comment|// starts with the xml PI
name|assertTrue
argument_list|(
name|str
operator|.
name|contains
argument_list|(
literal|"<a/>"
argument_list|)
operator|||
name|str
operator|.
name|contains
argument_list|(
literal|"<a></a>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|org
operator|.
name|dom4j
operator|.
name|Document
name|readXML
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|readXML
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
literal|"<a/>"
argument_list|)
return|;
block|}
specifier|private
name|org
operator|.
name|dom4j
operator|.
name|Document
name|readXMLBom
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bom
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|239
block|,
operator|(
name|byte
operator|)
literal|187
block|,
operator|(
name|byte
operator|)
literal|191
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"efbbbf"
argument_list|,
name|StringUtils
operator|.
name|toHexString
argument_list|(
name|bom
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|strBytes
init|=
literal|"<a/>"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|SequenceInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bom
argument_list|)
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|strBytes
argument_list|)
argument_list|)
decl_stmt|;
name|DOM4JProvider
name|p
init|=
operator|new
name|DOM4JProvider
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProviders
argument_list|(
operator|new
name|ProvidersImpl
argument_list|(
name|createMessage
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|dom4j
operator|.
name|Document
name|dom
init|=
name|p
operator|.
name|readFrom
argument_list|(
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"text/xml;a=b"
argument_list|)
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|is
argument_list|)
decl_stmt|;
return|return
name|dom
return|;
block|}
specifier|private
name|org
operator|.
name|dom4j
operator|.
name|Document
name|readXML
parameter_list|(
name|MediaType
name|ct
parameter_list|,
specifier|final
name|String
name|xml
parameter_list|)
throws|throws
name|Exception
block|{
name|DOM4JProvider
name|p
init|=
operator|new
name|DOM4JProvider
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProviders
argument_list|(
operator|new
name|ProvidersImpl
argument_list|(
name|createMessage
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|dom4j
operator|.
name|Document
name|dom
init|=
name|p
operator|.
name|readFrom
argument_list|(
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|ct
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|dom
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadJSONConvertToXML
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|xml
init|=
literal|"{\"a\":{\"b\":2}}"
decl_stmt|;
name|DOM4JProvider
name|p
init|=
operator|new
name|DOM4JProvider
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProviders
argument_list|(
operator|new
name|ProvidersImpl
argument_list|(
name|createMessage
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|dom4j
operator|.
name|Document
name|dom
init|=
name|p
operator|.
name|readFrom
argument_list|(
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|str
init|=
name|dom
operator|.
name|asXML
argument_list|()
decl_stmt|;
comment|// starts with the xml PI
name|assertTrue
argument_list|(
name|str
operator|.
name|contains
argument_list|(
literal|"<a><b>2</b></a>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteXML
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestWriteXML
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteXMLCustomCt
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestWriteXML
argument_list|(
name|MediaType
operator|.
name|valueOf
argument_list|(
literal|"application/custom+xml"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteXMLAsDOMW3C
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestWriteXML
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteXMLSuppressDeclaration
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|dom4j
operator|.
name|Document
name|dom
init|=
name|readXML
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
literal|"<a/>"
argument_list|)
decl_stmt|;
specifier|final
name|Message
name|message
init|=
name|createMessage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Providers
name|providers
init|=
operator|new
name|ProvidersImpl
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|DOM4JProvider
name|p
init|=
operator|new
name|DOM4JProvider
argument_list|()
block|{
specifier|protected
name|Message
name|getCurrentMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
block|}
decl_stmt|;
name|p
operator|.
name|setProviders
argument_list|(
name|providers
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|dom
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|bos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"<?xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
operator|.
name|contains
argument_list|(
literal|"<a/>"
argument_list|)
operator|||
name|str
operator|.
name|contains
argument_list|(
literal|"<a></a>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestWriteXML
parameter_list|(
name|MediaType
name|ct
parameter_list|,
name|boolean
name|convert
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|dom4j
operator|.
name|Document
name|dom
init|=
name|readXML
argument_list|(
name|ct
argument_list|,
literal|"<a/>"
argument_list|)
decl_stmt|;
specifier|final
name|Message
name|message
init|=
name|createMessage
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Providers
name|providers
init|=
operator|new
name|ProvidersImpl
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|DOM4JProvider
name|p
init|=
operator|new
name|DOM4JProvider
argument_list|()
block|{
specifier|protected
name|Message
name|getCurrentMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
block|}
decl_stmt|;
name|p
operator|.
name|setProviders
argument_list|(
name|providers
argument_list|)
expr_stmt|;
name|p
operator|.
name|convertToDOMAlways
argument_list|(
name|convert
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|dom
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|ct
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|bos
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|convert
condition|)
block|{
name|assertFalse
argument_list|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"<?xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"<?xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|str
operator|.
name|contains
argument_list|(
literal|"<a/>"
argument_list|)
operator|||
name|str
operator|.
name|contains
argument_list|(
literal|"<a></a>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|dom4j
operator|.
name|Document
name|dom
init|=
name|readXML
argument_list|()
decl_stmt|;
name|DOM4JProvider
name|p
init|=
operator|new
name|DOM4JProvider
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProviders
argument_list|(
operator|new
name|ProvidersImpl
argument_list|(
name|createMessage
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|dom
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|bos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"a\":\"\"}"
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteJSONDropRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|dom4j
operator|.
name|Document
name|dom
init|=
name|readXML
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
literal|"<root><a/></root>"
argument_list|)
decl_stmt|;
name|DOM4JProvider
name|p
init|=
operator|new
name|DOM4JProvider
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProviders
argument_list|(
operator|new
name|ProvidersImpl
argument_list|(
name|createMessageWithJSONProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|dom
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|bos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"a\":\"\"}"
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteJSONAsArray
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|dom4j
operator|.
name|Document
name|dom
init|=
name|readXML
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
literal|"<root><a>1</a></root>"
argument_list|)
decl_stmt|;
name|DOM4JProvider
name|p
init|=
operator|new
name|DOM4JProvider
argument_list|()
decl_stmt|;
name|ProviderFactory
name|factory
init|=
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|JSONProvider
argument_list|<
name|Object
argument_list|>
name|provider
init|=
operator|new
name|JSONProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|provider
operator|.
name|setSerializeAsArray
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setDropRootElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setDropElementsInXmlStream
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setIgnoreNamespaces
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|registerUserProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProviders
argument_list|(
operator|new
name|ProvidersImpl
argument_list|(
name|createMessage
argument_list|(
name|factory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|dom
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
name|org
operator|.
name|dom4j
operator|.
name|Document
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|bos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[{\"a\":1}]"
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Message
name|createMessage
parameter_list|(
name|boolean
name|suppress
parameter_list|)
block|{
name|ProviderFactory
name|factory
init|=
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.http.case_insensitive_queries"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Exchange
name|e
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|e
operator|.
name|put
argument_list|(
name|DOM4JProvider
operator|.
name|SUPPRESS_XML_DECLARATION
argument_list|,
name|suppress
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|setInMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|get
argument_list|(
name|Application
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|size
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|0
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|get
argument_list|(
name|ServerProviderFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|factory
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|e
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|private
name|Message
name|createMessageWithJSONProvider
parameter_list|()
block|{
name|ProviderFactory
name|factory
init|=
name|ServerProviderFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|JSONProvider
argument_list|<
name|Object
argument_list|>
name|provider
init|=
operator|new
name|JSONProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|provider
operator|.
name|setDropRootElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setIgnoreNamespaces
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|registerUserProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
return|return
name|createMessage
argument_list|(
name|factory
argument_list|)
return|;
block|}
specifier|private
name|Message
name|createMessage
parameter_list|(
name|ProviderFactory
name|factory
parameter_list|)
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.http.case_insensitive_queries"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Exchange
name|e
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|setInMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|get
argument_list|(
name|Application
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|size
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|0
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|get
argument_list|(
name|ServerProviderFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|factory
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|e
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
block|}
end_class

end_unit

