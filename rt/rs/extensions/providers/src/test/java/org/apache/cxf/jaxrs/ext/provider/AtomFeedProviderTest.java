begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Feed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|parser
operator|.
name|stax
operator|.
name|FOMFeed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AtomFeedProviderTest
extends|extends
name|Assert
block|{
specifier|private
name|AtomFeedProvider
name|afd
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|afd
operator|=
operator|new
name|AtomFeedProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"atomFeed.xml"
argument_list|)
decl_stmt|;
name|Feed
name|simple
init|=
name|afd
operator|.
name|readFrom
argument_list|(
name|Feed
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong feed title"
argument_list|,
literal|"Example Feed"
argument_list|,
name|simple
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWriteTo
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"atomFeed.xml"
argument_list|)
decl_stmt|;
name|Feed
name|simple
init|=
name|afd
operator|.
name|readFrom
argument_list|(
name|Feed
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|afd
operator|.
name|writeTo
argument_list|(
name|simple
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Feed
name|simpleCopy
init|=
name|afd
operator|.
name|readFrom
argument_list|(
name|Feed
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bis
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong entry title"
argument_list|,
literal|"Example Feed"
argument_list|,
name|simpleCopy
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong entry title"
argument_list|,
name|simple
operator|.
name|getTitle
argument_list|()
argument_list|,
name|simpleCopy
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteable
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|afd
operator|.
name|isWriteable
argument_list|(
name|Feed
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|afd
operator|.
name|isWriteable
argument_list|(
name|FOMFeed
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|afd
operator|.
name|isWriteable
argument_list|(
name|Entry
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadable
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|afd
operator|.
name|isReadable
argument_list|(
name|Feed
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|afd
operator|.
name|isReadable
argument_list|(
name|FOMFeed
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|afd
operator|.
name|isReadable
argument_list|(
name|Entry
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnnotations
parameter_list|()
block|{
name|String
index|[]
name|values
init|=
name|afd
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Produces
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3 types can be produced"
argument_list|,
literal|3
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"application/atom+xml"
operator|.
name|equals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
operator|&&
literal|"application/atom+xml;type=feed"
operator|.
name|equals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
operator|&&
literal|"application/json"
operator|.
name|equals
argument_list|(
name|values
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
name|afd
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Consumes
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 types can be consumed"
argument_list|,
literal|2
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"application/atom+xml"
operator|.
name|equals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
operator|&&
literal|"application/atom+xml;type=feed"
operator|.
name|equals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

