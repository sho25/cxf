begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|jsrjsonp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|Json
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonStructure
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|JsrJsonpProviderTest
block|{
specifier|private
name|JsrJsonpProvider
name|provider
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|provider
operator|=
operator|new
name|JsrJsonpProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testReadWithNullStream
parameter_list|()
throws|throws
name|Exception
block|{
name|provider
operator|.
name|readFrom
argument_list|(
name|JsonStructure
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSizeReturnsMinusOne
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|provider
operator|.
name|getSize
argument_list|(
literal|null
argument_list|,
name|JsonStructure
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadableTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|provider
operator|.
name|isReadable
argument_list|(
name|JsonArray
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|provider
operator|.
name|isReadable
argument_list|(
name|JsonStructure
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|provider
operator|.
name|isReadable
argument_list|(
name|JsonObject
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|provider
operator|.
name|isReadable
argument_list|(
name|JsonValue
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWritableTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|provider
operator|.
name|isWriteable
argument_list|(
name|JsonArray
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|provider
operator|.
name|isWriteable
argument_list|(
name|JsonStructure
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|provider
operator|.
name|isWriteable
argument_list|(
name|JsonObject
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|provider
operator|.
name|isWriteable
argument_list|(
name|JsonValue
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWriteWithNullStream
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JsonObject
name|obj
init|=
name|Json
operator|.
name|createObjectBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"firstName"
argument_list|,
literal|"Tom"
argument_list|)
operator|.
name|add
argument_list|(
literal|"lastName"
argument_list|,
literal|"Tommyknocker"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|provider
operator|.
name|writeTo
argument_list|(
name|obj
argument_list|,
name|JsonObject
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadMalformedJson
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
literal|"junk"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
try|try
block|{
name|provider
operator|.
name|readFrom
argument_list|(
name|JsonStructure
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"400 BAD REQUEST is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebApplicationException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadJsonObject
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Json
operator|.
name|createGenerator
argument_list|(
name|writer
argument_list|)
operator|.
name|writeStartObject
argument_list|()
operator|.
name|write
argument_list|(
literal|"firstName"
argument_list|,
literal|"Tom"
argument_list|)
operator|.
name|write
argument_list|(
literal|"lastName"
argument_list|,
literal|"Tommyknocker"
argument_list|)
operator|.
name|writeEnd
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|String
name|str
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|JsonStructure
name|obj
init|=
name|provider
operator|.
name|readFrom
argument_list|(
name|JsonStructure
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|obj
argument_list|,
name|instanceOf
argument_list|(
name|JsonObject
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|JsonObject
operator|)
name|obj
operator|)
operator|.
name|getString
argument_list|(
literal|"firstName"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Tom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|JsonObject
operator|)
name|obj
operator|)
operator|.
name|getString
argument_list|(
literal|"lastName"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Tommyknocker"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadJsonArray
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Json
operator|.
name|createGenerator
argument_list|(
name|writer
argument_list|)
operator|.
name|writeStartArray
argument_list|()
operator|.
name|write
argument_list|(
literal|"Tom"
argument_list|)
operator|.
name|write
argument_list|(
literal|"Tommyknocker"
argument_list|)
operator|.
name|writeEnd
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|JsonStructure
name|obj
init|=
name|provider
operator|.
name|readFrom
argument_list|(
name|JsonStructure
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|obj
argument_list|,
name|instanceOf
argument_list|(
name|JsonArray
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|JsonArray
operator|)
name|obj
operator|)
operator|.
name|getString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Tom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|JsonArray
operator|)
name|obj
operator|)
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Tommyknocker"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|JsonArray
operator|)
name|obj
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteJsonObject
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JsonObject
name|obj
init|=
name|Json
operator|.
name|createObjectBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"firstName"
argument_list|,
literal|"Tom"
argument_list|)
operator|.
name|add
argument_list|(
literal|"lastName"
argument_list|,
literal|"Tommyknocker"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|provider
operator|.
name|writeTo
argument_list|(
name|obj
argument_list|,
name|JsonStructure
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\"firstName\":\"Tom\",\"lastName\":\"Tommyknocker\"}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteJsonArray
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JsonArray
name|obj
init|=
name|Json
operator|.
name|createArrayBuilder
argument_list|()
operator|.
name|add
argument_list|(
name|Json
operator|.
name|createObjectBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"firstName"
argument_list|,
literal|"Tom"
argument_list|)
operator|.
name|add
argument_list|(
literal|"lastName"
argument_list|,
literal|"Tommyknocker"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Json
operator|.
name|createObjectBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"firstName"
argument_list|,
literal|"Bob"
argument_list|)
operator|.
name|add
argument_list|(
literal|"lastName"
argument_list|,
literal|"Bobbyknocker"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|provider
operator|.
name|writeTo
argument_list|(
name|obj
argument_list|,
name|JsonStructure
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"[{\"firstName\":\"Tom\",\"lastName\":\"Tommyknocker\"},"
operator|+
literal|"{\"firstName\":\"Bob\",\"lastName\":\"Bobbyknocker\"}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

