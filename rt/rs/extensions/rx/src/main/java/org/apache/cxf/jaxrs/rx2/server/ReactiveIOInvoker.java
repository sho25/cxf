begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|rx2
operator|.
name|server
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSInvoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|AsyncResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|reactivestreams
operator|.
name|server
operator|.
name|JsonStreamingAsyncSubscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|Flowable
import|;
end_import

begin_import
import|import
name|io
operator|.
name|reactivex
operator|.
name|Observable
import|;
end_import

begin_comment
comment|//Work in Progress
end_comment

begin_class
specifier|public
class|class
name|ReactiveIOInvoker
extends|extends
name|JAXRSInvoker
block|{
specifier|private
name|boolean
name|useStreamingSubscriberIfPossible
decl_stmt|;
specifier|protected
name|AsyncResponseImpl
name|checkFutureResponse
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|Flowable
condition|)
block|{
return|return
name|handleFlowable
argument_list|(
name|inMessage
argument_list|,
operator|(
name|Flowable
argument_list|<
name|?
argument_list|>
operator|)
name|result
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|Observable
condition|)
block|{
return|return
name|handleObservable
argument_list|(
name|inMessage
argument_list|,
operator|(
name|Observable
argument_list|<
name|?
argument_list|>
operator|)
name|result
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|AsyncResponseImpl
name|handleFlowable
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Flowable
argument_list|<
name|?
argument_list|>
name|f
parameter_list|)
block|{
specifier|final
name|AsyncResponseImpl
name|asyncResponse
init|=
operator|new
name|AsyncResponseImpl
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUseStreamingSubscriberIfPossible
argument_list|()
operator|&&
name|isJsonResponse
argument_list|(
name|inMessage
argument_list|)
condition|)
block|{
name|f
operator|.
name|subscribe
argument_list|(
operator|new
name|JsonStreamingAsyncSubscriber
argument_list|<>
argument_list|(
name|asyncResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|.
name|subscribe
argument_list|(
name|v
lambda|->
name|asyncResponse
operator|.
name|resume
argument_list|(
name|v
argument_list|)
argument_list|,
name|t
lambda|->
name|handleThrowable
argument_list|(
name|asyncResponse
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|asyncResponse
return|;
block|}
specifier|protected
name|boolean
name|isJsonResponse
parameter_list|(
name|Message
name|inMessage
parameter_list|)
block|{
return|return
name|MediaType
operator|.
name|APPLICATION_JSON
operator|.
name|equals
argument_list|(
name|inMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|AsyncResponseImpl
name|handleObservable
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Observable
argument_list|<
name|?
argument_list|>
name|obs
parameter_list|)
block|{
specifier|final
name|AsyncResponseImpl
name|asyncResponse
init|=
operator|new
name|AsyncResponseImpl
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|obs
operator|.
name|subscribe
argument_list|(
name|v
lambda|->
name|asyncResponse
operator|.
name|resume
argument_list|(
name|v
argument_list|)
argument_list|,
name|t
lambda|->
name|handleThrowable
argument_list|(
name|asyncResponse
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|asyncResponse
return|;
block|}
specifier|private
name|Object
name|handleThrowable
parameter_list|(
name|AsyncResponseImpl
name|asyncResponse
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
comment|//TODO: if it is a Cancelation exception => asyncResponse.cancel();
name|asyncResponse
operator|.
name|resume
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isUseStreamingSubscriberIfPossible
parameter_list|()
block|{
return|return
name|useStreamingSubscriberIfPossible
return|;
block|}
specifier|public
name|void
name|setUseStreamingSubscriberIfPossible
parameter_list|(
name|boolean
name|useStreamingSubscriberIfPossible
parameter_list|)
block|{
name|this
operator|.
name|useStreamingSubscriberIfPossible
operator|=
name|useStreamingSubscriberIfPossible
expr_stmt|;
block|}
block|}
end_class

end_unit

