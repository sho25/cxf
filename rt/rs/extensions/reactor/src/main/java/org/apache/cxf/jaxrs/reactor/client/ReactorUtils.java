begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|reactor
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_class
specifier|final
class|class
name|ReactorUtils
block|{
specifier|static
specifier|final
name|String
name|TRACE
init|=
literal|"TRACE"
decl_stmt|;
specifier|private
name|ReactorUtils
parameter_list|()
block|{      }
specifier|static
parameter_list|<
name|R
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|toCompletableFuture
parameter_list|(
name|Future
argument_list|<
name|R
argument_list|>
name|future
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|Supplier
argument_list|<
name|R
argument_list|>
name|supplier
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CompletionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
name|supplier
argument_list|,
name|executor
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
name|supplier
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

