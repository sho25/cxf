begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|openapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|common
operator|.
name|openapi
operator|.
name|DelegatingServletConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|common
operator|.
name|openapi
operator|.
name|SyntheticServletConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|ContextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|integration
operator|.
name|api
operator|.
name|OpenApiContext
import|;
end_import

begin_class
class|class
name|ServletConfigProvider
implements|implements
name|ContextProvider
argument_list|<
name|ServletConfig
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|contextId
decl_stmt|;
name|ServletConfigProvider
parameter_list|(
name|String
name|contextId
parameter_list|)
block|{
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ServletConfig
name|createContext
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|ServletConfig
name|sc
init|=
operator|(
name|ServletConfig
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"HTTP.CONFIG"
argument_list|)
decl_stmt|;
comment|// When deploying into OSGi container, it is possible to use embedded Jetty
comment|// transport. In this case, the ServletConfig is not available and Swagger
comment|// does not take into account certain configuration parameters. To overcome
comment|// that, the ServletConfig is synthesized from ServletContext instance.
if|if
condition|(
name|sc
operator|==
literal|null
condition|)
block|{
specifier|final
name|ServletContext
name|context
init|=
operator|(
name|ServletContext
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"HTTP.CONTEXT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SyntheticServletConfig
argument_list|(
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getInitParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|OpenApiContext
operator|.
name|OPENAPI_CONTEXT_ID_KEY
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
name|contextId
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|DelegatingServletConfig
argument_list|(
name|sc
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getInitParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|OpenApiContext
operator|.
name|OPENAPI_CONTEXT_ID_KEY
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
name|contextId
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
return|return
name|sc
return|;
block|}
block|}
end_class

end_unit

