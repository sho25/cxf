begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|openapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|DecimalMax
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|DecimalMin
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Max
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Min
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|MatrixParam
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|core
operator|.
name|converter
operator|.
name|ModelConverters
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|core
operator|.
name|converter
operator|.
name|ResolvedSchema
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|jaxrs2
operator|.
name|ResolvedParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|jaxrs2
operator|.
name|ext
operator|.
name|AbstractOpenAPIExtension
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|jaxrs2
operator|.
name|ext
operator|.
name|OpenAPIExtension
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|models
operator|.
name|Components
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|models
operator|.
name|media
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|models
operator|.
name|parameters
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|v3
operator|.
name|oas
operator|.
name|models
operator|.
name|parameters
operator|.
name|PathParameter
import|;
end_import

begin_comment
comment|/**  * Adds matrix parameters support.  */
end_comment

begin_class
specifier|public
class|class
name|JaxRs2Extension
extends|extends
name|AbstractOpenAPIExtension
block|{
annotation|@
name|Override
specifier|public
name|ResolvedParameter
name|extractParameters
parameter_list|(
specifier|final
name|List
argument_list|<
name|Annotation
argument_list|>
name|annotations
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|,
specifier|final
name|Set
argument_list|<
name|Type
argument_list|>
name|typesToSkip
parameter_list|,
specifier|final
name|Components
name|components
parameter_list|,
specifier|final
name|Consumes
name|classConsumes
parameter_list|,
specifier|final
name|Consumes
name|methodConsumes
parameter_list|,
specifier|final
name|boolean
name|includeRequestBody
parameter_list|,
specifier|final
name|Iterator
argument_list|<
name|OpenAPIExtension
argument_list|>
name|chain
parameter_list|)
block|{
if|if
condition|(
name|shouldIgnoreType
argument_list|(
name|type
argument_list|,
name|typesToSkip
argument_list|)
condition|)
block|{
return|return
operator|new
name|ResolvedParameter
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
name|annotations
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|annotation
lambda|->
name|annotation
operator|instanceof
name|MatrixParam
argument_list|)
operator|.
name|map
argument_list|(
name|annotation
lambda|->
block|{
name|MatrixParam
name|param
operator|=
operator|(
name|MatrixParam
operator|)
name|annotation
argument_list|;
name|Parameter
name|mp
operator|=
operator|new
name|PathParameter
argument_list|()
operator|.
name|name
argument_list|(
name|param
operator|.
name|value
argument_list|()
argument_list|)
argument_list|;
name|mp
operator|.
name|setStyle
argument_list|(
name|Parameter
operator|.
name|StyleEnum
operator|.
name|MATRIX
argument_list|)
argument_list|;
name|ResolvedSchema
name|resolvedSchema
operator|=
name|ModelConverters
operator|.
name|getInstance
argument_list|()
operator|.
name|readAllAsResolvedSchema
argument_list|(
name|type
argument_list|)
argument_list|;                     if
operator|(
name|resolvedSchema
operator|!=
literal|null
operator|)
block|{
name|mp
operator|.
name|setSchema
argument_list|(
name|resolvedSchema
operator|.
name|schema
argument_list|)
block|;                     }
name|applyBeanValidatorAnnotations
argument_list|(
name|mp
argument_list|,
name|annotations
argument_list|)
argument_list|;                      return
name|mp
argument_list|;
block|}
block|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
end_class

begin_comment
comment|// Only call down to the other items in the chain if no parameters were produced
end_comment

begin_if
if|if
condition|(
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|extractParameters
argument_list|(
name|annotations
argument_list|,
name|type
argument_list|,
name|typesToSkip
argument_list|,
name|components
argument_list|,
name|classConsumes
argument_list|,
name|methodConsumes
argument_list|,
name|includeRequestBody
argument_list|,
name|chain
argument_list|)
return|;
block|}
end_if

begin_decl_stmt
name|ResolvedParameter
name|resolved
init|=
operator|new
name|ResolvedParameter
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|resolved
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|resolved
return|;
end_return

begin_comment
unit|}
comment|/**      * This is mostly a duplicate of {@link io.swagger.v3.core.jackson.ModelResolver#applyBeanValidatorAnnotations}.      *      * @param parameter      * @param annotations      */
end_comment

begin_function
unit|private
name|void
name|applyBeanValidatorAnnotations
parameter_list|(
specifier|final
name|Parameter
name|parameter
parameter_list|,
specifier|final
name|List
argument_list|<
name|Annotation
argument_list|>
name|annotations
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Annotation
argument_list|>
name|annos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|annotations
operator|!=
literal|null
condition|)
block|{
name|annotations
operator|.
name|forEach
argument_list|(
name|annotation
lambda|->
block|{
name|annos
operator|.
name|put
argument_list|(
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|annotation
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|NotNull
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|parameter
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Schema
argument_list|<
name|?
argument_list|>
name|schema
init|=
name|parameter
operator|.
name|getSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|Min
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Min
name|min
init|=
operator|(
name|Min
operator|)
name|annos
operator|.
name|get
argument_list|(
name|Min
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|setMinimum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|min
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|Max
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Max
name|max
init|=
operator|(
name|Max
operator|)
name|annos
operator|.
name|get
argument_list|(
name|Max
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|setMaximum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|max
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|Size
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Size
name|size
init|=
operator|(
name|Size
operator|)
name|annos
operator|.
name|get
argument_list|(
name|Size
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|setMinimum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|size
operator|.
name|min
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setMaximum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|size
operator|.
name|max
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setMinItems
argument_list|(
name|size
operator|.
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setMaxItems
argument_list|(
name|size
operator|.
name|max
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|DecimalMin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|DecimalMin
name|min
init|=
operator|(
name|DecimalMin
operator|)
name|annos
operator|.
name|get
argument_list|(
name|DecimalMin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|.
name|inclusive
argument_list|()
condition|)
block|{
name|schema
operator|.
name|setMinimum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|new
name|Double
argument_list|(
name|min
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schema
operator|.
name|setExclusiveMinimum
argument_list|(
operator|!
name|min
operator|.
name|inclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|DecimalMax
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|DecimalMax
name|max
init|=
operator|(
name|DecimalMax
operator|)
name|annos
operator|.
name|get
argument_list|(
name|DecimalMax
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|.
name|inclusive
argument_list|()
condition|)
block|{
name|schema
operator|.
name|setMaximum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|new
name|Double
argument_list|(
name|max
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schema
operator|.
name|setExclusiveMaximum
argument_list|(
operator|!
name|max
operator|.
name|inclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|Pattern
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Pattern
name|pattern
init|=
operator|(
name|Pattern
operator|)
name|annos
operator|.
name|get
argument_list|(
name|Pattern
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|setPattern
argument_list|(
name|pattern
operator|.
name|regexp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

