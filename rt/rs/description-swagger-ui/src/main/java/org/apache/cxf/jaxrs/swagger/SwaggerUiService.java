begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"api-docs"
argument_list|)
specifier|public
class|class
name|SwaggerUiService
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FAVICON
init|=
literal|"favicon"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|DEFAULT_MEDIA_TYPES
decl_stmt|;
static|static
block|{
name|DEFAULT_MEDIA_TYPES
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"html"
argument_list|,
literal|"text/html"
argument_list|)
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"png"
argument_list|,
literal|"image/png"
argument_list|)
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"gif"
argument_list|,
literal|"image/gif"
argument_list|)
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"css"
argument_list|,
literal|"text/css"
argument_list|)
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"js"
argument_list|,
literal|"application/javascript"
argument_list|)
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"eot"
argument_list|,
literal|"application/vnd.ms-fontobject"
argument_list|)
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"ttf"
argument_list|,
literal|"application/font-sfnt"
argument_list|)
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"svg"
argument_list|,
literal|"image/svg+xml"
argument_list|)
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"woff"
argument_list|,
literal|"application/font-woff"
argument_list|)
expr_stmt|;
name|DEFAULT_MEDIA_TYPES
operator|.
name|put
argument_list|(
literal|"woff2"
argument_list|,
literal|"application/font-woff2"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|String
name|swaggerUiRoot
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mediaTypes
decl_stmt|;
specifier|public
name|SwaggerUiService
parameter_list|(
name|String
name|swaggerUiRoot
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mediaTypes
parameter_list|)
block|{
name|this
operator|.
name|swaggerUiRoot
operator|=
name|swaggerUiRoot
expr_stmt|;
name|this
operator|.
name|mediaTypes
operator|=
name|mediaTypes
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"{resource:.*}"
argument_list|)
specifier|public
name|Response
name|getResource
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"resource"
argument_list|)
name|String
name|resourcePath
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|resourcePath
argument_list|)
operator|||
literal|"/"
operator|.
name|equals
argument_list|(
name|resourcePath
argument_list|)
condition|)
block|{
name|resourcePath
operator|=
literal|"index.html"
expr_stmt|;
block|}
if|if
condition|(
name|resourcePath
operator|.
name|contains
argument_list|(
name|FAVICON
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
literal|404
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|resourcePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|resourcePath
operator|=
name|resourcePath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|URL
name|resourceURL
init|=
name|URI
operator|.
name|create
argument_list|(
name|swaggerUiRoot
operator|+
name|resourcePath
argument_list|)
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|String
name|mediaType
init|=
literal|null
decl_stmt|;
name|int
name|ind
init|=
name|resourcePath
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind
operator|!=
operator|-
literal|1
operator|&&
name|ind
operator|<
name|resourcePath
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|resourceExt
init|=
name|resourcePath
operator|.
name|substring
argument_list|(
name|ind
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaTypes
operator|!=
literal|null
operator|&&
name|mediaTypes
operator|.
name|containsKey
argument_list|(
name|resourceExt
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|mediaTypes
operator|.
name|get
argument_list|(
name|resourceExt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mediaType
operator|=
name|DEFAULT_MEDIA_TYPES
operator|.
name|get
argument_list|(
name|resourceExt
argument_list|)
expr_stmt|;
block|}
block|}
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
name|resourceURL
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
block|{
name|rb
operator|.
name|type
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
block|}
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

