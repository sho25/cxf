begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Priorities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptorContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * RS CXF Reader Interceptor which extracts signature data from the message and sends it to the message verifier  *  */
end_comment

begin_class
annotation|@
name|Provider
annotation|@
name|Priority
argument_list|(
name|Priorities
operator|.
name|AUTHENTICATION
argument_list|)
specifier|public
class|class
name|VerifySignatureReaderInterceptor
implements|implements
name|ReaderInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|VerifySignatureReaderInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MessageVerifier
name|messageVerifier
decl_stmt|;
specifier|private
name|boolean
name|enabled
decl_stmt|;
specifier|public
name|VerifySignatureReaderInterceptor
parameter_list|()
block|{
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setMessageVerifier
argument_list|(
operator|new
name|MessageVerifier
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|aroundReadFrom
parameter_list|(
name|ReaderInterceptorContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Verify signature reader interceptor is disabled"
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|proceed
argument_list|()
return|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Starting interceptor message verification process"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
init|=
name|context
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|messageBody
init|=
name|extractMessageBody
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|messageVerifier
operator|.
name|verifyMessage
argument_list|(
name|responseHeaders
argument_list|,
name|messageBody
argument_list|)
expr_stmt|;
name|context
operator|.
name|setInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|messageBody
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Finished interceptor message verification process"
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|proceed
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
name|void
name|setMessageVerifier
parameter_list|(
name|MessageVerifier
name|messageVerifier
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|messageVerifier
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageVerifier
operator|=
name|messageVerifier
expr_stmt|;
block|}
specifier|public
name|MessageVerifier
name|getMessageVerifier
parameter_list|()
block|{
return|return
name|messageVerifier
return|;
block|}
specifier|private
name|String
name|extractMessageBody
parameter_list|(
name|ReaderInterceptorContext
name|context
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|context
operator|.
name|getInputStream
argument_list|()
init|)
block|{
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
init|)
block|{
return|return
name|scanner
operator|.
name|useDelimiter
argument_list|(
literal|"\\A"
argument_list|)
operator|.
name|next
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
throw|throw
name|messageVerifier
operator|.
name|getExceptionHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
literal|"failed to validate the digest"
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|DIGEST_FAILURE
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

