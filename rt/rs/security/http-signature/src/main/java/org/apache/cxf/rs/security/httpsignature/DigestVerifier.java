begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DifferentDigestsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DigestFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|MissingDigestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|utils
operator|.
name|SignatureHeaderUtils
import|;
end_import

begin_class
specifier|public
class|class
name|DigestVerifier
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DigestVerifier
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|inspectDigest
parameter_list|(
name|byte
index|[]
name|messageBody
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Starting digest verification"
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseHeaders
operator|.
name|containsKey
argument_list|(
literal|"Digest"
argument_list|)
condition|)
block|{
name|MessageDigest
name|messageDigest
init|=
name|SignatureHeaderUtils
operator|.
name|createMessageDigestWithAlgorithm
argument_list|(
name|splitDigestHeader
argument_list|(
name|responseHeaders
operator|.
name|get
argument_list|(
literal|"Digest"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|messageDigest
operator|.
name|update
argument_list|(
name|messageBody
argument_list|)
expr_stmt|;
name|byte
index|[]
name|generatedDigest
init|=
name|messageDigest
operator|.
name|digest
argument_list|()
decl_stmt|;
name|byte
index|[]
name|headerDigest
init|=
name|Base64
operator|.
name|getDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|splitDigestHeader
argument_list|(
name|responseHeaders
operator|.
name|get
argument_list|(
literal|"Digest"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|generatedDigest
argument_list|,
name|headerDigest
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DifferentDigestsException
argument_list|(
literal|"the digest does not match the body of the message"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|MissingDigestException
argument_list|(
literal|"found no digest header"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Finished digest verification"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|splitDigestHeader
parameter_list|(
name|String
name|digestHeader
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|items
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|digestHeader
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|DigestFailureException
argument_list|(
literal|"invalid digest header format"
argument_list|)
throw|;
block|}
return|return
name|items
return|;
block|}
block|}
end_class

end_unit

