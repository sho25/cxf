begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tomitribe
operator|.
name|auth
operator|.
name|signatures
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tomitribe
operator|.
name|auth
operator|.
name|signatures
operator|.
name|Verifier
import|;
end_import

begin_class
specifier|public
class|class
name|MessageVerifier
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|MessageVerifier
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AlgorithmProvider
name|algorithmProvider
decl_stmt|;
specifier|private
name|ExceptionHandler
name|exceptionHandler
decl_stmt|;
specifier|private
name|PublicKeyProvider
name|publicKeyProvider
decl_stmt|;
specifier|private
name|SecurityProvider
name|securityProvider
decl_stmt|;
specifier|private
name|boolean
name|verifyMessageBody
decl_stmt|;
specifier|public
name|MessageVerifier
parameter_list|(
name|boolean
name|verifyMessageBody
parameter_list|)
block|{
name|this
operator|.
name|exceptionHandler
operator|=
parameter_list|(
name|exception
parameter_list|,
name|type
parameter_list|)
lambda|->
operator|new
name|SignatureException
argument_list|(
literal|"exception of type: "
operator|+
name|type
operator|+
literal|" occurred"
argument_list|)
expr_stmt|;
name|this
operator|.
name|securityProvider
operator|=
name|keyId
lambda|->
name|Security
operator|.
name|getProvider
argument_list|(
literal|"SunRsaSign"
argument_list|)
expr_stmt|;
name|this
operator|.
name|algorithmProvider
operator|=
name|keyId
lambda|->
name|DefaultSignatureConstants
operator|.
name|SIGNING_ALGORITHM
expr_stmt|;
name|this
operator|.
name|verifyMessageBody
operator|=
name|verifyMessageBody
expr_stmt|;
block|}
specifier|public
name|MessageVerifier
parameter_list|(
name|PublicKeyProvider
name|publicKeyProvider
parameter_list|,
name|ExceptionHandler
name|exceptionHandler
parameter_list|,
name|SecurityProvider
name|securityProvider
parameter_list|,
name|AlgorithmProvider
name|algorithmProvider
parameter_list|,
name|boolean
name|verifyMessageBody
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|publicKeyProvider
argument_list|,
literal|"Public key provider cannot be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|publicKeyProvider
argument_list|,
literal|"Public key provider cannot be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|publicKeyProvider
argument_list|,
literal|"Public key provider cannot be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|publicKeyProvider
argument_list|,
literal|"Public key provider cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|publicKeyProvider
operator|=
name|publicKeyProvider
expr_stmt|;
name|this
operator|.
name|exceptionHandler
operator|=
name|exceptionHandler
expr_stmt|;
name|this
operator|.
name|securityProvider
operator|=
name|securityProvider
expr_stmt|;
name|this
operator|.
name|algorithmProvider
operator|=
name|algorithmProvider
expr_stmt|;
name|this
operator|.
name|verifyMessageBody
operator|=
name|verifyMessageBody
expr_stmt|;
block|}
comment|/**      * @return a map of the headers included in the signature      */
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|extractHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|allHeaders
parameter_list|)
block|{
assert|assert
name|allHeaders
operator|!=
literal|null
operator|&&
name|allHeaders
operator|.
name|containsKey
argument_list|(
literal|"Signature"
argument_list|)
operator|&&
name|allHeaders
operator|.
name|get
argument_list|(
literal|"Signature"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|String
name|signature
init|=
name|allHeaders
operator|.
name|get
argument_list|(
literal|"Signature"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|headerList
init|=
operator|new
name|Scanner
argument_list|(
name|signature
argument_list|)
operator|.
name|findWithinHorizon
argument_list|(
literal|"headers=\"[^,]+\""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|headerList
operator|=
name|headerList
operator|.
name|substring
argument_list|(
literal|"headers="
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Trim off prefix
name|headerList
operator|=
name|headerList
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|headerList
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Trim off trailing quote
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|headerName
range|:
name|headerList
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|possibleMatch
range|:
name|allHeaders
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|possibleMatch
operator|.
name|equalsIgnoreCase
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|possibleMatch
argument_list|,
name|allHeaders
operator|.
name|get
argument_list|(
name|possibleMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|headers
return|;
block|}
specifier|public
name|void
name|setSecurityProvider
parameter_list|(
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|this
operator|.
name|securityProvider
operator|=
name|securityProvider
expr_stmt|;
block|}
specifier|public
name|void
name|setPublicKeyProvider
parameter_list|(
name|PublicKeyProvider
name|publicKeyProvider
parameter_list|)
block|{
name|this
operator|.
name|publicKeyProvider
operator|=
name|publicKeyProvider
expr_stmt|;
block|}
specifier|public
name|void
name|setAlgorithmProvider
parameter_list|(
name|AlgorithmProvider
name|algorithmProvider
parameter_list|)
block|{
name|this
operator|.
name|algorithmProvider
operator|=
name|algorithmProvider
expr_stmt|;
block|}
specifier|public
name|ExceptionHandler
name|getExceptionHandler
parameter_list|()
block|{
return|return
name|exceptionHandler
return|;
block|}
specifier|public
name|void
name|setExceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|this
operator|.
name|exceptionHandler
operator|=
name|exceptionHandler
expr_stmt|;
block|}
specifier|public
name|void
name|verifyMessage
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|messageHeaders
parameter_list|,
name|String
name|messageBody
parameter_list|)
block|{
if|if
condition|(
name|verifyMessageBody
condition|)
block|{
name|inspectDigest
argument_list|(
name|messageBody
argument_list|,
name|messageHeaders
argument_list|)
expr_stmt|;
block|}
name|verifyMessage
argument_list|(
name|messageHeaders
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyMessage
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|messageHeaders
parameter_list|)
block|{
name|inspectIllegalState
argument_list|()
expr_stmt|;
name|inspectMissingSignatureHeader
argument_list|(
name|messageHeaders
argument_list|)
expr_stmt|;
name|inspectMultipleSignatureHeaders
argument_list|(
name|messageHeaders
argument_list|)
expr_stmt|;
name|Signature
name|signature
init|=
name|extractSignature
argument_list|(
name|messageHeaders
operator|.
name|get
argument_list|(
literal|"Signature"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|providedAlgorithm
init|=
name|algorithmProvider
operator|.
name|getAlgorithmName
argument_list|(
name|signature
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|providedAlgorithm
argument_list|,
literal|"provided algorithm is null"
argument_list|)
expr_stmt|;
name|String
name|signatureAlgorithm
init|=
name|signature
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|providedAlgorithm
operator|.
name|equals
argument_list|(
name|signatureAlgorithm
argument_list|)
condition|)
block|{
throw|throw
name|exceptionHandler
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
literal|"algorithm from header and provided are different"
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|DIFFERENT_ALGORITHMS
argument_list|)
throw|;
block|}
comment|// Replace the algorithm provided by the headers with the algorithm given by the algorithm provider
name|Signature
name|newSignature
init|=
name|Signature
operator|.
name|fromString
argument_list|(
name|replaceAlgorithm
argument_list|(
name|signature
operator|.
name|toString
argument_list|()
argument_list|,
name|signatureAlgorithm
argument_list|,
name|providedAlgorithm
argument_list|)
argument_list|)
decl_stmt|;
name|Key
name|key
init|=
name|publicKeyProvider
operator|.
name|getKey
argument_list|(
name|signature
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|key
argument_list|,
literal|"provided public key is null"
argument_list|)
expr_stmt|;
name|runVerifier
argument_list|(
name|extractHeaders
argument_list|(
name|messageHeaders
argument_list|)
argument_list|,
name|key
argument_list|,
name|newSignature
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|replaceAlgorithm
parameter_list|(
name|String
name|signatureString
parameter_list|,
name|String
name|oldAlgorithm
parameter_list|,
name|String
name|newAlgorithm
parameter_list|)
block|{
return|return
name|signatureString
operator|.
name|replaceFirst
argument_list|(
literal|"algorithm=\""
operator|+
name|oldAlgorithm
argument_list|,
literal|"algorithm=\""
operator|+
name|newAlgorithm
argument_list|)
return|;
block|}
specifier|private
name|void
name|inspectIllegalState
parameter_list|()
block|{
if|if
condition|(
name|publicKeyProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"public key provider is not set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|securityProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"security provider is not set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|algorithmProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"algorithm provider is not set"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|inspectDigest
parameter_list|(
name|String
name|messageBody
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Starting digest verification"
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseHeaders
operator|.
name|containsKey
argument_list|(
literal|"Digest"
argument_list|)
condition|)
block|{
name|String
name|headerDigest
init|=
name|responseHeaders
operator|.
name|get
argument_list|(
literal|"Digest"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MessageDigest
name|messageDigest
init|=
name|getDigestAlgorithm
argument_list|(
name|headerDigest
argument_list|)
decl_stmt|;
name|messageDigest
operator|.
name|update
argument_list|(
name|messageBody
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|generatedDigest
init|=
operator|new
name|String
argument_list|(
name|messageDigest
operator|.
name|digest
argument_list|()
argument_list|)
decl_stmt|;
name|headerDigest
operator|=
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|getDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|trimAlgorithmName
argument_list|(
name|headerDigest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|generatedDigest
operator|.
name|equals
argument_list|(
name|headerDigest
argument_list|)
condition|)
block|{
throw|throw
name|exceptionHandler
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
literal|"the digest does not match the body of the message"
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|DIFFERENT_DIGESTS
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|exceptionHandler
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
literal|"failed to validate the digest"
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|MISSING_DIGEST
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Finished digest verification"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MessageDigest
name|getDigestAlgorithm
parameter_list|(
name|String
name|digestString
parameter_list|)
block|{
try|try
block|{
return|return
name|SignatureHeaderUtils
operator|.
name|getDigestAlgorithm
argument_list|(
name|digestString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
name|exceptionHandler
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
literal|"failed to validate the digest"
argument_list|,
name|e
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|DIGEST_FAILURE
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|trimAlgorithmName
parameter_list|(
name|String
name|digest
parameter_list|)
block|{
name|int
name|startingIndex
init|=
name|digest
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
return|return
name|digest
operator|.
name|substring
argument_list|(
name|startingIndex
operator|+
literal|1
argument_list|,
name|digest
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|inspectMultipleSignatureHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
parameter_list|)
block|{
if|if
condition|(
name|responseHeaders
operator|.
name|get
argument_list|(
literal|"Signature"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
name|exceptionHandler
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
literal|"there are multiple signature headers in request"
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|MULTIPLE_SIGNATURE_HEADERS
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|inspectMissingSignatureHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
parameter_list|)
block|{
if|if
condition|(
operator|!
name|responseHeaders
operator|.
name|containsKey
argument_list|(
literal|"Signature"
argument_list|)
condition|)
block|{
throw|throw
name|exceptionHandler
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
literal|"there is no signature header in request"
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|MISSING_SIGNATURE_HEADER
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Signature
name|extractSignature
parameter_list|(
name|String
name|signatureString
parameter_list|)
block|{
try|try
block|{
return|return
name|Signature
operator|.
name|fromString
argument_list|(
name|signatureString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|exceptionHandler
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
literal|"failed to parse signature from signature header"
argument_list|,
name|e
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|INVALID_SIGNATURE_HEADER
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|runVerifier
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|messageHeaders
parameter_list|,
name|Key
name|key
parameter_list|,
name|Signature
name|signature
parameter_list|)
block|{
name|java
operator|.
name|security
operator|.
name|Provider
name|provider
init|=
name|securityProvider
operator|.
name|getProvider
argument_list|(
name|signature
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|provider
argument_list|,
literal|"provided provider is null"
argument_list|)
expr_stmt|;
name|String
name|method
init|=
name|SignatureHeaderUtils
operator|.
name|getMethod
argument_list|(
name|messageHeaders
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|SignatureHeaderUtils
operator|.
name|getUri
argument_list|(
name|messageHeaders
argument_list|)
decl_stmt|;
name|Verifier
name|verifier
init|=
operator|new
name|Verifier
argument_list|(
name|key
argument_list|,
name|signature
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Starting signature verification"
argument_list|)
expr_stmt|;
name|boolean
name|success
decl_stmt|;
try|try
block|{
name|success
operator|=
name|verifier
operator|.
name|verify
argument_list|(
name|method
argument_list|,
name|uri
argument_list|,
name|SignatureHeaderUtils
operator|.
name|mapHeaders
argument_list|(
name|messageHeaders
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|exceptionHandler
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|INVALID_DATA_TO_VERIFY_SIGNATURE
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
name|exceptionHandler
operator|.
name|handle
argument_list|(
operator|new
name|SignatureException
argument_list|(
literal|"signature is not valid"
argument_list|)
argument_list|,
name|SignatureExceptionType
operator|.
name|FAILED_TO_VERIFY_SIGNATURE
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

