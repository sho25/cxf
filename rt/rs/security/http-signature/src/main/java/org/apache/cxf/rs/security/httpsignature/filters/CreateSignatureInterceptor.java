begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Priorities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|HttpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|HTTPSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|utils
operator|.
name|DefaultSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|utils
operator|.
name|SignatureHeaderUtils
import|;
end_import

begin_comment
comment|/**  * RS WriterInterceptor + ClientRequestFilter for outbound HTTP Signature. For requests with no Body  * (e.g. GET requests), the ClientRequestFilter implementation is invoked to sign the request. All other  * requests are handled by the WriterInterceptor implementation, which digests the body before signing  * the headers.  */
end_comment

begin_class
annotation|@
name|Provider
annotation|@
name|Priority
argument_list|(
name|Priorities
operator|.
name|HEADER_DECORATOR
argument_list|)
specifier|public
class|class
name|CreateSignatureInterceptor
extends|extends
name|AbstractSignatureOutFilter
implements|implements
name|WriterInterceptor
implements|,
name|ClientRequestFilter
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DIGEST_HEADER_NAME
init|=
literal|"Digest"
decl_stmt|;
specifier|private
name|String
name|digestAlgorithmName
decl_stmt|;
annotation|@
name|Context
specifier|private
name|UriInfo
name|uriInfo
decl_stmt|;
specifier|private
name|boolean
name|addDigest
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|aroundWriteTo
parameter_list|(
name|WriterInterceptorContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Only sign the request if we have a Body.
if|if
condition|(
name|context
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// skip digest if already set
if|if
condition|(
name|addDigest
operator|&&
name|context
operator|.
name|getHeaders
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|DIGEST_HEADER_NAME
operator|::
name|equalsIgnoreCase
argument_list|)
condition|)
block|{
name|addDigest
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sign
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|proceed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|ClientRequestContext
name|requestContext
parameter_list|)
block|{
comment|// Only sign the request if we have no Body.
if|if
condition|(
name|requestContext
operator|.
name|getEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Message
name|m
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|String
name|method
init|=
literal|""
decl_stmt|;
name|String
name|path
init|=
literal|""
decl_stmt|;
comment|// We don't pass the HTTP method + URI for the response case
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|method
operator|=
name|requestContext
operator|.
name|getMethod
argument_list|()
expr_stmt|;
name|path
operator|=
name|requestContext
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
name|performSignature
argument_list|(
name|requestContext
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|path
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|sign
parameter_list|(
name|WriterInterceptorContext
name|writerInterceptorContext
parameter_list|)
block|{
name|Message
name|m
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|String
name|method
init|=
literal|""
decl_stmt|;
name|String
name|path
init|=
literal|""
decl_stmt|;
comment|// We don't pass the HTTP method + URI for the response case
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|method
operator|=
name|HttpUtils
operator|.
name|getProtocolHeader
argument_list|(
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
argument_list|,
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|path
operator|=
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
name|performSignature
argument_list|(
name|writerInterceptorContext
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|path
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDigest
parameter_list|(
name|WriterInterceptorContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make sure we have all content
name|OutputStream
name|originalOutputStream
init|=
name|context
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|CachedOutputStream
name|cachedOutputStream
init|=
operator|new
name|CachedOutputStream
argument_list|()
decl_stmt|;
name|context
operator|.
name|setOutputStream
argument_list|(
name|cachedOutputStream
argument_list|)
expr_stmt|;
name|context
operator|.
name|proceed
argument_list|()
expr_stmt|;
name|cachedOutputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// then digest using requested encoding
name|String
name|encoding
init|=
name|context
operator|.
name|getMediaType
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|getOrDefault
argument_list|(
name|MediaType
operator|.
name|CHARSET_PARAMETER
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|digestAlgorithm
init|=
name|digestAlgorithmName
decl_stmt|;
if|if
condition|(
name|digestAlgorithm
operator|==
literal|null
condition|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|digestAlgorithm
operator|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|HTTPSignatureConstants
operator|.
name|RSSEC_HTTP_SIGNATURE_DIGEST_ALGORITHM
argument_list|)
expr_stmt|;
if|if
condition|(
name|digestAlgorithm
operator|==
literal|null
condition|)
block|{
name|digestAlgorithm
operator|=
name|DefaultSignatureConstants
operator|.
name|DIGEST_ALGORITHM
expr_stmt|;
block|}
block|}
comment|// not so nice - would be better to have a stream
name|String
name|digest
init|=
name|SignatureHeaderUtils
operator|.
name|createDigestHeader
argument_list|(
operator|new
name|String
argument_list|(
name|cachedOutputStream
operator|.
name|getBytes
argument_list|()
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|digestAlgorithm
argument_list|)
decl_stmt|;
comment|// add header
name|context
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|DIGEST_HEADER_NAME
argument_list|,
name|digest
argument_list|)
expr_stmt|;
name|sign
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// write the contents
name|context
operator|.
name|setOutputStream
argument_list|(
name|originalOutputStream
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|cachedOutputStream
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|originalOutputStream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDigestAlgorithmName
parameter_list|()
block|{
return|return
name|digestAlgorithmName
return|;
block|}
specifier|public
name|void
name|setDigestAlgorithmName
parameter_list|(
name|String
name|digestAlgorithmName
parameter_list|)
block|{
name|this
operator|.
name|digestAlgorithmName
operator|=
name|digestAlgorithmName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAddDigest
parameter_list|()
block|{
return|return
name|addDigest
return|;
block|}
specifier|public
name|void
name|setAddDigest
parameter_list|(
name|boolean
name|addDigest
parameter_list|)
block|{
name|this
operator|.
name|addDigest
operator|=
name|addDigest
expr_stmt|;
block|}
block|}
end_class

end_unit

