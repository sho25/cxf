begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|ISO_8859_1
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SignatureHeaderUtils
block|{
comment|/**      * Maps a multimap to a normal map with comma-separated values in case of duplicate headers      * @param multivaluedMap the multivalued map      * @return A map with comma-separated values      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|multivaluedMap
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappedStrings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|multivaluedMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|mappedStrings
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|concatValues
argument_list|(
name|multivaluedMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mappedStrings
return|;
block|}
comment|/**      * Loads and decodes a PEM key to be ready to create a KeySpec      * @param resource The raw bytes from a PEM file      * @return decoded bytes which can be input to a KeySpec      */
specifier|public
specifier|static
name|byte
index|[]
name|loadPEM
parameter_list|(
name|byte
index|[]
name|resource
parameter_list|)
block|{
name|String
name|pem
init|=
operator|new
name|String
argument_list|(
name|resource
argument_list|,
name|ISO_8859_1
argument_list|)
decl_stmt|;
name|Pattern
name|parse
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?m)(?s)^---*BEGIN.*---*$(.*)^---*END.*---*$.*"
argument_list|)
decl_stmt|;
name|String
name|encoded
init|=
name|parse
operator|.
name|matcher
argument_list|(
name|pem
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"$1"
argument_list|)
decl_stmt|;
return|return
name|Base64
operator|.
name|getMimeDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|encoded
argument_list|)
return|;
block|}
comment|/**      * Get a base64 encoded digest using the Algorithm specified, typically SHA-256      *      * @param messageBody         The body of the message to be used to create the Digest      * @param digestAlgorithmName The name of the algorithm used to create the digest, SHA-256 and SHA-512 are valid      * @return A base64 encoded digest ready to be added as a header to the message      * @throws NoSuchAlgorithmException If the user gives an unexpected digestAlgorithmName      */
specifier|public
specifier|static
name|String
name|createDigestHeader
parameter_list|(
name|String
name|messageBody
parameter_list|,
name|String
name|digestAlgorithmName
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|MessageDigest
name|messageDigest
init|=
name|getDigestAlgorithm
argument_list|(
name|digestAlgorithmName
argument_list|)
decl_stmt|;
name|messageDigest
operator|.
name|update
argument_list|(
name|messageBody
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|digestAlgorithmName
operator|+
literal|"="
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|getEncoder
argument_list|()
operator|.
name|encode
argument_list|(
name|messageDigest
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get digest algorithm based on digestAlgorithmName      *      * @param digestAlgorithmName The name of the algorithm used to create the digest, SHA-256 and SHA-512 are valid      * @return The digest algorithm      * @throws NoSuchAlgorithmException If the user gives an unexpected digestAlgorithmName      */
specifier|public
specifier|static
name|MessageDigest
name|getDigestAlgorithm
parameter_list|(
name|String
name|digestAlgorithmName
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|String
name|temporaryString
init|=
name|digestAlgorithmName
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|temporaryString
operator|.
name|startsWith
argument_list|(
literal|"SHA-256"
argument_list|)
condition|)
block|{
return|return
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|temporaryString
operator|.
name|startsWith
argument_list|(
literal|"SHA-512"
argument_list|)
condition|)
block|{
return|return
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-512"
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchAlgorithmException
argument_list|(
literal|"Found no valid algorithm in Digest"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getMethod
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
parameter_list|)
block|{
if|if
condition|(
name|responseHeaders
operator|.
name|containsKey
argument_list|(
literal|"(request-target)"
argument_list|)
condition|)
block|{
return|return
name|getRequestTargetSubString
argument_list|(
name|responseHeaders
operator|.
name|get
argument_list|(
literal|"(request-target)"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|public
specifier|static
name|String
name|getUri
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
parameter_list|)
block|{
if|if
condition|(
name|responseHeaders
operator|.
name|containsKey
argument_list|(
literal|"(request-target)"
argument_list|)
condition|)
block|{
return|return
name|getRequestTargetSubString
argument_list|(
name|responseHeaders
operator|.
name|get
argument_list|(
literal|"(request-target)"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|private
specifier|static
name|String
name|concatValues
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|!=
name|values
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getRequestTargetSubString
parameter_list|(
name|String
name|requestTarget
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|subStrings
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|requestTarget
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|subStrings
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

