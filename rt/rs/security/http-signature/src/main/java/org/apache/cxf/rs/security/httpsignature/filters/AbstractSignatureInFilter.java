begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|DigestVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|HTTPSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|MessageVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DifferentAlgorithmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DifferentDigestsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DigestFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|InvalidDataToVerifySignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|InvalidSignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|InvalidSignatureHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|MissingDigestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|MissingSignatureHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|MultipleSignatureHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|SignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|utils
operator|.
name|DefaultSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|utils
operator|.
name|KeyManagementUtils
import|;
end_import

begin_comment
comment|/**  * RS CXF abstract Filter which verifies the Digest header, and then extracts signature data from the context  * and sends it to the message verifier  */
end_comment

begin_class
specifier|abstract
class|class
name|AbstractSignatureInFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractSignatureInFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MessageVerifier
name|messageVerifier
decl_stmt|;
specifier|private
name|boolean
name|enabled
decl_stmt|;
name|AbstractSignatureInFilter
parameter_list|()
block|{
name|this
operator|.
name|enabled
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|byte
index|[]
name|verifyDigest
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|InputStream
name|entityStream
parameter_list|)
block|{
name|byte
index|[]
name|messageBody
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return
name|messageBody
return|;
block|}
comment|// Verify digest if we have the appropriate header and a non-empty request body. Note that it is up to
comment|// the MessageVerifier configuration, or the HTTPSignatureConstants.RSSEC_HTTP_SIGNATURE_IN_HEADERS
comment|// configuration to require that the digest is signed (and hence present)
if|if
condition|(
name|entityStream
operator|!=
literal|null
operator|&&
name|headers
operator|.
name|containsKey
argument_list|(
literal|"Digest"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Digesting message body"
argument_list|)
expr_stmt|;
try|try
block|{
name|messageBody
operator|=
name|IOUtils
operator|.
name|readBytesFromStream
argument_list|(
name|entityStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DigestFailureException
argument_list|(
literal|"failed to validate the digest"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|DigestVerifier
name|digestVerifier
init|=
operator|new
name|DigestVerifier
argument_list|()
decl_stmt|;
try|try
block|{
name|digestVerifier
operator|.
name|inspectDigest
argument_list|(
name|messageBody
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DigestFailureException
decl||
name|DifferentDigestsException
decl||
name|MissingDigestException
name|ex
parameter_list|)
block|{
name|Message
name|message
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Finished digest message verification process"
argument_list|)
expr_stmt|;
return|return
name|messageBody
return|;
block|}
specifier|protected
name|void
name|verifySignature
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|String
name|uriPath
parameter_list|,
name|String
name|httpMethod
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Verify signature filter is disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|messageVerifier
operator|==
literal|null
condition|)
block|{
name|messageVerifier
operator|=
name|createMessageVerifier
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Starting filter message verification process"
argument_list|)
expr_stmt|;
try|try
block|{
name|messageVerifier
operator|.
name|verifyMessage
argument_list|(
name|headers
argument_list|,
name|httpMethod
argument_list|,
name|uriPath
argument_list|,
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DifferentAlgorithmsException
decl||
name|InvalidSignatureHeaderException
decl||
name|InvalidDataToVerifySignatureException
decl||
name|InvalidSignatureException
decl||
name|MultipleSignatureHeaderException
decl||
name|MissingSignatureHeaderException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Finished filter message verification process"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMessageVerifier
parameter_list|(
name|MessageVerifier
name|messageVerifier
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|messageVerifier
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageVerifier
operator|=
name|messageVerifier
expr_stmt|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
specifier|protected
name|MessageVerifier
name|createMessageVerifier
parameter_list|()
block|{
name|Properties
name|props
init|=
name|KeyManagementUtils
operator|.
name|loadSignatureInProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SignatureException
argument_list|(
literal|"Signature properties are not configured correctly"
argument_list|)
throw|;
block|}
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|KeyManagementUtils
operator|.
name|loadPublicKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|String
name|signatureAlgorithm
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|HTTPSignatureConstants
operator|.
name|RSSEC_SIGNATURE_ALGORITHM
argument_list|)
decl_stmt|;
if|if
condition|(
name|signatureAlgorithm
operator|==
literal|null
condition|)
block|{
name|signatureAlgorithm
operator|=
name|DefaultSignatureConstants
operator|.
name|SIGNING_ALGORITHM
expr_stmt|;
block|}
specifier|final
name|String
name|finalSignatureAlgorithm
init|=
name|signatureAlgorithm
decl_stmt|;
specifier|final
name|Provider
name|provider
init|=
name|Security
operator|.
name|getProvider
argument_list|(
name|DefaultSignatureConstants
operator|.
name|SECURITY_PROVIDER
argument_list|)
decl_stmt|;
return|return
operator|new
name|MessageVerifier
argument_list|(
name|keyId
lambda|->
name|publicKey
argument_list|,
name|keyId
lambda|->
name|provider
argument_list|,
name|keyId
lambda|->
name|finalSignatureAlgorithm
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|handleException
parameter_list|(
name|Exception
name|ex
parameter_list|)
function_decl|;
block|}
end_class

end_unit

