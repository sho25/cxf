begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|MessageVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DifferentAlgorithmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|InvalidDataToVerifySignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|InvalidSignatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|InvalidSignatureHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|MissingSignatureHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|MultipleSignatureHeaderException
import|;
end_import

begin_comment
comment|/**  * RS CXF abstract Filter which extracts signature data from the context and sends it to the message verifier  */
end_comment

begin_class
specifier|abstract
class|class
name|AbstractSignatureInFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractSignatureInFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MessageVerifier
name|messageVerifier
decl_stmt|;
specifier|private
name|boolean
name|enabled
decl_stmt|;
name|AbstractSignatureInFilter
parameter_list|()
block|{
name|this
operator|.
name|enabled
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|void
name|verifySignature
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|String
name|uriPath
parameter_list|,
name|String
name|httpMethod
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Verify signature filter is disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|messageVerifier
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Message verifier cannot be null"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Starting filter message verification process"
argument_list|)
expr_stmt|;
try|try
block|{
name|messageVerifier
operator|.
name|verifyMessage
argument_list|(
name|headers
argument_list|,
name|httpMethod
argument_list|,
name|uriPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DifferentAlgorithmsException
decl||
name|InvalidSignatureHeaderException
decl||
name|InvalidDataToVerifySignatureException
decl||
name|InvalidSignatureException
decl||
name|MultipleSignatureHeaderException
decl||
name|MissingSignatureHeaderException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Finished filter message verification process"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMessageVerifier
parameter_list|(
name|MessageVerifier
name|messageVerifier
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|messageVerifier
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageVerifier
operator|=
name|messageVerifier
expr_stmt|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
block|}
end_class

end_unit

