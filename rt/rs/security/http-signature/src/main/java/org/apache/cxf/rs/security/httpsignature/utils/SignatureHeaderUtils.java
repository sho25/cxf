begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DigestFailureException
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SignatureHeaderUtils
block|{
specifier|private
name|SignatureHeaderUtils
parameter_list|()
block|{ }
comment|/**      * Add a date header at the current time using the ZoneOffset. Date format is http      */
specifier|public
specifier|static
name|void
name|addDateHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|messageHeaders
parameter_list|,
name|ZoneOffset
name|zoneOffset
parameter_list|)
block|{
name|String
name|date
init|=
name|DateTimeFormatter
operator|.
name|RFC_1123_DATE_TIME
operator|.
name|format
argument_list|(
name|LocalDateTime
operator|.
name|now
argument_list|()
operator|.
name|atZone
argument_list|(
name|Clock
operator|.
name|system
argument_list|(
name|zoneOffset
argument_list|)
operator|.
name|getZone
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|messageHeaders
operator|.
name|put
argument_list|(
literal|"Date"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Maps a multimap to a normal map with comma-separated values in case of duplicate headers according to      * the draft-cavage guidelines      * @param multivaluedMap the multivalued map      * @return A map with comma-separated values      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|multivaluedMap
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappedStrings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|multivaluedMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|mappedStrings
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|concatValues
argument_list|(
name|multivaluedMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mappedStrings
return|;
block|}
comment|/**      * Get a base64 encoded digest using the Algorithm specified, typically SHA-256      *      * @param messageBody         The body of the message to be used to create the Digest      * @param digestAlgorithmName The name of the algorithm used to create the digest, SHA-256 and SHA-512 are valid      * @return A base64 encoded digest ready to be added as a header to the message      */
specifier|public
specifier|static
name|String
name|createDigestHeader
parameter_list|(
name|String
name|messageBody
parameter_list|,
name|String
name|digestAlgorithmName
parameter_list|)
block|{
name|MessageDigest
name|messageDigest
init|=
name|createMessageDigestWithAlgorithm
argument_list|(
name|digestAlgorithmName
argument_list|)
decl_stmt|;
name|messageDigest
operator|.
name|update
argument_list|(
name|messageBody
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|digestAlgorithmName
operator|+
literal|"="
operator|+
name|Base64
operator|.
name|getEncoder
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|messageDigest
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Get a MessageDigest object based on the algorithm in the digest string      *      * @return a valid MessageDigest object      */
specifier|public
specifier|static
name|MessageDigest
name|createMessageDigestWithAlgorithm
parameter_list|(
name|String
name|algorithmName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|validDigestAlgorithms
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"SHA-256"
argument_list|,
literal|"SHA-512"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|validAlgorithm
range|:
name|validDigestAlgorithms
control|)
block|{
if|if
condition|(
name|validAlgorithm
operator|.
name|equalsIgnoreCase
argument_list|(
name|algorithmName
argument_list|)
condition|)
block|{
return|return
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|validAlgorithm
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|NoSuchAlgorithmException
argument_list|(
literal|"found no match in digest algorithm whitelist"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DigestFailureException
argument_list|(
literal|"failed to retrieve digest from digest string"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|concatValues
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|!=
name|values
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

