begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DigestFailureException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|SignatureHeaderUtilsTest
block|{
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateMessageDigestSHA256
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|SignatureHeaderUtils
operator|.
name|createMessageDigestWithAlgorithm
argument_list|(
literal|"SHA-256"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateMessageDigestSHA512
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|SignatureHeaderUtils
operator|.
name|createMessageDigestWithAlgorithm
argument_list|(
literal|"SHA-512"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
argument_list|(
name|expected
operator|=
name|DigestFailureException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateMessageDigestSHA1
parameter_list|()
block|{
name|SignatureHeaderUtils
operator|.
name|createMessageDigestWithAlgorithm
argument_list|(
literal|"SHA-1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
argument_list|(
name|expected
operator|=
name|DigestFailureException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateMessageDigestUnknown
parameter_list|()
block|{
name|SignatureHeaderUtils
operator|.
name|createMessageDigestWithAlgorithm
argument_list|(
literal|"Unknown"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateDigestHeaderSHA256
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|SignatureHeaderUtils
operator|.
name|createDigestHeader
argument_list|(
literal|"xyz"
argument_list|,
literal|"SHA-256"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateDigestHeaderSHA512
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|SignatureHeaderUtils
operator|.
name|createDigestHeader
argument_list|(
literal|"xyz"
argument_list|,
literal|"SHA-512"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
argument_list|(
name|expected
operator|=
name|DigestFailureException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateDigestHeaderSHA1
parameter_list|()
block|{
name|SignatureHeaderUtils
operator|.
name|createDigestHeader
argument_list|(
literal|"xyz"
argument_list|,
literal|"SHA-1"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

