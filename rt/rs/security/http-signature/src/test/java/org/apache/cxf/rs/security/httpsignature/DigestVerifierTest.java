begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DifferentDigestsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|exception
operator|.
name|DigestFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|utils
operator|.
name|DefaultSignatureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|utils
operator|.
name|SignatureHeaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DigestVerifierTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE_BODY
init|=
literal|"Hello"
decl_stmt|;
specifier|private
specifier|static
name|DigestVerifier
name|digestVerifier
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|digestVerifier
operator|=
operator|new
name|DigestVerifier
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validUnalteredDigest
parameter_list|()
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|createDigestHeader
argument_list|(
name|MESSAGE_BODY
argument_list|,
name|headers
argument_list|,
name|DefaultSignatureConstants
operator|.
name|DIGEST_ALGORITHM
argument_list|)
expr_stmt|;
name|digestVerifier
operator|.
name|inspectDigest
argument_list|(
name|MESSAGE_BODY
operator|.
name|getBytes
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DifferentDigestsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|differentDigestsFails
parameter_list|()
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|createDigestHeader
argument_list|(
name|MESSAGE_BODY
argument_list|,
name|headers
argument_list|,
name|DefaultSignatureConstants
operator|.
name|DIGEST_ALGORITHM
argument_list|)
expr_stmt|;
name|String
name|digest
init|=
literal|"SHA-256=HEYHEYHEYHEY"
decl_stmt|;
name|headers
operator|.
name|replace
argument_list|(
literal|"Digest"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|digest
argument_list|)
argument_list|)
expr_stmt|;
name|digestVerifier
operator|.
name|inspectDigest
argument_list|(
name|MESSAGE_BODY
operator|.
name|getBytes
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DifferentDigestsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|digestFailureAlteredMessageFails
parameter_list|()
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|createDigestHeader
argument_list|(
name|MESSAGE_BODY
argument_list|,
name|headers
argument_list|,
name|DefaultSignatureConstants
operator|.
name|DIGEST_ALGORITHM
argument_list|)
expr_stmt|;
name|digestVerifier
operator|.
name|inspectDigest
argument_list|(
literal|"TEST"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DigestFailureException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|digestFailureFails
parameter_list|()
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|createDigestHeader
argument_list|(
name|MESSAGE_BODY
argument_list|,
name|headers
argument_list|,
name|DefaultSignatureConstants
operator|.
name|DIGEST_ALGORITHM
argument_list|)
expr_stmt|;
name|String
name|digest
init|=
literal|"HELLO=HEYHEYHEYHEY"
decl_stmt|;
name|headers
operator|.
name|replace
argument_list|(
literal|"Digest"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|digest
argument_list|)
argument_list|)
expr_stmt|;
name|digestVerifier
operator|.
name|inspectDigest
argument_list|(
name|MESSAGE_BODY
operator|.
name|getBytes
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|createDigestHeader
parameter_list|(
name|String
name|messageBody
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|String
name|digestAlgorithm
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|String
name|digest
init|=
name|SignatureHeaderUtils
operator|.
name|createDigestHeader
argument_list|(
name|messageBody
argument_list|,
name|digestAlgorithm
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"Digest"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|digest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

