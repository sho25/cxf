begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|rp
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|ClientCodeRequestFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|ClientTokenContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_class
specifier|public
class|class
name|OidcClientCodeRequestFilter
extends|extends
name|ClientCodeRequestFilter
block|{
specifier|private
name|UserInfoClient
name|userInfoClient
decl_stmt|;
specifier|private
name|boolean
name|userInfoRequired
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ClientTokenContext
name|createTokenContext
parameter_list|(
name|ContainerRequestContext
name|rc
parameter_list|,
name|ClientAccessToken
name|at
parameter_list|)
block|{
name|OidcClientTokenContextImpl
name|ctx
init|=
operator|new
name|OidcClientTokenContextImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|at
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setIdToken
argument_list|(
name|userInfoClient
operator|.
name|getIdToken
argument_list|(
name|at
argument_list|,
name|getConsumer
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|userInfoRequired
condition|)
block|{
name|ctx
operator|.
name|setUserInfo
argument_list|(
name|userInfoClient
operator|.
name|getUserInfo
argument_list|(
name|at
argument_list|,
name|ctx
operator|.
name|getIdToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setSecurityContext
argument_list|(
operator|new
name|OidcSecurityContext
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
specifier|public
name|void
name|setUserInfoClient
parameter_list|(
name|UserInfoClient
name|userInfoClient
parameter_list|)
block|{
name|this
operator|.
name|userInfoClient
operator|=
name|userInfoClient
expr_stmt|;
block|}
specifier|public
name|void
name|setUserInfoRequired
parameter_list|(
name|boolean
name|userInfoRequired
parameter_list|)
block|{
name|this
operator|.
name|userInfoRequired
operator|=
name|userInfoRequired
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkSecurityContextStart
parameter_list|(
name|SecurityContext
name|sc
parameter_list|)
block|{
comment|// The SSO is managed out of band and the act of validating IdToken
comment|// finalizes the authentication flow
if|if
condition|(
name|sc
operator|!=
literal|null
operator|&&
name|sc
operator|.
name|getUserPrincipal
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toNotAuthorizedException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

