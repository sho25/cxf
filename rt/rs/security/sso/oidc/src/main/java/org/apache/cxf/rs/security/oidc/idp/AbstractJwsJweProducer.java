begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|idp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweEncryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJwsJweProducer
block|{
specifier|private
name|JwsSignatureProvider
name|sigProvider
decl_stmt|;
specifier|private
name|JweEncryptionProvider
name|encryptionProvider
decl_stmt|;
specifier|private
name|boolean
name|encryptWithClientCertificates
decl_stmt|;
specifier|private
name|boolean
name|encryptWithClientSecret
decl_stmt|;
specifier|private
name|boolean
name|signWithClientSecret
decl_stmt|;
specifier|public
name|void
name|setSignatureProvider
parameter_list|(
name|JwsSignatureProvider
name|signatureProvider
parameter_list|)
block|{
name|this
operator|.
name|sigProvider
operator|=
name|signatureProvider
expr_stmt|;
block|}
specifier|protected
name|JwsSignatureProvider
name|getInitializedSigProvider
parameter_list|(
name|Client
name|c
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
if|if
condition|(
name|sigProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|sigProvider
return|;
block|}
if|if
condition|(
name|signWithClientSecret
condition|)
block|{
name|byte
index|[]
name|hmac
init|=
name|CryptoUtils
operator|.
name|decodeSequence
argument_list|(
name|c
operator|.
name|getClientSecret
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|JwsUtils
operator|.
name|getHmacSignatureProvider
argument_list|(
name|hmac
argument_list|,
name|AlgorithmUtils
operator|.
name|HMAC_SHA_256_ALGO
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|JwsUtils
operator|.
name|loadSignatureProvider
argument_list|(
name|required
argument_list|)
return|;
block|}
block|}
specifier|protected
name|JweEncryptionProvider
name|getInitializedEncryptionProvider
parameter_list|(
name|Client
name|c
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
if|if
condition|(
name|encryptionProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|encryptionProvider
return|;
block|}
name|JweEncryptionProvider
name|theEncryptionProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encryptWithClientSecret
condition|)
block|{
name|SecretKey
name|key
init|=
name|CryptoUtils
operator|.
name|decodeSecretKey
argument_list|(
name|c
operator|.
name|getClientSecret
argument_list|()
argument_list|)
decl_stmt|;
name|theEncryptionProvider
operator|=
name|JweUtils
operator|.
name|getDirectKeyJweEncryption
argument_list|(
name|key
argument_list|,
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encryptWithClientCertificates
condition|)
block|{
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|CryptoUtils
operator|.
name|decodeCertificate
argument_list|(
name|c
operator|.
name|getApplicationCertificates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|theEncryptionProvider
operator|=
name|JweUtils
operator|.
name|createJweEncryptionProvider
argument_list|(
operator|(
name|RSAPublicKey
operator|)
name|cert
operator|.
name|getPublicKey
argument_list|()
argument_list|,
name|AlgorithmUtils
operator|.
name|RSA_OAEP_ALGO
argument_list|,
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|theEncryptionProvider
operator|==
literal|null
condition|)
block|{
name|theEncryptionProvider
operator|=
name|JweUtils
operator|.
name|loadEncryptionProvider
argument_list|(
name|required
argument_list|)
expr_stmt|;
block|}
return|return
name|theEncryptionProvider
return|;
block|}
specifier|public
name|void
name|setEncryptWithClientCertificates
parameter_list|(
name|boolean
name|encryptWithClientCertificates
parameter_list|)
block|{
if|if
condition|(
name|encryptWithClientSecret
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|this
operator|.
name|encryptWithClientCertificates
operator|=
name|encryptWithClientCertificates
expr_stmt|;
block|}
specifier|public
name|void
name|setEncryptWithClientSecret
parameter_list|(
name|boolean
name|encryptWithClientSecret
parameter_list|)
block|{
if|if
condition|(
name|signWithClientSecret
operator|||
name|encryptWithClientCertificates
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|this
operator|.
name|encryptWithClientSecret
operator|=
name|encryptWithClientSecret
expr_stmt|;
block|}
specifier|public
name|void
name|setSignWithClientSecret
parameter_list|(
name|boolean
name|signWithClientSecret
parameter_list|)
block|{
if|if
condition|(
name|encryptWithClientSecret
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|this
operator|.
name|signWithClientSecret
operator|=
name|signWithClientSecret
expr_stmt|;
block|}
block|}
end_class

end_unit

