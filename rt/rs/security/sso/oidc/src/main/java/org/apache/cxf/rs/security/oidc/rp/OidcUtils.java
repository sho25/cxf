begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|rp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|crypto
operator|.
name|MessageDigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|OidcUtils
block|{
specifier|private
name|OidcUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|void
name|validateAccessTokenHash
parameter_list|(
name|ClientAccessToken
name|at
parameter_list|,
name|JwtToken
name|jwt
parameter_list|)
block|{
name|validateHash
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getClaim
argument_list|(
literal|"at_hash"
argument_list|)
argument_list|,
name|jwt
operator|.
name|getHeaders
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|validateCodeHash
parameter_list|(
name|String
name|code
parameter_list|,
name|JwtToken
name|jwt
parameter_list|)
block|{
name|validateHash
argument_list|(
name|code
argument_list|,
operator|(
name|String
operator|)
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getClaim
argument_list|(
literal|"c_hash"
argument_list|)
argument_list|,
name|jwt
operator|.
name|getHeaders
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|validateHash
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|theHash
parameter_list|,
name|String
name|joseAlgo
parameter_list|)
block|{
name|String
name|hash
init|=
name|calculateHash
argument_list|(
name|value
argument_list|,
name|joseAlgo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hash
operator|.
name|equals
argument_list|(
name|theHash
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Invalid hash"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|calculateHash
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|joseAlgo
parameter_list|)
block|{
comment|//TODO: map from the JOSE alg to a signature alg,
comment|// for example, RS256 -> SHA-256
comment|// and calculate the chunk size based on the algo key size
comment|// for example SHA-256 -> 256/8 = 32 and 32/2 = 16 bytes
try|try
block|{
name|byte
index|[]
name|atBytes
init|=
name|StringUtils
operator|.
name|toBytesASCII
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|byte
index|[]
name|digest
init|=
name|MessageDigestUtils
operator|.
name|createDigest
argument_list|(
name|atBytes
argument_list|,
name|MessageDigestUtils
operator|.
name|ALGO_SHA_256
argument_list|)
decl_stmt|;
return|return
name|Base64UrlUtility
operator|.
name|encodeChunk
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

