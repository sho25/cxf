begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|rp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweDecryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_class
specifier|public
class|class
name|IdTokenValidator
block|{
specifier|private
name|JweDecryptionProvider
name|jweDecryptor
decl_stmt|;
specifier|private
name|JwsSignatureVerifier
name|jwsVerifier
decl_stmt|;
specifier|private
name|String
name|issuerId
decl_stmt|;
specifier|private
name|int
name|issuedAtRange
decl_stmt|;
specifier|private
name|WebClient
name|jwkSetClient
decl_stmt|;
specifier|public
name|JwtToken
name|validateIdToken
parameter_list|(
name|ClientAccessToken
name|at
parameter_list|,
name|String
name|clientId
parameter_list|)
block|{
name|String
name|idToken
init|=
name|at
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"id_token"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idToken
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"ID Token is missing"
argument_list|)
throw|;
block|}
comment|// Decrypt the token if needed
if|if
condition|(
name|jweDecryptor
operator|!=
literal|null
condition|)
block|{
name|idToken
operator|=
operator|new
name|String
argument_list|(
name|jweDecryptor
operator|.
name|decrypt
argument_list|(
name|idToken
argument_list|)
operator|.
name|getContentText
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// read id_token into JwtToken
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|idToken
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"JWT claims"
operator|+
name|jwtConsumer
operator|.
name|getDecodedJsonToken
argument_list|()
operator|.
name|getClaimsJson
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate token signature
name|JwsSignatureVerifier
name|theJwsVerifier
init|=
name|loadJwkSignatureVerifier
argument_list|(
name|jwt
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jwtConsumer
operator|.
name|verifySignatureWith
argument_list|(
name|theJwsVerifier
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"ID Token signature verification failed"
argument_list|)
throw|;
block|}
comment|// validate audience
if|if
condition|(
operator|!
name|clientId
operator|.
name|equals
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getAudience
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Invalid audience"
argument_list|)
throw|;
block|}
comment|// validate the provider
if|if
condition|(
operator|!
name|issuerId
operator|.
name|equals
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getIssuer
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Invalid provider"
argument_list|)
throw|;
block|}
name|long
name|currentTimeInSecs
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|long
name|expiryTimeInSecs
init|=
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getExpiryTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTimeInSecs
operator|>
name|expiryTimeInSecs
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"The token expired"
argument_list|)
throw|;
block|}
name|long
name|issuedAtInSecs
init|=
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getIssuedAt
argument_list|()
decl_stmt|;
if|if
condition|(
name|issuedAtInSecs
operator|>
name|currentTimeInSecs
operator|||
name|issuedAtRange
operator|>
literal|0
operator|&&
name|issuedAtInSecs
operator|<
name|currentTimeInSecs
operator|-
name|issuedAtRange
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Invalid issuedAt"
argument_list|)
throw|;
block|}
comment|// validate at_hash
name|OidcUtils
operator|.
name|validateAccessTokenHash
argument_list|(
name|at
argument_list|,
name|jwt
argument_list|)
expr_stmt|;
return|return
name|jwt
return|;
block|}
specifier|private
name|JwsSignatureVerifier
name|loadJwkSignatureVerifier
parameter_list|(
name|JwtToken
name|jwt
parameter_list|)
block|{
if|if
condition|(
name|jwsVerifier
operator|!=
literal|null
condition|)
block|{
return|return
name|jwsVerifier
return|;
block|}
if|if
condition|(
name|jwkSetClient
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Provider Jwk Set Client is not available"
argument_list|)
throw|;
block|}
name|String
name|keyId
init|=
name|jwt
operator|.
name|getHeaders
argument_list|()
operator|.
name|getKeyId
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Provider JWK key id is null"
argument_list|)
throw|;
block|}
name|JsonWebKeys
name|keys
init|=
name|jwkSetClient
operator|.
name|get
argument_list|(
name|JsonWebKeys
operator|.
name|class
argument_list|)
decl_stmt|;
name|JsonWebKey
name|key
init|=
name|keys
operator|.
name|getKey
argument_list|(
name|keyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"JWK key with the key id: \""
operator|+
name|keyId
operator|+
literal|"\" is not available"
argument_list|)
throw|;
block|}
return|return
name|JwsUtils
operator|.
name|getSignatureVerifier
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setJweDecryptor
parameter_list|(
name|JweDecryptionProvider
name|jweDecryptor
parameter_list|)
block|{
name|this
operator|.
name|jweDecryptor
operator|=
name|jweDecryptor
expr_stmt|;
block|}
specifier|public
name|void
name|setJweVerifier
parameter_list|(
name|JwsSignatureVerifier
name|theJwsVerifier
parameter_list|)
block|{
name|this
operator|.
name|jwsVerifier
operator|=
name|theJwsVerifier
expr_stmt|;
block|}
specifier|public
name|void
name|setIssuerId
parameter_list|(
name|String
name|issuerId
parameter_list|)
block|{
name|this
operator|.
name|issuerId
operator|=
name|issuerId
expr_stmt|;
block|}
specifier|public
name|void
name|setJwkSetClient
parameter_list|(
name|WebClient
name|jwkSetClient
parameter_list|)
block|{
name|this
operator|.
name|jwkSetClient
operator|=
name|jwkSetClient
expr_stmt|;
block|}
specifier|public
name|void
name|setIssuedAtRange
parameter_list|(
name|int
name|issuedAtRange
parameter_list|)
block|{
name|this
operator|.
name|issuedAtRange
operator|=
name|issuedAtRange
expr_stmt|;
block|}
block|}
end_class

end_unit

