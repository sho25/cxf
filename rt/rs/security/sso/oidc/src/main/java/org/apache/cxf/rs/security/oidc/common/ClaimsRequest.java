begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|basic
operator|.
name|JsonMapObject
import|;
end_import

begin_class
specifier|public
class|class
name|ClaimsRequest
extends|extends
name|JsonMapObject
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ID_TOKEN_CLAIMS
init|=
literal|"id_token"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USER_INFO_CLAIMS
init|=
literal|"userinfo"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1356735897518391517L
decl_stmt|;
specifier|public
name|void
name|setIdTokenClaims
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ClaimRequirement
argument_list|>
name|claims
parameter_list|)
block|{
name|setProperty
argument_list|(
name|ID_TOKEN_CLAIMS
argument_list|,
name|claims
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ClaimRequirement
argument_list|>
name|getIdTokenClaims
parameter_list|()
block|{
return|return
name|getClaims
argument_list|(
name|ID_TOKEN_CLAIMS
argument_list|)
return|;
block|}
specifier|public
name|void
name|setUserInfoClaims
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ClaimRequirement
argument_list|>
name|claims
parameter_list|)
block|{
name|setProperty
argument_list|(
name|USER_INFO_CLAIMS
argument_list|,
name|claims
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ClaimRequirement
argument_list|>
name|getClaims
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|Object
name|claimsProp
init|=
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|claimsProp
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|claimsMap
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|claimsProp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|claimsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|claimsMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|instanceof
name|ClaimRequirement
condition|)
block|{
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|claimsMap
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ClaimRequirement
argument_list|>
name|claims
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|parsedMap
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|claimsProp
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|parsedMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ClaimRequirement
name|pref
init|=
operator|new
name|ClaimRequirement
argument_list|()
decl_stmt|;
name|Object
name|essentialProp
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ClaimRequirement
operator|.
name|ESSENTIAL_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|essentialProp
operator|!=
literal|null
condition|)
block|{
name|pref
operator|.
name|setProperty
argument_list|(
name|ClaimRequirement
operator|.
name|ESSENTIAL_PROPERTY
argument_list|,
name|essentialProp
argument_list|)
expr_stmt|;
block|}
name|Object
name|valueProp
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ClaimRequirement
operator|.
name|VALUE_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueProp
operator|!=
literal|null
condition|)
block|{
name|pref
operator|.
name|setProperty
argument_list|(
name|ClaimRequirement
operator|.
name|VALUE_PROPERTY
argument_list|,
name|valueProp
argument_list|)
expr_stmt|;
block|}
name|Object
name|valuesProp
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ClaimRequirement
operator|.
name|VALUES_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesProp
operator|!=
literal|null
condition|)
block|{
name|pref
operator|.
name|setProperty
argument_list|(
name|ClaimRequirement
operator|.
name|VALUES_PROPERTY
argument_list|,
name|valuesProp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|claims
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

