begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|rp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|ClientTokenContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|OAuthInvoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|common
operator|.
name|IdToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|utils
operator|.
name|OidcUtils
import|;
end_import

begin_class
specifier|public
class|class
name|OidcInvoker
extends|extends
name|OAuthInvoker
block|{
specifier|private
name|IdTokenReader
name|idTokenReader
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|validateRefreshedToken
parameter_list|(
name|ClientTokenContext
name|tokenContext
parameter_list|,
name|ClientAccessToken
name|refreshedToken
parameter_list|)
block|{
if|if
condition|(
name|refreshedToken
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|OidcUtils
operator|.
name|ID_TOKEN
argument_list|)
condition|)
block|{
name|IdToken
name|newIdToken
init|=
name|idTokenReader
operator|.
name|getIdToken
argument_list|(
name|refreshedToken
argument_list|,
name|getConsumer
argument_list|()
argument_list|)
decl_stmt|;
name|OidcClientTokenContextImpl
name|oidcContext
init|=
operator|(
name|OidcClientTokenContextImpl
operator|)
name|tokenContext
decl_stmt|;
name|IdToken
name|currentIdToken
init|=
name|oidcContext
operator|.
name|getIdToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newIdToken
operator|.
name|getIssuer
argument_list|()
operator|.
name|equals
argument_list|(
name|currentIdToken
operator|.
name|getIssuer
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Invalid id token issuer"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|newIdToken
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|currentIdToken
operator|.
name|getSubject
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Invalid id token subject"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|newIdToken
operator|.
name|getAudiences
argument_list|()
operator|.
name|containsAll
argument_list|(
name|currentIdToken
operator|.
name|getAudiences
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Invalid id token audience(s)"
argument_list|)
throw|;
block|}
name|Long
name|newAuthTime
init|=
name|newIdToken
operator|.
name|getAuthenticationTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|newAuthTime
operator|!=
literal|null
operator|&&
operator|!
name|newAuthTime
operator|.
name|equals
argument_list|(
name|currentIdToken
operator|.
name|getAuthenticationTime
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Invalid id token auth_time"
argument_list|)
throw|;
block|}
name|String
name|newAzp
init|=
name|newIdToken
operator|.
name|getAuthorizedParty
argument_list|()
decl_stmt|;
name|String
name|origAzp
init|=
name|currentIdToken
operator|.
name|getAuthorizedParty
argument_list|()
decl_stmt|;
if|if
condition|(
name|newAzp
operator|!=
literal|null
operator|&&
name|origAzp
operator|==
literal|null
operator|||
name|newAzp
operator|==
literal|null
operator|&&
name|origAzp
operator|!=
literal|null
operator|||
name|newAzp
operator|!=
literal|null
operator|&&
name|origAzp
operator|!=
literal|null
operator|&&
operator|!
name|newAzp
operator|.
name|equals
argument_list|(
name|origAzp
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Invalid id token authorized party"
argument_list|)
throw|;
block|}
name|Long
name|newIssuedTime
init|=
name|newIdToken
operator|.
name|getIssuedAt
argument_list|()
decl_stmt|;
name|Long
name|origIssuedTime
init|=
name|currentIdToken
operator|.
name|getIssuedAt
argument_list|()
decl_stmt|;
if|if
condition|(
name|newIssuedTime
operator|<
name|origIssuedTime
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Invalid id token issued time"
argument_list|)
throw|;
block|}
name|oidcContext
operator|.
name|setIdToken
argument_list|(
name|newIdToken
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setIdTokenReader
parameter_list|(
name|IdTokenReader
name|idTokenReader
parameter_list|)
block|{
name|this
operator|.
name|idTokenReader
operator|=
name|idTokenReader
expr_stmt|;
block|}
block|}
end_class

end_unit

