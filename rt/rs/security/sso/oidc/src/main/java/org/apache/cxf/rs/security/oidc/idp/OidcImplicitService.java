begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|idp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AbstractFormImplicitResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthRedirectionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|UserSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthJoseJwtProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|services
operator|.
name|ImplicitGrantService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|common
operator|.
name|IdToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|utils
operator|.
name|OidcUtils
import|;
end_import

begin_class
specifier|public
class|class
name|OidcImplicitService
extends|extends
name|ImplicitGrantService
block|{
specifier|private
name|OAuthJoseJwtProducer
name|idTokenHandler
decl_stmt|;
specifier|private
name|IdTokenProvider
name|idTokenProvider
decl_stmt|;
specifier|public
name|OidcImplicitService
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|OidcUtils
operator|.
name|ID_TOKEN_RESPONSE_TYPE
argument_list|,
name|OidcUtils
operator|.
name|ID_TOKEN_AT_RESPONSE_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|OidcImplicitService
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|supportedResponseTypes
parameter_list|,
name|String
name|supportedGrantType
parameter_list|)
block|{
name|super
argument_list|(
name|supportedResponseTypes
argument_list|,
name|supportedGrantType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|canAccessTokenBeReturned
parameter_list|(
name|String
name|responseType
parameter_list|)
block|{
return|return
name|OidcUtils
operator|.
name|ID_TOKEN_AT_RESPONSE_TYPE
operator|.
name|equals
argument_list|(
name|responseType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Response
name|startAuthorization
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|UserSubject
name|userSubject
parameter_list|,
name|Client
name|client
parameter_list|,
name|String
name|redirectUri
parameter_list|)
block|{
comment|// Validate the nonce, it must be present for the Implicit flow
if|if
condition|(
name|params
operator|.
name|getFirst
argument_list|(
name|OAuthConstants
operator|.
name|NONCE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"A nonce is required for the Implicit flow"
argument_list|)
expr_stmt|;
return|return
name|createErrorResponse
argument_list|(
name|params
argument_list|,
name|redirectUri
argument_list|,
name|OAuthConstants
operator|.
name|INVALID_REQUEST
argument_list|)
return|;
block|}
comment|// Validate the prompt - if it contains "none" then an error is returned with any other value
name|List
argument_list|<
name|String
argument_list|>
name|promptValues
init|=
name|OidcUtils
operator|.
name|getPromptValues
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|promptValues
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|promptValues
operator|.
name|contains
argument_list|(
name|OidcUtils
operator|.
name|PROMPT_NONE_VALUE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"The prompt value {} is invalid"
argument_list|,
name|params
operator|.
name|getFirst
argument_list|(
name|OidcUtils
operator|.
name|PROMPT_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createErrorResponse
argument_list|(
name|params
argument_list|,
name|redirectUri
argument_list|,
name|OAuthConstants
operator|.
name|INVALID_REQUEST
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|startAuthorization
argument_list|(
name|params
argument_list|,
name|userSubject
argument_list|,
name|client
argument_list|,
name|redirectUri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|canAuthorizationBeSkipped
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Client
name|client
parameter_list|,
name|UserSubject
name|userSubject
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScope
parameter_list|,
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|permissions
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|promptValues
init|=
name|OidcUtils
operator|.
name|getPromptValues
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|promptValues
operator|.
name|contains
argument_list|(
name|OidcUtils
operator|.
name|PROMPT_CONSENT_VALUE
argument_list|)
condition|)
block|{
comment|// Displaying the consent screen is preferred by the client
return|return
literal|false
return|;
block|}
comment|// Check the pre-configured consent
name|boolean
name|preConfiguredConsentForScopes
init|=
name|super
operator|.
name|canAuthorizationBeSkipped
argument_list|(
name|params
argument_list|,
name|client
argument_list|,
name|userSubject
argument_list|,
name|requestedScope
argument_list|,
name|permissions
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|preConfiguredConsentForScopes
operator|&&
name|promptValues
operator|.
name|contains
argument_list|(
name|OidcUtils
operator|.
name|PROMPT_NONE_VALUE
argument_list|)
condition|)
block|{
comment|// An error is returned if client does not have pre-configured consent for the requested scopes/claims
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Prompt 'none' request can not be met"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
operator|new
name|OAuthError
argument_list|(
name|OidcUtils
operator|.
name|CONSENT_REQUIRED_ERROR
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|preConfiguredConsentForScopes
return|;
block|}
specifier|public
name|void
name|setSkipAuthorizationWithOidcScope
parameter_list|(
name|boolean
name|skipAuthorizationWithOidcScope
parameter_list|)
block|{
name|super
operator|.
name|setScopesRequiringNoConsent
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|OidcUtils
operator|.
name|OPENID_SCOPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|StringBuilder
name|prepareRedirectResponse
parameter_list|(
name|OAuthRedirectionState
name|state
parameter_list|,
name|Client
name|client
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScope
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|approvedScope
parameter_list|,
name|UserSubject
name|userSubject
parameter_list|,
name|ServerAccessToken
name|preAuthorizedToken
parameter_list|)
block|{
if|if
condition|(
name|canAccessTokenBeReturned
argument_list|(
name|state
operator|.
name|getResponseType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|prepareRedirectResponse
argument_list|(
name|state
argument_list|,
name|client
argument_list|,
name|requestedScope
argument_list|,
name|approvedScope
argument_list|,
name|userSubject
argument_list|,
name|preAuthorizedToken
argument_list|)
return|;
block|}
comment|// id_token response type processing
name|StringBuilder
name|sb
init|=
name|getUriWithFragment
argument_list|(
name|state
operator|.
name|getRedirectUri
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|idToken
init|=
name|getProcessedIdToken
argument_list|(
name|state
argument_list|,
name|userSubject
argument_list|,
name|getApprovedScope
argument_list|(
name|requestedScope
argument_list|,
name|approvedScope
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|idToken
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|OidcUtils
operator|.
name|ID_TOKEN
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|idToken
argument_list|)
expr_stmt|;
block|}
name|finalizeResponse
argument_list|(
name|sb
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AbstractFormImplicitResponse
name|prepareFormResponse
parameter_list|(
name|OAuthRedirectionState
name|state
parameter_list|,
name|Client
name|client
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScope
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|approvedScope
parameter_list|,
name|UserSubject
name|userSubject
parameter_list|,
name|ServerAccessToken
name|preAuthorizedToken
parameter_list|)
block|{
if|if
condition|(
name|canAccessTokenBeReturned
argument_list|(
name|state
operator|.
name|getResponseType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|prepareFormResponse
argument_list|(
name|state
argument_list|,
name|client
argument_list|,
name|requestedScope
argument_list|,
name|approvedScope
argument_list|,
name|userSubject
argument_list|,
name|preAuthorizedToken
argument_list|)
return|;
block|}
comment|// id_token response type processing
name|String
name|idToken
init|=
name|getProcessedIdToken
argument_list|(
name|state
argument_list|,
name|userSubject
argument_list|,
name|getApprovedScope
argument_list|(
name|requestedScope
argument_list|,
name|approvedScope
argument_list|)
argument_list|)
decl_stmt|;
name|FormIdTokenResponse
name|response
init|=
operator|new
name|FormIdTokenResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setIdToken
argument_list|(
name|idToken
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResponseType
argument_list|(
name|state
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setRedirectUri
argument_list|(
name|state
operator|.
name|getRedirectUri
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setState
argument_list|(
name|state
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|private
name|String
name|getProcessedIdToken
parameter_list|(
name|OAuthRedirectionState
name|state
parameter_list|,
name|UserSubject
name|subject
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|scopes
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|OidcUtils
operator|.
name|ID_TOKEN
argument_list|)
condition|)
block|{
return|return
name|subject
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|OidcUtils
operator|.
name|ID_TOKEN
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|idTokenProvider
operator|!=
literal|null
condition|)
block|{
name|IdToken
name|idToken
init|=
name|idTokenProvider
operator|.
name|getIdToken
argument_list|(
name|state
operator|.
name|getClientId
argument_list|()
argument_list|,
name|subject
argument_list|,
name|scopes
argument_list|)
decl_stmt|;
return|return
name|processIdToken
argument_list|(
name|state
argument_list|,
name|idToken
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|subject
operator|instanceof
name|OidcUserSubject
condition|)
block|{
name|OidcUserSubject
name|sub
init|=
operator|(
name|OidcUserSubject
operator|)
name|subject
decl_stmt|;
name|IdToken
name|idToken
init|=
operator|new
name|IdToken
argument_list|(
name|sub
operator|.
name|getIdToken
argument_list|()
argument_list|)
decl_stmt|;
name|idToken
operator|.
name|setAudience
argument_list|(
name|state
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|idToken
operator|.
name|setAuthorizedParty
argument_list|(
name|state
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|processIdToken
argument_list|(
name|state
argument_list|,
name|idToken
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|OAuthRedirectionState
name|recreateRedirectionStateFromParams
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|OAuthRedirectionState
name|state
init|=
name|super
operator|.
name|recreateRedirectionStateFromParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|OidcUtils
operator|.
name|setStateClaimsProperty
argument_list|(
name|state
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
specifier|protected
name|String
name|processIdToken
parameter_list|(
name|OAuthRedirectionState
name|state
parameter_list|,
name|IdToken
name|idToken
parameter_list|)
block|{
name|OAuthJoseJwtProducer
name|processor
init|=
name|idTokenHandler
operator|==
literal|null
condition|?
operator|new
name|OAuthJoseJwtProducer
argument_list|()
else|:
name|idTokenHandler
decl_stmt|;
name|String
name|code
init|=
operator|(
name|String
operator|)
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|AUTHORIZATION_CODE_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|!=
literal|null
condition|)
block|{
comment|// this service is invoked as part of the hybrid flow
name|Properties
name|props
init|=
name|JwsUtils
operator|.
name|loadSignatureOutProperties
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SignatureAlgorithm
name|sigAlgo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|processor
operator|.
name|isSignWithClientSecret
argument_list|()
condition|)
block|{
name|sigAlgo
operator|=
name|OAuthUtils
operator|.
name|getClientSecretSignatureAlgorithm
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sigAlgo
operator|=
name|JwsUtils
operator|.
name|getSignatureAlgorithm
argument_list|(
name|props
argument_list|,
name|SignatureAlgorithm
operator|.
name|RS256
argument_list|)
expr_stmt|;
block|}
name|idToken
operator|.
name|setAuthorizationCodeHash
argument_list|(
name|OidcUtils
operator|.
name|calculateAuthorizationCodeHash
argument_list|(
name|code
argument_list|,
name|sigAlgo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|idToken
operator|.
name|setNonce
argument_list|(
name|state
operator|.
name|getNonce
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|processor
operator|.
name|processJwt
argument_list|(
operator|new
name|JwtToken
argument_list|(
name|idToken
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setIdTokenJoseHandler
parameter_list|(
name|OAuthJoseJwtProducer
name|idTokenJoseHandler
parameter_list|)
block|{
name|this
operator|.
name|idTokenHandler
operator|=
name|idTokenJoseHandler
expr_stmt|;
block|}
specifier|public
name|void
name|setIdTokenProvider
parameter_list|(
name|IdTokenProvider
name|idTokenProvider
parameter_list|)
block|{
name|this
operator|.
name|idTokenProvider
operator|=
name|idTokenProvider
expr_stmt|;
block|}
block|}
end_class

end_unit

