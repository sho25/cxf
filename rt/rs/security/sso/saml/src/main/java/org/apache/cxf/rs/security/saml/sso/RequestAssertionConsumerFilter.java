begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|sso
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Priorities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|PreMatching
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_class
annotation|@
name|PreMatching
annotation|@
name|Priority
argument_list|(
name|Priorities
operator|.
name|AUTHENTICATION
argument_list|)
specifier|public
class|class
name|RequestAssertionConsumerFilter
extends|extends
name|AbstractRequestAssertionConsumerHandler
implements|implements
name|ContainerRequestFilter
block|{
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|ContainerRequestContext
name|ct
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|httpMethod
init|=
name|ct
operator|.
name|getMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpMethod
operator|.
name|GET
operator|.
name|equals
argument_list|(
name|httpMethod
argument_list|)
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|ct
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getQueryParameters
argument_list|()
decl_stmt|;
name|processParams
argument_list|(
name|ct
argument_list|,
name|params
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|HttpMethod
operator|.
name|POST
operator|.
name|equals
argument_list|(
name|httpMethod
argument_list|)
operator|&&
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED_TYPE
operator|.
name|isCompatible
argument_list|(
name|ct
operator|.
name|getMediaType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|strForm
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|ct
operator|.
name|getEntityStream
argument_list|()
argument_list|)
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|JAXRSUtils
operator|.
name|getStructuredParams
argument_list|(
name|strForm
argument_list|,
literal|"&"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|processParams
argument_list|(
name|ct
argument_list|,
name|params
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ct
operator|.
name|abortWith
argument_list|(
name|Response
operator|.
name|status
argument_list|(
literal|400
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processParams
parameter_list|(
name|ContainerRequestContext
name|ct
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|boolean
name|postBinding
parameter_list|)
block|{
name|String
name|encodedSamlResponse
init|=
name|params
operator|.
name|getFirst
argument_list|(
name|SSOConstants
operator|.
name|SAML_RESPONSE
argument_list|)
decl_stmt|;
name|String
name|relayState
init|=
name|params
operator|.
name|getFirst
argument_list|(
name|SSOConstants
operator|.
name|RELAY_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|relayState
operator|==
literal|null
operator|&&
name|encodedSamlResponse
operator|==
literal|null
condition|)
block|{
comment|// initial redirect to IDP has not happened yet, let the SAML authentication filter do it
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
operator|.
name|put
argument_list|(
name|SSOConstants
operator|.
name|RACS_IS_COLLOCATED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
return|return;
block|}
name|ct
operator|.
name|abortWith
argument_list|(
name|doProcessSamlResponse
argument_list|(
name|encodedSamlResponse
argument_list|,
name|relayState
argument_list|,
name|postBinding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

