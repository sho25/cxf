begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|sso
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|common
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|xml
operator|.
name|EncryptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSDocInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|saml
operator|.
name|WSSSAMLKeyInfoProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|SamlAssertionValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|SignatureTrustValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|encryption
operator|.
name|XMLCipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|encryption
operator|.
name|XMLEncryptionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|security
operator|.
name|SAMLSignatureProfileValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|encryption
operator|.
name|EncryptedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|security
operator|.
name|x509
operator|.
name|BasicX509Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|signature
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|signature
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|signature
operator|.
name|SignatureValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|validation
operator|.
name|ValidatorSuite
import|;
end_import

begin_comment
comment|/**  * Validate a SAML (1.1 or 2.0) Protocol Response. It validates the Response against the specs,  * the signature of the Response (if it exists), and any internal Assertion stored in the Response   * - including any signature. It validates the status code of the Response as well.  */
end_comment

begin_class
specifier|public
class|class
name|SAMLProtocolResponseValidator
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SAML2_STATUSCODE_SUCCESS
init|=
literal|"urn:oasis:names:tc:SAML:2.0:status:Success"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SAML1_STATUSCODE_SUCCESS
init|=
literal|"Success"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SAMLProtocolResponseValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Validator
name|assertionValidator
init|=
operator|new
name|SamlAssertionValidator
argument_list|()
decl_stmt|;
specifier|private
name|Validator
name|signatureValidator
init|=
operator|new
name|SignatureTrustValidator
argument_list|()
decl_stmt|;
comment|/**      * Validate a SAML 2 Protocol Response      * @param samlResponse      * @param sigCrypto      * @param callbackHandler      * @throws WSSecurityException      */
specifier|public
name|void
name|validateSamlResponse
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Response
name|samlResponse
parameter_list|,
name|Crypto
name|sigCrypto
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Check the Status Code
if|if
condition|(
name|samlResponse
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
operator|||
name|samlResponse
operator|.
name|getStatus
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Either the SAML Response Status or StatusCode is null"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|SAML2_STATUSCODE_SUCCESS
operator|.
name|equals
argument_list|(
name|samlResponse
operator|.
name|getStatus
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"SAML Status code of "
operator|+
name|samlResponse
operator|.
name|getStatus
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|.
name|getValue
argument_list|()
operator|+
literal|"does not equal "
operator|+
name|SAML2_STATUSCODE_SUCCESS
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|validateResponseAgainstSchemas
argument_list|(
name|samlResponse
argument_list|)
expr_stmt|;
name|validateResponseSignature
argument_list|(
name|samlResponse
argument_list|,
name|sigCrypto
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|samlResponse
operator|.
name|getDOM
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
comment|// Decrypt any encrypted Assertions and add them to the Response (note that this will break any
comment|// signature on the Response)
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|EncryptedAssertion
name|assertion
range|:
name|samlResponse
operator|.
name|getEncryptedAssertions
argument_list|()
control|)
block|{
name|EncryptedData
name|encryptedData
init|=
name|assertion
operator|.
name|getEncryptedData
argument_list|()
decl_stmt|;
name|Element
name|encryptedDataDOM
init|=
name|encryptedData
operator|.
name|getDOM
argument_list|()
decl_stmt|;
name|Element
name|decAssertion
init|=
name|decryptAssertion
argument_list|(
name|encryptedDataDOM
argument_list|,
name|sigCrypto
argument_list|,
name|callbackHandler
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|wrapper
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|decAssertion
argument_list|)
decl_stmt|;
name|samlResponse
operator|.
name|getAssertions
argument_list|()
operator|.
name|add
argument_list|(
name|wrapper
operator|.
name|getSaml2
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Validate Assertions
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Assertion
name|assertion
range|:
name|samlResponse
operator|.
name|getAssertions
argument_list|()
control|)
block|{
name|SamlAssertionWrapper
name|wrapper
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|validateAssertion
argument_list|(
name|wrapper
argument_list|,
name|sigCrypto
argument_list|,
name|callbackHandler
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Validate a SAML 1.1 Protocol Response      * @param samlResponse      * @param sigCrypto      * @param callbackHandler      * @throws WSSecurityException      */
specifier|public
name|void
name|validateSamlResponse
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Response
name|samlResponse
parameter_list|,
name|Crypto
name|sigCrypto
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Check the Status Code
if|if
condition|(
name|samlResponse
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
operator|||
name|samlResponse
operator|.
name|getStatus
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|null
operator|||
name|samlResponse
operator|.
name|getStatus
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Either the SAML Response Status or StatusCode is null"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|String
name|statusValue
init|=
name|samlResponse
operator|.
name|getStatus
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SAML1_STATUSCODE_SUCCESS
operator|.
name|equals
argument_list|(
name|statusValue
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"SAML Status code of "
operator|+
name|samlResponse
operator|.
name|getStatus
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|.
name|getValue
argument_list|()
operator|+
literal|"does not equal "
operator|+
name|SAML1_STATUSCODE_SUCCESS
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|validateResponseAgainstSchemas
argument_list|(
name|samlResponse
argument_list|)
expr_stmt|;
name|validateResponseSignature
argument_list|(
name|samlResponse
argument_list|,
name|sigCrypto
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
comment|// Validate Assertions
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Assertion
name|assertion
range|:
name|samlResponse
operator|.
name|getAssertions
argument_list|()
control|)
block|{
name|SamlAssertionWrapper
name|wrapper
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|validateAssertion
argument_list|(
name|wrapper
argument_list|,
name|sigCrypto
argument_list|,
name|callbackHandler
argument_list|,
name|samlResponse
operator|.
name|getDOM
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Validate the Response against the schemas      */
specifier|private
name|void
name|validateResponseAgainstSchemas
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Response
name|samlResponse
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Validate SAML Response against schemas
name|ValidatorSuite
name|schemaValidators
init|=
name|org
operator|.
name|opensaml
operator|.
name|Configuration
operator|.
name|getValidatorSuite
argument_list|(
literal|"saml2-core-schema-validator"
argument_list|)
decl_stmt|;
try|try
block|{
name|schemaValidators
operator|.
name|validate
argument_list|(
name|samlResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Saml Validation error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Validate the Response against the schemas      */
specifier|private
name|void
name|validateResponseAgainstSchemas
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Response
name|samlResponse
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Validate SAML Response against schemas
name|ValidatorSuite
name|schemaValidators
init|=
name|org
operator|.
name|opensaml
operator|.
name|Configuration
operator|.
name|getValidatorSuite
argument_list|(
literal|"saml1-core-schema-validator"
argument_list|)
decl_stmt|;
try|try
block|{
name|schemaValidators
operator|.
name|validate
argument_list|(
name|samlResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Saml Validation error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Validate the Response signature (if it exists)      */
specifier|private
name|void
name|validateResponseSignature
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Response
name|samlResponse
parameter_list|,
name|Crypto
name|sigCrypto
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
operator|!
name|samlResponse
operator|.
name|isSigned
argument_list|()
condition|)
block|{
return|return;
block|}
name|validateResponseSignature
argument_list|(
name|samlResponse
operator|.
name|getSignature
argument_list|()
argument_list|,
name|samlResponse
operator|.
name|getDOM
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|sigCrypto
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validate the Response signature (if it exists)      */
specifier|private
name|void
name|validateResponseSignature
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Response
name|samlResponse
parameter_list|,
name|Crypto
name|sigCrypto
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
operator|!
name|samlResponse
operator|.
name|isSigned
argument_list|()
condition|)
block|{
return|return;
block|}
name|validateResponseSignature
argument_list|(
name|samlResponse
operator|.
name|getSignature
argument_list|()
argument_list|,
name|samlResponse
operator|.
name|getDOM
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|sigCrypto
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validate the response signature      */
specifier|private
name|void
name|validateResponseSignature
parameter_list|(
name|Signature
name|signature
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Crypto
name|sigCrypto
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|RequestData
name|requestData
init|=
operator|new
name|RequestData
argument_list|()
decl_stmt|;
name|requestData
operator|.
name|setSigVerCrypto
argument_list|(
name|sigCrypto
argument_list|)
expr_stmt|;
name|WSSConfig
name|wssConfig
init|=
name|WSSConfig
operator|.
name|getNewInstance
argument_list|()
decl_stmt|;
name|requestData
operator|.
name|setWssConfig
argument_list|(
name|wssConfig
argument_list|)
expr_stmt|;
name|requestData
operator|.
name|setCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
expr_stmt|;
name|KeyInfo
name|keyInfo
init|=
name|signature
operator|.
name|getKeyInfo
argument_list|()
decl_stmt|;
name|SAMLKeyInfo
name|samlKeyInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|samlKeyInfo
operator|=
name|SAMLUtil
operator|.
name|getCredentialFromKeyInfo
argument_list|(
name|keyInfo
operator|.
name|getDOM
argument_list|()
argument_list|,
operator|new
name|WSSSAMLKeyInfoProcessor
argument_list|(
name|requestData
argument_list|,
operator|new
name|WSDocInfo
argument_list|(
name|doc
argument_list|)
argument_list|)
argument_list|,
name|sigCrypto
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Error in getting KeyInfo from SAML Response: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
if|if
condition|(
name|samlKeyInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"No KeyInfo supplied in the SAMLResponse signature"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
comment|// Validate Signature against profiles
name|validateSignatureAgainstProfiles
argument_list|(
name|signature
argument_list|,
name|samlKeyInfo
argument_list|)
expr_stmt|;
comment|// Now verify trust on the signature
name|Credential
name|trustCredential
init|=
operator|new
name|Credential
argument_list|()
decl_stmt|;
name|trustCredential
operator|.
name|setPublicKey
argument_list|(
name|samlKeyInfo
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|trustCredential
operator|.
name|setCertificates
argument_list|(
name|samlKeyInfo
operator|.
name|getCerts
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|signatureValidator
operator|.
name|validate
argument_list|(
name|trustCredential
argument_list|,
name|requestData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Error in validating signature on SAML Response: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Validate a signature against the profiles      */
specifier|private
name|void
name|validateSignatureAgainstProfiles
parameter_list|(
name|Signature
name|signature
parameter_list|,
name|SAMLKeyInfo
name|samlKeyInfo
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Validate Signature against profiles
name|SAMLSignatureProfileValidator
name|validator
init|=
operator|new
name|SAMLSignatureProfileValidator
argument_list|()
decl_stmt|;
try|try
block|{
name|validator
operator|.
name|validate
argument_list|(
name|signature
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValidationException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Error in validating the SAML Signature: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|BasicX509Credential
name|credential
init|=
operator|new
name|BasicX509Credential
argument_list|()
decl_stmt|;
if|if
condition|(
name|samlKeyInfo
operator|.
name|getCerts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|credential
operator|.
name|setEntityCertificate
argument_list|(
name|samlKeyInfo
operator|.
name|getCerts
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|samlKeyInfo
operator|.
name|getPublicKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|credential
operator|.
name|setPublicKey
argument_list|(
name|samlKeyInfo
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Can't get X509Certificate or PublicKey to verify signature"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|SignatureValidator
name|sigValidator
init|=
operator|new
name|SignatureValidator
argument_list|(
name|credential
argument_list|)
decl_stmt|;
try|try
block|{
name|sigValidator
operator|.
name|validate
argument_list|(
name|signature
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValidationException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Error in validating the SAML Signature: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Validate an internal Assertion      */
specifier|private
name|void
name|validateAssertion
parameter_list|(
name|SamlAssertionWrapper
name|assertion
parameter_list|,
name|Crypto
name|sigCrypto
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Credential
name|credential
init|=
operator|new
name|Credential
argument_list|()
decl_stmt|;
name|credential
operator|.
name|setSamlAssertion
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|RequestData
name|requestData
init|=
operator|new
name|RequestData
argument_list|()
decl_stmt|;
name|requestData
operator|.
name|setSigVerCrypto
argument_list|(
name|sigCrypto
argument_list|)
expr_stmt|;
name|WSSConfig
name|wssConfig
init|=
name|WSSConfig
operator|.
name|getNewInstance
argument_list|()
decl_stmt|;
name|requestData
operator|.
name|setWssConfig
argument_list|(
name|wssConfig
argument_list|)
expr_stmt|;
name|requestData
operator|.
name|setCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertion
operator|.
name|isSigned
argument_list|()
condition|)
block|{
if|if
condition|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|.
name|getDOM
argument_list|()
operator|.
name|setIdAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getDOM
argument_list|()
operator|.
name|setIdAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Verify the signature
try|try
block|{
name|Signature
name|sig
init|=
name|assertion
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|KeyInfo
name|keyInfo
init|=
name|sig
operator|.
name|getKeyInfo
argument_list|()
decl_stmt|;
name|SAMLKeyInfo
name|samlKeyInfo
init|=
name|SAMLUtil
operator|.
name|getCredentialDirectlyFromKeyInfo
argument_list|(
name|keyInfo
operator|.
name|getDOM
argument_list|()
argument_list|,
name|sigCrypto
argument_list|)
decl_stmt|;
name|assertion
operator|.
name|verifySignature
argument_list|(
name|samlKeyInfo
argument_list|)
expr_stmt|;
name|assertion
operator|.
name|parseHOKSubject
argument_list|(
operator|new
name|WSSSAMLKeyInfoProcessor
argument_list|(
name|requestData
argument_list|,
operator|new
name|WSDocInfo
argument_list|(
name|doc
argument_list|)
argument_list|)
argument_list|,
name|requestData
operator|.
name|getSigVerCrypto
argument_list|()
argument_list|,
name|requestData
operator|.
name|getCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Assertion failed signature validation"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// Validate the Assertion& verify trust in the signature
try|try
block|{
name|assertionValidator
operator|.
name|validate
argument_list|(
name|credential
argument_list|,
name|requestData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Assertion validation failed: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
specifier|private
name|Element
name|decryptAssertion
parameter_list|(
name|Element
name|encryptedDataDOM
parameter_list|,
name|Crypto
name|sigCrypto
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Element
name|encKeyElement
init|=
name|getNode
argument_list|(
name|encryptedDataDOM
argument_list|,
name|WSConstants
operator|.
name|ENC_NS
argument_list|,
literal|"EncryptedKey"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|encKeyElement
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"EncryptedKey element is not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|X509Certificate
name|cert
init|=
name|loadCertificate
argument_list|(
name|sigCrypto
argument_list|,
name|encKeyElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"X509Certificate cannot be retrieved from EncryptedKey element"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
comment|// now start decrypting
name|String
name|keyEncAlgo
init|=
name|getEncodingMethodAlgorithm
argument_list|(
name|encKeyElement
argument_list|)
decl_stmt|;
name|String
name|digestAlgo
init|=
name|getDigestMethodAlgorithm
argument_list|(
name|encKeyElement
argument_list|)
decl_stmt|;
name|Element
name|cipherValue
init|=
name|getNode
argument_list|(
name|encKeyElement
argument_list|,
name|WSConstants
operator|.
name|ENC_NS
argument_list|,
literal|"CipherValue"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|cipherValue
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"CipherValue element is not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
if|if
condition|(
name|callbackHandler
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"A CallbackHandler must be configured to decrypt encrypted Assertions"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|PrivateKey
name|key
init|=
literal|null
decl_stmt|;
try|try
block|{
name|key
operator|=
name|sigCrypto
operator|.
name|getPrivateKey
argument_list|(
name|cert
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Encrypted key can not be decrypted"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|Cipher
name|cipher
init|=
name|EncryptionUtils
operator|.
name|initCipherWithKey
argument_list|(
name|keyEncAlgo
argument_list|,
name|digestAlgo
argument_list|,
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decryptedBytes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|encryptedBytes
init|=
name|Base64Utility
operator|.
name|decode
argument_list|(
name|cipherValue
operator|.
name|getTextContent
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|decryptedBytes
operator|=
name|cipher
operator|.
name|doFinal
argument_list|(
name|encryptedBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Base64Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Base64 decoding has failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Encrypted key can not be decrypted"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|String
name|symKeyAlgo
init|=
name|getEncodingMethodAlgorithm
argument_list|(
name|encryptedDataDOM
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decryptedPayload
init|=
literal|null
decl_stmt|;
try|try
block|{
name|decryptedPayload
operator|=
name|decryptPayload
argument_list|(
name|encryptedDataDOM
argument_list|,
name|decryptedBytes
argument_list|,
name|symKeyAlgo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Payload can not be decrypted"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|Document
name|payloadDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|payloadDoc
operator|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|decryptedPayload
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|payloadDoc
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Payload document can not be created"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Element
name|getNode
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|NodeList
name|list
init|=
name|parent
operator|.
name|getElementsByTagNameNS
argument_list|(
name|ns
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|getLength
argument_list|()
operator|>=
name|index
operator|+
literal|1
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|list
operator|.
name|item
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|X509Certificate
name|loadCertificate
parameter_list|(
name|Crypto
name|crypto
parameter_list|,
name|Element
name|encKeyElement
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Element
name|certNode
init|=
name|getNode
argument_list|(
name|encKeyElement
argument_list|,
name|Constants
operator|.
name|SignatureSpecNS
argument_list|,
literal|"X509Certificate"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|certNode
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|SecurityUtils
operator|.
name|loadX509Certificate
argument_list|(
name|crypto
argument_list|,
name|certNode
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"X509Certificate can not be created"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
block|}
name|certNode
operator|=
name|getNode
argument_list|(
name|encKeyElement
argument_list|,
name|Constants
operator|.
name|SignatureSpecNS
argument_list|,
literal|"X509IssuerSerial"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|certNode
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|SecurityUtils
operator|.
name|loadX509IssuerSerial
argument_list|(
name|crypto
argument_list|,
name|certNode
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"X509Certificate can not be created"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getEncodingMethodAlgorithm
parameter_list|(
name|Element
name|parent
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Element
name|encMethod
init|=
name|getNode
argument_list|(
name|parent
argument_list|,
name|WSConstants
operator|.
name|ENC_NS
argument_list|,
literal|"EncryptionMethod"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|encMethod
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"EncryptionMethod element is not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
return|return
name|encMethod
operator|.
name|getAttribute
argument_list|(
literal|"Algorithm"
argument_list|)
return|;
block|}
specifier|private
name|String
name|getDigestMethodAlgorithm
parameter_list|(
name|Element
name|parent
parameter_list|)
block|{
name|Element
name|encMethod
init|=
name|getNode
argument_list|(
name|parent
argument_list|,
name|WSConstants
operator|.
name|ENC_NS
argument_list|,
literal|"EncryptionMethod"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|encMethod
operator|!=
literal|null
condition|)
block|{
name|Element
name|digestMethod
init|=
name|getNode
argument_list|(
name|encMethod
argument_list|,
name|WSConstants
operator|.
name|SIG_NS
argument_list|,
literal|"DigestMethod"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|digestMethod
operator|!=
literal|null
condition|)
block|{
return|return
name|digestMethod
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"Algorithm"
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|byte
index|[]
name|decryptPayload
parameter_list|(
name|Element
name|root
parameter_list|,
name|byte
index|[]
name|secretKeyBytes
parameter_list|,
name|String
name|symEncAlgo
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|SecretKey
name|key
init|=
name|WSSecurityUtil
operator|.
name|prepareSecretKey
argument_list|(
name|symEncAlgo
argument_list|,
name|secretKeyBytes
argument_list|)
decl_stmt|;
try|try
block|{
name|XMLCipher
name|xmlCipher
init|=
name|EncryptionUtils
operator|.
name|initXMLCipher
argument_list|(
name|symEncAlgo
argument_list|,
name|XMLCipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
name|xmlCipher
operator|.
name|decryptToByteArray
argument_list|(
name|root
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLEncryptionException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|UNSUPPORTED_ALGORITHM
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

