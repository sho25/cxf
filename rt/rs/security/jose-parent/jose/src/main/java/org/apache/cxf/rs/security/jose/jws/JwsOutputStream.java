begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_class
specifier|public
class|class
name|JwsOutputStream
extends|extends
name|FilterOutputStream
block|{
specifier|private
name|boolean
name|flushed
decl_stmt|;
specifier|private
name|JwsSignature
name|signature
decl_stmt|;
specifier|private
name|boolean
name|writeSignature
decl_stmt|;
specifier|public
name|JwsOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|JwsSignature
name|signature
parameter_list|,
name|boolean
name|writeSignature
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|signature
operator|=
name|signature
expr_stmt|;
name|this
operator|.
name|writeSignature
operator|=
name|writeSignature
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|Integer
operator|.
name|SIZE
operator|/
literal|8
argument_list|)
operator|.
name|putInt
argument_list|(
name|value
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|signature
operator|.
name|update
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|flushed
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|writeSignature
condition|)
block|{
name|byte
index|[]
name|finalBytes
init|=
name|signature
operator|.
name|sign
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'.'
block|}
argument_list|)
expr_stmt|;
name|Base64UrlUtility
operator|.
name|encodeAndStream
argument_list|(
name|finalBytes
argument_list|,
literal|0
argument_list|,
name|finalBytes
operator|.
name|length
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|flushed
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

