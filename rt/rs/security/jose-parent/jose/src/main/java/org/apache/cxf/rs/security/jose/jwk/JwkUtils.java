begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateCrtKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|basic
operator|.
name|JsonMapObjectReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|KeyManagementUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|PrivateKeyPasswordProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|KeyAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|AesCbcHmacJweDecryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|AesCbcHmacJweEncryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweDecryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweEncryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|KeyDecryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|KeyEncryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|PbesHmacAesWrapKeyDecryptionAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|PbesHmacAesWrapKeyEncryptionAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|MessageDigestUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JwkUtils
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|KeyType
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|JWK_REQUIRED_FIELDS_MAP
decl_stmt|;
static|static
block|{
name|JWK_REQUIRED_FIELDS_MAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|JWK_REQUIRED_FIELDS_MAP
operator|.
name|put
argument_list|(
name|KeyType
operator|.
name|RSA
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|,
name|JsonWebKey
operator|.
name|KEY_TYPE
argument_list|,
name|JsonWebKey
operator|.
name|RSA_MODULUS
argument_list|)
argument_list|)
expr_stmt|;
name|JWK_REQUIRED_FIELDS_MAP
operator|.
name|put
argument_list|(
name|KeyType
operator|.
name|EC
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|JsonWebKey
operator|.
name|EC_CURVE
argument_list|,
name|JsonWebKey
operator|.
name|KEY_TYPE
argument_list|,
name|JsonWebKey
operator|.
name|EC_X_COORDINATE
argument_list|,
name|JsonWebKey
operator|.
name|EC_Y_COORDINATE
argument_list|)
argument_list|)
expr_stmt|;
name|JWK_REQUIRED_FIELDS_MAP
operator|.
name|put
argument_list|(
name|KeyType
operator|.
name|OCTET
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|JsonWebKey
operator|.
name|OCTET_KEY_VALUE
argument_list|,
name|JsonWebKey
operator|.
name|KEY_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JwkUtils
parameter_list|()
block|{      }
specifier|public
specifier|static
name|String
name|getThumbprint
parameter_list|(
name|String
name|keySequence
parameter_list|)
block|{
return|return
name|getThumbprint
argument_list|(
name|readJwkKey
argument_list|(
name|keySequence
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getThumbprint
parameter_list|(
name|JsonWebKey
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|getRequiredFields
argument_list|(
name|key
operator|.
name|getKeyType
argument_list|()
argument_list|)
decl_stmt|;
name|JsonWebKey
name|thumbprintKey
init|=
operator|new
name|JsonWebKey
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|thumbprintKey
operator|.
name|setProperty
argument_list|(
name|f
argument_list|,
name|key
operator|.
name|getProperty
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|json
init|=
operator|new
name|JsonMapObjectReaderWriter
argument_list|()
operator|.
name|toJson
argument_list|(
name|thumbprintKey
argument_list|)
decl_stmt|;
name|byte
index|[]
name|digest
init|=
name|MessageDigestUtils
operator|.
name|createDigest
argument_list|(
name|json
argument_list|,
name|MessageDigestUtils
operator|.
name|ALGO_SHA_256
argument_list|)
decl_stmt|;
return|return
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|digest
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|(
name|KeyType
name|keyType
parameter_list|)
block|{
return|return
name|JWK_REQUIRED_FIELDS_MAP
operator|.
name|get
argument_list|(
name|keyType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|readJwkKey
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readJwkKey
argument_list|(
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|openStream
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|readJwkSet
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readJwkSet
argument_list|(
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|openStream
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|readJwkKey
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readJwkKey
argument_list|(
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|is
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|readJwkSet
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readJwkSet
argument_list|(
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|is
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|readJwkKey
parameter_list|(
name|String
name|jwkJson
parameter_list|)
block|{
return|return
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jsonToJwk
argument_list|(
name|jwkJson
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|readJwkSet
parameter_list|(
name|String
name|jwksJson
parameter_list|)
block|{
return|return
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jsonToJwkSet
argument_list|(
name|jwksJson
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jwkKeyToJson
parameter_list|(
name|JsonWebKey
name|jwkKey
parameter_list|)
block|{
return|return
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jwkToJson
argument_list|(
name|jwkKey
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|jwkKeyToJson
parameter_list|(
name|JsonWebKey
name|jwkKey
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|jwkKeyToJson
argument_list|(
name|jwkKey
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|jwkSetToJson
parameter_list|(
name|JsonWebKeys
name|jwkSet
parameter_list|)
block|{
return|return
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jwkSetToJson
argument_list|(
name|jwkSet
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|jwkSetToJson
parameter_list|(
name|JsonWebKeys
name|jwkSet
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|jwkSetToJson
argument_list|(
name|jwkSet
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|encodeJwkKey
parameter_list|(
name|JsonWebKey
name|jwkKey
parameter_list|)
block|{
return|return
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|jwkKeyToJson
argument_list|(
name|jwkKey
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encodeJwkSet
parameter_list|(
name|JsonWebKeys
name|jwkSet
parameter_list|)
block|{
return|return
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|jwkSetToJson
argument_list|(
name|jwkSet
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|decodeJwkKey
parameter_list|(
name|String
name|jwkJson
parameter_list|)
block|{
return|return
name|readJwkKey
argument_list|(
name|JoseUtils
operator|.
name|decodeToString
argument_list|(
name|jwkJson
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|decodeJwkSet
parameter_list|(
name|String
name|jwksJson
parameter_list|)
block|{
return|return
name|readJwkSet
argument_list|(
name|JoseUtils
operator|.
name|decodeToString
argument_list|(
name|jwksJson
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptJwkSet
parameter_list|(
name|JsonWebKeys
name|jwkSet
parameter_list|,
name|char
index|[]
name|password
parameter_list|)
block|{
return|return
name|encryptJwkSet
argument_list|(
name|jwkSet
argument_list|,
name|createDefaultEncryption
argument_list|(
name|password
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptJwkSet
parameter_list|(
name|JsonWebKeys
name|jwkSet
parameter_list|,
name|JweEncryptionProvider
name|jwe
parameter_list|)
block|{
return|return
name|jwe
operator|.
name|encrypt
argument_list|(
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jwkSetToJson
argument_list|(
name|jwkSet
argument_list|)
argument_list|)
argument_list|,
name|toJweHeaders
argument_list|(
literal|"jwk-set+json"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptJwkSet
parameter_list|(
name|JsonWebKeys
name|jwkSet
parameter_list|,
name|PublicKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|)
block|{
return|return
name|JweUtils
operator|.
name|encrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentAlgo
argument_list|,
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|jwkSetToJson
argument_list|(
name|jwkSet
argument_list|)
argument_list|)
argument_list|,
literal|"jwk-set+json"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|signJwkSet
parameter_list|(
name|JsonWebKeys
name|jwkSet
parameter_list|,
name|PrivateKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
return|return
name|JwsUtils
operator|.
name|sign
argument_list|(
name|key
argument_list|,
name|algo
argument_list|,
name|jwkSetToJson
argument_list|(
name|jwkSet
argument_list|)
argument_list|,
literal|"jwk-set+json"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptJwkSet
parameter_list|(
name|JsonWebKeys
name|jwkSet
parameter_list|,
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|)
block|{
return|return
name|JweUtils
operator|.
name|encrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentAlgo
argument_list|,
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|jwkSetToJson
argument_list|(
name|jwkSet
argument_list|)
argument_list|)
argument_list|,
literal|"jwk-set+json"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|decryptJwkSet
parameter_list|(
name|String
name|jsonJwkSet
parameter_list|,
name|char
index|[]
name|password
parameter_list|)
block|{
return|return
name|decryptJwkSet
argument_list|(
name|jsonJwkSet
argument_list|,
name|createDefaultDecryption
argument_list|(
name|password
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|decryptJwkSet
parameter_list|(
name|String
name|jsonJwkSet
parameter_list|,
name|JweDecryptionProvider
name|jwe
parameter_list|)
block|{
return|return
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jsonToJwkSet
argument_list|(
name|jwe
operator|.
name|decrypt
argument_list|(
name|jsonJwkSet
argument_list|)
operator|.
name|getContentText
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|decryptJwkSet
parameter_list|(
name|PrivateKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|ctAlgo
parameter_list|,
name|String
name|jsonJwkSet
parameter_list|)
block|{
return|return
name|readJwkSet
argument_list|(
name|toString
argument_list|(
name|JweUtils
operator|.
name|decrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|ctAlgo
argument_list|,
name|jsonJwkSet
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|verifyJwkSet
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|keyAlgo
parameter_list|,
name|String
name|jsonJwk
parameter_list|)
block|{
return|return
name|readJwkSet
argument_list|(
name|JwsUtils
operator|.
name|verify
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|jsonJwk
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|decryptJwkSet
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|ctAlgo
parameter_list|,
name|String
name|jsonJwkSet
parameter_list|)
block|{
return|return
name|readJwkSet
argument_list|(
name|toString
argument_list|(
name|JweUtils
operator|.
name|decrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|ctAlgo
argument_list|,
name|jsonJwkSet
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|decryptJwkSet
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|char
index|[]
name|password
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|decryptJwkSet
argument_list|(
name|is
argument_list|,
name|createDefaultDecryption
argument_list|(
name|password
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|decryptJwkSet
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|JweDecryptionProvider
name|jwe
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jsonToJwkSet
argument_list|(
name|jwe
operator|.
name|decrypt
argument_list|(
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|is
argument_list|)
argument_list|)
operator|.
name|getContentText
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptJwkKey
parameter_list|(
name|JsonWebKey
name|jwkKey
parameter_list|,
name|char
index|[]
name|password
parameter_list|)
block|{
return|return
name|encryptJwkKey
argument_list|(
name|jwkKey
argument_list|,
name|createDefaultEncryption
argument_list|(
name|password
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptJwkKey
parameter_list|(
name|JsonWebKey
name|jwkKey
parameter_list|,
name|JweEncryptionProvider
name|jwe
parameter_list|)
block|{
return|return
name|jwe
operator|.
name|encrypt
argument_list|(
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jwkToJson
argument_list|(
name|jwkKey
argument_list|)
argument_list|)
argument_list|,
name|toJweHeaders
argument_list|(
literal|"jwk+json"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptJwkKey
parameter_list|(
name|JsonWebKey
name|jwkKey
parameter_list|,
name|PublicKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|)
block|{
return|return
name|JweUtils
operator|.
name|encrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentAlgo
argument_list|,
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|jwkKeyToJson
argument_list|(
name|jwkKey
argument_list|)
argument_list|)
argument_list|,
literal|"jwk+json"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptJwkKey
parameter_list|(
name|JsonWebKey
name|jwkKey
parameter_list|,
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|)
block|{
return|return
name|JweUtils
operator|.
name|encrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentAlgo
argument_list|,
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|jwkKeyToJson
argument_list|(
name|jwkKey
argument_list|)
argument_list|)
argument_list|,
literal|"jwk+json"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|signJwkKey
parameter_list|(
name|JsonWebKey
name|jwkKey
parameter_list|,
name|PrivateKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
return|return
name|JwsUtils
operator|.
name|sign
argument_list|(
name|key
argument_list|,
name|algo
argument_list|,
name|jwkKeyToJson
argument_list|(
name|jwkKey
argument_list|)
argument_list|,
literal|"jwk+json"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|decryptJwkKey
parameter_list|(
name|String
name|jsonJwkKey
parameter_list|,
name|char
index|[]
name|password
parameter_list|)
block|{
return|return
name|decryptJwkKey
argument_list|(
name|jsonJwkKey
argument_list|,
name|createDefaultDecryption
argument_list|(
name|password
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|decryptJwkKey
parameter_list|(
name|PrivateKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|ctAlgo
parameter_list|,
name|String
name|jsonJwk
parameter_list|)
block|{
return|return
name|readJwkKey
argument_list|(
name|toString
argument_list|(
name|JweUtils
operator|.
name|decrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|ctAlgo
argument_list|,
name|jsonJwk
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|verifyJwkKey
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|keyAlgo
parameter_list|,
name|String
name|jsonJwk
parameter_list|)
block|{
return|return
name|readJwkKey
argument_list|(
name|JwsUtils
operator|.
name|verify
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|jsonJwk
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|decryptJwkKey
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|ctAlgo
parameter_list|,
name|String
name|jsonJwk
parameter_list|)
block|{
return|return
name|readJwkKey
argument_list|(
name|toString
argument_list|(
name|JweUtils
operator|.
name|decrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|ctAlgo
argument_list|,
name|jsonJwk
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|decryptJwkKey
parameter_list|(
name|String
name|jsonJwkKey
parameter_list|,
name|JweDecryptionProvider
name|jwe
parameter_list|)
block|{
return|return
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jsonToJwk
argument_list|(
name|jwe
operator|.
name|decrypt
argument_list|(
name|jsonJwkKey
argument_list|)
operator|.
name|getContentText
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|decryptJwkKey
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|char
index|[]
name|password
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|decryptJwkKey
argument_list|(
name|is
argument_list|,
name|createDefaultDecryption
argument_list|(
name|password
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|decryptJwkKey
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|JweDecryptionProvider
name|jwe
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JwkReaderWriter
argument_list|()
operator|.
name|jsonToJwk
argument_list|(
name|jwe
operator|.
name|decrypt
argument_list|(
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|is
argument_list|)
argument_list|)
operator|.
name|getContentText
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|loadPublicJwkSet
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
return|return
name|loadJwkSet
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|loadJwkSet
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|PrivateKeyPasswordProvider
name|cb
parameter_list|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|)
decl_stmt|;
name|JsonWebKeys
name|jwkSet
init|=
name|key
operator|!=
literal|null
condition|?
operator|(
name|JsonWebKeys
operator|)
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|jwkSet
operator|==
literal|null
condition|)
block|{
name|jwkSet
operator|=
name|loadJwkSet
argument_list|(
name|props
argument_list|,
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
argument_list|,
name|cb
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|jwkSet
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jwkSet
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|loadJwkSet
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|PrivateKeyPasswordProvider
name|cb
parameter_list|)
block|{
name|JweDecryptionProvider
name|decryption
init|=
name|cb
operator|!=
literal|null
condition|?
operator|new
name|AesCbcHmacJweDecryption
argument_list|(
operator|new
name|PbesHmacAesWrapKeyDecryptionAlgorithm
argument_list|(
name|cb
operator|.
name|getPassword
argument_list|(
name|props
argument_list|)
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
name|loadJwkSet
argument_list|(
name|props
argument_list|,
name|bus
argument_list|,
name|decryption
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|loadJwkSet
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|JweDecryptionProvider
name|jwe
parameter_list|)
block|{
name|String
name|keyContent
init|=
literal|null
decl_stmt|;
name|String
name|keyStoreLoc
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStoreLoc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|JoseUtils
operator|.
name|getResourceStream
argument_list|(
name|keyStoreLoc
argument_list|,
name|bus
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JwkException
argument_list|(
literal|"Error in loading keystore location: "
operator|+
name|keyStoreLoc
argument_list|)
throw|;
block|}
name|keyContent
operator|=
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|JwkException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|keyContent
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_JWKSET
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyContent
operator|==
literal|null
condition|)
block|{
name|keyContent
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_JWKKEY
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jwe
operator|!=
literal|null
condition|)
block|{
name|keyContent
operator|=
name|jwe
operator|.
name|decrypt
argument_list|(
name|keyContent
argument_list|)
operator|.
name|getContentText
argument_list|()
expr_stmt|;
block|}
name|JwkReaderWriter
name|reader
init|=
operator|new
name|JwkReaderWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_JWKKEY
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|reader
operator|.
name|jsonToJwkSet
argument_list|(
name|keyContent
argument_list|)
return|;
block|}
name|JsonWebKey
name|jwk
init|=
name|reader
operator|.
name|jsonToJwk
argument_list|(
name|keyContent
argument_list|)
decl_stmt|;
return|return
operator|new
name|JsonWebKeys
argument_list|(
name|jwk
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|loadJsonWebKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|)
block|{
return|return
name|loadJsonWebKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|keyOper
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|loadJsonWebKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|,
name|String
name|inHeaderKid
parameter_list|)
block|{
name|PrivateKeyPasswordProvider
name|cb
init|=
name|KeyManagementUtils
operator|.
name|loadPasswordProvider
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|keyOper
argument_list|)
decl_stmt|;
name|JsonWebKeys
name|jwkSet
init|=
name|loadJwkSet
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|cb
argument_list|)
decl_stmt|;
name|String
name|kid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inHeaderKid
operator|!=
literal|null
operator|&&
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ACCEPT_PUBLIC_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|kid
operator|=
name|inHeaderKid
expr_stmt|;
block|}
else|else
block|{
name|kid
operator|=
name|KeyManagementUtils
operator|.
name|getKeyId
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|,
name|keyOper
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
return|return
name|jwkSet
operator|.
name|getKey
argument_list|(
name|kid
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|keyOper
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|JsonWebKey
argument_list|>
name|keys
init|=
name|jwkSet
operator|.
name|getKeyOperationMap
argument_list|()
operator|.
name|get
argument_list|(
name|keyOper
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
operator|&&
name|keys
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|keys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|JsonWebKey
argument_list|>
name|loadJsonWebKeys
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|)
block|{
name|PrivateKeyPasswordProvider
name|cb
init|=
name|KeyManagementUtils
operator|.
name|loadPasswordProvider
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|keyOper
argument_list|)
decl_stmt|;
name|JsonWebKeys
name|jwkSet
init|=
name|loadJwkSet
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|cb
argument_list|)
decl_stmt|;
name|String
name|kid
init|=
name|KeyManagementUtils
operator|.
name|getKeyId
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|,
name|keyOper
argument_list|)
decl_stmt|;
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|jwkSet
operator|.
name|getKey
argument_list|(
name|kid
argument_list|)
argument_list|)
return|;
block|}
name|String
name|kids
init|=
name|KeyManagementUtils
operator|.
name|getKeyId
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIASES
argument_list|,
name|keyOper
argument_list|)
decl_stmt|;
if|if
condition|(
name|kids
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|values
init|=
name|kids
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JsonWebKey
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|jwkSet
operator|.
name|getKey
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
if|if
condition|(
name|keyOper
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|JsonWebKey
argument_list|>
name|keys
init|=
name|jwkSet
operator|.
name|getKeyOperationMap
argument_list|()
operator|.
name|get
argument_list|(
name|keyOper
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
operator|&&
name|keys
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|keys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|RSAPublicKey
name|toRSAPublicKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|toRSAPublicKey
argument_list|(
name|jwk
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RSAPublicKey
name|toRSAPublicKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|boolean
name|checkX509
parameter_list|)
block|{
name|String
name|encodedModulus
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_MODULUS
argument_list|)
decl_stmt|;
name|String
name|encodedPublicExponent
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedModulus
operator|!=
literal|null
condition|)
block|{
return|return
name|CryptoUtils
operator|.
name|getRSAPublicKey
argument_list|(
name|encodedModulus
argument_list|,
name|encodedPublicExponent
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|checkX509
condition|)
block|{
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|chain
init|=
name|toX509CertificateChain
argument_list|(
name|jwk
argument_list|)
decl_stmt|;
return|return
operator|(
name|RSAPublicKey
operator|)
name|chain
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|toX509CertificateChain
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|base64EncodedChain
init|=
name|jwk
operator|.
name|getX509Chain
argument_list|()
decl_stmt|;
return|return
name|KeyManagementUtils
operator|.
name|toX509CertificateChain
argument_list|(
name|base64EncodedChain
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromECPublicKey
parameter_list|(
name|ECPublicKey
name|pk
parameter_list|,
name|String
name|curve
parameter_list|)
block|{
return|return
name|fromECPublicKey
argument_list|(
name|pk
argument_list|,
name|curve
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromECPublicKey
parameter_list|(
name|ECPublicKey
name|pk
parameter_list|,
name|String
name|curve
parameter_list|,
name|String
name|kid
parameter_list|)
block|{
name|JsonWebKey
name|jwk
init|=
name|prepareECJwk
argument_list|(
name|curve
argument_list|,
name|kid
argument_list|)
decl_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_X_COORDINATE
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pk
operator|.
name|getW
argument_list|()
operator|.
name|getAffineX
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_Y_COORDINATE
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pk
operator|.
name|getW
argument_list|()
operator|.
name|getAffineY
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jwk
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromECPrivateKey
parameter_list|(
name|ECPrivateKey
name|pk
parameter_list|,
name|String
name|curve
parameter_list|)
block|{
return|return
name|fromECPrivateKey
argument_list|(
name|pk
argument_list|,
name|curve
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromECPrivateKey
parameter_list|(
name|ECPrivateKey
name|pk
parameter_list|,
name|String
name|curve
parameter_list|,
name|String
name|kid
parameter_list|)
block|{
name|JsonWebKey
name|jwk
init|=
name|prepareECJwk
argument_list|(
name|curve
argument_list|,
name|kid
argument_list|)
decl_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_PRIVATE_KEY
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pk
operator|.
name|getS
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jwk
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromRSAPublicKey
parameter_list|(
name|RSAPublicKey
name|pk
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
return|return
name|fromRSAPublicKey
argument_list|(
name|pk
argument_list|,
name|algo
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromRSAPublicKey
parameter_list|(
name|RSAPublicKey
name|pk
parameter_list|,
name|String
name|algo
parameter_list|,
name|String
name|kid
parameter_list|)
block|{
name|JsonWebKey
name|jwk
init|=
name|prepareRSAJwk
argument_list|(
name|pk
operator|.
name|getModulus
argument_list|()
argument_list|,
name|algo
argument_list|,
name|kid
argument_list|)
decl_stmt|;
name|String
name|encodedPublicExponent
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pk
operator|.
name|getPublicExponent
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|,
name|encodedPublicExponent
argument_list|)
expr_stmt|;
return|return
name|jwk
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromPublicKey
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|algoProp
parameter_list|)
block|{
name|JsonWebKey
name|jwk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|RSAPublicKey
condition|)
block|{
name|String
name|algo
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|algoProp
argument_list|)
decl_stmt|;
name|jwk
operator|=
name|JwkUtils
operator|.
name|fromRSAPublicKey
argument_list|(
operator|(
name|RSAPublicKey
operator|)
name|key
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jwk
operator|=
name|JwkUtils
operator|.
name|fromECPublicKey
argument_list|(
operator|(
name|ECPublicKey
operator|)
name|key
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_EC_CURVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|kid
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|)
decl_stmt|;
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
name|jwk
operator|.
name|setKeyId
argument_list|(
name|kid
argument_list|)
expr_stmt|;
block|}
return|return
name|jwk
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromX509CertificateChain
parameter_list|(
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|chain
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
name|JsonWebKey
name|jwk
init|=
operator|new
name|JsonWebKey
argument_list|()
decl_stmt|;
name|jwk
operator|.
name|setAlgorithm
argument_list|(
name|algo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|encodedChain
init|=
name|KeyManagementUtils
operator|.
name|encodeX509CertificateChain
argument_list|(
name|chain
argument_list|)
decl_stmt|;
name|jwk
operator|.
name|setX509Chain
argument_list|(
name|encodedChain
argument_list|)
expr_stmt|;
return|return
name|jwk
return|;
block|}
specifier|public
specifier|static
name|RSAPrivateKey
name|toRSAPrivateKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
name|String
name|encodedModulus
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_MODULUS
argument_list|)
decl_stmt|;
name|String
name|encodedPrivateExponent
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PRIVATE_EXP
argument_list|)
decl_stmt|;
name|String
name|encodedPrimeP
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_FIRST_PRIME_FACTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedPrimeP
operator|==
literal|null
condition|)
block|{
return|return
name|CryptoUtils
operator|.
name|getRSAPrivateKey
argument_list|(
name|encodedModulus
argument_list|,
name|encodedPrivateExponent
argument_list|)
return|;
block|}
name|String
name|encodedPublicExponent
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedPublicExponent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JoseException
argument_list|(
literal|"JWK without the public exponent can not be converted to RSAPrivateKey"
argument_list|)
throw|;
block|}
name|String
name|encodedPrimeQ
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_SECOND_PRIME_FACTOR
argument_list|)
decl_stmt|;
name|String
name|encodedPrimeExpP
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_FIRST_PRIME_CRT
argument_list|)
decl_stmt|;
name|String
name|encodedPrimeExpQ
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_SECOND_PRIME_CRT
argument_list|)
decl_stmt|;
name|String
name|encodedCrtCoefficient
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_FIRST_CRT_COEFFICIENT
argument_list|)
decl_stmt|;
return|return
name|CryptoUtils
operator|.
name|getRSAPrivateKey
argument_list|(
name|encodedModulus
argument_list|,
name|encodedPublicExponent
argument_list|,
name|encodedPrivateExponent
argument_list|,
name|encodedPrimeP
argument_list|,
name|encodedPrimeQ
argument_list|,
name|encodedPrimeExpP
argument_list|,
name|encodedPrimeExpQ
argument_list|,
name|encodedCrtCoefficient
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromRSAPrivateKey
parameter_list|(
name|RSAPrivateKey
name|pk
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
return|return
name|fromRSAPrivateKey
argument_list|(
name|pk
argument_list|,
name|algo
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromRSAPrivateKey
parameter_list|(
name|RSAPrivateKey
name|pk
parameter_list|,
name|String
name|algo
parameter_list|,
name|String
name|kid
parameter_list|)
block|{
name|JsonWebKey
name|jwk
init|=
name|prepareRSAJwk
argument_list|(
name|pk
operator|.
name|getModulus
argument_list|()
argument_list|,
name|algo
argument_list|,
name|kid
argument_list|)
decl_stmt|;
name|String
name|encodedPrivateExponent
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pk
operator|.
name|getPrivateExponent
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PRIVATE_EXP
argument_list|,
name|encodedPrivateExponent
argument_list|)
expr_stmt|;
if|if
condition|(
name|pk
operator|instanceof
name|RSAPrivateCrtKey
condition|)
block|{
name|RSAPrivateCrtKey
name|pkCrt
init|=
operator|(
name|RSAPrivateCrtKey
operator|)
name|pk
decl_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pkCrt
operator|.
name|getPublicExponent
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_FIRST_PRIME_FACTOR
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pkCrt
operator|.
name|getPrimeP
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_SECOND_PRIME_FACTOR
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pkCrt
operator|.
name|getPrimeQ
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_FIRST_PRIME_CRT
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pkCrt
operator|.
name|getPrimeExponentP
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_SECOND_PRIME_CRT
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pkCrt
operator|.
name|getPrimeExponentQ
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_FIRST_CRT_COEFFICIENT
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|pkCrt
operator|.
name|getCrtCoefficient
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// "oth" can be populated too if needed
return|return
name|jwk
return|;
block|}
specifier|public
specifier|static
name|ECPublicKey
name|toECPublicKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
name|String
name|eCurve
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_CURVE
argument_list|)
decl_stmt|;
name|String
name|encodedXCoord
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_X_COORDINATE
argument_list|)
decl_stmt|;
name|String
name|encodedYCoord
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_Y_COORDINATE
argument_list|)
decl_stmt|;
return|return
name|CryptoUtils
operator|.
name|getECPublicKey
argument_list|(
name|eCurve
argument_list|,
name|encodedXCoord
argument_list|,
name|encodedYCoord
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ECPrivateKey
name|toECPrivateKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
name|String
name|eCurve
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_CURVE
argument_list|)
decl_stmt|;
name|String
name|encodedPrivateKey
init|=
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_PRIVATE_KEY
argument_list|)
decl_stmt|;
return|return
name|CryptoUtils
operator|.
name|getECPrivateKey
argument_list|(
name|eCurve
argument_list|,
name|encodedPrivateKey
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|toSecretKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|OCTET_KEY_VALUE
argument_list|)
argument_list|,
name|AlgorithmUtils
operator|.
name|toJavaName
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromSecretKey
parameter_list|(
name|SecretKey
name|secretKey
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
return|return
name|fromSecretKey
argument_list|(
name|secretKey
argument_list|,
name|algo
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonWebKey
name|fromSecretKey
parameter_list|(
name|SecretKey
name|secretKey
parameter_list|,
name|String
name|algo
parameter_list|,
name|String
name|kid
parameter_list|)
block|{
if|if
condition|(
operator|!
name|AlgorithmUtils
operator|.
name|isOctet
argument_list|(
name|algo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JwkException
argument_list|(
literal|"Invalid algorithm"
argument_list|)
throw|;
block|}
name|JsonWebKey
name|jwk
init|=
operator|new
name|JsonWebKey
argument_list|()
decl_stmt|;
name|jwk
operator|.
name|setKeyType
argument_list|(
name|KeyType
operator|.
name|OCTET
argument_list|)
expr_stmt|;
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
name|jwk
operator|.
name|setKeyId
argument_list|(
name|kid
argument_list|)
expr_stmt|;
block|}
name|jwk
operator|.
name|setAlgorithm
argument_list|(
name|algo
argument_list|)
expr_stmt|;
name|String
name|encodedSecretKey
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|secretKey
operator|.
name|getEncoded
argument_list|()
argument_list|)
decl_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|OCTET_KEY_VALUE
argument_list|,
name|encodedSecretKey
argument_list|)
expr_stmt|;
return|return
name|jwk
return|;
block|}
specifier|private
specifier|static
name|JweEncryptionProvider
name|createDefaultEncryption
parameter_list|(
name|char
index|[]
name|password
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryption
init|=
operator|new
name|PbesHmacAesWrapKeyEncryptionAlgorithm
argument_list|(
name|password
argument_list|,
name|KeyAlgorithm
operator|.
name|PBES2_HS256_A128KW
argument_list|)
decl_stmt|;
return|return
operator|new
name|AesCbcHmacJweEncryption
argument_list|(
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
argument_list|,
name|keyEncryption
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|JweDecryptionProvider
name|createDefaultDecryption
parameter_list|(
name|char
index|[]
name|password
parameter_list|)
block|{
name|KeyDecryptionProvider
name|keyDecryption
init|=
operator|new
name|PbesHmacAesWrapKeyDecryptionAlgorithm
argument_list|(
name|password
argument_list|)
decl_stmt|;
return|return
operator|new
name|AesCbcHmacJweDecryption
argument_list|(
name|keyDecryption
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|JsonWebKey
name|prepareRSAJwk
parameter_list|(
name|BigInteger
name|modulus
parameter_list|,
name|String
name|algo
parameter_list|,
name|String
name|kid
parameter_list|)
block|{
name|JsonWebKey
name|jwk
init|=
operator|new
name|JsonWebKey
argument_list|()
decl_stmt|;
name|jwk
operator|.
name|setKeyType
argument_list|(
name|KeyType
operator|.
name|RSA
argument_list|)
expr_stmt|;
if|if
condition|(
name|algo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|AlgorithmUtils
operator|.
name|isRsa
argument_list|(
name|algo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JwkException
argument_list|(
literal|"Invalid algorithm"
argument_list|)
throw|;
block|}
name|jwk
operator|.
name|setAlgorithm
argument_list|(
name|algo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
name|jwk
operator|.
name|setKeyId
argument_list|(
name|kid
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|modulusBytes
init|=
name|modulus
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|int
name|extraBytesLength
init|=
name|modulusBytes
operator|.
name|length
operator|-
name|modulus
operator|.
name|bitLength
argument_list|()
operator|/
literal|8
decl_stmt|;
if|if
condition|(
name|extraBytesLength
operator|>
literal|0
condition|)
block|{
name|modulusBytes
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|modulusBytes
argument_list|,
name|extraBytesLength
argument_list|,
name|modulusBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|String
name|encodedModulus
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|modulusBytes
argument_list|)
decl_stmt|;
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_MODULUS
argument_list|,
name|encodedModulus
argument_list|)
expr_stmt|;
return|return
name|jwk
return|;
block|}
specifier|private
specifier|static
name|JsonWebKey
name|prepareECJwk
parameter_list|(
name|String
name|curve
parameter_list|,
name|String
name|kid
parameter_list|)
block|{
name|JsonWebKey
name|jwk
init|=
operator|new
name|JsonWebKey
argument_list|()
decl_stmt|;
name|jwk
operator|.
name|setKeyType
argument_list|(
name|KeyType
operator|.
name|EC
argument_list|)
expr_stmt|;
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
name|jwk
operator|.
name|setKeyId
argument_list|(
name|kid
argument_list|)
expr_stmt|;
block|}
name|jwk
operator|.
name|setProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_CURVE
argument_list|,
name|curve
argument_list|)
expr_stmt|;
return|return
name|jwk
return|;
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|JweHeaders
name|toJweHeaders
parameter_list|(
name|String
name|ct
parameter_list|)
block|{
return|return
operator|new
name|JweHeaders
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|singletonMap
argument_list|(
name|JoseConstants
operator|.
name|HEADER_CONTENT_TYPE
argument_list|,
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|includeCertChain
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|JoseHeaders
name|headers
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
if|if
condition|(
name|KeyType
operator|.
name|RSA
operator|.
name|equals
argument_list|(
name|jwk
operator|.
name|getKeyType
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|chain
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|X509_CHAIN
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|chain
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|setX509Chain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|includePublicKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|JoseHeaders
name|headers
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
if|if
condition|(
name|KeyType
operator|.
name|RSA
operator|.
name|equals
argument_list|(
name|jwk
operator|.
name|getKeyType
argument_list|()
argument_list|)
condition|)
block|{
name|JsonWebKey
name|jwkPublic
init|=
name|JwkUtils
operator|.
name|fromRSAPublicKey
argument_list|(
name|JwkUtils
operator|.
name|toRSAPublicKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|algo
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwk
operator|.
name|getKeyId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jwkPublic
operator|.
name|setKeyId
argument_list|(
name|jwk
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|headers
operator|.
name|setJsonWebKey
argument_list|(
name|jwkPublic
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

