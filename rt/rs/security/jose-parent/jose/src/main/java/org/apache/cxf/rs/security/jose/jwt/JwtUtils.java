begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|basic
operator|.
name|JsonMapObjectReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JwtUtils
block|{
specifier|private
name|JwtUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|String
name|claimsToJson
parameter_list|(
name|JwtClaims
name|claims
parameter_list|)
block|{
return|return
name|claimsToJson
argument_list|(
name|claims
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|claimsToJson
parameter_list|(
name|JwtClaims
name|claims
parameter_list|,
name|JsonMapObjectReaderWriter
name|writer
parameter_list|)
block|{
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
operator|new
name|JsonMapObjectReaderWriter
argument_list|()
expr_stmt|;
block|}
return|return
name|writer
operator|.
name|toJson
argument_list|(
name|claims
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JwtClaims
name|jsonToClaims
parameter_list|(
name|String
name|json
parameter_list|)
block|{
return|return
operator|new
name|JwtClaims
argument_list|(
operator|new
name|JsonMapObjectReaderWriter
argument_list|()
operator|.
name|fromJson
argument_list|(
name|json
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|validateJwtExpiry
parameter_list|(
name|JwtClaims
name|claims
parameter_list|,
name|int
name|clockOffset
parameter_list|,
name|boolean
name|claimRequired
parameter_list|)
block|{
name|Long
name|expiryTime
init|=
name|claims
operator|.
name|getExpiryTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|expiryTime
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|claimRequired
condition|)
block|{
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"The token has expired"
argument_list|)
throw|;
block|}
return|return;
block|}
name|Date
name|rightNow
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expiresDate
init|=
operator|new
name|Date
argument_list|(
name|expiryTime
operator|*
literal|1000L
argument_list|)
decl_stmt|;
if|if
condition|(
name|clockOffset
operator|!=
literal|0
condition|)
block|{
name|expiresDate
operator|.
name|setTime
argument_list|(
name|expiresDate
operator|.
name|getTime
argument_list|()
operator|+
operator|(
name|long
operator|)
name|clockOffset
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expiresDate
operator|.
name|before
argument_list|(
name|rightNow
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"The token has expired"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|validateJwtNotBefore
parameter_list|(
name|JwtClaims
name|claims
parameter_list|,
name|int
name|clockOffset
parameter_list|,
name|boolean
name|claimRequired
parameter_list|)
block|{
name|Long
name|notBeforeTime
init|=
name|claims
operator|.
name|getNotBefore
argument_list|()
decl_stmt|;
if|if
condition|(
name|notBeforeTime
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|claimRequired
condition|)
block|{
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"The token cannot be accepted yet"
argument_list|)
throw|;
block|}
return|return;
block|}
name|Date
name|validCreation
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|long
name|currentTime
init|=
name|validCreation
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|clockOffset
operator|!=
literal|0
condition|)
block|{
name|validCreation
operator|.
name|setTime
argument_list|(
name|currentTime
operator|+
operator|(
name|long
operator|)
name|clockOffset
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
name|Date
name|notBeforeDate
init|=
operator|new
name|Date
argument_list|(
name|notBeforeTime
operator|*
literal|1000L
argument_list|)
decl_stmt|;
comment|// Check to see if the not before time is in the future
if|if
condition|(
name|notBeforeDate
operator|.
name|after
argument_list|(
name|validCreation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"The token cannot be accepted yet"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|validateJwtIssuedAt
parameter_list|(
name|JwtClaims
name|claims
parameter_list|,
name|int
name|timeToLive
parameter_list|,
name|int
name|clockOffset
parameter_list|,
name|boolean
name|claimRequired
parameter_list|)
block|{
name|Long
name|issuedAtInSecs
init|=
name|claims
operator|.
name|getIssuedAt
argument_list|()
decl_stmt|;
if|if
condition|(
name|issuedAtInSecs
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|claimRequired
condition|)
block|{
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"Invalid issuedAt"
argument_list|)
throw|;
block|}
return|return;
block|}
name|Date
name|createdDate
init|=
operator|new
name|Date
argument_list|(
name|issuedAtInSecs
operator|*
literal|1000L
argument_list|)
decl_stmt|;
name|Date
name|validCreation
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|long
name|currentTime
init|=
name|validCreation
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|clockOffset
operator|>
literal|0
condition|)
block|{
name|validCreation
operator|.
name|setTime
argument_list|(
name|currentTime
operator|+
operator|(
name|long
operator|)
name|clockOffset
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
comment|// Check to see if the IssuedAt time is in the future
if|if
condition|(
name|createdDate
operator|.
name|after
argument_list|(
name|validCreation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"Invalid issuedAt"
argument_list|)
throw|;
block|}
if|if
condition|(
name|timeToLive
operator|>
literal|0
condition|)
block|{
comment|// Calculate the time that is allowed for the message to travel
name|currentTime
operator|-=
operator|(
name|long
operator|)
name|timeToLive
operator|*
literal|1000L
expr_stmt|;
name|validCreation
operator|.
name|setTime
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
comment|// Validate the time it took the message to travel
if|if
condition|(
name|createdDate
operator|.
name|before
argument_list|(
name|validCreation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"Invalid issuedAt"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|validateJwtAudienceRestriction
parameter_list|(
name|JwtClaims
name|claims
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|String
name|expectedAudience
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|JwtConstants
operator|.
name|EXPECTED_CLAIM_AUDIENCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedAudience
operator|==
literal|null
condition|)
block|{
name|expectedAudience
operator|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|Message
operator|.
name|REQUEST_URL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedAudience
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|audience
range|:
name|claims
operator|.
name|getAudiences
argument_list|()
control|)
block|{
if|if
condition|(
name|expectedAudience
operator|.
name|equals
argument_list|(
name|audience
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"Invalid audience restriction"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|void
name|validateTokenClaims
parameter_list|(
name|JwtClaims
name|claims
parameter_list|,
name|int
name|timeToLive
parameter_list|,
name|int
name|clockOffset
parameter_list|,
name|boolean
name|validateAudienceRestriction
parameter_list|)
block|{
comment|// If we have no issued time then we need to have an expiry
name|boolean
name|expiredRequired
init|=
name|claims
operator|.
name|getIssuedAt
argument_list|()
operator|==
literal|null
decl_stmt|;
name|validateJwtExpiry
argument_list|(
name|claims
argument_list|,
name|clockOffset
argument_list|,
name|expiredRequired
argument_list|)
expr_stmt|;
name|validateJwtNotBefore
argument_list|(
name|claims
argument_list|,
name|clockOffset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// If we have no expiry then we must have an issued at
name|boolean
name|issuedAtRequired
init|=
name|claims
operator|.
name|getExpiryTime
argument_list|()
operator|==
literal|null
decl_stmt|;
name|validateJwtIssuedAt
argument_list|(
name|claims
argument_list|,
name|timeToLive
argument_list|,
name|clockOffset
argument_list|,
name|issuedAtRequired
argument_list|)
expr_stmt|;
if|if
condition|(
name|validateAudienceRestriction
condition|)
block|{
name|validateJwtAudienceRestriction
argument_list|(
name|claims
argument_list|,
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

