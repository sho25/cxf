begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_class
specifier|public
class|class
name|EcDsaJwsSignatureProvider
extends|extends
name|PrivateKeyJwsSignatureProvider
block|{
specifier|public
name|EcDsaJwsSignatureProvider
parameter_list|(
name|ECPrivateKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EcDsaJwsSignatureProvider
parameter_list|(
name|ECPrivateKey
name|key
parameter_list|,
name|AlgorithmParameterSpec
name|spec
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|spec
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EcDsaJwsSignatureProvider
parameter_list|(
name|ECPrivateKey
name|key
parameter_list|,
name|SecureRandom
name|random
parameter_list|,
name|AlgorithmParameterSpec
name|spec
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|random
argument_list|,
name|spec
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isValidAlgorithmFamily
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
return|return
name|AlgorithmUtils
operator|.
name|isEcDsaSign
argument_list|(
name|algo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|JwsSignature
name|doCreateJwsSignature
parameter_list|(
name|Signature
name|s
parameter_list|)
block|{
return|return
operator|new
name|EcDsaPrivateKeyJwsSignature
argument_list|(
name|s
argument_list|,
name|EcDsaJwsSignatureVerifier
operator|.
name|SIGNATURE_LENGTH_MAP
operator|.
name|get
argument_list|(
name|super
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|getJwaName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
class|class
name|EcDsaPrivateKeyJwsSignature
extends|extends
name|PrivateKeyJwsSignature
block|{
specifier|private
name|int
name|outLen
decl_stmt|;
specifier|public
name|EcDsaPrivateKeyJwsSignature
parameter_list|(
name|Signature
name|s
parameter_list|,
name|int
name|outLen
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|this
operator|.
name|outLen
operator|=
name|outLen
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|sign
parameter_list|()
block|{
name|byte
index|[]
name|jcaDer
init|=
name|super
operator|.
name|sign
argument_list|()
decl_stmt|;
return|return
name|jcaOutputToJoseOutput
argument_list|(
name|outLen
argument_list|,
name|jcaDer
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|jcaOutputToJoseOutput
parameter_list|(
name|int
name|jwsSignatureLen
parameter_list|,
name|byte
index|[]
name|jcaDer
parameter_list|)
block|{
comment|// Apache2 Licensed Jose4j code which adapts the Apache Santuario XMLSecurity
comment|// code and aligns it with JWS/JWA requirements
if|if
condition|(
name|jcaDer
operator|.
name|length
operator|<
literal|8
operator|||
name|jcaDer
index|[
literal|0
index|]
operator|!=
literal|48
condition|)
block|{
throw|throw
operator|new
name|JoseException
argument_list|(
literal|"Invalid format of ECDSA signature"
argument_list|)
throw|;
block|}
name|int
name|offset
decl_stmt|;
if|if
condition|(
name|jcaDer
index|[
literal|1
index|]
operator|>
literal|0
condition|)
block|{
name|offset
operator|=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jcaDer
index|[
literal|1
index|]
operator|==
operator|(
name|byte
operator|)
literal|0x81
condition|)
block|{
name|offset
operator|=
literal|3
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|JoseException
argument_list|(
literal|"Invalid format of ECDSA signature"
argument_list|)
throw|;
block|}
name|byte
name|rLength
init|=
name|jcaDer
index|[
name|offset
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|rLength
init|;
name|i
operator|>
literal|0
operator|&&
name|jcaDer
index|[
operator|(
name|offset
operator|+
literal|2
operator|+
name|rLength
operator|)
operator|-
name|i
index|]
operator|==
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// complete
block|}
name|byte
name|sLength
init|=
name|jcaDer
index|[
name|offset
operator|+
literal|2
operator|+
name|rLength
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
name|sLength
init|;
name|j
operator|>
literal|0
operator|&&
name|jcaDer
index|[
operator|(
name|offset
operator|+
literal|2
operator|+
name|rLength
operator|+
literal|2
operator|+
name|sLength
operator|)
operator|-
name|j
index|]
operator|==
literal|0
condition|;
name|j
operator|--
control|)
block|{
comment|// complete
block|}
name|int
name|rawLen
init|=
name|Math
operator|.
name|max
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|rawLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|rawLen
argument_list|,
name|jwsSignatureLen
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|jcaDer
index|[
name|offset
operator|-
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|!=
name|jcaDer
operator|.
name|length
operator|-
name|offset
operator|||
operator|(
name|jcaDer
index|[
name|offset
operator|-
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|!=
literal|2
operator|+
name|rLength
operator|+
literal|2
operator|+
name|sLength
operator|||
name|jcaDer
index|[
name|offset
index|]
operator|!=
literal|2
operator|||
name|jcaDer
index|[
name|offset
operator|+
literal|2
operator|+
name|rLength
index|]
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|JoseException
argument_list|(
literal|"Invalid format of ECDSA signature"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|concatenatedSignatureBytes
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|rawLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|jcaDer
argument_list|,
operator|(
name|offset
operator|+
literal|2
operator|+
name|rLength
operator|)
operator|-
name|i
argument_list|,
name|concatenatedSignatureBytes
argument_list|,
name|rawLen
operator|-
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|jcaDer
argument_list|,
operator|(
name|offset
operator|+
literal|2
operator|+
name|rLength
operator|+
literal|2
operator|+
name|sLength
operator|)
operator|-
name|j
argument_list|,
name|concatenatedSignatureBytes
argument_list|,
literal|2
operator|*
name|rawLen
operator|-
name|j
argument_list|,
name|j
argument_list|)
expr_stmt|;
return|return
name|concatenatedSignatureBytes
return|;
block|}
block|}
end_class

end_unit

