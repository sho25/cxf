begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|KeyAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|KeyProperties
import|;
end_import

begin_class
specifier|public
class|class
name|WrappedKeyDecryptionAlgorithm
implements|implements
name|KeyDecryptionProvider
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WrappedKeyDecryptionAlgorithm
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Key
name|cekDecryptionKey
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|unwrap
decl_stmt|;
specifier|private
specifier|final
name|KeyAlgorithm
name|supportedAlgo
decl_stmt|;
specifier|public
name|WrappedKeyDecryptionAlgorithm
parameter_list|(
name|Key
name|cekDecryptionKey
parameter_list|,
name|KeyAlgorithm
name|supportedAlgo
parameter_list|)
block|{
name|this
argument_list|(
name|cekDecryptionKey
argument_list|,
name|supportedAlgo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WrappedKeyDecryptionAlgorithm
parameter_list|(
name|Key
name|cekDecryptionKey
parameter_list|,
name|KeyAlgorithm
name|supportedAlgo
parameter_list|,
name|boolean
name|unwrap
parameter_list|)
block|{
name|this
operator|.
name|cekDecryptionKey
operator|=
name|cekDecryptionKey
expr_stmt|;
name|this
operator|.
name|supportedAlgo
operator|=
name|supportedAlgo
expr_stmt|;
name|this
operator|.
name|unwrap
operator|=
name|unwrap
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getDecryptedContentEncryptionKey
parameter_list|(
name|JweDecryptionInput
name|jweDecryptionInput
parameter_list|)
block|{
name|KeyProperties
name|keyProps
init|=
operator|new
name|KeyProperties
argument_list|(
name|getKeyEncryptionAlgorithm
argument_list|(
name|jweDecryptionInput
argument_list|)
argument_list|)
decl_stmt|;
name|AlgorithmParameterSpec
name|spec
init|=
name|getAlgorithmParameterSpec
argument_list|(
name|jweDecryptionInput
argument_list|)
decl_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
name|keyProps
operator|.
name|setAlgoSpec
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unwrap
condition|)
block|{
name|keyProps
operator|.
name|setBlockSize
argument_list|(
name|getKeyCipherBlockSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|CryptoUtils
operator|.
name|decryptBytes
argument_list|(
name|getEncryptedContentEncryptionKey
argument_list|(
name|jweDecryptionInput
argument_list|)
argument_list|,
name|getCekDecryptionKey
argument_list|()
argument_list|,
name|keyProps
argument_list|)
return|;
block|}
return|return
name|CryptoUtils
operator|.
name|unwrapSecretKey
argument_list|(
name|getEncryptedContentEncryptionKey
argument_list|(
name|jweDecryptionInput
argument_list|)
argument_list|,
name|getContentEncryptionAlgorithm
argument_list|(
name|jweDecryptionInput
argument_list|)
argument_list|,
name|getCekDecryptionKey
argument_list|()
argument_list|,
name|keyProps
argument_list|)
operator|.
name|getEncoded
argument_list|()
return|;
block|}
specifier|protected
name|Key
name|getCekDecryptionKey
parameter_list|()
block|{
return|return
name|cekDecryptionKey
return|;
block|}
specifier|protected
name|int
name|getKeyCipherBlockSize
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|String
name|getKeyEncryptionAlgorithm
parameter_list|(
name|JweDecryptionInput
name|jweDecryptionInput
parameter_list|)
block|{
name|String
name|keyAlgo
init|=
name|jweDecryptionInput
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
operator|.
name|getJwaName
argument_list|()
decl_stmt|;
name|validateKeyEncryptionAlgorithm
argument_list|(
name|keyAlgo
argument_list|)
expr_stmt|;
return|return
name|AlgorithmUtils
operator|.
name|toJavaName
argument_list|(
name|keyAlgo
argument_list|)
return|;
block|}
specifier|protected
name|void
name|validateKeyEncryptionAlgorithm
parameter_list|(
name|String
name|keyAlgo
parameter_list|)
block|{
if|if
condition|(
name|keyAlgo
operator|==
literal|null
operator|||
operator|!
name|supportedAlgo
operator|.
name|getJwaName
argument_list|()
operator|.
name|equals
argument_list|(
name|keyAlgo
argument_list|)
condition|)
block|{
name|reportInvalidKeyAlgorithm
argument_list|(
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|reportInvalidKeyAlgorithm
parameter_list|(
name|String
name|keyAlgo
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Invalid key encryption algorithm: "
operator|+
name|keyAlgo
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|INVALID_KEY_ALGORITHM
argument_list|)
throw|;
block|}
specifier|protected
name|String
name|getContentEncryptionAlgorithm
parameter_list|(
name|JweDecryptionInput
name|jweDecryptionInput
parameter_list|)
block|{
return|return
name|AlgorithmUtils
operator|.
name|toJavaName
argument_list|(
name|jweDecryptionInput
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
operator|.
name|getJwaName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|AlgorithmParameterSpec
name|getAlgorithmParameterSpec
parameter_list|(
name|JweDecryptionInput
name|jweDecryptionInput
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|byte
index|[]
name|getEncryptedContentEncryptionKey
parameter_list|(
name|JweDecryptionInput
name|jweDecryptionInput
parameter_list|)
block|{
return|return
name|jweDecryptionInput
operator|.
name|getEncryptedCEK
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyAlgorithm
name|getAlgorithm
parameter_list|()
block|{
return|return
name|supportedAlgo
return|;
block|}
block|}
end_class

end_unit

