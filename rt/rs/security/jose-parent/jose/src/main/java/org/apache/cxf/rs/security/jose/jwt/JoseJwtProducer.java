begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|AbstractJoseProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweEncryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweJwtCompactProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureProvider
import|;
end_import

begin_class
specifier|public
class|class
name|JoseJwtProducer
extends|extends
name|AbstractJoseProducer
block|{
specifier|public
name|String
name|processJwt
parameter_list|(
name|JwtToken
name|jwt
parameter_list|)
block|{
return|return
name|processJwt
argument_list|(
name|jwt
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|processJwt
parameter_list|(
name|JwtToken
name|jwt
parameter_list|,
name|JweEncryptionProvider
name|theEncProvider
parameter_list|,
name|JwsSignatureProvider
name|theSigProvider
parameter_list|)
block|{
name|super
operator|.
name|checkProcessRequirements
argument_list|()
expr_stmt|;
name|String
name|data
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isJweRequired
argument_list|()
operator|&&
name|theEncProvider
operator|==
literal|null
condition|)
block|{
name|theEncProvider
operator|=
name|getInitializedEncryptionProvider
argument_list|(
name|jwt
operator|.
name|getJweHeaders
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|theEncProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"Unable to encrypt JWT"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isJwsRequired
argument_list|()
condition|)
block|{
name|JwsJwtCompactProducer
name|jws
init|=
operator|new
name|JwsJwtCompactProducer
argument_list|(
name|jwt
argument_list|)
decl_stmt|;
if|if
condition|(
name|jws
operator|.
name|isPlainText
argument_list|()
condition|)
block|{
name|data
operator|=
name|jws
operator|.
name|getSignedEncodedJws
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|theSigProvider
operator|==
literal|null
condition|)
block|{
name|theSigProvider
operator|=
name|getInitializedSignatureProvider
argument_list|(
name|jws
operator|.
name|getJwsHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|theSigProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JwtException
argument_list|(
literal|"Unable to sign JWT"
argument_list|)
throw|;
block|}
name|data
operator|=
name|jws
operator|.
name|signWith
argument_list|(
name|theSigProvider
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|theEncProvider
operator|!=
literal|null
condition|)
block|{
name|data
operator|=
name|theEncProvider
operator|.
name|encrypt
argument_list|(
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|data
argument_list|)
argument_list|,
name|jwt
operator|.
name|getJweHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|JweJwtCompactProducer
name|jwe
init|=
operator|new
name|JweJwtCompactProducer
argument_list|(
name|jwt
operator|.
name|getJweHeaders
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaims
argument_list|()
argument_list|)
decl_stmt|;
name|data
operator|=
name|jwe
operator|.
name|encryptWith
argument_list|(
name|theEncProvider
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

