begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweException
operator|.
name|Error
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|HmacUtils
import|;
end_import

begin_class
specifier|public
class|class
name|AesCbcHmacJweEncryption
extends|extends
name|JweEncryption
block|{
specifier|public
name|AesCbcHmacJweEncryption
parameter_list|(
name|ContentAlgorithm
name|cekAlgoJwt
parameter_list|,
name|KeyEncryptionProvider
name|keyEncryptionAlgorithm
parameter_list|)
block|{
name|this
argument_list|(
name|cekAlgoJwt
argument_list|,
name|keyEncryptionAlgorithm
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AesCbcHmacJweEncryption
parameter_list|(
name|ContentAlgorithm
name|cekAlgoJwt
parameter_list|,
name|KeyEncryptionProvider
name|keyEncryptionAlgorithm
parameter_list|,
name|boolean
name|generateCekOnce
parameter_list|)
block|{
name|super
argument_list|(
name|keyEncryptionAlgorithm
argument_list|,
operator|new
name|AesCbcContentEncryptionAlgorithm
argument_list|(
name|cekAlgoJwt
argument_list|,
name|generateCekOnce
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AesCbcHmacJweEncryption
parameter_list|(
name|ContentAlgorithm
name|cekAlgoJwt
parameter_list|,
name|byte
index|[]
name|cek
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|,
name|KeyEncryptionProvider
name|keyEncryptionAlgorithm
parameter_list|)
block|{
name|super
argument_list|(
name|keyEncryptionAlgorithm
argument_list|,
operator|new
name|AesCbcContentEncryptionAlgorithm
argument_list|(
name|cek
argument_list|,
name|iv
argument_list|,
name|cekAlgoJwt
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AesCbcHmacJweEncryption
parameter_list|(
name|KeyEncryptionProvider
name|keyEncryptionAlgorithm
parameter_list|,
name|AesCbcContentEncryptionAlgorithm
name|contentEncryptionAlgorithm
parameter_list|)
block|{
name|super
argument_list|(
name|keyEncryptionAlgorithm
argument_list|,
name|contentEncryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|getActualCek
parameter_list|(
name|byte
index|[]
name|theCek
parameter_list|,
name|String
name|algoJwt
parameter_list|)
block|{
return|return
name|doGetActualCek
argument_list|(
name|theCek
argument_list|,
name|algoJwt
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|doGetActualCek
parameter_list|(
name|byte
index|[]
name|theCek
parameter_list|,
name|String
name|algoJwt
parameter_list|)
block|{
comment|// K
name|int
name|inputKeySize
init|=
name|AesCbcContentEncryptionAlgorithm
operator|.
name|getFullCekKeySize
argument_list|(
name|algoJwt
argument_list|)
decl_stmt|;
if|if
condition|(
name|theCek
operator|.
name|length
operator|!=
name|inputKeySize
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Length input key ["
operator|+
name|theCek
operator|.
name|length
operator|+
literal|"] invalid for algorithm "
operator|+
name|algoJwt
operator|+
literal|" ["
operator|+
name|inputKeySize
operator|+
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|Error
operator|.
name|INVALID_CONTENT_KEY
argument_list|)
throw|;
block|}
comment|// MAC_KEY, ENC_KEY
name|int
name|secondaryKeySize
init|=
name|inputKeySize
operator|/
literal|2
decl_stmt|;
comment|// Extract secondary key ENC_KEY from the input key K
name|byte
index|[]
name|encKey
init|=
operator|new
name|byte
index|[
name|secondaryKeySize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|theCek
argument_list|,
name|secondaryKeySize
argument_list|,
name|encKey
argument_list|,
literal|0
argument_list|,
name|secondaryKeySize
argument_list|)
expr_stmt|;
return|return
name|encKey
return|;
block|}
specifier|protected
name|byte
index|[]
name|getActualCipher
parameter_list|(
name|byte
index|[]
name|cipher
parameter_list|)
block|{
return|return
name|cipher
return|;
block|}
specifier|protected
name|byte
index|[]
name|getAuthenticationTag
parameter_list|(
name|JweEncryptionInternal
name|state
parameter_list|,
name|byte
index|[]
name|cipher
parameter_list|)
block|{
specifier|final
name|MacState
name|macState
init|=
name|getInitializedMacState
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|macState
operator|.
name|mac
operator|.
name|update
argument_list|(
name|cipher
argument_list|)
expr_stmt|;
return|return
name|signAndGetTag
argument_list|(
name|macState
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|signAndGetTag
parameter_list|(
name|MacState
name|macState
parameter_list|)
block|{
name|macState
operator|.
name|mac
operator|.
name|update
argument_list|(
name|macState
operator|.
name|al
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sig
init|=
name|macState
operator|.
name|mac
operator|.
name|doFinal
argument_list|()
decl_stmt|;
name|int
name|authTagLen
init|=
name|DEFAULT_AUTH_TAG_LENGTH
operator|/
literal|8
decl_stmt|;
name|byte
index|[]
name|authTag
init|=
operator|new
name|byte
index|[
name|authTagLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|sig
argument_list|,
literal|0
argument_list|,
name|authTag
argument_list|,
literal|0
argument_list|,
name|authTagLen
argument_list|)
expr_stmt|;
return|return
name|authTag
return|;
block|}
specifier|private
name|MacState
name|getInitializedMacState
parameter_list|(
specifier|final
name|JweEncryptionInternal
name|state
parameter_list|)
block|{
return|return
name|getInitializedMacState
argument_list|(
name|state
operator|.
name|secretKey
argument_list|,
name|state
operator|.
name|theIv
argument_list|,
name|state
operator|.
name|aad
argument_list|,
name|state
operator|.
name|theHeaders
argument_list|,
name|state
operator|.
name|protectedHeadersJson
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|MacState
name|getInitializedMacState
parameter_list|(
name|byte
index|[]
name|secretKey
parameter_list|,
name|byte
index|[]
name|theIv
parameter_list|,
name|byte
index|[]
name|extraAad
parameter_list|,
name|JweHeaders
name|theHeaders
parameter_list|,
name|String
name|protectedHeadersJson
parameter_list|)
block|{
name|String
name|algoJwt
init|=
name|theHeaders
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
operator|.
name|getJwaName
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|AesCbcContentEncryptionAlgorithm
operator|.
name|getFullCekKeySize
argument_list|(
name|algoJwt
argument_list|)
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|macKey
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|secretKey
argument_list|,
literal|0
argument_list|,
name|macKey
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|String
name|hmacAlgoJava
init|=
name|AesCbcContentEncryptionAlgorithm
operator|.
name|getHMACAlgorithm
argument_list|(
name|algoJwt
argument_list|)
decl_stmt|;
name|Mac
name|mac
init|=
name|HmacUtils
operator|.
name|getInitializedMac
argument_list|(
name|macKey
argument_list|,
name|hmacAlgoJava
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|byte
index|[]
name|aad
init|=
name|JweUtils
operator|.
name|getAdditionalAuthenticationData
argument_list|(
name|protectedHeadersJson
argument_list|,
name|extraAad
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|al
init|=
name|buf
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
name|aad
operator|.
name|length
operator|*
literal|8
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|mac
operator|.
name|update
argument_list|(
name|aad
argument_list|)
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
name|theIv
argument_list|)
expr_stmt|;
name|MacState
name|macState
init|=
operator|new
name|MacState
argument_list|()
decl_stmt|;
name|macState
operator|.
name|mac
operator|=
name|mac
expr_stmt|;
name|macState
operator|.
name|al
operator|=
name|al
expr_stmt|;
return|return
name|macState
return|;
block|}
specifier|protected
name|AuthenticationTagProducer
name|getAuthenticationTagProducer
parameter_list|(
specifier|final
name|JweEncryptionInternal
name|state
parameter_list|)
block|{
specifier|final
name|MacState
name|macState
init|=
name|getInitializedMacState
argument_list|(
name|state
argument_list|)
decl_stmt|;
return|return
operator|new
name|AuthenticationTagProducer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|cipher
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|macState
operator|.
name|mac
operator|.
name|update
argument_list|(
name|cipher
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTag
parameter_list|()
block|{
return|return
name|signAndGetTag
argument_list|(
name|macState
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|getEncryptedContentEncryptionKey
parameter_list|(
name|JweHeaders
name|headers
parameter_list|,
name|byte
index|[]
name|theCek
parameter_list|)
block|{
return|return
name|getKeyEncryptionAlgo
argument_list|()
operator|.
name|getEncryptedContentEncryptionKey
argument_list|(
name|headers
argument_list|,
name|theCek
argument_list|)
return|;
block|}
specifier|protected
specifier|static
class|class
name|MacState
block|{
specifier|protected
name|Mac
name|mac
decl_stmt|;
specifier|private
name|byte
index|[]
name|al
decl_stmt|;
block|}
block|}
end_class

end_unit

