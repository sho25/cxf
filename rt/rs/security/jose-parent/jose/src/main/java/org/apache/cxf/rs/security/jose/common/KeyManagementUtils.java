begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertPathBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertPathBuilderResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertPathValidator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CollectionCertStoreParameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|PKIXBuilderParameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509CertSelector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|KeyOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|MessageDigestUtils
import|;
end_import

begin_comment
comment|/**  * Encryption helpers  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|KeyManagementUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|KeyManagementUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|KeyManagementUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|loadAndEncodeX509CertificateOrChain
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|X509Certificate
index|[]
name|chain
init|=
name|loadX509CertificateOrChain
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|encodeX509CertificateChain
argument_list|(
name|chain
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|loadDigestAndEncodeX509Certificate
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|X509Certificate
index|[]
name|certs
init|=
name|loadX509CertificateOrChain
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|certs
operator|!=
literal|null
operator|&&
name|certs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|byte
index|[]
name|digest
init|=
name|MessageDigestUtils
operator|.
name|createDigest
argument_list|(
name|certs
index|[
literal|0
index|]
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|MessageDigestUtils
operator|.
name|ALGO_SHA_1
argument_list|)
decl_stmt|;
return|return
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|digest
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Error creating digest"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CertificateEncodingException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Error creating digest"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|X509Certificate
index|[]
name|loadX509CertificateOrChain
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|KeyStore
name|keyStore
init|=
name|KeyManagementUtils
operator|.
name|loadPersistKeyStore
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|)
decl_stmt|;
return|return
name|loadX509CertificateOrChain
argument_list|(
name|keyStore
argument_list|,
name|alias
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|X509Certificate
index|[]
name|loadX509CertificateOrChain
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
try|try
block|{
name|Certificate
index|[]
name|certs
init|=
name|keyStore
operator|.
name|getCertificateChain
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|certs
operator|!=
literal|null
condition|)
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|certs
argument_list|,
name|certs
operator|.
name|length
argument_list|,
name|X509Certificate
index|[]
operator|.
expr|class
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|X509Certificate
index|[]
block|{
operator|(
name|X509Certificate
operator|)
name|CryptoUtils
operator|.
name|loadCertificate
argument_list|(
name|keyStore
argument_list|,
name|alias
argument_list|)
block|}
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"X509 Certificates can not be created"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|PublicKey
name|loadPublicKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|KeyStore
name|keyStore
init|=
name|KeyManagementUtils
operator|.
name|loadPersistKeyStore
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|CryptoUtils
operator|.
name|loadPublicKey
argument_list|(
name|keyStore
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PublicKey
name|loadPublicKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocProp
parameter_list|)
block|{
return|return
name|loadPublicKey
argument_list|(
name|m
argument_list|,
name|keyStoreLocProp
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PublicKey
name|loadPublicKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocPropPreferred
parameter_list|,
name|String
name|keyStoreLocPropDefault
parameter_list|)
block|{
name|String
name|keyStoreLoc
init|=
name|getMessageProperty
argument_list|(
name|m
argument_list|,
name|keyStoreLocPropPreferred
argument_list|,
name|keyStoreLocPropDefault
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
name|JoseUtils
operator|.
name|loadProperties
argument_list|(
name|keyStoreLoc
argument_list|,
name|bus
argument_list|)
decl_stmt|;
return|return
name|KeyManagementUtils
operator|.
name|loadPublicKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Public key can not be loaded"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getMessageProperty
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocPropPreferred
parameter_list|,
name|String
name|keyStoreLocPropDefault
parameter_list|)
block|{
name|String
name|propLoc
init|=
operator|(
name|String
operator|)
name|MessageUtils
operator|.
name|getContextualProperty
argument_list|(
name|m
argument_list|,
name|keyStoreLocPropPreferred
argument_list|,
name|keyStoreLocPropDefault
argument_list|)
decl_stmt|;
if|if
condition|(
name|propLoc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Properties resource is not identified"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|()
throw|;
block|}
return|return
name|propLoc
return|;
block|}
specifier|private
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|,
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
name|String
name|keyPswd
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_PSWD
argument_list|)
decl_stmt|;
name|String
name|theAlias
init|=
name|alias
operator|!=
literal|null
condition|?
name|alias
else|:
name|getKeyId
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|,
name|keyOper
argument_list|)
decl_stmt|;
if|if
condition|(
name|theAlias
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|,
name|theAlias
argument_list|)
expr_stmt|;
block|}
name|char
index|[]
name|keyPswdChars
init|=
name|keyPswd
operator|!=
literal|null
condition|?
name|keyPswd
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|keyPswdChars
operator|==
literal|null
condition|)
block|{
name|PrivateKeyPasswordProvider
name|provider
init|=
name|loadPasswordProvider
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|keyOper
argument_list|)
decl_stmt|;
name|keyPswdChars
operator|=
name|provider
operator|!=
literal|null
condition|?
name|provider
operator|.
name|getPassword
argument_list|(
name|props
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
return|return
name|CryptoUtils
operator|.
name|loadPrivateKey
argument_list|(
name|keyStore
argument_list|,
name|keyPswdChars
argument_list|,
name|theAlias
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocProp
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|)
block|{
return|return
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|keyStoreLocProp
argument_list|,
literal|null
argument_list|,
name|keyOper
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocPropPreferred
parameter_list|,
name|String
name|keyStoreLocPropDefault
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|)
block|{
name|String
name|keyStoreLoc
init|=
name|getMessageProperty
argument_list|(
name|m
argument_list|,
name|keyStoreLocPropPreferred
argument_list|,
name|keyStoreLocPropDefault
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
name|JoseUtils
operator|.
name|loadProperties
argument_list|(
name|keyStoreLoc
argument_list|,
name|bus
argument_list|)
decl_stmt|;
return|return
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|keyOper
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getKeyId
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|preferredPropertyName
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|)
block|{
name|String
name|kid
init|=
literal|null
decl_stmt|;
name|String
name|altPropertyName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keyOper
operator|!=
literal|null
operator|&&
name|m
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|keyOper
operator|==
name|KeyOperation
operator|.
name|ENCRYPT
operator|||
name|keyOper
operator|==
name|KeyOperation
operator|.
name|DECRYPT
condition|)
block|{
name|altPropertyName
operator|=
name|preferredPropertyName
operator|+
literal|".jwe"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyOper
operator|==
name|KeyOperation
operator|.
name|SIGN
operator|||
name|keyOper
operator|==
name|KeyOperation
operator|.
name|VERIFY
condition|)
block|{
name|altPropertyName
operator|=
name|preferredPropertyName
operator|+
literal|".jws"
expr_stmt|;
block|}
name|String
name|direction
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
operator|==
name|m
condition|?
literal|".out"
else|:
literal|".in"
decl_stmt|;
name|kid
operator|=
operator|(
name|String
operator|)
name|MessageUtils
operator|.
name|getContextualProperty
argument_list|(
name|m
argument_list|,
name|preferredPropertyName
argument_list|,
name|altPropertyName
operator|+
name|direction
argument_list|)
expr_stmt|;
comment|// Check whether the direction is not set for the altPropertyName
if|if
condition|(
name|kid
operator|==
literal|null
operator|&&
name|altPropertyName
operator|!=
literal|null
condition|)
block|{
name|kid
operator|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|altPropertyName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|kid
operator|==
literal|null
condition|)
block|{
name|kid
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|preferredPropertyName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kid
operator|==
literal|null
operator|&&
name|altPropertyName
operator|!=
literal|null
condition|)
block|{
name|kid
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|altPropertyName
argument_list|)
expr_stmt|;
block|}
return|return
name|kid
return|;
block|}
specifier|public
specifier|static
name|PrivateKeyPasswordProvider
name|loadPasswordProvider
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|)
block|{
name|PrivateKeyPasswordProvider
name|cb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keyOper
operator|!=
literal|null
condition|)
block|{
name|String
name|propName
init|=
name|keyOper
operator|==
name|KeyOperation
operator|.
name|SIGN
condition|?
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_KEY_PSWD_PROVIDER
else|:
name|keyOper
operator|==
name|KeyOperation
operator|.
name|DECRYPT
condition|?
name|JoseConstants
operator|.
name|RSSEC_DECRYPTION_KEY_PSWD_PROVIDER
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|propName
operator|!=
literal|null
condition|)
block|{
name|cb
operator|=
operator|(
name|PrivateKeyPasswordProvider
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cb
operator|==
literal|null
condition|)
block|{
name|cb
operator|=
operator|(
name|PrivateKeyPasswordProvider
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_PSWD_PROVIDER
argument_list|)
expr_stmt|;
block|}
return|return
name|cb
return|;
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|)
block|{
name|KeyStore
name|keyStore
init|=
name|loadPersistKeyStore
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|loadPrivateKey
argument_list|(
name|keyStore
argument_list|,
name|m
argument_list|,
name|props
argument_list|,
name|keyOper
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyStore
name|loadPersistKeyStore
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|KeyStore
name|keyStore
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE
argument_list|)
condition|)
block|{
name|keyStore
operator|=
operator|(
name|KeyStore
operator|)
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyStore
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|props
operator|.
name|containsKey
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"No keystore file has been configured"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
literal|"No keystore file has been configured"
argument_list|)
throw|;
block|}
name|keyStore
operator|=
operator|(
name|KeyStore
operator|)
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyStore
operator|==
literal|null
condition|)
block|{
name|keyStore
operator|=
name|loadKeyStore
argument_list|(
name|props
argument_list|,
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|)
argument_list|,
name|keyStore
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keyStore
return|;
block|}
specifier|public
specifier|static
name|KeyStore
name|loadKeyStore
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|String
name|keyStoreType
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
decl_stmt|;
name|String
name|keyStoreLoc
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|)
decl_stmt|;
name|String
name|keyStorePswd
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_PSWD
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStorePswd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JoseException
argument_list|(
literal|"No keystore password was defined"
argument_list|)
throw|;
block|}
try|try
block|{
name|InputStream
name|is
init|=
name|JoseUtils
operator|.
name|getResourceStream
argument_list|(
name|keyStoreLoc
argument_list|,
name|bus
argument_list|)
decl_stmt|;
return|return
name|CryptoUtils
operator|.
name|loadKeyStore
argument_list|(
name|is
argument_list|,
name|keyStorePswd
operator|.
name|toCharArray
argument_list|()
argument_list|,
name|keyStoreType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Key store can not be loaded"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|encodeX509CertificateChain
parameter_list|(
name|X509Certificate
index|[]
name|chain
parameter_list|)
block|{
return|return
name|encodeX509CertificateChain
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|chain
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|encodeX509CertificateChain
parameter_list|(
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|chain
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|encodedChain
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|chain
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|X509Certificate
name|cert
range|:
name|chain
control|)
block|{
try|try
block|{
name|encodedChain
operator|.
name|add
argument_list|(
name|CryptoUtils
operator|.
name|encodeCertificate
argument_list|(
name|cert
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"X509 Certificate can not be encoded"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|encodedChain
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|toX509CertificateChain
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|base64EncodedChain
parameter_list|)
block|{
if|if
condition|(
name|base64EncodedChain
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certs
init|=
operator|new
name|ArrayList
argument_list|<
name|X509Certificate
argument_list|>
argument_list|(
name|base64EncodedChain
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|encodedCert
range|:
name|base64EncodedChain
control|)
block|{
try|try
block|{
name|certs
operator|.
name|add
argument_list|(
operator|(
name|X509Certificate
operator|)
name|CryptoUtils
operator|.
name|decodeCertificate
argument_list|(
name|encodedCert
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"X509 Certificate can not be decoded"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|certs
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|//TODO: enhance the certificate validation code
specifier|public
specifier|static
name|void
name|validateCertificateChain
parameter_list|(
name|Properties
name|storeProperties
parameter_list|,
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|inCerts
parameter_list|)
block|{
name|Message
name|message
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|KeyStore
name|ks
init|=
name|loadPersistKeyStore
argument_list|(
name|message
argument_list|,
name|storeProperties
argument_list|)
decl_stmt|;
name|validateCertificateChain
argument_list|(
name|ks
argument_list|,
name|inCerts
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|validateCertificateChain
parameter_list|(
name|KeyStore
name|ks
parameter_list|,
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|inCerts
parameter_list|)
block|{
comment|// Initial chain validation, to be enhanced as needed
try|try
block|{
name|X509CertSelector
name|certSelect
init|=
operator|new
name|X509CertSelector
argument_list|()
decl_stmt|;
name|certSelect
operator|.
name|setCertificate
argument_list|(
operator|(
name|X509Certificate
operator|)
name|inCerts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|PKIXBuilderParameters
name|pbParams
init|=
operator|new
name|PKIXBuilderParameters
argument_list|(
name|ks
argument_list|,
name|certSelect
argument_list|)
decl_stmt|;
name|pbParams
operator|.
name|addCertStore
argument_list|(
name|CertStore
operator|.
name|getInstance
argument_list|(
literal|"Collection"
argument_list|,
operator|new
name|CollectionCertStoreParameters
argument_list|(
name|inCerts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pbParams
operator|.
name|setMaxPathLength
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|pbParams
operator|.
name|setRevocationEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CertPathBuilderResult
name|buildResult
init|=
name|CertPathBuilder
operator|.
name|getInstance
argument_list|(
literal|"PKIX"
argument_list|)
operator|.
name|build
argument_list|(
name|pbParams
argument_list|)
decl_stmt|;
name|CertPath
name|certPath
init|=
name|buildResult
operator|.
name|getCertPath
argument_list|()
decl_stmt|;
name|CertPathValidator
operator|.
name|getInstance
argument_list|(
literal|"PKIX"
argument_list|)
operator|.
name|validate
argument_list|(
name|certPath
argument_list|,
name|pbParams
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Certificate path validation error"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|X509Certificate
index|[]
name|toX509CertificateChainArray
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|base64EncodedChain
parameter_list|)
block|{
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|chain
init|=
name|toX509CertificateChain
argument_list|(
name|base64EncodedChain
argument_list|)
decl_stmt|;
return|return
name|chain
operator|==
literal|null
condition|?
literal|null
else|:
name|chain
operator|.
name|toArray
argument_list|(
operator|new
name|X509Certificate
index|[]
block|{}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getKeyAlgorithm
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|defaultAlg
parameter_list|)
block|{
name|String
name|algo
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|algo
operator|==
literal|null
operator|&&
name|m
operator|!=
literal|null
condition|)
block|{
name|algo
operator|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|algo
operator|=
name|defaultAlg
expr_stmt|;
block|}
return|return
name|algo
return|;
block|}
specifier|public
specifier|static
name|Properties
name|loadStoreProperties
parameter_list|(
name|Message
name|m
parameter_list|,
name|boolean
name|required
parameter_list|,
name|String
name|storeProp1
parameter_list|,
name|String
name|storeProp2
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|required
condition|)
block|{
throw|throw
operator|new
name|JoseException
argument_list|()
throw|;
block|}
return|return
literal|null
return|;
block|}
name|Properties
name|props
init|=
literal|null
decl_stmt|;
name|String
name|propLoc
init|=
operator|(
name|String
operator|)
name|MessageUtils
operator|.
name|getContextualProperty
argument_list|(
name|m
argument_list|,
name|storeProp1
argument_list|,
name|storeProp2
argument_list|)
decl_stmt|;
if|if
condition|(
name|propLoc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|props
operator|=
name|JoseUtils
operator|.
name|loadProperties
argument_list|(
name|propLoc
argument_list|,
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Properties resource is not identified"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|keyFile
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyFile
operator|!=
literal|null
condition|)
block|{
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|,
name|keyFile
argument_list|)
expr_stmt|;
name|String
name|type
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
literal|"jwk"
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
name|String
name|keystorePassword
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_PSWD
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystorePassword
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_PSWD
argument_list|,
name|keystorePassword
argument_list|)
expr_stmt|;
block|}
name|String
name|keyPassword
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_PSWD
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyPassword
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_PSWD
argument_list|,
name|keyPassword
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|required
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Properties resource is not identified"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|()
throw|;
block|}
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|X509Certificate
name|inCert
parameter_list|,
name|KeyOperation
name|keyOper
parameter_list|)
block|{
name|KeyStore
name|ks
init|=
name|loadPersistKeyStore
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|alias
init|=
name|ks
operator|.
name|getCertificateAlias
argument_list|(
name|inCert
argument_list|)
decl_stmt|;
return|return
name|loadPrivateKey
argument_list|(
name|ks
argument_list|,
name|m
argument_list|,
name|props
argument_list|,
name|keyOper
argument_list|,
name|alias
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Private key can not be loaded"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|X509Certificate
name|getCertificateFromThumbprint
parameter_list|(
name|String
name|thumbprint
parameter_list|,
name|String
name|digestAlgorithm
parameter_list|,
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|KeyStore
name|ks
init|=
name|loadPersistKeyStore
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|ks
operator|==
literal|null
operator|||
name|thumbprint
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|byte
index|[]
name|decodedThumbprint
init|=
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|thumbprint
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|ks
operator|.
name|aliases
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|alias
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Certificate
index|[]
name|certs
init|=
name|ks
operator|.
name|getCertificateChain
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|certs
operator|==
literal|null
operator|||
name|certs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// no cert chain, so lets check if getCertificate gives us a result.
name|Certificate
name|cert
init|=
name|ks
operator|.
name|getCertificate
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|!=
literal|null
condition|)
block|{
name|certs
operator|=
operator|new
name|Certificate
index|[]
block|{
name|cert
block|}
expr_stmt|;
block|}
block|}
if|if
condition|(
name|certs
operator|!=
literal|null
operator|&&
name|certs
operator|.
name|length
operator|>
literal|0
operator|&&
name|certs
index|[
literal|0
index|]
operator|instanceof
name|X509Certificate
condition|)
block|{
name|X509Certificate
name|x509cert
init|=
operator|(
name|X509Certificate
operator|)
name|certs
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|MessageDigestUtils
operator|.
name|createDigest
argument_list|(
name|x509cert
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|digestAlgorithm
argument_list|)
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|decodedThumbprint
argument_list|)
condition|)
block|{
return|return
name|x509cert
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"X509Certificate can not be loaded: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CertificateEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"X509Certificate can not be loaded: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"X509Certificate can not be loaded: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Base64Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"X509Certificate can not be loaded: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JoseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

