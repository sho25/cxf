begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECFieldFp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECPoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|EllipticCurve
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyAgreement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|KeyManagementUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|KeyAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JwkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|KeyOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|KeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|MessageDigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|rs
operator|.
name|PrivateKeyPasswordProvider
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JweUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JweUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|JweUtils
parameter_list|()
block|{      }
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
block|{
return|return
name|encrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|getPublicKeyEncryptionProvider
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|encrypt
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
block|{
return|return
name|encrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
if|if
condition|(
name|keyAlgo
operator|!=
literal|null
condition|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|encrypt
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
return|return
name|encryptDirect
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|getKeyEncryptionProvider
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|encrypt
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptDirect
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
block|{
return|return
name|encryptDirect
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptDirect
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|JweEncryptionProvider
name|jwe
init|=
name|getDirectKeyJweEncryption
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|encrypt
argument_list|(
name|content
argument_list|,
name|toJweHeaders
argument_list|(
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptDirect
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|JweEncryptionProvider
name|jwe
init|=
name|getDirectKeyJweEncryption
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|encrypt
argument_list|(
name|content
argument_list|,
name|toJweHeaders
argument_list|(
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decrypt
parameter_list|(
name|PrivateKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|KeyDecryptionProvider
name|keyDecryptionProvider
init|=
name|getPrivateKeyDecryptionProvider
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|decrypt
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decrypt
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
if|if
condition|(
name|keyAlgo
operator|!=
literal|null
condition|)
block|{
name|KeyDecryptionProvider
name|keyDecryptionProvider
init|=
name|getSecretKeyDecryptionProvider
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|decrypt
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|)
return|;
block|}
return|return
name|decryptDirect
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decrypt
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|KeyDecryptionProvider
name|keyDecryptionProvider
init|=
name|getKeyDecryptionProvider
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|decrypt
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decryptDirect
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|JweDecryptionProvider
name|jwe
init|=
name|getDirectKeyJweDecryption
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|decrypt
argument_list|(
name|content
argument_list|)
operator|.
name|getContent
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decryptDirect
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|JweDecryptionProvider
name|jwe
init|=
name|getDirectKeyJweDecryption
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|decrypt
argument_list|(
name|content
argument_list|)
operator|.
name|getContent
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|KeyEncryptionProvider
name|getKeyEncryptionProvider
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getKeyEncryptionProvider
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyEncryptionProvider
name|getKeyEncryptionProvider
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|KeyAlgorithm
name|defaultAlgorithm
parameter_list|)
block|{
name|KeyAlgorithm
name|keyAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|KeyAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
literal|null
decl_stmt|;
name|KeyType
name|keyType
init|=
name|jwk
operator|.
name|getKeyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|KeyType
operator|.
name|RSA
operator|==
name|keyType
condition|)
block|{
name|keyEncryptionProvider
operator|=
name|getPublicKeyEncryptionProvider
argument_list|(
name|JwkUtils
operator|.
name|toRSAPublicKey
argument_list|(
name|jwk
argument_list|,
literal|true
argument_list|)
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KeyType
operator|.
name|OCTET
operator|==
name|keyType
condition|)
block|{
name|keyEncryptionProvider
operator|=
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ContentAlgorithm
name|ctAlgo
init|=
literal|null
decl_stmt|;
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|ctAlgo
operator|=
name|getContentAlgo
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_CONTENT_ALGORITHM
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|keyEncryptionProvider
operator|=
operator|new
name|EcdhAesWrapKeyEncryptionAlgorithm
argument_list|(
name|JwkUtils
operator|.
name|toECPublicKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|jwk
operator|.
name|getStringProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_CURVE
argument_list|)
argument_list|,
name|keyAlgo
argument_list|,
name|ctAlgo
operator|==
literal|null
condition|?
name|ContentAlgorithm
operator|.
name|A128GCM
else|:
name|ctAlgo
argument_list|)
expr_stmt|;
block|}
return|return
name|keyEncryptionProvider
return|;
block|}
specifier|public
specifier|static
name|KeyEncryptionProvider
name|getPublicKeyEncryptionProvider
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|KeyAlgorithm
name|algo
parameter_list|)
block|{
return|return
name|getPublicKeyEncryptionProvider
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|algo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyEncryptionProvider
name|getPublicKeyEncryptionProvider
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|Properties
name|props
parameter_list|,
name|KeyAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|algo
operator|=
name|getDefaultPublicKeyAlgorithm
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|instanceof
name|RSAPublicKey
condition|)
block|{
return|return
operator|new
name|RSAKeyEncryptionAlgorithm
argument_list|(
operator|(
name|RSAPublicKey
operator|)
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|ECPublicKey
condition|)
block|{
name|ContentAlgorithm
name|ctAlgo
init|=
literal|null
decl_stmt|;
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|ctAlgo
operator|=
name|getContentAlgo
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_CONTENT_ALGORITHM
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|curve
init|=
name|props
operator|==
literal|null
condition|?
name|JsonWebKey
operator|.
name|EC_CURVE_P256
else|:
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_EC_CURVE
argument_list|,
name|JsonWebKey
operator|.
name|EC_CURVE_P256
argument_list|)
decl_stmt|;
return|return
operator|new
name|EcdhAesWrapKeyEncryptionAlgorithm
argument_list|(
operator|(
name|ECPublicKey
operator|)
name|key
argument_list|,
name|curve
argument_list|,
name|algo
argument_list|,
name|ctAlgo
operator|==
literal|null
condition|?
name|ContentAlgorithm
operator|.
name|A128GCM
else|:
name|ctAlgo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|KeyAlgorithm
name|getDefaultPublicKeyAlgorithm
parameter_list|(
name|PublicKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|RSAPublicKey
condition|)
block|{
return|return
name|KeyAlgorithm
operator|.
name|RSA_OAEP
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|ECPublicKey
condition|)
block|{
return|return
name|KeyAlgorithm
operator|.
name|ECDH_ES_A128KW
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|KeyAlgorithm
name|getDefaultPrivateKeyAlgorithm
parameter_list|(
name|PrivateKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|RSAPrivateKey
condition|)
block|{
return|return
name|KeyAlgorithm
operator|.
name|RSA_OAEP
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|ECPrivateKey
condition|)
block|{
return|return
name|KeyAlgorithm
operator|.
name|ECDH_ES_A128KW
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|KeyEncryptionProvider
name|getSecretKeyEncryptionAlgorithm
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesKeyWrap
argument_list|(
name|algo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesWrapKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesGcmKeyWrap
argument_list|(
name|algo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmWrapKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|KeyDecryptionProvider
name|getKeyDecryptionProvider
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getKeyDecryptionProvider
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyDecryptionProvider
name|getKeyDecryptionProvider
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|KeyAlgorithm
name|defaultAlgorithm
parameter_list|)
block|{
name|KeyAlgorithm
name|keyAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|KeyAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|KeyDecryptionProvider
name|keyDecryptionProvider
init|=
literal|null
decl_stmt|;
name|KeyType
name|keyType
init|=
name|jwk
operator|.
name|getKeyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|KeyType
operator|.
name|RSA
operator|==
name|keyType
condition|)
block|{
name|keyDecryptionProvider
operator|=
name|getPrivateKeyDecryptionProvider
argument_list|(
name|JwkUtils
operator|.
name|toRSAPrivateKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KeyType
operator|.
name|OCTET
operator|==
name|keyType
condition|)
block|{
name|keyDecryptionProvider
operator|=
name|getSecretKeyDecryptionProvider
argument_list|(
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyDecryptionProvider
operator|=
name|getPrivateKeyDecryptionProvider
argument_list|(
name|JwkUtils
operator|.
name|toECPrivateKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
return|return
name|keyDecryptionProvider
return|;
block|}
specifier|public
specifier|static
name|KeyDecryptionProvider
name|getPrivateKeyDecryptionProvider
parameter_list|(
name|PrivateKey
name|key
parameter_list|,
name|KeyAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|RSAPrivateKey
condition|)
block|{
return|return
operator|new
name|RSAKeyDecryptionAlgorithm
argument_list|(
operator|(
name|RSAPrivateKey
operator|)
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|ECPrivateKey
condition|)
block|{
return|return
operator|new
name|EcdhAesWrapKeyDecryptionAlgorithm
argument_list|(
operator|(
name|ECPrivateKey
operator|)
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|KeyDecryptionProvider
name|getSecretKeyDecryptionProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesKeyWrap
argument_list|(
name|algo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesWrapKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesGcmKeyWrap
argument_list|(
name|algo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmWrapKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionProvider
name|getContentEncryptionProvider
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getContentEncryptionProvider
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionProvider
name|getContentEncryptionProvider
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|ContentAlgorithm
name|defaultAlgorithm
parameter_list|)
block|{
name|ContentAlgorithm
name|ctAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|getContentAlgo
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|KeyType
name|keyType
init|=
name|jwk
operator|.
name|getKeyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|KeyType
operator|.
name|OCTET
operator|==
name|keyType
condition|)
block|{
return|return
name|getContentEncryptionProvider
argument_list|(
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|ctAlgo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionProvider
name|getContentEncryptionProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|ContentAlgorithm
name|algorithm
parameter_list|)
block|{
return|return
name|getContentEncryptionProvider
argument_list|(
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|algorithm
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionProvider
name|getContentEncryptionProvider
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|ContentAlgorithm
name|algorithm
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesGcm
argument_list|(
name|algorithm
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmContentEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|algorithm
argument_list|)
return|;
block|}
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesCbcHmac
argument_list|(
name|algorithm
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesCbcContentEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|algorithm
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionProvider
name|getContentEncryptionProvider
parameter_list|(
name|ContentAlgorithm
name|algorithm
parameter_list|)
block|{
return|return
name|getContentEncryptionProvider
argument_list|(
name|algorithm
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionProvider
name|getContentEncryptionProvider
parameter_list|(
name|ContentAlgorithm
name|algorithm
parameter_list|,
name|boolean
name|generateCekOnce
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesGcm
argument_list|(
name|algorithm
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmContentEncryptionAlgorithm
argument_list|(
name|algorithm
argument_list|,
name|generateCekOnce
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ContentDecryptionProvider
name|getContentDecryptionProvider
parameter_list|(
name|ContentAlgorithm
name|algorithm
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesGcm
argument_list|(
name|algorithm
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmContentDecryptionAlgorithm
argument_list|(
name|algorithm
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|getContentDecryptionSecretKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getContentDecryptionSecretKey
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|getContentDecryptionSecretKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|String
name|defaultAlgorithm
parameter_list|)
block|{
name|String
name|ctEncryptionAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|jwk
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|KeyType
name|keyType
init|=
name|jwk
operator|.
name|getKeyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|KeyType
operator|.
name|OCTET
operator|==
name|keyType
operator|&&
name|AlgorithmUtils
operator|.
name|isAesGcm
argument_list|(
name|ctEncryptionAlgo
argument_list|)
condition|)
block|{
return|return
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|jwk
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|ContentAlgorithm
name|getContentAlgo
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
return|return
name|ContentAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|algo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryption
name|getDirectKeyJweEncryption
parameter_list|(
name|JsonWebKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isEcdhEsDirect
argument_list|(
name|key
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getEcDirectKeyJweEncryption
argument_list|(
name|key
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
return|;
block|}
return|return
name|getDirectKeyJweEncryption
argument_list|(
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|getContentAlgo
argument_list|(
name|key
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryption
name|getEcDirectKeyJweEncryption
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|ContentAlgorithm
name|ctAlgo
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isEcdhEsDirect
argument_list|(
name|key
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|curve
init|=
name|key
operator|.
name|getStringProperty
argument_list|(
name|JsonWebKey
operator|.
name|EC_CURVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|curve
operator|==
literal|null
condition|)
block|{
name|curve
operator|=
name|JsonWebKey
operator|.
name|EC_CURVE_P256
expr_stmt|;
block|}
name|ECPublicKey
name|ecKey
init|=
name|JwkUtils
operator|.
name|toECPublicKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|new
name|EcdhDirectKeyJweEncryption
argument_list|(
name|ecKey
argument_list|,
name|curve
argument_list|,
name|ctAlgo
argument_list|)
return|;
block|}
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|INVALID_KEY_ALGORITHM
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|JweEncryption
name|getDirectKeyJweEncryption
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|ContentAlgorithm
name|algo
parameter_list|)
block|{
return|return
name|getDirectKeyJweEncryption
argument_list|(
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|algo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryption
name|getDirectKeyJweEncryption
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|ContentAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesCbcHmac
argument_list|(
name|algo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesCbcHmacJweEncryption
argument_list|(
name|algo
argument_list|,
name|key
argument_list|,
literal|null
argument_list|,
operator|new
name|DirectKeyEncryptionAlgorithm
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|JweEncryption
argument_list|(
operator|new
name|DirectKeyEncryptionAlgorithm
argument_list|()
argument_list|,
name|getContentEncryptionProvider
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryption
name|getDirectKeyJweDecryption
parameter_list|(
name|JsonWebKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isEcdhEsDirect
argument_list|(
name|key
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getEcDirectKeyJweDecryption
argument_list|(
name|key
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
return|;
block|}
return|return
name|getDirectKeyJweDecryption
argument_list|(
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|getContentAlgo
argument_list|(
name|key
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryption
name|getDirectKeyJweDecryption
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|ContentAlgorithm
name|algorithm
parameter_list|)
block|{
return|return
name|getDirectKeyJweDecryption
argument_list|(
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|algorithm
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryption
name|getDirectKeyJweDecryption
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|ContentAlgorithm
name|algorithm
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesCbcHmac
argument_list|(
name|algorithm
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesCbcHmacJweDecryption
argument_list|(
operator|new
name|DirectKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|)
argument_list|,
name|algorithm
argument_list|)
return|;
block|}
return|return
operator|new
name|JweDecryption
argument_list|(
operator|new
name|DirectKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|)
argument_list|,
name|getContentDecryptionProvider
argument_list|(
name|algorithm
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryption
name|getEcDirectKeyJweDecryption
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|ContentAlgorithm
name|ctAlgo
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isEcdhEsDirect
argument_list|(
name|key
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
name|ECPrivateKey
name|ecKey
init|=
name|JwkUtils
operator|.
name|toECPrivateKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|new
name|EcdhDirectKeyJweDecryption
argument_list|(
name|ecKey
argument_list|,
name|ctAlgo
argument_list|)
return|;
block|}
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|INVALID_KEY_ALGORITHM
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|loadEncryptionProvider
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
return|return
name|loadEncryptionProvider
argument_list|(
operator|new
name|JweHeaders
argument_list|()
argument_list|,
name|required
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|loadEncryptionProvider
parameter_list|(
name|JweHeaders
name|headers
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|Properties
name|props
init|=
name|loadEncryptionOutProperties
argument_list|(
name|required
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|loadEncryptionProvider
argument_list|(
name|props
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|loadEncryptionProvider
parameter_list|(
name|Properties
name|props
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
return|return
name|loadEncryptionProvider
argument_list|(
name|props
argument_list|,
name|m
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|loadEncryptionProvider
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Message
name|m
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|loadKeyEncryptionProvider
argument_list|(
name|props
argument_list|,
name|m
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|ContentAlgorithm
name|contentAlgo
init|=
name|getContentEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_CONTENT_ALGORITHM
argument_list|,
name|contentAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ContentEncryptionProvider
name|ctEncryptionProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|KeyAlgorithm
operator|.
name|DIRECT
operator|==
name|keyEncryptionProvider
operator|.
name|getAlgorithm
argument_list|()
condition|)
block|{
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|loadJsonWebKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|ENCRYPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwk
operator|!=
literal|null
condition|)
block|{
name|contentAlgo
operator|=
name|getContentEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|!=
literal|null
condition|?
name|ContentAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|contentAlgo
argument_list|)
expr_stmt|;
name|ctEncryptionProvider
operator|=
name|getContentEncryptionProvider
argument_list|(
name|jwk
argument_list|,
name|contentAlgo
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|compression
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_ZIP_ALGORITHM
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|ctEncryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|compression
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyEncryptionProvider
name|loadKeyEncryptionProvider
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Message
name|m
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
literal|null
decl_stmt|;
name|KeyAlgorithm
name|keyAlgo
init|=
name|getKeyEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|KeyAlgorithm
operator|.
name|DIRECT
operator|==
name|keyAlgo
condition|)
block|{
name|keyEncryptionProvider
operator|=
operator|new
name|DirectKeyEncryptionAlgorithm
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyAlgo
operator|!=
literal|null
operator|&&
name|AlgorithmUtils
operator|.
name|PBES_HS_SET
operator|.
name|contains
argument_list|(
name|keyAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
name|PrivateKeyPasswordProvider
name|provider
init|=
name|KeyManagementUtils
operator|.
name|loadPasswordProvider
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|ENCRYPT
argument_list|)
decl_stmt|;
name|char
index|[]
name|password
init|=
name|provider
operator|!=
literal|null
condition|?
name|provider
operator|.
name|getPassword
argument_list|(
name|props
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_ENCRYPTION_FAILURE
argument_list|)
throw|;
block|}
name|int
name|pbes2Count
init|=
name|MessageUtils
operator|.
name|getContextualInteger
argument_list|(
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_PBES2_COUNT
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
return|return
operator|new
name|PbesHmacAesWrapKeyEncryptionAlgorithm
argument_list|(
operator|new
name|String
argument_list|(
name|password
argument_list|)
argument_list|,
name|pbes2Count
argument_list|,
name|keyAlgo
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
name|boolean
name|includeCert
init|=
name|JoseUtils
operator|.
name|checkBooleanProperty
argument_list|(
name|headers
argument_list|,
name|props
argument_list|,
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_INCLUDE_CERT
argument_list|)
decl_stmt|;
name|boolean
name|includeCertSha1
init|=
name|JoseUtils
operator|.
name|checkBooleanProperty
argument_list|(
name|headers
argument_list|,
name|props
argument_list|,
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_INCLUDE_CERT_SHA1
argument_list|)
decl_stmt|;
name|boolean
name|includeCertSha256
init|=
name|JoseUtils
operator|.
name|checkBooleanProperty
argument_list|(
name|headers
argument_list|,
name|props
argument_list|,
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_INCLUDE_CERT_SHA256
argument_list|)
decl_stmt|;
name|boolean
name|includeKeyId
init|=
name|JoseUtils
operator|.
name|checkBooleanProperty
argument_list|(
name|headers
argument_list|,
name|props
argument_list|,
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_INCLUDE_KEY_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|JoseConstants
operator|.
name|HEADER_JSON_WEB_KEY
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|loadJsonWebKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|ENCRYPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwk
operator|!=
literal|null
condition|)
block|{
name|keyAlgo
operator|=
name|getKeyEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|,
name|getDefaultKeyAlgorithm
argument_list|(
name|jwk
argument_list|)
argument_list|)
expr_stmt|;
name|keyEncryptionProvider
operator|=
name|getKeyEncryptionProvider
argument_list|(
name|jwk
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
name|boolean
name|includePublicKey
init|=
name|JoseUtils
operator|.
name|checkBooleanProperty
argument_list|(
name|headers
argument_list|,
name|props
argument_list|,
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_INCLUDE_PUBLIC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeCert
condition|)
block|{
name|JwkUtils
operator|.
name|includeCertChain
argument_list|(
name|jwk
argument_list|,
name|headers
argument_list|,
name|keyAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeCertSha1
condition|)
block|{
name|KeyManagementUtils
operator|.
name|setSha1DigestHeader
argument_list|(
name|headers
argument_list|,
name|m
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeCertSha256
condition|)
block|{
name|KeyManagementUtils
operator|.
name|setSha256DigestHeader
argument_list|(
name|headers
argument_list|,
name|m
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includePublicKey
condition|)
block|{
name|JwkUtils
operator|.
name|includePublicKey
argument_list|(
name|jwk
argument_list|,
name|headers
argument_list|,
name|keyAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeKeyId
operator|&&
name|jwk
operator|.
name|getKeyId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|setKeyId
argument_list|(
name|jwk
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|keyEncryptionProvider
operator|=
name|getPublicKeyEncryptionProvider
argument_list|(
name|KeyManagementUtils
operator|.
name|loadPublicKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
argument_list|,
name|props
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeCert
condition|)
block|{
name|headers
operator|.
name|setX509Chain
argument_list|(
name|KeyManagementUtils
operator|.
name|loadAndEncodeX509CertificateOrChain
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeCertSha1
condition|)
block|{
name|KeyManagementUtils
operator|.
name|setSha1DigestHeader
argument_list|(
name|headers
argument_list|,
name|m
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeCertSha256
condition|)
block|{
name|KeyManagementUtils
operator|.
name|setSha256DigestHeader
argument_list|(
name|headers
argument_list|,
name|m
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeKeyId
operator|&&
name|props
operator|.
name|containsKey
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|)
condition|)
block|{
name|headers
operator|.
name|setKeyId
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|keyEncryptionProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|INVALID_KEY_ALGORITHM
argument_list|)
throw|;
block|}
name|headers
operator|.
name|setKeyEncryptionAlgorithm
argument_list|(
name|keyEncryptionProvider
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keyEncryptionProvider
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|loadDecryptionProvider
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
return|return
name|loadDecryptionProvider
argument_list|(
literal|null
argument_list|,
name|required
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|loadDecryptionProvider
parameter_list|(
name|JweHeaders
name|inHeaders
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|Properties
name|props
init|=
name|loadEncryptionInProperties
argument_list|(
name|required
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|loadDecryptionProvider
argument_list|(
name|props
argument_list|,
name|inHeaders
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|loadDecryptionProvider
parameter_list|(
name|Properties
name|props
parameter_list|,
name|JweHeaders
name|inHeaders
parameter_list|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|KeyDecryptionProvider
name|keyDecryptionProvider
init|=
literal|null
decl_stmt|;
name|ContentAlgorithm
name|contentAlgo
init|=
name|getContentEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
decl_stmt|;
name|SecretKey
name|ctDecryptionKey
init|=
literal|null
decl_stmt|;
name|KeyAlgorithm
name|keyAlgo
init|=
name|getKeyEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|inHeaders
operator|!=
literal|null
operator|&&
name|inHeaders
operator|.
name|getHeader
argument_list|(
name|JoseConstants
operator|.
name|HEADER_X509_CHAIN
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Supporting loading a private key via a certificate for now
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|chain
init|=
name|KeyManagementUtils
operator|.
name|toX509CertificateChain
argument_list|(
name|inHeaders
operator|.
name|getX509Chain
argument_list|()
argument_list|)
decl_stmt|;
name|KeyManagementUtils
operator|.
name|validateCertificateChain
argument_list|(
name|props
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|X509Certificate
name|cert
init|=
name|chain
operator|==
literal|null
condition|?
literal|null
else|:
name|chain
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PrivateKey
name|privateKey
init|=
name|KeyManagementUtils
operator|.
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|cert
argument_list|,
name|KeyOperation
operator|.
name|DECRYPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyAlgo
operator|==
literal|null
condition|)
block|{
name|keyAlgo
operator|=
name|getDefaultPrivateKeyAlgorithm
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
block|}
name|contentAlgo
operator|=
name|inHeaders
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
expr_stmt|;
name|keyDecryptionProvider
operator|=
name|getPrivateKeyDecryptionProvider
argument_list|(
name|privateKey
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inHeaders
operator|!=
literal|null
operator|&&
name|inHeaders
operator|.
name|getHeader
argument_list|(
name|JoseConstants
operator|.
name|HEADER_X509_THUMBPRINT
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|X509Certificate
name|foundCert
init|=
name|KeyManagementUtils
operator|.
name|getCertificateFromThumbprint
argument_list|(
name|inHeaders
operator|.
name|getX509Thumbprint
argument_list|()
argument_list|,
name|MessageDigestUtils
operator|.
name|ALGO_SHA_1
argument_list|,
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundCert
operator|!=
literal|null
condition|)
block|{
name|PrivateKey
name|privateKey
init|=
name|KeyManagementUtils
operator|.
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|foundCert
argument_list|,
name|KeyOperation
operator|.
name|DECRYPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyAlgo
operator|==
literal|null
condition|)
block|{
name|keyAlgo
operator|=
name|getDefaultPrivateKeyAlgorithm
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
block|}
name|contentAlgo
operator|=
name|inHeaders
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
expr_stmt|;
name|keyDecryptionProvider
operator|=
name|getPrivateKeyDecryptionProvider
argument_list|(
name|privateKey
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inHeaders
operator|!=
literal|null
operator|&&
name|inHeaders
operator|.
name|getHeader
argument_list|(
name|JoseConstants
operator|.
name|HEADER_X509_THUMBPRINT_SHA256
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|X509Certificate
name|foundCert
init|=
name|KeyManagementUtils
operator|.
name|getCertificateFromThumbprint
argument_list|(
name|inHeaders
operator|.
name|getX509ThumbprintSHA256
argument_list|()
argument_list|,
name|MessageDigestUtils
operator|.
name|ALGO_SHA_256
argument_list|,
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundCert
operator|!=
literal|null
condition|)
block|{
name|PrivateKey
name|privateKey
init|=
name|KeyManagementUtils
operator|.
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|foundCert
argument_list|,
name|KeyOperation
operator|.
name|DECRYPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyAlgo
operator|==
literal|null
condition|)
block|{
name|keyAlgo
operator|=
name|getDefaultPrivateKeyAlgorithm
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
block|}
name|contentAlgo
operator|=
name|inHeaders
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
expr_stmt|;
name|keyDecryptionProvider
operator|=
name|getPrivateKeyDecryptionProvider
argument_list|(
name|privateKey
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|JoseConstants
operator|.
name|HEADER_JSON_WEB_KEY
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|loadJsonWebKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|DECRYPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwk
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Extracting the JsonWebKey failed"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_DECRYPTION_FAILURE
argument_list|)
throw|;
block|}
if|if
condition|(
name|KeyAlgorithm
operator|.
name|DIRECT
operator|==
name|keyAlgo
condition|)
block|{
name|contentAlgo
operator|=
name|getContentEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|ContentAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
expr_stmt|;
name|ctDecryptionKey
operator|=
name|getContentDecryptionSecretKey
argument_list|(
name|jwk
argument_list|,
name|contentAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyAlgo
operator|=
name|getKeyEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|,
name|getDefaultKeyAlgorithm
argument_list|(
name|jwk
argument_list|)
argument_list|)
expr_stmt|;
name|keyDecryptionProvider
operator|=
name|getKeyDecryptionProvider
argument_list|(
name|jwk
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|keyAlgo
operator|!=
literal|null
operator|&&
name|AlgorithmUtils
operator|.
name|PBES_HS_SET
operator|.
name|contains
argument_list|(
name|keyAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
name|PrivateKeyPasswordProvider
name|provider
init|=
name|KeyManagementUtils
operator|.
name|loadPasswordProvider
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|DECRYPT
argument_list|)
decl_stmt|;
name|char
index|[]
name|password
init|=
name|provider
operator|!=
literal|null
condition|?
name|provider
operator|.
name|getPassword
argument_list|(
name|props
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_DECRYPTION_FAILURE
argument_list|)
throw|;
block|}
name|keyDecryptionProvider
operator|=
operator|new
name|PbesHmacAesWrapKeyDecryptionAlgorithm
argument_list|(
operator|new
name|String
argument_list|(
name|password
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PrivateKey
name|privateKey
init|=
name|KeyManagementUtils
operator|.
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|DECRYPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyAlgo
operator|==
literal|null
condition|)
block|{
name|keyAlgo
operator|=
name|getDefaultPrivateKeyAlgorithm
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
block|}
name|keyDecryptionProvider
operator|=
name|getPrivateKeyDecryptionProvider
argument_list|(
name|privateKey
argument_list|,
name|keyAlgo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|createJweDecryptionProvider
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|ctDecryptionKey
argument_list|,
name|contentAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgo
parameter_list|)
block|{
return|return
name|createJweEncryptionProvider
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentEncryptionAlgo
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|getPublicKeyEncryptionProvider
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentEncryptionAlgo
argument_list|,
name|compression
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|getPublicKeyEncryptionProvider
argument_list|(
name|key
argument_list|,
name|headers
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgo
parameter_list|)
block|{
return|return
name|createJweEncryptionProvider
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentEncryptionAlgo
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentEncryptionAlgo
argument_list|,
name|compression
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|headers
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgo
parameter_list|)
block|{
return|return
name|createJweEncryptionProvider
argument_list|(
name|key
argument_list|,
name|contentEncryptionAlgo
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|getKeyEncryptionProvider
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentEncryptionAlgo
argument_list|,
name|compression
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|getKeyEncryptionProvider
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|KeyEncryptionProvider
name|keyEncryptionProvider
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
name|JweHeaders
name|headers
init|=
name|prepareJweHeaders
argument_list|(
name|keyEncryptionProvider
operator|!=
literal|null
condition|?
name|keyEncryptionProvider
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|getJwaName
argument_list|()
else|:
literal|null
argument_list|,
name|contentEncryptionAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|,
name|compression
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|KeyEncryptionProvider
name|keyEncryptionProvider
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|KeyEncryptionProvider
name|keyEncryptionProvider
parameter_list|,
name|JweHeaders
name|headers
parameter_list|,
name|boolean
name|generateCekOnce
parameter_list|)
block|{
name|ContentAlgorithm
name|contentEncryptionAlgo
init|=
name|headers
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesCbcHmac
argument_list|(
name|contentEncryptionAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesCbcHmacJweEncryption
argument_list|(
name|contentEncryptionAlgo
argument_list|,
name|keyEncryptionProvider
argument_list|,
name|generateCekOnce
argument_list|)
return|;
block|}
return|return
operator|new
name|JweEncryption
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|getContentEncryptionProvider
argument_list|(
name|contentEncryptionAlgo
argument_list|,
name|generateCekOnce
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|PrivateKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentDecryptionAlgo
parameter_list|)
block|{
return|return
name|createJweDecryptionProvider
argument_list|(
name|getPrivateKeyDecryptionProvider
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyAlgo
parameter_list|,
name|ContentAlgorithm
name|contentDecryptionAlgo
parameter_list|)
block|{
return|return
name|createJweDecryptionProvider
argument_list|(
name|getSecretKeyDecryptionProvider
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|ContentAlgorithm
name|contentDecryptionAlgo
parameter_list|)
block|{
return|return
name|createJweDecryptionProvider
argument_list|(
name|getKeyDecryptionProvider
argument_list|(
name|key
argument_list|)
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|KeyDecryptionProvider
name|keyDecryptionProvider
parameter_list|,
name|ContentAlgorithm
name|contentDecryptionAlgo
parameter_list|)
block|{
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isAesCbcHmac
argument_list|(
name|contentDecryptionAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesCbcHmacJweDecryption
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
return|return
operator|new
name|JweDecryption
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|getContentDecryptionProvider
argument_list|(
name|contentDecryptionAlgo
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|validateCriticalHeaders
parameter_list|(
name|JoseHeaders
name|headers
parameter_list|)
block|{
comment|//TODO: Validate JWE specific constraints
return|return
name|JoseUtils
operator|.
name|validateCriticalHeaders
argument_list|(
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getECDHKey
parameter_list|(
name|JsonWebKey
name|privateKey
parameter_list|,
name|JsonWebKey
name|peerPublicKey
parameter_list|,
name|byte
index|[]
name|partyUInfo
parameter_list|,
name|byte
index|[]
name|partyVInfo
parameter_list|,
name|String
name|algoName
parameter_list|,
name|int
name|algoKeyBitLen
parameter_list|)
block|{
return|return
name|getECDHKey
argument_list|(
name|JwkUtils
operator|.
name|toECPrivateKey
argument_list|(
name|privateKey
argument_list|)
argument_list|,
name|JwkUtils
operator|.
name|toECPublicKey
argument_list|(
name|peerPublicKey
argument_list|)
argument_list|,
name|partyUInfo
argument_list|,
name|partyVInfo
argument_list|,
name|algoName
argument_list|,
name|algoKeyBitLen
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getECDHKey
parameter_list|(
name|ECPrivateKey
name|privateKey
parameter_list|,
name|ECPublicKey
name|peerPublicKey
parameter_list|,
name|byte
index|[]
name|partyUInfo
parameter_list|,
name|byte
index|[]
name|partyVInfo
parameter_list|,
name|String
name|algoName
parameter_list|,
name|int
name|algoKeyBitLen
parameter_list|)
block|{
comment|// Validate the peerPublicKey first
comment|// Credits:
comment|// https://neilmadden.wordpress.com/2017/05/17/so-how-do-you-validate-nist-ecdh-public-keys/
comment|// https://blogs.adobe.com/security/2017/03/critical-vulnerability-uncovered-in-json-encryption.html
comment|// Step 1: Verify public key is not point at infinity.
if|if
condition|(
name|ECPoint
operator|.
name|POINT_INFINITY
operator|.
name|equals
argument_list|(
name|peerPublicKey
operator|.
name|getW
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_ENCRYPTION_FAILURE
argument_list|)
throw|;
block|}
name|EllipticCurve
name|curve
init|=
name|peerPublicKey
operator|.
name|getParams
argument_list|()
operator|.
name|getCurve
argument_list|()
decl_stmt|;
specifier|final
name|BigInteger
name|x
init|=
name|peerPublicKey
operator|.
name|getW
argument_list|()
operator|.
name|getAffineX
argument_list|()
decl_stmt|;
specifier|final
name|BigInteger
name|y
init|=
name|peerPublicKey
operator|.
name|getW
argument_list|()
operator|.
name|getAffineY
argument_list|()
decl_stmt|;
specifier|final
name|BigInteger
name|p
init|=
operator|(
operator|(
name|ECFieldFp
operator|)
name|curve
operator|.
name|getField
argument_list|()
operator|)
operator|.
name|getP
argument_list|()
decl_stmt|;
comment|// Step 2: Verify x and y are in range [0,p-1]
if|if
condition|(
name|x
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
operator|||
name|x
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|>=
literal|0
operator|||
name|y
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
operator|||
name|y
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_ENCRYPTION_FAILURE
argument_list|)
throw|;
block|}
specifier|final
name|BigInteger
name|a
init|=
name|curve
operator|.
name|getA
argument_list|()
decl_stmt|;
specifier|final
name|BigInteger
name|b
init|=
name|curve
operator|.
name|getB
argument_list|()
decl_stmt|;
comment|// Step 3: Verify that y^2 == x^3 + ax + b (mod p)
specifier|final
name|BigInteger
name|ySquared
init|=
name|y
operator|.
name|modPow
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|p
argument_list|)
decl_stmt|;
specifier|final
name|BigInteger
name|xCubedPlusAXPlusB
init|=
name|x
operator|.
name|modPow
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|p
argument_list|)
operator|.
name|add
argument_list|(
name|a
operator|.
name|multiply
argument_list|(
name|x
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|b
argument_list|)
operator|.
name|mod
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ySquared
operator|.
name|equals
argument_list|(
name|xCubedPlusAXPlusB
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_ENCRYPTION_FAILURE
argument_list|)
throw|;
block|}
comment|// Step 4: Verify that nQ = 0, where n is the order of the curve and Q is the public key.
comment|// As per http://www.secg.org/sec1-v2.pdf section 3.2.2:
comment|// "In Step 4, it may not be necessary to compute the point nQ. For example, if h = 1, then nQ = O is implied
comment|// by the checks in Steps 2 and 3, because this property holds for all points Q ∈ E"
comment|// All the NIST curves used here define h = 1.
if|if
condition|(
name|peerPublicKey
operator|.
name|getParams
argument_list|()
operator|.
name|getCofactor
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_ENCRYPTION_FAILURE
argument_list|)
throw|;
block|}
comment|// Finally calculate the derived key
name|byte
index|[]
name|keyZ
init|=
name|generateKeyZ
argument_list|(
name|privateKey
argument_list|,
name|peerPublicKey
argument_list|)
decl_stmt|;
return|return
name|calculateDerivedKey
argument_list|(
name|keyZ
argument_list|,
name|algoName
argument_list|,
name|partyUInfo
argument_list|,
name|partyVInfo
argument_list|,
name|algoKeyBitLen
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getAdditionalAuthenticationData
parameter_list|(
name|String
name|headersJson
parameter_list|,
name|byte
index|[]
name|aad
parameter_list|)
block|{
name|byte
index|[]
name|headersAAD
init|=
name|JweHeaders
operator|.
name|toCipherAdditionalAuthData
argument_list|(
name|headersJson
argument_list|)
decl_stmt|;
if|if
condition|(
name|aad
operator|!=
literal|null
condition|)
block|{
comment|// JWE JSON can provide the extra aad
name|byte
index|[]
name|newAAD
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|headersAAD
argument_list|,
name|headersAAD
operator|.
name|length
operator|+
literal|1
operator|+
name|aad
operator|.
name|length
argument_list|)
decl_stmt|;
name|newAAD
index|[
name|headersAAD
operator|.
name|length
index|]
operator|=
literal|'.'
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|aad
argument_list|,
literal|0
argument_list|,
name|newAAD
argument_list|,
name|headersAAD
operator|.
name|length
operator|+
literal|1
argument_list|,
name|aad
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newAAD
return|;
block|}
return|return
name|headersAAD
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|calculateDerivedKey
parameter_list|(
name|byte
index|[]
name|keyZ
parameter_list|,
name|String
name|algoName
parameter_list|,
name|byte
index|[]
name|apuBytes
parameter_list|,
name|byte
index|[]
name|apvBytes
parameter_list|,
name|int
name|algoKeyBitLen
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|emptyPartyInfo
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|apuBytes
operator|!=
literal|null
operator|&&
name|apvBytes
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|apuBytes
argument_list|,
name|apvBytes
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Derived key calculation problem: apu equals to apv"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_ENCRYPTION_FAILURE
argument_list|)
throw|;
block|}
name|byte
index|[]
name|algorithmId
init|=
name|concatenateDatalenAndData
argument_list|(
name|StringUtils
operator|.
name|toBytesASCII
argument_list|(
name|algoName
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|partyUInfo
init|=
name|apuBytes
operator|==
literal|null
condition|?
name|emptyPartyInfo
else|:
name|concatenateDatalenAndData
argument_list|(
name|apuBytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|partyVInfo
init|=
name|apvBytes
operator|==
literal|null
condition|?
name|emptyPartyInfo
else|:
name|concatenateDatalenAndData
argument_list|(
name|apvBytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|suppPubInfo
init|=
name|datalenToBytes
argument_list|(
name|algoKeyBitLen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|otherInfo
init|=
operator|new
name|byte
index|[
name|algorithmId
operator|.
name|length
operator|+
name|partyUInfo
operator|.
name|length
operator|+
name|partyVInfo
operator|.
name|length
operator|+
name|suppPubInfo
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|algorithmId
argument_list|,
literal|0
argument_list|,
name|otherInfo
argument_list|,
literal|0
argument_list|,
name|algorithmId
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|partyUInfo
argument_list|,
literal|0
argument_list|,
name|otherInfo
argument_list|,
name|algorithmId
operator|.
name|length
argument_list|,
name|partyUInfo
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|partyVInfo
argument_list|,
literal|0
argument_list|,
name|otherInfo
argument_list|,
name|algorithmId
operator|.
name|length
operator|+
name|partyUInfo
operator|.
name|length
argument_list|,
name|partyVInfo
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|suppPubInfo
argument_list|,
literal|0
argument_list|,
name|otherInfo
argument_list|,
name|algorithmId
operator|.
name|length
operator|+
name|partyUInfo
operator|.
name|length
operator|+
name|partyVInfo
operator|.
name|length
argument_list|,
name|suppPubInfo
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|concatKDF
init|=
operator|new
name|byte
index|[
literal|36
operator|+
name|otherInfo
operator|.
name|length
index|]
decl_stmt|;
name|concatKDF
index|[
literal|3
index|]
operator|=
literal|1
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keyZ
argument_list|,
literal|0
argument_list|,
name|concatKDF
argument_list|,
literal|4
argument_list|,
name|keyZ
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|otherInfo
argument_list|,
literal|0
argument_list|,
name|concatKDF
argument_list|,
literal|36
argument_list|,
name|otherInfo
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|round1Hash
init|=
name|MessageDigestUtils
operator|.
name|createDigest
argument_list|(
name|concatKDF
argument_list|,
name|MessageDigestUtils
operator|.
name|ALGO_SHA_256
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|round1Hash
argument_list|,
name|algoKeyBitLen
operator|/
literal|8
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Derived key calculation problem: round hash1 error"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_ENCRYPTION_FAILURE
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|generateKeyZ
parameter_list|(
name|ECPrivateKey
name|privateKey
parameter_list|,
name|ECPublicKey
name|publicKey
parameter_list|)
block|{
try|try
block|{
name|KeyAgreement
name|ka
init|=
name|KeyAgreement
operator|.
name|getInstance
argument_list|(
literal|"ECDH"
argument_list|)
decl_stmt|;
name|ka
operator|.
name|init
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|ka
operator|.
name|doPhase
argument_list|(
name|publicKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|ka
operator|.
name|generateSecret
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Derived key calculation problem"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_ENCRYPTION_FAILURE
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|concatenateDatalenAndData
parameter_list|(
name|byte
index|[]
name|bytesASCII
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|datalen
init|=
name|datalenToBytes
argument_list|(
name|bytesASCII
operator|.
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|all
init|=
operator|new
name|byte
index|[
literal|4
operator|+
name|bytesASCII
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|datalen
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytesASCII
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
literal|4
argument_list|,
name|bytesASCII
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|all
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|datalenToBytes
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
return|return
name|buf
operator|.
name|putInt
argument_list|(
name|len
argument_list|)
operator|.
name|array
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|JweHeaders
name|prepareJweHeaders
parameter_list|(
name|String
name|keyEncryptionAlgo
parameter_list|,
name|String
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|headers
operator|=
name|headers
operator|!=
literal|null
condition|?
name|headers
else|:
operator|new
name|JweHeaders
argument_list|()
expr_stmt|;
if|if
condition|(
name|keyEncryptionAlgo
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|setKeyEncryptionAlgorithm
argument_list|(
name|KeyAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|keyEncryptionAlgo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|headers
operator|.
name|setContentEncryptionAlgorithm
argument_list|(
name|ContentAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|contentEncryptionAlgo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|compression
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|setZipAlgorithm
argument_list|(
name|compression
argument_list|)
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
specifier|private
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|KeyEncryptionProvider
name|keyEncryptionProvider
parameter_list|,
name|ContentEncryptionProvider
name|ctEncryptionProvider
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|keyEncryptionProvider
operator|==
literal|null
operator|&&
name|ctEncryptionProvider
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Key or content encryptor is not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|NO_ENCRYPTOR
argument_list|)
throw|;
block|}
name|headers
operator|=
name|prepareJweHeaders
argument_list|(
name|keyEncryptionProvider
operator|!=
literal|null
condition|?
name|keyEncryptionProvider
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|getJwaName
argument_list|()
else|:
literal|null
argument_list|,
name|contentEncryptionAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|,
name|compression
argument_list|,
name|headers
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctEncryptionProvider
operator|==
literal|null
condition|)
block|{
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
return|return
operator|new
name|JweEncryption
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|ctEncryptionProvider
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|KeyDecryptionProvider
name|keyDecryptionProvider
parameter_list|,
name|SecretKey
name|ctDecryptionKey
parameter_list|,
name|ContentAlgorithm
name|contentDecryptionAlgo
parameter_list|)
block|{
if|if
condition|(
name|keyDecryptionProvider
operator|==
literal|null
operator|&&
name|ctDecryptionKey
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Key or content encryptor is not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|NO_ENCRYPTOR
argument_list|)
throw|;
block|}
if|if
condition|(
name|keyDecryptionProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|createJweDecryptionProvider
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
return|return
name|getDirectKeyJweDecryption
argument_list|(
name|ctDecryptionKey
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyAlgorithm
name|getKeyEncryptionAlgorithm
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|KeyAlgorithm
name|algo
parameter_list|,
name|KeyAlgorithm
name|defaultAlgo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|algo
operator|=
name|getKeyEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|defaultAlgo
argument_list|)
expr_stmt|;
block|}
return|return
name|algo
return|;
block|}
specifier|public
specifier|static
name|KeyAlgorithm
name|getKeyEncryptionAlgorithm
parameter_list|(
name|Properties
name|props
parameter_list|,
name|KeyAlgorithm
name|defaultAlgo
parameter_list|)
block|{
return|return
name|getKeyEncryptionAlgorithm
argument_list|(
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
argument_list|,
name|props
argument_list|,
name|defaultAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyAlgorithm
name|getKeyEncryptionAlgorithm
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|KeyAlgorithm
name|defaultAlgo
parameter_list|)
block|{
name|String
name|algo
init|=
name|KeyManagementUtils
operator|.
name|getKeyAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_KEY_ALGORITHM
argument_list|,
name|defaultAlgo
operator|==
literal|null
condition|?
literal|null
else|:
name|defaultAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|algo
operator|==
literal|null
condition|?
literal|null
else|:
name|KeyAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|algo
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|KeyAlgorithm
name|getDefaultKeyAlgorithm
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
name|KeyType
name|keyType
init|=
name|jwk
operator|.
name|getKeyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|KeyType
operator|.
name|OCTET
operator|==
name|keyType
condition|)
block|{
return|return
name|KeyAlgorithm
operator|.
name|A128GCMKW
return|;
block|}
elseif|else
if|if
condition|(
name|KeyType
operator|.
name|RSA
operator|==
name|keyType
condition|)
block|{
return|return
name|KeyAlgorithm
operator|.
name|RSA_OAEP
return|;
block|}
else|else
block|{
return|return
name|KeyAlgorithm
operator|.
name|ECDH_ES_A128KW
return|;
block|}
block|}
specifier|public
specifier|static
name|ContentAlgorithm
name|getContentEncryptionAlgorithm
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|ContentAlgorithm
name|algo
parameter_list|,
name|ContentAlgorithm
name|defaultAlgo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|algo
operator|=
name|getContentEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|defaultAlgo
argument_list|)
expr_stmt|;
block|}
return|return
name|algo
return|;
block|}
specifier|public
specifier|static
name|ContentAlgorithm
name|getContentEncryptionAlgorithm
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
return|return
name|getContentEncryptionAlgorithm
argument_list|(
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ContentAlgorithm
name|getContentEncryptionAlgorithm
parameter_list|(
name|Properties
name|props
parameter_list|,
name|ContentAlgorithm
name|defaultAlgo
parameter_list|)
block|{
return|return
name|getContentEncryptionAlgorithm
argument_list|(
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
argument_list|,
name|props
argument_list|,
name|defaultAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ContentAlgorithm
name|getContentEncryptionAlgorithm
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|ContentAlgorithm
name|defaultAlgo
parameter_list|)
block|{
name|String
name|algo
init|=
name|KeyManagementUtils
operator|.
name|getKeyAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_CONTENT_ALGORITHM
argument_list|,
name|defaultAlgo
operator|==
literal|null
condition|?
literal|null
else|:
name|defaultAlgo
operator|.
name|getJwaName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ContentAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|algo
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|encrypt
parameter_list|(
name|KeyEncryptionProvider
name|keyEncryptionProvider
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|JweEncryptionProvider
name|jwe
init|=
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|encrypt
argument_list|(
name|content
argument_list|,
name|toJweHeaders
argument_list|(
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|decrypt
parameter_list|(
name|KeyDecryptionProvider
name|keyDecryptionProvider
parameter_list|,
name|ContentAlgorithm
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|JweDecryptionProvider
name|jwe
init|=
name|createJweDecryptionProvider
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentAlgo
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|decrypt
argument_list|(
name|content
argument_list|)
operator|.
name|getContent
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|JweHeaders
name|toJweHeaders
parameter_list|(
name|String
name|ct
parameter_list|)
block|{
return|return
operator|new
name|JweHeaders
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|singletonMap
argument_list|(
name|JoseConstants
operator|.
name|HEADER_CONTENT_TYPE
argument_list|,
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|validateJweCertificateChain
parameter_list|(
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certs
parameter_list|)
block|{
name|Properties
name|props
init|=
name|loadEncryptionInProperties
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|KeyManagementUtils
operator|.
name|validateCertificateChain
argument_list|(
name|props
argument_list|,
name|certs
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Properties
name|loadEncryptionInProperties
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|String
name|keyEncryptionAlgorithm
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_KEY_ALGORITHM
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyEncryptionAlgorithm
operator|!=
literal|null
operator|&&
name|AlgorithmUtils
operator|.
name|PBES_HS_SET
operator|.
name|contains
argument_list|(
name|keyEncryptionAlgorithm
argument_list|)
condition|)
block|{
comment|// We don't need to load the keystore properties for the PBES case
name|required
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|KeyManagementUtils
operator|.
name|loadStoreProperties
argument_list|(
name|m
argument_list|,
name|required
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_IN_PROPS
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_PROPS
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Properties
name|loadEncryptionOutProperties
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|String
name|keyEncryptionAlgorithm
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_KEY_ALGORITHM
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyEncryptionAlgorithm
operator|!=
literal|null
operator|&&
name|AlgorithmUtils
operator|.
name|PBES_HS_SET
operator|.
name|contains
argument_list|(
name|keyEncryptionAlgorithm
argument_list|)
condition|)
block|{
comment|// We don't need to load the keystore properties for the PBES case
name|required
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|KeyManagementUtils
operator|.
name|loadStoreProperties
argument_list|(
name|m
argument_list|,
name|required
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_OUT_PROPS
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_PROPS
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Properties
name|loadEncryptionProperties
parameter_list|(
name|String
name|propertiesName
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
return|return
name|KeyManagementUtils
operator|.
name|loadStoreProperties
argument_list|(
name|m
argument_list|,
name|required
argument_list|,
name|propertiesName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|checkEncryptionKeySize
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|RSAKey
operator|&&
operator|(
operator|(
name|RSAKey
operator|)
name|key
operator|)
operator|.
name|getModulus
argument_list|()
operator|.
name|bitLength
argument_list|()
operator|<
literal|2048
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"A key of size: "
operator|+
operator|(
operator|(
name|RSAKey
operator|)
name|key
operator|)
operator|.
name|getModulus
argument_list|()
operator|.
name|bitLength
argument_list|()
operator|+
literal|" was used with an RSA encryption algorithm. 2048 is the minimum size that is accepted"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|KEY_DECRYPTION_FAILURE
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|JsonWebKeys
name|loadPublicKeyEncryptionKeys
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|String
name|storeType
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"jwk"
operator|.
name|equals
argument_list|(
name|storeType
argument_list|)
condition|)
block|{
return|return
name|JwkUtils
operator|.
name|loadPublicJwkSet
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
return|;
block|}
comment|//TODO: consider loading all the public keys in the store
name|PublicKey
name|key
init|=
name|KeyManagementUtils
operator|.
name|loadPublicKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|fromPublicKey
argument_list|(
name|key
argument_list|,
name|props
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_KEY_ALGORITHM
argument_list|)
decl_stmt|;
return|return
operator|new
name|JsonWebKeys
argument_list|(
name|jwk
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Properties
name|loadJweProperties
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|propLoc
parameter_list|)
block|{
try|try
block|{
return|return
name|JoseUtils
operator|.
name|loadProperties
argument_list|(
name|propLoc
argument_list|,
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"JWS init properties are not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|NO_INIT_PROPERTIES
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

