begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|support
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|KeyAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweDecryptionOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweDecryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweJsonConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JwkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJsonConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|ApacheCXFConsumer
block|{
specifier|public
name|void
name|consumeJWS
parameter_list|(
name|String
name|signedData
parameter_list|,
name|String
name|plainText
parameter_list|,
name|String
name|jwks
parameter_list|)
block|{
name|JsonWebKeys
name|keys
init|=
name|JwkUtils
operator|.
name|readJwkSet
argument_list|(
name|jwks
argument_list|)
decl_stmt|;
if|if
condition|(
name|signedData
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|consumeJsonJWS
argument_list|(
name|signedData
argument_list|,
name|plainText
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumeCompactJWS
argument_list|(
name|signedData
argument_list|,
name|plainText
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|consumeJWE
parameter_list|(
name|String
name|encryptedData
parameter_list|,
name|String
name|plainText
parameter_list|,
name|String
name|jwks
parameter_list|)
block|{
name|JsonWebKeys
name|keys
init|=
name|JwkUtils
operator|.
name|readJwkSet
argument_list|(
name|jwks
argument_list|)
decl_stmt|;
if|if
condition|(
name|encryptedData
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|consumeJsonJWE
argument_list|(
name|encryptedData
argument_list|,
name|plainText
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumeCompactJWE
argument_list|(
name|encryptedData
argument_list|,
name|plainText
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|consumeCompactJWS
parameter_list|(
name|String
name|signedData
parameter_list|,
name|String
name|plainText
parameter_list|,
name|JsonWebKeys
name|keys
parameter_list|)
block|{
comment|// Validate Signature
comment|// 1. Read data to get key id (only need to do this if you don't know the key)
name|JwsCompactConsumer
name|jwsConsumer
init|=
operator|new
name|JwsCompactConsumer
argument_list|(
name|signedData
argument_list|)
decl_stmt|;
name|String
name|kid
init|=
name|jwsConsumer
operator|.
name|getJwsHeaders
argument_list|()
operator|.
name|getKeyId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Data does not contain kid header."
argument_list|,
name|kid
argument_list|)
expr_stmt|;
comment|// 2. Get key
name|JsonWebKey
name|key
init|=
name|keys
operator|.
name|getKey
argument_list|(
name|kid
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Data signed with unknown key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// 3. Verify
name|SignatureAlgorithm
name|signAlgo
init|=
name|jwsConsumer
operator|.
name|getJwsHeaders
argument_list|()
operator|.
name|getSignatureAlgorithm
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Signed data does not define algorithm used"
argument_list|,
name|signAlgo
argument_list|)
expr_stmt|;
name|JwsSignatureVerifier
name|signatureVerifier
init|=
name|JwsUtils
operator|.
name|getSignatureVerifier
argument_list|(
name|key
argument_list|,
name|signAlgo
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Signature validation failed"
argument_list|,
name|jwsConsumer
operator|.
name|verifySignatureWith
argument_list|(
name|signatureVerifier
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate plain text
name|Assert
operator|.
name|assertEquals
argument_list|(
name|plainText
argument_list|,
name|jwsConsumer
operator|.
name|getDecodedJwsPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|consumeJsonJWS
parameter_list|(
name|String
name|signedData
parameter_list|,
name|String
name|plainText
parameter_list|,
name|JsonWebKeys
name|keys
parameter_list|)
block|{
comment|// Validate signature
comment|// 1. Read data
name|JwsJsonConsumer
name|jwsConsumer
init|=
operator|new
name|JwsJsonConsumer
argument_list|(
name|signedData
argument_list|)
decl_stmt|;
name|jwsConsumer
operator|.
name|getSignatureEntries
argument_list|()
operator|.
name|forEach
argument_list|(
name|signature
lambda|->
block|{
name|String
name|kid
init|=
name|signature
operator|.
name|getKeyId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Signature does not contain kid."
argument_list|,
name|kid
argument_list|)
expr_stmt|;
comment|// 2. Get Key
name|JsonWebKey
name|key
init|=
name|keys
operator|.
name|getKey
argument_list|(
name|kid
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Data signed with unknown key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// 3. Verify
name|SignatureAlgorithm
name|signAlgo
init|=
name|signature
operator|.
name|getUnionHeader
argument_list|()
operator|.
name|getSignatureAlgorithm
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Signed data does not define algorithm used"
argument_list|,
name|signAlgo
argument_list|)
expr_stmt|;
name|JwsSignatureVerifier
name|signatureVerifier
init|=
name|JwsUtils
operator|.
name|getSignatureVerifier
argument_list|(
name|key
argument_list|,
name|signAlgo
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Signature validation failed"
argument_list|,
name|jwsConsumer
operator|.
name|verifySignatureWith
argument_list|(
name|signatureVerifier
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate plain text
name|Assert
operator|.
name|assertEquals
argument_list|(
name|plainText
argument_list|,
name|signature
operator|.
name|getDecodedJwsPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|consumeCompactJWE
parameter_list|(
name|String
name|encryptedData
parameter_list|,
name|String
name|plainText
parameter_list|,
name|JsonWebKeys
name|keys
parameter_list|)
block|{
comment|// Decrypt
comment|// 1. Read data to get key id (only need to do this if you don't know the key)
name|JweCompactConsumer
name|jweConsumer
init|=
operator|new
name|JweCompactConsumer
argument_list|(
name|encryptedData
argument_list|)
decl_stmt|;
name|String
name|kid
init|=
name|jweConsumer
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getKeyId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Data does not contain kid header."
argument_list|,
name|kid
argument_list|)
expr_stmt|;
comment|// 2. Get key
name|JsonWebKey
name|key
init|=
name|keys
operator|.
name|getKey
argument_list|(
name|kid
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Data encrypted with unknown key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// 3. decrypt
name|JweDecryptionProvider
name|decryptor
init|=
name|getJweDecryptionProvider
argument_list|(
name|key
argument_list|,
name|jweConsumer
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
argument_list|,
name|jweConsumer
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|decryptedText
init|=
name|decryptor
operator|.
name|decrypt
argument_list|(
name|encryptedData
argument_list|)
operator|.
name|getContentText
argument_list|()
decl_stmt|;
comment|// Validate plain text
name|Assert
operator|.
name|assertEquals
argument_list|(
name|plainText
argument_list|,
name|decryptedText
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|consumeJsonJWE
parameter_list|(
name|String
name|encryptedData
parameter_list|,
name|String
name|plainText
parameter_list|,
name|JsonWebKeys
name|keys
parameter_list|)
block|{
comment|// Decrypt
comment|// 1. Read data
name|JweJsonConsumer
name|jweConsumer
init|=
operator|new
name|JweJsonConsumer
argument_list|(
name|encryptedData
argument_list|)
decl_stmt|;
name|jweConsumer
operator|.
name|getRecipients
argument_list|()
operator|.
name|forEach
argument_list|(
name|encryptionBlock
lambda|->
block|{
name|String
name|kid
init|=
name|Crypto
operator|.
name|findKeyId
argument_list|(
name|jweConsumer
argument_list|,
name|encryptionBlock
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Data does not contain kid header."
argument_list|,
name|kid
argument_list|)
expr_stmt|;
comment|// 2. Get Key
name|JsonWebKey
name|key
init|=
name|keys
operator|.
name|getKey
argument_list|(
name|kid
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Data encrypted with unknown key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// 3. Decrypt
name|KeyAlgorithm
name|keyAlgo
init|=
name|Crypto
operator|.
name|findKeyAlgorithm
argument_list|(
name|jweConsumer
argument_list|,
name|encryptionBlock
argument_list|)
decl_stmt|;
name|ContentAlgorithm
name|contentAlgo
init|=
name|Crypto
operator|.
name|findContentAlgorithm
argument_list|(
name|jweConsumer
argument_list|,
name|encryptionBlock
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Encrypted data does not define algorithm used"
argument_list|,
name|contentAlgo
argument_list|)
expr_stmt|;
name|JweDecryptionProvider
name|decryptor
init|=
name|getJweDecryptionProvider
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentAlgo
argument_list|)
decl_stmt|;
name|JweDecryptionOutput
name|output
init|=
name|jweConsumer
operator|.
name|decryptWith
argument_list|(
name|decryptor
argument_list|,
name|encryptionBlock
argument_list|)
decl_stmt|;
comment|// Validate plain text
name|String
name|payload
init|=
name|output
operator|.
name|getContentText
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|plainText
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JweDecryptionProvider
name|getJweDecryptionProvider
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|KeyAlgorithm
name|keyEncryptionAlgorithm
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgorithm
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|getAlgorithm
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|JweUtils
operator|.
name|createJweDecryptionProvider
argument_list|(
name|key
argument_list|,
name|contentEncryptionAlgorithm
argument_list|)
return|;
block|}
switch|switch
condition|(
name|key
operator|.
name|getKeyType
argument_list|()
condition|)
block|{
case|case
name|EC
case|:
return|return
name|JweUtils
operator|.
name|createJweDecryptionProvider
argument_list|(
name|JwkUtils
operator|.
name|toECPrivateKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|keyEncryptionAlgorithm
argument_list|,
name|contentEncryptionAlgorithm
argument_list|)
return|;
case|case
name|RSA
case|:
return|return
name|JweUtils
operator|.
name|createJweDecryptionProvider
argument_list|(
name|JwkUtils
operator|.
name|toRSAPrivateKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|keyEncryptionAlgorithm
argument_list|,
name|contentEncryptionAlgorithm
argument_list|)
return|;
case|case
name|OCTET
case|:
name|SecretKey
name|secretKey
init|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
operator|(
name|String
operator|)
name|key
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|OCTET_KEY_VALUE
argument_list|)
argument_list|,
name|keyEncryptionAlgorithm
operator|.
name|getJavaName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|JweUtils
operator|.
name|createJweDecryptionProvider
argument_list|(
name|secretKey
argument_list|,
name|keyEncryptionAlgorithm
argument_list|,
name|contentEncryptionAlgorithm
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JWK KeyType not supported: "
operator|+
name|key
operator|.
name|getKeyType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

