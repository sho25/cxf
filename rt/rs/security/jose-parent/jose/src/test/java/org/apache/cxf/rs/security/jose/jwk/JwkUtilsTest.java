begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|KeyManagementUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|KeyAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|JwkUtilsTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|RSA_KEY
init|=
literal|"{"
operator|+
literal|"\"kty\": \"RSA\","
operator|+
literal|"\"n\": \"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAt"
operator|+
literal|"VT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn6"
operator|+
literal|"4tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FD"
operator|+
literal|"W2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n9"
operator|+
literal|"1CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINH"
operator|+
literal|"aQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw\","
operator|+
literal|"\"e\": \"AQAB\","
operator|+
literal|"\"alg\": \"RS256\","
operator|+
literal|"\"kid\": \"2011-04-29\""
operator|+
literal|"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EC_256_KEY
init|=
literal|"{"
operator|+
literal|"\"kty\": \"EC\","
operator|+
literal|"\"x\": \"CEuRLUISufhcjrj-32N0Bvl3KPMiHH9iSw4ohN9jxrA\","
operator|+
literal|"\"y\": \"EldWz_iXSK3l_S7n4w_t3baxos7o9yqX0IjzG959vHc\","
operator|+
literal|"\"crv\": \"P-256\""
operator|+
literal|"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EC_384_KEY
init|=
literal|"{"
operator|+
literal|"\"kty\": \"EC\","
operator|+
literal|"\"x\": \"2jCG5DmKUql9YPn7F2C-0ljWEbj8O8-vn5Ih1k7Wzb-y3NpBLiG1BiRa392b1kcQ\","
operator|+
literal|"\"y\": \"7Ragi9rT-5tSzaMbJlH_EIJl6rNFfj4V4RyFM5U2z4j1hesX5JXa8dWOsE-5wPIl\","
operator|+
literal|"\"crv\": \"P-384\""
operator|+
literal|"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EC_521_KEY
init|=
literal|"{"
operator|+
literal|"\"kty\": \"EC\","
operator|+
literal|"\"x\": \"Aeq3uMrb3iCQEt0PzSeZMmrmYhsKP5DM1oMP6LQzTFQY9-F3Ab45xiK4AJxltXEI-87g3gRwId88hTyHgq180JDt\","
operator|+
literal|"\"y\": \"ARA0lIlrZMEzaXyXE4hjEkc50y_JON3qL7HSae9VuWpOv_2kit8p3pyJBiRb468_U5ztLT7FvDvtimyS42trhDTu\","
operator|+
literal|"\"crv\": \"P-521\""
operator|+
literal|"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OCTET_KEY_1
init|=
literal|"{"
operator|+
literal|"\"kty\": \"oct\","
operator|+
literal|"\"k\": \"ZW8Eg8TiwoT2YamLJfC2leYpLgLmUAh_PcMHqRzBnMg\""
operator|+
literal|"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OCTET_KEY_2
init|=
literal|"{"
operator|+
literal|"\"kty\": \"oct\","
operator|+
literal|"\"k\": \"NGbwp1rC4n85A1SaNxoHow\""
operator|+
literal|"}"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testRsaKeyModulus
parameter_list|()
throws|throws
name|Exception
block|{
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|readJwkKey
argument_list|(
name|RSA_KEY
argument_list|)
decl_stmt|;
name|String
name|modulus
init|=
name|jwk
operator|.
name|getStringProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_MODULUS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|256
argument_list|,
name|JoseUtils
operator|.
name|decode
argument_list|(
name|modulus
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|RSAPublicKey
name|pk
init|=
name|JwkUtils
operator|.
name|toRSAPublicKey
argument_list|(
name|jwk
argument_list|)
decl_stmt|;
name|JsonWebKey
name|jwk2
init|=
name|JwkUtils
operator|.
name|fromRSAPublicKey
argument_list|(
name|pk
argument_list|,
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|modulus2
init|=
name|jwk2
operator|.
name|getStringProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_MODULUS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|256
argument_list|,
name|JoseUtils
operator|.
name|decode
argument_list|(
name|modulus2
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|modulus2
argument_list|,
name|modulus
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromToPrivateRsaKey
parameter_list|()
throws|throws
name|Exception
block|{
name|RSAPrivateKey
name|privateKey1
init|=
operator|(
name|RSAPrivateKey
operator|)
name|KeyManagementUtils
operator|.
name|loadPrivateKey
argument_list|(
literal|"org/apache/cxf/rs/security/jose/jws/alice.jks"
argument_list|,
literal|"password"
argument_list|,
literal|"alice"
argument_list|,
literal|"password"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|JsonWebKey
name|jwk1
init|=
name|JwkUtils
operator|.
name|fromRSAPrivateKey
argument_list|(
name|privateKey1
argument_list|,
name|KeyAlgorithm
operator|.
name|RSA_OAEP_256
operator|.
name|getJwaName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|jwk1
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jwk1
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PRIVATE_EXP
argument_list|)
argument_list|)
expr_stmt|;
name|RSAPrivateKey
name|privateKey2
init|=
name|JwkUtils
operator|.
name|toRSAPrivateKey
argument_list|(
name|jwk1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|privateKey2
argument_list|,
name|privateKey1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromToPublicRsaKey
parameter_list|()
throws|throws
name|Exception
block|{
name|RSAPublicKey
name|publicKey1
init|=
operator|(
name|RSAPublicKey
operator|)
name|KeyManagementUtils
operator|.
name|loadPublicKey
argument_list|(
literal|"org/apache/cxf/rs/security/jose/jws/alice.jks"
argument_list|,
literal|"password"
argument_list|,
literal|"alice"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|JsonWebKey
name|jwk1
init|=
name|JwkUtils
operator|.
name|fromRSAPublicKey
argument_list|(
name|publicKey1
argument_list|,
name|KeyAlgorithm
operator|.
name|RSA_OAEP_256
operator|.
name|getJwaName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|jwk1
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|jwk1
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PRIVATE_EXP
argument_list|)
argument_list|)
expr_stmt|;
name|RSAPublicKey
name|publicKey2
init|=
name|JwkUtils
operator|.
name|toRSAPublicKey
argument_list|(
name|jwk1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|publicKey2
argument_list|,
name|publicKey1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromToPublicRsaKey2
parameter_list|()
throws|throws
name|Exception
block|{
name|BigInteger
name|n
init|=
operator|new
name|BigInteger
argument_list|(
literal|"525569531153621228164069013206963023039121751335221395180741421479892725873020691336158448746650762107595"
operator|+
literal|"8352148531548486906896903886764928450353366890712125983926472500064566992690642117517954169974907061547"
operator|+
literal|"3353190040609042090075291281955112293781438730376121249764205272939686534594208819023639183157456093565"
operator|+
literal|"4148815673814517535941780340023556224072529306118783149589148262622268860151306096159642808944513667279"
operator|+
literal|"4704664637866917427597486905443676772669967766269923280637049233876979061993814679654208850149406432368"
operator|+
literal|"2161337544093644200063709176660451323844399667162451308704624790051211834667782115390754507376506824717"
operator|+
literal|"9938484919159962066058375588059543574624283546151162925649987580839763809787286157381728046746195701379"
operator|+
literal|"0902293850442561995774628930418082115864728330723111110174368232384797709242627319756376556142528218939"
operator|+
literal|"7783875183123336240582938265783686836202210705597100765098627429017295706176890505466946207401105614189"
operator|+
literal|"2784165813507235148683348014201150784998715061575093867666453332433607035581378251824779499939486011300"
operator|+
literal|"7245546797308586043310145338620953330797301627631794650975659295961069452157705404946866414340860434286"
operator|+
literal|"65874725802069389719375237126155948350679342167596471110676954951640992376889874630989205394080379"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|BigInteger
name|e
init|=
operator|new
name|BigInteger
argument_list|(
literal|"65537"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|RSAPublicKey
name|publicKey
init|=
name|CryptoUtils
operator|.
name|getRSAPublicKey
argument_list|(
name|n
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|JsonWebKey
name|jwk1
init|=
name|JwkUtils
operator|.
name|fromRSAPublicKey
argument_list|(
name|publicKey
argument_list|,
name|KeyAlgorithm
operator|.
name|RSA_OAEP_256
operator|.
name|getJwaName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|jwk1
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|jwk1
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PRIVATE_EXP
argument_list|)
argument_list|)
expr_stmt|;
name|RSAPublicKey
name|privateKey2
init|=
name|JwkUtils
operator|.
name|toRSAPublicKey
argument_list|(
name|jwk1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|privateKey2
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToPrivateRsaKeyWithoutE
parameter_list|()
throws|throws
name|Exception
block|{
name|RSAPrivateKey
name|privateKey1
init|=
operator|(
name|RSAPrivateKey
operator|)
name|KeyManagementUtils
operator|.
name|loadPrivateKey
argument_list|(
literal|"org/apache/cxf/rs/security/jose/jws/alice.jks"
argument_list|,
literal|"password"
argument_list|,
literal|"alice"
argument_list|,
literal|"password"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|JsonWebKey
name|jwk1
init|=
name|JwkUtils
operator|.
name|fromRSAPrivateKey
argument_list|(
name|privateKey1
argument_list|,
name|KeyAlgorithm
operator|.
name|RSA_OAEP_256
operator|.
name|getJwaName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|jwk1
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|)
argument_list|)
expr_stmt|;
name|jwk1
operator|.
name|asMap
argument_list|()
operator|.
name|remove
argument_list|(
name|JsonWebKey
operator|.
name|RSA_PUBLIC_EXP
argument_list|)
expr_stmt|;
try|try
block|{
name|JwkUtils
operator|.
name|toRSAPrivateKey
argument_list|(
name|jwk1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"JWK without the public exponent can not be converted to RSAPrivateKey"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JoseException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRsaKeyThumbprint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|thumbprint
init|=
name|JwkUtils
operator|.
name|getThumbprint
argument_list|(
name|RSA_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs"
argument_list|,
name|thumbprint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOctetKey1Thumbprint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|thumbprint
init|=
name|JwkUtils
operator|.
name|getThumbprint
argument_list|(
name|OCTET_KEY_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"7WWD36NF4WCpPaYtK47mM4o0a5CCeOt01JXSuMayv5g"
argument_list|,
name|thumbprint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOctetKey2Thumbprint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|thumbprint
init|=
name|JwkUtils
operator|.
name|getThumbprint
argument_list|(
name|OCTET_KEY_2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"5_qb56G0OJDw-lb5mkDaWS4MwuY0fatkn9LkNqUHqMk"
argument_list|,
name|thumbprint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEc256KeyThumbprint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|thumbprint
init|=
name|JwkUtils
operator|.
name|getThumbprint
argument_list|(
name|EC_256_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"j4UYwo9wrtllSHaoLDJNh7MhVCL8t0t8cGPPzChpYDs"
argument_list|,
name|thumbprint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEc384KeyThumbprint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|thumbprint
init|=
name|JwkUtils
operator|.
name|getThumbprint
argument_list|(
name|EC_384_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"vZtaWIw-zw95JNzzURg1YB7mWNLlm44YZDZzhrPNetM"
argument_list|,
name|thumbprint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEc521KeyThumbprint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|thumbprint
init|=
name|JwkUtils
operator|.
name|getThumbprint
argument_list|(
name|EC_521_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rz4Ohmpxg-UOWIWqWKHlOe0bHSjNUFlHW5vwG_M7qYg"
argument_list|,
name|thumbprint
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

