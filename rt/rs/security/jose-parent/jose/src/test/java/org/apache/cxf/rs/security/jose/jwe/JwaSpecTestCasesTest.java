begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|basic
operator|.
name|JsonMapObjectReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|KeyAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|encoders
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  * This class includes some of the test-cases in the appendix of the JWA spec -  * https://tools.ietf.org/html/rfc7518#appendix-B  */
end_comment

begin_class
specifier|public
class|class
name|JwaSpecTestCasesTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|K1
init|=
literal|"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|K2
init|=
literal|"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"
operator|+
literal|"202122232425262728292a2b2c2d2e2f"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|K3
init|=
literal|"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f"
operator|+
literal|"202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IV
init|=
literal|"1af38c2dc2b96ffdd86694092341bc04"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|P
init|=
literal|"41206369706865722073797374656d206d757374206e6f74206265207265717569"
operator|+
literal|"72656420746f206265207365637265742c20616e64206974206d7573742062652061626c6520746f2066616c6c20"
operator|+
literal|"696e746f207468652068616e6473206f662074686520656e656d7920776974686f757420696e636f6e76656e6965"
operator|+
literal|"6e6365"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|E
init|=
literal|"c80edfa32ddf39d5ef00c0b468834279a2e46a1b8049f792f76bfe54b903a9c9a9"
operator|+
literal|"4ac9b47ad2655c5f10f9aef71427e2fc6f9b3f399a221489f16362c703233609d45ac69864e3321cf82935ac4096"
operator|+
literal|"c86e133314c54019e8ca7980dfa4b9cf1b384c486f3a54c51078158ee5d79de59fbd34d848b3d69550a676463444"
operator|+
literal|"27ade54b8851ffb598f7f80074b9473c82e2db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|E2
init|=
literal|"ea65da6b59e61edb419be62d19712ae5d303eeb50052d0dfd6697f77224c8edb0"
operator|+
literal|"00d279bdc14c1072654bd30944230c657bed4ca0c9f4a8466f22b226d1746214bf8cfc2400add9f5126e479663fc"
operator|+
literal|"90b3bed787a2f0ffcbf3904be2a641d5c2105bfe591bae23b1d7449e532eef60a9ac8bb6c6b01d35d49787bcd57e"
operator|+
literal|"f484927f280adc91ac0c4e79c7b11efc60054e3"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|E3
init|=
literal|"4affaaadb78c31c5da4b1b590d10ffbd3dd8d5d302423526912da037ecbcc7bd8"
operator|+
literal|"22c301dd67c373bccb584ad3e9279c2e6d12a1374b77f077553df829410446b36ebd97066296ae6427ea75c2e084"
operator|+
literal|"6a11a09ccf5370dc80bfecbad28c73f09b3a3b75e662a2594410ae496b2e2e6609e31e6e02cc837f053d21f37ff4"
operator|+
literal|"f51950bbe2638d09dd7a4930930806d0703b1f6"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|registerBouncyCastleIfNeeded
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Cipher
operator|.
name|getInstance
argument_list|(
name|AlgorithmUtils
operator|.
name|AES_GCM_ALGO_JAVA
argument_list|)
expr_stmt|;
name|Cipher
operator|.
name|getInstance
argument_list|(
name|AlgorithmUtils
operator|.
name|AES_CBC_ALGO_JAVA
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|unregisterBouncyCastleIfNeeded
parameter_list|()
throws|throws
name|Exception
block|{
name|Security
operator|.
name|removeProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAes128CBCHMACSHA256
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSingleRecipient
argument_list|(
name|P
argument_list|,
name|E
argument_list|,
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
argument_list|,
name|Hex
operator|.
name|decode
argument_list|(
name|IV
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|Hex
operator|.
name|decode
argument_list|(
name|K1
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAes182CBCHMACSHA384
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSingleRecipient
argument_list|(
name|P
argument_list|,
name|E2
argument_list|,
name|ContentAlgorithm
operator|.
name|A192CBC_HS384
argument_list|,
name|Hex
operator|.
name|decode
argument_list|(
name|IV
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|Hex
operator|.
name|decode
argument_list|(
name|K2
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAes256CBCHMACSHA512
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSingleRecipient
argument_list|(
name|P
argument_list|,
name|E3
argument_list|,
name|ContentAlgorithm
operator|.
name|A256CBC_HS512
argument_list|,
name|Hex
operator|.
name|decode
argument_list|(
name|IV
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|Hex
operator|.
name|decode
argument_list|(
name|K3
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestSingleRecipient
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|expectedOutput
parameter_list|,
name|ContentAlgorithm
name|contentEncryptionAlgo
parameter_list|,
specifier|final
name|byte
index|[]
name|iv
parameter_list|,
specifier|final
name|byte
index|[]
name|cek
parameter_list|)
throws|throws
name|Exception
block|{
name|JweHeaders
name|headers
init|=
operator|new
name|JweHeaders
argument_list|(
name|KeyAlgorithm
operator|.
name|A128KW
argument_list|,
name|contentEncryptionAlgo
argument_list|)
decl_stmt|;
name|headers
operator|.
name|asMap
argument_list|()
operator|.
name|remove
argument_list|(
literal|"alg"
argument_list|)
expr_stmt|;
name|JweEncryptionProvider
name|jwe
init|=
literal|null
decl_stmt|;
name|SecretKey
name|cekKey
init|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|cek
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|jwe
operator|=
name|JweUtils
operator|.
name|getDirectKeyJweEncryption
argument_list|(
name|cekKey
argument_list|,
name|contentEncryptionAlgo
argument_list|)
expr_stmt|;
name|JweJsonProducer
name|p
init|=
operator|new
name|JweJsonProducer
argument_list|(
name|headers
argument_list|,
name|Hex
operator|.
name|decode
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
block|{
specifier|protected
name|JweEncryptionInput
name|createEncryptionInput
parameter_list|(
name|JweHeaders
name|jsonHeaders
parameter_list|)
block|{
name|JweEncryptionInput
name|input
init|=
name|super
operator|.
name|createEncryptionInput
argument_list|(
name|jsonHeaders
argument_list|)
decl_stmt|;
name|input
operator|.
name|setCek
argument_list|(
name|cek
argument_list|)
expr_stmt|;
name|input
operator|.
name|setIv
argument_list|(
name|iv
argument_list|)
expr_stmt|;
return|return
name|input
return|;
block|}
block|}
decl_stmt|;
name|String
name|jweJson
init|=
name|p
operator|.
name|encryptWith
argument_list|(
name|jwe
argument_list|)
decl_stmt|;
name|JsonMapObjectReaderWriter
name|jsonReader
init|=
operator|new
name|JsonMapObjectReaderWriter
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|jsonReader
operator|.
name|fromJson
argument_list|(
name|jweJson
argument_list|)
decl_stmt|;
comment|// Check IV matches
name|byte
index|[]
name|outputIv
init|=
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"iv"
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|outputIv
argument_list|,
name|iv
argument_list|)
expr_stmt|;
comment|// Check CipherText matches
name|byte
index|[]
name|cipherTextBytes
init|=
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"ciphertext"
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|cipherTextBytes
argument_list|,
name|Hex
operator|.
name|decode
argument_list|(
name|expectedOutput
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

