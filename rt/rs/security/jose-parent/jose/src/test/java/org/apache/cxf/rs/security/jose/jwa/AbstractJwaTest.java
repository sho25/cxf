begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractJwaTest
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|installBouncyCastleProvider
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|bcClassName
init|=
literal|"org.bouncycastle.jce.provider.BouncyCastleProvider"
decl_stmt|;
if|if
condition|(
name|Security
operator|.
name|getProvider
argument_list|(
name|bcClassName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|(
name|Provider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|bcClassName
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|removeBouncyCastleProvider
parameter_list|()
block|{
name|Security
operator|.
name|removeProvider
argument_list|(
literal|"org.bouncycastle.jce.provider.BouncyCastleProvider"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|loadResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|StringBuilder
name|input
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|AbstractDecryptTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|+
literal|" could not be loaded"
argument_list|,
name|stream
argument_list|)
expr_stmt|;
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|)
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|forEach
argument_list|(
name|line
lambda|->
name|input
operator|.
name|append
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|input
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

