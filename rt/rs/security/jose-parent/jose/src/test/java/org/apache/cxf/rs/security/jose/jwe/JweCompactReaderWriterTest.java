begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|KeyAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JwkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsCompactReaderWriterTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|JweCompactReaderWriterTest
extends|extends
name|Assert
block|{
comment|// A1 example
specifier|static
specifier|final
name|byte
index|[]
name|CONTENT_ENCRYPTION_KEY_A1
init|=
block|{
operator|(
name|byte
operator|)
literal|177
block|,
operator|(
name|byte
operator|)
literal|161
block|,
operator|(
name|byte
operator|)
literal|244
block|,
operator|(
name|byte
operator|)
literal|128
block|,
literal|84
block|,
operator|(
name|byte
operator|)
literal|143
block|,
operator|(
name|byte
operator|)
literal|225
block|,
literal|115
block|,
literal|63
block|,
operator|(
name|byte
operator|)
literal|180
block|,
literal|3
block|,
operator|(
name|byte
operator|)
literal|255
block|,
literal|107
block|,
operator|(
name|byte
operator|)
literal|154
block|,
operator|(
name|byte
operator|)
literal|212
block|,
operator|(
name|byte
operator|)
literal|246
block|,
operator|(
name|byte
operator|)
literal|138
block|,
literal|7
block|,
literal|110
block|,
literal|91
block|,
literal|112
block|,
literal|46
block|,
literal|34
block|,
literal|105
block|,
literal|47
block|,
operator|(
name|byte
operator|)
literal|130
block|,
operator|(
name|byte
operator|)
literal|203
block|,
literal|46
block|,
literal|122
block|,
operator|(
name|byte
operator|)
literal|234
block|,
literal|64
block|,
operator|(
name|byte
operator|)
literal|252
block|}
decl_stmt|;
specifier|static
specifier|final
name|String
name|RSA_MODULUS_ENCODED_A1
init|=
literal|"oahUIoWw0K0usKNuOR6H4wkf4oBUXHTxRvgb48E-BVvxkeDNjbC4he8rUW"
operator|+
literal|"cJoZmds2h7M70imEVhRU5djINXtqllXI4DFqcI1DgjT9LewND8MW2Krf3S"
operator|+
literal|"psk_ZkoFnilakGygTwpZ3uesH-PFABNIUYpOiN15dsQRkgr0vEhxN92i2a"
operator|+
literal|"sbOenSZeyaxziK72UwxrrKoExv6kc5twXTq4h-QChLOln0_mtUZwfsRaMS"
operator|+
literal|"tPs6mS6XrgxnxbWhojf663tuEQueGC-FCMfra36C9knDFGzKsNa7LZK2dj"
operator|+
literal|"YgyD3JR_MB_4NUJW_TqOQtwHYbxevoJArm-L5StowjzGy-_bq6Gw"
decl_stmt|;
specifier|static
specifier|final
name|String
name|RSA_PUBLIC_EXPONENT_ENCODED_A1
init|=
literal|"AQAB"
decl_stmt|;
specifier|static
specifier|final
name|String
name|RSA_PRIVATE_EXPONENT_ENCODED_A1
init|=
literal|"kLdtIj6GbDks_ApCSTYQtelcNttlKiOyPzMrXHeI-yk1F7-kpDxY4-WY5N"
operator|+
literal|"WV5KntaEeXS1j82E375xxhWMHXyvjYecPT9fpwR_M9gV8n9Hrh2anTpTD9"
operator|+
literal|"3Dt62ypW3yDsJzBnTnrYu1iwWRgBKrEYY46qAZIrA2xAwnm2X7uGR1hghk"
operator|+
literal|"qDp0Vqj3kbSCz1XyfCs6_LehBwtxHIyh8Ripy40p24moOAbgxVw3rxT_vl"
operator|+
literal|"t3UVe4WO3JkJOzlpUf-KTVI2Ptgm-dARxTEtE-id-4OJr0h-K-VFs3VSnd"
operator|+
literal|"VTIznSxfyrj8ILL6MG_Uv8YAu7VILSB3lOW085-4qE3DzgrTjgyQ"
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|INIT_VECTOR_A1
init|=
block|{
operator|(
name|byte
operator|)
literal|227
block|,
operator|(
name|byte
operator|)
literal|197
block|,
literal|117
block|,
operator|(
name|byte
operator|)
literal|252
block|,
literal|2
block|,
operator|(
name|byte
operator|)
literal|219
block|,
operator|(
name|byte
operator|)
literal|233
block|,
literal|68
block|,
operator|(
name|byte
operator|)
literal|180
block|,
operator|(
name|byte
operator|)
literal|225
block|,
literal|77
block|,
operator|(
name|byte
operator|)
literal|219
block|}
decl_stmt|;
comment|// A3 example
specifier|static
specifier|final
name|byte
index|[]
name|CONTENT_ENCRYPTION_KEY_A3
init|=
block|{
literal|4
block|,
operator|(
name|byte
operator|)
literal|211
block|,
literal|31
block|,
operator|(
name|byte
operator|)
literal|197
block|,
literal|84
block|,
operator|(
name|byte
operator|)
literal|157
block|,
operator|(
name|byte
operator|)
literal|252
block|,
operator|(
name|byte
operator|)
literal|254
block|,
literal|11
block|,
literal|100
block|,
operator|(
name|byte
operator|)
literal|157
block|,
operator|(
name|byte
operator|)
literal|250
block|,
literal|63
block|,
operator|(
name|byte
operator|)
literal|170
block|,
literal|106
block|,
operator|(
name|byte
operator|)
literal|206
block|,
literal|107
block|,
literal|124
block|,
operator|(
name|byte
operator|)
literal|212
block|,
literal|45
block|,
literal|111
block|,
literal|107
block|,
literal|9
block|,
operator|(
name|byte
operator|)
literal|219
block|,
operator|(
name|byte
operator|)
literal|200
block|,
operator|(
name|byte
operator|)
literal|177
block|,
literal|0
block|,
operator|(
name|byte
operator|)
literal|240
block|,
operator|(
name|byte
operator|)
literal|143
block|,
operator|(
name|byte
operator|)
literal|156
block|,
literal|44
block|,
operator|(
name|byte
operator|)
literal|207
block|}
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|INIT_VECTOR_A3
init|=
block|{
literal|3
block|,
literal|22
block|,
literal|60
block|,
literal|12
block|,
literal|43
block|,
literal|67
block|,
literal|104
block|,
literal|105
block|,
literal|108
block|,
literal|108
block|,
literal|105
block|,
literal|99
block|,
literal|111
block|,
literal|116
block|,
literal|104
block|,
literal|101
block|}
decl_stmt|;
specifier|static
specifier|final
name|String
name|KEY_ENCRYPTION_KEY_A3
init|=
literal|"GawgguFyGrWKav7AX4VKUg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JWE_OUTPUT_A3
init|=
literal|"eyJhbGciOiJBMTI4S1ciLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0"
operator|+
literal|".6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ"
operator|+
literal|".AxY8DCtDaGlsbGljb3RoZQ"
operator|+
literal|".KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY"
operator|+
literal|".U0m_YmjN04DJvceFICbCVQ"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|registerBouncyCastleIfNeeded
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Cipher
operator|.
name|getInstance
argument_list|(
name|AlgorithmUtils
operator|.
name|AES_GCM_ALGO_JAVA
argument_list|)
expr_stmt|;
name|Cipher
operator|.
name|getInstance
argument_list|(
name|AlgorithmUtils
operator|.
name|AES_CBC_ALGO_JAVA
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|unregisterBouncyCastleIfNeeded
parameter_list|()
throws|throws
name|Exception
block|{
name|Security
operator|.
name|removeProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptDecryptAesWrapA128CBCHS256
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|specPlainText
init|=
literal|"Live long and prosper."
decl_stmt|;
name|byte
index|[]
name|cekEncryptionKey
init|=
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|KEY_ENCRYPTION_KEY_A3
argument_list|)
decl_stmt|;
name|AesWrapKeyEncryptionAlgorithm
name|keyEncryption
init|=
operator|new
name|AesWrapKeyEncryptionAlgorithm
argument_list|(
name|cekEncryptionKey
argument_list|,
name|KeyAlgorithm
operator|.
name|A128KW
argument_list|)
decl_stmt|;
name|JweEncryptionProvider
name|encryption
init|=
operator|new
name|AesCbcHmacJweEncryption
argument_list|(
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
argument_list|,
name|CONTENT_ENCRYPTION_KEY_A3
argument_list|,
name|INIT_VECTOR_A3
argument_list|,
name|keyEncryption
argument_list|)
decl_stmt|;
name|String
name|jweContent
init|=
name|encryption
operator|.
name|encrypt
argument_list|(
name|specPlainText
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|JWE_OUTPUT_A3
argument_list|,
name|jweContent
argument_list|)
expr_stmt|;
name|AesWrapKeyDecryptionAlgorithm
name|keyDecryption
init|=
operator|new
name|AesWrapKeyDecryptionAlgorithm
argument_list|(
name|cekEncryptionKey
argument_list|)
decl_stmt|;
name|JweDecryptionProvider
name|decryption
init|=
operator|new
name|AesCbcHmacJweDecryption
argument_list|(
name|keyDecryption
argument_list|)
decl_stmt|;
name|String
name|decryptedText
init|=
name|decryption
operator|.
name|decrypt
argument_list|(
name|jweContent
argument_list|)
operator|.
name|getContentText
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|specPlainText
argument_list|,
name|decryptedText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testECDHESDirectKeyEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|ECPrivateKey
name|bobPrivateKey
init|=
name|CryptoUtils
operator|.
name|getECPrivateKey
argument_list|(
name|JsonWebKey
operator|.
name|EC_CURVE_P256
argument_list|,
literal|"VEmDZpDXXK8p8N0Cndsxs924q6nS1RXFASRl6BfUqdw"
argument_list|)
decl_stmt|;
specifier|final
name|ECPublicKey
name|bobPublicKey
init|=
name|CryptoUtils
operator|.
name|getECPublicKey
argument_list|(
name|JsonWebKey
operator|.
name|EC_CURVE_P256
argument_list|,
literal|"weNJy2HscCSM6AEDTDg04biOvhFhyyWvOHQfeF_PxMQ"
argument_list|,
literal|"e8lnCO-AlStT-NJVX-crhB7QRYhiix03illJOVAOyck"
argument_list|)
decl_stmt|;
name|JweEncryptionProvider
name|jweOut
init|=
operator|new
name|EcdhDirectKeyJweEncryption
argument_list|(
name|bobPublicKey
argument_list|,
name|JsonWebKey
operator|.
name|EC_CURVE_P256
argument_list|,
literal|"Alice"
argument_list|,
literal|"Bob"
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
decl_stmt|;
name|String
name|jweOutput
init|=
name|jweOut
operator|.
name|encrypt
argument_list|(
literal|"Hello"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|JweDecryptionProvider
name|jweIn
init|=
operator|new
name|EcdhDirectKeyJweDecryption
argument_list|(
name|bobPrivateKey
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|jweIn
operator|.
name|decrypt
argument_list|(
name|jweOutput
argument_list|)
operator|.
name|getContentText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRejectInvalidCurve
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test vectors are provided by Antonio Sanso, test follows a pattern based
comment|// on a similar contribution from Antonio to jose4j.
name|String
name|receiverJwkJson
init|=
literal|"\n{\"kty\":\"EC\",\n"
operator|+
literal|" \"crv\":\"P-256\",\n"
operator|+
literal|" \"x\":\"weNJy2HscCSM6AEDTDg04biOvhFhyyWvOHQfeF_PxMQ\",\n"
operator|+
literal|" \"y\":\"e8lnCO-AlStT-NJVX-crhB7QRYhiix03illJOVAOyck\",\n"
operator|+
literal|" \"d\":\"VEmDZpDXXK8p8N0Cndsxs924q6nS1RXFASRl6BfUqdw\"\n"
operator|+
literal|"}"
decl_stmt|;
name|JsonWebKey
name|receiverJwk
init|=
name|JwkUtils
operator|.
name|readJwkKey
argument_list|(
name|receiverJwkJson
argument_list|)
decl_stmt|;
name|ECPrivateKey
name|privateKey
init|=
name|JwkUtils
operator|.
name|toECPrivateKey
argument_list|(
name|receiverJwk
argument_list|)
decl_stmt|;
comment|//========================= attacking point #1 with order 113 ======================
comment|//The malicious JWE contains a public key with order 113
name|String
name|maliciousJWE1
init|=
literal|"eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImVuYyI6IkExMjhDQkMtSFMyNTYiLCJlcGsiOnsia3R5IjoiRU"
operator|+
literal|"MiLCJ4IjoiZ1Rsa"
operator|+
literal|"TY1ZVRRN3otQmgxNDdmZjhLM203azJVaURpRzJMcFlrV0FhRkpDYyIsInkiOiJjTEFuakthNGJ6akQ3REpWUHdhOUVQclJ6TUc3"
operator|+
literal|"ck9OZ3NpVUQta"
operator|+
literal|"2YzMEZzIiwiY3J2IjoiUC0yNTYifX0.qGAdxtEnrV_3zbIxU2ZKrMWcejNltjA_dtefBFnRh9A2z9cNIqYRWg.pEA5kX304PMCOm"
operator|+
literal|"FSKX_cEg.a9f"
operator|+
literal|"wUrx2JXi1OnWEMOmZhXd94-bEGCH9xxRwqcGuG2AMo-AwHoljdsH5C_kcTqlXS5p51OB1tvgQcMwB5rpTxg.72CHiYFecyDvuUa4"
operator|+
literal|"3KKT6w"
decl_stmt|;
name|JweDecryptionProvider
name|jweIn
init|=
name|JweUtils
operator|.
name|createJweDecryptionProvider
argument_list|(
name|privateKey
argument_list|,
name|KeyAlgorithm
operator|.
name|ECDH_ES_A128KW
argument_list|,
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
argument_list|)
decl_stmt|;
try|try
block|{
name|jweIn
operator|.
name|decrypt
argument_list|(
name|maliciousJWE1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Decryption should have failed due to invalid curve"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JweException
name|e
parameter_list|)
block|{
comment|// continue
block|}
comment|//========================= attacking point #2 with order 2447 ======================
comment|//The malicious JWE contains a public key with order 2447
name|String
name|maliciousJWE2
init|=
literal|"eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImVuYyI6IkExMjhDQkMtSFMyNTYiLCJlcGsiOnsia3R5IjoiRU"
operator|+
literal|"MiLCJ4IjoiWE9YR1"
operator|+
literal|"E5XzZRQ3ZCZzN1OHZDSS1VZEJ2SUNBRWNOTkJyZnFkN3RHN29RNCIsInkiOiJoUW9XTm90bk56S2x3aUNuZUprTElxRG5UTnc3SXNkQ"
operator|+
literal|"kM1M1ZVcVZ"
operator|+
literal|"qVkpjIiwiY3J2IjoiUC0yNTYifX0.UGb3hX3ePAvtFB9TCdWsNkFTv9QWxSr3MpYNiSBdW630uRXRBT3sxw.6VpU84oMob16DxOR98Y"
operator|+
literal|"TRw.y1Uslv"
operator|+
literal|"tkoWdl9HpugfP0rSAkTw1xhm_LbK1iRXzGdpYqNwIG5VU33UBpKAtKFBoA1Kk_sYtfnHYAvn-aes4FTg.UZPN8h7FcvA5MIOq-Pkj8A"
decl_stmt|;
name|JweDecryptionProvider
name|jweIn2
init|=
name|JweUtils
operator|.
name|createJweDecryptionProvider
argument_list|(
name|privateKey
argument_list|,
name|KeyAlgorithm
operator|.
name|ECDH_ES_A128KW
argument_list|,
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
argument_list|)
decl_stmt|;
try|try
block|{
name|jweIn2
operator|.
name|decrypt
argument_list|(
name|maliciousJWE2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Decryption should have failed due to invalid curve"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JweException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptDecryptRSA15WrapA128CBCHS256
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|specPlainText
init|=
literal|"Live long and prosper."
decl_stmt|;
name|RSAPublicKey
name|publicKey
init|=
name|CryptoUtils
operator|.
name|getRSAPublicKey
argument_list|(
name|RSA_MODULUS_ENCODED_A1
argument_list|,
name|RSA_PUBLIC_EXPONENT_ENCODED_A1
argument_list|)
decl_stmt|;
name|KeyEncryptionProvider
name|keyEncryption
init|=
operator|new
name|RSAKeyEncryptionAlgorithm
argument_list|(
name|publicKey
argument_list|,
name|KeyAlgorithm
operator|.
name|RSA1_5
argument_list|)
decl_stmt|;
name|JweEncryptionProvider
name|encryption
init|=
operator|new
name|AesCbcHmacJweEncryption
argument_list|(
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
argument_list|,
name|CONTENT_ENCRYPTION_KEY_A3
argument_list|,
name|INIT_VECTOR_A3
argument_list|,
name|keyEncryption
argument_list|)
decl_stmt|;
name|String
name|jweContent
init|=
name|encryption
operator|.
name|encrypt
argument_list|(
name|specPlainText
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RSAPrivateKey
name|privateKey
init|=
name|CryptoUtils
operator|.
name|getRSAPrivateKey
argument_list|(
name|RSA_MODULUS_ENCODED_A1
argument_list|,
name|RSA_PRIVATE_EXPONENT_ENCODED_A1
argument_list|)
decl_stmt|;
name|KeyDecryptionProvider
name|keyDecryption
init|=
operator|new
name|RSAKeyDecryptionAlgorithm
argument_list|(
name|privateKey
argument_list|,
name|KeyAlgorithm
operator|.
name|RSA1_5
argument_list|)
decl_stmt|;
name|JweDecryptionProvider
name|decryption
init|=
operator|new
name|AesCbcHmacJweDecryption
argument_list|(
name|keyDecryption
argument_list|)
decl_stmt|;
name|String
name|decryptedText
init|=
name|decryption
operator|.
name|decrypt
argument_list|(
name|jweContent
argument_list|)
operator|.
name|getContentText
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|specPlainText
argument_list|,
name|decryptedText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptDecryptAesGcmWrapA128CBCHS256
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
comment|// This test fails with the IBM JDK
comment|//
if|if
condition|(
literal|"IBM Corporation"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|specPlainText
init|=
literal|"Live long and prosper."
decl_stmt|;
name|byte
index|[]
name|cekEncryptionKey
init|=
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|KEY_ENCRYPTION_KEY_A3
argument_list|)
decl_stmt|;
name|AesGcmWrapKeyEncryptionAlgorithm
name|keyEncryption
init|=
operator|new
name|AesGcmWrapKeyEncryptionAlgorithm
argument_list|(
name|cekEncryptionKey
argument_list|,
name|KeyAlgorithm
operator|.
name|A128GCMKW
argument_list|)
decl_stmt|;
name|JweEncryptionProvider
name|encryption
init|=
operator|new
name|AesCbcHmacJweEncryption
argument_list|(
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
argument_list|,
name|CONTENT_ENCRYPTION_KEY_A3
argument_list|,
name|INIT_VECTOR_A3
argument_list|,
name|keyEncryption
argument_list|)
decl_stmt|;
name|String
name|jweContent
init|=
name|encryption
operator|.
name|encrypt
argument_list|(
name|specPlainText
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AesGcmWrapKeyDecryptionAlgorithm
name|keyDecryption
init|=
operator|new
name|AesGcmWrapKeyDecryptionAlgorithm
argument_list|(
name|cekEncryptionKey
argument_list|)
decl_stmt|;
name|JweDecryptionProvider
name|decryption
init|=
operator|new
name|AesCbcHmacJweDecryption
argument_list|(
name|keyDecryption
argument_list|)
decl_stmt|;
name|String
name|decryptedText
init|=
name|decryption
operator|.
name|decrypt
argument_list|(
name|jweContent
argument_list|)
operator|.
name|getContentText
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|specPlainText
argument_list|,
name|decryptedText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptDecryptSpecExample
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|specPlainText
init|=
literal|"The true sign of intelligence is not knowledge but imagination."
decl_stmt|;
name|String
name|jweContent
init|=
name|encryptContent
argument_list|(
name|specPlainText
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|decrypt
argument_list|(
name|jweContent
argument_list|,
name|specPlainText
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDirectKeyEncryptDecrypt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|specPlainText
init|=
literal|"The true sign of intelligence is not knowledge but imagination."
decl_stmt|;
name|SecretKey
name|key
init|=
name|createSecretKey
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|jweContent
init|=
name|encryptContentDirect
argument_list|(
name|key
argument_list|,
name|specPlainText
argument_list|)
decl_stmt|;
name|decryptDirect
argument_list|(
name|key
argument_list|,
name|jweContent
argument_list|,
name|specPlainText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptDecryptJwsToken
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jweContent
init|=
name|encryptContent
argument_list|(
name|JwsCompactReaderWriterTest
operator|.
name|ENCODED_TOKEN_SIGNED_BY_MAC
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|decrypt
argument_list|(
name|jweContent
argument_list|,
name|JwsCompactReaderWriterTest
operator|.
name|ENCODED_TOKEN_SIGNED_BY_MAC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|encryptContent
parameter_list|(
name|String
name|content
parameter_list|,
name|boolean
name|createIfException
parameter_list|)
throws|throws
name|Exception
block|{
name|RSAPublicKey
name|publicKey
init|=
name|CryptoUtils
operator|.
name|getRSAPublicKey
argument_list|(
name|RSA_MODULUS_ENCODED_A1
argument_list|,
name|RSA_PUBLIC_EXPONENT_ENCODED_A1
argument_list|)
decl_stmt|;
name|SecretKey
name|key
init|=
name|createSecretKey
argument_list|(
name|createIfException
argument_list|)
decl_stmt|;
name|String
name|jwtKeyName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
comment|// the encryptor will generate it
name|jwtKeyName
operator|=
name|ContentAlgorithm
operator|.
name|A128GCM
operator|.
name|getJwaName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jwtKeyName
operator|=
name|AlgorithmUtils
operator|.
name|toJwaName
argument_list|(
name|key
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|key
operator|.
name|getEncoded
argument_list|()
operator|.
name|length
operator|*
literal|8
argument_list|)
expr_stmt|;
block|}
name|KeyEncryptionProvider
name|keyEncryptionAlgo
init|=
operator|new
name|RSAKeyEncryptionAlgorithm
argument_list|(
name|publicKey
argument_list|,
name|KeyAlgorithm
operator|.
name|RSA_OAEP
argument_list|)
decl_stmt|;
name|ContentEncryptionProvider
name|contentEncryptionAlgo
init|=
operator|new
name|AesGcmContentEncryptionAlgorithm
argument_list|(
name|key
operator|==
literal|null
condition|?
literal|null
else|:
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|INIT_VECTOR_A1
argument_list|,
name|ContentAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|jwtKeyName
argument_list|)
argument_list|)
decl_stmt|;
name|JweEncryptionProvider
name|encryptor
init|=
operator|new
name|JweEncryption
argument_list|(
name|keyEncryptionAlgo
argument_list|,
name|contentEncryptionAlgo
argument_list|)
decl_stmt|;
return|return
name|encryptor
operator|.
name|encrypt
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|String
name|encryptContentDirect
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|JweEncryption
name|encryptor
init|=
operator|new
name|JweEncryption
argument_list|(
operator|new
name|DirectKeyEncryptionAlgorithm
argument_list|()
argument_list|,
operator|new
name|AesGcmContentEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|INIT_VECTOR_A1
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|encryptor
operator|.
name|encrypt
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|void
name|decrypt
parameter_list|(
name|String
name|jweContent
parameter_list|,
name|String
name|plainContent
parameter_list|,
name|boolean
name|unwrap
parameter_list|)
throws|throws
name|Exception
block|{
name|RSAPrivateKey
name|privateKey
init|=
name|CryptoUtils
operator|.
name|getRSAPrivateKey
argument_list|(
name|RSA_MODULUS_ENCODED_A1
argument_list|,
name|RSA_PRIVATE_EXPONENT_ENCODED_A1
argument_list|)
decl_stmt|;
name|ContentAlgorithm
name|algo
init|=
name|Cipher
operator|.
name|getMaxAllowedKeyLength
argument_list|(
literal|"AES"
argument_list|)
operator|>
literal|128
condition|?
name|ContentAlgorithm
operator|.
name|A256GCM
else|:
name|ContentAlgorithm
operator|.
name|A128GCM
decl_stmt|;
name|JweDecryptionProvider
name|decryptor
init|=
operator|new
name|JweDecryption
argument_list|(
operator|new
name|RSAKeyDecryptionAlgorithm
argument_list|(
name|privateKey
argument_list|)
argument_list|,
operator|new
name|AesGcmContentDecryptionAlgorithm
argument_list|(
name|algo
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|decryptedText
init|=
name|decryptor
operator|.
name|decrypt
argument_list|(
name|jweContent
argument_list|)
operator|.
name|getContentText
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|decryptedText
argument_list|,
name|plainContent
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|decryptDirect
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|jweContent
parameter_list|,
name|String
name|plainContent
parameter_list|)
throws|throws
name|Exception
block|{
name|JweDecryption
name|decryptor
init|=
operator|new
name|JweDecryption
argument_list|(
operator|new
name|DirectKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|)
argument_list|,
operator|new
name|AesGcmContentDecryptionAlgorithm
argument_list|(
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|decryptedText
init|=
name|decryptor
operator|.
name|decrypt
argument_list|(
name|jweContent
argument_list|)
operator|.
name|getContentText
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|decryptedText
argument_list|,
name|plainContent
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SecretKey
name|createSecretKey
parameter_list|(
name|boolean
name|createIfException
parameter_list|)
throws|throws
name|Exception
block|{
name|SecretKey
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Cipher
operator|.
name|getMaxAllowedKeyLength
argument_list|(
literal|"AES"
argument_list|)
operator|>
literal|128
condition|)
block|{
name|key
operator|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|CONTENT_ENCRYPTION_KEY_A1
argument_list|,
literal|"AES"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|createIfException
condition|)
block|{
name|key
operator|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|CryptoUtils
operator|.
name|generateSecureRandomBytes
argument_list|(
literal|128
operator|/
literal|8
argument_list|)
argument_list|,
literal|"AES"
argument_list|)
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
block|}
end_class

end_unit

