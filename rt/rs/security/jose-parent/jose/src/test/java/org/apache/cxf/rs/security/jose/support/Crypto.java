begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPairGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|KeyAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweJsonConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweJsonEncryptionEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Crypto
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|AES_HMAC_MAP
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|AES_CEK_SIZE_MAP
decl_stmt|;
static|static
block|{
name|AES_HMAC_MAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|AES_HMAC_MAP
operator|.
name|put
argument_list|(
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
operator|.
name|getJwaName
argument_list|()
argument_list|,
name|AlgorithmUtils
operator|.
name|HMAC_SHA_256_JAVA
argument_list|)
expr_stmt|;
name|AES_HMAC_MAP
operator|.
name|put
argument_list|(
name|ContentAlgorithm
operator|.
name|A192CBC_HS384
operator|.
name|getJwaName
argument_list|()
argument_list|,
name|AlgorithmUtils
operator|.
name|HMAC_SHA_384_JAVA
argument_list|)
expr_stmt|;
name|AES_HMAC_MAP
operator|.
name|put
argument_list|(
name|ContentAlgorithm
operator|.
name|A256CBC_HS512
operator|.
name|getJwaName
argument_list|()
argument_list|,
name|AlgorithmUtils
operator|.
name|HMAC_SHA_512_JAVA
argument_list|)
expr_stmt|;
name|AES_CEK_SIZE_MAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|AES_CEK_SIZE_MAP
operator|.
name|put
argument_list|(
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
operator|.
name|getJwaName
argument_list|()
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|AES_CEK_SIZE_MAP
operator|.
name|put
argument_list|(
name|ContentAlgorithm
operator|.
name|A192CBC_HS384
operator|.
name|getJwaName
argument_list|()
argument_list|,
literal|48
argument_list|)
expr_stmt|;
name|AES_CEK_SIZE_MAP
operator|.
name|put
argument_list|(
name|ContentAlgorithm
operator|.
name|A256CBC_HS512
operator|.
name|getJwaName
argument_list|()
argument_list|,
literal|64
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Crypto
parameter_list|()
block|{              }
specifier|public
specifier|static
name|SecretKey
name|generateKey
parameter_list|(
name|String
name|algo
parameter_list|,
name|int
name|size
parameter_list|)
block|{
try|try
block|{
name|KeyGenerator
name|keyGenerator
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|keyGenerator
operator|.
name|init
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|keyGenerator
operator|.
name|generateKey
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal algorithm"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|KeyPair
name|generateKeyPair
parameter_list|(
name|String
name|algo
parameter_list|,
name|int
name|size
parameter_list|)
block|{
try|try
block|{
name|KeyPairGenerator
name|kpg
init|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|kpg
operator|.
name|initialize
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|kpg
operator|.
name|generateKeyPair
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal algorithm"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|SecretKey
name|generateCek
parameter_list|(
name|ContentAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|AES_CEK_SIZE_MAP
operator|.
name|containsKey
argument_list|(
name|algo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Content algorithm ["
operator|+
name|algo
operator|.
name|getJwaName
argument_list|()
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
return|return
name|CryptoUtils
operator|.
name|getSecretKey
argument_list|(
name|algo
operator|.
name|getJavaAlgoName
argument_list|()
argument_list|,
name|AES_CEK_SIZE_MAP
operator|.
name|get
argument_list|(
name|algo
operator|.
name|getJwaName
argument_list|()
argument_list|)
operator|*
literal|8
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyAlgorithm
name|findKeyAlgorithm
parameter_list|(
name|JweJsonConsumer
name|jweConsumer
parameter_list|,
name|JweJsonEncryptionEntry
name|encryptionBlock
parameter_list|)
block|{
name|KeyAlgorithm
name|algo
init|=
name|jweConsumer
operator|.
name|getProtectedHeader
argument_list|()
operator|!=
literal|null
condition|?
name|jweConsumer
operator|.
name|getProtectedHeader
argument_list|()
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|algo
operator|=
name|jweConsumer
operator|.
name|getSharedUnprotectedHeader
argument_list|()
operator|!=
literal|null
condition|?
name|jweConsumer
operator|.
name|getSharedUnprotectedHeader
argument_list|()
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|algo
operator|=
name|encryptionBlock
operator|.
name|getUnprotectedHeader
argument_list|()
operator|!=
literal|null
condition|?
name|encryptionBlock
operator|.
name|getUnprotectedHeader
argument_list|()
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
block|}
return|return
name|algo
return|;
block|}
specifier|public
specifier|static
name|ContentAlgorithm
name|findContentAlgorithm
parameter_list|(
name|JweJsonConsumer
name|jweConsumer
parameter_list|,
name|JweJsonEncryptionEntry
name|encryptionBlock
parameter_list|)
block|{
name|ContentAlgorithm
name|algo
init|=
name|jweConsumer
operator|.
name|getProtectedHeader
argument_list|()
operator|!=
literal|null
condition|?
name|jweConsumer
operator|.
name|getProtectedHeader
argument_list|()
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|algo
operator|=
name|jweConsumer
operator|.
name|getSharedUnprotectedHeader
argument_list|()
operator|!=
literal|null
condition|?
name|jweConsumer
operator|.
name|getSharedUnprotectedHeader
argument_list|()
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|algo
operator|=
name|encryptionBlock
operator|.
name|getUnprotectedHeader
argument_list|()
operator|!=
literal|null
condition|?
name|encryptionBlock
operator|.
name|getUnprotectedHeader
argument_list|()
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
block|}
return|return
name|algo
return|;
block|}
specifier|public
specifier|static
name|String
name|findKeyId
parameter_list|(
name|JweJsonConsumer
name|jweConsumer
parameter_list|,
name|JweJsonEncryptionEntry
name|encryptionBlock
parameter_list|)
block|{
name|String
name|kid
init|=
name|jweConsumer
operator|.
name|getProtectedHeader
argument_list|()
operator|!=
literal|null
condition|?
name|jweConsumer
operator|.
name|getProtectedHeader
argument_list|()
operator|.
name|getKeyId
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|kid
operator|==
literal|null
condition|)
block|{
name|kid
operator|=
name|jweConsumer
operator|.
name|getSharedUnprotectedHeader
argument_list|()
operator|!=
literal|null
condition|?
name|jweConsumer
operator|.
name|getSharedUnprotectedHeader
argument_list|()
operator|.
name|getKeyId
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|kid
operator|==
literal|null
condition|)
block|{
name|kid
operator|=
name|encryptionBlock
operator|.
name|getUnprotectedHeader
argument_list|()
operator|!=
literal|null
condition|?
name|encryptionBlock
operator|.
name|getUnprotectedHeader
argument_list|()
operator|.
name|getKeyId
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
block|}
return|return
name|kid
return|;
block|}
block|}
end_class

end_unit

