begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Priorities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|PreMatching
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JoseJwtConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_class
annotation|@
name|PreMatching
annotation|@
name|Priority
argument_list|(
name|Priorities
operator|.
name|AUTHENTICATION
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractJwtAuthenticationFilter
extends|extends
name|JoseJwtConsumer
implements|implements
name|ContainerRequestFilter
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractJwtAuthenticationFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|roleClaim
decl_stmt|;
specifier|private
name|boolean
name|validateAudience
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|ContainerRequestContext
name|requestContext
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|encodedJwtToken
init|=
name|getEncodedJwtToken
argument_list|(
name|requestContext
argument_list|)
decl_stmt|;
name|JwtToken
name|token
init|=
name|super
operator|.
name|getJwtToken
argument_list|(
name|encodedJwtToken
argument_list|)
decl_stmt|;
name|SecurityContext
name|securityContext
init|=
name|configureSecurityContext
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|securityContext
operator|!=
literal|null
condition|)
block|{
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|securityContext
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|String
name|getEncodedJwtToken
parameter_list|(
name|ContainerRequestContext
name|requestContext
parameter_list|)
function_decl|;
specifier|protected
name|SecurityContext
name|configureSecurityContext
parameter_list|(
name|JwtToken
name|jwt
parameter_list|)
block|{
name|Message
name|m
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|boolean
name|enableUnsignedJwt
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|m
argument_list|,
name|JoseConstants
operator|.
name|ENABLE_UNSIGNED_JWT_PRINCIPAL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// The token must be signed/verified with a public key to set up the security context,
comment|// unless we directly configure otherwise
if|if
condition|(
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|isVerifiedWithAPublicKey
argument_list|(
name|jwt
argument_list|)
operator|||
name|enableUnsignedJwt
operator|)
condition|)
block|{
return|return
operator|new
name|JwtTokenSecurityContext
argument_list|(
name|jwt
argument_list|,
name|roleClaim
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isVerifiedWithAPublicKey
parameter_list|(
name|JwtToken
name|jwt
parameter_list|)
block|{
if|if
condition|(
name|isJwsRequired
argument_list|()
condition|)
block|{
name|String
name|alg
init|=
operator|(
name|String
operator|)
name|jwt
operator|.
name|getJwsHeader
argument_list|(
name|JoseConstants
operator|.
name|HEADER_ALGORITHM
argument_list|)
decl_stmt|;
name|SignatureAlgorithm
name|sigAlg
init|=
name|SignatureAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|alg
argument_list|)
decl_stmt|;
return|return
name|SignatureAlgorithm
operator|.
name|isPublicKeyAlgorithm
argument_list|(
name|sigAlg
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|validateToken
parameter_list|(
name|JwtToken
name|jwt
parameter_list|)
block|{
name|JwtUtils
operator|.
name|validateTokenClaims
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
argument_list|,
name|getTtl
argument_list|()
argument_list|,
name|getClockOffset
argument_list|()
argument_list|,
name|isValidateAudience
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getRoleClaim
parameter_list|()
block|{
return|return
name|roleClaim
return|;
block|}
specifier|public
name|void
name|setRoleClaim
parameter_list|(
name|String
name|roleClaim
parameter_list|)
block|{
name|this
operator|.
name|roleClaim
operator|=
name|roleClaim
expr_stmt|;
block|}
specifier|public
name|boolean
name|isValidateAudience
parameter_list|()
block|{
return|return
name|validateAudience
return|;
block|}
specifier|public
name|void
name|setValidateAudience
parameter_list|(
name|boolean
name|validateAudience
parameter_list|)
block|{
name|this
operator|.
name|validateAudience
operator|=
name|validateAudience
expr_stmt|;
block|}
block|}
end_class

end_unit

