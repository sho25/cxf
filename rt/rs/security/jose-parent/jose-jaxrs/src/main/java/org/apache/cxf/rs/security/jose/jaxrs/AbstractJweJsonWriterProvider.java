begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|KeyAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|ContentEncryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweEncryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweEncryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|KeyEncryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JwkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|KeyOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJsonProducer
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractJweJsonWriterProvider
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractJweJsonWriterProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|JweEncryptionProvider
argument_list|>
name|encProviders
decl_stmt|;
specifier|public
name|void
name|setEncryptionProvider
parameter_list|(
name|JweEncryptionProvider
name|provider
parameter_list|)
block|{
name|setEncryptionProviders
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|provider
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEncryptionProviders
parameter_list|(
name|List
argument_list|<
name|JweEncryptionProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|this
operator|.
name|encProviders
operator|=
name|providers
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getPropertyLocations
parameter_list|()
block|{
name|Message
name|m
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|Object
name|propLocsProp
init|=
name|MessageUtils
operator|.
name|getContextualProperty
argument_list|(
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_OUT_PROPS
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_PROPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|propLocsProp
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|encProviders
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"JWE JSON init properties resource is not identified"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|NO_INIT_PROPERTIES
argument_list|)
throw|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|propLocs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|propLocsProp
operator|instanceof
name|String
condition|)
block|{
name|String
index|[]
name|props
init|=
operator|(
operator|(
name|String
operator|)
name|propLocsProp
operator|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|propLocs
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propLocs
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|propLocsProp
argument_list|)
expr_stmt|;
block|}
return|return
name|propLocs
return|;
block|}
specifier|protected
name|List
argument_list|<
name|JweEncryptionProvider
argument_list|>
name|getInitializedEncryptionProviders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|propLocs
parameter_list|,
name|JweHeaders
name|sharedProtectedHeaders
parameter_list|,
name|List
argument_list|<
name|JweHeaders
argument_list|>
name|perRecipientUnprotectedHeaders
parameter_list|)
block|{
if|if
condition|(
name|encProviders
operator|!=
literal|null
condition|)
block|{
return|return
name|encProviders
return|;
block|}
comment|// The task is to have a single ContentEncryptionProvider instance,
comment|// configured to generate CEK only once, paired with all the loaded
comment|// KeyEncryptionProviders to have JweEncryptionProviders initialized
name|Message
name|m
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
comment|// Load all the properties
name|List
argument_list|<
name|Properties
argument_list|>
name|propsList
init|=
operator|new
name|ArrayList
argument_list|<
name|Properties
argument_list|>
argument_list|(
name|propLocs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propLocs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|propsList
operator|.
name|add
argument_list|(
name|JweUtils
operator|.
name|loadJweProperties
argument_list|(
name|m
argument_list|,
name|propLocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ContentAlgorithm
name|ctAlgo
init|=
literal|null
decl_stmt|;
comment|// This set is to find out how many key encryption algorithms are used
comment|// If only one then save it in the shared protected headers as opposed to
comment|// per-recipient specific not protected ones
name|Set
argument_list|<
name|KeyAlgorithm
argument_list|>
name|keyAlgos
init|=
operator|new
name|HashSet
argument_list|<
name|KeyAlgorithm
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyEncryptionProvider
argument_list|>
name|keyProviders
init|=
operator|new
name|LinkedList
argument_list|<
name|KeyEncryptionProvider
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propLocs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Properties
name|props
init|=
name|propsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ContentAlgorithm
name|currentCtAlgo
init|=
name|JweUtils
operator|.
name|getContentEncryptionAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctAlgo
operator|==
literal|null
condition|)
block|{
name|ctAlgo
operator|=
name|currentCtAlgo
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentCtAlgo
operator|!=
literal|null
operator|&&
operator|!
name|ctAlgo
operator|.
name|equals
argument_list|(
name|currentCtAlgo
argument_list|)
condition|)
block|{
comment|// ctAlgo must be the same for all the recipients
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|INVALID_CONTENT_ALGORITHM
argument_list|)
throw|;
block|}
name|JweHeaders
name|perRecipientUnprotectedHeader
init|=
name|perRecipientUnprotectedHeaders
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|KeyEncryptionProvider
name|keyEncryptionProvider
init|=
name|JweUtils
operator|.
name|loadKeyEncryptionProvider
argument_list|(
name|props
argument_list|,
name|m
argument_list|,
name|perRecipientUnprotectedHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyEncryptionProvider
operator|.
name|getAlgorithm
argument_list|()
operator|==
name|KeyAlgorithm
operator|.
name|DIRECT
operator|&&
name|propLocs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|INVALID_JSON_JWE
argument_list|)
throw|;
block|}
name|keyProviders
operator|.
name|add
argument_list|(
name|keyEncryptionProvider
argument_list|)
expr_stmt|;
name|keyAlgos
operator|.
name|add
argument_list|(
name|perRecipientUnprotectedHeader
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctAlgo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|INVALID_CONTENT_ALGORITHM
argument_list|)
throw|;
block|}
name|sharedProtectedHeaders
operator|.
name|setContentEncryptionAlgorithm
argument_list|(
name|ctAlgo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JweEncryptionProvider
argument_list|>
name|theEncProviders
init|=
operator|new
name|LinkedList
argument_list|<
name|JweEncryptionProvider
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyProviders
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|keyProviders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAlgorithm
argument_list|()
operator|==
name|KeyAlgorithm
operator|.
name|DIRECT
condition|)
block|{
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|loadJsonWebKey
argument_list|(
name|m
argument_list|,
name|propsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|KeyOperation
operator|.
name|ENCRYPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwk
operator|!=
literal|null
condition|)
block|{
name|ContentEncryptionProvider
name|ctProvider
init|=
name|JweUtils
operator|.
name|getContentEncryptionProvider
argument_list|(
name|jwk
argument_list|,
name|ctAlgo
argument_list|)
decl_stmt|;
name|JweEncryptionProvider
name|encProvider
init|=
operator|new
name|JweEncryption
argument_list|(
name|keyProviders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctProvider
argument_list|)
decl_stmt|;
name|theEncProviders
operator|.
name|add
argument_list|(
name|encProvider
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ContentEncryptionProvider
name|ctProvider
init|=
name|JweUtils
operator|.
name|getContentEncryptionProvider
argument_list|(
name|ctAlgo
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyProviders
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JweEncryptionProvider
name|encProvider
init|=
operator|new
name|JweEncryption
argument_list|(
name|keyProviders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ctProvider
argument_list|)
decl_stmt|;
name|theEncProviders
operator|.
name|add
argument_list|(
name|encProvider
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|keyAlgos
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sharedProtectedHeaders
operator|.
name|setKeyEncryptionAlgorithm
argument_list|(
name|keyAlgos
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|perRecipientUnprotectedHeaders
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|perRecipientUnprotectedHeaders
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|JoseConstants
operator|.
name|JWE_HEADER_KEY_ENC_ALGORITHM
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|theEncProviders
return|;
block|}
specifier|protected
name|void
name|writeJws
parameter_list|(
name|JwsJsonProducer
name|p
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|p
operator|.
name|getJwsJsonSignedDocument
argument_list|()
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

