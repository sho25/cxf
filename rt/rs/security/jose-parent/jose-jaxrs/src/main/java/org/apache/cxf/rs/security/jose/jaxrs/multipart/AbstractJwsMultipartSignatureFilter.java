begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jaxrs
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|MultipartBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|basic
operator|.
name|JsonMapObjectReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|multipart
operator|.
name|AttachmentUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsDetachedSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJwsMultipartSignatureFilter
block|{
specifier|private
name|JsonMapObjectReaderWriter
name|writer
init|=
operator|new
name|JsonMapObjectReaderWriter
argument_list|()
decl_stmt|;
specifier|private
name|JwsSignatureProvider
name|sigProvider
decl_stmt|;
specifier|private
name|boolean
name|supportSinglePartOnly
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useJwsJsonSignatureFormat
decl_stmt|;
specifier|public
name|void
name|setSignatureProvider
parameter_list|(
name|JwsSignatureProvider
name|signatureProvider
parameter_list|)
block|{
name|this
operator|.
name|sigProvider
operator|=
name|signatureProvider
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|getAttachmentParts
parameter_list|(
name|Object
name|rootEntity
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|parts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rootEntity
operator|instanceof
name|MultipartBody
condition|)
block|{
name|parts
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
operator|(
name|MultipartBody
operator|)
name|rootEntity
operator|)
operator|.
name|getAllAttachments
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|rootEntity
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|entityList
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rootEntity
argument_list|)
decl_stmt|;
name|parts
operator|.
name|addAll
argument_list|(
name|entityList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parts
operator|.
name|add
argument_list|(
name|rootEntity
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|supportSinglePartOnly
operator|&&
name|parts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|ProcessingException
argument_list|(
literal|"Single part only is supported"
argument_list|)
throw|;
block|}
name|JwsHeaders
name|headers
init|=
operator|new
name|JwsHeaders
argument_list|()
decl_stmt|;
name|headers
operator|.
name|setPayloadEncodingStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JwsSignatureProvider
name|theSigProvider
init|=
name|sigProvider
operator|!=
literal|null
condition|?
name|sigProvider
else|:
name|JwsUtils
operator|.
name|loadSignatureProvider
argument_list|(
name|headers
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JwsSignature
name|jwsSignature
init|=
name|theSigProvider
operator|.
name|createJwsSignature
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|String
name|base64UrlEncodedHeaders
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|writer
operator|.
name|toJson
argument_list|(
name|headers
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|headerBytesWithDot
init|=
name|StringUtils
operator|.
name|toBytesASCII
argument_list|(
name|base64UrlEncodedHeaders
operator|+
literal|"."
argument_list|)
decl_stmt|;
name|jwsSignature
operator|.
name|update
argument_list|(
name|headerBytesWithDot
argument_list|,
literal|0
argument_list|,
name|headerBytesWithDot
operator|.
name|length
argument_list|)
expr_stmt|;
name|AttachmentUtils
operator|.
name|addMultipartOutFilter
argument_list|(
operator|new
name|JwsMultipartSignatureOutFilter
argument_list|(
name|jwsSignature
argument_list|)
argument_list|)
expr_stmt|;
name|JwsDetachedSignature
name|jws
init|=
operator|new
name|JwsDetachedSignature
argument_list|(
name|headers
argument_list|,
name|base64UrlEncodedHeaders
argument_list|,
name|jwsSignature
argument_list|,
name|useJwsJsonSignatureFormat
argument_list|)
decl_stmt|;
name|Attachment
name|jwsPart
init|=
operator|new
name|Attachment
argument_list|(
literal|"signature"
argument_list|,
name|JoseConstants
operator|.
name|MEDIA_TYPE_JOSE
argument_list|,
name|jws
argument_list|)
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|jwsPart
argument_list|)
expr_stmt|;
return|return
name|parts
return|;
block|}
specifier|public
name|void
name|setSupportSinglePartOnly
parameter_list|(
name|boolean
name|supportSinglePartOnly
parameter_list|)
block|{
name|this
operator|.
name|supportSinglePartOnly
operator|=
name|supportSinglePartOnly
expr_stmt|;
block|}
specifier|public
name|void
name|setUseJwsJsonSignatureFormat
parameter_list|(
name|boolean
name|useJwsJsonSignatureFormat
parameter_list|)
block|{
name|this
operator|.
name|useJwsJsonSignatureFormat
operator|=
name|useJwsJsonSignatureFormat
expr_stmt|;
block|}
block|}
end_class

end_unit

