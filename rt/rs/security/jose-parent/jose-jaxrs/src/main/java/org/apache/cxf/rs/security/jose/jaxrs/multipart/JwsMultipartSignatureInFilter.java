begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jaxrs
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|MultipartInputFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|basic
operator|.
name|JsonMapObjectReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|KeyManagementUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsVerificationSignature
import|;
end_import

begin_class
specifier|public
class|class
name|JwsMultipartSignatureInFilter
implements|implements
name|MultipartInputFilter
block|{
specifier|private
name|JwsSignatureVerifier
name|verifier
decl_stmt|;
specifier|private
name|boolean
name|supportSinglePartOnly
decl_stmt|;
specifier|private
name|Message
name|message
decl_stmt|;
specifier|public
name|JwsMultipartSignatureInFilter
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|supportSinglePartOnly
parameter_list|)
block|{
name|this
argument_list|(
name|message
argument_list|,
literal|null
argument_list|,
name|supportSinglePartOnly
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JwsMultipartSignatureInFilter
parameter_list|(
name|Message
name|message
parameter_list|,
name|JwsSignatureVerifier
name|verifier
parameter_list|,
name|boolean
name|supportSinglePartOnly
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|verifier
operator|=
name|verifier
expr_stmt|;
name|this
operator|.
name|supportSinglePartOnly
operator|=
name|supportSinglePartOnly
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|List
argument_list|<
name|Attachment
argument_list|>
name|atts
parameter_list|)
block|{
if|if
condition|(
name|atts
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
name|supportSinglePartOnly
operator|&&
name|atts
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toBadRequestException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|Attachment
name|sigPart
init|=
name|atts
operator|.
name|remove
argument_list|(
name|atts
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|encodedJws
init|=
literal|null
decl_stmt|;
try|try
block|{
name|encodedJws
operator|=
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|sigPart
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toBadRequestException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|String
index|[]
name|parts
init|=
name|JoseUtils
operator|.
name|getCompactParts
argument_list|(
name|encodedJws
argument_list|)
decl_stmt|;
comment|// Detached signature
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|3
operator|||
name|parts
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toBadRequestException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|JwsHeaders
name|headers
init|=
operator|new
name|JwsHeaders
argument_list|(
operator|new
name|JsonMapObjectReaderWriter
argument_list|()
operator|.
name|fromJson
argument_list|(
name|JoseUtils
operator|.
name|decodeToString
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|JwsSignatureVerifier
name|theVerifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|verifier
operator|==
literal|null
condition|)
block|{
name|Properties
name|props
init|=
name|KeyManagementUtils
operator|.
name|loadStoreProperties
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_IN_PROPS
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_PROPS
argument_list|)
decl_stmt|;
name|theVerifier
operator|=
name|JwsUtils
operator|.
name|loadSignatureVerifier
argument_list|(
name|message
argument_list|,
name|props
argument_list|,
name|headers
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|theVerifier
operator|=
name|verifier
expr_stmt|;
block|}
name|JwsVerificationSignature
name|sig
init|=
name|theVerifier
operator|.
name|createJwsVerificationSignature
argument_list|(
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|sig
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toBadRequestException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|byte
index|[]
name|signatureBytes
init|=
name|JoseUtils
operator|.
name|decode
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|int
name|attSize
init|=
name|atts
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attSize
condition|;
name|i
operator|++
control|)
block|{
name|Attachment
name|dataPart
init|=
name|atts
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|InputStream
name|dataPartStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dataPartStream
operator|=
name|dataPart
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getDataSource
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toBadRequestException
argument_list|(
name|ex
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|boolean
name|verifyOnLastRead
init|=
name|i
operator|==
name|attSize
operator|-
literal|1
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|JwsInputStream
name|jwsStream
init|=
operator|new
name|JwsInputStream
argument_list|(
name|dataPartStream
argument_list|,
name|sig
argument_list|,
name|signatureBytes
argument_list|,
name|verifyOnLastRead
argument_list|)
decl_stmt|;
name|Attachment
name|newDataPart
init|=
operator|new
name|Attachment
argument_list|(
name|jwsStream
argument_list|,
name|dataPart
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|atts
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|newDataPart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

