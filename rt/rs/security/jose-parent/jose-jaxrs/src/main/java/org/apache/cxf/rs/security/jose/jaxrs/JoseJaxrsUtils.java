begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseHeaders
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JoseJaxrsUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PREFIX
init|=
literal|"http."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_PROTECTED_HTTP_HEADERS
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|JoseJaxrsUtils
parameter_list|()
block|{      }
specifier|public
specifier|static
name|void
name|protectHttpHeaders
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|,
name|JoseHeaders
name|joseHeaders
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|protectedHttpHeaders
parameter_list|)
block|{
if|if
condition|(
name|protectedHttpHeaders
operator|==
literal|null
condition|)
block|{
name|protectedHttpHeaders
operator|=
name|DEFAULT_PROTECTED_HTTP_HEADERS
expr_stmt|;
block|}
for|for
control|(
name|String
name|headerName
range|:
name|protectedHttpHeaders
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|headerValues
init|=
name|httpHeaders
operator|.
name|get
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValues
operator|!=
literal|null
condition|)
block|{
name|String
name|joseHeaderValue
init|=
name|getJoseHeaderValue
argument_list|(
name|headerValues
argument_list|)
decl_stmt|;
name|String
name|prefixedHeaderName
init|=
name|HTTP_PREFIX
operator|+
name|headerName
decl_stmt|;
name|joseHeaders
operator|.
name|setHeader
argument_list|(
name|prefixedHeaderName
argument_list|,
name|joseHeaderValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getJoseHeaderValue
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|headerValues
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|headerValues
control|)
block|{
name|String
index|[]
name|parts
init|=
name|o
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|validateHttpHeaders
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|,
name|JoseHeaders
name|joseHeaders
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|protectedHttpHeaders
parameter_list|)
block|{
if|if
condition|(
name|protectedHttpHeaders
operator|==
literal|null
condition|)
block|{
name|protectedHttpHeaders
operator|=
name|DEFAULT_PROTECTED_HTTP_HEADERS
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|joseHttpHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updatedHttpHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|headerName
range|:
name|protectedHttpHeaders
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|headerValues
init|=
name|httpHeaders
operator|.
name|get
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValues
operator|!=
literal|null
condition|)
block|{
name|String
name|headerValue
init|=
name|getJoseHeaderValue
argument_list|(
name|headerValues
argument_list|)
decl_stmt|;
name|String
name|prefixedHeaderName
init|=
name|HTTP_PREFIX
operator|+
name|headerName
decl_stmt|;
name|updatedHttpHeaders
operator|.
name|put
argument_list|(
name|prefixedHeaderName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
name|String
name|joseHeaderValue
init|=
name|joseHeaders
operator|.
name|getStringProperty
argument_list|(
name|prefixedHeaderName
argument_list|)
decl_stmt|;
if|if
condition|(
name|joseHeaderValue
operator|!=
literal|null
condition|)
block|{
name|joseHttpHeaders
operator|.
name|put
argument_list|(
name|prefixedHeaderName
argument_list|,
name|joseHeaderValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|joseHttpHeaders
operator|.
name|size
argument_list|()
operator|!=
name|updatedHttpHeaders
operator|.
name|size
argument_list|()
operator|||
operator|!
name|joseHttpHeaders
operator|.
name|entrySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|updatedHttpHeaders
operator|.
name|entrySet
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toBadRequestException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

