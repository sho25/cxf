begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|DeflateEncoderDecoderTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DataFormatException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidContent
parameter_list|()
throws|throws
name|Exception
block|{
name|DeflateEncoderDecoder
name|inflater
init|=
operator|new
name|DeflateEncoderDecoder
argument_list|()
decl_stmt|;
name|inflater
operator|.
name|inflateToken
argument_list|(
literal|"invalid_grant"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DataFormatException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidContentAfterBase64
parameter_list|()
throws|throws
name|Exception
block|{
name|DeflateEncoderDecoder
name|inflater
init|=
operator|new
name|DeflateEncoderDecoder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|base64decoded
init|=
name|Base64Utility
operator|.
name|decode
argument_list|(
literal|"invalid_grant"
argument_list|)
decl_stmt|;
name|inflater
operator|.
name|inflateToken
argument_list|(
name|base64decoded
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInflateDeflate
parameter_list|()
throws|throws
name|Exception
block|{
name|DeflateEncoderDecoder
name|inflater
init|=
operator|new
name|DeflateEncoderDecoder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|deflated
init|=
name|inflater
operator|.
name|deflateToken
argument_list|(
literal|"valid_grant"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|inflater
operator|.
name|inflateToken
argument_list|(
name|deflated
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valid_grant"
argument_list|,
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInflateDeflateBase64
parameter_list|()
throws|throws
name|Exception
block|{
name|DeflateEncoderDecoder
name|inflater
init|=
operator|new
name|DeflateEncoderDecoder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|deflated
init|=
name|inflater
operator|.
name|deflateToken
argument_list|(
literal|"valid_grant"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|base64String
init|=
name|Base64Utility
operator|.
name|encode
argument_list|(
name|deflated
argument_list|)
decl_stmt|;
name|byte
index|[]
name|base64decoded
init|=
name|Base64Utility
operator|.
name|decode
argument_list|(
name|base64String
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|inflater
operator|.
name|inflateToken
argument_list|(
name|base64decoded
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valid_grant"
argument_list|,
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInflateDeflateWithTokenDuplication
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|token
init|=
literal|"valid_grant valid_grant valid_grant valid_grant valid_grant valid_grant"
decl_stmt|;
name|DeflateEncoderDecoder
name|deflateEncoderDecoder
init|=
operator|new
name|DeflateEncoderDecoder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|deflatedToken
init|=
name|deflateEncoderDecoder
operator|.
name|deflateToken
argument_list|(
name|token
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cxfInflatedToken
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|deflateEncoderDecoder
operator|.
name|inflateToken
argument_list|(
name|deflatedToken
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|streamInflatedToken
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
operator|new
name|InflaterInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|deflatedToken
argument_list|)
argument_list|,
operator|new
name|Inflater
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|streamInflatedToken
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cxfInflatedToken
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

