begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|sso
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|RequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|HttpHeadersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|DeflateEncoderDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|sso
operator|.
name|AbstractSSOSpHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|sso
operator|.
name|SSOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|sso
operator|.
name|state
operator|.
name|RequestState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|sso
operator|.
name|state
operator|.
name|ResponseState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|OpenSAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|DOM2Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|common
operator|.
name|SAMLVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AuthnContextClassRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AuthnContextComparisonTypeEnumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AuthnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Issuer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|NameIDPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|RequestedAuthnContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|io
operator|.
name|MarshallingException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractServiceProviderFilter
extends|extends
name|AbstractSSOSpHandler
implements|implements
name|RequestHandler
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractServiceProviderFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|AbstractServiceProviderFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|idpServiceAddress
decl_stmt|;
specifier|private
name|String
name|issuerId
decl_stmt|;
specifier|private
name|String
name|assertionConsumerServiceAddress
decl_stmt|;
specifier|public
name|void
name|setAssertionConsumerServiceAddress
parameter_list|(
name|String
name|assertionConsumerServiceAddress
parameter_list|)
block|{
name|this
operator|.
name|assertionConsumerServiceAddress
operator|=
name|assertionConsumerServiceAddress
expr_stmt|;
block|}
specifier|public
name|void
name|setIssuerId
parameter_list|(
name|String
name|issuerId
parameter_list|)
block|{
name|this
operator|.
name|issuerId
operator|=
name|issuerId
expr_stmt|;
block|}
specifier|public
name|void
name|setIdpServiceAddress
parameter_list|(
name|String
name|idpServiceAddress
parameter_list|)
block|{
name|this
operator|.
name|idpServiceAddress
operator|=
name|idpServiceAddress
expr_stmt|;
block|}
specifier|public
name|String
name|getIdpServiceAddress
parameter_list|()
block|{
return|return
name|idpServiceAddress
return|;
block|}
specifier|private
name|String
name|getIssuerId
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|issuerId
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|UriInfoImpl
argument_list|(
name|m
argument_list|)
operator|.
name|getBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|issuerId
return|;
block|}
block|}
specifier|protected
name|boolean
name|checkSecurityContext
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|HttpHeaders
name|headers
init|=
operator|new
name|HttpHeadersImpl
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Cookie
argument_list|>
name|cookies
init|=
name|headers
operator|.
name|getCookies
argument_list|()
decl_stmt|;
name|Cookie
name|securityContextCookie
init|=
name|cookies
operator|.
name|get
argument_list|(
name|SSOConstants
operator|.
name|SECURITY_CONTEXT_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|securityContextCookie
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
literal|"MISSING_RESPONSE_STATE"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|contextKey
init|=
name|securityContextCookie
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ResponseState
name|responseState
init|=
name|getStateProvider
argument_list|()
operator|.
name|getResponseState
argument_list|(
name|contextKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseState
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
literal|"MISSING_RESPONSE_STATE"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isStateExpired
argument_list|(
name|responseState
operator|.
name|getCreatedAt
argument_list|()
argument_list|)
condition|)
block|{
name|reportError
argument_list|(
literal|"EXPIRED_RESPONSE_STATE"
argument_list|)
expr_stmt|;
name|getStateProvider
argument_list|()
operator|.
name|removeResponseState
argument_list|(
name|contextKey
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Cookie
name|relayStateCookie
init|=
name|cookies
operator|.
name|get
argument_list|(
name|SSOConstants
operator|.
name|RELAY_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|relayStateCookie
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
literal|"MISSING_RELAY_COOKIE"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|originalRelayState
init|=
name|responseState
operator|.
name|getRelayState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|originalRelayState
operator|.
name|equals
argument_list|(
name|relayStateCookie
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|reportError
argument_list|(
literal|"INVALID_RELAY_STATE"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//TODO: use ResponseState to set up a proper SecurityContext
comment|//      on the current message
return|return
literal|true
return|;
block|}
specifier|protected
name|AuthnRequest
name|createAuthnRequest
parameter_list|(
name|Message
name|m
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|Issuer
name|issuer
init|=
name|SamlpRequestComponentBuilder
operator|.
name|createIssuer
argument_list|(
name|getIssuerId
argument_list|(
name|m
argument_list|)
argument_list|)
decl_stmt|;
name|NameIDPolicy
name|nameIDPolicy
init|=
name|SamlpRequestComponentBuilder
operator|.
name|createNameIDPolicy
argument_list|(
literal|true
argument_list|,
literal|"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
argument_list|,
literal|"Issuer"
argument_list|)
decl_stmt|;
name|AuthnContextClassRef
name|authnCtxClassRef
init|=
name|SamlpRequestComponentBuilder
operator|.
name|createAuthnCtxClassRef
argument_list|(
literal|"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
argument_list|)
decl_stmt|;
name|RequestedAuthnContext
name|authnCtx
init|=
name|SamlpRequestComponentBuilder
operator|.
name|createRequestedAuthnCtxPolicy
argument_list|(
name|AuthnContextComparisonTypeEnumeration
operator|.
name|EXACT
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|authnCtxClassRef
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//CHECKSTYLE:OFF
return|return
name|SamlpRequestComponentBuilder
operator|.
name|createAuthnRequest
argument_list|(
name|getAbsoluteAssertionServiceAddress
argument_list|(
name|m
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
argument_list|,
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|,
name|issuer
argument_list|,
name|nameIDPolicy
argument_list|,
name|authnCtx
argument_list|)
return|;
comment|//CHECKSTYLE:ON
block|}
specifier|protected
name|String
name|encodeAuthnRequest
parameter_list|(
name|Element
name|authnRequestElement
parameter_list|)
throws|throws
name|MarshallingException
throws|,
name|IOException
block|{
name|String
name|requestMessage
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|authnRequestElement
argument_list|)
decl_stmt|;
name|DeflateEncoderDecoder
name|encoder
init|=
operator|new
name|DeflateEncoderDecoder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|deflatedBytes
init|=
name|encoder
operator|.
name|deflateToken
argument_list|(
name|requestMessage
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|encodedRequestMessage
init|=
name|Base64Utility
operator|.
name|encode
argument_list|(
name|deflatedBytes
argument_list|)
decl_stmt|;
return|return
name|URLEncoder
operator|.
name|encode
argument_list|(
name|encodedRequestMessage
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|protected
name|SamlRequestInfo
name|createSamlRequestInfo
parameter_list|(
name|Message
name|m
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createElement
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthnRequest
name|authnRequest
init|=
name|createAuthnRequest
argument_list|(
name|m
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Element
name|authnRequestElement
init|=
name|OpenSAMLUtil
operator|.
name|toDom
argument_list|(
name|authnRequest
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|String
name|authnRequestEncoded
init|=
name|encodeAuthnRequest
argument_list|(
name|authnRequestElement
argument_list|)
decl_stmt|;
name|SamlRequestInfo
name|info
init|=
operator|new
name|SamlRequestInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setEncodedSamlRequest
argument_list|(
name|authnRequestEncoded
argument_list|)
expr_stmt|;
name|String
name|httpBasePath
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"http.base.path"
argument_list|)
decl_stmt|;
name|String
name|webAppContext
init|=
name|URI
operator|.
name|create
argument_list|(
name|httpBasePath
argument_list|)
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
name|String
name|originalRequestURI
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
decl_stmt|;
name|RequestState
name|requestState
init|=
operator|new
name|RequestState
argument_list|(
name|originalRequestURI
argument_list|,
name|getIdpServiceAddress
argument_list|()
argument_list|,
name|authnRequest
operator|.
name|getID
argument_list|()
argument_list|,
name|getIssuerId
argument_list|(
name|m
argument_list|)
argument_list|,
name|webAppContext
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|relayState
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|getStateProvider
argument_list|()
operator|.
name|setRequestState
argument_list|(
name|relayState
argument_list|,
name|requestState
argument_list|)
expr_stmt|;
name|info
operator|.
name|setRelayState
argument_list|(
name|relayState
argument_list|)
expr_stmt|;
name|info
operator|.
name|setWebAppContext
argument_list|(
name|webAppContext
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|String
name|getAbsoluteAssertionServiceAddress
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|assertionConsumerServiceAddress
operator|==
literal|null
condition|)
block|{
comment|//TODO: Review the possibility of using this filter
comment|//for validating SAMLResponse too
name|reportError
argument_list|(
literal|"MISSING_ASSERTION_SERVICE_URL"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|500
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|assertionConsumerServiceAddress
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|String
name|httpBasePath
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"http.base.path"
argument_list|)
decl_stmt|;
return|return
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|httpBasePath
argument_list|)
operator|.
name|path
argument_list|(
name|assertionConsumerServiceAddress
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|assertionConsumerServiceAddress
return|;
block|}
block|}
specifier|protected
name|void
name|reportError
parameter_list|(
name|String
name|code
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMsg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|code
argument_list|,
name|BUNDLE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

