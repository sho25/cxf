begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamReader
import|;
end_import

begin_class
specifier|public
class|class
name|SamlEnvelopedInHandler
extends|extends
name|AbstractSamlInHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SAML2_NS
init|=
literal|"urn:oasis:names:tc:SAML:2.0:assertion"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAML1_NS
init|=
literal|"urn:oasis:names:tc:SAML:1.0:assertion"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAML_ASSERTION
init|=
literal|"Assertion"
decl_stmt|;
specifier|private
name|boolean
name|bodyIsRoot
decl_stmt|;
specifier|public
name|SamlEnvelopedInHandler
parameter_list|()
block|{     }
specifier|public
name|Response
name|handleRequest
parameter_list|(
name|Message
name|message
parameter_list|,
name|ClassResourceInfo
name|resourceClass
parameter_list|)
block|{
name|String
name|method
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Document
name|doc
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|doc
operator|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Invalid XML payload"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|XMLStreamReader
name|reader
init|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|instanceof
name|W3CDOMStreamReader
condition|)
block|{
name|doc
operator|=
operator|(
operator|(
name|W3CDOMStreamReader
operator|)
name|reader
operator|)
operator|.
name|getDocument
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|throwFault
argument_list|(
literal|"No payload is available"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Element
name|samlElement
init|=
name|getNode
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|SAML2_NS
argument_list|,
name|SAML_ASSERTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|samlElement
operator|==
literal|null
condition|)
block|{
name|samlElement
operator|=
name|getNode
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|SAML1_NS
argument_list|,
name|SAML_ASSERTION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|samlElement
operator|==
literal|null
condition|)
block|{
name|throwFault
argument_list|(
literal|"SAML Assertion is not available"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|validateToken
argument_list|(
name|message
argument_list|,
name|samlElement
argument_list|)
expr_stmt|;
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|removeChild
argument_list|(
name|samlElement
argument_list|)
expr_stmt|;
if|if
condition|(
name|bodyIsRoot
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
operator|new
name|W3CDOMStreamReader
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|actualBody
init|=
name|getActualBody
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualBody
operator|!=
literal|null
condition|)
block|{
name|Document
name|newDoc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|newDoc
operator|.
name|adoptNode
argument_list|(
name|actualBody
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
operator|new
name|W3CDOMStreamReader
argument_list|(
name|actualBody
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Element
name|getActualBody
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|Element
name|node
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|root
operator|.
name|removeChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|protected
name|Element
name|getNode
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeList
name|list
init|=
name|parent
operator|.
name|getElementsByTagNameNS
argument_list|(
name|ns
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setBodyIsRoot
parameter_list|(
name|boolean
name|bodyIsRoot
parameter_list|)
block|{
name|this
operator|.
name|bodyIsRoot
operator|=
name|bodyIsRoot
expr_stmt|;
block|}
block|}
end_class

end_unit

