begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|assertion
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|assertion
operator|.
name|Claims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|assertion
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_class
specifier|public
class|class
name|SAMLSecurityContext
implements|implements
name|SecurityContext
block|{
specifier|private
name|SubjectPrincipal
name|p
decl_stmt|;
specifier|private
name|Claims
name|claims
decl_stmt|;
specifier|private
name|Claim
name|rolesClaim
decl_stmt|;
specifier|public
name|SAMLSecurityContext
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|List
argument_list|<
name|Claim
argument_list|>
name|claims
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|SubjectPrincipal
argument_list|(
name|subject
argument_list|)
argument_list|,
operator|new
name|Claims
argument_list|(
name|claims
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SAMLSecurityContext
parameter_list|(
name|SubjectPrincipal
name|p
parameter_list|,
name|Claims
name|claims
parameter_list|)
block|{
name|this
argument_list|(
name|p
argument_list|,
name|claims
argument_list|,
name|Claim
operator|.
name|DEFAULT_ROLE_NAME
argument_list|,
name|Claim
operator|.
name|DEFAULT_NAME_FORMAT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SAMLSecurityContext
parameter_list|(
name|SubjectPrincipal
name|p
parameter_list|,
name|Claims
name|cs
parameter_list|,
name|String
name|roleClaimNameQualifier
parameter_list|,
name|String
name|roleClaimNameFormat
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
for|for
control|(
name|Claim
name|c
range|:
name|cs
operator|.
name|getClaims
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleClaimNameQualifier
argument_list|)
operator|&&
name|c
operator|.
name|getNameFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|roleClaimNameFormat
argument_list|)
condition|)
block|{
name|rolesClaim
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
name|this
operator|.
name|claims
operator|=
name|cs
expr_stmt|;
block|}
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
if|if
condition|(
name|rolesClaim
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|r
range|:
name|rolesClaim
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Claims
name|getClaims
parameter_list|()
block|{
return|return
name|claims
return|;
block|}
block|}
end_class

end_unit

