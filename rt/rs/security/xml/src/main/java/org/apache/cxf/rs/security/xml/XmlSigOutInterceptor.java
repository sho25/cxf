begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|common
operator|.
name|CryptoLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|common
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|signature
operator|.
name|XMLSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|transforms
operator|.
name|Transforms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|ElementProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|signature
operator|.
name|SignatureConstants
import|;
end_import

begin_class
specifier|public
class|class
name|XmlSigOutInterceptor
extends|extends
name|AbstractXmlSecOutInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|XmlSigOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|createReferenceId
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|defaultSigAlgo
init|=
name|SignatureConstants
operator|.
name|ALGO_ID_SIGNATURE_RSA_SHA1
decl_stmt|;
specifier|private
name|String
name|digestAlgo
init|=
name|Constants
operator|.
name|ALGO_ID_DIGEST_SHA1
decl_stmt|;
specifier|public
name|XmlSigOutInterceptor
parameter_list|()
block|{     }
specifier|public
name|void
name|setSignatureAlgorithm
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
name|defaultSigAlgo
operator|=
name|algo
expr_stmt|;
block|}
specifier|public
name|void
name|setDigestAlgorithm
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
name|digestAlgo
operator|=
name|algo
expr_stmt|;
block|}
specifier|public
name|void
name|setCreateReferenceId
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
name|createReferenceId
operator|=
name|create
expr_stmt|;
block|}
specifier|protected
name|Document
name|processDocument
parameter_list|(
name|Message
name|message
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|createEnvelopedSignature
argument_list|(
name|message
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|// enveloping& detached sigs will be supported too
specifier|private
name|void
name|createEnvelopedSignature
parameter_list|(
name|Message
name|message
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|userNameKey
init|=
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
decl_stmt|;
name|CryptoLoader
name|loader
init|=
operator|new
name|CryptoLoader
argument_list|()
decl_stmt|;
name|Crypto
name|crypto
init|=
name|loader
operator|.
name|getCrypto
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
block|{
name|crypto
operator|=
name|loader
operator|.
name|getCrypto
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|)
expr_stmt|;
name|userNameKey
operator|=
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
expr_stmt|;
block|}
name|String
name|user
init|=
name|SecurityUtils
operator|.
name|getUserName
argument_list|(
name|message
argument_list|,
name|crypto
argument_list|,
name|userNameKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|password
init|=
name|SecurityUtils
operator|.
name|getPassword
argument_list|(
name|message
argument_list|,
name|user
argument_list|,
name|WSPasswordCallback
operator|.
name|SIGNATURE
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|X509Certificate
index|[]
name|issuerCerts
init|=
name|SecurityUtils
operator|.
name|getCertificates
argument_list|(
name|crypto
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|String
name|sigAlgo
init|=
name|defaultSigAlgo
decl_stmt|;
name|String
name|pubKeyAlgo
init|=
name|issuerCerts
index|[
literal|0
index|]
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|pubKeyAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DSA"
argument_list|)
condition|)
block|{
name|sigAlgo
operator|=
name|XMLSignature
operator|.
name|ALGO_ID_SIGNATURE_DSA
expr_stmt|;
block|}
name|PrivateKey
name|privateKey
init|=
literal|null
decl_stmt|;
try|try
block|{
name|privateKey
operator|=
name|crypto
operator|.
name|getPrivateKey
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Private key can not be loaded, user:"
operator|+
name|user
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|errorMessage
argument_list|,
name|ex
argument_list|)
throw|;
block|}
comment|//
name|ElementProxy
operator|.
name|setDefaultPrefix
argument_list|(
name|Constants
operator|.
name|SignatureSpecNS
argument_list|,
literal|"ds"
argument_list|)
expr_stmt|;
name|String
name|referenceId
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|createReferenceId
condition|)
block|{
name|String
name|id
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|referenceId
operator|=
literal|"#"
operator|+
name|id
expr_stmt|;
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"ID"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|XMLSignature
name|sig
init|=
operator|new
name|XMLSignature
argument_list|(
name|doc
argument_list|,
literal|""
argument_list|,
name|sigAlgo
argument_list|)
decl_stmt|;
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|sig
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|Transforms
name|transforms
init|=
operator|new
name|Transforms
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|transforms
operator|.
name|addTransform
argument_list|(
name|Transforms
operator|.
name|TRANSFORM_ENVELOPED_SIGNATURE
argument_list|)
expr_stmt|;
name|transforms
operator|.
name|addTransform
argument_list|(
name|Transforms
operator|.
name|TRANSFORM_C14N_EXCL_OMIT_COMMENTS
argument_list|)
expr_stmt|;
name|sig
operator|.
name|addDocument
argument_list|(
literal|""
argument_list|,
name|transforms
argument_list|,
name|digestAlgo
argument_list|,
name|referenceId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sig
operator|.
name|addKeyInfo
argument_list|(
name|issuerCerts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sig
operator|.
name|addKeyInfo
argument_list|(
name|issuerCerts
index|[
literal|0
index|]
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|sign
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

