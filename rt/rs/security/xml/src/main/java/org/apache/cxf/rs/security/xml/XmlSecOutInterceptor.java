begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractOutDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|common
operator|.
name|CryptoLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|common
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|algorithms
operator|.
name|JCEMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|exceptions
operator|.
name|XMLSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|signature
operator|.
name|XMLSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|OutboundXMLSec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|SecurePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|XMLSec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|XMLSecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|XMLSecurityProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityTokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|EncryptionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|signature
operator|.
name|SignatureConstants
import|;
end_import

begin_comment
comment|/**  * A new StAX-based interceptor for creating messages with XML Signature + Encryption content.  */
end_comment

begin_class
specifier|public
class|class
name|XmlSecOutInterceptor
implements|implements
name|PhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_STREAM_HOLDER
init|=
name|XmlSecOutInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".outputstream"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|XmlSecOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|XmlSecStaxOutInterceptorInternal
name|ending
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|before
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|after
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|EncryptionProperties
name|encryptionProperties
init|=
operator|new
name|EncryptionProperties
argument_list|()
decl_stmt|;
specifier|private
name|SignatureProperties
name|sigProps
init|=
operator|new
name|SignatureProperties
argument_list|()
decl_stmt|;
specifier|private
name|String
name|phase
decl_stmt|;
specifier|private
name|boolean
name|encryptSymmetricKey
init|=
literal|true
decl_stmt|;
specifier|private
name|SecretKey
name|symmetricKey
decl_stmt|;
specifier|private
name|boolean
name|signRequest
decl_stmt|;
specifier|private
name|boolean
name|encryptRequest
decl_stmt|;
specifier|private
name|List
argument_list|<
name|QName
argument_list|>
name|elementsToSign
init|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|QName
argument_list|>
name|elementsToEncrypt
init|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|keyInfoMustBeAvailable
init|=
literal|true
decl_stmt|;
specifier|public
name|XmlSecOutInterceptor
parameter_list|()
block|{
name|setPhase
argument_list|(
name|Phase
operator|.
name|PRE_STREAM
argument_list|)
expr_stmt|;
name|getBefore
argument_list|()
operator|.
name|add
argument_list|(
name|StaxOutInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ending
operator|=
name|createEndingInterceptor
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{     }
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|OutputStream
name|os
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
name|getEncoding
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|encryptRequest
operator|||
name|signRequest
operator|)
condition|)
block|{
name|Exception
name|ex
init|=
operator|new
name|Exception
argument_list|(
literal|"Either encryption and/or signature must be enabled"
argument_list|)
decl_stmt|;
name|throwFault
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|XMLStreamWriter
name|newXMLStreamWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XMLSecurityProperties
name|properties
init|=
operator|new
name|XMLSecurityProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|signRequest
condition|)
block|{
name|configureSignature
argument_list|(
name|message
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encryptRequest
condition|)
block|{
name|configureEncryption
argument_list|(
name|message
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
name|OutboundXMLSec
name|outboundXMLSec
init|=
name|XMLSec
operator|.
name|getOutboundXMLSec
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|newXMLStreamWriter
operator|=
name|outboundXMLSec
operator|.
name|processOutMessage
argument_list|(
name|os
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
name|newXMLStreamWriter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLSecurityException
name|e
parameter_list|)
block|{
name|throwFault
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|throwFault
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|AbstractOutDatabindingInterceptor
operator|.
name|DISABLE_OUTPUTSTREAM_OPTIMIZATION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|StaxOutInterceptor
operator|.
name|FORCE_START_DOCUMENT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|StaxOutInterceptor
operator|.
name|FORCE_START_DOCUMENT
argument_list|,
literal|false
argument_list|)
condition|)
block|{
try|try
block|{
name|newXMLStreamWriter
operator|.
name|writeStartDocument
argument_list|(
name|encoding
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|message
operator|.
name|removeContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|OUTPUT_STREAM_HOLDER
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
comment|// Add a final interceptor to write end elements
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|ending
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureEncryption
parameter_list|(
name|Message
name|message
parameter_list|,
name|XMLSecurityProperties
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|elementsToEncrypt
operator|==
literal|null
operator|||
name|elementsToEncrypt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"An Element to Encrypt must be specified"
argument_list|)
throw|;
block|}
name|properties
operator|.
name|setEncryptionSymAlgorithm
argument_list|(
name|encryptionProperties
operator|.
name|getEncryptionSymmetricKeyAlgo
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setEncryptionKey
argument_list|(
name|getSymmetricKey
argument_list|(
name|encryptionProperties
operator|.
name|getEncryptionSymmetricKeyAlgo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|encryptSymmetricKey
condition|)
block|{
name|String
name|userName
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
argument_list|)
decl_stmt|;
name|CryptoLoader
name|loader
init|=
operator|new
name|CryptoLoader
argument_list|()
decl_stmt|;
name|Crypto
name|crypto
init|=
name|loader
operator|.
name|getCrypto
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|)
decl_stmt|;
name|userName
operator|=
name|SecurityUtils
operator|.
name|getUserName
argument_list|(
name|crypto
argument_list|,
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|userName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"User name is not available"
argument_list|)
throw|;
block|}
name|X509Certificate
name|sendingCert
init|=
name|getCertificateFromCrypto
argument_list|(
name|crypto
argument_list|,
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sendingCert
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Sending certificate is not available"
argument_list|)
throw|;
block|}
name|properties
operator|.
name|setEncryptionUseThisCertificate
argument_list|(
name|sendingCert
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setEncryptionKeyIdentifier
argument_list|(
name|convertKeyIdentifier
argument_list|(
name|encryptionProperties
operator|.
name|getEncryptionKeyIdType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|encryptionProperties
operator|.
name|getEncryptionKeyTransportAlgo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setEncryptionKeyTransportAlgorithm
argument_list|(
name|encryptionProperties
operator|.
name|getEncryptionKeyTransportAlgo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encryptionProperties
operator|.
name|getEncryptionDigestAlgo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setEncryptionKeyTransportDigestAlgorithm
argument_list|(
name|encryptionProperties
operator|.
name|getEncryptionDigestAlgo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|properties
operator|.
name|addAction
argument_list|(
name|XMLSecurityConstants
operator|.
name|ENCRYPT
argument_list|)
expr_stmt|;
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|elementsToEncrypt
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SecurePart
operator|.
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|properties
operator|.
name|addEncryptionPart
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
specifier|private
name|X509Certificate
name|getCertificateFromCrypto
parameter_list|(
name|Crypto
name|crypto
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|X509Certificate
index|[]
name|certs
init|=
name|SecurityUtils
operator|.
name|getCertificates
argument_list|(
name|crypto
argument_list|,
name|user
argument_list|)
decl_stmt|;
return|return
name|certs
index|[
literal|0
index|]
return|;
block|}
specifier|private
name|SecretKey
name|getSymmetricKey
parameter_list|(
name|String
name|symEncAlgo
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|symmetricKey
operator|==
literal|null
condition|)
block|{
name|KeyGenerator
name|keyGen
init|=
name|getKeyGenerator
argument_list|(
name|symEncAlgo
argument_list|)
decl_stmt|;
name|symmetricKey
operator|=
name|keyGen
operator|.
name|generateKey
argument_list|()
expr_stmt|;
block|}
return|return
name|symmetricKey
return|;
block|}
block|}
specifier|private
name|KeyGenerator
name|getKeyGenerator
parameter_list|(
name|String
name|symEncAlgo
parameter_list|)
throws|throws
name|WSSecurityException
block|{
try|try
block|{
comment|//
comment|// Assume AES as default, so initialize it
comment|//
name|String
name|keyAlgorithm
init|=
name|JCEMapper
operator|.
name|getJCEKeyAlgorithmFromURI
argument_list|(
name|symEncAlgo
argument_list|)
decl_stmt|;
name|KeyGenerator
name|keyGen
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|keyAlgorithm
argument_list|)
decl_stmt|;
if|if
condition|(
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_128
argument_list|)
operator|||
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_128_GCM
argument_list|)
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
literal|128
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_192
argument_list|)
operator|||
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_192_GCM
argument_list|)
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
literal|192
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_256
argument_list|)
operator|||
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_256_GCM
argument_list|)
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
return|return
name|keyGen
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|UNSUPPORTED_ALGORITHM
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|configureSignature
parameter_list|(
name|Message
name|message
parameter_list|,
name|XMLSecurityProperties
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|elementsToSign
operator|==
literal|null
operator|||
name|elementsToSign
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"An Element to Sign must be specified"
argument_list|)
throw|;
block|}
name|String
name|userNameKey
init|=
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
decl_stmt|;
name|CryptoLoader
name|loader
init|=
operator|new
name|CryptoLoader
argument_list|()
decl_stmt|;
name|Crypto
name|crypto
init|=
name|loader
operator|.
name|getCrypto
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|SecurityUtils
operator|.
name|getUserName
argument_list|(
name|message
argument_list|,
name|crypto
argument_list|,
name|userNameKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
operator|||
name|SecurityUtils
operator|.
name|USE_REQUEST_SIGNATURE_CERT
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"User name is not available"
argument_list|)
throw|;
block|}
name|String
name|password
init|=
name|SecurityUtils
operator|.
name|getPassword
argument_list|(
name|message
argument_list|,
name|user
argument_list|,
name|WSPasswordCallback
operator|.
name|SIGNATURE
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|X509Certificate
index|[]
name|issuerCerts
init|=
name|SecurityUtils
operator|.
name|getCertificates
argument_list|(
name|crypto
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setSignatureCerts
argument_list|(
name|issuerCerts
argument_list|)
expr_stmt|;
name|String
name|sigAlgo
init|=
name|sigProps
operator|.
name|getSignatureAlgo
argument_list|()
operator|==
literal|null
condition|?
name|SignatureConstants
operator|.
name|ALGO_ID_SIGNATURE_RSA_SHA1
else|:
name|sigProps
operator|.
name|getSignatureAlgo
argument_list|()
decl_stmt|;
name|String
name|pubKeyAlgo
init|=
name|issuerCerts
index|[
literal|0
index|]
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|pubKeyAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DSA"
argument_list|)
condition|)
block|{
name|sigAlgo
operator|=
name|XMLSignature
operator|.
name|ALGO_ID_SIGNATURE_DSA
expr_stmt|;
block|}
name|properties
operator|.
name|setSignatureAlgorithm
argument_list|(
name|sigAlgo
argument_list|)
expr_stmt|;
name|PrivateKey
name|privateKey
init|=
literal|null
decl_stmt|;
try|try
block|{
name|privateKey
operator|=
name|crypto
operator|.
name|getPrivateKey
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Private key can not be loaded, user:"
operator|+
name|user
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|properties
operator|.
name|setSignatureKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|String
name|digestAlgo
init|=
name|sigProps
operator|.
name|getSignatureDigestAlgo
argument_list|()
operator|==
literal|null
condition|?
name|Constants
operator|.
name|ALGO_ID_DIGEST_SHA1
else|:
name|sigProps
operator|.
name|getSignatureDigestAlgo
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setSignatureDigestAlgorithm
argument_list|(
name|digestAlgo
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|keyInfoMustBeAvailable
condition|)
block|{
name|properties
operator|.
name|setSignatureKeyIdentifier
argument_list|(
name|convertKeyIdentifier
argument_list|(
name|sigProps
operator|.
name|getSignatureKeyIdType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|setSignatureKeyIdentifier
argument_list|(
name|SecurityTokenConstants
operator|.
name|KeyIdentifier_NoKeyInfo
argument_list|)
expr_stmt|;
block|}
name|String
name|c14nMethod
init|=
literal|"http://www.w3.org/TR/2001/REC-xml-c14n-20010315"
decl_stmt|;
if|if
condition|(
name|sigProps
operator|.
name|getSignatureC14nMethod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|c14nMethod
operator|=
name|sigProps
operator|.
name|getSignatureC14nMethod
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setSignatureCanonicalizationAlgorithm
argument_list|(
name|c14nMethod
argument_list|)
expr_stmt|;
name|properties
operator|.
name|addAction
argument_list|(
name|XMLSecurityConstants
operator|.
name|SIGNATURE
argument_list|)
expr_stmt|;
comment|// Only enveloped supported for the moment.
name|String
name|transform
init|=
literal|"http://www.w3.org/2001/10/xml-exc-c14n#"
decl_stmt|;
if|if
condition|(
name|sigProps
operator|.
name|getSignatureC14nTransform
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|transform
operator|=
name|sigProps
operator|.
name|getSignatureC14nTransform
argument_list|()
expr_stmt|;
block|}
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|elementsToSign
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SecurePart
operator|.
name|Modifier
operator|.
name|Element
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"http://www.w3.org/2000/09/xmldsig#enveloped-signature"
block|,
name|transform
block|}
argument_list|,
name|digestAlgo
argument_list|)
decl_stmt|;
name|properties
operator|.
name|addSignaturePart
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|throwFault
parameter_list|(
name|String
name|error
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|JAXRSUtils
operator|.
name|toResponseBuilder
argument_list|(
literal|400
argument_list|)
operator|.
name|entity
argument_list|(
name|error
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
throw|throw
name|ExceptionUtils
operator|.
name|toBadRequestException
argument_list|(
literal|null
argument_list|,
name|response
argument_list|)
throw|;
block|}
specifier|public
name|Collection
argument_list|<
name|PhaseInterceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getAdditionalInterceptors
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAfter
parameter_list|()
block|{
return|return
name|after
return|;
block|}
specifier|public
name|void
name|setAfter
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|after
parameter_list|)
block|{
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBefore
parameter_list|()
block|{
return|return
name|before
return|;
block|}
specifier|public
name|void
name|setBefore
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|before
parameter_list|)
block|{
name|this
operator|.
name|before
operator|=
name|before
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPhase
parameter_list|()
block|{
return|return
name|phase
return|;
block|}
specifier|public
name|void
name|setPhase
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|this
operator|.
name|phase
operator|=
name|phase
expr_stmt|;
block|}
specifier|public
name|void
name|setEncryptionProperties
parameter_list|(
name|EncryptionProperties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|encryptionProperties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|void
name|setKeyIdentifierType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|encryptionProperties
operator|.
name|setEncryptionKeyIdType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSymmetricEncAlgorithm
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|algo
operator|.
name|startsWith
argument_list|(
name|EncryptionConstants
operator|.
name|EncryptionSpecNS
argument_list|)
operator|||
name|algo
operator|.
name|startsWith
argument_list|(
name|EncryptionConstants
operator|.
name|EncryptionSpec11NS
argument_list|)
operator|)
condition|)
block|{
name|algo
operator|=
name|EncryptionConstants
operator|.
name|EncryptionSpecNS
operator|+
name|algo
expr_stmt|;
block|}
name|encryptionProperties
operator|.
name|setEncryptionSymmetricKeyAlgo
argument_list|(
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setKeyEncAlgorithm
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
name|encryptionProperties
operator|.
name|setEncryptionKeyTransportAlgo
argument_list|(
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEncryptionDigestAlgorithm
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
name|encryptionProperties
operator|.
name|setEncryptionDigestAlgo
argument_list|(
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setKeyInfoMustBeAvailable
parameter_list|(
name|boolean
name|use
parameter_list|)
block|{
name|this
operator|.
name|keyInfoMustBeAvailable
operator|=
name|use
expr_stmt|;
block|}
specifier|public
name|void
name|setSignatureProperties
parameter_list|(
name|SignatureProperties
name|props
parameter_list|)
block|{
name|this
operator|.
name|sigProps
operator|=
name|props
expr_stmt|;
block|}
specifier|public
name|void
name|setSignatureAlgorithm
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
name|sigProps
operator|.
name|setSignatureAlgo
argument_list|(
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSignatureDigestAlgorithm
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
name|sigProps
operator|.
name|setSignatureDigestAlgo
argument_list|(
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|XmlSecStaxOutInterceptorInternal
name|createEndingInterceptor
parameter_list|()
block|{
return|return
operator|new
name|XmlSecStaxOutInterceptorInternal
argument_list|()
return|;
block|}
specifier|private
name|String
name|getEncoding
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|String
name|encoding
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
operator|&&
name|ex
operator|.
name|getInMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encoding
operator|=
operator|(
name|String
operator|)
name|ex
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
return|return
name|encoding
return|;
block|}
specifier|private
specifier|static
name|SecurityTokenConstants
operator|.
name|KeyIdentifier
name|convertKeyIdentifier
parameter_list|(
name|String
name|keyIdentifier
parameter_list|)
block|{
if|if
condition|(
literal|"IssuerSerial"
operator|.
name|equals
argument_list|(
name|keyIdentifier
argument_list|)
condition|)
block|{
return|return
name|SecurityTokenConstants
operator|.
name|KeyIdentifier_IssuerSerial
return|;
block|}
elseif|else
if|if
condition|(
literal|"X509KeyIdentifier"
operator|.
name|equals
argument_list|(
name|keyIdentifier
argument_list|)
condition|)
block|{
return|return
name|SecurityTokenConstants
operator|.
name|KeyIdentifier_X509KeyIdentifier
return|;
block|}
elseif|else
if|if
condition|(
literal|"SKIKeyIdentifier"
operator|.
name|equals
argument_list|(
name|keyIdentifier
argument_list|)
condition|)
block|{
return|return
name|SecurityTokenConstants
operator|.
name|KeyIdentifier_SkiKeyIdentifier
return|;
block|}
elseif|else
if|if
condition|(
literal|"KeyValue"
operator|.
name|equals
argument_list|(
name|keyIdentifier
argument_list|)
condition|)
block|{
return|return
name|SecurityTokenConstants
operator|.
name|KeyIdentifier_KeyValue
return|;
block|}
return|return
name|SecurityTokenConstants
operator|.
name|KeyIdentifier_X509KeyIdentifier
return|;
block|}
specifier|public
name|boolean
name|isSignRequest
parameter_list|()
block|{
return|return
name|signRequest
return|;
block|}
specifier|public
name|void
name|setSignRequest
parameter_list|(
name|boolean
name|signRequest
parameter_list|)
block|{
name|this
operator|.
name|signRequest
operator|=
name|signRequest
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEncryptRequest
parameter_list|()
block|{
return|return
name|encryptRequest
return|;
block|}
specifier|public
name|void
name|setEncryptRequest
parameter_list|(
name|boolean
name|encryptRequest
parameter_list|)
block|{
name|this
operator|.
name|encryptRequest
operator|=
name|encryptRequest
expr_stmt|;
block|}
specifier|public
name|void
name|setElementsToEncrypt
parameter_list|(
name|List
argument_list|<
name|QName
argument_list|>
name|elementsToEncrypt
parameter_list|)
block|{
name|this
operator|.
name|elementsToEncrypt
operator|=
name|elementsToEncrypt
expr_stmt|;
block|}
specifier|public
name|void
name|addElementToEncrypt
parameter_list|(
name|QName
name|elementToEncrypt
parameter_list|)
block|{
name|elementsToEncrypt
operator|.
name|add
argument_list|(
name|elementToEncrypt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setElementsToSign
parameter_list|(
name|List
argument_list|<
name|QName
argument_list|>
name|elementsToSign
parameter_list|)
block|{
name|this
operator|.
name|elementsToSign
operator|=
name|elementsToSign
expr_stmt|;
block|}
specifier|public
name|void
name|addElementToSign
parameter_list|(
name|QName
name|elementToSign
parameter_list|)
block|{
name|elementsToSign
operator|.
name|add
argument_list|(
name|elementToSign
argument_list|)
expr_stmt|;
block|}
specifier|final
class|class
name|XmlSecStaxOutInterceptorInternal
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|XmlSecStaxOutInterceptorInternal
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_STREAM_ENDING
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|mc
parameter_list|)
throws|throws
name|Fault
block|{
try|try
block|{
name|XMLStreamWriter
name|xtw
init|=
name|mc
operator|.
name|getContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|xtw
operator|!=
literal|null
condition|)
block|{
name|xtw
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|xtw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|xtw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|os
init|=
operator|(
name|OutputStream
operator|)
name|mc
operator|.
name|get
argument_list|(
name|OUTPUT_STREAM_HOLDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|mc
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
name|mc
operator|.
name|removeContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isEncryptSymmetricKey
parameter_list|()
block|{
return|return
name|encryptSymmetricKey
return|;
block|}
specifier|public
name|void
name|setEncryptSymmetricKey
parameter_list|(
name|boolean
name|encryptSymmetricKey
parameter_list|)
block|{
name|this
operator|.
name|encryptSymmetricKey
operator|=
name|encryptSymmetricKey
expr_stmt|;
block|}
specifier|public
name|SecretKey
name|getSymmetricKey
parameter_list|()
block|{
return|return
name|symmetricKey
return|;
block|}
specifier|public
name|void
name|setSymmetricKey
parameter_list|(
name|SecretKey
name|symmetricKey
parameter_list|)
block|{
name|this
operator|.
name|symmetricKey
operator|=
name|symmetricKey
expr_stmt|;
block|}
block|}
end_class

end_unit

