begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|CompressionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_class
specifier|public
class|class
name|DeflateEncoderDecoder
block|{
specifier|public
name|InputStream
name|inflateToken
parameter_list|(
name|byte
index|[]
name|deflatedToken
parameter_list|)
throws|throws
name|DataFormatException
block|{
return|return
name|CompressionUtils
operator|.
name|inflate
argument_list|(
name|deflatedToken
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|deflateToken
parameter_list|(
name|byte
index|[]
name|tokenBytes
parameter_list|)
block|{
return|return
name|deflateToken
argument_list|(
name|tokenBytes
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|deflateToken
parameter_list|(
name|byte
index|[]
name|tokenBytes
parameter_list|,
name|boolean
name|nowrap
parameter_list|)
block|{
return|return
name|deflateToken
argument_list|(
name|tokenBytes
argument_list|,
name|getDeflateLevel
argument_list|()
argument_list|,
name|nowrap
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|deflateToken
parameter_list|(
name|byte
index|[]
name|tokenBytes
parameter_list|,
name|int
name|level
parameter_list|,
name|boolean
name|nowrap
parameter_list|)
block|{
return|return
name|CompressionUtils
operator|.
name|deflate
argument_list|(
name|tokenBytes
argument_list|,
name|level
argument_list|,
name|nowrap
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getDeflateLevel
parameter_list|()
block|{
name|Integer
name|level
init|=
literal|null
decl_stmt|;
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|level
operator|=
name|PropertyUtils
operator|.
name|getInteger
argument_list|(
name|m
argument_list|,
literal|"deflate.level"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|level
operator|==
literal|null
condition|)
block|{
name|level
operator|=
name|Deflater
operator|.
name|DEFLATED
expr_stmt|;
block|}
return|return
name|level
return|;
block|}
block|}
end_class

end_unit

