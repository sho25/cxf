begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|FormEncodingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|FormUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|SamlFormInHandler
extends|extends
name|AbstractSamlBase64InHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SAML_ELEMENT
init|=
literal|"SAMLToken"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAML_RELAY_STATE
init|=
literal|"RelayState"
decl_stmt|;
specifier|private
name|FormEncodingProvider
argument_list|<
name|Form
argument_list|>
name|provider
init|=
operator|new
name|FormEncodingProvider
argument_list|<>
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|SamlFormInHandler
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|ContainerRequestContext
name|context
parameter_list|)
block|{
name|Message
name|message
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|Form
name|form
init|=
name|readFormData
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|formData
init|=
name|form
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|String
name|assertion
init|=
name|formData
operator|.
name|getFirst
argument_list|(
name|SAML_ELEMENT
argument_list|)
decl_stmt|;
name|handleToken
argument_list|(
name|message
argument_list|,
name|assertion
argument_list|)
expr_stmt|;
comment|// redirect if needed
name|String
name|samlRequestURI
init|=
name|formData
operator|.
name|getFirst
argument_list|(
name|SAML_RELAY_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|samlRequestURI
operator|!=
literal|null
condition|)
block|{
comment|// RelayState may actually represent a reference to a transient local state
comment|// containing the actual REQUEST URI client was using before being redirected
comment|// back to IDP - at the moment assume it's URI
name|UriInfoImpl
name|ui
init|=
operator|new
name|UriInfoImpl
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|samlRequestURI
operator|.
name|startsWith
argument_list|(
name|ui
operator|.
name|getBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|.
name|abortWith
argument_list|(
name|Response
operator|.
name|status
argument_list|(
literal|302
argument_list|)
operator|.
name|location
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|samlRequestURI
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|formData
operator|.
name|remove
argument_list|(
name|SAML_ELEMENT
argument_list|)
expr_stmt|;
name|formData
operator|.
name|remove
argument_list|(
name|SAML_RELAY_STATE
argument_list|)
expr_stmt|;
comment|// restore input stream
try|try
block|{
name|FormUtils
operator|.
name|restoreForm
argument_list|(
name|provider
argument_list|,
name|form
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Form
name|readFormData
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
return|return
name|FormUtils
operator|.
name|readForm
argument_list|(
name|provider
argument_list|,
name|message
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Error reading the form"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

