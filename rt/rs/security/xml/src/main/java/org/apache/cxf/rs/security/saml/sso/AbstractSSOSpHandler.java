begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|sso
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|HttpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|sso
operator|.
name|state
operator|.
name|SPStateManager
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"sso"
argument_list|)
specifier|public
class|class
name|AbstractSSOSpHandler
block|{
specifier|private
name|SPStateManager
name|stateProvider
decl_stmt|;
specifier|private
name|long
name|stateTimeToLive
init|=
name|SSOConstants
operator|.
name|DEFAULT_STATE_TIME
decl_stmt|;
specifier|protected
name|String
name|createCookie
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|contextCookie
init|=
name|name
operator|+
literal|"="
operator|+
name|value
decl_stmt|;
comment|// Make sure all the SP application filters can get this token;
comment|// Path property should be enough for a single container, Domain
comment|// property may need to be used for more complex environments
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|contextCookie
operator|+=
literal|";Path="
operator|+
name|path
expr_stmt|;
block|}
comment|// Keep the cookie across the browser restarts until it actually expires.
comment|// Note that the Expires property has been deprecated but apparently is
comment|// supported better than 'max-age' property by different browsers
comment|// (Firefox, IE, etc)
name|Date
name|expiresDate
init|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|stateTimeToLive
argument_list|)
decl_stmt|;
name|String
name|cookieExpires
init|=
name|HttpUtils
operator|.
name|getHttpDateFormat
argument_list|()
operator|.
name|format
argument_list|(
name|expiresDate
argument_list|)
decl_stmt|;
name|contextCookie
operator|+=
literal|";Expires="
operator|+
name|cookieExpires
expr_stmt|;
comment|//TODO: Consider adding an 'HttpOnly' attribute
return|return
name|contextCookie
return|;
block|}
specifier|protected
name|boolean
name|isStateExpired
parameter_list|(
name|long
name|stateCreatedAt
parameter_list|)
block|{
return|return
operator|new
name|Date
argument_list|()
operator|.
name|after
argument_list|(
operator|new
name|Date
argument_list|(
name|stateCreatedAt
operator|+
name|getStateTimeToLive
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setStateProvider
parameter_list|(
name|SPStateManager
name|stateProvider
parameter_list|)
block|{
name|this
operator|.
name|stateProvider
operator|=
name|stateProvider
expr_stmt|;
block|}
specifier|public
name|SPStateManager
name|getStateProvider
parameter_list|()
block|{
return|return
name|stateProvider
return|;
block|}
specifier|public
name|void
name|setStateTimeToLive
parameter_list|(
name|long
name|stateTimeToLive
parameter_list|)
block|{
name|this
operator|.
name|stateTimeToLive
operator|=
name|stateTimeToLive
expr_stmt|;
block|}
specifier|public
name|long
name|getStateTimeToLive
parameter_list|()
block|{
return|return
name|stateTimeToLive
return|;
block|}
block|}
end_class

end_unit

