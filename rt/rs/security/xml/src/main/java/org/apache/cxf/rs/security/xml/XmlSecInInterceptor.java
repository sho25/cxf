begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|common
operator|.
name|CryptoLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|common
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|common
operator|.
name|TrustValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|exceptions
operator|.
name|XMLSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|InboundXMLSec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|XMLSec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|XMLSecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|XMLSecurityProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|AlgorithmSuiteSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEventConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|TokenSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityToken
import|;
end_import

begin_comment
comment|/**  * A new StAX-based interceptor for processing messages with XML Signature + Encryption content.  */
end_comment

begin_class
specifier|public
class|class
name|XmlSecInInterceptor
implements|implements
name|PhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|XmlSecInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|before
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|after
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|EncryptionProperties
name|encryptionProperties
decl_stmt|;
specifier|private
name|SignatureProperties
name|sigProps
decl_stmt|;
specifier|private
name|String
name|phase
decl_stmt|;
specifier|private
name|String
name|decryptionAlias
decl_stmt|;
specifier|private
name|String
name|signatureVerificationAlias
decl_stmt|;
specifier|public
name|XmlSecInInterceptor
parameter_list|()
block|{
name|setPhase
argument_list|(
name|Phase
operator|.
name|POST_STREAM
argument_list|)
expr_stmt|;
name|getAfter
argument_list|()
operator|.
name|add
argument_list|(
name|StaxInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{     }
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|String
name|method
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return;
block|}
name|Message
name|outMs
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
name|Message
name|inMsg
init|=
name|outMs
operator|==
literal|null
condition|?
name|message
else|:
name|outMs
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
name|XMLStreamReader
name|originalXmlStreamReader
init|=
name|inMsg
operator|.
name|getContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalXmlStreamReader
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|inMsg
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|originalXmlStreamReader
operator|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|XMLSecurityProperties
name|properties
init|=
operator|new
name|XMLSecurityProperties
argument_list|()
decl_stmt|;
name|configureDecryptionKeys
argument_list|(
name|inMsg
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|Crypto
name|signatureCrypto
init|=
name|getSignatureCrypto
argument_list|(
name|inMsg
argument_list|)
decl_stmt|;
name|configureSignatureKeys
argument_list|(
name|signatureCrypto
argument_list|,
name|inMsg
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|SecurityEventListener
name|securityEventListener
init|=
name|configureSecurityEventListener
argument_list|(
name|signatureCrypto
argument_list|,
name|inMsg
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|InboundXMLSec
name|inboundXMLSec
init|=
name|XMLSec
operator|.
name|getInboundWSSec
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|XMLStreamReader
name|newXmlStreamReader
init|=
name|inboundXMLSec
operator|.
name|processInMessage
argument_list|(
name|originalXmlStreamReader
argument_list|,
literal|null
argument_list|,
name|securityEventListener
argument_list|)
decl_stmt|;
name|inMsg
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|newXmlStreamReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
name|throwFault
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLSecurityException
name|e
parameter_list|)
block|{
name|throwFault
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|throwFault
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedCallbackException
name|e
parameter_list|)
block|{
name|throwFault
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureDecryptionKeys
parameter_list|(
name|Message
name|message
parameter_list|,
name|XMLSecurityProperties
name|properties
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
throws|,
name|WSSecurityException
block|{
name|String
name|cryptoKey
init|=
literal|null
decl_stmt|;
name|String
name|propKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SecurityUtils
operator|.
name|isSignedAndEncryptedTwoWay
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|cryptoKey
operator|=
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
expr_stmt|;
name|propKey
operator|=
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
expr_stmt|;
block|}
else|else
block|{
name|cryptoKey
operator|=
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
expr_stmt|;
name|propKey
operator|=
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
expr_stmt|;
block|}
name|Crypto
name|crypto
init|=
literal|null
decl_stmt|;
try|try
block|{
name|crypto
operator|=
operator|new
name|CryptoLoader
argument_list|()
operator|.
name|getCrypto
argument_list|(
name|message
argument_list|,
name|cryptoKey
argument_list|,
name|propKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Crypto can not be loaded"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crypto
operator|!=
literal|null
operator|&&
name|decryptionAlias
operator|!=
literal|null
condition|)
block|{
name|CallbackHandler
name|callback
init|=
name|SecurityUtils
operator|.
name|getCallbackHandler
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|WSPasswordCallback
name|passwordCallback
init|=
operator|new
name|WSPasswordCallback
argument_list|(
name|decryptionAlias
argument_list|,
name|WSPasswordCallback
operator|.
name|DECRYPT
argument_list|)
decl_stmt|;
name|callback
operator|.
name|handle
argument_list|(
operator|new
name|Callback
index|[]
block|{
name|passwordCallback
block|}
argument_list|)
expr_stmt|;
name|Key
name|privateKey
init|=
name|crypto
operator|.
name|getPrivateKey
argument_list|(
name|decryptionAlias
argument_list|,
name|passwordCallback
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setDecryptionKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Crypto
name|getSignatureCrypto
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|String
name|cryptoKey
init|=
literal|null
decl_stmt|;
name|String
name|propKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SecurityUtils
operator|.
name|isSignedAndEncryptedTwoWay
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|cryptoKey
operator|=
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
expr_stmt|;
name|propKey
operator|=
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
expr_stmt|;
block|}
else|else
block|{
name|cryptoKey
operator|=
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
expr_stmt|;
name|propKey
operator|=
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|CryptoLoader
argument_list|()
operator|.
name|getCrypto
argument_list|(
name|message
argument_list|,
name|cryptoKey
argument_list|,
name|propKey
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Crypto can not be loaded"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|configureSignatureKeys
parameter_list|(
name|Crypto
name|sigCrypto
parameter_list|,
name|Message
name|message
parameter_list|,
name|XMLSecurityProperties
name|properties
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
throws|,
name|WSSecurityException
block|{
if|if
condition|(
name|sigCrypto
operator|!=
literal|null
operator|&&
name|signatureVerificationAlias
operator|!=
literal|null
condition|)
block|{
name|CryptoType
name|cryptoType
init|=
operator|new
name|CryptoType
argument_list|(
name|CryptoType
operator|.
name|TYPE
operator|.
name|ALIAS
argument_list|)
decl_stmt|;
name|cryptoType
operator|.
name|setAlias
argument_list|(
name|signatureVerificationAlias
argument_list|)
expr_stmt|;
name|X509Certificate
index|[]
name|certs
init|=
name|sigCrypto
operator|.
name|getX509Certificates
argument_list|(
name|cryptoType
argument_list|)
decl_stmt|;
if|if
condition|(
name|certs
operator|!=
literal|null
operator|&&
name|certs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|properties
operator|.
name|setSignatureVerificationKey
argument_list|(
name|certs
index|[
literal|0
index|]
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|SecurityEventListener
name|configureSecurityEventListener
parameter_list|(
specifier|final
name|Crypto
name|sigCrypto
parameter_list|,
name|Message
name|msg
parameter_list|,
name|XMLSecurityProperties
name|securityProperties
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingSecurityEventList
init|=
operator|new
name|LinkedList
argument_list|<
name|SecurityEvent
argument_list|>
argument_list|()
decl_stmt|;
name|SecurityEventListener
name|securityEventListener
init|=
operator|new
name|SecurityEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|registerSecurityEvent
parameter_list|(
name|SecurityEvent
name|securityEvent
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|securityEvent
operator|.
name|getSecurityEventType
argument_list|()
operator|==
name|SecurityEventConstants
operator|.
name|AlgorithmSuite
condition|)
block|{
if|if
condition|(
name|encryptionProperties
operator|!=
literal|null
condition|)
block|{
name|checkEncryptionAlgorithms
argument_list|(
operator|(
name|AlgorithmSuiteSecurityEvent
operator|)
name|securityEvent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigProps
operator|!=
literal|null
condition|)
block|{
name|checkSignatureAlgorithms
argument_list|(
operator|(
name|AlgorithmSuiteSecurityEvent
operator|)
name|securityEvent
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|securityEvent
operator|.
name|getSecurityEventType
argument_list|()
operator|!=
name|SecurityEventConstants
operator|.
name|EncryptedKeyToken
operator|&&
name|securityEvent
operator|instanceof
name|TokenSecurityEvent
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|checkSignatureTrust
argument_list|(
name|sigCrypto
argument_list|,
operator|(
name|TokenSecurityEvent
argument_list|<
name|?
argument_list|>
operator|)
name|securityEvent
argument_list|)
expr_stmt|;
block|}
name|incomingSecurityEventList
operator|.
name|add
argument_list|(
name|securityEvent
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".in"
argument_list|,
name|incomingSecurityEventList
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|SecurityEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".in"
argument_list|,
name|incomingSecurityEventList
argument_list|)
expr_stmt|;
return|return
name|securityEventListener
return|;
block|}
specifier|private
name|void
name|checkEncryptionAlgorithms
parameter_list|(
name|AlgorithmSuiteSecurityEvent
name|event
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|XMLSecurityConstants
operator|.
name|Enc
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmUsage
argument_list|()
argument_list|)
operator|&&
name|encryptionProperties
operator|.
name|getEncryptionSymmetricKeyAlgo
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|encryptionProperties
operator|.
name|getEncryptionSymmetricKeyAlgo
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLSecurityException
argument_list|(
literal|"empty"
argument_list|,
literal|"The symmetric encryption algorithm "
operator|+
name|event
operator|.
name|getAlgorithmURI
argument_list|()
operator|+
literal|" is not allowed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|(
name|XMLSecurityConstants
operator|.
name|Sym_Key_Wrap
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmUsage
argument_list|()
argument_list|)
operator|||
name|XMLSecurityConstants
operator|.
name|Asym_Key_Wrap
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmUsage
argument_list|()
argument_list|)
operator|)
operator|&&
name|encryptionProperties
operator|.
name|getEncryptionKeyTransportAlgo
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|encryptionProperties
operator|.
name|getEncryptionKeyTransportAlgo
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLSecurityException
argument_list|(
literal|"empty"
argument_list|,
literal|"The key transport algorithm "
operator|+
name|event
operator|.
name|getAlgorithmURI
argument_list|()
operator|+
literal|" is not allowed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|XMLSecurityConstants
operator|.
name|EncDig
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmUsage
argument_list|()
argument_list|)
operator|&&
name|encryptionProperties
operator|.
name|getEncryptionDigestAlgo
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|encryptionProperties
operator|.
name|getEncryptionDigestAlgo
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLSecurityException
argument_list|(
literal|"empty"
argument_list|,
literal|"The encryption digest algorithm "
operator|+
name|event
operator|.
name|getAlgorithmURI
argument_list|()
operator|+
literal|" is not allowed"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkSignatureAlgorithms
parameter_list|(
name|AlgorithmSuiteSecurityEvent
name|event
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|XMLSecurityConstants
operator|.
name|Asym_Sig
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmUsage
argument_list|()
argument_list|)
operator|||
name|XMLSecurityConstants
operator|.
name|Sym_Sig
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmUsage
argument_list|()
argument_list|)
operator|&&
name|sigProps
operator|.
name|getSignatureAlgo
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sigProps
operator|.
name|getSignatureAlgo
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLSecurityException
argument_list|(
literal|"empty"
argument_list|,
literal|"The signature algorithm "
operator|+
name|event
operator|.
name|getAlgorithmURI
argument_list|()
operator|+
literal|" is not allowed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|XMLSecurityConstants
operator|.
name|SigDig
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmUsage
argument_list|()
argument_list|)
operator|&&
name|sigProps
operator|.
name|getSignatureDigestAlgo
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sigProps
operator|.
name|getSignatureDigestAlgo
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLSecurityException
argument_list|(
literal|"empty"
argument_list|,
literal|"The signature digest algorithm "
operator|+
name|event
operator|.
name|getAlgorithmURI
argument_list|()
operator|+
literal|" is not allowed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|XMLSecurityConstants
operator|.
name|SigC14n
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmUsage
argument_list|()
argument_list|)
operator|&&
name|sigProps
operator|.
name|getSignatureC14nMethod
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sigProps
operator|.
name|getSignatureC14nMethod
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLSecurityException
argument_list|(
literal|"empty"
argument_list|,
literal|"The signature c14n algorithm "
operator|+
name|event
operator|.
name|getAlgorithmURI
argument_list|()
operator|+
literal|" is not allowed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|XMLSecurityConstants
operator|.
name|SigTransform
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmUsage
argument_list|()
argument_list|)
operator|&&
name|sigProps
operator|.
name|getSignatureC14nTransform
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sigProps
operator|.
name|getSignatureC14nTransform
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getAlgorithmURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLSecurityException
argument_list|(
literal|"empty"
argument_list|,
literal|"The signature transformation algorithm "
operator|+
name|event
operator|.
name|getAlgorithmURI
argument_list|()
operator|+
literal|" is not allowed"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkSignatureTrust
parameter_list|(
name|Crypto
name|sigCrypto
parameter_list|,
name|TokenSecurityEvent
argument_list|<
name|?
argument_list|>
name|event
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
name|SecurityToken
name|token
init|=
name|event
operator|.
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|X509Certificate
index|[]
name|certs
init|=
name|token
operator|.
name|getX509Certificates
argument_list|()
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|token
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|X509Certificate
name|cert
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|certs
operator|!=
literal|null
operator|&&
name|certs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|cert
operator|=
name|certs
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// validate trust
try|try
block|{
operator|new
name|TrustValidator
argument_list|()
operator|.
name|validateTrust
argument_list|(
name|sigCrypto
argument_list|,
name|cert
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLSecurityException
argument_list|(
literal|"empty"
argument_list|,
literal|"Error during Signature Trust "
operator|+
literal|"validation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|throwFault
parameter_list|(
name|String
name|error
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
literal|400
argument_list|)
operator|.
name|entity
argument_list|(
name|error
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
throw|throw
name|ex
operator|!=
literal|null
condition|?
operator|new
name|BadRequestException
argument_list|(
name|response
argument_list|,
name|ex
argument_list|)
else|:
operator|new
name|BadRequestException
argument_list|(
name|response
argument_list|)
throw|;
block|}
specifier|public
name|Collection
argument_list|<
name|PhaseInterceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getAdditionalInterceptors
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAfter
parameter_list|()
block|{
return|return
name|after
return|;
block|}
specifier|public
name|void
name|setAfter
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|after
parameter_list|)
block|{
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBefore
parameter_list|()
block|{
return|return
name|before
return|;
block|}
specifier|public
name|void
name|setBefore
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|before
parameter_list|)
block|{
name|this
operator|.
name|before
operator|=
name|before
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPhase
parameter_list|()
block|{
return|return
name|phase
return|;
block|}
specifier|public
name|void
name|setPhase
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|this
operator|.
name|phase
operator|=
name|phase
expr_stmt|;
block|}
specifier|public
name|void
name|setEncryptionProperties
parameter_list|(
name|EncryptionProperties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|encryptionProperties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|void
name|setSignatureProperties
parameter_list|(
name|SignatureProperties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|sigProps
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|String
name|getDecryptionAlias
parameter_list|()
block|{
return|return
name|decryptionAlias
return|;
block|}
specifier|public
name|void
name|setDecryptionAlias
parameter_list|(
name|String
name|decryptionAlias
parameter_list|)
block|{
name|this
operator|.
name|decryptionAlias
operator|=
name|decryptionAlias
expr_stmt|;
block|}
specifier|public
name|String
name|getSignatureVerificationAlias
parameter_list|()
block|{
return|return
name|signatureVerificationAlias
return|;
block|}
specifier|public
name|void
name|setSignatureVerificationAlias
parameter_list|(
name|String
name|signatureVerificationAlias
parameter_list|)
block|{
name|this
operator|.
name|signatureVerificationAlias
operator|=
name|signatureVerificationAlias
expr_stmt|;
block|}
block|}
end_class

end_unit

