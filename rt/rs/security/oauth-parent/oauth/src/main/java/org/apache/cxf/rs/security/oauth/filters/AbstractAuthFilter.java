begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuth
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuthMessage
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuthProblemException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|server
operator|.
name|OAuthServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|SimplePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|data
operator|.
name|AccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|data
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|data
operator|.
name|OAuthPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|provider
operator|.
name|OAuthDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|utils
operator|.
name|OAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractAuthFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractAuthFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|REQUIRED_PARAMETERS
init|=
operator|new
name|String
index|[]
block|{
name|OAuth
operator|.
name|OAUTH_CONSUMER_KEY
block|,
name|OAuth
operator|.
name|OAUTH_TOKEN
block|,
name|OAuth
operator|.
name|OAUTH_SIGNATURE_METHOD
block|,
name|OAuth
operator|.
name|OAUTH_SIGNATURE
block|,
name|OAuth
operator|.
name|OAUTH_TIMESTAMP
block|,
name|OAuth
operator|.
name|OAUTH_NONCE
block|}
decl_stmt|;
specifier|private
name|OAuthDataProvider
name|dataProvider
decl_stmt|;
specifier|protected
name|AbstractAuthFilter
parameter_list|()
block|{              }
specifier|public
name|void
name|setDataProvider
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|)
block|{
name|dataProvider
operator|=
name|provider
expr_stmt|;
block|}
specifier|public
name|OAuthInfo
name|handleOAuthRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
throws|throws
name|Exception
throws|,
name|OAuthProblemException
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"OAuth security filter for url: {0}"
argument_list|,
name|req
operator|.
name|getRequestURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AccessToken
name|accessToken
init|=
literal|null
decl_stmt|;
name|Client
name|client
init|=
literal|null
decl_stmt|;
name|OAuthMessage
name|oAuthMessage
init|=
name|OAuthServlet
operator|.
name|getMessage
argument_list|(
name|req
argument_list|,
name|req
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oAuthMessage
operator|.
name|getParameter
argument_list|(
name|OAuth
operator|.
name|OAUTH_TOKEN
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|oAuthMessage
operator|.
name|requireParameters
argument_list|(
name|REQUIRED_PARAMETERS
argument_list|)
expr_stmt|;
name|accessToken
operator|=
name|dataProvider
operator|.
name|getAccessToken
argument_list|(
name|oAuthMessage
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
comment|//check if access token is not null
if|if
condition|(
name|accessToken
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OAuthProblemException
argument_list|()
throw|;
block|}
name|client
operator|=
name|accessToken
operator|.
name|getClient
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|consumerKey
init|=
name|oAuthMessage
operator|.
name|getParameter
argument_list|(
name|OAuth
operator|.
name|OAUTH_CONSUMER_KEY
argument_list|)
decl_stmt|;
name|client
operator|=
name|dataProvider
operator|.
name|getClient
argument_list|(
name|consumerKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OAuthProblemException
argument_list|()
throw|;
block|}
block|}
name|OAuthUtils
operator|.
name|validateMessage
argument_list|(
name|oAuthMessage
argument_list|,
name|client
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
comment|//check valid URI
if|if
condition|(
operator|!
name|checkRequestURI
argument_list|(
name|req
argument_list|,
name|getAllUris
argument_list|(
name|client
argument_list|,
name|accessToken
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthProblemException
argument_list|()
throw|;
block|}
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|permissions
init|=
name|dataProvider
operator|.
name|getPermissionsInfo
argument_list|(
name|getAllScopes
argument_list|(
name|client
argument_list|,
name|accessToken
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|OAuthPermission
name|perm
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|perm
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|checkRequestURI
argument_list|(
name|req
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|perm
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthProblemException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|perm
operator|.
name|getHttpVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|perm
operator|.
name|getHttpVerbs
argument_list|()
operator|.
name|contains
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthProblemException
argument_list|()
throw|;
block|}
block|}
return|return
operator|new
name|OAuthInfo
argument_list|(
name|client
argument_list|,
name|accessToken
argument_list|,
name|permissions
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getAllScopes
parameter_list|(
name|Client
name|client
parameter_list|,
name|AccessToken
name|token
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|scopes
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|scopes
operator|.
name|addAll
argument_list|(
name|token
operator|.
name|getScopes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scopes
operator|.
name|addAll
argument_list|(
name|client
operator|.
name|getScopes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|scopes
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getAllUris
parameter_list|(
name|Client
name|client
parameter_list|,
name|AccessToken
name|token
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|uris
operator|.
name|addAll
argument_list|(
name|token
operator|.
name|getUris
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|uris
operator|.
name|addAll
argument_list|(
name|client
operator|.
name|getUris
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|uris
return|;
block|}
specifier|protected
name|boolean
name|checkRequestURI
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|uris
parameter_list|)
block|{
if|if
condition|(
name|uris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|servletPath
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|boolean
name|foundValidScope
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|boolean
name|wildcard
init|=
name|uri
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|wildcard
condition|)
block|{
if|if
condition|(
name|servletPath
operator|.
name|startsWith
argument_list|(
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|foundValidScope
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|servletPath
argument_list|)
condition|)
block|{
name|foundValidScope
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|foundValidScope
return|;
block|}
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|OAuthInfo
name|info
parameter_list|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"oauth_authorities"
argument_list|,
name|info
operator|.
name|getRoles
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
operator|new
name|SimplePrincipal
argument_list|(
name|info
operator|.
name|getClient
argument_list|()
operator|.
name|getLoginName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|info
operator|.
name|getRoles
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|authority
range|:
name|roles
control|)
block|{
if|if
condition|(
name|authority
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

