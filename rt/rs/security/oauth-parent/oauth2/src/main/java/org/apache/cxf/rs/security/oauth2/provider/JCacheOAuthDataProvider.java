begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Caching
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|MutableConfiguration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|spi
operator|.
name|CachingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JoseJwtConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|UserSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|refresh
operator|.
name|RefreshToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|JwtTokenUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ResourceUtils
operator|.
name|getClasspathResourceURL
import|;
end_import

begin_class
specifier|public
class|class
name|JCacheOAuthDataProvider
extends|extends
name|AbstractOAuthDataProvider
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_CACHE_KEY
init|=
literal|"cxf.oauth2.client.cache"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACCESS_TOKEN_CACHE_KEY
init|=
literal|"cxf.oauth2.accesstoken.cache"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REFRESH_TOKEN_CACHE_KEY
init|=
literal|"cxf.oauth2.refreshtoken.cache"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONFIG_URL
init|=
literal|"cxf-oauth2-ehcache3.xml"
decl_stmt|;
specifier|protected
specifier|final
name|CacheManager
name|cacheManager
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|Client
argument_list|>
name|clientCache
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|String
argument_list|,
name|ServerAccessToken
argument_list|>
name|accessTokenCache
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jwtAccessTokenCache
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|RefreshToken
argument_list|>
name|refreshTokenCache
decl_stmt|;
specifier|private
name|boolean
name|storeJwtTokenKeyOnly
decl_stmt|;
specifier|private
name|JoseJwtConsumer
name|jwtTokenConsumer
decl_stmt|;
specifier|public
name|JCacheOAuthDataProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JCacheOAuthDataProvider
parameter_list|(
name|boolean
name|storeJwtTokenKeyOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|DEFAULT_CONFIG_URL
argument_list|,
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JCacheOAuthDataProvider
parameter_list|(
name|String
name|configFileURL
parameter_list|,
name|Bus
name|bus
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|configFileURL
argument_list|,
name|bus
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JCacheOAuthDataProvider
parameter_list|(
name|String
name|configFileURL
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|boolean
name|storeJwtTokenKeyOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|configFileURL
argument_list|,
name|bus
argument_list|,
name|CLIENT_CACHE_KEY
argument_list|,
name|ACCESS_TOKEN_CACHE_KEY
argument_list|,
name|REFRESH_TOKEN_CACHE_KEY
argument_list|,
name|storeJwtTokenKeyOnly
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JCacheOAuthDataProvider
parameter_list|(
name|String
name|configFileURL
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|String
name|clientCacheKey
parameter_list|,
name|String
name|accessTokenCacheKey
parameter_list|,
name|String
name|refreshTokenCacheKey
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|configFileURL
argument_list|,
name|bus
argument_list|,
name|clientCacheKey
argument_list|,
name|accessTokenCacheKey
argument_list|,
name|refreshTokenCacheKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JCacheOAuthDataProvider
parameter_list|(
name|String
name|configFileURL
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|String
name|clientCacheKey
parameter_list|,
name|String
name|accessTokenCacheKey
parameter_list|,
name|String
name|refreshTokenCacheKey
parameter_list|,
name|boolean
name|storeJwtTokenKeyOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|cacheManager
operator|=
name|createCacheManager
argument_list|(
name|configFileURL
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|clientCache
operator|=
name|createCache
argument_list|(
name|cacheManager
argument_list|,
name|clientCacheKey
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Client
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|storeJwtTokenKeyOnly
operator|=
name|storeJwtTokenKeyOnly
expr_stmt|;
if|if
condition|(
name|storeJwtTokenKeyOnly
condition|)
block|{
name|jwtAccessTokenCache
operator|=
name|createCache
argument_list|(
name|cacheManager
argument_list|,
name|accessTokenCacheKey
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accessTokenCache
operator|=
name|createCache
argument_list|(
name|cacheManager
argument_list|,
name|accessTokenCacheKey
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|ServerAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|refreshTokenCache
operator|=
name|createCache
argument_list|(
name|cacheManager
argument_list|,
name|refreshTokenCacheKey
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|RefreshToken
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Client
name|doGetClient
parameter_list|(
name|String
name|clientId
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|clientCache
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
return|;
block|}
specifier|public
name|void
name|setClient
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|clientCache
operator|.
name|put
argument_list|(
name|client
operator|.
name|getClientId
argument_list|()
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRemoveClient
parameter_list|(
name|Client
name|c
parameter_list|)
block|{
name|clientCache
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Client
argument_list|>
name|getClients
parameter_list|(
name|UserSubject
name|resourceOwner
parameter_list|)
block|{
name|List
argument_list|<
name|Client
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Cache
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Client
argument_list|>
argument_list|>
name|it
init|=
name|clientCache
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Cache
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Client
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Client
name|client
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isClientMatched
argument_list|(
name|client
argument_list|,
name|resourceOwner
argument_list|)
condition|)
block|{
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|clients
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerAccessToken
argument_list|>
name|getAccessTokens
parameter_list|(
name|Client
name|c
parameter_list|,
name|UserSubject
name|sub
parameter_list|)
block|{
if|if
condition|(
name|isUseJwtFormatForAccessTokens
argument_list|()
operator|&&
name|isStoreJwtTokenKeyOnly
argument_list|()
condition|)
block|{
return|return
name|getJwtAccessTokens
argument_list|(
name|c
argument_list|,
name|sub
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getTokens
argument_list|(
name|accessTokenCache
argument_list|,
name|c
argument_list|,
name|sub
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RefreshToken
argument_list|>
name|getRefreshTokens
parameter_list|(
name|Client
name|c
parameter_list|,
name|UserSubject
name|sub
parameter_list|)
block|{
return|return
name|getTokens
argument_list|(
name|refreshTokenCache
argument_list|,
name|c
argument_list|,
name|sub
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerAccessToken
name|getAccessToken
parameter_list|(
name|String
name|accessTokenKey
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
if|if
condition|(
name|isUseJwtFormatForAccessTokens
argument_list|()
operator|&&
name|isStoreJwtTokenKeyOnly
argument_list|()
condition|)
block|{
return|return
name|getJwtAccessToken
argument_list|(
name|accessTokenKey
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getToken
argument_list|(
name|accessTokenCache
argument_list|,
name|accessTokenKey
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRevokeAccessToken
parameter_list|(
name|ServerAccessToken
name|at
parameter_list|)
block|{
name|accessTokenCache
operator|.
name|remove
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RefreshToken
name|getRefreshToken
parameter_list|(
name|String
name|refreshTokenKey
parameter_list|)
block|{
return|return
name|getToken
argument_list|(
name|refreshTokenCache
argument_list|,
name|refreshTokenKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRevokeRefreshToken
parameter_list|(
name|RefreshToken
name|rt
parameter_list|)
block|{
name|refreshTokenCache
operator|.
name|remove
argument_list|(
name|rt
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|saveAccessToken
parameter_list|(
name|ServerAccessToken
name|serverToken
parameter_list|)
block|{
if|if
condition|(
name|isUseJwtFormatForAccessTokens
argument_list|()
operator|&&
name|isStoreJwtTokenKeyOnly
argument_list|()
condition|)
block|{
name|jwtAccessTokenCache
operator|.
name|put
argument_list|(
name|serverToken
operator|.
name|getTokenKey
argument_list|()
argument_list|,
name|serverToken
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accessTokenCache
operator|.
name|put
argument_list|(
name|serverToken
operator|.
name|getTokenKey
argument_list|()
argument_list|,
name|serverToken
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|saveRefreshToken
parameter_list|(
name|RefreshToken
name|refreshToken
parameter_list|)
block|{
name|refreshTokenCache
operator|.
name|put
argument_list|(
name|refreshToken
operator|.
name|getTokenKey
argument_list|()
argument_list|,
name|refreshToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|clientCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|refreshTokenCache
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|accessTokenCache
operator|!=
literal|null
condition|)
block|{
name|accessTokenCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jwtAccessTokenCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cacheManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
parameter_list|<
name|V
extends|extends
name|ServerAccessToken
parameter_list|>
name|V
name|getToken
parameter_list|(
name|Cache
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|V
name|token
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
name|isExpired
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|token
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
specifier|protected
name|ServerAccessToken
name|getJwtAccessToken
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|jose
init|=
name|jwtAccessTokenCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ServerAccessToken
name|token
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jose
operator|!=
literal|null
condition|)
block|{
name|JoseJwtConsumer
name|theConsumer
init|=
name|jwtTokenConsumer
operator|==
literal|null
condition|?
operator|new
name|JoseJwtConsumer
argument_list|()
else|:
name|jwtTokenConsumer
decl_stmt|;
name|token
operator|=
name|JwtTokenUtils
operator|.
name|createAccessTokenFromJwt
argument_list|(
name|theConsumer
argument_list|,
name|jose
argument_list|,
name|this
argument_list|,
name|super
operator|.
name|getJwtAccessTokenClaimMap
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExpired
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|jwtAccessTokenCache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|token
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|token
return|;
block|}
specifier|protected
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
extends|extends
name|ServerAccessToken
parameter_list|>
name|List
argument_list|<
name|V
argument_list|>
name|getTokens
parameter_list|(
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|,
name|Client
name|client
parameter_list|,
name|UserSubject
name|sub
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|K
argument_list|>
name|toRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|V
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Cache
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|it
init|=
name|cache
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Cache
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|V
name|token
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isExpired
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isTokenMatched
argument_list|(
name|token
argument_list|,
name|client
argument_list|,
name|sub
argument_list|)
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
name|cache
operator|.
name|removeAll
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
return|return
name|tokens
return|;
block|}
specifier|protected
name|List
argument_list|<
name|ServerAccessToken
argument_list|>
name|getJwtAccessTokens
parameter_list|(
name|Client
name|client
parameter_list|,
name|UserSubject
name|sub
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|toRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ServerAccessToken
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Cache
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|jwtAccessTokenCache
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Cache
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|jose
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|JoseJwtConsumer
name|theConsumer
init|=
name|jwtTokenConsumer
operator|==
literal|null
condition|?
operator|new
name|JoseJwtConsumer
argument_list|()
else|:
name|jwtTokenConsumer
decl_stmt|;
name|ServerAccessToken
name|token
init|=
name|JwtTokenUtils
operator|.
name|createAccessTokenFromJwt
argument_list|(
name|theConsumer
argument_list|,
name|jose
argument_list|,
name|this
argument_list|,
name|super
operator|.
name|getJwtAccessTokenClaimMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isExpired
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isTokenMatched
argument_list|(
name|token
argument_list|,
name|client
argument_list|,
name|sub
argument_list|)
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
name|jwtAccessTokenCache
operator|.
name|removeAll
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
return|return
name|tokens
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isExpired
parameter_list|(
name|ServerAccessToken
name|token
parameter_list|)
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
operator|(
name|token
operator|.
name|getIssuedAt
argument_list|()
operator|+
name|token
operator|.
name|getExpiresIn
argument_list|()
operator|)
return|;
block|}
specifier|protected
specifier|static
name|CacheManager
name|createCacheManager
parameter_list|(
name|String
name|configFile
parameter_list|,
name|Bus
name|bus
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|CachingProvider
name|provider
init|=
name|Caching
operator|.
name|getCachingProvider
argument_list|()
decl_stmt|;
name|URI
name|configFileURI
decl_stmt|;
try|try
block|{
name|configFileURI
operator|=
name|getClasspathResourceURL
argument_list|(
name|configFile
argument_list|,
name|JCacheOAuthDataProvider
operator|.
name|class
argument_list|,
name|bus
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|configFileURI
operator|=
name|provider
operator|.
name|getDefaultURI
argument_list|()
expr_stmt|;
block|}
return|return
name|provider
operator|.
name|getCacheManager
argument_list|(
name|configFileURI
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createCache
parameter_list|(
name|CacheManager
name|cacheManager
parameter_list|,
name|String
name|cacheKey
parameter_list|,
name|Class
argument_list|<
name|K
argument_list|>
name|keyType
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueType
parameter_list|)
block|{
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
init|=
name|cacheManager
operator|.
name|getCache
argument_list|(
name|cacheKey
argument_list|,
name|keyType
argument_list|,
name|valueType
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cache
operator|=
name|cacheManager
operator|.
name|createCache
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|MutableConfiguration
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
operator|.
name|setTypes
argument_list|(
name|keyType
argument_list|,
name|valueType
argument_list|)
operator|.
name|setStoreByValue
argument_list|(
literal|true
argument_list|)
operator|.
name|setStatisticsEnabled
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cache
return|;
block|}
specifier|public
name|boolean
name|isStoreJwtTokenKeyOnly
parameter_list|()
block|{
return|return
name|storeJwtTokenKeyOnly
return|;
block|}
specifier|public
name|void
name|setJwtTokenConsumer
parameter_list|(
name|JoseJwtConsumer
name|jwtTokenConsumer
parameter_list|)
block|{
name|this
operator|.
name|jwtTokenConsumer
operator|=
name|jwtTokenConsumer
expr_stmt|;
block|}
block|}
end_class

end_unit

