begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientWebApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|form
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|common
operator|.
name|AccessTokenGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|common
operator|.
name|AccessTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_comment
comment|/**  * The utility class for simplifying making OAuth request and access token  * requests as well as for creating Authorization OAuth headers  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OAuthClientUtils
block|{
specifier|private
name|OAuthClientUtils
parameter_list|()
block|{              }
comment|/**      * Returns URI of the authorization service with the query parameter containing       * the request token key       * @param authorizationServiceURI the service URI      * @param requestToken the request token key      * @return      */
specifier|public
specifier|static
name|URI
name|getAuthorizationURI
parameter_list|(
name|String
name|authorizationServiceURI
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|redirectUri
parameter_list|,
name|String
name|state
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|UriBuilder
name|ub
init|=
name|getAuthorizationURIBuilder
argument_list|(
name|authorizationServiceURI
argument_list|,
name|clientId
argument_list|,
name|scope
argument_list|)
decl_stmt|;
if|if
condition|(
name|redirectUri
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|queryParam
argument_list|(
literal|"redirect_uri"
argument_list|,
name|redirectUri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
name|ub
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|UriBuilder
name|getAuthorizationURIBuilder
parameter_list|(
name|String
name|authorizationServiceURI
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|UriBuilder
name|ub
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|authorizationServiceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|queryParam
argument_list|(
literal|"client_id"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|queryParam
argument_list|(
literal|"scope"
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
return|return
name|ub
return|;
block|}
specifier|public
specifier|static
name|ClientAccessToken
name|getAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|Consumer
name|consumer
parameter_list|,
name|AccessTokenGrant
name|grant
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
name|consumer
argument_list|,
name|grant
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClientAccessToken
name|getAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|Consumer
name|consumer
parameter_list|,
name|AccessTokenGrant
name|grant
parameter_list|,
name|boolean
name|setAuthorizationHeader
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Basic "
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|data
init|=
name|consumer
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|consumer
operator|.
name|getSecret
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Base64Utility
operator|.
name|encode
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ClientWebApplicationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|accessTokenService
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|(
name|grant
operator|.
name|toMap
argument_list|()
argument_list|)
decl_stmt|;
name|accessTokenService
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
return|return
name|accessTokenService
operator|.
name|post
argument_list|(
name|form
argument_list|,
name|ClientAccessToken
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Creates OAuth Authorization header      * @return the header value      */
specifier|public
specifier|static
name|String
name|createAuthorizationHeader
parameter_list|(
name|Consumer
name|consumer
parameter_list|,
name|ClientAccessToken
name|accessToken
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|appendTokenData
argument_list|(
name|sb
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|appendTokenData
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|ClientAccessToken
name|token
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
comment|// this should all be handled by token specific serializers
name|AccessTokenType
name|type
init|=
name|token
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|AccessTokenType
operator|.
name|BEARER
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Bearer"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|token
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// deal with MAC and other tokens
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Unsupported token type"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Simple consumer representation      */
specifier|public
specifier|static
class|class
name|Consumer
block|{
specifier|private
name|String
name|key
decl_stmt|;
specifier|private
name|String
name|secret
decl_stmt|;
specifier|public
name|Consumer
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|secret
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|secret
operator|=
name|secret
expr_stmt|;
block|}
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|String
name|getSecret
parameter_list|()
block|{
return|return
name|secret
return|;
block|}
block|}
block|}
end_class

end_unit

