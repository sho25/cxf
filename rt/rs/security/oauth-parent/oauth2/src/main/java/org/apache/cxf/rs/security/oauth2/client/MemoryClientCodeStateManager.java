begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|MessageDigestUtils
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryClientCodeStateManager
implements|implements
name|ClientCodeStateManager
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|generateNonce
decl_stmt|;
annotation|@
name|Override
specifier|public
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toRedirectState
parameter_list|(
name|MessageContext
name|mc
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestState
parameter_list|)
block|{
name|String
name|stateParam
init|=
name|OAuthUtils
operator|.
name|generateRandomTokenKey
argument_list|()
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|redirectMap
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|generateNonce
condition|)
block|{
name|String
name|nonceParam
init|=
name|MessageDigestUtils
operator|.
name|generate
argument_list|(
name|CryptoUtils
operator|.
name|generateSecureRandomBytes
argument_list|(
literal|16
argument_list|)
argument_list|)
decl_stmt|;
name|requestState
operator|.
name|putSingle
argument_list|(
name|OAuthConstants
operator|.
name|NONCE
argument_list|,
name|nonceParam
argument_list|)
expr_stmt|;
name|redirectMap
operator|.
name|putSingle
argument_list|(
name|OAuthConstants
operator|.
name|NONCE
argument_list|,
name|nonceParam
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|stateParam
argument_list|,
name|requestState
argument_list|)
expr_stmt|;
name|OAuthUtils
operator|.
name|setSessionToken
argument_list|(
name|mc
argument_list|,
name|stateParam
argument_list|,
literal|"state"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|redirectMap
operator|.
name|putSingle
argument_list|(
name|OAuthConstants
operator|.
name|STATE
argument_list|,
name|stateParam
argument_list|)
expr_stmt|;
return|return
name|redirectMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fromRedirectState
parameter_list|(
name|MessageContext
name|mc
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|redirectState
parameter_list|)
block|{
name|String
name|stateParam
init|=
name|redirectState
operator|.
name|getFirst
argument_list|(
name|OAuthConstants
operator|.
name|STATE
argument_list|)
decl_stmt|;
name|String
name|sessionToken
init|=
name|OAuthUtils
operator|.
name|getSessionToken
argument_list|(
name|mc
argument_list|,
literal|"state"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionToken
operator|==
literal|null
operator|||
operator|!
name|sessionToken
operator|.
name|equals
argument_list|(
name|stateParam
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Invalid session token"
argument_list|)
throw|;
block|}
return|return
name|map
operator|.
name|remove
argument_list|(
name|stateParam
argument_list|)
return|;
block|}
specifier|public
name|void
name|setGenerateNonce
parameter_list|(
name|boolean
name|generateNonce
parameter_list|)
block|{
name|this
operator|.
name|generateNonce
operator|=
name|generateNonce
expr_stmt|;
block|}
block|}
end_class

end_unit

