begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|HmacUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ALGO_HMAC_SHA_1
init|=
literal|"hmac-sha-1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALGO_HMAC_SHA_256
init|=
literal|"hmac-sha-256"
decl_stmt|;
specifier|private
name|HmacUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|String
name|computeSignature
parameter_list|(
name|String
name|macAlgoOAuthName
parameter_list|,
name|String
name|macSecret
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|HmacAlgorithm
name|theAlgo
init|=
name|HmacAlgorithm
operator|.
name|toHmacAlgorithm
argument_list|(
name|macAlgoOAuthName
argument_list|)
decl_stmt|;
return|return
name|computeHmacString
argument_list|(
name|macSecret
argument_list|,
name|theAlgo
operator|.
name|getJavaName
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**       * Computes HMAC value using the given parameters.       *        * @param macSecret       * @param macAlgorithm Should be one of HmacSHA1 or HmacSHA256       * @param data       * @return Base64 encoded string representation of the computed hmac value       */
specifier|public
specifier|static
name|String
name|computeHmacString
parameter_list|(
name|String
name|macSecret
parameter_list|,
name|String
name|macAlgoJavaName
parameter_list|,
name|String
name|data
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64Utility
operator|.
name|encode
argument_list|(
name|computeHmac
argument_list|(
name|macSecret
argument_list|,
name|macAlgoJavaName
argument_list|,
name|data
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Computes HMAC value using the given parameters.      *       * @param macKey      * @param macAlgorithm      * @param data      * @return Computed HMAC value.      */
specifier|public
specifier|static
name|byte
index|[]
name|computeHmac
parameter_list|(
name|String
name|key
parameter_list|,
name|HmacAlgorithm
name|algo
parameter_list|,
name|String
name|data
parameter_list|)
block|{
return|return
name|computeHmac
argument_list|(
name|key
argument_list|,
name|algo
operator|.
name|getJavaName
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**       * Computes HMAC value using the given parameters.       *        * @param macKey       * @param macAlgorithm       * @param data       * @return Computed HMAC value.       */
specifier|public
specifier|static
name|byte
index|[]
name|computeHmac
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|macAlgoJavaName
parameter_list|,
name|String
name|data
parameter_list|)
block|{
try|try
block|{
name|Mac
name|hmac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
name|macAlgoJavaName
argument_list|)
decl_stmt|;
name|SecretKeySpec
name|secretKey
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|key
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|macAlgoJavaName
argument_list|)
decl_stmt|;
name|hmac
operator|.
name|init
argument_list|(
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|hmac
operator|.
name|doFinal
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|INVALID_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|INVALID_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|INVALID_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|generateSecret
parameter_list|(
name|HmacAlgorithm
name|algo
parameter_list|)
block|{
try|try
block|{
name|KeyGenerator
name|keyGen
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|algo
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Base64Utility
operator|.
name|encode
argument_list|(
name|keyGen
operator|.
name|generateKey
argument_list|()
operator|.
name|getEncoded
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

