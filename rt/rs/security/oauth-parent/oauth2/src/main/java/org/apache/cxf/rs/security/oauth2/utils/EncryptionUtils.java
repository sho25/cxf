begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|UserSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|refresh
operator|.
name|RefreshToken
import|;
end_import

begin_comment
comment|/**  * Encryption helpers  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EncryptionUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SEP
init|=
literal|"|"
decl_stmt|;
specifier|private
name|EncryptionUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|String
name|getEncodedSecretKey
parameter_list|(
name|SecretKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|SecretKey
name|getSecretKey
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getSecretKey
argument_list|(
literal|"AES"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|getSecretKey
parameter_list|(
name|String
name|symEncAlgo
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyGenerator
name|keyGen
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|symEncAlgo
argument_list|)
decl_stmt|;
return|return
name|keyGen
operator|.
name|generateKey
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|getSecretKey
parameter_list|(
name|SecretKeyProperties
name|props
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyGenerator
name|keyGen
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|props
operator|.
name|getKeyAlgo
argument_list|()
argument_list|)
decl_stmt|;
name|AlgorithmParameterSpec
name|algoSpec
init|=
name|props
operator|.
name|getAlgoSpec
argument_list|()
decl_stmt|;
name|SecureRandom
name|random
init|=
name|props
operator|.
name|getSecureRandom
argument_list|()
decl_stmt|;
if|if
condition|(
name|algoSpec
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|random
operator|!=
literal|null
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
name|algoSpec
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyGen
operator|.
name|init
argument_list|(
name|algoSpec
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|random
operator|!=
literal|null
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
name|props
operator|.
name|getKeySize
argument_list|()
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyGen
operator|.
name|init
argument_list|(
name|props
operator|.
name|getKeySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keyGen
operator|.
name|generateKey
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptTokenWithSecretKey
parameter_list|(
name|ServerAccessToken
name|token
parameter_list|,
name|Key
name|secretKey
parameter_list|)
block|{
return|return
name|encryptTokenWithSecretKey
argument_list|(
name|token
argument_list|,
name|secretKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptTokenWithSecretKey
parameter_list|(
name|ServerAccessToken
name|token
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|SecretKeyProperties
name|props
parameter_list|)
block|{
name|String
name|tokenSequence
init|=
name|tokenizeServerToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
return|return
name|encryptSequence
argument_list|(
name|tokenSequence
argument_list|,
name|secretKey
argument_list|,
name|props
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptRefreshTokenWithSecretKey
parameter_list|(
name|RefreshToken
name|token
parameter_list|,
name|Key
name|secretKey
parameter_list|)
block|{
return|return
name|encryptRefreshTokenWithSecretKey
argument_list|(
name|token
argument_list|,
name|secretKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptRefreshTokenWithSecretKey
parameter_list|(
name|RefreshToken
name|token
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|SecretKeyProperties
name|props
parameter_list|)
block|{
name|String
name|tokenSequence
init|=
name|tokenizeRefreshToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
return|return
name|encryptSequence
argument_list|(
name|tokenSequence
argument_list|,
name|secretKey
argument_list|,
name|props
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|decryptTokenSequence
parameter_list|(
name|String
name|encodedToken
parameter_list|,
name|String
name|encodedSecretKey
parameter_list|)
block|{
return|return
name|decryptTokenSequence
argument_list|(
name|encodedToken
argument_list|,
name|encodedSecretKey
argument_list|,
literal|"AES"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|decryptTokenSequence
parameter_list|(
name|String
name|encodedData
parameter_list|,
name|String
name|encodedSecretKey
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
try|try
block|{
name|SecretKey
name|key
init|=
name|decodeSecretKey
argument_list|(
name|encodedSecretKey
argument_list|,
name|algo
argument_list|)
decl_stmt|;
return|return
name|decryptSequence
argument_list|(
name|encodedData
argument_list|,
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|decryptTokenSequence
parameter_list|(
name|String
name|encodedData
parameter_list|,
name|String
name|encodedSecretKey
parameter_list|,
name|SecretKeyProperties
name|props
parameter_list|)
block|{
try|try
block|{
name|SecretKey
name|key
init|=
name|decodeSecretKey
argument_list|(
name|encodedSecretKey
argument_list|,
name|props
operator|.
name|getKeyAlgo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|decryptSequence
argument_list|(
name|encodedData
argument_list|,
name|key
argument_list|,
name|props
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|decryptSequence
parameter_list|(
name|String
name|encodedData
parameter_list|,
name|Key
name|secretKey
parameter_list|)
block|{
return|return
name|decryptSequence
argument_list|(
name|encodedData
argument_list|,
name|secretKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|decryptSequence
parameter_list|(
name|String
name|encodedData
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|SecretKeyProperties
name|props
parameter_list|)
block|{
try|try
block|{
name|byte
index|[]
name|encryptedBytes
init|=
name|decodeSequence
argument_list|(
name|encodedData
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|processBytes
argument_list|(
name|encryptedBytes
argument_list|,
name|secretKey
argument_list|,
name|props
argument_list|,
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ServerAccessToken
name|decryptToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|encodedToken
parameter_list|,
name|String
name|encodedSecretKey
parameter_list|)
block|{
return|return
name|decryptToken
argument_list|(
name|provider
argument_list|,
name|encodedToken
argument_list|,
name|encodedSecretKey
argument_list|,
literal|"AES"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ServerAccessToken
name|decryptToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|encodedToken
parameter_list|,
name|String
name|encodedSecretKey
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
name|SecretKey
name|key
init|=
name|decodeSecretKey
argument_list|(
name|encodedSecretKey
argument_list|,
name|algo
argument_list|)
decl_stmt|;
return|return
name|decryptToken
argument_list|(
name|provider
argument_list|,
name|encodedToken
argument_list|,
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ServerAccessToken
name|decryptToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|encodedToken
parameter_list|,
name|String
name|encodedSecretKey
parameter_list|,
name|SecretKeyProperties
name|props
parameter_list|)
block|{
name|SecretKey
name|key
init|=
name|decodeSecretKey
argument_list|(
name|encodedSecretKey
argument_list|,
name|props
operator|.
name|getKeyAlgo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|decryptToken
argument_list|(
name|provider
argument_list|,
name|encodedToken
argument_list|,
name|key
argument_list|,
name|props
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ServerAccessToken
name|decryptToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|encodedToken
parameter_list|,
name|Key
name|secretKey
parameter_list|)
block|{
return|return
name|decryptToken
argument_list|(
name|provider
argument_list|,
name|encodedToken
argument_list|,
name|secretKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ServerAccessToken
name|decryptToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|encodedData
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|SecretKeyProperties
name|props
parameter_list|)
block|{
try|try
block|{
name|String
name|decryptedSequence
init|=
name|decryptSequence
argument_list|(
name|encodedData
argument_list|,
name|secretKey
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|recreateToken
argument_list|(
name|provider
argument_list|,
name|encodedData
argument_list|,
name|decryptedSequence
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RefreshToken
name|decryptRefreshToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|encodedToken
parameter_list|,
name|Key
name|key
parameter_list|)
block|{
return|return
name|decryptRefreshToken
argument_list|(
name|provider
argument_list|,
name|encodedToken
argument_list|,
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RefreshToken
name|decryptRefreshToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|encodedData
parameter_list|,
name|Key
name|key
parameter_list|,
name|SecretKeyProperties
name|props
parameter_list|)
block|{
try|try
block|{
name|String
name|decryptedSequence
init|=
name|decryptSequence
argument_list|(
name|encodedData
argument_list|,
name|key
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|recreateRefreshToken
argument_list|(
name|provider
argument_list|,
name|encodedData
argument_list|,
name|decryptedSequence
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|encryptSequence
parameter_list|(
name|String
name|sequence
parameter_list|,
name|Key
name|secretKey
parameter_list|)
block|{
return|return
name|encryptSequence
argument_list|(
name|sequence
argument_list|,
name|secretKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptSequence
parameter_list|(
name|String
name|sequence
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|SecretKeyProperties
name|keyProps
parameter_list|)
block|{
try|try
block|{
name|byte
index|[]
name|bytes
init|=
name|processBytes
argument_list|(
name|sequence
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|secretKey
argument_list|,
name|keyProps
argument_list|,
name|Cipher
operator|.
name|ENCRYPT_MODE
argument_list|)
decl_stmt|;
return|return
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|processBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|SecretKeyProperties
name|keyProps
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
try|try
block|{
name|Cipher
name|c
init|=
name|Cipher
operator|.
name|getInstance
argument_list|(
name|secretKey
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProps
operator|==
literal|null
operator|||
name|keyProps
operator|.
name|getAlgoSpec
argument_list|()
operator|==
literal|null
operator|&&
name|keyProps
operator|.
name|getSecureRandom
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|init
argument_list|(
name|mode
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AlgorithmParameterSpec
name|algoSpec
init|=
name|keyProps
operator|.
name|getAlgoSpec
argument_list|()
decl_stmt|;
name|SecureRandom
name|random
init|=
name|keyProps
operator|.
name|getSecureRandom
argument_list|()
decl_stmt|;
if|if
condition|(
name|algoSpec
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|init
argument_list|(
name|mode
argument_list|,
name|secretKey
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|init
argument_list|(
name|mode
argument_list|,
name|secretKey
argument_list|,
name|algoSpec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|init
argument_list|(
name|mode
argument_list|,
name|secretKey
argument_list|,
name|algoSpec
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
operator|.
name|doFinal
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|SecretKey
name|decodeSecretKey
parameter_list|(
name|String
name|encodedSecretKey
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
try|try
block|{
name|byte
index|[]
name|secretKeyBytes
init|=
name|decodeSequence
argument_list|(
name|encodedSecretKey
argument_list|)
decl_stmt|;
return|return
operator|new
name|SecretKeySpec
argument_list|(
name|secretKeyBytes
argument_list|,
name|algo
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|decodeSequence
parameter_list|(
name|String
name|encodedSecretKey
parameter_list|)
block|{
try|try
block|{
return|return
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|encodedSecretKey
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ServerAccessToken
name|recreateToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|newTokenKey
parameter_list|,
name|String
name|decryptedSequence
parameter_list|)
block|{
return|return
name|recreateToken
argument_list|(
name|provider
argument_list|,
name|newTokenKey
argument_list|,
name|decryptedSequence
operator|.
name|split
argument_list|(
literal|"\\"
operator|+
name|SEP
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RefreshToken
name|recreateRefreshToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|newTokenKey
parameter_list|,
name|String
name|decryptedSequence
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|decryptedSequence
operator|.
name|split
argument_list|(
literal|"\\"
operator|+
name|SEP
argument_list|)
decl_stmt|;
name|ServerAccessToken
name|token
init|=
name|recreateToken
argument_list|(
name|provider
argument_list|,
name|newTokenKey
argument_list|,
name|parts
argument_list|)
decl_stmt|;
return|return
operator|new
name|RefreshToken
argument_list|(
name|token
argument_list|,
name|newTokenKey
argument_list|,
name|parseSimpleList
argument_list|(
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ServerAccessToken
name|recreateToken
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|,
name|String
name|newTokenKey
parameter_list|,
name|String
index|[]
name|parts
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|final
name|ServerAccessToken
name|newToken
init|=
operator|new
name|ServerAccessToken
argument_list|(
name|provider
operator|.
name|getClient
argument_list|(
name|parts
index|[
literal|4
index|]
argument_list|)
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
name|newTokenKey
operator|==
literal|null
condition|?
name|parts
index|[
literal|0
index|]
else|:
name|newTokenKey
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|)
argument_list|)
block|{         }
decl_stmt|;
name|newToken
operator|.
name|setRefreshToken
argument_list|(
name|getStringPart
argument_list|(
name|parts
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|newToken
operator|.
name|setGrantType
argument_list|(
name|getStringPart
argument_list|(
name|parts
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|newToken
operator|.
name|setAudience
argument_list|(
name|getStringPart
argument_list|(
name|parts
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|newToken
operator|.
name|setParameters
argument_list|(
name|parseSimpleMap
argument_list|(
name|parts
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Permissions
if|if
condition|(
operator|!
name|parts
index|[
literal|9
index|]
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|perms
init|=
operator|new
name|LinkedList
argument_list|<
name|OAuthPermission
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|allPermParts
init|=
name|parts
index|[
literal|9
index|]
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|4
operator|<
name|allPermParts
operator|.
name|length
condition|;
name|i
operator|=
name|i
operator|+
literal|5
control|)
block|{
name|OAuthPermission
name|perm
init|=
operator|new
name|OAuthPermission
argument_list|(
name|allPermParts
index|[
name|i
index|]
argument_list|,
name|allPermParts
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|perm
operator|.
name|setDefault
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|allPermParts
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setHttpVerbs
argument_list|(
name|parseSimpleList
argument_list|(
name|allPermParts
index|[
name|i
operator|+
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setUris
argument_list|(
name|parseSimpleList
argument_list|(
name|allPermParts
index|[
name|i
operator|+
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|perm
argument_list|)
expr_stmt|;
block|}
name|newToken
operator|.
name|setScopes
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
comment|//UserSubject:
if|if
condition|(
operator|!
name|parts
index|[
literal|10
index|]
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|subjectParts
init|=
name|parts
index|[
literal|10
index|]
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|UserSubject
name|subject
init|=
operator|new
name|UserSubject
argument_list|(
name|subjectParts
index|[
literal|0
index|]
argument_list|,
name|getStringPart
argument_list|(
name|subjectParts
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|subject
operator|.
name|setRoles
argument_list|(
name|parseSimpleList
argument_list|(
name|subjectParts
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|subject
operator|.
name|setProperties
argument_list|(
name|parseSimpleMap
argument_list|(
name|subjectParts
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|newToken
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
return|return
name|newToken
return|;
block|}
specifier|private
specifier|static
name|String
name|getStringPart
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
literal|"null"
operator|.
name|equals
argument_list|(
name|str
argument_list|)
condition|?
literal|null
else|:
name|str
return|;
block|}
specifier|private
specifier|static
name|String
name|prepareSimpleString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|str
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseSimpleList
parameter_list|(
name|String
name|listStr
parameter_list|)
block|{
name|String
name|pureStringList
init|=
name|prepareSimpleString
argument_list|(
name|listStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|pureStringList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|pureStringList
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseSimpleMap
parameter_list|(
name|String
name|mapStr
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|parseSimpleList
argument_list|(
name|mapStr
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|String
index|[]
name|pair
init|=
name|entry
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
specifier|private
specifier|static
name|String
name|tokenizeRefreshToken
parameter_list|(
name|RefreshToken
name|token
parameter_list|)
block|{
name|String
name|seq
init|=
name|tokenizeServerToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
return|return
name|seq
operator|+
name|SEP
operator|+
name|token
operator|.
name|getAccessTokens
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|tokenizeServerToken
parameter_list|(
name|ServerAccessToken
name|token
parameter_list|)
block|{
name|StringBuilder
name|state
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// 0: key
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1: type
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2: expiresIn
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getExpiresIn
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3: issuedAt
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getIssuedAt
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4: client id
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getClient
argument_list|()
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5: refresh token
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getRefreshToken
argument_list|()
argument_list|)
expr_stmt|;
comment|// 6: grant type
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getGrantType
argument_list|()
argument_list|)
expr_stmt|;
comment|// 7: audience
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getAudience
argument_list|()
argument_list|)
expr_stmt|;
comment|// 8: other parameters
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
comment|// {key=value, key=value}
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getParameters
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// 9: permissions
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getScopes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|state
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|OAuthPermission
name|p
range|:
name|token
operator|.
name|getScopes
argument_list|()
control|)
block|{
comment|// 9.1
name|state
operator|.
name|append
argument_list|(
name|p
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
comment|// 9.2
name|state
operator|.
name|append
argument_list|(
name|p
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
comment|// 9.3
name|state
operator|.
name|append
argument_list|(
name|p
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
comment|// 9.4
name|state
operator|.
name|append
argument_list|(
name|p
operator|.
name|getHttpVerbs
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
comment|// 9.5
name|state
operator|.
name|append
argument_list|(
name|p
operator|.
name|getUris
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 10: user subject
name|state
operator|.
name|append
argument_list|(
name|SEP
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// 10.1
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getSubject
argument_list|()
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
comment|// 10.2
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
comment|// 10.3
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getSubject
argument_list|()
operator|.
name|getRoles
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
comment|// 10.4
name|state
operator|.
name|append
argument_list|(
name|token
operator|.
name|getSubject
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|state
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

