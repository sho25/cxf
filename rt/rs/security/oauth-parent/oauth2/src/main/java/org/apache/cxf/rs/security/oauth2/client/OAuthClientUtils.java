begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ResponseProcessingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|basic
operator|.
name|JsonMapObjectReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AccessTokenGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|refresh
operator|.
name|RefreshTokenGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthJSONProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|services
operator|.
name|AuthorizationMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|hawk
operator|.
name|HawkAuthorizationScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|auth
operator|.
name|DefaultBasicAuthSupplier
import|;
end_import

begin_comment
comment|/**  * The utility class for simplifying working with OAuth servers  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OAuthClientUtils
block|{
specifier|private
name|OAuthClientUtils
parameter_list|()
block|{      }
comment|/**      * Builds a complete URI for redirecting to OAuth Authorization Service      * @param authorizationServiceURI the service endpoint address      * @param clientId client registration id      * @param redirectUri the uri the authorization code will be posted to      * @param state the client state, example the key or the encrypted token      *              representing the info about the current end user's request      * @scope scope the optional scope; if not specified then the authorization      *              service will allocate the default scope      * @return authorization service URI      */
specifier|public
specifier|static
name|URI
name|getAuthorizationURI
parameter_list|(
name|String
name|authorizationServiceURI
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|redirectUri
parameter_list|,
name|String
name|state
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|UriBuilder
name|ub
init|=
name|getAuthorizationURIBuilder
argument_list|(
name|authorizationServiceURI
argument_list|,
name|clientId
argument_list|,
name|redirectUri
argument_list|,
name|state
argument_list|,
name|scope
argument_list|)
decl_stmt|;
return|return
name|ub
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|UriBuilder
name|getAuthorizationURIBuilder
parameter_list|(
name|String
name|authorizationServiceURI
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|redirectUri
parameter_list|,
name|String
name|state
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|UriBuilder
name|ub
init|=
name|getAuthorizationURIBuilder
argument_list|(
name|authorizationServiceURI
argument_list|,
name|clientId
argument_list|,
name|scope
argument_list|)
decl_stmt|;
if|if
condition|(
name|redirectUri
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|queryParam
argument_list|(
name|OAuthConstants
operator|.
name|REDIRECT_URI
argument_list|,
name|redirectUri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|queryParam
argument_list|(
name|OAuthConstants
operator|.
name|STATE
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
name|ub
return|;
block|}
comment|/**      * Creates the builder for building OAuth AuthorizationService URIs      * @param authorizationServiceURI the service endpoint address      * @param clientId client registration id      * @param scope the optional scope; if not specified then the authorization      *              service will allocate the default scope      * @return the builder      */
specifier|public
specifier|static
name|UriBuilder
name|getAuthorizationURIBuilder
parameter_list|(
name|String
name|authorizationServiceURI
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|UriBuilder
name|ub
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|authorizationServiceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|queryParam
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_ID
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|ub
operator|.
name|queryParam
argument_list|(
name|OAuthConstants
operator|.
name|SCOPE
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
name|ub
operator|.
name|queryParam
argument_list|(
name|OAuthConstants
operator|.
name|RESPONSE_TYPE
argument_list|,
name|OAuthConstants
operator|.
name|CODE_RESPONSE_TYPE
argument_list|)
expr_stmt|;
return|return
name|ub
return|;
block|}
comment|/**      * Obtains the access token from OAuth AccessToken Service      * using the initialized web client      * @param accessTokenService the AccessToken client      * @param consumer {@link Consumer} representing the registered client      * @param grant {@link AccessTokenGrant} grant      * @return {@link ClientAccessToken} access token      * @throws OAuthServiceException      */
specifier|public
specifier|static
name|ClientAccessToken
name|getAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|Consumer
name|consumer
parameter_list|,
name|AccessTokenGrant
name|grant
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
name|consumer
argument_list|,
name|grant
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Obtains the access token from OAuth AccessToken Service      * @param accessTokenServiceUri the AccessToken endpoint address      * @param consumer {@link Consumer} representing the registered client      * @param grant {@link AccessTokenGrant} grant      * @param setAuthorizationHeader if set to true then HTTP Basic scheme      *           will be used to pass client id and secret, otherwise they will      *           be passed in the form payload      * @return {@link ClientAccessToken} access token      * @throws OAuthServiceException      */
specifier|public
specifier|static
name|ClientAccessToken
name|getAccessToken
parameter_list|(
name|String
name|accessTokenServiceUri
parameter_list|,
name|Consumer
name|consumer
parameter_list|,
name|AccessTokenGrant
name|grant
parameter_list|,
name|boolean
name|setAuthorizationHeader
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|OAuthJSONProvider
name|provider
init|=
operator|new
name|OAuthJSONProvider
argument_list|()
decl_stmt|;
name|WebClient
name|accessTokenService
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|accessTokenServiceUri
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|provider
argument_list|)
argument_list|)
decl_stmt|;
name|accessTokenService
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
return|return
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
name|consumer
argument_list|,
name|grant
argument_list|,
name|setAuthorizationHeader
argument_list|)
return|;
block|}
comment|/**      * Obtains the access token from OAuth AccessToken Service      * using the initialized web client      * @param accessTokenService the AccessToken client      * @param consumer {@link Consumer} representing the registered client.      * @param grant {@link AccessTokenGrant} grant      * @param setAuthorizationHeader if set to true then HTTP Basic scheme      *           will be used to pass client id and secret, otherwise they will      *           be passed in the form payload      * @return {@link ClientAccessToken} access token      * @throws OAuthServiceException      */
specifier|public
specifier|static
name|ClientAccessToken
name|getAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|Consumer
name|consumer
parameter_list|,
name|AccessTokenGrant
name|grant
parameter_list|,
name|boolean
name|setAuthorizationHeader
parameter_list|)
block|{
return|return
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
name|consumer
argument_list|,
name|grant
argument_list|,
literal|null
argument_list|,
name|setAuthorizationHeader
argument_list|)
return|;
block|}
comment|/**      * Obtains the access token from OAuth AccessToken Service      * using the initialized web client      * @param accessTokenService the AccessToken client      * @param grant {@link AccessTokenGrant} grant      * @return {@link ClientAccessToken} access token      * @throws OAuthServiceException      */
specifier|public
specifier|static
name|ClientAccessToken
name|getAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|AccessTokenGrant
name|grant
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
literal|null
argument_list|,
name|grant
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Obtains the access token from OAuth AccessToken Service      * using the initialized web client      * @param accessTokenService the AccessToken client      * @param grant {@link AccessTokenGrant} grant      * @param extraParams extra parameters      * @return {@link ClientAccessToken} access token      * @throws OAuthServiceException      */
specifier|public
specifier|static
name|ClientAccessToken
name|getAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|AccessTokenGrant
name|grant
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
literal|null
argument_list|,
name|grant
argument_list|,
name|extraParams
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Obtains the access token from OAuth AccessToken Service      * using the initialized web client      * @param accessTokenService the AccessToken client      * @param consumer {@link Consumer} representing the registered client.      * @param grant {@link AccessTokenGrant} grant      * @param extraParams extra parameters      * @param setAuthorizationHeader if set to true then HTTP Basic scheme      *           will be used to pass client id and secret, otherwise they will      *           be passed in the form payload      * @return {@link ClientAccessToken} access token      * @throws OAuthServiceException      */
specifier|public
specifier|static
name|ClientAccessToken
name|getAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|Consumer
name|consumer
parameter_list|,
name|AccessTokenGrant
name|grant
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
parameter_list|,
name|boolean
name|setAuthorizationHeader
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
name|consumer
argument_list|,
name|grant
argument_list|,
name|extraParams
argument_list|,
literal|null
argument_list|,
name|setAuthorizationHeader
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClientAccessToken
name|refreshAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|ClientAccessToken
name|at
parameter_list|)
block|{
return|return
name|refreshAccessToken
argument_list|(
name|accessTokenService
argument_list|,
literal|null
argument_list|,
name|at
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClientAccessToken
name|refreshAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|Consumer
name|consumer
parameter_list|,
name|ClientAccessToken
name|at
parameter_list|)
block|{
return|return
name|refreshAccessToken
argument_list|(
name|accessTokenService
argument_list|,
name|consumer
argument_list|,
name|at
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClientAccessToken
name|refreshAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|Consumer
name|consumer
parameter_list|,
name|ClientAccessToken
name|at
parameter_list|,
name|String
name|scope
parameter_list|,
name|boolean
name|setAuthorizationHeader
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|RefreshTokenGrant
name|grant
init|=
operator|new
name|RefreshTokenGrant
argument_list|(
name|at
operator|.
name|getRefreshToken
argument_list|()
argument_list|,
name|scope
argument_list|)
decl_stmt|;
return|return
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
name|consumer
argument_list|,
name|grant
argument_list|,
literal|null
argument_list|,
name|at
operator|.
name|getTokenType
argument_list|()
argument_list|,
name|setAuthorizationHeader
argument_list|)
return|;
block|}
comment|/**      * Obtains the access token from OAuth AccessToken Service      * using the initialized web client      * @param accessTokenService the AccessToken client      * @param consumer {@link Consumer} representing the registered client.      * @param grant {@link AccessTokenGrant} grant      * @param extraParams extra parameters      * @param defaultTokenType default expected token type - some early      *        well-known OAuth2 services do not return a required token_type parameter      * @param setAuthorizationHeader if set to true then HTTP Basic scheme      *           will be used to pass client id and secret, otherwise they will      *           be passed in the form payload      * @return {@link ClientAccessToken} access token      * @throws OAuthServiceException      */
specifier|public
specifier|static
name|ClientAccessToken
name|getAccessToken
parameter_list|(
name|WebClient
name|accessTokenService
parameter_list|,
name|Consumer
name|consumer
parameter_list|,
name|AccessTokenGrant
name|grant
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
parameter_list|,
name|String
name|defaultTokenType
parameter_list|,
name|boolean
name|setAuthorizationHeader
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
if|if
condition|(
name|accessTokenService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|SERVER_ERROR
argument_list|)
throw|;
block|}
name|Form
name|form
init|=
operator|new
name|Form
argument_list|(
name|grant
operator|.
name|toMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|extraParams
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|extraParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|form
operator|.
name|param
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
name|boolean
name|secretAvailable
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|consumer
operator|.
name|getClientSecret
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|setAuthorizationHeader
operator|&&
name|secretAvailable
condition|)
block|{
name|accessTokenService
operator|.
name|replaceHeader
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
name|DefaultBasicAuthSupplier
operator|.
name|getBasicAuthHeader
argument_list|(
name|consumer
operator|.
name|getClientId
argument_list|()
argument_list|,
name|consumer
operator|.
name|getClientSecret
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|form
operator|.
name|param
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_ID
argument_list|,
name|consumer
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|secretAvailable
condition|)
block|{
name|form
operator|.
name|param
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_SECRET
argument_list|,
name|consumer
operator|.
name|getClientSecret
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// in this case the AccessToken service is expected to find a mapping between
comment|// the authenticated credentials and the client registration id
block|}
name|Response
name|response
init|=
name|accessTokenService
operator|.
name|form
argument_list|(
name|form
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
try|try
block|{
name|map
operator|=
name|response
operator|.
name|getMediaType
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getMediaType
argument_list|()
operator|.
name|isCompatible
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
condition|?
operator|new
name|OAuthJSONProvider
argument_list|()
operator|.
name|readJSONResponse
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
else|:
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ResponseProcessingException
argument_list|(
name|response
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
literal|200
operator|==
name|response
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|ClientAccessToken
name|token
init|=
name|fromMapToClientToken
argument_list|(
name|map
argument_list|,
name|defaultTokenType
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|SERVER_ERROR
argument_list|)
throw|;
block|}
return|return
name|token
return|;
block|}
elseif|else
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|>=
literal|400
operator|&&
name|map
operator|.
name|containsKey
argument_list|(
name|OAuthConstants
operator|.
name|ERROR_KEY
argument_list|)
condition|)
block|{
name|OAuthError
name|error
init|=
operator|new
name|OAuthError
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|ERROR_KEY
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|ERROR_DESCRIPTION_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|error
operator|.
name|setErrorUri
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|ERROR_URI_KEY
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|error
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|SERVER_ERROR
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|ClientAccessToken
name|fromMapToClientToken
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|fromMapToClientToken
argument_list|(
name|map
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClientAccessToken
name|fromMapToClientToken
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|String
name|defaultTokenType
parameter_list|)
block|{
specifier|final
name|String
name|tokenKey
init|=
name|map
operator|.
name|remove
argument_list|(
name|OAuthConstants
operator|.
name|ACCESS_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenKey
operator|!=
literal|null
condition|)
block|{
name|String
name|tokenType
init|=
name|map
operator|.
name|remove
argument_list|(
name|OAuthConstants
operator|.
name|ACCESS_TOKEN_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
literal|null
condition|)
block|{
name|tokenType
operator|=
name|defaultTokenType
expr_stmt|;
block|}
if|if
condition|(
name|tokenType
operator|!=
literal|null
condition|)
block|{
name|ClientAccessToken
name|token
init|=
operator|new
name|ClientAccessToken
argument_list|(
name|tokenType
argument_list|,
name|tokenKey
argument_list|)
decl_stmt|;
name|String
name|refreshToken
init|=
name|map
operator|.
name|remove
argument_list|(
name|OAuthConstants
operator|.
name|REFRESH_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|refreshToken
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setRefreshToken
argument_list|(
name|refreshToken
argument_list|)
expr_stmt|;
block|}
name|String
name|expiresInStr
init|=
name|map
operator|.
name|remove
argument_list|(
name|OAuthConstants
operator|.
name|ACCESS_TOKEN_EXPIRES_IN
argument_list|)
decl_stmt|;
if|if
condition|(
name|expiresInStr
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setExpiresIn
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|expiresInStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|issuedAtStr
init|=
name|map
operator|.
name|remove
argument_list|(
name|OAuthConstants
operator|.
name|ACCESS_TOKEN_ISSUED_AT
argument_list|)
decl_stmt|;
name|token
operator|.
name|setIssuedAt
argument_list|(
name|issuedAtStr
operator|!=
literal|null
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|issuedAtStr
argument_list|)
else|:
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|String
name|scope
init|=
name|map
operator|.
name|remove
argument_list|(
name|OAuthConstants
operator|.
name|SCOPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setApprovedScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
name|token
operator|.
name|setParameters
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Creates OAuth Authorization header with Bearer scheme      * @param accessToken the access token      * @return the header value      */
specifier|public
specifier|static
name|String
name|createAuthorizationHeader
parameter_list|(
name|ClientAccessToken
name|accessToken
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|createAuthorizationHeader
argument_list|(
name|accessToken
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates OAuth Authorization header with the scheme that      * may require an access to the current HTTP request properties      * @param accessToken the access token      * @param httpProps http request properties, can be null for Bearer tokens      * @return the header value      */
specifier|public
specifier|static
name|String
name|createAuthorizationHeader
parameter_list|(
name|ClientAccessToken
name|accessToken
parameter_list|,
name|HttpRequestProperties
name|httpProps
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|appendTokenData
argument_list|(
name|sb
argument_list|,
name|accessToken
argument_list|,
name|httpProps
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|setAuthorizationHeader
parameter_list|(
name|WebClient
name|wc
parameter_list|,
name|ClientAccessToken
name|accessToken
parameter_list|)
block|{
name|setAuthorizationHeader
argument_list|(
name|wc
argument_list|,
name|accessToken
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setAuthorizationHeader
parameter_list|(
name|WebClient
name|wc
parameter_list|,
name|ClientAccessToken
name|accessToken
parameter_list|,
name|String
name|httpVerb
parameter_list|)
block|{
name|wc
operator|.
name|replaceHeader
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
name|createAuthorizationHeader
argument_list|(
name|accessToken
argument_list|,
operator|new
name|HttpRequestProperties
argument_list|(
name|wc
argument_list|,
name|httpVerb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|AuthorizationMetadata
name|getAuthorizationMetadata
parameter_list|(
name|String
name|issuerURL
parameter_list|)
block|{
name|Response
name|response
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|issuerURL
argument_list|)
operator|.
name|path
argument_list|(
literal|"/.well-known/oauth-authorization-server"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|response
operator|.
name|getStatus
argument_list|()
condition|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toWebApplicationException
argument_list|(
name|response
argument_list|)
throw|;
block|}
return|return
operator|new
name|AuthorizationMetadata
argument_list|(
operator|new
name|JsonMapObjectReaderWriter
argument_list|()
operator|.
name|fromJson
argument_list|(
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|appendTokenData
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|ClientAccessToken
name|token
parameter_list|,
name|HttpRequestProperties
name|httpProps
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
comment|// this should all be handled by token specific serializers
name|String
name|tokenType
init|=
name|token
operator|.
name|getTokenType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|OAuthConstants
operator|.
name|BEARER_TOKEN_TYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|OAuthConstants
operator|.
name|BEARER_AUTHORIZATION_SCHEME
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|token
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OAuthConstants
operator|.
name|HAWK_TOKEN_TYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
if|if
condition|(
name|httpProps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"MAC scheme requires HTTP Request properties"
argument_list|)
throw|;
block|}
name|HawkAuthorizationScheme
name|macAuthData
init|=
operator|new
name|HawkAuthorizationScheme
argument_list|(
name|httpProps
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|String
name|macAlgo
init|=
name|token
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|HAWK_TOKEN_ALGORITHM
argument_list|)
decl_stmt|;
name|String
name|macKey
init|=
name|token
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|HAWK_TOKEN_KEY
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|macAuthData
operator|.
name|toAuthorizationHeader
argument_list|(
name|macAlgo
argument_list|,
name|macKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ProcessingException
argument_list|(
operator|new
name|OAuthServiceException
argument_list|(
literal|"Unsupported token type"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

