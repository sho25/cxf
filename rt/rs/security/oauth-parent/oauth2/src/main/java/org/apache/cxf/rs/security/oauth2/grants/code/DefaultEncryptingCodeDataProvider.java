begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|code
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|UserSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|DefaultEncryptingOAuthDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|crypto
operator|.
name|ModelEncryptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|KeyProperties
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultEncryptingCodeDataProvider
extends|extends
name|DefaultEncryptingOAuthDataProvider
implements|implements
name|AuthorizationCodeDataProvider
block|{
specifier|private
name|long
name|grantLifetime
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|grants
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|DefaultEncryptingCodeDataProvider
parameter_list|(
name|String
name|algo
parameter_list|,
name|int
name|keySize
parameter_list|)
block|{
name|super
argument_list|(
name|algo
argument_list|,
name|keySize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultEncryptingCodeDataProvider
parameter_list|(
name|KeyProperties
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultEncryptingCodeDataProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Client
name|removeClient
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|Client
name|c
init|=
name|super
operator|.
name|removeClient
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
name|removeClientCodeGrants
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|protected
name|void
name|removeClientCodeGrants
parameter_list|(
name|Client
name|c
parameter_list|)
block|{
for|for
control|(
name|ServerAuthorizationCodeGrant
name|grant
range|:
name|getCodeGrants
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
control|)
block|{
name|removeCodeGrant
argument_list|(
name|grant
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ServerAuthorizationCodeGrant
name|createCodeGrant
parameter_list|(
name|AuthorizationCodeRegistration
name|reg
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|ServerAuthorizationCodeGrant
name|grant
init|=
name|doCreateCodeGrant
argument_list|(
name|reg
argument_list|)
decl_stmt|;
name|saveAuthorizationGrant
argument_list|(
name|grant
argument_list|)
expr_stmt|;
return|return
name|grant
return|;
block|}
specifier|public
name|List
argument_list|<
name|ServerAuthorizationCodeGrant
argument_list|>
name|getCodeGrants
parameter_list|(
name|Client
name|c
parameter_list|,
name|UserSubject
name|sub
parameter_list|)
block|{
name|List
argument_list|<
name|ServerAuthorizationCodeGrant
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerAuthorizationCodeGrant
argument_list|>
argument_list|(
name|grants
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|grants
control|)
block|{
name|ServerAuthorizationCodeGrant
name|grant
init|=
name|getCodeGrant
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
operator|||
name|grant
operator|.
name|getClient
argument_list|()
operator|.
name|getClientId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getClientId
argument_list|()
argument_list|)
condition|)
block|{
name|UserSubject
name|grantSub
init|=
name|grant
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sub
operator|==
literal|null
operator|||
name|grantSub
operator|!=
literal|null
operator|&&
name|grantSub
operator|.
name|getLogin
argument_list|()
operator|.
name|equals
argument_list|(
name|sub
operator|.
name|getLogin
argument_list|()
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|grant
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerAuthorizationCodeGrant
name|removeCodeGrant
parameter_list|(
name|String
name|code
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|grants
operator|.
name|remove
argument_list|(
name|code
argument_list|)
expr_stmt|;
return|return
name|ModelEncryptionSupport
operator|.
name|decryptCodeGrant
argument_list|(
name|this
argument_list|,
name|code
argument_list|,
name|key
argument_list|)
return|;
block|}
specifier|public
name|ServerAuthorizationCodeGrant
name|getCodeGrant
parameter_list|(
name|String
name|code
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|ServerAuthorizationCodeGrant
name|grant
init|=
name|ModelEncryptionSupport
operator|.
name|decryptCodeGrant
argument_list|(
name|this
argument_list|,
name|code
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|grant
operator|!=
literal|null
condition|)
block|{
name|grants
operator|.
name|remove
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
return|return
name|grant
return|;
block|}
specifier|protected
name|ServerAuthorizationCodeGrant
name|doCreateCodeGrant
parameter_list|(
name|AuthorizationCodeRegistration
name|reg
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|AbstractCodeDataProvider
operator|.
name|initCodeGrant
argument_list|(
name|reg
argument_list|,
name|grantLifetime
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getApprovedScopes
parameter_list|(
name|AuthorizationCodeRegistration
name|reg
parameter_list|)
block|{
return|return
name|reg
operator|.
name|getApprovedScope
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getCode
parameter_list|(
name|AuthorizationCodeRegistration
name|reg
parameter_list|)
block|{
return|return
name|OAuthUtils
operator|.
name|generateRandomTokenKey
argument_list|()
return|;
block|}
specifier|public
name|long
name|getGrantLifetime
parameter_list|()
block|{
return|return
name|grantLifetime
return|;
block|}
specifier|public
name|void
name|setGrantLifetime
parameter_list|(
name|long
name|lifetime
parameter_list|)
block|{
name|this
operator|.
name|grantLifetime
operator|=
name|lifetime
expr_stmt|;
block|}
specifier|protected
name|long
name|getIssuedAt
parameter_list|()
block|{
return|return
name|OAuthUtils
operator|.
name|getIssuedAt
argument_list|()
return|;
block|}
specifier|protected
name|void
name|saveAuthorizationGrant
parameter_list|(
name|ServerAuthorizationCodeGrant
name|grant
parameter_list|)
block|{
name|String
name|encrypted
init|=
name|ModelEncryptionSupport
operator|.
name|encryptCodeGrant
argument_list|(
name|grant
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|grant
operator|.
name|setCode
argument_list|(
name|encrypted
argument_list|)
expr_stmt|;
name|grants
operator|.
name|add
argument_list|(
name|encrypted
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

