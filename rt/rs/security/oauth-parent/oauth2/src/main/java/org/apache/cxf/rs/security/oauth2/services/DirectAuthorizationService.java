begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AccessTokenRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|UserSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|SubjectCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/authorize-direct"
argument_list|)
specifier|public
class|class
name|DirectAuthorizationService
extends|extends
name|AbstractOAuthService
block|{
specifier|private
name|SubjectCreator
name|subjectCreator
decl_stmt|;
specifier|private
name|boolean
name|partialMatchScopeValidation
decl_stmt|;
specifier|private
name|boolean
name|useAllClientScopes
decl_stmt|;
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/html"
argument_list|)
specifier|public
name|Response
name|authorize
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|SecurityContext
name|sc
init|=
name|getAndValidateSecurityContext
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|getClient
argument_list|(
name|params
argument_list|)
decl_stmt|;
comment|// Create a UserSubject representing the end user
name|UserSubject
name|userSubject
init|=
name|createUserSubject
argument_list|(
name|sc
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|AccessTokenRegistration
name|reg
init|=
operator|new
name|AccessTokenRegistration
argument_list|()
decl_stmt|;
name|reg
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setGrantType
argument_list|(
name|OAuthConstants
operator|.
name|DIRECT_TOKEN_GRANT
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setSubject
argument_list|(
name|userSubject
argument_list|)
expr_stmt|;
name|String
name|providedScope
init|=
name|params
operator|.
name|getFirst
argument_list|(
name|OAuthConstants
operator|.
name|SCOPE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|requestedScope
init|=
name|OAuthUtils
operator|.
name|getRequestedScopes
argument_list|(
name|client
argument_list|,
name|providedScope
argument_list|,
name|useAllClientScopes
argument_list|,
name|partialMatchScopeValidation
argument_list|)
decl_stmt|;
name|reg
operator|.
name|setRequestedScope
argument_list|(
name|requestedScope
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setApprovedScope
argument_list|(
name|requestedScope
argument_list|)
expr_stmt|;
name|ServerAccessToken
name|token
init|=
name|getDataProvider
argument_list|()
operator|.
name|createAccessToken
argument_list|(
name|reg
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|clientToken
init|=
name|OAuthUtils
operator|.
name|toClientAccessToken
argument_list|(
name|token
argument_list|,
name|isWriteOptionalParameters
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|clientToken
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|SecurityContext
name|getAndValidateSecurityContext
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|SecurityContext
name|securityContext
init|=
operator|(
name|SecurityContext
operator|)
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|securityContext
operator|==
literal|null
operator|||
name|securityContext
operator|.
name|getUserPrincipal
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionUtils
operator|.
name|toNotAuthorizedException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|checkTransportSecurity
argument_list|()
expr_stmt|;
return|return
name|securityContext
return|;
block|}
specifier|protected
name|UserSubject
name|createUserSubject
parameter_list|(
name|SecurityContext
name|securityContext
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|UserSubject
name|subject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subjectCreator
operator|!=
literal|null
condition|)
block|{
name|subject
operator|=
name|subjectCreator
operator|.
name|createUserSubject
argument_list|(
name|getMessageContext
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
return|return
name|subject
return|;
block|}
block|}
name|subject
operator|=
name|getMessageContext
argument_list|()
operator|.
name|getContent
argument_list|(
name|UserSubject
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
return|return
name|subject
return|;
block|}
else|else
block|{
return|return
name|OAuthUtils
operator|.
name|createSubject
argument_list|(
name|securityContext
argument_list|)
return|;
block|}
block|}
specifier|public
name|SubjectCreator
name|getSubjectCreator
parameter_list|()
block|{
return|return
name|subjectCreator
return|;
block|}
specifier|public
name|void
name|setSubjectCreator
parameter_list|(
name|SubjectCreator
name|subjectCreator
parameter_list|)
block|{
name|this
operator|.
name|subjectCreator
operator|=
name|subjectCreator
expr_stmt|;
block|}
specifier|protected
name|Client
name|getClient
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
return|return
name|getClient
argument_list|(
name|params
operator|.
name|getFirst
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_ID
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|Client
name|getClient
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|Client
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
name|client
operator|=
name|getValidClient
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|reportInvalidRequestError
argument_list|(
name|ex
operator|.
name|getError
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|reportInvalidRequestError
argument_list|(
literal|"Client ID is invalid"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
specifier|public
name|boolean
name|isPartialMatchScopeValidation
parameter_list|()
block|{
return|return
name|partialMatchScopeValidation
return|;
block|}
specifier|public
name|void
name|setPartialMatchScopeValidation
parameter_list|(
name|boolean
name|partialMatchScopeValidation
parameter_list|)
block|{
name|this
operator|.
name|partialMatchScopeValidation
operator|=
name|partialMatchScopeValidation
expr_stmt|;
block|}
specifier|public
name|void
name|setUseAllClientScopes
parameter_list|(
name|boolean
name|useAllClientScopes
parameter_list|)
block|{
name|this
operator|.
name|useAllClientScopes
operator|=
name|useAllClientScopes
expr_stmt|;
block|}
block|}
end_class

end_unit

