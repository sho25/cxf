begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtClaims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AccessTokenRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|UserSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|bearer
operator|.
name|BearerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|refresh
operator|.
name|RefreshToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|JwtTokenUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOAuthDataProvider
implements|implements
name|OAuthDataProvider
implements|,
name|ClientRegistrationProvider
block|{
specifier|private
name|long
name|accessTokenLifetime
init|=
literal|3600L
decl_stmt|;
specifier|private
name|long
name|refreshTokenLifetime
decl_stmt|;
comment|// refresh tokens are eternal by default
specifier|private
name|boolean
name|recycleRefreshTokens
init|=
literal|true
decl_stmt|;
specifier|private
name|Object
name|refreshTokenLock
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|OAuthPermission
argument_list|>
name|permissionMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|MessageContext
name|messageContext
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|defaultScopes
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|requiredScopes
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|invisibleToClientScopes
decl_stmt|;
specifier|private
name|boolean
name|supportPreauthorizedTokens
decl_stmt|;
specifier|private
name|boolean
name|useJwtFormatForAccessTokens
decl_stmt|;
specifier|private
name|boolean
name|persistJwtEncoding
init|=
literal|true
decl_stmt|;
specifier|private
name|OAuthJoseJwtProducer
name|jwtAccessTokenProducer
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jwtAccessTokenClaimMap
decl_stmt|;
specifier|private
name|ProviderAuthenticationStrategy
name|authenticationStrategy
decl_stmt|;
specifier|private
name|String
name|issuer
decl_stmt|;
specifier|protected
name|AbstractOAuthDataProvider
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|ServerAccessToken
name|createAccessToken
parameter_list|(
name|AccessTokenRegistration
name|reg
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|ServerAccessToken
name|at
init|=
name|doCreateAccessToken
argument_list|(
name|reg
argument_list|)
decl_stmt|;
name|saveAccessToken
argument_list|(
name|at
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRefreshTokenSupported
argument_list|(
name|reg
operator|.
name|getApprovedScope
argument_list|()
argument_list|)
condition|)
block|{
name|createNewRefreshToken
argument_list|(
name|at
argument_list|)
expr_stmt|;
block|}
return|return
name|at
return|;
block|}
specifier|protected
name|ServerAccessToken
name|doCreateAccessToken
parameter_list|(
name|AccessTokenRegistration
name|atReg
parameter_list|)
block|{
name|ServerAccessToken
name|at
init|=
name|createNewAccessToken
argument_list|(
name|atReg
operator|.
name|getClient
argument_list|()
argument_list|,
name|atReg
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|at
operator|.
name|setAudiences
argument_list|(
name|atReg
operator|.
name|getAudiences
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|setGrantType
argument_list|(
name|atReg
operator|.
name|getGrantType
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|theScopes
init|=
name|atReg
operator|.
name|getApprovedScope
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|thePermissions
init|=
name|convertScopeToPermissions
argument_list|(
name|atReg
operator|.
name|getClient
argument_list|()
argument_list|,
name|theScopes
argument_list|)
decl_stmt|;
name|at
operator|.
name|setScopes
argument_list|(
name|thePermissions
argument_list|)
expr_stmt|;
name|at
operator|.
name|setSubject
argument_list|(
name|atReg
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|setClientCodeVerifier
argument_list|(
name|atReg
operator|.
name|getClientCodeVerifier
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|setNonce
argument_list|(
name|atReg
operator|.
name|getNonce
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|setResponseType
argument_list|(
name|atReg
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|setGrantCode
argument_list|(
name|atReg
operator|.
name|getGrantCode
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|getExtraProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|atReg
operator|.
name|getExtraProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|messageContext
operator|!=
literal|null
condition|)
block|{
name|String
name|certCnf
init|=
operator|(
name|String
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|HEADER_X509_THUMBPRINT_SHA256
argument_list|)
decl_stmt|;
if|if
condition|(
name|certCnf
operator|!=
literal|null
condition|)
block|{
comment|// At a later stage we will likely introduce a dedicate Confirmation bean (as it is used in POP etc)
name|at
operator|.
name|getExtraProperties
argument_list|()
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|HEADER_X509_THUMBPRINT_SHA256
argument_list|,
name|certCnf
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isUseJwtFormatForAccessTokens
argument_list|()
condition|)
block|{
name|JwtClaims
name|claims
init|=
name|createJwtAccessToken
argument_list|(
name|at
argument_list|)
decl_stmt|;
name|String
name|jose
init|=
name|processJwtAccessToken
argument_list|(
name|claims
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPersistJwtEncoding
argument_list|()
condition|)
block|{
name|at
operator|.
name|setTokenKey
argument_list|(
name|jose
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|at
operator|.
name|setEncodedToken
argument_list|(
name|jose
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|at
return|;
block|}
specifier|protected
name|JwtClaims
name|createJwtAccessToken
parameter_list|(
name|ServerAccessToken
name|at
parameter_list|)
block|{
name|JwtClaims
name|claims
init|=
operator|new
name|JwtClaims
argument_list|()
decl_stmt|;
name|claims
operator|.
name|setTokenId
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// 'client_id' or 'cid', default client_id
name|String
name|clientIdClaimName
init|=
name|JwtTokenUtils
operator|.
name|getClaimName
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_ID
argument_list|,
name|OAuthConstants
operator|.
name|CLIENT_ID
argument_list|,
name|getJwtAccessTokenClaimMap
argument_list|()
argument_list|)
decl_stmt|;
name|claims
operator|.
name|setClaim
argument_list|(
name|clientIdClaimName
argument_list|,
name|at
operator|.
name|getClient
argument_list|()
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setIssuedAt
argument_list|(
name|at
operator|.
name|getIssuedAt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|at
operator|.
name|getExpiresIn
argument_list|()
operator|>
literal|0
condition|)
block|{
name|claims
operator|.
name|setExpiryTime
argument_list|(
name|at
operator|.
name|getIssuedAt
argument_list|()
operator|+
name|at
operator|.
name|getExpiresIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UserSubject
name|userSubject
init|=
name|at
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|userSubject
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|userSubject
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|claims
operator|.
name|setSubject
argument_list|(
name|userSubject
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 'username' by default to be consistent with the token introspection response
specifier|final
name|String
name|usernameProp
init|=
literal|"username"
decl_stmt|;
name|String
name|usernameClaimName
init|=
name|JwtTokenUtils
operator|.
name|getClaimName
argument_list|(
name|usernameProp
argument_list|,
name|usernameProp
argument_list|,
name|getJwtAccessTokenClaimMap
argument_list|()
argument_list|)
decl_stmt|;
name|claims
operator|.
name|setClaim
argument_list|(
name|usernameClaimName
argument_list|,
name|userSubject
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|at
operator|.
name|getIssuer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|claims
operator|.
name|setIssuer
argument_list|(
name|at
operator|.
name|getIssuer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|at
operator|.
name|getScopes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|claims
operator|.
name|setClaim
argument_list|(
name|OAuthConstants
operator|.
name|SCOPE
argument_list|,
name|OAuthUtils
operator|.
name|convertPermissionsToScopeList
argument_list|(
name|at
operator|.
name|getScopes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAuth2 resource indicators (resource server audience)
if|if
condition|(
operator|!
name|at
operator|.
name|getAudiences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|resourceAudiences
init|=
name|at
operator|.
name|getAudiences
argument_list|()
decl_stmt|;
if|if
condition|(
name|resourceAudiences
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|claims
operator|.
name|setAudience
argument_list|(
name|resourceAudiences
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|claims
operator|.
name|setAudiences
argument_list|(
name|resourceAudiences
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|at
operator|.
name|getExtraProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|actualExtraProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|at
operator|.
name|getExtraProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|JoseConstants
operator|.
name|HEADER_X509_THUMBPRINT_SHA256
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|claims
operator|.
name|setClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_CONFIRMATION
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|JoseConstants
operator|.
name|HEADER_X509_THUMBPRINT_SHA256
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actualExtraProps
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|claims
operator|.
name|setClaim
argument_list|(
literal|"extra_properties"
argument_list|,
name|actualExtraProps
argument_list|)
expr_stmt|;
block|}
comment|// Can be used to check at RS/etc which grant was used to get this token issued
if|if
condition|(
name|at
operator|.
name|getGrantType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|claims
operator|.
name|setClaim
argument_list|(
name|OAuthConstants
operator|.
name|GRANT_TYPE
argument_list|,
name|at
operator|.
name|getGrantType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Can be used to check the original code grant value which was removed from the storage
comment|// (and is no longer valid) when this token was issued; relevant only if the authorization
comment|// code flow was used
if|if
condition|(
name|at
operator|.
name|getGrantCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|claims
operator|.
name|setClaim
argument_list|(
name|OAuthConstants
operator|.
name|AUTHORIZATION_CODE_GRANT
argument_list|,
name|at
operator|.
name|getGrantCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Can be used to link the clients (especially public ones) to this token
comment|// to have a knowledge which client instance is using this token - might be handy at the RS/etc
if|if
condition|(
name|at
operator|.
name|getClientCodeVerifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|claims
operator|.
name|setClaim
argument_list|(
name|OAuthConstants
operator|.
name|AUTHORIZATION_CODE_VERIFIER
argument_list|,
name|at
operator|.
name|getClientCodeVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|at
operator|.
name|getNonce
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|claims
operator|.
name|setClaim
argument_list|(
name|OAuthConstants
operator|.
name|NONCE
argument_list|,
name|at
operator|.
name|getNonce
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|claims
return|;
block|}
specifier|protected
name|ServerAccessToken
name|createNewAccessToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|UserSubject
name|userSub
parameter_list|)
block|{
name|BearerAccessToken
name|token
init|=
operator|new
name|BearerAccessToken
argument_list|(
name|client
argument_list|,
name|accessTokenLifetime
argument_list|)
decl_stmt|;
if|if
condition|(
name|issuer
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setIssuer
argument_list|(
name|issuer
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerAccessToken
name|refreshAccessToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|refreshTokenKey
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|restrictedScopes
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|RefreshToken
name|currentRefreshToken
init|=
name|recycleRefreshTokens
condition|?
name|revokeRefreshToken
argument_list|(
name|refreshTokenKey
argument_list|)
else|:
name|getRefreshToken
argument_list|(
name|refreshTokenKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentRefreshToken
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|ACCESS_DENIED
argument_list|)
throw|;
block|}
if|if
condition|(
name|OAuthUtils
operator|.
name|isExpired
argument_list|(
name|currentRefreshToken
operator|.
name|getIssuedAt
argument_list|()
argument_list|,
name|currentRefreshToken
operator|.
name|getExpiresIn
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|recycleRefreshTokens
condition|)
block|{
name|revokeRefreshToken
argument_list|(
name|refreshTokenKey
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|ACCESS_DENIED
argument_list|)
throw|;
block|}
if|if
condition|(
name|recycleRefreshTokens
condition|)
block|{
name|revokeAccessTokens
argument_list|(
name|currentRefreshToken
argument_list|)
expr_stmt|;
block|}
name|ServerAccessToken
name|at
init|=
name|doRefreshAccessToken
argument_list|(
name|client
argument_list|,
name|currentRefreshToken
argument_list|,
name|restrictedScopes
argument_list|)
decl_stmt|;
name|saveAccessToken
argument_list|(
name|at
argument_list|)
expr_stmt|;
if|if
condition|(
name|recycleRefreshTokens
condition|)
block|{
name|createNewRefreshToken
argument_list|(
name|at
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateExistingRefreshToken
argument_list|(
name|currentRefreshToken
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
return|return
name|at
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|revokeToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|tokenKey
parameter_list|,
name|String
name|tokenTypeHint
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|ServerAccessToken
name|accessToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|OAuthConstants
operator|.
name|REFRESH_TOKEN
operator|.
name|equals
argument_list|(
name|tokenTypeHint
argument_list|)
condition|)
block|{
name|accessToken
operator|=
name|revokeAccessToken
argument_list|(
name|tokenKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accessToken
operator|!=
literal|null
condition|)
block|{
name|handleLinkedRefreshToken
argument_list|(
name|accessToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|OAuthConstants
operator|.
name|ACCESS_TOKEN
operator|.
name|equals
argument_list|(
name|tokenTypeHint
argument_list|)
condition|)
block|{
name|RefreshToken
name|currentRefreshToken
init|=
name|revokeRefreshToken
argument_list|(
name|tokenKey
argument_list|)
decl_stmt|;
name|revokeAccessTokens
argument_list|(
name|currentRefreshToken
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|handleLinkedRefreshToken
parameter_list|(
name|ServerAccessToken
name|accessToken
parameter_list|)
block|{
if|if
condition|(
name|accessToken
operator|!=
literal|null
operator|&&
name|accessToken
operator|.
name|getRefreshToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RefreshToken
name|rt
init|=
name|getRefreshToken
argument_list|(
name|accessToken
operator|.
name|getRefreshToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rt
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|unlinkRefreshAccessToken
argument_list|(
name|rt
argument_list|,
name|accessToken
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rt
operator|.
name|getAccessTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|revokeRefreshToken
argument_list|(
name|rt
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|saveRefreshToken
argument_list|(
name|rt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|revokeAccessTokens
parameter_list|(
name|RefreshToken
name|currentRefreshToken
parameter_list|)
block|{
if|if
condition|(
name|currentRefreshToken
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|accessTokenKey
range|:
name|currentRefreshToken
operator|.
name|getAccessTokens
argument_list|()
control|)
block|{
name|revokeAccessToken
argument_list|(
name|accessTokenKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|unlinkRefreshAccessToken
parameter_list|(
name|RefreshToken
name|rt
parameter_list|,
name|String
name|tokenKey
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|accessTokenKeys
init|=
name|rt
operator|.
name|getAccessTokens
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|accessTokenKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|accessTokenKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|tokenKey
argument_list|)
condition|)
block|{
name|accessTokenKeys
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|convertScopeToPermissions
parameter_list|(
name|Client
name|client
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScopes
parameter_list|)
block|{
name|checkRequestedScopes
argument_list|(
name|client
argument_list|,
name|requestedScopes
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestedScopes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|scope
range|:
name|requestedScopes
control|)
block|{
name|convertSingleScopeToPermission
argument_list|(
name|client
argument_list|,
name|scope
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|list
return|;
block|}
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Requested scopes can not be mapped"
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|checkRequestedScopes
parameter_list|(
name|Client
name|client
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScopes
parameter_list|)
block|{
if|if
condition|(
name|requiredScopes
operator|!=
literal|null
operator|&&
operator|!
name|requestedScopes
operator|.
name|containsAll
argument_list|(
name|requiredScopes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Required scopes are missing"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|convertSingleScopeToPermission
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|scope
parameter_list|,
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|perms
parameter_list|)
block|{
name|OAuthPermission
name|permission
init|=
name|permissionMap
operator|.
name|get
argument_list|(
name|scope
argument_list|)
decl_stmt|;
if|if
condition|(
name|permission
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Unexpected scope: "
operator|+
name|scope
argument_list|)
throw|;
block|}
name|perms
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ServerAccessToken
name|getPreauthorizedToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScopes
parameter_list|,
name|UserSubject
name|sub
parameter_list|,
name|String
name|grantType
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
if|if
condition|(
operator|!
name|isSupportPreauthorizedTokens
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ServerAccessToken
name|token
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerAccessToken
name|at
range|:
name|getAccessTokens
argument_list|(
name|client
argument_list|,
name|sub
argument_list|)
control|)
block|{
if|if
condition|(
name|at
operator|.
name|getClient
argument_list|()
operator|.
name|getClientId
argument_list|()
operator|.
name|equals
argument_list|(
name|client
operator|.
name|getClientId
argument_list|()
argument_list|)
operator|&&
name|at
operator|.
name|getGrantType
argument_list|()
operator|.
name|equals
argument_list|(
name|grantType
argument_list|)
operator|&&
operator|(
name|sub
operator|==
literal|null
operator|&&
name|at
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
operator|||
name|sub
operator|!=
literal|null
operator|&&
name|at
operator|.
name|getSubject
argument_list|()
operator|.
name|getLogin
argument_list|()
operator|.
name|equals
argument_list|(
name|sub
operator|.
name|getLogin
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|token
operator|=
name|at
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
name|OAuthUtils
operator|.
name|isExpired
argument_list|(
name|token
operator|.
name|getIssuedAt
argument_list|()
argument_list|,
name|token
operator|.
name|getExpiresIn
argument_list|()
argument_list|)
condition|)
block|{
name|revokeToken
argument_list|(
name|client
argument_list|,
name|token
operator|.
name|getTokenKey
argument_list|()
argument_list|,
name|OAuthConstants
operator|.
name|ACCESS_TOKEN
argument_list|)
expr_stmt|;
name|token
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
specifier|protected
name|boolean
name|isRefreshTokenSupported
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|theScopes
parameter_list|)
block|{
return|return
name|theScopes
operator|.
name|contains
argument_list|(
name|OAuthConstants
operator|.
name|REFRESH_TOKEN_SCOPE
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getCurrentRequestedGrantType
parameter_list|()
block|{
return|return
name|messageContext
operator|!=
literal|null
condition|?
operator|(
name|String
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|GRANT_TYPE
argument_list|)
else|:
literal|null
return|;
block|}
specifier|protected
name|String
name|getCurrentClientSecret
parameter_list|()
block|{
return|return
name|messageContext
operator|!=
literal|null
condition|?
operator|(
name|String
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_SECRET
argument_list|)
else|:
literal|null
return|;
block|}
specifier|protected
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCurrentTokenRequestParams
parameter_list|()
block|{
if|if
condition|(
name|messageContext
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|TOKEN_REQUEST_PARAMS
argument_list|)
decl_stmt|;
return|return
name|params
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|RefreshToken
name|updateExistingRefreshToken
parameter_list|(
name|RefreshToken
name|rt
parameter_list|,
name|ServerAccessToken
name|at
parameter_list|)
block|{
synchronized|synchronized
init|(
name|refreshTokenLock
init|)
block|{
return|return
name|updateRefreshToken
argument_list|(
name|rt
argument_list|,
name|at
argument_list|)
return|;
block|}
block|}
specifier|protected
name|RefreshToken
name|updateRefreshToken
parameter_list|(
name|RefreshToken
name|rt
parameter_list|,
name|ServerAccessToken
name|at
parameter_list|)
block|{
name|linkAccessTokenToRefreshToken
argument_list|(
name|rt
argument_list|,
name|at
argument_list|)
expr_stmt|;
name|saveRefreshToken
argument_list|(
name|rt
argument_list|)
expr_stmt|;
name|linkRefreshTokenToAccessToken
argument_list|(
name|rt
argument_list|,
name|at
argument_list|)
expr_stmt|;
return|return
name|rt
return|;
block|}
specifier|protected
name|RefreshToken
name|createNewRefreshToken
parameter_list|(
name|ServerAccessToken
name|at
parameter_list|)
block|{
name|RefreshToken
name|rt
init|=
name|doCreateNewRefreshToken
argument_list|(
name|at
argument_list|)
decl_stmt|;
return|return
name|updateRefreshToken
argument_list|(
name|rt
argument_list|,
name|at
argument_list|)
return|;
block|}
specifier|protected
name|RefreshToken
name|doCreateNewRefreshToken
parameter_list|(
name|ServerAccessToken
name|at
parameter_list|)
block|{
name|RefreshToken
name|rt
init|=
operator|new
name|RefreshToken
argument_list|(
name|at
operator|.
name|getClient
argument_list|()
argument_list|,
name|refreshTokenLifetime
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|.
name|getAudiences
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|audiences
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|audiences
operator|.
name|addAll
argument_list|(
name|at
operator|.
name|getAudiences
argument_list|()
argument_list|)
expr_stmt|;
name|rt
operator|.
name|setAudiences
argument_list|(
name|audiences
argument_list|)
expr_stmt|;
block|}
name|rt
operator|.
name|setGrantType
argument_list|(
name|at
operator|.
name|getGrantType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|at
operator|.
name|getScopes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|scopes
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|scopes
operator|.
name|addAll
argument_list|(
name|at
operator|.
name|getScopes
argument_list|()
argument_list|)
expr_stmt|;
name|rt
operator|.
name|setScopes
argument_list|(
name|scopes
argument_list|)
expr_stmt|;
block|}
name|rt
operator|.
name|setGrantCode
argument_list|(
name|at
operator|.
name|getGrantCode
argument_list|()
argument_list|)
expr_stmt|;
name|rt
operator|.
name|setNonce
argument_list|(
name|at
operator|.
name|getNonce
argument_list|()
argument_list|)
expr_stmt|;
name|rt
operator|.
name|setSubject
argument_list|(
name|at
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|rt
operator|.
name|setClientCodeVerifier
argument_list|(
name|at
operator|.
name|getClientCodeVerifier
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rt
return|;
block|}
specifier|protected
name|void
name|linkAccessTokenToRefreshToken
parameter_list|(
name|RefreshToken
name|rt
parameter_list|,
name|ServerAccessToken
name|at
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rt
operator|.
name|getAccessTokens
argument_list|()
operator|.
name|contains
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
condition|)
block|{
name|rt
operator|.
name|getAccessTokens
argument_list|()
operator|.
name|add
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|linkRefreshTokenToAccessToken
parameter_list|(
name|RefreshToken
name|rt
parameter_list|,
name|ServerAccessToken
name|at
parameter_list|)
block|{
name|at
operator|.
name|setRefreshToken
argument_list|(
name|rt
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ServerAccessToken
name|doRefreshAccessToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|RefreshToken
name|oldRefreshToken
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|restrictedScopes
parameter_list|)
block|{
name|ServerAccessToken
name|at
init|=
name|createNewAccessToken
argument_list|(
name|client
argument_list|,
name|oldRefreshToken
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|at
operator|.
name|setAudiences
argument_list|(
name|oldRefreshToken
operator|.
name|getAudiences
argument_list|()
operator|!=
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|oldRefreshToken
operator|.
name|getAudiences
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|at
operator|.
name|setGrantType
argument_list|(
name|oldRefreshToken
operator|.
name|getGrantType
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|setGrantCode
argument_list|(
name|oldRefreshToken
operator|.
name|getGrantCode
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|setSubject
argument_list|(
name|oldRefreshToken
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|setNonce
argument_list|(
name|oldRefreshToken
operator|.
name|getNonce
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|setClientCodeVerifier
argument_list|(
name|oldRefreshToken
operator|.
name|getClientCodeVerifier
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|getExtraProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|oldRefreshToken
operator|.
name|getExtraProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|restrictedScopes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|at
operator|.
name|setScopes
argument_list|(
name|oldRefreshToken
operator|.
name|getScopes
argument_list|()
operator|!=
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|OAuthPermission
argument_list|>
argument_list|(
name|oldRefreshToken
operator|.
name|getScopes
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|theNewScopes
init|=
name|convertScopeToPermissions
argument_list|(
name|client
argument_list|,
name|restrictedScopes
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldRefreshToken
operator|.
name|getScopes
argument_list|()
operator|.
name|containsAll
argument_list|(
name|theNewScopes
argument_list|)
condition|)
block|{
name|at
operator|.
name|setScopes
argument_list|(
name|theNewScopes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"Invalid scopes"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isUseJwtFormatForAccessTokens
argument_list|()
condition|)
block|{
name|JwtClaims
name|claims
init|=
name|createJwtAccessToken
argument_list|(
name|at
argument_list|)
decl_stmt|;
name|String
name|jose
init|=
name|processJwtAccessToken
argument_list|(
name|claims
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPersistJwtEncoding
argument_list|()
condition|)
block|{
name|at
operator|.
name|setTokenKey
argument_list|(
name|jose
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|at
operator|.
name|setEncodedToken
argument_list|(
name|jose
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|at
return|;
block|}
specifier|public
name|void
name|setAccessTokenLifetime
parameter_list|(
name|long
name|accessTokenLifetime
parameter_list|)
block|{
name|this
operator|.
name|accessTokenLifetime
operator|=
name|accessTokenLifetime
expr_stmt|;
block|}
specifier|public
name|void
name|setRefreshTokenLifetime
parameter_list|(
name|long
name|refreshTokenLifetime
parameter_list|)
block|{
name|this
operator|.
name|refreshTokenLifetime
operator|=
name|refreshTokenLifetime
expr_stmt|;
block|}
specifier|public
name|void
name|setRecycleRefreshTokens
parameter_list|(
name|boolean
name|recycleRefreshTokens
parameter_list|)
block|{
name|this
operator|.
name|recycleRefreshTokens
operator|=
name|recycleRefreshTokens
expr_stmt|;
name|this
operator|.
name|refreshTokenLock
operator|=
name|recycleRefreshTokens
condition|?
literal|null
else|:
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRecycleRefreshTokens
parameter_list|()
block|{
return|return
name|this
operator|.
name|recycleRefreshTokens
return|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
for|for
control|(
name|OAuthPermission
name|perm
range|:
name|permissionMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|defaultScopes
operator|!=
literal|null
operator|&&
name|defaultScopes
operator|.
name|contains
argument_list|(
name|perm
operator|.
name|getPermission
argument_list|()
argument_list|)
condition|)
block|{
name|perm
operator|.
name|setDefaultPermission
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invisibleToClientScopes
operator|!=
literal|null
operator|&&
name|invisibleToClientScopes
operator|.
name|contains
argument_list|(
name|perm
operator|.
name|getPermission
argument_list|()
argument_list|)
condition|)
block|{
name|perm
operator|.
name|setInvisibleToClient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{     }
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|OAuthPermission
argument_list|>
name|getPermissionMap
parameter_list|()
block|{
return|return
name|permissionMap
return|;
block|}
specifier|public
name|void
name|setPermissionMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|OAuthPermission
argument_list|>
name|permissionMap
parameter_list|)
block|{
name|this
operator|.
name|permissionMap
operator|=
name|permissionMap
expr_stmt|;
block|}
specifier|public
name|void
name|setSupportedScopes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|scopes
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|scopes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|OAuthPermission
name|permission
init|=
operator|new
name|OAuthPermission
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|permissionMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|MessageContext
name|getMessageContext
parameter_list|()
block|{
return|return
name|messageContext
return|;
block|}
specifier|public
name|void
name|setMessageContext
parameter_list|(
name|MessageContext
name|messageContext
parameter_list|)
block|{
name|this
operator|.
name|messageContext
operator|=
name|messageContext
expr_stmt|;
if|if
condition|(
name|authenticationStrategy
operator|!=
literal|null
condition|)
block|{
name|OAuthUtils
operator|.
name|injectContextIntoOAuthProvider
argument_list|(
name|messageContext
argument_list|,
name|authenticationStrategy
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeClientTokens
parameter_list|(
name|Client
name|c
parameter_list|)
block|{
name|List
argument_list|<
name|RefreshToken
argument_list|>
name|refreshTokens
init|=
name|getRefreshTokens
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|refreshTokens
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RefreshToken
name|rt
range|:
name|refreshTokens
control|)
block|{
name|revokeRefreshToken
argument_list|(
name|rt
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ServerAccessToken
argument_list|>
name|accessTokens
init|=
name|getAccessTokens
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessTokens
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServerAccessToken
name|at
range|:
name|accessTokens
control|)
block|{
name|revokeAccessToken
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Client
name|removeClient
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|Client
name|c
init|=
name|doGetClient
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
name|removeClientTokens
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|doRemoveClient
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
annotation|@
name|Override
specifier|public
name|Client
name|getClient
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|Client
name|client
init|=
name|doGetClient
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return
name|client
return|;
block|}
name|String
name|grantType
init|=
name|getCurrentRequestedGrantType
argument_list|()
decl_stmt|;
if|if
condition|(
name|OAuthConstants
operator|.
name|CLIENT_CREDENTIALS_GRANT
operator|.
name|equals
argument_list|(
name|grantType
argument_list|)
condition|)
block|{
name|String
name|clientSecret
init|=
name|getCurrentClientSecret
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientSecret
operator|!=
literal|null
condition|)
block|{
return|return
name|createClientCredentialsClient
argument_list|(
name|clientId
argument_list|,
name|clientSecret
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setAuthenticationStrategy
parameter_list|(
name|ProviderAuthenticationStrategy
name|authenticationStrategy
parameter_list|)
block|{
name|this
operator|.
name|authenticationStrategy
operator|=
name|authenticationStrategy
expr_stmt|;
block|}
specifier|protected
name|boolean
name|authenticateUnregisteredClient
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|clientSecret
parameter_list|)
block|{
return|return
name|authenticationStrategy
operator|!=
literal|null
operator|&&
name|authenticationStrategy
operator|.
name|authenticate
argument_list|(
name|clientId
argument_list|,
name|clientSecret
argument_list|)
return|;
block|}
specifier|protected
name|Client
name|createClientCredentialsClient
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|password
parameter_list|)
block|{
if|if
condition|(
name|authenticateUnregisteredClient
argument_list|(
name|clientId
argument_list|,
name|password
argument_list|)
condition|)
block|{
name|Client
name|c
init|=
operator|new
name|Client
argument_list|(
name|clientId
argument_list|,
name|password
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|c
operator|.
name|setAllowedGrantTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_CREDENTIALS_GRANT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|ServerAccessToken
name|revokeAccessToken
parameter_list|(
name|String
name|accessTokenKey
parameter_list|)
block|{
name|ServerAccessToken
name|at
init|=
name|getAccessToken
argument_list|(
name|accessTokenKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|!=
literal|null
condition|)
block|{
name|doRevokeAccessToken
argument_list|(
name|at
argument_list|)
expr_stmt|;
block|}
return|return
name|at
return|;
block|}
specifier|protected
name|RefreshToken
name|revokeRefreshToken
parameter_list|(
name|String
name|refreshTokenKey
parameter_list|)
block|{
name|RefreshToken
name|refreshToken
init|=
name|getRefreshToken
argument_list|(
name|refreshTokenKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|refreshToken
operator|!=
literal|null
condition|)
block|{
name|doRevokeRefreshToken
argument_list|(
name|refreshToken
argument_list|)
expr_stmt|;
block|}
return|return
name|refreshToken
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|saveAccessToken
parameter_list|(
name|ServerAccessToken
name|serverToken
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|saveRefreshToken
parameter_list|(
name|RefreshToken
name|refreshToken
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|doRevokeAccessToken
parameter_list|(
name|ServerAccessToken
name|accessToken
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|doRevokeRefreshToken
parameter_list|(
name|RefreshToken
name|refreshToken
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|RefreshToken
name|getRefreshToken
parameter_list|(
name|String
name|refreshTokenKey
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|Client
name|doGetClient
parameter_list|(
name|String
name|clientId
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|doRemoveClient
parameter_list|(
name|Client
name|c
parameter_list|)
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDefaultScopes
parameter_list|()
block|{
return|return
name|defaultScopes
return|;
block|}
specifier|public
name|void
name|setDefaultScopes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|defaultScopes
parameter_list|)
block|{
name|this
operator|.
name|defaultScopes
operator|=
name|defaultScopes
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredScopes
parameter_list|()
block|{
return|return
name|requiredScopes
return|;
block|}
specifier|public
name|void
name|setRequiredScopes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|requiredScopes
parameter_list|)
block|{
name|this
operator|.
name|requiredScopes
operator|=
name|requiredScopes
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getInvisibleToClientScopes
parameter_list|()
block|{
return|return
name|invisibleToClientScopes
return|;
block|}
specifier|public
name|void
name|setInvisibleToClientScopes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|invisibleToClientScopes
parameter_list|)
block|{
name|this
operator|.
name|invisibleToClientScopes
operator|=
name|invisibleToClientScopes
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSupportPreauthorizedTokens
parameter_list|()
block|{
return|return
name|supportPreauthorizedTokens
return|;
block|}
specifier|public
name|void
name|setSupportPreauthorizedTokens
parameter_list|(
name|boolean
name|supportPreauthorizedTokens
parameter_list|)
block|{
name|this
operator|.
name|supportPreauthorizedTokens
operator|=
name|supportPreauthorizedTokens
expr_stmt|;
block|}
specifier|protected
specifier|static
name|boolean
name|isClientMatched
parameter_list|(
name|Client
name|c
parameter_list|,
name|UserSubject
name|resourceOwner
parameter_list|)
block|{
return|return
name|resourceOwner
operator|==
literal|null
operator|||
name|c
operator|.
name|getResourceOwnerSubject
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getResourceOwnerSubject
argument_list|()
operator|.
name|getLogin
argument_list|()
operator|.
name|equals
argument_list|(
name|resourceOwner
operator|.
name|getLogin
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isTokenMatched
parameter_list|(
name|ServerAccessToken
name|token
parameter_list|,
name|Client
name|c
parameter_list|,
name|UserSubject
name|sub
parameter_list|)
block|{
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
operator|(
name|c
operator|==
literal|null
operator|||
name|token
operator|.
name|getClient
argument_list|()
operator|.
name|getClientId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getClientId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|UserSubject
name|tokenSub
init|=
name|token
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sub
operator|==
literal|null
operator|||
name|tokenSub
operator|!=
literal|null
operator|&&
name|tokenSub
operator|.
name|getLogin
argument_list|()
operator|.
name|equals
argument_list|(
name|sub
operator|.
name|getLogin
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setClients
parameter_list|(
name|List
argument_list|<
name|Client
argument_list|>
name|clients
parameter_list|)
block|{
for|for
control|(
name|Client
name|c
range|:
name|clients
control|)
block|{
name|setClient
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isUseJwtFormatForAccessTokens
parameter_list|()
block|{
return|return
name|useJwtFormatForAccessTokens
return|;
block|}
specifier|public
name|void
name|setUseJwtFormatForAccessTokens
parameter_list|(
name|boolean
name|useJwtFormatForAccessTokens
parameter_list|)
block|{
name|this
operator|.
name|useJwtFormatForAccessTokens
operator|=
name|useJwtFormatForAccessTokens
expr_stmt|;
block|}
specifier|public
name|OAuthJoseJwtProducer
name|getJwtAccessTokenProducer
parameter_list|()
block|{
return|return
name|jwtAccessTokenProducer
return|;
block|}
specifier|public
name|void
name|setJwtAccessTokenProducer
parameter_list|(
name|OAuthJoseJwtProducer
name|jwtAccessTokenProducer
parameter_list|)
block|{
name|this
operator|.
name|jwtAccessTokenProducer
operator|=
name|jwtAccessTokenProducer
expr_stmt|;
block|}
specifier|protected
name|String
name|processJwtAccessToken
parameter_list|(
name|JwtClaims
name|jwtCliams
parameter_list|)
block|{
comment|// It will JWS-sign (default) and/or JWE-encrypt
name|OAuthJoseJwtProducer
name|processor
init|=
name|getJwtAccessTokenProducer
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|OAuthJoseJwtProducer
argument_list|()
else|:
name|getJwtAccessTokenProducer
argument_list|()
decl_stmt|;
return|return
name|processor
operator|.
name|processJwt
argument_list|(
operator|new
name|JwtToken
argument_list|(
name|jwtCliams
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getJwtAccessTokenClaimMap
parameter_list|()
block|{
return|return
name|jwtAccessTokenClaimMap
return|;
block|}
specifier|public
name|void
name|setJwtAccessTokenClaimMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jwtAccessTokenClaimMap
parameter_list|)
block|{
name|this
operator|.
name|jwtAccessTokenClaimMap
operator|=
name|jwtAccessTokenClaimMap
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPersistJwtEncoding
parameter_list|()
block|{
return|return
name|persistJwtEncoding
return|;
block|}
specifier|public
name|void
name|setPersistJwtEncoding
parameter_list|(
name|boolean
name|persistJwtEncoding
parameter_list|)
block|{
name|this
operator|.
name|persistJwtEncoding
operator|=
name|persistJwtEncoding
expr_stmt|;
block|}
specifier|public
name|String
name|getIssuer
parameter_list|()
block|{
return|return
name|issuer
return|;
block|}
specifier|public
name|void
name|setIssuer
parameter_list|(
name|String
name|issuer
parameter_list|)
block|{
name|this
operator|.
name|issuer
operator|=
name|issuer
expr_stmt|;
block|}
block|}
end_class

end_unit

