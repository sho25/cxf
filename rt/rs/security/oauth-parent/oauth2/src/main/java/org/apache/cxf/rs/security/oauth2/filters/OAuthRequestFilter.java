begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|SimplePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|RequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|UserSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|AccessTokenValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|AuthorizationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_comment
comment|/**  * JAX-RS OAuth filter which can be used to protect end user endpoints  */
end_comment

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|OAuthRequestFilter
implements|implements
name|RequestHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|OAuthRequestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_AUTH_SCHEME
init|=
name|OAuthConstants
operator|.
name|BEARER_AUTHORIZATION_SCHEME
decl_stmt|;
specifier|private
name|MessageContext
name|mc
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AccessTokenValidator
argument_list|>
name|tokenHandlers
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|supportedSchemes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|useUserSubject
decl_stmt|;
specifier|private
name|OAuthDataProvider
name|dataProvider
decl_stmt|;
specifier|public
name|void
name|setGrantHandlers
parameter_list|(
name|List
argument_list|<
name|AccessTokenValidator
argument_list|>
name|handlers
parameter_list|)
block|{
name|tokenHandlers
operator|=
name|handlers
expr_stmt|;
for|for
control|(
name|AccessTokenValidator
name|handler
range|:
name|handlers
control|)
block|{
name|supportedSchemes
operator|.
name|addAll
argument_list|(
name|handler
operator|.
name|getSupportedAuthorizationSchemes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Response
name|handleRequest
parameter_list|(
name|Message
name|m
parameter_list|,
name|ClassResourceInfo
name|resourceClass
parameter_list|)
block|{
name|ServerAccessToken
name|accessToken
init|=
name|getAccessToken
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|permissions
init|=
name|accessToken
operator|.
name|getScopes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|matchingPermissions
init|=
operator|new
name|ArrayList
argument_list|<
name|OAuthPermission
argument_list|>
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|req
init|=
name|mc
operator|.
name|getHttpServletRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|OAuthPermission
name|perm
range|:
name|permissions
control|)
block|{
name|boolean
name|uriOK
init|=
name|checkRequestURI
argument_list|(
name|req
argument_list|,
name|perm
operator|.
name|getUris
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|verbOK
init|=
name|checkHttpVerb
argument_list|(
name|req
argument_list|,
name|perm
operator|.
name|getHttpVerbs
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriOK
operator|&&
name|verbOK
condition|)
block|{
name|matchingPermissions
operator|.
name|add
argument_list|(
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|permissions
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|matchingPermissions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Client has no valid permissions"
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|403
argument_list|)
throw|;
block|}
name|OAuthInfo
name|info
init|=
operator|new
name|OAuthInfo
argument_list|(
name|accessToken
argument_list|,
name|matchingPermissions
argument_list|)
decl_stmt|;
name|SecurityContext
name|sc
init|=
name|createSecurityContext
argument_list|(
name|req
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|sc
argument_list|)
expr_stmt|;
name|m
operator|.
name|setContent
argument_list|(
name|OAuthContext
operator|.
name|class
argument_list|,
name|createOAuthContext
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|protected
name|boolean
name|checkHttpVerb
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|verbs
parameter_list|)
block|{
if|if
condition|(
operator|!
name|verbs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|verbs
operator|.
name|contains
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Invalid http verb"
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|checkRequestURI
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|uris
parameter_list|)
block|{
if|if
condition|(
name|uris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|servletPath
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|boolean
name|foundValidScope
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
if|if
condition|(
name|OAuthUtils
operator|.
name|checkRequestURI
argument_list|(
name|servletPath
argument_list|,
name|uri
argument_list|)
condition|)
block|{
name|foundValidScope
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundValidScope
condition|)
block|{
name|String
name|message
init|=
literal|"Invalid request URI"
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|foundValidScope
return|;
block|}
specifier|public
name|void
name|setDataProvider
parameter_list|(
name|OAuthDataProvider
name|provider
parameter_list|)
block|{
name|dataProvider
operator|=
name|provider
expr_stmt|;
block|}
specifier|public
name|void
name|setUseUserSubject
parameter_list|(
name|boolean
name|useUserSubject
parameter_list|)
block|{
name|this
operator|.
name|useUserSubject
operator|=
name|useUserSubject
expr_stmt|;
block|}
annotation|@
name|Context
specifier|public
name|void
name|setMessageContext
parameter_list|(
name|MessageContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|mc
operator|=
name|context
expr_stmt|;
block|}
specifier|protected
name|AccessTokenValidator
name|findTokenHandler
parameter_list|(
name|String
name|authScheme
parameter_list|)
block|{
for|for
control|(
name|AccessTokenValidator
name|handler
range|:
name|tokenHandlers
control|)
block|{
if|if
condition|(
name|handler
operator|.
name|getSupportedAuthorizationSchemes
argument_list|()
operator|.
name|contains
argument_list|(
name|authScheme
argument_list|)
condition|)
block|{
return|return
name|handler
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|ServerAccessToken
name|getAccessToken
parameter_list|()
block|{
name|ServerAccessToken
name|accessToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataProvider
operator|==
literal|null
operator|&&
name|tokenHandlers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|500
argument_list|)
throw|;
block|}
name|String
index|[]
name|authParts
init|=
name|AuthorizationUtils
operator|.
name|getAuthorizationParts
argument_list|(
name|mc
argument_list|,
name|supportedSchemes
argument_list|)
decl_stmt|;
name|String
name|authScheme
init|=
name|authParts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|authSchemeData
init|=
name|authParts
index|[
literal|1
index|]
decl_stmt|;
name|AccessTokenValidator
name|handler
init|=
name|findTokenHandler
argument_list|(
name|authScheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|accessToken
operator|=
name|handler
operator|.
name|getAccessToken
argument_list|(
name|authSchemeData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
name|AuthorizationUtils
operator|.
name|throwAuthorizationFailure
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|authScheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|accessToken
operator|==
literal|null
operator|&&
name|authScheme
operator|.
name|equals
argument_list|(
name|DEFAULT_AUTH_SCHEME
argument_list|)
condition|)
block|{
try|try
block|{
name|accessToken
operator|=
name|dataProvider
operator|.
name|getAccessToken
argument_list|(
name|authSchemeData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
name|AuthorizationUtils
operator|.
name|throwAuthorizationFailure
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|authScheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|accessToken
operator|==
literal|null
condition|)
block|{
name|AuthorizationUtils
operator|.
name|throwAuthorizationFailure
argument_list|(
name|supportedSchemes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|OAuthUtils
operator|.
name|isExpired
argument_list|(
name|accessToken
operator|.
name|getIssuedAt
argument_list|()
argument_list|,
name|accessToken
operator|.
name|getLifetime
argument_list|()
argument_list|)
condition|)
block|{
name|dataProvider
operator|.
name|removeAccessToken
argument_list|(
name|accessToken
argument_list|)
expr_stmt|;
name|AuthorizationUtils
operator|.
name|throwAuthorizationFailure
argument_list|(
name|supportedSchemes
argument_list|)
expr_stmt|;
block|}
return|return
name|accessToken
return|;
block|}
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|OAuthInfo
name|info
parameter_list|)
block|{
name|UserSubject
name|subject
init|=
name|info
operator|.
name|getToken
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
specifier|final
name|UserSubject
name|theSubject
init|=
name|subject
decl_stmt|;
specifier|final
name|String
name|login
init|=
name|OAuthRequestFilter
operator|.
name|this
operator|.
name|useUserSubject
condition|?
operator|(
name|theSubject
operator|!=
literal|null
condition|?
name|theSubject
operator|.
name|getLogin
argument_list|()
else|:
literal|null
operator|)
else|:
name|info
operator|.
name|getToken
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getLoginName
argument_list|()
decl_stmt|;
return|return
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|login
operator|!=
literal|null
condition|?
operator|new
name|SimplePrincipal
argument_list|(
name|login
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
if|if
condition|(
name|login
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|OAuthRequestFilter
operator|.
name|this
operator|.
name|useUserSubject
operator|&&
name|theSubject
operator|!=
literal|null
condition|)
block|{
name|roles
operator|=
name|theSubject
operator|.
name|getRoles
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|roles
operator|=
name|info
operator|.
name|getRoles
argument_list|()
expr_stmt|;
block|}
return|return
name|roles
operator|==
literal|null
condition|?
literal|false
else|:
name|roles
operator|.
name|contains
argument_list|(
name|role
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|OAuthContext
name|createOAuthContext
parameter_list|(
name|OAuthInfo
name|info
parameter_list|)
block|{
return|return
operator|new
name|OAuthContext
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|info
operator|.
name|getMatchedPermissions
argument_list|()
argument_list|,
name|info
operator|.
name|getToken
argument_list|()
operator|.
name|getGrantType
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|OAuthInfo
block|{
specifier|private
name|ServerAccessToken
name|token
decl_stmt|;
specifier|private
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|permissions
decl_stmt|;
specifier|public
name|OAuthInfo
parameter_list|(
name|ServerAccessToken
name|token
parameter_list|,
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|matchedPermissions
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|permissions
operator|=
name|matchedPermissions
expr_stmt|;
block|}
specifier|public
name|ServerAccessToken
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRoles
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|authorities
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OAuthPermission
name|permission
range|:
name|permissions
control|)
block|{
name|authorities
operator|.
name|addAll
argument_list|(
name|permission
operator|.
name|getRoles
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|authorities
return|;
block|}
specifier|public
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|getMatchedPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
block|}
block|}
end_class

end_unit

