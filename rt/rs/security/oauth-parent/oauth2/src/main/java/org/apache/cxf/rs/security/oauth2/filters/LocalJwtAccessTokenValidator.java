begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JoseJwtConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtClaims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AccessTokenValidation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|UserSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|AccessTokenValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_class
specifier|public
class|class
name|LocalJwtAccessTokenValidator
extends|extends
name|JoseJwtConsumer
implements|implements
name|AccessTokenValidator
block|{
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSupportedAuthorizationSchemes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|OAuthConstants
operator|.
name|BEARER_AUTHORIZATION_SCHEME
argument_list|)
return|;
block|}
specifier|public
name|AccessTokenValidation
name|validateAccessToken
parameter_list|(
name|MessageContext
name|mc
parameter_list|,
name|String
name|authScheme
parameter_list|,
name|String
name|authSchemeData
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraProps
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
try|try
block|{
name|JwtToken
name|token
init|=
name|super
operator|.
name|getJwtToken
argument_list|(
name|authSchemeData
argument_list|)
decl_stmt|;
return|return
name|convertClaimsToValidation
argument_list|(
name|token
operator|.
name|getClaims
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|AccessTokenValidation
name|convertClaimsToValidation
parameter_list|(
name|JwtClaims
name|claims
parameter_list|)
block|{
name|AccessTokenValidation
name|atv
init|=
operator|new
name|AccessTokenValidation
argument_list|()
decl_stmt|;
name|atv
operator|.
name|setInitialValidationSuccessful
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|claims
operator|.
name|getAudience
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atv
operator|.
name|setClientId
argument_list|(
name|claims
operator|.
name|getAudience
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|claims
operator|.
name|getIssuedAt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atv
operator|.
name|setTokenIssuedAt
argument_list|(
name|claims
operator|.
name|getIssuedAt
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|atv
operator|.
name|setTokenIssuedAt
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|claims
operator|.
name|getExpiryTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atv
operator|.
name|setTokenLifetime
argument_list|(
name|claims
operator|.
name|getExpiryTime
argument_list|()
operator|-
name|atv
operator|.
name|getTokenIssuedAt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|resourceAud
init|=
name|claims
operator|.
name|getClaim
argument_list|(
literal|"resource"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceAud
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|auds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourceAud
operator|instanceof
name|List
condition|)
block|{
name|auds
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|resourceAud
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|auds
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|String
operator|)
name|resourceAud
argument_list|)
expr_stmt|;
block|}
name|atv
operator|.
name|setAudiences
argument_list|(
name|auds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|claims
operator|.
name|getIssuer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atv
operator|.
name|setTokenIssuer
argument_list|(
name|claims
operator|.
name|getIssuer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|scope
init|=
name|claims
operator|.
name|getClaim
argument_list|(
literal|"scope"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|scopes
init|=
name|scope
operator|instanceof
name|String
condition|?
name|scope
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
else|:
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scope
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|perms
init|=
operator|new
name|LinkedList
argument_list|<
name|OAuthPermission
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|scopes
control|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|perms
operator|.
name|add
argument_list|(
operator|new
name|OAuthPermission
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|atv
operator|.
name|setTokenScopes
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
name|String
name|username
init|=
operator|(
name|String
operator|)
name|claims
operator|.
name|getClaim
argument_list|(
literal|"preferred_username"
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|UserSubject
name|userSubject
init|=
operator|new
name|UserSubject
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|claims
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|userSubject
operator|.
name|setId
argument_list|(
name|claims
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|atv
operator|.
name|setTokenSubject
argument_list|(
name|userSubject
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|claims
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atv
operator|.
name|setTokenSubject
argument_list|(
operator|new
name|UserSubject
argument_list|(
name|claims
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|atv
return|;
block|}
block|}
end_class

end_unit

