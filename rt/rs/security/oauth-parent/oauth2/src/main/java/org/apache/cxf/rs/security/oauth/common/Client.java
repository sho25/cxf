begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a registered third-party Client application  */
end_comment

begin_class
specifier|public
class|class
name|Client
block|{
specifier|private
name|String
name|clientId
decl_stmt|;
comment|// TODO: Consider introducing ClientCredentials instead
comment|// so that a secret, public key, etc can be kept
specifier|private
name|String
name|clientSecret
decl_stmt|;
specifier|private
name|String
name|applicationName
decl_stmt|;
specifier|private
name|String
name|applicationDescription
decl_stmt|;
specifier|private
name|String
name|applicationWebUri
decl_stmt|;
specifier|private
name|String
name|applicationLogoUri
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|redirectUris
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isConfidential
decl_stmt|;
specifier|private
name|String
name|loginName
decl_stmt|;
specifier|public
name|Client
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|clientSecret
parameter_list|,
name|boolean
name|isConfidential
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
name|this
operator|.
name|clientSecret
operator|=
name|clientSecret
expr_stmt|;
name|this
operator|.
name|isConfidential
operator|=
name|isConfidential
expr_stmt|;
block|}
specifier|public
name|Client
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|clientSecret
parameter_list|,
name|boolean
name|isConfidential
parameter_list|,
name|String
name|applicationName
parameter_list|,
name|String
name|applicationWebUri
parameter_list|)
block|{
name|this
argument_list|(
name|clientId
argument_list|,
name|clientSecret
argument_list|,
name|isConfidential
argument_list|)
expr_stmt|;
name|this
operator|.
name|applicationName
operator|=
name|applicationName
expr_stmt|;
name|this
operator|.
name|applicationWebUri
operator|=
name|applicationWebUri
expr_stmt|;
block|}
comment|/**      * Gets the consumer registration id      * @return the consumer key      */
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
comment|/**      * Gets the secret key      * @return the secret key      */
specifier|public
name|String
name|getClientSecret
parameter_list|()
block|{
return|return
name|clientSecret
return|;
block|}
comment|/**      * Gets the name of the third-party application      * this client represents      * @return the application name      */
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
name|applicationName
return|;
block|}
comment|/**      * Sets the name of the third-party application      * this client represents      * @param applicationName the name      */
specifier|public
name|void
name|setApplicationName
parameter_list|(
name|String
name|applicationName
parameter_list|)
block|{
name|this
operator|.
name|applicationName
operator|=
name|applicationName
expr_stmt|;
block|}
comment|/**      * Gets the public URI of the third-party application.      * For example, this property can be used to validate       * request token callbacks      * @return the application URI      */
specifier|public
name|String
name|getApplicationWebUri
parameter_list|()
block|{
return|return
name|applicationWebUri
return|;
block|}
comment|/**      * Sets the public URI of the third-party application.      */
specifier|public
name|void
name|setApplicationWebUri
parameter_list|(
name|String
name|applicationWebUri
parameter_list|)
block|{
name|this
operator|.
name|applicationWebUri
operator|=
name|applicationWebUri
expr_stmt|;
block|}
comment|/**      * Sets the description of the third-party application.      */
specifier|public
name|void
name|setApplicationDescription
parameter_list|(
name|String
name|applicationDescription
parameter_list|)
block|{
name|this
operator|.
name|applicationDescription
operator|=
name|applicationDescription
expr_stmt|;
block|}
comment|/**      * Gets the description of the third-party application.      * @return the application description      */
specifier|public
name|String
name|getApplicationDescription
parameter_list|()
block|{
return|return
name|applicationDescription
return|;
block|}
comment|/**      * Sets the uri pointing to a client logo image.      * At the moment it must be a relative URI      * @param logoPath      */
specifier|public
name|void
name|setApplicationLogoUri
parameter_list|(
name|String
name|logoPath
parameter_list|)
block|{
name|this
operator|.
name|applicationLogoUri
operator|=
name|logoPath
expr_stmt|;
block|}
specifier|public
name|String
name|getApplicationLogoUri
parameter_list|()
block|{
return|return
name|applicationLogoUri
return|;
block|}
comment|/**      * Gets the optional login name which does not necessarily matches      * the clientId; can be used for enforcing the existing RBAC rules.      *        * @return the login name      */
specifier|public
name|String
name|getLoginName
parameter_list|()
block|{
return|return
name|loginName
return|;
block|}
comment|/**      * Sets the optional login name      * @param name the login name      */
specifier|public
name|void
name|setLoginName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|loginName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|setConfidential
parameter_list|(
name|boolean
name|isConf
parameter_list|)
block|{
name|this
operator|.
name|isConfidential
operator|=
name|isConf
expr_stmt|;
block|}
specifier|public
name|boolean
name|isConfidential
parameter_list|()
block|{
return|return
name|isConfidential
return|;
block|}
specifier|public
name|void
name|setRedirectUris
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|redirectUris
parameter_list|)
block|{
name|this
operator|.
name|redirectUris
operator|=
name|redirectUris
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRedirectUris
parameter_list|()
block|{
return|return
name|redirectUris
return|;
block|}
block|}
end_class

end_unit

