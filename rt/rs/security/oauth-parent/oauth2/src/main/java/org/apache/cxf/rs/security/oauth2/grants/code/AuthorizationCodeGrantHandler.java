begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|code
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|AbstractGrantHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|MessageDigestGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthUtils
import|;
end_import

begin_comment
comment|/**  * Authorization Code Grant Handler  */
end_comment

begin_class
specifier|public
class|class
name|AuthorizationCodeGrantHandler
extends|extends
name|AbstractGrantHandler
block|{
specifier|public
name|AuthorizationCodeGrantHandler
parameter_list|()
block|{
name|super
argument_list|(
name|OAuthConstants
operator|.
name|AUTHORIZATION_CODE_GRANT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ServerAccessToken
name|createAccessToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
comment|// Get the grant representation from the provider
name|String
name|codeValue
init|=
name|params
operator|.
name|getFirst
argument_list|(
name|OAuthConstants
operator|.
name|AUTHORIZATION_CODE_VALUE
argument_list|)
decl_stmt|;
name|ServerAuthorizationCodeGrant
name|grant
init|=
operator|(
operator|(
name|AuthorizationCodeDataProvider
operator|)
name|getDataProvider
argument_list|()
operator|)
operator|.
name|removeCodeGrant
argument_list|(
name|codeValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|grant
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// check it has not expired, the client ids are the same
if|if
condition|(
name|OAuthUtils
operator|.
name|isExpired
argument_list|(
name|grant
operator|.
name|getIssuedAt
argument_list|()
argument_list|,
name|grant
operator|.
name|getLifetime
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|INVALID_GRANT
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|grant
operator|.
name|getClient
argument_list|()
operator|.
name|getClientId
argument_list|()
operator|.
name|equals
argument_list|(
name|client
operator|.
name|getClientId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|INVALID_GRANT
argument_list|)
throw|;
block|}
comment|// redirect URIs must match too
name|String
name|expectedRedirectUri
init|=
name|grant
operator|.
name|getRedirectUri
argument_list|()
decl_stmt|;
name|String
name|providedRedirectUri
init|=
name|params
operator|.
name|getFirst
argument_list|(
name|OAuthConstants
operator|.
name|REDIRECT_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|providedRedirectUri
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|expectedRedirectUri
operator|==
literal|null
operator|||
operator|!
name|providedRedirectUri
operator|.
name|equals
argument_list|(
name|expectedRedirectUri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|expectedRedirectUri
operator|==
literal|null
operator|&&
operator|!
name|isCanSupportPublicClients
argument_list|()
operator|||
name|expectedRedirectUri
operator|!=
literal|null
operator|&&
operator|(
name|client
operator|.
name|getRedirectUris
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
operator|!
name|client
operator|.
name|getRedirectUris
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedRedirectUri
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
name|String
name|tempClientSecretHash
init|=
name|grant
operator|.
name|getTempClientSecretHash
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempClientSecretHash
operator|!=
literal|null
condition|)
block|{
name|String
name|tempClientSecret
init|=
name|params
operator|.
name|getFirst
argument_list|(
name|OAuthConstants
operator|.
name|TEMP_CLIENT_SECRET
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|compareTcshWithTch
argument_list|(
name|tempClientSecretHash
argument_list|,
name|tempClientSecret
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
name|OAuthConstants
operator|.
name|INVALID_GRANT
argument_list|)
throw|;
block|}
block|}
return|return
name|doCreateAccessToken
argument_list|(
name|client
argument_list|,
name|grant
operator|.
name|getSubject
argument_list|()
argument_list|,
name|grant
operator|.
name|getApprovedScopes
argument_list|()
argument_list|,
name|grant
operator|.
name|getAudience
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|compareTcshWithTch
parameter_list|(
name|String
name|tempClientSecretHash
parameter_list|,
name|String
name|tempClientSecret
parameter_list|)
block|{
if|if
condition|(
name|tempClientSecret
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MessageDigestGenerator
name|mdg
init|=
operator|new
name|MessageDigestGenerator
argument_list|()
decl_stmt|;
name|byte
index|[]
name|digest
init|=
name|mdg
operator|.
name|createDigest
argument_list|(
name|tempClientSecret
argument_list|,
literal|"SHA-256"
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|digest
operator|.
name|length
operator|>
literal|128
operator|/
literal|8
condition|?
literal|128
operator|/
literal|8
else|:
name|digest
operator|.
name|length
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|,
name|length
argument_list|,
name|stringWriter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Base64Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"server_error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|expectedHash
init|=
name|stringWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|tempClientSecretHash
operator|.
name|equals
argument_list|(
name|expectedHash
argument_list|)
return|;
block|}
block|}
end_class

end_unit

