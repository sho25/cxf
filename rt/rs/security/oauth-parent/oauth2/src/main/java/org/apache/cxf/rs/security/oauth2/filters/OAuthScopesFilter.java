begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Priorities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ClassHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthContextUtils
import|;
end_import

begin_class
annotation|@
name|Priority
argument_list|(
name|Priorities
operator|.
name|AUTHENTICATION
operator|+
literal|1
argument_list|)
specifier|public
class|class
name|OAuthScopesFilter
implements|implements
name|ContainerRequestFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|OAuthScopesFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SKIP_METHODS
decl_stmt|;
static|static
block|{
name|SKIP_METHODS
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|SKIP_METHODS
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"wait"
block|,
literal|"notify"
block|,
literal|"notifyAll"
block|,
literal|"equals"
block|,
literal|"toString"
block|,
literal|"hashCode"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Context
specifier|private
name|MessageContext
name|mc
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|scopesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|scopesMatchAllMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|confidentialClientMethods
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setSecuredObject
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|checkSecureClass
argument_list|(
name|cls
argument_list|)
expr_stmt|;
if|if
condition|(
name|scopesMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"The scopes map is empty"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|scopesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Method: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", scopes: "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|checkSecureClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|==
literal|null
operator|||
name|cls
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return;
block|}
name|Scopes
name|classScopes
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|Scopes
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConfidentialClient
name|classConfClient
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|ConfidentialClient
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|cls
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|SKIP_METHODS
operator|.
name|contains
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Scopes
name|methodScopes
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|Scopes
operator|.
name|class
argument_list|)
decl_stmt|;
name|Scopes
name|theScopes
init|=
name|methodScopes
operator|==
literal|null
condition|?
name|classScopes
else|:
name|methodScopes
decl_stmt|;
if|if
condition|(
name|theScopes
operator|!=
literal|null
condition|)
block|{
name|scopesMap
operator|.
name|put
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|theScopes
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scopesMatchAllMap
operator|.
name|put
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|theScopes
operator|.
name|matchAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ConfidentialClient
name|mConfClient
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|ConfidentialClient
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|classConfClient
operator|!=
literal|null
operator|||
name|mConfClient
operator|!=
literal|null
condition|)
block|{
name|confidentialClientMethods
operator|.
name|add
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|checkSecureClass
argument_list|(
name|cls
operator|.
name|getSuperclass
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|interfaceCls
range|:
name|cls
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|checkSecureClass
argument_list|(
name|interfaceCls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|ContainerRequestContext
name|requestContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Method
name|m
init|=
name|getTargetMethod
argument_list|()
decl_stmt|;
name|checkClient
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|checkScopes
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkClient
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
if|if
condition|(
name|confidentialClientMethods
operator|.
name|contains
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|OAuthContext
name|context
init|=
name|OAuthContextUtils
operator|.
name|getContext
argument_list|(
name|mc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|isClientConfidential
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Non confidential client "
operator|+
name|context
operator|.
name|getClientId
argument_list|()
operator|+
literal|" has attempted to invoke "
operator|+
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionUtils
operator|.
name|toForbiddenException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|checkScopes
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|methodScopes
init|=
name|scopesMap
operator|.
name|get
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodScopes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|matchAll
init|=
name|scopesMatchAllMap
operator|.
name|get
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|OAuthContext
name|context
init|=
name|OAuthContextUtils
operator|.
name|getContext
argument_list|(
name|mc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|requestScopes
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OAuthPermission
name|perm
range|:
name|context
operator|.
name|getPermissions
argument_list|()
control|)
block|{
if|if
condition|(
name|matchAll
condition|)
block|{
name|requestScopes
operator|.
name|add
argument_list|(
name|perm
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodScopes
operator|.
name|contains
argument_list|(
name|perm
operator|.
name|getPermission
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|requestScopes
operator|.
name|containsAll
argument_list|(
name|methodScopes
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Scopes do not match"
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionUtils
operator|.
name|toForbiddenException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Method
name|getTargetMethod
parameter_list|()
block|{
name|Method
name|method
init|=
operator|(
name|Method
operator|)
name|mc
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.resource.method"
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
return|return
name|method
return|;
block|}
throw|throw
name|ExceptionUtils
operator|.
name|toForbiddenException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setScopesMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|scopesMap
parameter_list|)
block|{
name|this
operator|.
name|scopesMap
operator|=
name|scopesMap
expr_stmt|;
block|}
specifier|public
name|void
name|setScopesStringMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|scopesStringMap
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|scopesStringMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|scopesMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setScopesMatchAllMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|scopesMatchAllMap
parameter_list|)
block|{
name|this
operator|.
name|scopesMatchAllMap
operator|=
name|scopesMatchAllMap
expr_stmt|;
block|}
specifier|public
name|void
name|setConfidentialClientMethods
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|confidentialClientMethods
parameter_list|)
block|{
name|this
operator|.
name|confidentialClientMethods
operator|=
name|confidentialClientMethods
expr_stmt|;
block|}
block|}
end_class

end_unit

