begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweDecryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|AbstractJoseJwtConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOAuthJoseJwtConsumer
extends|extends
name|AbstractJoseJwtConsumer
block|{
specifier|private
name|boolean
name|decryptWithClientSecret
decl_stmt|;
specifier|private
name|boolean
name|verifyWithClientSecret
decl_stmt|;
specifier|protected
name|JwtToken
name|getJwtToken
parameter_list|(
name|String
name|wrappedJwtToken
parameter_list|,
name|String
name|clientSecret
parameter_list|)
block|{
return|return
name|getJwtToken
argument_list|(
name|wrappedJwtToken
argument_list|,
name|getInitializedDecryptionProvider
argument_list|(
name|clientSecret
argument_list|)
argument_list|,
name|getInitializedSignatureVerifier
argument_list|(
name|clientSecret
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|JwsSignatureVerifier
name|getInitializedSignatureVerifier
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
if|if
condition|(
name|verifyWithClientSecret
condition|)
block|{
name|byte
index|[]
name|hmac
init|=
name|CryptoUtils
operator|.
name|decodeSequence
argument_list|(
name|clientSecret
argument_list|)
decl_stmt|;
return|return
name|JwsUtils
operator|.
name|getHmacSignatureVerifier
argument_list|(
name|hmac
argument_list|,
name|SignatureAlgorithm
operator|.
name|HS256
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getInitializedSignatureVerifier
argument_list|()
return|;
block|}
specifier|protected
name|JweDecryptionProvider
name|getInitializedDecryptionProvider
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|JweDecryptionProvider
name|theDecryptionProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|decryptWithClientSecret
condition|)
block|{
name|SecretKey
name|key
init|=
name|CryptoUtils
operator|.
name|decodeSecretKey
argument_list|(
name|clientSecret
argument_list|)
decl_stmt|;
name|theDecryptionProvider
operator|=
name|JweUtils
operator|.
name|getDirectKeyJweDecryption
argument_list|(
name|key
argument_list|,
name|ContentAlgorithm
operator|.
name|A128GCM
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|theDecryptionProvider
operator|==
literal|null
condition|)
block|{
name|theDecryptionProvider
operator|=
name|super
operator|.
name|getInitializedDecryptionProvider
argument_list|()
expr_stmt|;
block|}
return|return
name|theDecryptionProvider
return|;
block|}
specifier|public
name|void
name|setDecryptWithClientSecret
parameter_list|(
name|boolean
name|decryptWithClientSecret
parameter_list|)
block|{
if|if
condition|(
name|verifyWithClientSecret
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|this
operator|.
name|decryptWithClientSecret
operator|=
name|verifyWithClientSecret
expr_stmt|;
block|}
specifier|public
name|void
name|setVerifyWithClientSecret
parameter_list|(
name|boolean
name|verifyWithClientSecret
parameter_list|)
block|{
if|if
condition|(
name|verifyWithClientSecret
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|this
operator|.
name|verifyWithClientSecret
operator|=
name|verifyWithClientSecret
expr_stmt|;
block|}
block|}
end_class

end_unit

