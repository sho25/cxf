begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPairGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECGenParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECPoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECPrivateKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|RSAPrivateKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|RSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|IvParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|CompressionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_comment
comment|/**  * Encryption helpers  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CryptoUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|RSSEC_KEY_STORE_TYPE
init|=
literal|"rs.security.keystore.type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RSSEC_KEY_STORE_PSWD
init|=
literal|"rs.security.keystore.password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RSSEC_KEY_PSWD
init|=
literal|"rs.security.key.password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RSSEC_KEY_STORE_ALIAS
init|=
literal|"rs.security.keystore.alias"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RSSEC_KEY_STORE_FILE
init|=
literal|"rs.security.keystore.file"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RSSEC_PRINCIPAL_NAME
init|=
literal|"rs.security.principal.name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RSSEC_SIG_KEY_PSWD_PROVIDER
init|=
literal|"rs.security.signature.key.password.provider"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RSSEC_DECRYPT_KEY_PSWD_PROVIDER
init|=
literal|"rs.security.decryption.key.password.provider"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CryptoUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CryptoUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|String
name|encodeSecretKey
parameter_list|(
name|SecretKey
name|key
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|encodeBytes
argument_list|(
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptSecretKey
parameter_list|(
name|SecretKey
name|secretKey
parameter_list|,
name|PublicKey
name|publicKey
parameter_list|)
throws|throws
name|SecurityException
block|{
name|KeyProperties
name|props
init|=
operator|new
name|KeyProperties
argument_list|(
name|publicKey
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|encryptSecretKey
argument_list|(
name|secretKey
argument_list|,
name|publicKey
argument_list|,
name|props
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptSecretKey
parameter_list|(
name|SecretKey
name|secretKey
parameter_list|,
name|PublicKey
name|publicKey
parameter_list|,
name|KeyProperties
name|props
parameter_list|)
throws|throws
name|SecurityException
block|{
name|byte
index|[]
name|encryptedBytes
init|=
name|encryptBytes
argument_list|(
name|secretKey
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|publicKey
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|encodeBytes
argument_list|(
name|encryptedBytes
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|generateSecureRandomBytes
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|SecureRandom
name|sr
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|sr
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
specifier|public
specifier|static
name|RSAPublicKey
name|getRSAPublicKey
parameter_list|(
name|String
name|encodedModulus
parameter_list|,
name|String
name|encodedPublicExponent
parameter_list|)
block|{
try|try
block|{
return|return
name|getRSAPublicKey
argument_list|(
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|encodedModulus
argument_list|)
argument_list|,
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|encodedPublicExponent
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RSAPublicKey
name|getRSAPublicKey
parameter_list|(
name|byte
index|[]
name|modulusBytes
parameter_list|,
name|byte
index|[]
name|publicExponentBytes
parameter_list|)
block|{
try|try
block|{
return|return
name|getRSAPublicKey
argument_list|(
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
argument_list|,
name|modulusBytes
argument_list|,
name|publicExponentBytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RSAPublicKey
name|getRSAPublicKey
parameter_list|(
name|KeyFactory
name|factory
parameter_list|,
name|byte
index|[]
name|modulusBytes
parameter_list|,
name|byte
index|[]
name|publicExponentBytes
parameter_list|)
block|{
name|BigInteger
name|modulus
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|modulusBytes
argument_list|)
decl_stmt|;
name|BigInteger
name|publicExponent
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|publicExponentBytes
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|RSAPublicKey
operator|)
name|factory
operator|.
name|generatePublic
argument_list|(
operator|new
name|RSAPublicKeySpec
argument_list|(
name|modulus
argument_list|,
name|publicExponent
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Certificate
name|loadCertificate
parameter_list|(
name|InputStream
name|storeLocation
parameter_list|,
name|char
index|[]
name|storePassword
parameter_list|,
name|String
name|alias
parameter_list|,
name|String
name|storeType
parameter_list|)
block|{
name|KeyStore
name|keyStore
init|=
name|loadKeyStore
argument_list|(
name|storeLocation
argument_list|,
name|storePassword
argument_list|,
name|storeType
argument_list|)
decl_stmt|;
return|return
name|loadCertificate
argument_list|(
name|keyStore
argument_list|,
name|alias
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Certificate
name|loadCertificate
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
try|try
block|{
return|return
name|keyStore
operator|.
name|getCertificate
argument_list|(
name|alias
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|PublicKey
name|loadPublicKey
parameter_list|(
name|InputStream
name|storeLocation
parameter_list|,
name|char
index|[]
name|storePassword
parameter_list|,
name|String
name|alias
parameter_list|,
name|String
name|storeType
parameter_list|)
block|{
return|return
name|loadCertificate
argument_list|(
name|storeLocation
argument_list|,
name|storePassword
argument_list|,
name|alias
argument_list|,
name|storeType
argument_list|)
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|PublicKey
name|loadPublicKey
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
return|return
name|loadCertificate
argument_list|(
name|keyStore
argument_list|,
name|alias
argument_list|)
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|PublicKey
name|loadPublicKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|KeyStore
name|keyStore
init|=
name|CryptoUtils
operator|.
name|loadPersistKeyStore
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|CryptoUtils
operator|.
name|loadPublicKey
argument_list|(
name|keyStore
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|RSSEC_KEY_STORE_ALIAS
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PublicKey
name|loadPublicKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocProp
parameter_list|)
block|{
return|return
name|loadPublicKey
argument_list|(
name|m
argument_list|,
name|keyStoreLocProp
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PublicKey
name|loadPublicKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocPropPreferred
parameter_list|,
name|String
name|keyStoreLocPropDefault
parameter_list|)
block|{
name|String
name|keyStoreLoc
init|=
name|getMessageProperty
argument_list|(
name|m
argument_list|,
name|keyStoreLocPropPreferred
argument_list|,
name|keyStoreLocPropDefault
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
name|ResourceUtils
operator|.
name|loadProperties
argument_list|(
name|keyStoreLoc
argument_list|,
name|bus
argument_list|)
decl_stmt|;
return|return
name|CryptoUtils
operator|.
name|loadPublicKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getMessageProperty
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocPropPreferred
parameter_list|,
name|String
name|keyStoreLocPropDefault
parameter_list|)
block|{
name|String
name|propLoc
init|=
operator|(
name|String
operator|)
name|MessageUtils
operator|.
name|getContextualProperty
argument_list|(
name|m
argument_list|,
name|keyStoreLocPropPreferred
argument_list|,
name|keyStoreLocPropDefault
argument_list|)
decl_stmt|;
if|if
condition|(
name|propLoc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
return|return
name|propLoc
return|;
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|PrivateKeyPasswordProvider
name|provider
parameter_list|)
block|{
name|KeyStore
name|keyStore
init|=
name|loadKeyStore
argument_list|(
name|props
argument_list|,
name|bus
argument_list|)
decl_stmt|;
return|return
name|loadPrivateKey
argument_list|(
name|keyStore
argument_list|,
name|props
argument_list|,
name|bus
argument_list|,
name|provider
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|,
name|Properties
name|props
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|PrivateKeyPasswordProvider
name|provider
parameter_list|)
block|{
name|String
name|keyPswd
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|RSSEC_KEY_PSWD
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|RSSEC_KEY_STORE_ALIAS
argument_list|)
decl_stmt|;
name|char
index|[]
name|keyPswdChars
init|=
name|provider
operator|!=
literal|null
condition|?
name|provider
operator|.
name|getPassword
argument_list|(
name|props
argument_list|)
else|:
name|keyPswd
operator|!=
literal|null
condition|?
name|keyPswd
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
name|loadPrivateKey
argument_list|(
name|keyStore
argument_list|,
name|keyPswdChars
argument_list|,
name|alias
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|InputStream
name|storeLocation
parameter_list|,
name|char
index|[]
name|storePassword
parameter_list|,
name|char
index|[]
name|keyPassword
parameter_list|,
name|String
name|alias
parameter_list|,
name|String
name|storeType
parameter_list|)
block|{
name|KeyStore
name|keyStore
init|=
name|loadKeyStore
argument_list|(
name|storeLocation
argument_list|,
name|storePassword
argument_list|,
name|storeType
argument_list|)
decl_stmt|;
return|return
name|loadPrivateKey
argument_list|(
name|keyStore
argument_list|,
name|keyPassword
argument_list|,
name|alias
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|,
name|char
index|[]
name|keyPassword
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
try|try
block|{
name|KeyStore
operator|.
name|PrivateKeyEntry
name|pkEntry
init|=
operator|(
name|KeyStore
operator|.
name|PrivateKeyEntry
operator|)
name|keyStore
operator|.
name|getEntry
argument_list|(
name|alias
argument_list|,
operator|new
name|KeyStore
operator|.
name|PasswordProtection
argument_list|(
name|keyPassword
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|pkEntry
operator|.
name|getPrivateKey
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocProp
parameter_list|,
name|String
name|passwordProviderProp
parameter_list|)
block|{
return|return
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|keyStoreLocProp
argument_list|,
literal|null
argument_list|,
name|passwordProviderProp
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|keyStoreLocPropPreferred
parameter_list|,
name|String
name|keyStoreLocPropDefault
parameter_list|,
name|String
name|passwordProviderProp
parameter_list|)
block|{
name|String
name|keyStoreLoc
init|=
name|getMessageProperty
argument_list|(
name|m
argument_list|,
name|keyStoreLocPropPreferred
argument_list|,
name|keyStoreLocPropDefault
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
name|ResourceUtils
operator|.
name|loadProperties
argument_list|(
name|keyStoreLoc
argument_list|,
name|bus
argument_list|)
decl_stmt|;
return|return
name|CryptoUtils
operator|.
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|passwordProviderProp
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|passwordProviderProp
parameter_list|)
block|{
name|Bus
name|bus
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|KeyStore
name|keyStore
init|=
name|CryptoUtils
operator|.
name|loadPersistKeyStore
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|PrivateKeyPasswordProvider
name|cb
init|=
operator|(
name|PrivateKeyPasswordProvider
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|passwordProviderProp
argument_list|)
decl_stmt|;
if|if
condition|(
name|cb
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SecurityContext
name|sc
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|!=
literal|null
condition|)
block|{
name|Principal
name|p
init|=
name|sc
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|RSSEC_PRINCIPAL_NAME
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|CryptoUtils
operator|.
name|loadPrivateKey
argument_list|(
name|keyStore
argument_list|,
name|props
argument_list|,
name|bus
argument_list|,
name|cb
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyStore
name|loadPersistKeyStore
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|KeyStore
name|keyStore
init|=
operator|(
name|KeyStore
operator|)
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|CryptoUtils
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStore
operator|==
literal|null
condition|)
block|{
name|keyStore
operator|=
name|CryptoUtils
operator|.
name|loadKeyStore
argument_list|(
name|props
argument_list|,
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|CryptoUtils
operator|.
name|RSSEC_KEY_STORE_FILE
argument_list|)
argument_list|,
name|keyStore
argument_list|)
expr_stmt|;
block|}
return|return
name|keyStore
return|;
block|}
specifier|public
specifier|static
name|KeyStore
name|loadKeyStore
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|String
name|keyStoreType
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|RSSEC_KEY_STORE_TYPE
argument_list|)
decl_stmt|;
name|String
name|keyStoreLoc
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|RSSEC_KEY_STORE_FILE
argument_list|)
decl_stmt|;
name|String
name|keyStorePswd
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|RSSEC_KEY_STORE_PSWD
argument_list|)
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|ResourceUtils
operator|.
name|getResourceStream
argument_list|(
name|keyStoreLoc
argument_list|,
name|bus
argument_list|)
decl_stmt|;
return|return
name|loadKeyStore
argument_list|(
name|is
argument_list|,
name|keyStorePswd
operator|.
name|toCharArray
argument_list|()
argument_list|,
name|keyStoreType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|KeyStore
name|loadKeyStore
parameter_list|(
name|InputStream
name|storeLocation
parameter_list|,
name|char
index|[]
name|storePassword
parameter_list|,
name|String
name|type
parameter_list|)
block|{
try|try
block|{
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|type
operator|==
literal|null
condition|?
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
else|:
name|type
argument_list|)
decl_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|storeLocation
argument_list|,
name|storePassword
argument_list|)
expr_stmt|;
return|return
name|ks
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RSAPrivateKey
name|getRSAPrivateKey
parameter_list|(
name|String
name|encodedModulus
parameter_list|,
name|String
name|encodedPrivateExponent
parameter_list|)
block|{
try|try
block|{
return|return
name|getRSAPrivateKey
argument_list|(
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|encodedModulus
argument_list|)
argument_list|,
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|encodedPrivateExponent
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ECPrivateKey
name|getECPrivateKey
parameter_list|(
name|String
name|encodedPrivateKey
parameter_list|)
block|{
try|try
block|{
return|return
name|getECPrivateKey
argument_list|(
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|encodedPrivateKey
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ECPrivateKey
name|getECPrivateKey
parameter_list|(
name|byte
index|[]
name|privateKey
parameter_list|)
block|{
try|try
block|{
name|KeyPairGenerator
name|kpg
init|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|ECGenParameterSpec
name|kpgparams
init|=
operator|new
name|ECGenParameterSpec
argument_list|(
literal|"secp256r1"
argument_list|)
decl_stmt|;
name|kpg
operator|.
name|initialize
argument_list|(
name|kpgparams
argument_list|)
expr_stmt|;
name|ECParameterSpec
name|params
init|=
operator|(
operator|(
name|ECPublicKey
operator|)
name|kpg
operator|.
name|generateKeyPair
argument_list|()
operator|.
name|getPublic
argument_list|()
operator|)
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|ECPrivateKeySpec
name|keySpec
init|=
operator|new
name|ECPrivateKeySpec
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|privateKey
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|KeyFactory
name|kf
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
return|return
operator|(
name|ECPrivateKey
operator|)
name|kf
operator|.
name|generatePrivate
argument_list|(
name|keySpec
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ECPublicKey
name|getECPublicKey
parameter_list|(
name|String
name|encodedXPoint
parameter_list|,
name|String
name|encodedYPoint
parameter_list|)
block|{
try|try
block|{
return|return
name|getECPublicKey
argument_list|(
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|encodedXPoint
argument_list|)
argument_list|,
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|encodedYPoint
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ECPublicKey
name|getECPublicKey
parameter_list|(
name|byte
index|[]
name|xPoint
parameter_list|,
name|byte
index|[]
name|yPoint
parameter_list|)
block|{
try|try
block|{
name|KeyPairGenerator
name|kpg
init|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|ECGenParameterSpec
name|kpgparams
init|=
operator|new
name|ECGenParameterSpec
argument_list|(
literal|"secp256r1"
argument_list|)
decl_stmt|;
name|kpg
operator|.
name|initialize
argument_list|(
name|kpgparams
argument_list|)
expr_stmt|;
name|ECParameterSpec
name|params
init|=
operator|(
operator|(
name|ECPublicKey
operator|)
name|kpg
operator|.
name|generateKeyPair
argument_list|()
operator|.
name|getPublic
argument_list|()
operator|)
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|ECPoint
name|ecPoint
init|=
operator|new
name|ECPoint
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|xPoint
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|yPoint
argument_list|)
argument_list|)
decl_stmt|;
name|ECPublicKeySpec
name|keySpec
init|=
operator|new
name|ECPublicKeySpec
argument_list|(
name|ecPoint
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|KeyFactory
name|kf
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
return|return
operator|(
name|ECPublicKey
operator|)
name|kf
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|AlgorithmParameterSpec
name|getContentEncryptionCipherSpec
parameter_list|(
name|int
name|authTagLength
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
block|{
comment|// this can be overridden if needed
if|if
condition|(
name|authTagLength
operator|>
literal|0
condition|)
block|{
return|return
name|CryptoUtils
operator|.
name|getGCMParameterSpec
argument_list|(
name|authTagLength
argument_list|,
name|iv
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|iv
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|IvParameterSpec
argument_list|(
name|iv
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|AlgorithmParameterSpec
name|getGCMParameterSpec
parameter_list|(
name|int
name|authTagLength
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
block|{
try|try
block|{
comment|// In case Java 6 compiler is used
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"javax.crypto.spec.GCMParameterSpec"
argument_list|,
name|CryptoUtils
operator|.
name|class
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|ctr
init|=
name|c
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|int
operator|.
name|class
block|,
name|byte
index|[]
operator|.
expr|class
block|}
argument_list|)
decl_stmt|;
return|return
operator|(
name|AlgorithmParameterSpec
operator|)
name|ctr
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|authTagLength
block|,
name|iv
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
operator|new
name|IvParameterSpec
argument_list|(
name|iv
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|byte
index|[]
name|signData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|PrivateKey
name|key
parameter_list|,
name|String
name|signAlgo
parameter_list|)
block|{
return|return
name|signData
argument_list|(
name|data
argument_list|,
name|key
argument_list|,
name|signAlgo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|signData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|PrivateKey
name|key
parameter_list|,
name|String
name|signAlgo
parameter_list|,
name|SecureRandom
name|random
parameter_list|,
name|AlgorithmParameterSpec
name|params
parameter_list|)
block|{
try|try
block|{
name|Signature
name|s
init|=
name|getSignature
argument_list|(
name|key
argument_list|,
name|signAlgo
argument_list|,
name|random
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|s
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|sign
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Signature
name|getSignature
parameter_list|(
name|PrivateKey
name|key
parameter_list|,
name|String
name|signAlgo
parameter_list|,
name|SecureRandom
name|random
parameter_list|,
name|AlgorithmParameterSpec
name|params
parameter_list|)
block|{
try|try
block|{
name|Signature
name|s
init|=
name|Signature
operator|.
name|getInstance
argument_list|(
name|signAlgo
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|s
operator|.
name|initSign
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|initSign
argument_list|(
name|key
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|setParameter
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|verifySignature
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|byte
index|[]
name|signature
parameter_list|,
name|PublicKey
name|key
parameter_list|,
name|String
name|signAlgo
parameter_list|)
block|{
return|return
name|verifySignature
argument_list|(
name|data
argument_list|,
name|signature
argument_list|,
name|key
argument_list|,
name|signAlgo
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|verifySignature
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|byte
index|[]
name|signature
parameter_list|,
name|PublicKey
name|key
parameter_list|,
name|String
name|signAlgo
parameter_list|,
name|AlgorithmParameterSpec
name|params
parameter_list|)
block|{
try|try
block|{
name|Signature
name|s
init|=
name|Signature
operator|.
name|getInstance
argument_list|(
name|signAlgo
argument_list|)
decl_stmt|;
name|s
operator|.
name|initVerify
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|setParameter
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|verify
argument_list|(
name|signature
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RSAPrivateKey
name|getRSAPrivateKey
parameter_list|(
name|byte
index|[]
name|modulusBytes
parameter_list|,
name|byte
index|[]
name|privateExponentBytes
parameter_list|)
block|{
try|try
block|{
return|return
name|getRSAPrivateKey
argument_list|(
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
argument_list|,
name|modulusBytes
argument_list|,
name|privateExponentBytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RSAPrivateKey
name|getRSAPrivateKey
parameter_list|(
name|KeyFactory
name|factory
parameter_list|,
name|byte
index|[]
name|modulusBytes
parameter_list|,
name|byte
index|[]
name|privateExponentBytes
parameter_list|)
block|{
name|BigInteger
name|modulus
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|modulusBytes
argument_list|)
decl_stmt|;
name|BigInteger
name|privateExponent
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|privateExponentBytes
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|RSAPrivateKey
operator|)
name|factory
operator|.
name|generatePrivate
argument_list|(
operator|new
name|RSAPrivateKeySpec
argument_list|(
name|modulus
argument_list|,
name|privateExponent
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|SecretKey
name|getSecretKey
parameter_list|(
name|String
name|symEncAlgo
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|getSecretKey
argument_list|(
operator|new
name|KeyProperties
argument_list|(
name|symEncAlgo
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|getSecretKey
parameter_list|(
name|String
name|symEncAlgo
parameter_list|,
name|int
name|keySize
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|getSecretKey
argument_list|(
operator|new
name|KeyProperties
argument_list|(
name|symEncAlgo
argument_list|,
name|keySize
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|getSecretKey
parameter_list|(
name|KeyProperties
name|props
parameter_list|)
throws|throws
name|SecurityException
block|{
try|try
block|{
name|KeyGenerator
name|keyGen
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|props
operator|.
name|getKeyAlgo
argument_list|()
argument_list|)
decl_stmt|;
name|AlgorithmParameterSpec
name|algoSpec
init|=
name|props
operator|.
name|getAlgoSpec
argument_list|()
decl_stmt|;
name|SecureRandom
name|random
init|=
name|props
operator|.
name|getSecureRandom
argument_list|()
decl_stmt|;
if|if
condition|(
name|algoSpec
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|random
operator|!=
literal|null
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
name|algoSpec
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyGen
operator|.
name|init
argument_list|(
name|algoSpec
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|keySize
init|=
name|props
operator|.
name|getKeySize
argument_list|()
decl_stmt|;
if|if
condition|(
name|keySize
operator|==
operator|-
literal|1
condition|)
block|{
name|keySize
operator|=
literal|128
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|!=
literal|null
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
name|keySize
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyGen
operator|.
name|init
argument_list|(
name|keySize
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keyGen
operator|.
name|generateKey
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|decryptSequence
parameter_list|(
name|String
name|encodedToken
parameter_list|,
name|String
name|encodedSecretKey
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|decryptSequence
argument_list|(
name|encodedToken
argument_list|,
name|encodedSecretKey
argument_list|,
operator|new
name|KeyProperties
argument_list|(
literal|"AES"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|decryptSequence
parameter_list|(
name|String
name|encodedData
parameter_list|,
name|String
name|encodedSecretKey
parameter_list|,
name|KeyProperties
name|props
parameter_list|)
throws|throws
name|SecurityException
block|{
name|SecretKey
name|key
init|=
name|decodeSecretKey
argument_list|(
name|encodedSecretKey
argument_list|,
name|props
operator|.
name|getKeyAlgo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|decryptSequence
argument_list|(
name|encodedData
argument_list|,
name|key
argument_list|,
name|props
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|decryptSequence
parameter_list|(
name|String
name|encodedData
parameter_list|,
name|Key
name|secretKey
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|decryptSequence
argument_list|(
name|encodedData
argument_list|,
name|secretKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|decryptSequence
parameter_list|(
name|String
name|encodedData
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|KeyProperties
name|props
parameter_list|)
throws|throws
name|SecurityException
block|{
name|byte
index|[]
name|encryptedBytes
init|=
name|decodeSequence
argument_list|(
name|encodedData
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|decryptBytes
argument_list|(
name|encryptedBytes
argument_list|,
name|secretKey
argument_list|,
name|props
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|encryptSequence
parameter_list|(
name|String
name|sequence
parameter_list|,
name|Key
name|secretKey
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|encryptSequence
argument_list|(
name|sequence
argument_list|,
name|secretKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptSequence
parameter_list|(
name|String
name|sequence
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|KeyProperties
name|keyProps
parameter_list|)
throws|throws
name|SecurityException
block|{
try|try
block|{
name|byte
index|[]
name|bytes
init|=
name|encryptBytes
argument_list|(
name|sequence
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|secretKey
argument_list|,
name|keyProps
argument_list|)
decl_stmt|;
return|return
name|encodeBytes
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|encodeBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|SecurityException
block|{
try|try
block|{
return|return
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|byte
index|[]
name|encryptBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|Key
name|secretKey
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|encryptBytes
argument_list|(
name|bytes
argument_list|,
name|secretKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|encryptBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|KeyProperties
name|keyProps
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|processBytes
argument_list|(
name|bytes
argument_list|,
name|secretKey
argument_list|,
name|keyProps
argument_list|,
name|Cipher
operator|.
name|ENCRYPT_MODE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decryptBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|Key
name|secretKey
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|decryptBytes
argument_list|(
name|bytes
argument_list|,
name|secretKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decryptBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|KeyProperties
name|keyProps
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|processBytes
argument_list|(
name|bytes
argument_list|,
name|secretKey
argument_list|,
name|keyProps
argument_list|,
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|wrapSecretKey
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|Key
name|wrapperKey
parameter_list|,
name|String
name|wrapperKeyAlgo
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|wrapSecretKey
argument_list|(
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
name|convertJCECipherToSecretKeyName
argument_list|(
name|keyAlgo
argument_list|)
argument_list|)
argument_list|,
name|wrapperKey
argument_list|,
operator|new
name|KeyProperties
argument_list|(
name|wrapperKeyAlgo
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|wrapSecretKey
parameter_list|(
name|Key
name|secretKey
parameter_list|,
name|Key
name|wrapperKey
parameter_list|,
name|KeyProperties
name|keyProps
parameter_list|)
throws|throws
name|SecurityException
block|{
try|try
block|{
name|Cipher
name|c
init|=
name|initCipher
argument_list|(
name|wrapperKey
argument_list|,
name|keyProps
argument_list|,
name|Cipher
operator|.
name|WRAP_MODE
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|wrap
argument_list|(
name|secretKey
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|SecretKey
name|unwrapSecretKey
parameter_list|(
name|byte
index|[]
name|wrappedBytes
parameter_list|,
name|String
name|wrappedKeyAlgo
parameter_list|,
name|Key
name|unwrapperKey
parameter_list|,
name|String
name|unwrapperKeyAlgo
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|unwrapSecretKey
argument_list|(
name|wrappedBytes
argument_list|,
name|wrappedKeyAlgo
argument_list|,
name|unwrapperKey
argument_list|,
operator|new
name|KeyProperties
argument_list|(
name|unwrapperKeyAlgo
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|unwrapSecretKey
parameter_list|(
name|byte
index|[]
name|wrappedBytes
parameter_list|,
name|String
name|wrappedKeyAlgo
parameter_list|,
name|Key
name|unwrapperKey
parameter_list|,
name|KeyProperties
name|keyProps
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
operator|(
name|SecretKey
operator|)
name|unwrapKey
argument_list|(
name|wrappedBytes
argument_list|,
name|wrappedKeyAlgo
argument_list|,
name|unwrapperKey
argument_list|,
name|keyProps
argument_list|,
name|Cipher
operator|.
name|SECRET_KEY
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Key
name|unwrapKey
parameter_list|(
name|byte
index|[]
name|wrappedBytes
parameter_list|,
name|String
name|wrappedKeyAlgo
parameter_list|,
name|Key
name|unwrapperKey
parameter_list|,
name|KeyProperties
name|keyProps
parameter_list|,
name|int
name|wrappedKeyType
parameter_list|)
throws|throws
name|SecurityException
block|{
try|try
block|{
name|Cipher
name|c
init|=
name|initCipher
argument_list|(
name|unwrapperKey
argument_list|,
name|keyProps
argument_list|,
name|Cipher
operator|.
name|UNWRAP_MODE
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|unwrap
argument_list|(
name|wrappedBytes
argument_list|,
name|wrappedKeyAlgo
argument_list|,
name|wrappedKeyType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|processBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|Key
name|secretKey
parameter_list|,
name|KeyProperties
name|keyProps
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|SecurityException
block|{
name|boolean
name|compressionSupported
init|=
name|keyProps
operator|!=
literal|null
operator|&&
name|keyProps
operator|.
name|isCompressionSupported
argument_list|()
decl_stmt|;
if|if
condition|(
name|compressionSupported
operator|&&
name|mode
operator|==
name|Cipher
operator|.
name|ENCRYPT_MODE
condition|)
block|{
name|bytes
operator|=
name|CompressionUtils
operator|.
name|deflate
argument_list|(
name|bytes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Cipher
name|c
init|=
name|initCipher
argument_list|(
name|secretKey
argument_list|,
name|keyProps
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|int
name|blockSize
init|=
name|keyProps
operator|!=
literal|null
condition|?
name|keyProps
operator|.
name|getBlockSize
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|secretKey
operator|instanceof
name|SecretKey
operator|&&
name|blockSize
operator|==
operator|-
literal|1
condition|)
block|{
name|result
operator|=
name|c
operator|.
name|doFinal
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|blockSize
operator|==
operator|-
literal|1
condition|)
block|{
name|blockSize
operator|=
name|secretKey
operator|instanceof
name|PublicKey
condition|?
literal|117
else|:
literal|128
expr_stmt|;
block|}
name|boolean
name|updateRequired
init|=
name|keyProps
operator|!=
literal|null
operator|&&
name|keyProps
operator|.
name|getAdditionalData
argument_list|()
operator|!=
literal|null
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|offset
operator|+
name|blockSize
operator|<
name|bytes
operator|.
name|length
condition|;
name|offset
operator|+=
name|blockSize
control|)
block|{
name|byte
index|[]
name|next
init|=
operator|!
name|updateRequired
condition|?
name|c
operator|.
name|doFinal
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|blockSize
argument_list|)
else|:
name|c
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|result
operator|=
name|addToResult
argument_list|(
name|result
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|<
name|bytes
operator|.
name|length
condition|)
block|{
name|result
operator|=
name|addToResult
argument_list|(
name|result
argument_list|,
name|c
operator|.
name|doFinal
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|addToResult
argument_list|(
name|result
argument_list|,
name|c
operator|.
name|doFinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|compressionSupported
operator|&&
name|mode
operator|==
name|Cipher
operator|.
name|DECRYPT_MODE
condition|)
block|{
name|result
operator|=
name|IOUtils
operator|.
name|readBytesFromStream
argument_list|(
name|CompressionUtils
operator|.
name|inflate
argument_list|(
name|result
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Cipher
name|initCipher
parameter_list|(
name|Key
name|secretKey
parameter_list|,
name|KeyProperties
name|keyProps
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|SecurityException
block|{
try|try
block|{
name|String
name|algorithm
init|=
name|keyProps
operator|!=
literal|null
operator|&&
name|keyProps
operator|.
name|getKeyAlgo
argument_list|()
operator|!=
literal|null
condition|?
name|keyProps
operator|.
name|getKeyAlgo
argument_list|()
else|:
name|secretKey
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|Cipher
name|c
init|=
name|Cipher
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProps
operator|==
literal|null
operator|||
name|keyProps
operator|.
name|getAlgoSpec
argument_list|()
operator|==
literal|null
operator|&&
name|keyProps
operator|.
name|getSecureRandom
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|init
argument_list|(
name|mode
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AlgorithmParameterSpec
name|algoSpec
init|=
name|keyProps
operator|.
name|getAlgoSpec
argument_list|()
decl_stmt|;
name|SecureRandom
name|random
init|=
name|keyProps
operator|.
name|getSecureRandom
argument_list|()
decl_stmt|;
if|if
condition|(
name|algoSpec
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|init
argument_list|(
name|mode
argument_list|,
name|secretKey
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|init
argument_list|(
name|mode
argument_list|,
name|secretKey
argument_list|,
name|algoSpec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|init
argument_list|(
name|mode
argument_list|,
name|secretKey
argument_list|,
name|algoSpec
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|keyProps
operator|!=
literal|null
operator|&&
name|keyProps
operator|.
name|getAdditionalData
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: call updateAAD directly after switching to Java7
try|try
block|{
name|Method
name|m
init|=
name|Cipher
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"updateAAD"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|byte
index|[]
operator|.
expr|class
block|}
argument_list|)
decl_stmt|;
name|m
operator|.
name|invoke
argument_list|(
name|c
argument_list|,
operator|new
name|Object
index|[]
block|{
name|keyProps
operator|.
name|getAdditionalData
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|addToResult
parameter_list|(
name|byte
index|[]
name|prefix
parameter_list|,
name|byte
index|[]
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|suffix
operator|==
literal|null
operator|||
name|suffix
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|prefix
return|;
block|}
elseif|else
if|if
condition|(
name|prefix
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|suffix
return|;
block|}
else|else
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|prefix
operator|.
name|length
operator|+
name|suffix
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|prefix
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|prefix
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|suffix
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|prefix
operator|.
name|length
argument_list|,
name|suffix
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|public
specifier|static
name|SecretKey
name|decodeSecretKey
parameter_list|(
name|String
name|encodedSecretKey
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
name|decodeSecretKey
argument_list|(
name|encodedSecretKey
argument_list|,
literal|"AES"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|decodeSecretKey
parameter_list|(
name|String
name|encodedSecretKey
parameter_list|,
name|String
name|secretKeyAlgo
parameter_list|)
throws|throws
name|SecurityException
block|{
name|byte
index|[]
name|secretKeyBytes
init|=
name|decodeSequence
argument_list|(
name|encodedSecretKey
argument_list|)
decl_stmt|;
return|return
name|createSecretKeySpec
argument_list|(
name|secretKeyBytes
argument_list|,
name|secretKeyAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|decryptSecretKey
parameter_list|(
name|String
name|encodedEncryptedSecretKey
parameter_list|,
name|PrivateKey
name|privateKey
parameter_list|)
block|{
return|return
name|decryptSecretKey
argument_list|(
name|encodedEncryptedSecretKey
argument_list|,
literal|"AES"
argument_list|,
name|privateKey
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|decryptSecretKey
parameter_list|(
name|String
name|encodedEncryptedSecretKey
parameter_list|,
name|String
name|secretKeyAlgo
parameter_list|,
name|PrivateKey
name|privateKey
parameter_list|)
throws|throws
name|SecurityException
block|{
name|KeyProperties
name|props
init|=
operator|new
name|KeyProperties
argument_list|(
name|privateKey
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|decryptSecretKey
argument_list|(
name|encodedEncryptedSecretKey
argument_list|,
name|secretKeyAlgo
argument_list|,
name|props
argument_list|,
name|privateKey
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|decryptSecretKey
parameter_list|(
name|String
name|encodedEncryptedSecretKey
parameter_list|,
name|String
name|secretKeyAlgo
parameter_list|,
name|KeyProperties
name|props
parameter_list|,
name|PrivateKey
name|privateKey
parameter_list|)
throws|throws
name|SecurityException
block|{
name|byte
index|[]
name|encryptedBytes
init|=
name|decodeSequence
argument_list|(
name|encodedEncryptedSecretKey
argument_list|)
decl_stmt|;
name|byte
index|[]
name|descryptedBytes
init|=
name|decryptBytes
argument_list|(
name|encryptedBytes
argument_list|,
name|privateKey
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|createSecretKeySpec
argument_list|(
name|descryptedBytes
argument_list|,
name|secretKeyAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|createSecretKeySpec
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
return|return
operator|new
name|SecretKeySpec
argument_list|(
name|bytes
argument_list|,
name|convertJCECipherToSecretKeyName
argument_list|(
name|algo
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decodeSequence
parameter_list|(
name|String
name|encodedSequence
parameter_list|)
throws|throws
name|SecurityException
block|{
try|try
block|{
return|return
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|encodedSequence
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|convertJCECipherToSecretKeyName
parameter_list|(
name|String
name|jceCipherName
parameter_list|)
block|{
if|if
condition|(
name|jceCipherName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|jceCipherName
operator|.
name|startsWith
argument_list|(
literal|"AES"
argument_list|)
condition|)
block|{
return|return
literal|"AES"
return|;
block|}
elseif|else
if|if
condition|(
name|jceCipherName
operator|.
name|startsWith
argument_list|(
literal|"DESede"
argument_list|)
condition|)
block|{
return|return
literal|"DESede"
return|;
block|}
elseif|else
if|if
condition|(
name|jceCipherName
operator|.
name|startsWith
argument_list|(
literal|"SEED"
argument_list|)
condition|)
block|{
return|return
literal|"SEED"
return|;
block|}
elseif|else
if|if
condition|(
name|jceCipherName
operator|.
name|startsWith
argument_list|(
literal|"Camellia"
argument_list|)
condition|)
block|{
return|return
literal|"Camellia"
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

