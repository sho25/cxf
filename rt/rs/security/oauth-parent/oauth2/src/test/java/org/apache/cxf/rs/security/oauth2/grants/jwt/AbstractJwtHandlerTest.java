begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|jwt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMockRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractJwtHandlerTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|UNSIGNED_TEXT
init|=
literal|"myUnsignedText"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|SIGNATURE
init|=
literal|"mySignature"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
annotation|@
name|Rule
comment|//CHECKSTYLE:OFF
specifier|public
name|EasyMockRule
name|rule
init|=
operator|new
name|EasyMockRule
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|//CHECKSTYLE:ON
specifier|private
name|AbstractJwtHandler
name|handler
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|JwsSignatureVerifier
name|signatureVerifier
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|JoseHeaders
name|headers
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|handler
operator|=
operator|new
name|AbstractJwtHandler
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"someGrantType"
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ServerAccessToken
name|createAccessToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
name|handler
operator|.
name|setJwsVerifier
argument_list|(
name|signatureVerifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateSignatureWithValidSignature
parameter_list|()
block|{
name|expect
argument_list|(
name|signatureVerifier
operator|.
name|verify
argument_list|(
name|headers
argument_list|,
name|UNSIGNED_TEXT
argument_list|,
name|SIGNATURE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|signatureVerifier
argument_list|)
expr_stmt|;
name|handler
operator|.
name|validateSignature
argument_list|(
name|headers
argument_list|,
name|UNSIGNED_TEXT
argument_list|,
name|SIGNATURE
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|signatureVerifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateSignatureWithInvalidSignature
parameter_list|()
block|{
name|expect
argument_list|(
name|signatureVerifier
operator|.
name|verify
argument_list|(
name|headers
argument_list|,
name|UNSIGNED_TEXT
argument_list|,
name|SIGNATURE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|signatureVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|validateSignature
argument_list|(
name|headers
argument_list|,
name|UNSIGNED_TEXT
argument_list|,
name|SIGNATURE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"OAuthServiceException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|expected
parameter_list|)
block|{         }
name|verify
argument_list|(
name|signatureVerifier
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

