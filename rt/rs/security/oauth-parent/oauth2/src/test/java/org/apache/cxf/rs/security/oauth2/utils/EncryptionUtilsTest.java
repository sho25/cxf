begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AccessTokenRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|UserSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|bearer
operator|.
name|BearerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|refresh
operator|.
name|RefreshToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|EncryptionUtilsTest
extends|extends
name|Assert
block|{
specifier|private
name|CustomProvider
name|p
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|p
operator|=
operator|new
name|CustomProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|p
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptDecryptToken
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTokenRegistration
name|atr
init|=
name|prepareTokenRegistration
argument_list|()
decl_stmt|;
comment|// encrypt
name|ServerAccessToken
name|token
init|=
name|p
operator|.
name|createAccessToken
argument_list|(
name|atr
argument_list|)
decl_stmt|;
comment|// decrypt
name|ServerAccessToken
name|token2
init|=
name|p
operator|.
name|getAccessToken
argument_list|(
name|token
operator|.
name|getTokenKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// compare tokens
name|compareAccessTokens
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareAccessTokens
parameter_list|(
name|ServerAccessToken
name|token
parameter_list|,
name|ServerAccessToken
name|token2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|token
operator|.
name|getTokenKey
argument_list|()
argument_list|,
name|token2
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|,
name|token2
operator|.
name|getTokenType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|getIssuedAt
argument_list|()
argument_list|,
name|token2
operator|.
name|getIssuedAt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|getExpiresIn
argument_list|()
argument_list|,
name|token2
operator|.
name|getExpiresIn
argument_list|()
argument_list|)
expr_stmt|;
name|Client
name|regClient1
init|=
name|token
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|Client
name|regClient2
init|=
name|token2
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|regClient1
operator|.
name|getClientId
argument_list|()
argument_list|,
name|regClient2
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|UserSubject
name|endUser1
init|=
name|token
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|UserSubject
name|endUser2
init|=
name|token2
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|endUser1
operator|.
name|getLogin
argument_list|()
argument_list|,
name|endUser2
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endUser1
operator|.
name|getId
argument_list|()
argument_list|,
name|endUser2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endUser1
operator|.
name|getRoles
argument_list|()
argument_list|,
name|endUser2
operator|.
name|getRoles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|getRefreshToken
argument_list|()
argument_list|,
name|token2
operator|.
name|getRefreshToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|getAudience
argument_list|()
argument_list|,
name|token2
operator|.
name|getAudience
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|getGrantType
argument_list|()
argument_list|,
name|token2
operator|.
name|getGrantType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
operator|.
name|getParameters
argument_list|()
argument_list|,
name|token2
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|permissions
init|=
name|token
operator|.
name|getScopes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|permissions2
init|=
name|token2
operator|.
name|getScopes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permissions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permissions2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OAuthPermission
name|perm1
init|=
name|permissions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|OAuthPermission
name|perm2
init|=
name|permissions2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|perm1
operator|.
name|getPermission
argument_list|()
argument_list|,
name|perm2
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|perm1
operator|.
name|getDescription
argument_list|()
argument_list|,
name|perm2
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|RefreshToken
name|refreshToken
init|=
name|EncryptionUtils
operator|.
name|decryptRefreshToken
argument_list|(
name|p
argument_list|,
name|token2
operator|.
name|getRefreshToken
argument_list|()
argument_list|,
name|p
operator|.
name|tokenKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1200L
argument_list|,
name|refreshToken
operator|.
name|getExpiresIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AccessTokenRegistration
name|prepareTokenRegistration
parameter_list|()
block|{
name|AccessTokenRegistration
name|atr
init|=
operator|new
name|AccessTokenRegistration
argument_list|()
decl_stmt|;
name|Client
name|regClient
init|=
name|p
operator|.
name|getClient
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|atr
operator|.
name|setClient
argument_list|(
name|regClient
argument_list|)
expr_stmt|;
name|atr
operator|.
name|setGrantType
argument_list|(
literal|"code"
argument_list|)
expr_stmt|;
name|atr
operator|.
name|setAudience
argument_list|(
literal|"http://localhost"
argument_list|)
expr_stmt|;
name|UserSubject
name|endUser
init|=
operator|new
name|UserSubject
argument_list|(
literal|"Barry"
argument_list|,
literal|"BarryId"
argument_list|)
decl_stmt|;
name|atr
operator|.
name|setSubject
argument_list|(
name|endUser
argument_list|)
expr_stmt|;
name|endUser
operator|.
name|setRoles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|atr
return|;
block|}
specifier|private
class|class
name|CustomProvider
implements|implements
name|OAuthDataProvider
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Client
argument_list|>
name|clients
decl_stmt|;
specifier|private
name|SecretKey
name|tokenKey
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|refreshTokens
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CustomProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|tokenKey
operator|=
name|EncryptionUtils
operator|.
name|getSecretKey
argument_list|()
expr_stmt|;
name|clients
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"1"
argument_list|,
operator|new
name|Client
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Client
name|getClient
parameter_list|(
name|String
name|clientId
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|clients
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerAccessToken
name|createAccessToken
parameter_list|(
name|AccessTokenRegistration
name|accessTokenReg
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|ServerAccessToken
name|token
init|=
name|createNewToken
argument_list|(
name|accessTokenReg
argument_list|)
decl_stmt|;
name|String
name|encryptedToken
init|=
name|EncryptionUtils
operator|.
name|encryptTokenWithSecretKey
argument_list|(
name|token
argument_list|,
name|tokenKey
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|encryptedToken
argument_list|)
expr_stmt|;
name|refreshTokens
operator|.
name|put
argument_list|(
name|token
operator|.
name|getRefreshToken
argument_list|()
argument_list|,
name|encryptedToken
argument_list|)
expr_stmt|;
name|token
operator|.
name|setTokenKey
argument_list|(
name|encryptedToken
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerAccessToken
name|getAccessToken
parameter_list|(
name|String
name|accessTokenKey
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
name|EncryptionUtils
operator|.
name|decryptToken
argument_list|(
name|this
argument_list|,
name|accessTokenKey
argument_list|,
name|tokenKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerAccessToken
name|refreshAccessToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|refreshToken
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScopes
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAccessToken
parameter_list|(
name|ServerAccessToken
name|accessToken
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
name|tokens
operator|.
name|remove
argument_list|(
name|accessToken
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|revokeToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|token
parameter_list|,
name|String
name|tokenTypeHint
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
comment|// complete
block|}
annotation|@
name|Override
specifier|public
name|ServerAccessToken
name|getPreauthorizedToken
parameter_list|(
name|Client
name|client
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScopes
parameter_list|,
name|UserSubject
name|subject
parameter_list|,
name|String
name|grantType
parameter_list|)
throws|throws
name|OAuthServiceException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|convertScopeToPermissions
parameter_list|(
name|Client
name|client
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScope
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|private
name|ServerAccessToken
name|createNewToken
parameter_list|(
name|AccessTokenRegistration
name|accessTokenReg
parameter_list|)
block|{
name|ServerAccessToken
name|token
init|=
operator|new
name|BearerAccessToken
argument_list|(
name|accessTokenReg
operator|.
name|getClient
argument_list|()
argument_list|,
literal|3600L
argument_list|)
decl_stmt|;
name|token
operator|.
name|setSubject
argument_list|(
name|accessTokenReg
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|RefreshToken
name|refreshToken
init|=
operator|new
name|RefreshToken
argument_list|(
name|accessTokenReg
operator|.
name|getClient
argument_list|()
argument_list|,
literal|"refresh"
argument_list|,
literal|1200L
argument_list|,
name|OAuthUtils
operator|.
name|getIssuedAt
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|encryptedRefreshToken
init|=
name|EncryptionUtils
operator|.
name|encryptTokenWithSecretKey
argument_list|(
name|refreshToken
argument_list|,
name|tokenKey
argument_list|)
decl_stmt|;
name|token
operator|.
name|setRefreshToken
argument_list|(
name|encryptedRefreshToken
argument_list|)
expr_stmt|;
name|token
operator|.
name|setGrantType
argument_list|(
name|accessTokenReg
operator|.
name|getGrantType
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setAudience
argument_list|(
name|accessTokenReg
operator|.
name|getAudience
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"param"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|.
name|setScopes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|OAuthPermission
argument_list|(
literal|"read"
argument_list|,
literal|"read permission"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
block|}
block|}
end_class

end_unit

