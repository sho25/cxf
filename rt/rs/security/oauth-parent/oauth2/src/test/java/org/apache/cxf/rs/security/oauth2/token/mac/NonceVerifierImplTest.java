begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|token
operator|.
name|mac
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|mac
operator|.
name|Nonce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|mac
operator|.
name|NonceHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|mac
operator|.
name|NonceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|mac
operator|.
name|NonceVerifierImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|NonceVerifierImplTest
extends|extends
name|Assert
block|{
specifier|private
name|NonceVerifierImpl
name|nonceVerifier
decl_stmt|;
specifier|private
name|NonceStore
name|nonceStore
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|NonceStore
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|nonceVerifier
operator|=
operator|new
name|NonceVerifierImpl
argument_list|()
expr_stmt|;
name|nonceVerifier
operator|.
name|setNonceStore
argument_list|(
name|nonceStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyNonce
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Nonce
name|nonce1
init|=
operator|new
name|Nonce
argument_list|(
literal|"nonce1"
argument_list|,
name|now
operator|-
literal|2000
argument_list|)
decl_stmt|;
comment|// first request 2 seconds back
name|Nonce
name|nonce2
init|=
operator|new
name|Nonce
argument_list|(
literal|"nonce2"
argument_list|,
name|now
operator|-
literal|1000
argument_list|)
decl_stmt|;
comment|// second request 1 second back
name|NonceHistory
name|nonceHistory
init|=
operator|new
name|NonceHistory
argument_list|(
literal|200
argument_list|,
name|nonce1
argument_list|)
decl_stmt|;
comment|// first request time delta is 200ms
name|nonceHistory
operator|.
name|addNonce
argument_list|(
name|nonce2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|nonceStore
operator|.
name|getNonceHistory
argument_list|(
literal|"testTokenKey"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|nonceHistory
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|nonceStore
argument_list|)
expr_stmt|;
name|nonceVerifier
operator|.
name|setAllowedWindow
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// allowed window is 2 seconds
name|nonceVerifier
operator|.
name|verifyNonce
argument_list|(
literal|"testTokenKey"
argument_list|,
literal|"nonce3"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|now
operator|-
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|nonceStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyNonceDuplicateNonce
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Nonce
name|nonce1
init|=
operator|new
name|Nonce
argument_list|(
literal|"nonce1"
argument_list|,
name|now
operator|-
literal|2000
argument_list|)
decl_stmt|;
comment|// first request 2 seconds back
name|Nonce
name|nonce2
init|=
operator|new
name|Nonce
argument_list|(
literal|"nonce2"
argument_list|,
name|now
operator|-
literal|1000
argument_list|)
decl_stmt|;
comment|// second request 1 second back
name|NonceHistory
name|nonceHistory
init|=
operator|new
name|NonceHistory
argument_list|(
literal|200
argument_list|,
name|nonce1
argument_list|)
decl_stmt|;
comment|// first request time delta is 200ms
name|nonceHistory
operator|.
name|addNonce
argument_list|(
name|nonce2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|nonceStore
operator|.
name|getNonceHistory
argument_list|(
literal|"testTokenKey"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|nonceHistory
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|nonceStore
argument_list|)
expr_stmt|;
name|nonceVerifier
operator|.
name|setAllowedWindow
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// allowed window is 2 seconds
try|try
block|{
name|nonceVerifier
operator|.
name|verifyNonce
argument_list|(
literal|"testTokenKey"
argument_list|,
literal|"nonce2"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|now
operator|-
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Duplicate nonce"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyNonceInvalidTimestamp
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Nonce
name|nonce1
init|=
operator|new
name|Nonce
argument_list|(
literal|"nonce1"
argument_list|,
name|now
operator|-
literal|2000
argument_list|)
decl_stmt|;
comment|// first request 2 seconds back
name|Nonce
name|nonce2
init|=
operator|new
name|Nonce
argument_list|(
literal|"nonce2"
argument_list|,
name|now
operator|-
literal|1000
argument_list|)
decl_stmt|;
comment|// second request 1 second back
name|NonceHistory
name|nonceHistory
init|=
operator|new
name|NonceHistory
argument_list|(
literal|200
argument_list|,
name|nonce1
argument_list|)
decl_stmt|;
comment|// first request time delta is 200ms
name|nonceHistory
operator|.
name|addNonce
argument_list|(
name|nonce2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|nonceStore
operator|.
name|getNonceHistory
argument_list|(
literal|"testTokenKey"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|nonceHistory
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|nonceStore
argument_list|)
expr_stmt|;
name|nonceVerifier
operator|.
name|setAllowedWindow
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// allowed window is 2 seconds
try|try
block|{
name|nonceVerifier
operator|.
name|verifyNonce
argument_list|(
literal|"testTokenKey"
argument_list|,
literal|"nonce3"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|now
operator|-
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// very old timestamp
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Timestamp is invalid"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

