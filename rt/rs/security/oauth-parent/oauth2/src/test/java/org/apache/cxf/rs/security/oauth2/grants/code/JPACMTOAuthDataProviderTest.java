begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|code
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AccessTokenRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ServerAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|JPAOAuthDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|JPAOAuthDataProviderTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tokens
operator|.
name|refresh
operator|.
name|RefreshToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
operator|.
name|ClassMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ActiveProfiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_comment
comment|/**  * Runs the same tests as JPAOAuthDataProviderTest but within a Spring Managed Transaction.  *  * Spring spawns a transaction before each call to<code><oauthProvider</code>.  *  * Note : this test needs<code>@DirtiesContext</code>, otherwise  * spring tests cache and reuse emf across test classes  * while non spring unit tests are closing emf (hence connection exception: closed).  *  * @author agonzalez  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
literal|"JPACMTCodeDataProvider.xml"
argument_list|)
annotation|@
name|DirtiesContext
argument_list|(
name|classMode
operator|=
name|ClassMode
operator|.
name|AFTER_EACH_TEST_METHOD
argument_list|)
annotation|@
name|ActiveProfiles
argument_list|(
literal|"hibernate"
argument_list|)
specifier|public
class|class
name|JPACMTOAuthDataProviderTest
extends|extends
name|JPAOAuthDataProviderTest
block|{
annotation|@
name|Autowired
specifier|private
name|JPACMTCodeDataProvider
name|oauthProvider
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|JPAOAuthDataProvider
name|getProvider
parameter_list|()
block|{
return|return
name|this
operator|.
name|oauthProvider
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|initializeProvider
argument_list|(
name|oauthProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testRefreshAccessTokenConcurrently
parameter_list|()
throws|throws
name|Exception
block|{
name|getProvider
argument_list|()
operator|.
name|setRecycleRefreshTokens
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Client
name|c
init|=
name|addClient
argument_list|(
literal|"101"
argument_list|,
literal|"bob"
argument_list|)
decl_stmt|;
name|AccessTokenRegistration
name|atr
init|=
operator|new
name|AccessTokenRegistration
argument_list|()
decl_stmt|;
name|atr
operator|.
name|setClient
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|atr
operator|.
name|setApprovedScope
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"refreshToken"
argument_list|)
argument_list|)
expr_stmt|;
name|atr
operator|.
name|setSubject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|ServerAccessToken
name|at
init|=
name|getProvider
argument_list|()
operator|.
name|createAccessToken
argument_list|(
name|atr
argument_list|)
decl_stmt|;
name|Runnable
name|task
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|getProvider
argument_list|()
operator|.
name|refreshAccessToken
argument_list|(
name|c
argument_list|,
name|at
operator|.
name|getRefreshToken
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Thread
name|th1
init|=
operator|new
name|Thread
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|Thread
name|th2
init|=
operator|new
name|Thread
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|Thread
name|th3
init|=
operator|new
name|Thread
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|th1
operator|.
name|start
argument_list|()
expr_stmt|;
name|th2
operator|.
name|start
argument_list|()
expr_stmt|;
name|th3
operator|.
name|start
argument_list|()
expr_stmt|;
name|th1
operator|.
name|join
argument_list|()
expr_stmt|;
name|th2
operator|.
name|join
argument_list|()
expr_stmt|;
name|th3
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|getProvider
argument_list|()
operator|.
name|getAccessToken
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RefreshToken
argument_list|>
name|rtl
init|=
name|getProvider
argument_list|()
operator|.
name|getRefreshTokens
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rtl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rtl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|atl
init|=
name|rtl
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccessTokens
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|atl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|atl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

