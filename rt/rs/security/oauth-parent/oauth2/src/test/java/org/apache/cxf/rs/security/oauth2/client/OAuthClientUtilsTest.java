begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|refresh
operator|.
name|RefreshTokenGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|OAuthClientUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|getAccessToken
parameter_list|()
block|{
name|WebClient
name|accessTokenService
init|=
name|mock
argument_list|(
name|WebClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|tokenKey
init|=
literal|"tokenKey"
decl_stmt|;
name|String
name|response
init|=
literal|"{\""
operator|+
name|OAuthConstants
operator|.
name|ACCESS_TOKEN
operator|+
literal|"\":\""
operator|+
name|tokenKey
operator|+
literal|"\"}"
decl_stmt|;
name|expect
argument_list|(
name|accessTokenService
operator|.
name|form
argument_list|(
name|anyObject
argument_list|(
name|Form
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|accessTokenService
argument_list|)
expr_stmt|;
name|ClientAccessToken
name|cat
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
literal|null
argument_list|,
operator|new
name|RefreshTokenGrant
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"defaultTokenType"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tokenKey
argument_list|,
name|cat
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|accessTokenService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAccessTokenInternalServerError
parameter_list|()
block|{
name|WebClient
name|accessTokenService
init|=
name|mock
argument_list|(
name|WebClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|accessTokenService
operator|.
name|form
argument_list|(
name|anyObject
argument_list|(
name|Form
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|entity
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Unrecoverable error in the server."
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|accessTokenService
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
literal|null
argument_list|,
operator|new
name|RefreshTokenGrant
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|OAuthConstants
operator|.
name|SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|verify
argument_list|(
name|accessTokenService
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

