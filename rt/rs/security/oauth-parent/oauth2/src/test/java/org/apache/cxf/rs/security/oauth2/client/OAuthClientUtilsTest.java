begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|refresh
operator|.
name|RefreshTokenGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|OAuthClientUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|getAccessToken
parameter_list|()
block|{
name|WebClient
name|accessTokenService
init|=
name|mock
argument_list|(
name|WebClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|tokenKey
init|=
literal|"tokenKey"
decl_stmt|;
name|String
name|response
init|=
literal|"{\""
operator|+
name|OAuthConstants
operator|.
name|ACCESS_TOKEN
operator|+
literal|"\":\""
operator|+
name|tokenKey
operator|+
literal|"\"}"
decl_stmt|;
name|expect
argument_list|(
name|accessTokenService
operator|.
name|form
argument_list|(
name|anyObject
argument_list|(
name|Form
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|accessTokenService
argument_list|)
expr_stmt|;
name|ClientAccessToken
name|cat
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
literal|null
argument_list|,
operator|new
name|RefreshTokenGrant
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"defaultTokenType"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tokenKey
argument_list|,
name|cat
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|accessTokenService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAccessTokenInternalServerError
parameter_list|()
block|{
name|WebClient
name|accessTokenService
init|=
name|mock
argument_list|(
name|WebClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|accessTokenService
operator|.
name|form
argument_list|(
name|anyObject
argument_list|(
name|Form
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|entity
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Unrecoverable error in the server."
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|accessTokenService
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|accessTokenService
argument_list|,
literal|null
argument_list|,
operator|new
name|RefreshTokenGrant
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|OAuthConstants
operator|.
name|SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|verify
argument_list|(
name|accessTokenService
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|fromMapToClientToken
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|accessToken
init|=
literal|"SlAV32hkKG"
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|OAuthConstants
operator|.
name|ACCESS_TOKEN
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
specifier|final
name|String
name|tokenType
init|=
literal|"Bearer"
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|OAuthConstants
operator|.
name|ACCESS_TOKEN_TYPE
argument_list|,
name|tokenType
argument_list|)
expr_stmt|;
specifier|final
name|String
name|refreshToken
init|=
literal|"8xLOxBtZp8"
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|OAuthConstants
operator|.
name|REFRESH_TOKEN
argument_list|,
name|refreshToken
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expiresIn
init|=
literal|"3600"
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|OAuthConstants
operator|.
name|ACCESS_TOKEN_EXPIRES_IN
argument_list|,
name|expiresIn
argument_list|)
expr_stmt|;
specifier|final
name|ClientAccessToken
name|token
init|=
name|OAuthClientUtils
operator|.
name|fromMapToClientToken
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|accessToken
argument_list|,
name|token
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokenType
argument_list|,
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refreshToken
argument_list|,
name|token
operator|.
name|getRefreshToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|expiresIn
argument_list|)
argument_list|,
name|token
operator|.
name|getExpiresIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAuthorizationURI
parameter_list|()
block|{
name|String
name|authorizationServiceURI
init|=
literal|"https://authorization"
decl_stmt|;
name|String
name|clientId
init|=
literal|"clientId"
decl_stmt|;
name|String
name|redirectUri
init|=
literal|"https://redirect"
decl_stmt|;
name|String
name|state
init|=
literal|"unique"
decl_stmt|;
name|String
name|scope
init|=
name|OAuthConstants
operator|.
name|REFRESH_TOKEN_SCOPE
decl_stmt|;
name|URI
name|uri
init|=
name|OAuthClientUtils
operator|.
name|getAuthorizationURI
argument_list|(
name|authorizationServiceURI
argument_list|,
name|clientId
argument_list|,
name|redirectUri
argument_list|,
name|state
argument_list|,
name|scope
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|authorizationServiceURI
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|query
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|uri
operator|.
name|getQuery
argument_list|()
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|a
lambda|->
name|a
index|[
literal|0
index|]
argument_list|,
name|a
lambda|->
name|a
operator|.
name|length
operator|>
literal|1
condition|?
name|a
index|[
literal|1
index|]
else|:
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|clientId
argument_list|,
name|query
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|redirectUri
argument_list|,
name|query
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|REDIRECT_URI
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|state
argument_list|,
name|query
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|STATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OAuthConstants
operator|.
name|CODE_RESPONSE_TYPE
argument_list|,
name|query
operator|.
name|get
argument_list|(
name|OAuthConstants
operator|.
name|RESPONSE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

