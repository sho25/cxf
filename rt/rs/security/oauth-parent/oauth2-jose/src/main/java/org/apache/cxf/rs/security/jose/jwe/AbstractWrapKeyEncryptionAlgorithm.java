begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|crypto
operator|.
name|KeyProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|Algorithm
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractWrapKeyEncryptionAlgorithm
implements|implements
name|KeyEncryptionAlgorithm
block|{
specifier|private
name|Key
name|keyEncryptionKey
decl_stmt|;
specifier|private
name|boolean
name|wrap
decl_stmt|;
specifier|private
name|String
name|algorithm
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
decl_stmt|;
specifier|protected
name|AbstractWrapKeyEncryptionAlgorithm
parameter_list|(
name|Key
name|key
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|supportedAlgorithms
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractWrapKeyEncryptionAlgorithm
parameter_list|(
name|Key
name|key
parameter_list|,
name|boolean
name|wrap
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|wrap
argument_list|,
name|supportedAlgorithms
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractWrapKeyEncryptionAlgorithm
parameter_list|(
name|Key
name|key
parameter_list|,
name|String
name|jweAlgo
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
name|jweAlgo
argument_list|,
literal|true
argument_list|,
name|supportedAlgorithms
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractWrapKeyEncryptionAlgorithm
parameter_list|(
name|Key
name|key
parameter_list|,
name|String
name|jweAlgo
parameter_list|,
name|boolean
name|wrap
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
parameter_list|)
block|{
name|this
operator|.
name|keyEncryptionKey
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|algorithm
operator|=
name|jweAlgo
expr_stmt|;
name|this
operator|.
name|wrap
operator|=
name|wrap
expr_stmt|;
name|this
operator|.
name|supportedAlgorithms
operator|=
name|supportedAlgorithms
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAlgorithm
parameter_list|()
block|{
return|return
name|algorithm
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEncryptedContentEncryptionKey
parameter_list|(
name|JweHeaders
name|headers
parameter_list|,
name|byte
index|[]
name|cek
parameter_list|)
block|{
name|checkAlgorithms
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|KeyProperties
name|secretKeyProperties
init|=
operator|new
name|KeyProperties
argument_list|(
name|getKeyEncryptionAlgoJava
argument_list|(
name|headers
argument_list|)
argument_list|)
decl_stmt|;
name|AlgorithmParameterSpec
name|spec
init|=
name|getAlgorithmParameterSpec
argument_list|(
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
name|secretKeyProperties
operator|.
name|setAlgoSpec
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|wrap
condition|)
block|{
return|return
name|CryptoUtils
operator|.
name|encryptBytes
argument_list|(
name|cek
argument_list|,
name|keyEncryptionKey
argument_list|,
name|secretKeyProperties
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CryptoUtils
operator|.
name|wrapSecretKey
argument_list|(
name|cek
argument_list|,
name|getContentEncryptionAlgoJava
argument_list|(
name|headers
argument_list|)
argument_list|,
name|keyEncryptionKey
argument_list|,
name|secretKeyProperties
argument_list|)
return|;
block|}
block|}
specifier|protected
name|String
name|getKeyEncryptionAlgoJava
parameter_list|(
name|JweHeaders
name|headers
parameter_list|)
block|{
return|return
name|Algorithm
operator|.
name|toJavaName
argument_list|(
name|headers
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getContentEncryptionAlgoJava
parameter_list|(
name|JweHeaders
name|headers
parameter_list|)
block|{
return|return
name|Algorithm
operator|.
name|toJavaName
argument_list|(
name|headers
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|AlgorithmParameterSpec
name|getAlgorithmParameterSpec
parameter_list|(
name|JweHeaders
name|headers
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|String
name|checkAlgorithm
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|!=
literal|null
operator|&&
operator|!
name|supportedAlgorithms
operator|.
name|contains
argument_list|(
name|algo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
return|return
name|algo
return|;
block|}
specifier|protected
name|void
name|checkAlgorithms
parameter_list|(
name|JweHeaders
name|headers
parameter_list|)
block|{
name|String
name|providedAlgo
init|=
name|headers
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|providedAlgo
operator|==
literal|null
operator|&&
name|algorithm
operator|==
literal|null
operator|)
operator|||
operator|(
name|providedAlgo
operator|!=
literal|null
operator|&&
name|algorithm
operator|!=
literal|null
operator|&&
operator|!
name|providedAlgo
operator|.
name|equals
argument_list|(
name|algorithm
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
if|if
condition|(
name|providedAlgo
operator|!=
literal|null
condition|)
block|{
name|checkAlgorithm
argument_list|(
name|providedAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|algorithm
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|setKeyEncryptionAlgorithm
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
name|checkAlgorithm
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

