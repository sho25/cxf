begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwt
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwt
operator|.
name|JwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwt
operator|.
name|JwtHeadersReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwt
operator|.
name|JwtTokenReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|crypto
operator|.
name|KeyProperties
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJweDecryption
implements|implements
name|JweDecryption
block|{
specifier|private
name|JweCryptoProperties
name|props
decl_stmt|;
specifier|private
name|JwtHeadersReader
name|reader
init|=
operator|new
name|JwtTokenReaderWriter
argument_list|()
decl_stmt|;
specifier|protected
name|AbstractJweDecryption
parameter_list|(
name|JweCryptoProperties
name|props
parameter_list|,
name|JwtHeadersReader
name|thereader
parameter_list|)
block|{
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
if|if
condition|(
name|thereader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|=
name|thereader
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|byte
index|[]
name|getContentEncryptionKey
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
function_decl|;
specifier|public
name|JweDecryptionOutput
name|decrypt
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|JweCompactConsumer
name|consumer
init|=
operator|new
name|JweCompactConsumer
argument_list|(
name|content
argument_list|,
name|reader
argument_list|)
decl_stmt|;
return|return
name|doDecrypt
argument_list|(
name|consumer
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|decrypt
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
return|return
name|doDecrypt
argument_list|(
name|consumer
argument_list|)
operator|.
name|getContent
argument_list|()
return|;
block|}
specifier|protected
name|JweDecryptionOutput
name|doDecrypt
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
name|consumer
operator|.
name|enforceJweCryptoProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cek
init|=
name|getContentEncryptionKey
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|KeyProperties
name|keyProperties
init|=
operator|new
name|KeyProperties
argument_list|(
name|getContentEncryptionAlgorithm
argument_list|(
name|consumer
argument_list|)
argument_list|)
decl_stmt|;
name|keyProperties
operator|.
name|setAdditionalData
argument_list|(
name|getContentEncryptionCipherAAD
argument_list|(
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
name|AlgorithmParameterSpec
name|spec
init|=
name|getContentEncryptionCipherSpec
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|keyProperties
operator|.
name|setAlgoSpec
argument_list|(
name|spec
argument_list|)
expr_stmt|;
name|boolean
name|compressionSupported
init|=
name|JwtConstants
operator|.
name|DEFLATE_ZIP_ALGORITHM
operator|.
name|equals
argument_list|(
name|consumer
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getZipAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|keyProperties
operator|.
name|setCompressionSupported
argument_list|(
name|compressionSupported
argument_list|)
expr_stmt|;
name|Key
name|secretKey
init|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|cek
argument_list|,
name|keyProperties
operator|.
name|getKeyAlgo
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|CryptoUtils
operator|.
name|decryptBytes
argument_list|(
name|getEncryptedContentWithAuthTag
argument_list|(
name|consumer
argument_list|)
argument_list|,
name|secretKey
argument_list|,
name|keyProperties
argument_list|)
decl_stmt|;
return|return
operator|new
name|JweDecryptionOutput
argument_list|(
name|consumer
operator|.
name|getJweHeaders
argument_list|()
argument_list|,
name|bytes
argument_list|)
return|;
block|}
specifier|protected
name|byte
index|[]
name|getEncryptedContentEncryptionKey
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
return|return
name|consumer
operator|.
name|getEncryptedContentEncryptionKey
argument_list|()
return|;
block|}
specifier|protected
name|AlgorithmParameterSpec
name|getContentEncryptionCipherSpec
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
return|return
name|CryptoUtils
operator|.
name|getContentEncryptionCipherSpec
argument_list|(
name|getEncryptionAuthenticationTagLenBits
argument_list|(
name|consumer
argument_list|)
argument_list|,
name|getContentEncryptionCipherInitVector
argument_list|(
name|consumer
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getContentEncryptionAlgorithm
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
return|return
name|Algorithm
operator|.
name|toJavaName
argument_list|(
name|consumer
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|byte
index|[]
name|getContentEncryptionCipherAAD
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
return|return
name|consumer
operator|.
name|getContentEncryptionCipherAAD
argument_list|()
return|;
block|}
specifier|protected
name|byte
index|[]
name|getEncryptedContentWithAuthTag
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
return|return
name|consumer
operator|.
name|getEncryptedContentWithAuthTag
argument_list|()
return|;
block|}
specifier|protected
name|byte
index|[]
name|getContentEncryptionCipherInitVector
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
return|return
name|consumer
operator|.
name|getContentDecryptionCipherInitVector
argument_list|()
return|;
block|}
specifier|protected
name|byte
index|[]
name|getEncryptionAuthenticationTag
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
return|return
name|consumer
operator|.
name|getEncryptionAuthenticationTag
argument_list|()
return|;
block|}
specifier|protected
name|int
name|getEncryptionAuthenticationTagLenBits
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
return|return
name|getEncryptionAuthenticationTag
argument_list|(
name|consumer
argument_list|)
operator|.
name|length
operator|*
literal|8
return|;
block|}
block|}
end_class

end_unit

