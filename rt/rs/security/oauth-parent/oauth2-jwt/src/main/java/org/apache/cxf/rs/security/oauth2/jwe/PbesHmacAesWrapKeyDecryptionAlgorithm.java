begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|Base64UrlUtility
import|;
end_import

begin_class
specifier|public
class|class
name|PbesHmacAesWrapKeyDecryptionAlgorithm
implements|implements
name|KeyDecryptionAlgorithm
block|{
specifier|private
name|byte
index|[]
name|password
decl_stmt|;
specifier|public
name|PbesHmacAesWrapKeyDecryptionAlgorithm
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
argument_list|(
name|PbesHmacAesWrapKeyEncryptionAlgorithm
operator|.
name|stringToBytes
argument_list|(
name|password
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PbesHmacAesWrapKeyDecryptionAlgorithm
parameter_list|(
name|char
index|[]
name|password
parameter_list|)
block|{
name|this
argument_list|(
name|PbesHmacAesWrapKeyEncryptionAlgorithm
operator|.
name|charsToBytes
argument_list|(
name|password
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PbesHmacAesWrapKeyDecryptionAlgorithm
parameter_list|(
name|byte
index|[]
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getDecryptedContentEncryptionKey
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
name|byte
index|[]
name|saltInput
init|=
name|getDecodedBytes
argument_list|(
name|consumer
argument_list|,
literal|"p2s"
argument_list|)
decl_stmt|;
name|int
name|pbesCount
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|consumer
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"p2c"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|keyAlgoJwt
init|=
name|consumer
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|int
name|keySize
init|=
name|PbesHmacAesWrapKeyEncryptionAlgorithm
operator|.
name|getKeySize
argument_list|(
name|keyAlgoJwt
argument_list|)
decl_stmt|;
name|byte
index|[]
name|derivedKey
init|=
name|PbesHmacAesWrapKeyEncryptionAlgorithm
operator|.
name|createDerivedKey
argument_list|(
name|keyAlgoJwt
argument_list|,
name|keySize
argument_list|,
name|password
argument_list|,
name|saltInput
argument_list|,
name|pbesCount
argument_list|)
decl_stmt|;
name|KeyDecryptionAlgorithm
name|aesWrap
init|=
operator|new
name|AesWrapKeyDecryptionAlgorithm
argument_list|(
name|derivedKey
argument_list|)
decl_stmt|;
return|return
name|aesWrap
operator|.
name|getDecryptedContentEncryptionKey
argument_list|(
name|consumer
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getDecodedBytes
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|,
name|String
name|headerName
parameter_list|)
block|{
try|try
block|{
name|Object
name|headerValue
init|=
name|consumer
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
return|return
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|headerValue
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

