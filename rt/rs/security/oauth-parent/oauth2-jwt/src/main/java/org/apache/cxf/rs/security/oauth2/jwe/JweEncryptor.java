begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwt
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwt
operator|.
name|JwtHeadersWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|jwt
operator|.
name|JwtTokenReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|crypto
operator|.
name|KeyProperties
import|;
end_import

begin_class
specifier|public
class|class
name|JweEncryptor
block|{
specifier|private
name|Key
name|cekEncryptionKey
decl_stmt|;
specifier|private
name|JweHeaders
name|headers
decl_stmt|;
specifier|private
name|JwtHeadersWriter
name|writer
init|=
operator|new
name|JwtTokenReaderWriter
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|cek
decl_stmt|;
specifier|private
name|byte
index|[]
name|iv
decl_stmt|;
specifier|private
name|int
name|authTagLen
decl_stmt|;
specifier|private
name|boolean
name|wrap
decl_stmt|;
specifier|public
name|JweEncryptor
parameter_list|(
name|JweHeaders
name|headers
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|,
name|int
name|authTagLen
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
name|this
operator|.
name|iv
operator|=
name|iv
expr_stmt|;
name|this
operator|.
name|authTagLen
operator|=
name|authTagLen
expr_stmt|;
block|}
specifier|public
name|JweEncryptor
parameter_list|(
name|JweHeaders
name|headers
parameter_list|,
name|Key
name|cekEncryptionKey
parameter_list|,
name|byte
index|[]
name|cek
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|,
name|int
name|authTagLen
parameter_list|,
name|boolean
name|wrap
parameter_list|)
block|{
name|this
argument_list|(
name|headers
argument_list|,
name|iv
argument_list|,
name|authTagLen
argument_list|)
expr_stmt|;
name|this
operator|.
name|cekEncryptionKey
operator|=
name|cekEncryptionKey
expr_stmt|;
name|this
operator|.
name|cek
operator|=
name|cek
expr_stmt|;
name|this
operator|.
name|wrap
operator|=
name|wrap
expr_stmt|;
block|}
specifier|public
name|JweEncryptor
parameter_list|(
name|JweHeaders
name|headers
parameter_list|,
name|Key
name|cekEncryptionKey
parameter_list|,
name|byte
index|[]
name|cek
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|,
name|int
name|authTagLen
parameter_list|,
name|boolean
name|wrap
parameter_list|,
name|JwtHeadersWriter
name|writer
parameter_list|)
block|{
name|this
argument_list|(
name|headers
argument_list|,
name|cekEncryptionKey
argument_list|,
name|cek
argument_list|,
name|iv
argument_list|,
name|authTagLen
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
block|}
specifier|protected
name|AlgorithmParameterSpec
name|getContentEncryptionCipherSpec
parameter_list|()
block|{
return|return
name|CryptoUtils
operator|.
name|getContentEncryptionCipherSpec
argument_list|(
name|getAuthTagLen
argument_list|()
argument_list|,
name|getIv
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|byte
index|[]
name|getIv
parameter_list|()
block|{
return|return
name|iv
return|;
block|}
specifier|protected
name|byte
index|[]
name|cek
parameter_list|()
block|{
return|return
name|cek
return|;
block|}
specifier|protected
name|byte
index|[]
name|getEncryptedContentEncryptionKey
parameter_list|()
block|{
if|if
condition|(
name|cekEncryptionKey
operator|==
literal|null
condition|)
block|{
comment|// direct key encryption
return|return
operator|new
name|byte
index|[]
block|{}
return|;
block|}
else|else
block|{
name|KeyProperties
name|secretKeyProperties
init|=
operator|new
name|KeyProperties
argument_list|(
name|getContentEncryptionKeyEncryptionAlgo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wrap
condition|)
block|{
return|return
name|CryptoUtils
operator|.
name|encryptBytes
argument_list|(
name|cek
argument_list|,
name|cekEncryptionKey
argument_list|,
name|secretKeyProperties
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CryptoUtils
operator|.
name|wrapSecretKey
argument_list|(
name|cek
argument_list|,
name|getContentEncryptionAlgo
argument_list|()
argument_list|,
name|cekEncryptionKey
argument_list|,
name|secretKeyProperties
operator|.
name|getKeyAlgo
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
specifier|protected
name|String
name|getContentEncryptionKeyEncryptionAlgo
parameter_list|()
block|{
return|return
name|Algorithm
operator|.
name|toJavaName
argument_list|(
name|headers
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getContentEncryptionAlgo
parameter_list|()
block|{
return|return
name|Algorithm
operator|.
name|toJavaName
argument_list|(
name|headers
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|int
name|getAuthTagLen
parameter_list|()
block|{
return|return
name|authTagLen
return|;
block|}
specifier|public
name|String
name|getJweContent
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
block|{
name|byte
index|[]
name|jweContentEncryptionKey
init|=
name|getEncryptedContentEncryptionKey
argument_list|()
decl_stmt|;
name|String
name|contentEncryptionAlgoJavaName
init|=
name|Algorithm
operator|.
name|toJavaName
argument_list|(
name|headers
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|KeyProperties
name|keyProps
init|=
operator|new
name|KeyProperties
argument_list|(
name|contentEncryptionAlgoJavaName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|additionalEncryptionParam
init|=
name|headers
operator|.
name|toCipherAdditionalAuthData
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|keyProps
operator|.
name|setAdditionalData
argument_list|(
name|additionalEncryptionParam
argument_list|)
expr_stmt|;
name|AlgorithmParameterSpec
name|specParams
init|=
name|getContentEncryptionCipherSpec
argument_list|()
decl_stmt|;
name|keyProps
operator|.
name|setAlgoSpec
argument_list|(
name|specParams
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cipherText
init|=
name|CryptoUtils
operator|.
name|encryptBytes
argument_list|(
name|content
argument_list|,
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|cek
argument_list|,
name|contentEncryptionAlgoJavaName
argument_list|)
argument_list|,
name|keyProps
argument_list|)
decl_stmt|;
name|JweCompactProducer
name|producer
init|=
operator|new
name|JweCompactProducer
argument_list|(
name|headers
argument_list|,
name|jweContentEncryptionKey
argument_list|,
name|iv
argument_list|,
name|cipherText
argument_list|,
name|getAuthTagLen
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|producer
operator|.
name|getJweContent
argument_list|()
return|;
block|}
specifier|public
name|String
name|getJweContent
parameter_list|(
name|String
name|text
parameter_list|)
block|{
try|try
block|{
return|return
name|getJweContent
argument_list|(
name|text
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

