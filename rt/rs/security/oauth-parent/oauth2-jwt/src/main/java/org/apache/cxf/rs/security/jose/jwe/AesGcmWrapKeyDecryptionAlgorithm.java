begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_class
specifier|public
class|class
name|AesGcmWrapKeyDecryptionAlgorithm
extends|extends
name|WrappedKeyDecryptionAlgorithm
block|{
specifier|public
name|AesGcmWrapKeyDecryptionAlgorithm
parameter_list|(
name|String
name|encodedKey
parameter_list|)
block|{
name|this
argument_list|(
name|CryptoUtils
operator|.
name|decodeSequence
argument_list|(
name|encodedKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AesGcmWrapKeyDecryptionAlgorithm
parameter_list|(
name|byte
index|[]
name|secretKey
parameter_list|)
block|{
name|this
argument_list|(
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|secretKey
argument_list|,
name|Algorithm
operator|.
name|AES_ALGO_JAVA
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AesGcmWrapKeyDecryptionAlgorithm
parameter_list|(
name|SecretKey
name|secretKey
parameter_list|)
block|{
name|super
argument_list|(
name|secretKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|getEncryptedContentEncryptionKey
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
name|byte
index|[]
name|encryptedCekKey
init|=
name|super
operator|.
name|getEncryptedContentEncryptionKey
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tag
init|=
name|getDecodedBytes
argument_list|(
name|consumer
argument_list|,
literal|"tag"
argument_list|)
decl_stmt|;
return|return
name|JweCompactConsumer
operator|.
name|getCipherWithAuthTag
argument_list|(
name|encryptedCekKey
argument_list|,
name|tag
argument_list|)
return|;
block|}
specifier|protected
name|AlgorithmParameterSpec
name|getAlgorithmParameterSpec
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|)
block|{
name|byte
index|[]
name|iv
init|=
name|getDecodedBytes
argument_list|(
name|consumer
argument_list|,
literal|"iv"
argument_list|)
decl_stmt|;
return|return
name|CryptoUtils
operator|.
name|getContentEncryptionCipherSpec
argument_list|(
literal|128
argument_list|,
name|iv
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getDecodedBytes
parameter_list|(
name|JweCompactConsumer
name|consumer
parameter_list|,
name|String
name|headerName
parameter_list|)
block|{
try|try
block|{
name|Object
name|ivHeader
init|=
name|consumer
operator|.
name|getJweHeaders
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
return|return
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|ivHeader
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

