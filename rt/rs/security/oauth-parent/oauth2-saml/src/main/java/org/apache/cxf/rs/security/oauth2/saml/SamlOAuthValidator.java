begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotAuthorizedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|UriInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Audience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AudienceRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Conditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Issuer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|SubjectConfirmation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|SubjectConfirmationData
import|;
end_import

begin_class
specifier|public
class|class
name|SamlOAuthValidator
block|{
specifier|private
name|String
name|accessTokenServiceAddress
decl_stmt|;
specifier|private
name|String
name|issuer
decl_stmt|;
specifier|private
name|String
name|clientAddress
decl_stmt|;
specifier|private
name|boolean
name|subjectConfirmationDataRequired
decl_stmt|;
specifier|public
name|SamlOAuthValidator
parameter_list|()
block|{     }
specifier|public
name|void
name|setSubjectConfirmationDataRequired
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|subjectConfirmationDataRequired
operator|=
name|required
expr_stmt|;
block|}
specifier|public
name|void
name|setAccessTokenServiceAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|accessTokenServiceAddress
operator|=
name|address
expr_stmt|;
block|}
specifier|public
name|void
name|setIssuer
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|issuer
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|setClientAddress
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|issuer
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|Message
name|message
parameter_list|,
name|SamlAssertionWrapper
name|wrapper
parameter_list|)
block|{
name|Conditions
name|cs
init|=
name|wrapper
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
decl_stmt|;
name|validateAudience
argument_list|(
name|message
argument_list|,
name|cs
argument_list|)
expr_stmt|;
if|if
condition|(
name|issuer
operator|!=
literal|null
condition|)
block|{
name|String
name|actualIssuer
init|=
name|getIssuer
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
name|String
name|expectedIssuer
init|=
name|OAuthConstants
operator|.
name|CLIENT_ID
operator|.
name|equals
argument_list|(
name|issuer
argument_list|)
condition|?
name|wrapper
operator|.
name|getSaml2
argument_list|()
operator|.
name|getSubject
argument_list|()
operator|.
name|getNameID
argument_list|()
operator|.
name|getValue
argument_list|()
else|:
name|issuer
decl_stmt|;
if|if
condition|(
name|actualIssuer
operator|==
literal|null
operator|||
operator|!
name|actualIssuer
operator|.
name|equals
argument_list|(
name|expectedIssuer
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotAuthorizedException
argument_list|(
name|errorResponse
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|validateAuthenticationSubject
argument_list|(
name|message
argument_list|,
name|cs
argument_list|,
name|wrapper
operator|.
name|getSaml2
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotAuthorizedException
argument_list|(
name|errorResponse
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getIssuer
parameter_list|(
name|SamlAssertionWrapper
name|assertionW
parameter_list|)
block|{
name|Issuer
name|samlIssuer
init|=
name|assertionW
operator|.
name|getSaml2
argument_list|()
operator|.
name|getIssuer
argument_list|()
decl_stmt|;
return|return
name|samlIssuer
operator|==
literal|null
condition|?
literal|null
else|:
name|samlIssuer
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|private
name|void
name|validateAudience
parameter_list|(
name|Message
name|message
parameter_list|,
name|Conditions
name|cs
parameter_list|)
block|{
name|String
name|absoluteAddress
init|=
name|getAbsoluteTargetAddress
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AudienceRestriction
argument_list|>
name|restrictions
init|=
name|cs
operator|.
name|getAudienceRestrictions
argument_list|()
decl_stmt|;
for|for
control|(
name|AudienceRestriction
name|ar
range|:
name|restrictions
control|)
block|{
name|List
argument_list|<
name|Audience
argument_list|>
name|audiences
init|=
name|ar
operator|.
name|getAudiences
argument_list|()
decl_stmt|;
for|for
control|(
name|Audience
name|a
range|:
name|audiences
control|)
block|{
if|if
condition|(
name|absoluteAddress
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAudienceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
throw|throw
operator|new
name|NotAuthorizedException
argument_list|(
name|errorResponse
argument_list|()
argument_list|)
throw|;
block|}
specifier|private
name|String
name|getAbsoluteTargetAddress
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|accessTokenServiceAddress
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|UriInfoImpl
argument_list|(
name|m
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|accessTokenServiceAddress
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|String
name|httpBasePath
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"http.base.path"
argument_list|)
decl_stmt|;
return|return
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|httpBasePath
argument_list|)
operator|.
name|path
argument_list|(
name|accessTokenServiceAddress
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|accessTokenServiceAddress
return|;
block|}
block|}
specifier|private
name|boolean
name|validateAuthenticationSubject
parameter_list|(
name|Message
name|m
parameter_list|,
name|Conditions
name|cs
parameter_list|,
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Subject
name|subject
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|.
name|getSubjectConfirmations
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// We need to find a Bearer Subject Confirmation method
for|for
control|(
name|SubjectConfirmation
name|subjectConf
range|:
name|subject
operator|.
name|getSubjectConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
name|SAML2Constants
operator|.
name|CONF_BEARER
operator|.
name|equals
argument_list|(
name|subjectConf
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|validateSubjectConfirmation
argument_list|(
name|m
argument_list|,
name|cs
argument_list|,
name|subjectConf
operator|.
name|getSubjectConfirmationData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**        * Validate a (Bearer) Subject Confirmation        */
specifier|private
name|void
name|validateSubjectConfirmation
parameter_list|(
name|Message
name|m
parameter_list|,
name|Conditions
name|cs
parameter_list|,
name|SubjectConfirmationData
name|subjectConfData
parameter_list|)
block|{
if|if
condition|(
name|subjectConfData
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|subjectConfirmationDataRequired
operator|&&
name|cs
operator|.
name|getNotOnOrAfter
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|cs
operator|.
name|getNotOnOrAfter
argument_list|()
operator|.
name|isBeforeNow
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|NotAuthorizedException
argument_list|(
name|errorResponse
argument_list|()
argument_list|)
throw|;
block|}
comment|// Recipient must match assertion consumer URL
name|String
name|recipient
init|=
name|subjectConfData
operator|.
name|getRecipient
argument_list|()
decl_stmt|;
if|if
condition|(
name|recipient
operator|==
literal|null
operator|||
operator|!
name|recipient
operator|.
name|equals
argument_list|(
name|getAbsoluteTargetAddress
argument_list|(
name|m
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotAuthorizedException
argument_list|(
name|errorResponse
argument_list|()
argument_list|)
throw|;
block|}
comment|// We must have a NotOnOrAfter timestamp
if|if
condition|(
name|subjectConfData
operator|.
name|getNotOnOrAfter
argument_list|()
operator|==
literal|null
operator|||
name|subjectConfData
operator|.
name|getNotOnOrAfter
argument_list|()
operator|.
name|isBeforeNow
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotAuthorizedException
argument_list|(
name|errorResponse
argument_list|()
argument_list|)
throw|;
block|}
comment|//TODO: replay cache, same as with SAML SSO case
comment|// Check address
if|if
condition|(
name|subjectConfData
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|clientAddress
operator|==
literal|null
operator|||
operator|!
name|subjectConfData
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|clientAddress
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|NotAuthorizedException
argument_list|(
name|errorResponse
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Response
name|errorResponse
parameter_list|()
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
literal|401
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

