begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|saml
package|;
end_package

begin_comment
comment|/**  * Base64 URL Encoding/Decoding utility (character 62 is '-', 63 - '_')  * TODO:   *  - encoding: exclude padding characters by default,   *  - decoding: calculate a number of missing padding characters   *    based on a number of base64url encoded octets  *      *  - once the above two points are addressed, consider extracting   *    most of Base64Utility into Base64EncoderDecoder and extending it  *    with Base64UrlEncoderDecoder to minimize the duplication   *                    */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Exception
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Base64UrlUtility
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Base64UrlUtility
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENCODED_PAD
init|=
literal|"%3D"
decl_stmt|;
comment|// Base 64 URL character set
comment|//
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|BCS
init|=
block|{
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|,
literal|'G'
block|,
literal|'H'
block|,
literal|'I'
block|,
literal|'J'
block|,
literal|'K'
block|,
literal|'L'
block|,
literal|'M'
block|,
literal|'N'
block|,
literal|'O'
block|,
literal|'P'
block|,
literal|'Q'
block|,
literal|'R'
block|,
literal|'S'
block|,
literal|'T'
block|,
literal|'U'
block|,
literal|'V'
block|,
literal|'W'
block|,
literal|'X'
block|,
literal|'Y'
block|,
literal|'Z'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'i'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'l'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'o'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'-'
block|,
literal|'_'
block|}
decl_stmt|;
comment|// base 64 wadding
specifier|private
specifier|static
specifier|final
name|char
name|PAD
init|=
literal|'='
decl_stmt|;
comment|// size of base 64 decode table
specifier|private
specifier|static
specifier|final
name|int
name|BDTSIZE
init|=
literal|128
decl_stmt|;
comment|// base 64 decode table
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BDT
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PAD_SIZE0
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PAD_SIZE4
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PAD_SIZE8
init|=
literal|3
decl_stmt|;
comment|// class static intializer for building decode table
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BDTSIZE
condition|;
name|i
operator|++
control|)
block|{
name|BDT
index|[
name|i
index|]
operator|=
name|Byte
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BCS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BDT
index|[
name|BCS
index|[
name|i
index|]
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
block|}
specifier|private
name|Base64UrlUtility
parameter_list|()
block|{
comment|//utility class, never constructed
block|}
comment|/**      * The<code>decode_chunk</code> routine decodes a chunk of data      * into its native encoding.      *      * base64 encodes each 3 octets of data into 4 characters from a      * limited 64 character set. The 3 octets are joined to form      * 24 bits which are then split into 4 x 6bit values. Each 6 bit      * value is then used as an index into the 64 character table of      * base64 chars. If the total data length is not a 3 octet multiple      * the '=' char is used as padding for the final 4 char group,       * either 1 octet + '==' or 2 octets + '='.      *      * @param   id  The input data to be processed      * @param   o   The offset from which to begin processing      * @param   l   The length (bound) at which processing is to end      * @return  The decoded data         * @exception   Base64Exception Thrown is processing fails due to      * formatting exceptions in the encoded data       */
specifier|public
specifier|static
name|byte
index|[]
name|decodeChunk
parameter_list|(
name|char
index|[]
name|id
parameter_list|,
name|int
name|o
parameter_list|,
name|int
name|l
parameter_list|)
throws|throws
name|Base64Exception
block|{
comment|// Keep it simple - must be>= 4. Unpadded
comment|// base64 data contain< 3 octets is invalid.
comment|//
if|if
condition|(
operator|(
name|l
operator|-
name|o
operator|)
operator|<
literal|4
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
index|[]
name|ib
init|=
operator|new
name|char
index|[
literal|4
index|]
decl_stmt|;
name|int
name|ibcount
init|=
literal|0
decl_stmt|;
comment|// cryan. Calc the num of octets. Each 4 chars of base64 chars
comment|// (representing 24 bits) encodes 3 octets.
comment|//
name|int
name|octetCount
init|=
literal|3
operator|*
operator|(
name|l
operator|/
literal|4
operator|)
decl_stmt|;
comment|// Final 4 chars may contain 3 octets or padded to contain
comment|// 1 or 2 octets.
comment|//
if|if
condition|(
name|id
index|[
name|l
operator|-
literal|1
index|]
operator|==
name|PAD
condition|)
block|{
comment|// TT== means last 4 chars encode 8 bits (ie subtract 2)
comment|// TTT= means last 4 chars encode 16 bits (ie subtract 1)
name|octetCount
operator|-=
operator|(
name|id
index|[
name|l
operator|-
literal|2
index|]
operator|==
name|PAD
operator|)
condition|?
literal|2
else|:
literal|1
expr_stmt|;
block|}
name|byte
index|[]
name|ob
init|=
operator|new
name|byte
index|[
name|octetCount
index|]
decl_stmt|;
name|int
name|obcount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|o
init|;
name|i
operator|<
name|o
operator|+
name|l
operator|&&
name|i
operator|<
name|id
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|id
index|[
name|i
index|]
operator|==
name|PAD
operator|||
name|id
index|[
name|i
index|]
operator|<
name|BDT
operator|.
name|length
operator|&&
name|BDT
index|[
name|id
index|[
name|i
index|]
index|]
operator|!=
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|ib
index|[
name|ibcount
operator|++
index|]
operator|=
name|id
index|[
name|i
index|]
expr_stmt|;
comment|// Decode each 4 char sequence.
comment|//
if|if
condition|(
name|ibcount
operator|==
name|ib
operator|.
name|length
condition|)
block|{
name|ibcount
operator|=
literal|0
expr_stmt|;
name|obcount
operator|+=
name|processEncodeme
argument_list|(
name|ib
argument_list|,
name|ob
argument_list|,
name|obcount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|obcount
operator|!=
name|ob
operator|.
name|length
condition|)
block|{
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
name|obcount
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ob
argument_list|,
literal|0
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|,
name|obcount
argument_list|)
expr_stmt|;
name|ob
operator|=
name|tmp
expr_stmt|;
block|}
return|return
name|ob
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Base64Exception
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|id
operator|.
name|endsWith
argument_list|(
name|ENCODED_PAD
argument_list|)
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|id
operator|.
name|length
argument_list|()
operator|-
name|ENCODED_PAD
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|id
operator|+=
name|PAD
expr_stmt|;
block|}
try|try
block|{
name|char
index|[]
name|cd
init|=
name|id
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
return|return
name|decodeChunk
argument_list|(
name|cd
argument_list|,
literal|0
argument_list|,
name|cd
operator|.
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Invalid base64 encoded string : "
operator|+
name|id
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Base64Exception
argument_list|(
operator|new
name|Message
argument_list|(
literal|"BASE64_RUNTIME_EXCEPTION"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|decode
parameter_list|(
name|char
index|[]
name|id
parameter_list|,
name|int
name|o
parameter_list|,
name|int
name|l
parameter_list|,
name|OutputStream
name|ostream
parameter_list|)
throws|throws
name|Base64Exception
block|{
try|try
block|{
name|ostream
operator|.
name|write
argument_list|(
name|decodeChunk
argument_list|(
name|id
argument_list|,
name|o
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Invalid base64 encoded string : "
operator|+
operator|new
name|String
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Base64Exception
argument_list|(
operator|new
name|Message
argument_list|(
literal|"BASE64_RUNTIME_EXCEPTION"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|decode
parameter_list|(
name|String
name|id
parameter_list|,
name|OutputStream
name|ostream
parameter_list|)
throws|throws
name|Base64Exception
block|{
try|try
block|{
name|char
index|[]
name|cd
init|=
name|id
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|ostream
operator|.
name|write
argument_list|(
name|decodeChunk
argument_list|(
name|cd
argument_list|,
literal|0
argument_list|,
name|cd
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|Base64Exception
argument_list|(
operator|new
name|Message
argument_list|(
literal|"BASE64_DECODE_IOEXCEPTION"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Invalid base64 encoded string : "
operator|+
name|id
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Base64Exception
argument_list|(
operator|new
name|Message
argument_list|(
literal|"BASE64_RUNTIME_EXCEPTION"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Returns base64 representation of specified byte array.
comment|//
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|id
parameter_list|)
block|{
name|char
index|[]
name|cd
init|=
name|encodeChunk
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|id
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|cd
argument_list|,
literal|0
argument_list|,
name|cd
operator|.
name|length
argument_list|)
return|;
block|}
comment|// Returns base64 representation of specified byte array.
comment|//
specifier|public
specifier|static
name|char
index|[]
name|encodeChunk
parameter_list|(
name|byte
index|[]
name|id
parameter_list|,
name|int
name|o
parameter_list|,
name|int
name|l
parameter_list|)
block|{
if|if
condition|(
name|l
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
index|[]
name|out
decl_stmt|;
comment|// If not a multiple of 3 octets then a final padded 4 char
comment|// slot is needed.
comment|//
if|if
condition|(
operator|(
name|l
operator|-
name|o
operator|)
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|out
operator|=
operator|new
name|char
index|[
name|l
operator|/
literal|3
operator|*
literal|4
index|]
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
operator|new
name|char
index|[
name|l
operator|/
literal|3
operator|*
literal|4
operator|+
literal|4
index|]
expr_stmt|;
block|}
name|int
name|rindex
init|=
name|o
decl_stmt|;
name|int
name|windex
init|=
literal|0
decl_stmt|;
name|int
name|rest
init|=
name|l
operator|-
name|o
decl_stmt|;
while|while
condition|(
name|rest
operator|>=
literal|3
condition|)
block|{
name|int
name|i
init|=
operator|(
operator|(
name|id
index|[
name|rindex
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|id
index|[
name|rindex
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|id
index|[
name|rindex
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|BCS
index|[
name|i
operator|>>
literal|18
index|]
expr_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|BCS
index|[
operator|(
name|i
operator|>>
literal|12
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|BCS
index|[
operator|(
name|i
operator|>>
literal|6
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|BCS
index|[
name|i
operator|&
literal|0x3f
index|]
expr_stmt|;
name|rindex
operator|+=
literal|3
expr_stmt|;
name|rest
operator|-=
literal|3
expr_stmt|;
block|}
if|if
condition|(
name|rest
operator|==
literal|1
condition|)
block|{
name|int
name|i
init|=
name|id
index|[
name|rindex
index|]
operator|&
literal|0xff
decl_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|BCS
index|[
name|i
operator|>>
literal|2
index|]
expr_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|BCS
index|[
operator|(
name|i
operator|<<
literal|4
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|PAD
expr_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|PAD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rest
operator|==
literal|2
condition|)
block|{
name|int
name|i
init|=
operator|(
operator|(
name|id
index|[
name|rindex
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|id
index|[
name|rindex
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|BCS
index|[
name|i
operator|>>
literal|10
index|]
expr_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|BCS
index|[
operator|(
name|i
operator|>>
literal|4
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|BCS
index|[
operator|(
name|i
operator|<<
literal|2
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|out
index|[
name|windex
operator|++
index|]
operator|=
name|PAD
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|//
comment|// Outputs base64 representation of the specified byte array
comment|// to a byte stream.
comment|//
specifier|public
specifier|static
name|void
name|encodeChunk
parameter_list|(
name|byte
index|[]
name|id
parameter_list|,
name|int
name|o
parameter_list|,
name|int
name|l
parameter_list|,
name|OutputStream
name|ostream
parameter_list|)
throws|throws
name|Base64Exception
block|{
try|try
block|{
name|ostream
operator|.
name|write
argument_list|(
operator|new
name|String
argument_list|(
name|encodeChunk
argument_list|(
name|id
argument_list|,
name|o
argument_list|,
name|l
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Base64Exception
argument_list|(
operator|new
name|Message
argument_list|(
literal|"BASE64_ENCODE_IOEXCEPTION"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|Base64Exception
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|value
argument_list|,
name|writer
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|encode
parameter_list|(
name|String
name|value
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|Base64Exception
block|{
name|byte
index|[]
name|chunk
init|=
literal|null
decl_stmt|;
try|try
block|{
name|chunk
operator|=
name|value
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
comment|// won't happen
block|}
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|chunk
operator|.
name|length
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
comment|// Outputs base64 representation of the specified byte
comment|// array to a character stream.
comment|//
specifier|public
specifier|static
name|void
name|encode
parameter_list|(
name|byte
index|[]
name|id
parameter_list|,
name|int
name|o
parameter_list|,
name|int
name|l
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|Base64Exception
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|encodeChunk
argument_list|(
name|id
argument_list|,
name|o
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Base64Exception
argument_list|(
operator|new
name|Message
argument_list|(
literal|"BASE64_ENCODE_WRITER_IOEXCEPTION"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//---- Private static methods --------------------------------------
comment|/**      * The<code>process</code> routine processes an atomic base64      * unit of encoding (encodeme) into its native encoding. This class is      * used by decode routines to do the grunt work of decoding      * base64 encoded information      *      * @param   ib  Input character buffer of encoded bytes      * @param   ob  Output byte buffer of decoded bytes      * @param   p   Pointer to the encodeme of interest      * @return  The decoded encodeme      * @exception   Base64Exception Thrown is processing fails due to      * formatting exceptions in the encoded data       */
specifier|private
specifier|static
name|int
name|processEncodeme
parameter_list|(
name|char
index|[]
name|ib
parameter_list|,
name|byte
index|[]
name|ob
parameter_list|,
name|int
name|p
parameter_list|)
throws|throws
name|Base64Exception
block|{
name|int
name|spad
init|=
name|PAD_SIZE8
decl_stmt|;
if|if
condition|(
name|ib
index|[
literal|3
index|]
operator|==
name|PAD
condition|)
block|{
name|spad
operator|=
name|PAD_SIZE4
expr_stmt|;
block|}
if|if
condition|(
name|ib
index|[
literal|2
index|]
operator|==
name|PAD
condition|)
block|{
name|spad
operator|=
name|PAD_SIZE0
expr_stmt|;
block|}
name|int
name|b0
init|=
name|BDT
index|[
name|ib
index|[
literal|0
index|]
index|]
decl_stmt|;
name|int
name|b1
init|=
name|BDT
index|[
name|ib
index|[
literal|1
index|]
index|]
decl_stmt|;
name|int
name|b2
init|=
name|BDT
index|[
name|ib
index|[
literal|2
index|]
index|]
decl_stmt|;
name|int
name|b3
init|=
name|BDT
index|[
name|ib
index|[
literal|3
index|]
index|]
decl_stmt|;
switch|switch
condition|(
name|spad
condition|)
block|{
case|case
name|PAD_SIZE0
case|:
name|ob
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|b0
operator|<<
literal|2
operator|&
literal|0xfc
operator||
name|b1
operator|>>
literal|4
operator|&
literal|0x3
argument_list|)
expr_stmt|;
return|return
name|PAD_SIZE0
return|;
case|case
name|PAD_SIZE4
case|:
name|ob
index|[
name|p
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|b0
operator|<<
literal|2
operator|&
literal|0xfc
operator||
name|b1
operator|>>
literal|4
operator|&
literal|0x3
argument_list|)
expr_stmt|;
name|ob
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|b1
operator|<<
literal|4
operator|&
literal|0xf0
operator||
name|b2
operator|>>
literal|2
operator|&
literal|0xf
argument_list|)
expr_stmt|;
return|return
name|PAD_SIZE4
return|;
case|case
name|PAD_SIZE8
case|:
name|ob
index|[
name|p
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|b0
operator|<<
literal|2
operator|&
literal|0xfc
operator||
name|b1
operator|>>
literal|4
operator|&
literal|0x3
argument_list|)
expr_stmt|;
name|ob
index|[
name|p
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|b1
operator|<<
literal|4
operator|&
literal|0xf0
operator||
name|b2
operator|>>
literal|2
operator|&
literal|0xf
argument_list|)
expr_stmt|;
name|ob
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|b2
operator|<<
literal|6
operator|&
literal|0xc0
operator||
name|b3
operator|&
literal|0x3f
argument_list|)
expr_stmt|;
return|return
name|PAD_SIZE8
return|;
default|default:
comment|// We should never get here
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

