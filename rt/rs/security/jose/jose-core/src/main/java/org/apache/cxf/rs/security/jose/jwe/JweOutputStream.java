begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_class
specifier|public
class|class
name|JweOutputStream
extends|extends
name|FilterOutputStream
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JweOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Cipher
name|encryptingCipher
decl_stmt|;
specifier|private
name|int
name|blockSize
decl_stmt|;
specifier|private
name|AuthenticationTagProducer
name|authTagProducer
decl_stmt|;
specifier|private
name|byte
index|[]
name|lastRawDataChunk
decl_stmt|;
specifier|private
name|byte
index|[]
name|lastEncryptedDataChunk
decl_stmt|;
specifier|private
name|boolean
name|flushed
decl_stmt|;
specifier|public
name|JweOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cipher
name|encryptingCipher
parameter_list|,
name|AuthenticationTagProducer
name|authTagProducer
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|encryptingCipher
operator|=
name|encryptingCipher
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|encryptingCipher
operator|.
name|getBlockSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|authTagProducer
operator|=
name|authTagProducer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|Integer
operator|.
name|SIZE
operator|/
literal|8
argument_list|)
operator|.
name|putInt
argument_list|(
name|value
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|lastRawDataChunk
operator|!=
literal|null
condition|)
block|{
name|int
name|remaining
init|=
name|blockSize
operator|-
name|lastRawDataChunk
operator|.
name|length
decl_stmt|;
name|int
name|lenToCopy
init|=
name|remaining
operator|<
name|len
condition|?
name|remaining
else|:
name|len
decl_stmt|;
name|lastRawDataChunk
operator|=
name|newArray
argument_list|(
name|lastRawDataChunk
argument_list|,
literal|0
argument_list|,
name|lastRawDataChunk
operator|.
name|length
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|lenToCopy
argument_list|)
expr_stmt|;
name|off
operator|=
name|off
operator|+
name|lenToCopy
expr_stmt|;
name|len
operator|-=
name|lenToCopy
expr_stmt|;
if|if
condition|(
name|lastRawDataChunk
operator|.
name|length
operator|<
name|blockSize
condition|)
block|{
return|return;
block|}
else|else
block|{
name|encryptAndWrite
argument_list|(
name|lastRawDataChunk
argument_list|,
literal|0
argument_list|,
name|lastRawDataChunk
operator|.
name|length
argument_list|)
expr_stmt|;
name|lastRawDataChunk
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|chunkSize
init|=
name|blockSize
operator|>
name|len
condition|?
name|blockSize
else|:
name|blockSize
operator|*
operator|(
name|len
operator|/
name|blockSize
operator|)
decl_stmt|;
for|for
control|(
init|;
name|offset
operator|+
name|chunkSize
operator|<=
name|len
condition|;
name|offset
operator|+=
name|chunkSize
operator|,
name|off
operator|+=
name|chunkSize
control|)
block|{
name|encryptAndWrite
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|<
name|len
condition|)
block|{
name|lastRawDataChunk
operator|=
name|newArray
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|encryptAndWrite
parameter_list|(
name|byte
index|[]
name|chunk
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|encrypted
init|=
name|encryptingCipher
operator|.
name|update
argument_list|(
name|chunk
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|authTagProducer
operator|!=
literal|null
condition|)
block|{
name|authTagProducer
operator|.
name|update
argument_list|(
name|encrypted
argument_list|,
literal|0
argument_list|,
name|encrypted
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|encodeAndWrite
argument_list|(
name|encrypted
argument_list|,
literal|0
argument_list|,
name|encrypted
operator|.
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|encodeAndWrite
parameter_list|(
name|byte
index|[]
name|encryptedChunk
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|boolean
name|finalWrite
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|theChunk
init|=
name|lastEncryptedDataChunk
decl_stmt|;
name|int
name|lenToEncode
init|=
name|len
decl_stmt|;
if|if
condition|(
name|theChunk
operator|!=
literal|null
condition|)
block|{
name|theChunk
operator|=
name|newArray
argument_list|(
name|theChunk
argument_list|,
literal|0
argument_list|,
name|theChunk
operator|.
name|length
argument_list|,
name|encryptedChunk
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|lenToEncode
operator|=
name|theChunk
operator|.
name|length
expr_stmt|;
name|off
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|theChunk
operator|=
name|encryptedChunk
expr_stmt|;
block|}
name|int
name|rem
init|=
name|finalWrite
condition|?
literal|0
else|:
name|lenToEncode
operator|%
literal|3
decl_stmt|;
name|Base64UrlUtility
operator|.
name|encodeAndStream
argument_list|(
name|theChunk
argument_list|,
name|off
argument_list|,
name|lenToEncode
operator|-
name|rem
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|rem
operator|>
literal|0
condition|)
block|{
name|lastEncryptedDataChunk
operator|=
name|newArray
argument_list|(
name|theChunk
argument_list|,
name|lenToEncode
operator|-
name|rem
argument_list|,
name|rem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastEncryptedDataChunk
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|finalFlush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|flushed
condition|)
block|{
return|return;
block|}
try|try
block|{
name|byte
index|[]
name|finalBytes
init|=
name|lastRawDataChunk
operator|==
literal|null
condition|?
name|encryptingCipher
operator|.
name|doFinal
argument_list|()
else|:
name|encryptingCipher
operator|.
name|doFinal
argument_list|(
name|lastRawDataChunk
argument_list|,
literal|0
argument_list|,
name|lastRawDataChunk
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|int
name|authTagLengthBits
init|=
literal|128
decl_stmt|;
if|if
condition|(
name|authTagProducer
operator|!=
literal|null
condition|)
block|{
name|authTagProducer
operator|.
name|update
argument_list|(
name|finalBytes
argument_list|,
literal|0
argument_list|,
name|finalBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|encodeAndWrite
argument_list|(
name|finalBytes
argument_list|,
literal|0
argument_list|,
name|finalBytes
operator|.
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encodeAndWrite
argument_list|(
name|finalBytes
argument_list|,
literal|0
argument_list|,
name|finalBytes
operator|.
name|length
operator|-
name|authTagLengthBits
operator|/
literal|8
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'.'
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|authTagProducer
operator|==
literal|null
condition|)
block|{
name|encodeAndWrite
argument_list|(
name|finalBytes
argument_list|,
name|finalBytes
operator|.
name|length
operator|-
name|authTagLengthBits
operator|/
literal|8
argument_list|,
name|authTagLengthBits
operator|/
literal|8
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|authTag
init|=
name|authTagProducer
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|encodeAndWrite
argument_list|(
name|authTag
argument_list|,
literal|0
argument_list|,
name|authTagLengthBits
operator|/
literal|8
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Content encryption failure"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JweException
argument_list|(
name|JweException
operator|.
name|Error
operator|.
name|CONTENT_ENCRYPTION_FAILURE
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|flushed
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|newArray
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|srcPos
parameter_list|,
name|int
name|srcLen
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|srcLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|srcPos
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|srcLen
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
specifier|private
name|byte
index|[]
name|newArray
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|srcPos
parameter_list|,
name|int
name|srcLen
parameter_list|,
name|byte
index|[]
name|src2
parameter_list|,
name|int
name|srcPos2
parameter_list|,
name|int
name|srcLen2
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|srcLen
operator|+
name|srcLen2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|srcPos
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|srcLen
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src2
argument_list|,
name|srcPos2
argument_list|,
name|buf
argument_list|,
name|srcLen
argument_list|,
name|srcLen2
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
block|}
end_class

end_unit

