begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|KeyManagementUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JwkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|KeyOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|KeyType
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JwsUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JwsUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|JwsUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|String
name|sign
parameter_list|(
name|PrivateKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
return|return
name|sign
argument_list|(
name|key
argument_list|,
name|algo
argument_list|,
name|content
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|sign
parameter_list|(
name|PrivateKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
return|return
name|sign
argument_list|(
name|getPrivateKeySignatureProvider
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|sign
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
return|return
name|sign
argument_list|(
name|key
argument_list|,
name|algo
argument_list|,
name|content
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|sign
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
return|return
name|sign
argument_list|(
name|getHmacSignatureProvider
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|verify
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|JwsCompactConsumer
name|jws
init|=
name|verify
argument_list|(
name|getPublicKeySignatureVerifier
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
argument_list|,
name|content
argument_list|)
decl_stmt|;
return|return
name|jws
operator|.
name|getDecodedJwsPayload
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|verify
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|JwsCompactConsumer
name|jws
init|=
name|verify
argument_list|(
name|getHmacSignatureVerifier
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
argument_list|,
name|content
argument_list|)
decl_stmt|;
return|return
name|jws
operator|.
name|getDecodedJwsPayload
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureProvider
name|getSignatureProvider
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getSignatureProvider
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureProvider
name|getSignatureProvider
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|SignatureAlgorithm
name|defaultAlgorithm
parameter_list|)
block|{
name|SignatureAlgorithm
name|sigAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|SignatureAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|JwsSignatureProvider
name|theSigProvider
init|=
literal|null
decl_stmt|;
name|KeyType
name|keyType
init|=
name|jwk
operator|.
name|getKeyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|KeyType
operator|.
name|RSA
operator|==
name|keyType
condition|)
block|{
name|theSigProvider
operator|=
name|getPrivateKeySignatureProvider
argument_list|(
name|JwkUtils
operator|.
name|toRSAPrivateKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|sigAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KeyType
operator|.
name|OCTET
operator|==
name|keyType
condition|)
block|{
name|byte
index|[]
name|key
init|=
name|JoseUtils
operator|.
name|decode
argument_list|(
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|OCTET_KEY_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|theSigProvider
operator|=
name|getHmacSignatureProvider
argument_list|(
name|key
argument_list|,
name|sigAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KeyType
operator|.
name|EC
operator|==
name|jwk
operator|.
name|getKeyType
argument_list|()
condition|)
block|{
name|theSigProvider
operator|=
name|getPrivateKeySignatureProvider
argument_list|(
name|JwkUtils
operator|.
name|toECPrivateKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|sigAlgo
argument_list|)
expr_stmt|;
block|}
return|return
name|theSigProvider
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureProvider
name|getPrivateKeySignatureProvider
parameter_list|(
name|PrivateKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"No signature algorithm was defined"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|ALGORITHM_NOT_SET
argument_list|)
throw|;
block|}
if|if
condition|(
name|key
operator|instanceof
name|ECPrivateKey
condition|)
block|{
return|return
operator|new
name|EcDsaJwsSignatureProvider
argument_list|(
operator|(
name|ECPrivateKey
operator|)
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|RSAPrivateKey
condition|)
block|{
return|return
operator|new
name|PrivateKeyJwsSignatureProvider
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureProvider
name|getHmacSignatureProvider
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"No signature algorithm was defined"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|ALGORITHM_NOT_SET
argument_list|)
throw|;
block|}
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isHmacSign
argument_list|(
name|algo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|HmacJwsSignatureProvider
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureVerifier
name|getSignatureVerifier
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getSignatureVerifier
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureVerifier
name|getSignatureVerifier
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|SignatureAlgorithm
name|defaultAlgorithm
parameter_list|)
block|{
name|SignatureAlgorithm
name|sigAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|SignatureAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|JwsSignatureVerifier
name|theVerifier
init|=
literal|null
decl_stmt|;
name|KeyType
name|keyType
init|=
name|jwk
operator|.
name|getKeyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|KeyType
operator|.
name|RSA
operator|==
name|keyType
condition|)
block|{
name|theVerifier
operator|=
name|getPublicKeySignatureVerifier
argument_list|(
name|JwkUtils
operator|.
name|toRSAPublicKey
argument_list|(
name|jwk
argument_list|,
literal|true
argument_list|)
argument_list|,
name|sigAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KeyType
operator|.
name|OCTET
operator|==
name|keyType
condition|)
block|{
name|byte
index|[]
name|key
init|=
name|JoseUtils
operator|.
name|decode
argument_list|(
operator|(
name|String
operator|)
name|jwk
operator|.
name|getProperty
argument_list|(
name|JsonWebKey
operator|.
name|OCTET_KEY_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|theVerifier
operator|=
name|getHmacSignatureVerifier
argument_list|(
name|key
argument_list|,
name|sigAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KeyType
operator|.
name|EC
operator|==
name|keyType
condition|)
block|{
name|theVerifier
operator|=
name|getPublicKeySignatureVerifier
argument_list|(
name|JwkUtils
operator|.
name|toECPublicKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|sigAlgo
argument_list|)
expr_stmt|;
block|}
return|return
name|theVerifier
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureVerifier
name|getPublicKeySignatureVerifier
parameter_list|(
name|X509Certificate
name|cert
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
return|return
name|getPublicKeySignatureVerifier
argument_list|(
name|cert
operator|.
name|getPublicKey
argument_list|()
argument_list|,
name|algo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureVerifier
name|getPublicKeySignatureVerifier
parameter_list|(
name|PublicKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"No signature algorithm was defined"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|ALGORITHM_NOT_SET
argument_list|)
throw|;
block|}
if|if
condition|(
name|key
operator|instanceof
name|RSAPublicKey
condition|)
block|{
return|return
operator|new
name|PublicKeyJwsSignatureVerifier
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|ECPublicKey
condition|)
block|{
return|return
operator|new
name|EcDsaJwsSignatureVerifier
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureVerifier
name|getHmacSignatureVerifier
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"No signature algorithm was defined"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|ALGORITHM_NOT_SET
argument_list|)
throw|;
block|}
if|if
condition|(
name|AlgorithmUtils
operator|.
name|isHmacSign
argument_list|(
name|algo
operator|.
name|getJwaName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|HmacJwsSignatureVerifier
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|SignatureAlgorithm
argument_list|,
name|List
argument_list|<
name|JwsJsonSignatureEntry
argument_list|>
argument_list|>
name|getJwsJsonSignatureMap
parameter_list|(
name|List
argument_list|<
name|JwsJsonSignatureEntry
argument_list|>
name|signatures
parameter_list|)
block|{
name|Map
argument_list|<
name|SignatureAlgorithm
argument_list|,
name|List
argument_list|<
name|JwsJsonSignatureEntry
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JwsJsonSignatureEntry
name|entry
range|:
name|signatures
control|)
block|{
name|SignatureAlgorithm
name|sigAlgorithm
init|=
name|entry
operator|.
name|getUnionHeader
argument_list|()
operator|.
name|getSignatureAlgorithm
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JwsJsonSignatureEntry
argument_list|>
name|entries
init|=
name|map
operator|.
name|get
argument_list|(
name|sigAlgorithm
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
name|entries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|sigAlgorithm
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureProvider
name|loadSignatureProvider
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
return|return
name|loadSignatureProvider
argument_list|(
literal|null
argument_list|,
name|required
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureProvider
name|loadSignatureProvider
parameter_list|(
name|JwsHeaders
name|headers
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|KeyManagementUtils
operator|.
name|loadStoreProperties
argument_list|(
name|m
argument_list|,
name|required
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_OUT_PROPS
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_PROPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JwsSignatureProvider
name|theSigProvider
init|=
name|loadSignatureProvider
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|headers
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|setSignatureAlgorithm
argument_list|(
name|theSigProvider
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|theSigProvider
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureVerifier
name|loadSignatureVerifier
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
return|return
name|loadSignatureVerifier
argument_list|(
literal|null
argument_list|,
name|required
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JwsSignatureVerifier
name|loadSignatureVerifier
parameter_list|(
name|JwsHeaders
name|headers
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|boolean
name|allowNoneSignature
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_ALLOW_NONE_SIGNATURE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowNoneSignature
operator|&&
name|SignatureAlgorithm
operator|.
name|NONE
operator|.
name|getJwaName
argument_list|()
operator|.
name|equals
argument_list|(
name|headers
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|NoneJwsSignatureVerifier
argument_list|()
return|;
block|}
name|Properties
name|props
init|=
name|KeyManagementUtils
operator|.
name|loadStoreProperties
argument_list|(
name|m
argument_list|,
name|required
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_IN_PROPS
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_PROPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|loadSignatureVerifier
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|headers
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|JwsSignatureProvider
argument_list|>
name|loadSignatureProviders
parameter_list|(
name|String
name|propLoc
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|Properties
name|props
init|=
name|loadJwsProperties
argument_list|(
name|m
argument_list|,
name|propLoc
argument_list|)
decl_stmt|;
name|JwsSignatureProvider
name|theSigProvider
init|=
name|loadSignatureProvider
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|theSigProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|theSigProvider
argument_list|)
return|;
block|}
name|List
argument_list|<
name|JwsSignatureProvider
argument_list|>
name|theSigProviders
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JoseConstants
operator|.
name|HEADER_JSON_WEB_KEY
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|JsonWebKey
argument_list|>
name|jwks
init|=
name|JwkUtils
operator|.
name|loadJsonWebKeys
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|SIGN
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwks
operator|!=
literal|null
condition|)
block|{
name|theSigProviders
operator|=
operator|new
name|ArrayList
argument_list|<
name|JwsSignatureProvider
argument_list|>
argument_list|(
name|jwks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JsonWebKey
name|jwk
range|:
name|jwks
control|)
block|{
name|theSigProviders
operator|.
name|add
argument_list|(
name|JwsUtils
operator|.
name|getSignatureProvider
argument_list|(
name|jwk
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|theSigProviders
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Providers are not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|NO_PROVIDER
argument_list|)
throw|;
block|}
return|return
name|theSigProviders
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|JwsSignatureVerifier
argument_list|>
name|loadSignatureVerifiers
parameter_list|(
name|String
name|propLoc
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|Properties
name|props
init|=
name|loadJwsProperties
argument_list|(
name|m
argument_list|,
name|propLoc
argument_list|)
decl_stmt|;
name|JwsSignatureVerifier
name|theVerifier
init|=
name|loadSignatureVerifier
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|theVerifier
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|theVerifier
argument_list|)
return|;
block|}
name|List
argument_list|<
name|JwsSignatureVerifier
argument_list|>
name|theVerifiers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JoseConstants
operator|.
name|HEADER_JSON_WEB_KEY
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|JsonWebKey
argument_list|>
name|jwks
init|=
name|JwkUtils
operator|.
name|loadJsonWebKeys
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|VERIFY
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwks
operator|!=
literal|null
condition|)
block|{
name|theVerifiers
operator|=
operator|new
name|ArrayList
argument_list|<
name|JwsSignatureVerifier
argument_list|>
argument_list|(
name|jwks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JsonWebKey
name|jwk
range|:
name|jwks
control|)
block|{
name|theVerifiers
operator|.
name|add
argument_list|(
name|JwsUtils
operator|.
name|getSignatureVerifier
argument_list|(
name|jwk
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|theVerifiers
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Verifiers are not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|NO_VERIFIER
argument_list|)
throw|;
block|}
return|return
name|theVerifiers
return|;
block|}
specifier|public
specifier|static
name|boolean
name|validateCriticalHeaders
parameter_list|(
name|JoseHeaders
name|headers
parameter_list|)
block|{
comment|//TODO: validate JWS specific constraints
return|return
name|JoseUtils
operator|.
name|validateCriticalHeaders
argument_list|(
name|headers
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|JwsSignatureProvider
name|loadSignatureProvider
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|JoseHeaders
name|headers
parameter_list|,
name|boolean
name|ignoreNullProvider
parameter_list|)
block|{
name|JwsSignatureProvider
name|theSigProvider
init|=
literal|null
decl_stmt|;
name|boolean
name|reportPublicKey
init|=
name|headers
operator|!=
literal|null
operator|&&
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|MessageUtils
operator|.
name|getContextualProperty
argument_list|(
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_REPORT_KEY_PROP
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_REPORT_KEY_PROP
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|reportPublicKeyId
init|=
name|headers
operator|!=
literal|null
operator|&&
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|MessageUtils
operator|.
name|getContextualProperty
argument_list|(
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_REPORT_KEY_ID_PROP
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_REPORT_KEY_ID_PROP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|JoseConstants
operator|.
name|HEADER_JSON_WEB_KEY
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|loadJsonWebKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|SIGN
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwk
operator|!=
literal|null
condition|)
block|{
name|String
name|signatureAlgo
init|=
name|getSignatureAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|getDefaultKeyAlgo
argument_list|(
name|jwk
argument_list|)
argument_list|)
decl_stmt|;
name|theSigProvider
operator|=
name|JwsUtils
operator|.
name|getSignatureProvider
argument_list|(
name|jwk
argument_list|,
name|SignatureAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|signatureAlgo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reportPublicKey
operator|||
name|reportPublicKeyId
condition|)
block|{
name|JwkUtils
operator|.
name|setPublicKeyInfo
argument_list|(
name|jwk
argument_list|,
name|headers
argument_list|,
name|signatureAlgo
argument_list|,
name|reportPublicKey
argument_list|,
name|reportPublicKeyId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
name|signatureAlgo
init|=
name|getSignatureAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PrivateKey
name|pk
init|=
name|KeyManagementUtils
operator|.
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|SIGN
argument_list|)
decl_stmt|;
name|theSigProvider
operator|=
name|getPrivateKeySignatureProvider
argument_list|(
name|pk
argument_list|,
name|SignatureAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|signatureAlgo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reportPublicKey
condition|)
block|{
name|headers
operator|.
name|setX509Chain
argument_list|(
name|KeyManagementUtils
operator|.
name|loadAndEncodeX509CertificateOrChain
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|theSigProvider
operator|==
literal|null
operator|&&
operator|!
name|ignoreNullProvider
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Provider is not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|NO_PROVIDER
argument_list|)
throw|;
block|}
return|return
name|theSigProvider
return|;
block|}
specifier|private
specifier|static
name|JwsSignatureVerifier
name|loadSignatureVerifier
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|JwsHeaders
name|inHeaders
parameter_list|,
name|boolean
name|ignoreNullVerifier
parameter_list|)
block|{
name|JwsSignatureVerifier
name|theVerifier
init|=
literal|null
decl_stmt|;
name|String
name|inHeaderKid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inHeaders
operator|!=
literal|null
condition|)
block|{
name|inHeaderKid
operator|=
name|inHeaders
operator|.
name|getKeyId
argument_list|()
expr_stmt|;
comment|//TODO: optionally validate inHeaders.getAlgorithm against a property in props
if|if
condition|(
name|inHeaders
operator|.
name|getHeader
argument_list|(
name|JoseConstants
operator|.
name|HEADER_JSON_WEB_KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|JsonWebKey
name|publicJwk
init|=
name|inHeaders
operator|.
name|getJsonWebKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|inHeaderKid
operator|!=
literal|null
operator|&&
operator|!
name|inHeaderKid
operator|.
name|equals
argument_list|(
name|publicJwk
operator|.
name|getKeyId
argument_list|()
argument_list|)
operator|||
operator|!
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|m
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_ACCEPT_PUBLIC_KEY_PROP
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|INVALID_KEY
argument_list|)
throw|;
block|}
return|return
name|getSignatureVerifier
argument_list|(
name|publicJwk
argument_list|,
name|inHeaders
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|inHeaders
operator|.
name|getHeader
argument_list|(
name|JoseConstants
operator|.
name|HEADER_X509_CHAIN
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|chain
init|=
name|KeyManagementUtils
operator|.
name|toX509CertificateChain
argument_list|(
name|inHeaders
operator|.
name|getX509Chain
argument_list|()
argument_list|)
decl_stmt|;
name|KeyManagementUtils
operator|.
name|validateCertificateChain
argument_list|(
name|props
argument_list|,
name|chain
argument_list|)
expr_stmt|;
return|return
name|getPublicKeySignatureVerifier
argument_list|(
name|chain
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublicKey
argument_list|()
argument_list|,
name|inHeaders
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|JoseConstants
operator|.
name|HEADER_JSON_WEB_KEY
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|loadJsonWebKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|KeyOperation
operator|.
name|VERIFY
argument_list|,
name|inHeaderKid
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwk
operator|!=
literal|null
condition|)
block|{
name|String
name|signatureAlgo
init|=
name|getSignatureAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|getDefaultKeyAlgo
argument_list|(
name|jwk
argument_list|)
argument_list|)
decl_stmt|;
name|theVerifier
operator|=
name|getSignatureVerifier
argument_list|(
name|jwk
argument_list|,
name|SignatureAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|signatureAlgo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|signatureAlgo
init|=
name|getSignatureAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|theVerifier
operator|=
name|getPublicKeySignatureVerifier
argument_list|(
name|KeyManagementUtils
operator|.
name|loadPublicKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
argument_list|,
name|SignatureAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|signatureAlgo
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|theVerifier
operator|==
literal|null
operator|&&
operator|!
name|ignoreNullVerifier
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Verifier is not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|NO_VERIFIER
argument_list|)
throw|;
block|}
return|return
name|theVerifier
return|;
block|}
specifier|private
specifier|static
name|Properties
name|loadJwsProperties
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|propLoc
parameter_list|)
block|{
try|try
block|{
return|return
name|JoseUtils
operator|.
name|loadProperties
argument_list|(
name|propLoc
argument_list|,
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"JWS init properties are not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|NO_INIT_PROPERTIES
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
specifier|static
name|String
name|getSignatureAlgo
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|algo
parameter_list|,
name|String
name|defaultAlgo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|defaultAlgo
operator|==
literal|null
condition|)
block|{
name|defaultAlgo
operator|=
name|AlgorithmUtils
operator|.
name|RS_SHA_256_ALGO
expr_stmt|;
block|}
comment|// Check for deprecated identifier first
name|String
name|sigAlgo
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|JoseConstants
operator|.
name|DEPR_RSSEC_SIGNATURE_ALGORITHM
argument_list|)
decl_stmt|;
if|if
condition|(
name|sigAlgo
operator|==
literal|null
condition|)
block|{
name|sigAlgo
operator|=
operator|(
name|String
operator|)
name|m
operator|.
name|getContextualProperty
argument_list|(
name|JoseConstants
operator|.
name|DEPR_RSSEC_SIGNATURE_ALGORITHM
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigAlgo
operator|!=
literal|null
condition|)
block|{
return|return
name|sigAlgo
return|;
block|}
comment|// Otherwise check newer identifier
return|return
name|KeyManagementUtils
operator|.
name|getKeyAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_ALGORITHM
argument_list|,
name|defaultAlgo
argument_list|)
return|;
block|}
return|return
name|algo
return|;
block|}
specifier|private
specifier|static
name|String
name|getDefaultKeyAlgo
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
name|KeyType
name|keyType
init|=
name|jwk
operator|.
name|getKeyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|KeyType
operator|.
name|OCTET
operator|==
name|keyType
condition|)
block|{
return|return
name|AlgorithmUtils
operator|.
name|HMAC_SHA_256_ALGO
return|;
block|}
elseif|else
if|if
condition|(
name|KeyType
operator|.
name|EC
operator|==
name|keyType
condition|)
block|{
return|return
name|AlgorithmUtils
operator|.
name|ES_SHA_256_ALGO
return|;
block|}
else|else
block|{
return|return
name|AlgorithmUtils
operator|.
name|RS_SHA_256_ALGO
return|;
block|}
block|}
specifier|public
specifier|static
name|JwsCompactConsumer
name|verify
parameter_list|(
name|JwsSignatureVerifier
name|v
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|JwsCompactConsumer
name|jws
init|=
operator|new
name|JwsCompactConsumer
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jws
operator|.
name|verifySignatureWith
argument_list|(
name|v
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|INVALID_SIGNATURE
argument_list|)
throw|;
block|}
return|return
name|jws
return|;
block|}
specifier|public
specifier|static
name|String
name|sign
parameter_list|(
name|JwsSignatureProvider
name|jwsSig
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|JwsHeaders
name|headers
init|=
operator|new
name|JwsHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|ct
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|setContentType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
name|JwsCompactProducer
name|jws
init|=
operator|new
name|JwsCompactProducer
argument_list|(
name|headers
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|jws
operator|.
name|signWith
argument_list|(
name|jwsSig
argument_list|)
expr_stmt|;
return|return
name|jws
operator|.
name|getSignedEncodedJws
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|validateJwsCertificateChain
parameter_list|(
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certs
parameter_list|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|KeyManagementUtils
operator|.
name|loadStoreProperties
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_IN_PROPS
argument_list|,
name|JoseConstants
operator|.
name|RSSEC_SIGNATURE_PROPS
argument_list|)
decl_stmt|;
name|KeyManagementUtils
operator|.
name|validateCertificateChain
argument_list|(
name|props
argument_list|,
name|certs
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isPayloadUnencoded
parameter_list|(
name|JwsHeaders
name|jwsHeaders
parameter_list|)
block|{
return|return
name|jwsHeaders
operator|.
name|getPayloadEncodingStatus
argument_list|()
operator|==
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
end_class

end_unit

