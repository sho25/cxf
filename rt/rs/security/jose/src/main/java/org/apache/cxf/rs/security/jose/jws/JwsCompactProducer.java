begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseHeadersReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_class
specifier|public
class|class
name|JwsCompactProducer
block|{
specifier|private
name|JoseHeadersReaderWriter
name|writer
init|=
operator|new
name|JoseHeadersReaderWriter
argument_list|()
decl_stmt|;
specifier|private
name|JwsHeaders
name|headers
decl_stmt|;
specifier|private
name|String
name|plainJwsPayload
decl_stmt|;
specifier|private
name|String
name|signature
decl_stmt|;
specifier|public
name|JwsCompactProducer
parameter_list|(
name|String
name|plainJwsPayload
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|plainJwsPayload
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JwsCompactProducer
parameter_list|(
name|JwsHeaders
name|headers
parameter_list|,
name|String
name|plainJwsPayload
parameter_list|)
block|{
name|this
argument_list|(
name|headers
argument_list|,
literal|null
argument_list|,
name|plainJwsPayload
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|JwsCompactProducer
parameter_list|(
name|JwsHeaders
name|headers
parameter_list|,
name|JoseHeadersReaderWriter
name|w
parameter_list|,
name|String
name|plainJwsPayload
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|writer
operator|=
name|w
expr_stmt|;
block|}
name|this
operator|.
name|plainJwsPayload
operator|=
name|plainJwsPayload
expr_stmt|;
block|}
specifier|public
name|JwsHeaders
name|getJoseHeaders
parameter_list|()
block|{
if|if
condition|(
name|headers
operator|==
literal|null
condition|)
block|{
name|headers
operator|=
operator|new
name|JwsHeaders
argument_list|()
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
specifier|public
name|String
name|getUnsignedEncodedJws
parameter_list|()
block|{
return|return
name|getUnsignedEncodedJws
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|String
name|getUnsignedEncodedJws
parameter_list|(
name|boolean
name|detached
parameter_list|)
block|{
name|checkAlgorithm
argument_list|()
expr_stmt|;
return|return
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|writer
operator|.
name|headersToJson
argument_list|(
name|getJoseHeaders
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"."
operator|+
operator|(
name|detached
condition|?
literal|""
else|:
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|plainJwsPayload
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getEncodedSignature
parameter_list|()
block|{
return|return
name|signature
return|;
block|}
specifier|public
name|String
name|getSignedEncodedJws
parameter_list|()
block|{
return|return
name|getSignedEncodedJws
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSignedEncodedJws
parameter_list|(
name|boolean
name|detached
parameter_list|)
block|{
name|checkAlgorithm
argument_list|()
expr_stmt|;
name|boolean
name|noSignature
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|signature
argument_list|)
decl_stmt|;
if|if
condition|(
name|noSignature
operator|&&
operator|!
name|isPlainText
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Signature is not available"
argument_list|)
throw|;
block|}
return|return
name|getUnsignedEncodedJws
argument_list|(
name|detached
argument_list|)
operator|+
literal|"."
operator|+
operator|(
name|noSignature
condition|?
literal|""
else|:
name|signature
operator|)
return|;
block|}
specifier|public
name|String
name|signWith
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|signWith
argument_list|(
name|JwsUtils
operator|.
name|getSignatureProvider
argument_list|(
name|jwk
argument_list|,
name|headers
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|signWith
parameter_list|(
name|RSAPrivateKey
name|key
parameter_list|)
block|{
return|return
name|signWith
argument_list|(
name|JwsUtils
operator|.
name|getRSAKeySignatureProvider
argument_list|(
name|key
argument_list|,
name|headers
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|signWith
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|signWith
argument_list|(
name|JwsUtils
operator|.
name|getHmacSignatureProvider
argument_list|(
name|key
argument_list|,
name|headers
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|signWith
parameter_list|(
name|JwsSignatureProvider
name|signer
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|getUnsignedEncodedJws
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sig
init|=
name|signer
operator|.
name|sign
argument_list|(
name|getJoseHeaders
argument_list|()
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
return|return
name|setSignatureBytes
argument_list|(
name|sig
argument_list|)
return|;
block|}
specifier|public
name|String
name|setSignatureText
parameter_list|(
name|String
name|signatureText
parameter_list|)
block|{
name|setEncodedSignature
argument_list|(
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|signatureText
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getSignedEncodedJws
argument_list|()
return|;
block|}
specifier|public
name|String
name|setSignatureBytes
parameter_list|(
name|byte
index|[]
name|signatureOctets
parameter_list|)
block|{
name|setEncodedSignature
argument_list|(
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|signatureOctets
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getSignedEncodedJws
argument_list|()
return|;
block|}
specifier|private
name|void
name|setEncodedSignature
parameter_list|(
name|String
name|sig
parameter_list|)
block|{
name|this
operator|.
name|signature
operator|=
name|sig
expr_stmt|;
block|}
specifier|private
name|boolean
name|isPlainText
parameter_list|()
block|{
return|return
name|AlgorithmUtils
operator|.
name|PLAIN_TEXT_ALGO
operator|.
name|equals
argument_list|(
name|getAlgorithm
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|getAlgorithm
parameter_list|()
block|{
return|return
name|getJoseHeaders
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkAlgorithm
parameter_list|()
block|{
if|if
condition|(
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Algorithm header is not set"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

