begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JoseUtils
block|{
specifier|private
name|JoseUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|String
name|checkContentType
parameter_list|(
name|String
name|contentType
parameter_list|,
name|String
name|defaultType
parameter_list|)
block|{
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|int
name|paramIndex
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
name|String
name|typeWithoutParams
init|=
name|paramIndex
operator|==
operator|-
literal|1
condition|?
name|contentType
else|:
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|paramIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeWithoutParams
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|contentType
operator|=
literal|"application/"
operator|+
name|contentType
expr_stmt|;
block|}
block|}
else|else
block|{
name|contentType
operator|=
name|defaultType
expr_stmt|;
block|}
return|return
name|contentType
return|;
block|}
specifier|public
specifier|static
name|String
name|expandContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|int
name|paramIndex
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
name|String
name|typeWithoutParams
init|=
name|paramIndex
operator|==
operator|-
literal|1
condition|?
name|contentType
else|:
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|paramIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeWithoutParams
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|contentType
operator|=
literal|"application/"
operator|+
name|contentType
expr_stmt|;
block|}
return|return
name|contentType
return|;
block|}
specifier|public
specifier|static
name|String
name|decodeToString
parameter_list|(
name|String
name|encoded
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|decode
argument_list|(
name|encoded
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
name|String
name|encoded
parameter_list|)
block|{
return|return
name|CryptoUtils
operator|.
name|decodeSequence
argument_list|(
name|encoded
argument_list|)
return|;
block|}
block|}
end_class

end_unit

