begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|json
operator|.
name|JsonMapObjectReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_class
specifier|public
class|class
name|JwsJsonSignatureEntry
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JwsJsonSignatureEntry
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|jwsPayload
decl_stmt|;
specifier|private
name|String
name|encodedProtectedHeader
decl_stmt|;
specifier|private
name|String
name|encodedSignature
decl_stmt|;
specifier|private
name|JwsHeaders
name|protectedHeader
decl_stmt|;
specifier|private
name|JwsHeaders
name|unprotectedHeader
decl_stmt|;
specifier|private
name|JwsHeaders
name|unionHeaders
decl_stmt|;
specifier|private
name|JsonMapObjectReaderWriter
name|writer
init|=
operator|new
name|JsonMapObjectReaderWriter
argument_list|()
decl_stmt|;
specifier|public
name|JwsJsonSignatureEntry
parameter_list|(
name|String
name|jwsPayload
parameter_list|,
name|String
name|encodedProtectedHeader
parameter_list|,
name|String
name|encodedSignature
parameter_list|,
name|JwsHeaders
name|unprotectedHeader
parameter_list|)
block|{
if|if
condition|(
name|encodedProtectedHeader
operator|==
literal|null
operator|&&
name|unprotectedHeader
operator|==
literal|null
operator|||
name|encodedSignature
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Invalid Signature entry"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|INVALID_JSON_JWS
argument_list|)
throw|;
block|}
name|this
operator|.
name|jwsPayload
operator|=
name|jwsPayload
expr_stmt|;
name|this
operator|.
name|encodedProtectedHeader
operator|=
name|encodedProtectedHeader
expr_stmt|;
name|this
operator|.
name|encodedSignature
operator|=
name|encodedSignature
expr_stmt|;
name|this
operator|.
name|unprotectedHeader
operator|=
name|unprotectedHeader
expr_stmt|;
if|if
condition|(
name|encodedProtectedHeader
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|protectedHeader
operator|=
operator|new
name|JwsHeaders
argument_list|(
name|writer
operator|.
name|fromJson
argument_list|(
name|JoseUtils
operator|.
name|decodeToString
argument_list|(
name|encodedProtectedHeader
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|prepare
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|prepare
parameter_list|()
block|{
name|unionHeaders
operator|=
operator|new
name|JwsHeaders
argument_list|()
expr_stmt|;
if|if
condition|(
name|protectedHeader
operator|!=
literal|null
condition|)
block|{
name|unionHeaders
operator|.
name|asMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|protectedHeader
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unprotectedHeader
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|unionHeaders
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|unprotectedHeader
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Protected and unprotected headers have duplicate values"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JwsException
argument_list|(
name|JwsException
operator|.
name|Error
operator|.
name|INVALID_JSON_JWS
argument_list|)
throw|;
block|}
name|unionHeaders
operator|.
name|asMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|unprotectedHeader
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getJwsPayload
parameter_list|()
block|{
return|return
name|jwsPayload
return|;
block|}
specifier|public
name|String
name|getDecodedJwsPayload
parameter_list|()
block|{
if|if
condition|(
name|protectedHeader
operator|==
literal|null
operator|||
name|protectedHeader
operator|.
name|getPayloadEncodingStatus
argument_list|()
operator|!=
name|Boolean
operator|.
name|FALSE
condition|)
block|{
return|return
name|JoseUtils
operator|.
name|decodeToString
argument_list|(
name|jwsPayload
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|jwsPayload
return|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getDecodedJwsPayloadBytes
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|getDecodedJwsPayload
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEncodedProtectedHeader
parameter_list|()
block|{
return|return
name|encodedProtectedHeader
return|;
block|}
specifier|public
name|JwsHeaders
name|getProtectedHeader
parameter_list|()
block|{
return|return
name|protectedHeader
return|;
block|}
specifier|public
name|JwsHeaders
name|getUnprotectedHeader
parameter_list|()
block|{
return|return
name|unprotectedHeader
return|;
block|}
specifier|public
name|JwsHeaders
name|getUnionHeader
parameter_list|()
block|{
return|return
name|unionHeaders
return|;
block|}
specifier|public
name|String
name|getEncodedSignature
parameter_list|()
block|{
return|return
name|encodedSignature
return|;
block|}
specifier|public
name|byte
index|[]
name|getDecodedSignature
parameter_list|()
block|{
return|return
name|JoseUtils
operator|.
name|decode
argument_list|(
name|getEncodedSignature
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getUnsignedSequence
parameter_list|()
block|{
if|if
condition|(
name|getEncodedProtectedHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getEncodedProtectedHeader
argument_list|()
operator|+
literal|"."
operator|+
name|getJwsPayload
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|"."
operator|+
name|getJwsPayload
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|getKeyId
parameter_list|()
block|{
return|return
name|getUnionHeader
argument_list|()
operator|.
name|getKeyId
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|verifySignatureWith
parameter_list|(
name|JwsSignatureVerifier
name|validator
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|validator
operator|.
name|verify
argument_list|(
name|getUnionHeader
argument_list|()
argument_list|,
name|getUnsignedSequence
argument_list|()
argument_list|,
name|getDecodedSignature
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|JwsException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|LOG
operator|.
name|warning
argument_list|(
literal|"Invalid Signature Entry"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|verifySignatureWith
parameter_list|(
name|JsonWebKey
name|key
parameter_list|)
block|{
return|return
name|verifySignatureWith
argument_list|(
name|JwsUtils
operator|.
name|getSignatureVerifier
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|validateCriticalHeaders
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getUnprotectedHeader
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JoseConstants
operator|.
name|HEADER_CRITICAL
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|JwsUtils
operator|.
name|validateCriticalHeaders
argument_list|(
name|getUnionHeader
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toJson
parameter_list|()
block|{
return|return
name|toJson
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|toJson
parameter_list|(
name|boolean
name|flattenedMode
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|flattenedMode
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|protectedHeader
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\"protected\":\""
operator|+
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|writer
operator|.
name|toJson
argument_list|(
name|protectedHeader
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unprotectedHeader
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|protectedHeader
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\"header\":"
operator|+
name|writer
operator|.
name|toJson
argument_list|(
name|unprotectedHeader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"signature\":\""
operator|+
name|encodedSignature
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|flattenedMode
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

