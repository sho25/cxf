begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
specifier|public
class|class
name|JwsJsonOutputStream
extends|extends
name|FilterOutputStream
block|{
specifier|private
name|boolean
name|flushed
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|protectedHeaders
decl_stmt|;
specifier|private
name|List
argument_list|<
name|JwsSignature
argument_list|>
name|signatures
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
specifier|public
name|JwsJsonOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|protectedHeaders
parameter_list|,
name|List
argument_list|<
name|JwsSignature
argument_list|>
name|signatures
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|protectedHeaders
operator|=
name|protectedHeaders
expr_stmt|;
name|this
operator|.
name|signatures
operator|=
name|signatures
expr_stmt|;
comment|// This can be further optimized by having a dedicated thread per signature,
comment|// can make a difference if a number of signatures to be created is> 2
name|this
operator|.
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|Integer
operator|.
name|SIZE
operator|/
literal|8
argument_list|)
operator|.
name|putInt
argument_list|(
name|value
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
name|b
index|[]
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO: Review if it is at least theoretically possible that a given b[] region
comment|// can be modified in a subsequent write which might affect the signature calculation
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|JwsSignature
name|signature
range|:
name|signatures
control|)
block|{
try|try
block|{
name|signature
operator|.
name|update
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|flushed
condition|)
block|{
return|return;
block|}
name|out
operator|.
name|write
argument_list|(
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
literal|"\",\"signatures\":["
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|shutdownExecutor
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|signatures
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|','
block|}
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
literal|"{\"protected\":\""
operator|+
name|protectedHeaders
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\",\"signature\":\""
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sign
init|=
name|signatures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|sign
argument_list|()
decl_stmt|;
name|Base64UrlUtility
operator|.
name|encodeAndStream
argument_list|(
name|sign
argument_list|,
literal|0
argument_list|,
name|sign
operator|.
name|length
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
literal|"\"}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|out
operator|.
name|write
argument_list|(
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
literal|"]}"
argument_list|)
argument_list|)
expr_stmt|;
name|flushed
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|shutdownExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|executor
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

