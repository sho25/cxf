begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyAgreement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|crypto
operator|.
name|MessageDigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jaxrs
operator|.
name|KeyManagementUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JwkUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JweUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JSON_WEB_ENCRYPTION_CEK_ALGO_PROP
init|=
literal|"rs.security.jwe.content.encryption.algorithm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON_WEB_ENCRYPTION_KEY_ALGO_PROP
init|=
literal|"rs.security.jwe.key.encryption.algorithm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON_WEB_ENCRYPTION_ZIP_ALGO_PROP
init|=
literal|"rs.security.jwe.zip.algorithm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RSSEC_ENCRYPTION_OUT_PROPS
init|=
literal|"rs.security.encryption.out.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RSSEC_ENCRYPTION_IN_PROPS
init|=
literal|"rs.security.encryption.in.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RSSEC_ENCRYPTION_PROPS
init|=
literal|"rs.security.encryption.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RSSEC_ENCRYPTION_REPORT_KEY_PROP
init|=
literal|"rs.security.jwe.report.public.key"
decl_stmt|;
specifier|private
name|JweUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|RSAPublicKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
block|{
return|return
name|encrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|RSAPublicKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
name|getRSAKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|encrypt
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
block|{
return|return
name|encrypt
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
if|if
condition|(
name|keyAlgo
operator|!=
literal|null
condition|)
block|{
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|encrypt
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|encryptDirect
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|encrypt
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
name|getKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|encrypt
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
name|ct
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptDirect
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
block|{
return|return
name|encryptDirect
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptDirect
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|JweEncryptionProvider
name|jwe
init|=
name|getDirectKeyJweEncryption
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|encrypt
argument_list|(
name|content
argument_list|,
name|toJweHeaders
argument_list|(
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encryptDirect
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|JweEncryptionProvider
name|jwe
init|=
name|getDirectKeyJweEncryption
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|encrypt
argument_list|(
name|content
argument_list|,
name|toJweHeaders
argument_list|(
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decrypt
parameter_list|(
name|RSAPrivateKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|KeyDecryptionAlgorithm
name|keyDecryptionProvider
init|=
name|getRSAKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|decrypt
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decrypt
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
if|if
condition|(
name|keyAlgo
operator|!=
literal|null
condition|)
block|{
name|KeyDecryptionAlgorithm
name|keyDecryptionProvider
init|=
name|getSecretKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|decrypt
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|decryptDirect
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decrypt
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|KeyDecryptionAlgorithm
name|keyDecryptionProvider
init|=
name|getKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|decrypt
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decryptDirect
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|JweDecryptionProvider
name|jwe
init|=
name|getDirectKeyJweDecryption
argument_list|(
name|key
argument_list|,
name|contentAlgo
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|decrypt
argument_list|(
name|content
argument_list|)
operator|.
name|getContent
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|decryptDirect
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|JweDecryptionProvider
name|jwe
init|=
name|getDirectKeyJweDecryption
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|decrypt
argument_list|(
name|content
argument_list|)
operator|.
name|getContent
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|KeyEncryptionAlgorithm
name|getKeyEncryptionAlgorithm
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getKeyEncryptionAlgorithm
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyEncryptionAlgorithm
name|getKeyEncryptionAlgorithm
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|String
name|defaultAlgorithm
parameter_list|)
block|{
name|String
name|keyEncryptionAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|jwk
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JsonWebKey
operator|.
name|KEY_TYPE_RSA
operator|.
name|equals
argument_list|(
name|jwk
operator|.
name|getKeyType
argument_list|()
argument_list|)
condition|)
block|{
name|keyEncryptionProvider
operator|=
name|getRSAKeyEncryptionAlgorithm
argument_list|(
name|JwkUtils
operator|.
name|toRSAPublicKey
argument_list|(
name|jwk
argument_list|,
literal|true
argument_list|)
argument_list|,
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JsonWebKey
operator|.
name|KEY_TYPE_OCTET
operator|.
name|equals
argument_list|(
name|jwk
operator|.
name|getKeyType
argument_list|()
argument_list|)
condition|)
block|{
name|keyEncryptionProvider
operator|=
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: support elliptic curve keys
block|}
return|return
name|keyEncryptionProvider
return|;
block|}
specifier|public
specifier|static
name|KeyEncryptionAlgorithm
name|getRSAKeyEncryptionAlgorithm
parameter_list|(
name|RSAPublicKey
name|key
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
return|return
operator|new
name|RSAKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyEncryptionAlgorithm
name|getSecretKeyEncryptionAlgorithm
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
if|if
condition|(
name|Algorithm
operator|.
name|isAesKeyWrap
argument_list|(
name|algo
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesWrapKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Algorithm
operator|.
name|isAesGcmKeyWrap
argument_list|(
name|algo
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmWrapKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|KeyDecryptionAlgorithm
name|getKeyDecryptionAlgorithm
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getKeyDecryptionAlgorithm
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyDecryptionAlgorithm
name|getKeyDecryptionAlgorithm
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|String
name|defaultAlgorithm
parameter_list|)
block|{
name|String
name|keyEncryptionAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|jwk
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|KeyDecryptionAlgorithm
name|keyDecryptionProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JsonWebKey
operator|.
name|KEY_TYPE_RSA
operator|.
name|equals
argument_list|(
name|jwk
operator|.
name|getKeyType
argument_list|()
argument_list|)
condition|)
block|{
name|keyDecryptionProvider
operator|=
name|getRSAKeyDecryptionAlgorithm
argument_list|(
name|JwkUtils
operator|.
name|toRSAPrivateKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JsonWebKey
operator|.
name|KEY_TYPE_OCTET
operator|.
name|equals
argument_list|(
name|jwk
operator|.
name|getKeyType
argument_list|()
argument_list|)
condition|)
block|{
name|keyDecryptionProvider
operator|=
name|getSecretKeyDecryptionAlgorithm
argument_list|(
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: support elliptic curve keys
block|}
return|return
name|keyDecryptionProvider
return|;
block|}
specifier|public
specifier|static
name|KeyDecryptionAlgorithm
name|getRSAKeyDecryptionAlgorithm
parameter_list|(
name|RSAPrivateKey
name|key
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
return|return
operator|new
name|RSAKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyDecryptionAlgorithm
name|getSecretKeyDecryptionAlgorithm
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
if|if
condition|(
name|Algorithm
operator|.
name|isAesKeyWrap
argument_list|(
name|algo
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesWrapKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Algorithm
operator|.
name|isAesGcmKeyWrap
argument_list|(
name|algo
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmWrapKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algo
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionAlgorithm
name|getContentEncryptionAlgorithm
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getContentEncryptionAlgorithm
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionAlgorithm
name|getContentEncryptionAlgorithm
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|String
name|defaultAlgorithm
parameter_list|)
block|{
name|String
name|ctEncryptionAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|jwk
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|ContentEncryptionAlgorithm
name|contentEncryptionProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JsonWebKey
operator|.
name|KEY_TYPE_OCTET
operator|.
name|equals
argument_list|(
name|jwk
operator|.
name|getKeyType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getContentEncryptionAlgorithm
argument_list|(
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|jwk
argument_list|)
argument_list|,
name|ctEncryptionAlgo
argument_list|)
return|;
block|}
return|return
name|contentEncryptionProvider
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionAlgorithm
name|getContentEncryptionAlgorithm
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|algorithm
parameter_list|)
block|{
if|if
condition|(
name|Algorithm
operator|.
name|isAesGcm
argument_list|(
name|algorithm
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmContentEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|algorithm
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ContentEncryptionAlgorithm
name|getContentEncryptionAlgorithm
parameter_list|(
name|String
name|algorithm
parameter_list|)
block|{
if|if
condition|(
name|Algorithm
operator|.
name|isAesGcm
argument_list|(
name|algorithm
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmContentEncryptionAlgorithm
argument_list|(
name|algorithm
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ContentDecryptionAlgorithm
name|getContentDecryptionAlgorithm
parameter_list|(
name|String
name|algorithm
parameter_list|)
block|{
if|if
condition|(
name|Algorithm
operator|.
name|isAesGcm
argument_list|(
name|algorithm
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesGcmContentDecryptionAlgorithm
argument_list|(
name|algorithm
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|getContentDecryptionSecretKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
return|return
name|getContentDecryptionSecretKey
argument_list|(
name|jwk
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SecretKey
name|getContentDecryptionSecretKey
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|,
name|String
name|defaultAlgorithm
parameter_list|)
block|{
name|String
name|ctEncryptionAlgo
init|=
name|jwk
operator|.
name|getAlgorithm
argument_list|()
operator|==
literal|null
condition|?
name|defaultAlgorithm
else|:
name|jwk
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|JsonWebKey
operator|.
name|KEY_TYPE_OCTET
operator|.
name|equals
argument_list|(
name|jwk
operator|.
name|getKeyType
argument_list|()
argument_list|)
operator|&&
name|Algorithm
operator|.
name|isAesGcm
argument_list|(
name|ctEncryptionAlgo
argument_list|)
condition|)
block|{
return|return
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|jwk
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|JweEncryption
name|getDirectKeyJweEncryption
parameter_list|(
name|JsonWebKey
name|key
parameter_list|)
block|{
return|return
operator|new
name|JweEncryption
argument_list|(
operator|new
name|DirectKeyEncryptionAlgorithm
argument_list|()
argument_list|,
name|getContentEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryption
name|getDirectKeyJweEncryption
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|algorithm
parameter_list|)
block|{
return|return
operator|new
name|JweEncryption
argument_list|(
operator|new
name|DirectKeyEncryptionAlgorithm
argument_list|()
argument_list|,
name|getContentEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|algorithm
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryption
name|getDirectKeyJweDecryption
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|algorithm
parameter_list|)
block|{
return|return
operator|new
name|JweDecryption
argument_list|(
operator|new
name|DirectKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|)
argument_list|,
name|getContentDecryptionAlgorithm
argument_list|(
name|algorithm
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryption
name|getDirectKeyJweDecryption
parameter_list|(
name|JsonWebKey
name|key
parameter_list|)
block|{
return|return
operator|new
name|JweDecryption
argument_list|(
operator|new
name|DirectKeyDecryptionAlgorithm
argument_list|(
name|JwkUtils
operator|.
name|toSecretKey
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|,
name|getContentDecryptionAlgorithm
argument_list|(
name|key
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|loadEncryptionProvider
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
return|return
name|loadEncryptionProvider
argument_list|(
literal|null
argument_list|,
name|required
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|loadEncryptionProvider
parameter_list|(
name|JweHeaders
name|headers
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|Message
name|m
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|KeyManagementUtils
operator|.
name|loadStoreProperties
argument_list|(
name|m
argument_list|,
name|required
argument_list|,
name|RSSEC_ENCRYPTION_OUT_PROPS
argument_list|,
name|RSSEC_ENCRYPTION_PROPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|reportPublicKey
init|=
name|headers
operator|!=
literal|null
operator|&&
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|MessageUtils
operator|.
name|getContextualProperty
argument_list|(
name|m
argument_list|,
name|RSSEC_ENCRYPTION_REPORT_KEY_PROP
argument_list|,
name|KeyManagementUtils
operator|.
name|RSSEC_REPORT_KEY_PROP
argument_list|)
argument_list|)
decl_stmt|;
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
literal|null
decl_stmt|;
name|String
name|keyEncryptionAlgo
init|=
name|getKeyEncryptionAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|contentEncryptionAlgo
init|=
name|getContentEncryptionAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ContentEncryptionAlgorithm
name|ctEncryptionProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JwkUtils
operator|.
name|JWK_KEY_STORE_TYPE
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|KeyManagementUtils
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|loadJsonWebKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JsonWebKey
operator|.
name|KEY_OPER_ENCRYPT
argument_list|)
decl_stmt|;
name|keyEncryptionAlgo
operator|=
name|getKeyEncryptionAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|getDefaultKeyAlgo
argument_list|(
name|jwk
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"direct"
operator|.
name|equals
argument_list|(
name|keyEncryptionAlgo
argument_list|)
condition|)
block|{
name|contentEncryptionAlgo
operator|=
name|getContentEncryptionAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|ctEncryptionProvider
operator|=
name|getContentEncryptionAlgorithm
argument_list|(
name|jwk
argument_list|,
name|contentEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyEncryptionProvider
operator|=
name|getKeyEncryptionAlgorithm
argument_list|(
name|jwk
argument_list|,
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
if|if
condition|(
name|reportPublicKey
condition|)
block|{
name|JwkUtils
operator|.
name|setPublicKeyInfo
argument_list|(
name|jwk
argument_list|,
name|headers
argument_list|,
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|keyEncryptionProvider
operator|=
name|getRSAKeyEncryptionAlgorithm
argument_list|(
operator|(
name|RSAPublicKey
operator|)
name|KeyManagementUtils
operator|.
name|loadPublicKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
argument_list|,
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
if|if
condition|(
name|reportPublicKey
condition|)
block|{
name|headers
operator|.
name|setX509Chain
argument_list|(
name|KeyManagementUtils
operator|.
name|loadAndEncodeX509CertificateOrChain
argument_list|(
name|m
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|ctEncryptionProvider
argument_list|,
name|contentEncryptionAlgo
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|JSON_WEB_ENCRYPTION_ZIP_ALGO_PROP
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|loadDecryptionProvider
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
return|return
name|loadDecryptionProvider
argument_list|(
literal|null
argument_list|,
name|required
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|loadDecryptionProvider
parameter_list|(
name|JweHeaders
name|inHeaders
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|Message
name|m
init|=
name|JAXRSUtils
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|KeyManagementUtils
operator|.
name|loadStoreProperties
argument_list|(
name|m
argument_list|,
name|required
argument_list|,
name|RSSEC_ENCRYPTION_IN_PROPS
argument_list|,
name|RSSEC_ENCRYPTION_PROPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|KeyDecryptionAlgorithm
name|keyDecryptionProvider
init|=
literal|null
decl_stmt|;
name|String
name|contentEncryptionAlgo
init|=
name|getContentEncryptionAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SecretKey
name|ctDecryptionKey
init|=
literal|null
decl_stmt|;
name|String
name|keyEncryptionAlgo
init|=
name|getKeyEncryptionAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|inHeaders
operator|!=
literal|null
operator|&&
name|inHeaders
operator|.
name|getHeader
argument_list|(
name|JoseConstants
operator|.
name|HEADER_X509_CHAIN
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|//TODO: validate incoming public keys or certificates
comment|//TODO: optionally validate inHeaders.getAlgorithm against a property in props
comment|// Supporting loading a private key via a certificate for now
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|chain
init|=
name|KeyManagementUtils
operator|.
name|toX509CertificateChain
argument_list|(
name|inHeaders
operator|.
name|getX509Chain
argument_list|()
argument_list|)
decl_stmt|;
name|RSAPrivateKey
name|privateKey
init|=
name|KeyManagementUtils
operator|.
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|chain
argument_list|,
name|JsonWebKey
operator|.
name|KEY_OPER_DECRYPT
argument_list|)
decl_stmt|;
name|contentEncryptionAlgo
operator|=
name|inHeaders
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
expr_stmt|;
name|keyDecryptionProvider
operator|=
name|getRSAKeyDecryptionAlgorithm
argument_list|(
name|privateKey
argument_list|,
name|inHeaders
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|JwkUtils
operator|.
name|JWK_KEY_STORE_TYPE
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|KeyManagementUtils
operator|.
name|RSSEC_KEY_STORE_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|JsonWebKey
name|jwk
init|=
name|JwkUtils
operator|.
name|loadJsonWebKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JsonWebKey
operator|.
name|KEY_OPER_DECRYPT
argument_list|)
decl_stmt|;
name|keyEncryptionAlgo
operator|=
name|getKeyEncryptionAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|jwk
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|getDefaultKeyAlgo
argument_list|(
name|jwk
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"direct"
operator|.
name|equals
argument_list|(
name|keyEncryptionAlgo
argument_list|)
condition|)
block|{
name|contentEncryptionAlgo
operator|=
name|getContentEncryptionAlgo
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|contentEncryptionAlgo
argument_list|)
expr_stmt|;
name|ctDecryptionKey
operator|=
name|getContentDecryptionSecretKey
argument_list|(
name|jwk
argument_list|,
name|contentEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyDecryptionProvider
operator|=
name|getKeyDecryptionAlgorithm
argument_list|(
name|jwk
argument_list|,
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|keyDecryptionProvider
operator|=
name|getRSAKeyDecryptionAlgorithm
argument_list|(
operator|(
name|RSAPrivateKey
operator|)
name|KeyManagementUtils
operator|.
name|loadPrivateKey
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JsonWebKey
operator|.
name|KEY_OPER_DECRYPT
argument_list|)
argument_list|,
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|createJweDecryptionProvider
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|ctDecryptionKey
argument_list|,
name|contentEncryptionAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|RSAPublicKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
name|getRSAKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentEncryptionAlgo
argument_list|,
name|compression
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|RSAPublicKey
name|key
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
name|getRSAKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|headers
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentEncryptionAlgo
argument_list|,
name|compression
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|headers
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|String
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
name|getKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentEncryptionAlgo
argument_list|,
name|compression
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
init|=
name|getKeyEncryptionAlgorithm
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
parameter_list|,
name|String
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
name|JweHeaders
name|headers
init|=
name|prepareJweHeaders
argument_list|(
name|keyEncryptionProvider
operator|!=
literal|null
condition|?
name|keyEncryptionProvider
operator|.
name|getAlgorithm
argument_list|()
else|:
literal|null
argument_list|,
name|contentEncryptionAlgo
argument_list|,
name|compression
argument_list|)
decl_stmt|;
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
parameter_list|,
name|JweHeaders
name|headers
parameter_list|)
block|{
name|String
name|contentEncryptionAlgo
init|=
name|headers
operator|.
name|getContentEncryptionAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|Algorithm
operator|.
name|isAesCbcHmac
argument_list|(
name|contentEncryptionAlgo
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesCbcHmacJweEncryption
argument_list|(
name|contentEncryptionAlgo
argument_list|,
name|keyEncryptionProvider
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|JweEncryption
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|getContentEncryptionAlgorithm
argument_list|(
name|contentEncryptionAlgo
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|RSAPrivateKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentDecryptionAlgo
parameter_list|)
block|{
return|return
name|createJweDecryptionProvider
argument_list|(
name|getRSAKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|SecretKey
name|key
parameter_list|,
name|String
name|keyAlgo
parameter_list|,
name|String
name|contentDecryptionAlgo
parameter_list|)
block|{
return|return
name|createJweDecryptionProvider
argument_list|(
name|getSecretKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|,
name|keyAlgo
argument_list|)
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|JsonWebKey
name|key
parameter_list|,
name|String
name|contentDecryptionAlgo
parameter_list|)
block|{
return|return
name|createJweDecryptionProvider
argument_list|(
name|getKeyDecryptionAlgorithm
argument_list|(
name|key
argument_list|)
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|KeyDecryptionAlgorithm
name|keyDecryptionProvider
parameter_list|,
name|String
name|contentDecryptionAlgo
parameter_list|)
block|{
if|if
condition|(
name|Algorithm
operator|.
name|isAesCbcHmac
argument_list|(
name|contentDecryptionAlgo
argument_list|)
condition|)
block|{
return|return
operator|new
name|AesCbcHmacJweDecryption
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|JweDecryption
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|getContentDecryptionAlgorithm
argument_list|(
name|contentDecryptionAlgo
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|validateCriticalHeaders
parameter_list|(
name|JoseHeaders
name|headers
parameter_list|)
block|{
comment|//TODO: Validate JWE specific constraints
return|return
name|JoseUtils
operator|.
name|validateCriticalHeaders
argument_list|(
name|headers
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getECDHKey
parameter_list|(
name|JsonWebKey
name|privateKey
parameter_list|,
name|JsonWebKey
name|peerPublicKey
parameter_list|,
name|byte
index|[]
name|partyUInfo
parameter_list|,
name|byte
index|[]
name|partyVInfo
parameter_list|,
name|String
name|algoName
parameter_list|,
name|int
name|algoKeyBitLen
parameter_list|)
block|{
return|return
name|getECDHKey
argument_list|(
name|JwkUtils
operator|.
name|toECPrivateKey
argument_list|(
name|privateKey
argument_list|)
argument_list|,
name|JwkUtils
operator|.
name|toECPublicKey
argument_list|(
name|peerPublicKey
argument_list|)
argument_list|,
name|partyUInfo
argument_list|,
name|partyVInfo
argument_list|,
name|algoName
argument_list|,
name|algoKeyBitLen
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getECDHKey
parameter_list|(
name|ECPrivateKey
name|privateKey
parameter_list|,
name|ECPublicKey
name|peerPublicKey
parameter_list|,
name|byte
index|[]
name|partyUInfo
parameter_list|,
name|byte
index|[]
name|partyVInfo
parameter_list|,
name|String
name|algoName
parameter_list|,
name|int
name|algoKeyBitLen
parameter_list|)
block|{
name|byte
index|[]
name|keyZ
init|=
name|generateKeyZ
argument_list|(
name|privateKey
argument_list|,
name|peerPublicKey
argument_list|)
decl_stmt|;
return|return
name|calculateDerivedKey
argument_list|(
name|keyZ
argument_list|,
name|algoName
argument_list|,
name|partyUInfo
argument_list|,
name|partyVInfo
argument_list|,
name|algoKeyBitLen
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getAdditionalAuthenticationData
parameter_list|(
name|String
name|headersJson
parameter_list|,
name|byte
index|[]
name|aad
parameter_list|)
block|{
name|byte
index|[]
name|headersAAD
init|=
name|JweHeaders
operator|.
name|toCipherAdditionalAuthData
argument_list|(
name|headersJson
argument_list|)
decl_stmt|;
if|if
condition|(
name|aad
operator|!=
literal|null
condition|)
block|{
comment|// JWE JSON can provide the extra aad
name|byte
index|[]
name|newAAD
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|headersAAD
argument_list|,
name|headersAAD
operator|.
name|length
operator|+
literal|1
operator|+
name|aad
operator|.
name|length
argument_list|)
decl_stmt|;
name|newAAD
index|[
name|headersAAD
operator|.
name|length
index|]
operator|=
literal|'.'
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|aad
argument_list|,
literal|0
argument_list|,
name|newAAD
argument_list|,
name|headersAAD
operator|.
name|length
operator|+
literal|1
argument_list|,
name|aad
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newAAD
return|;
block|}
else|else
block|{
return|return
name|headersAAD
return|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|calculateDerivedKey
parameter_list|(
name|byte
index|[]
name|keyZ
parameter_list|,
name|String
name|algoName
parameter_list|,
name|byte
index|[]
name|apuBytes
parameter_list|,
name|byte
index|[]
name|apvBytes
parameter_list|,
name|int
name|algoKeyBitLen
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|emptyPartyInfo
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|apuBytes
operator|!=
literal|null
operator|&&
name|apvBytes
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|apuBytes
argument_list|,
name|apvBytes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|byte
index|[]
name|algorithmId
init|=
name|concatenateDatalenAndData
argument_list|(
name|StringUtils
operator|.
name|toBytesASCII
argument_list|(
name|algoName
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|partyUInfo
init|=
name|apuBytes
operator|==
literal|null
condition|?
name|emptyPartyInfo
else|:
name|concatenateDatalenAndData
argument_list|(
name|apuBytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|partyVInfo
init|=
name|apvBytes
operator|==
literal|null
condition|?
name|emptyPartyInfo
else|:
name|concatenateDatalenAndData
argument_list|(
name|apvBytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|suppPubInfo
init|=
name|datalenToBytes
argument_list|(
name|algoKeyBitLen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|otherInfo
init|=
operator|new
name|byte
index|[
name|algorithmId
operator|.
name|length
operator|+
name|partyUInfo
operator|.
name|length
operator|+
name|partyVInfo
operator|.
name|length
operator|+
name|suppPubInfo
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|algorithmId
argument_list|,
literal|0
argument_list|,
name|otherInfo
argument_list|,
literal|0
argument_list|,
name|algorithmId
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|partyUInfo
argument_list|,
literal|0
argument_list|,
name|otherInfo
argument_list|,
name|algorithmId
operator|.
name|length
argument_list|,
name|partyUInfo
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|partyVInfo
argument_list|,
literal|0
argument_list|,
name|otherInfo
argument_list|,
name|algorithmId
operator|.
name|length
operator|+
name|partyUInfo
operator|.
name|length
argument_list|,
name|partyVInfo
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|suppPubInfo
argument_list|,
literal|0
argument_list|,
name|otherInfo
argument_list|,
name|algorithmId
operator|.
name|length
operator|+
name|partyUInfo
operator|.
name|length
operator|+
name|partyVInfo
operator|.
name|length
argument_list|,
name|suppPubInfo
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|concatKDF
init|=
operator|new
name|byte
index|[
literal|36
operator|+
name|otherInfo
operator|.
name|length
index|]
decl_stmt|;
name|concatKDF
index|[
literal|3
index|]
operator|=
literal|1
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keyZ
argument_list|,
literal|0
argument_list|,
name|concatKDF
argument_list|,
literal|4
argument_list|,
name|keyZ
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|otherInfo
argument_list|,
literal|0
argument_list|,
name|concatKDF
argument_list|,
literal|36
argument_list|,
name|otherInfo
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|round1Hash
init|=
name|MessageDigestUtils
operator|.
name|createDigest
argument_list|(
name|concatKDF
argument_list|,
name|MessageDigestUtils
operator|.
name|ALGO_SHA_256
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|round1Hash
argument_list|,
name|algoKeyBitLen
operator|/
literal|8
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|generateKeyZ
parameter_list|(
name|ECPrivateKey
name|privateKey
parameter_list|,
name|ECPublicKey
name|publicKey
parameter_list|)
block|{
try|try
block|{
name|KeyAgreement
name|ka
init|=
name|KeyAgreement
operator|.
name|getInstance
argument_list|(
literal|"ECDH"
argument_list|)
decl_stmt|;
name|ka
operator|.
name|init
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|ka
operator|.
name|doPhase
argument_list|(
name|publicKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|ka
operator|.
name|generateSecret
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|concatenateDatalenAndData
parameter_list|(
name|byte
index|[]
name|bytesASCII
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|datalen
init|=
name|datalenToBytes
argument_list|(
name|bytesASCII
operator|.
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|all
init|=
operator|new
name|byte
index|[
literal|4
operator|+
name|bytesASCII
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|datalen
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytesASCII
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
literal|4
argument_list|,
name|bytesASCII
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|all
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|datalenToBytes
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
return|return
name|buf
operator|.
name|putInt
argument_list|(
name|len
argument_list|)
operator|.
name|array
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|JweHeaders
name|prepareJweHeaders
parameter_list|(
name|String
name|keyEncryptionAlgo
parameter_list|,
name|String
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
name|JweHeaders
name|headers
init|=
operator|new
name|JweHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyEncryptionAlgo
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|setAlgorithm
argument_list|(
name|keyEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
name|headers
operator|.
name|setContentEncryptionAlgorithm
argument_list|(
name|contentEncryptionAlgo
argument_list|)
expr_stmt|;
if|if
condition|(
name|compression
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|setZipAlgorithm
argument_list|(
name|compression
argument_list|)
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
specifier|private
specifier|static
name|JweEncryptionProvider
name|createJweEncryptionProvider
parameter_list|(
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
parameter_list|,
name|ContentEncryptionAlgorithm
name|ctEncryptionProvider
parameter_list|,
name|String
name|contentEncryptionAlgo
parameter_list|,
name|String
name|compression
parameter_list|)
block|{
if|if
condition|(
name|keyEncryptionProvider
operator|==
literal|null
operator|&&
name|ctEncryptionProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|JweHeaders
name|headers
init|=
name|prepareJweHeaders
argument_list|(
name|keyEncryptionProvider
operator|!=
literal|null
condition|?
name|keyEncryptionProvider
operator|.
name|getAlgorithm
argument_list|()
else|:
literal|null
argument_list|,
name|contentEncryptionAlgo
argument_list|,
name|compression
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyEncryptionProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|headers
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|JweEncryption
argument_list|(
operator|new
name|DirectKeyEncryptionAlgorithm
argument_list|()
argument_list|,
name|ctEncryptionProvider
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|JweDecryptionProvider
name|createJweDecryptionProvider
parameter_list|(
name|KeyDecryptionAlgorithm
name|keyDecryptionProvider
parameter_list|,
name|SecretKey
name|ctDecryptionKey
parameter_list|,
name|String
name|contentDecryptionAlgo
parameter_list|)
block|{
if|if
condition|(
name|keyDecryptionProvider
operator|==
literal|null
operator|&&
name|ctDecryptionKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
if|if
condition|(
name|keyDecryptionProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|createJweDecryptionProvider
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getDirectKeyJweDecryption
argument_list|(
name|ctDecryptionKey
argument_list|,
name|contentDecryptionAlgo
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getKeyEncryptionAlgo
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|algo
parameter_list|,
name|String
name|defaultAlgo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|defaultAlgo
operator|==
literal|null
condition|)
block|{
name|defaultAlgo
operator|=
name|JoseConstants
operator|.
name|RSA_OAEP_ALGO
expr_stmt|;
block|}
return|return
name|KeyManagementUtils
operator|.
name|getKeyAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JSON_WEB_ENCRYPTION_KEY_ALGO_PROP
argument_list|,
name|defaultAlgo
argument_list|)
return|;
block|}
return|return
name|algo
return|;
block|}
specifier|private
specifier|static
name|String
name|getDefaultKeyAlgo
parameter_list|(
name|JsonWebKey
name|jwk
parameter_list|)
block|{
if|if
condition|(
name|JsonWebKey
operator|.
name|KEY_TYPE_OCTET
operator|.
name|equals
argument_list|(
name|jwk
operator|.
name|getKeyType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|JoseConstants
operator|.
name|A128GCMKW_ALGO
return|;
block|}
else|else
block|{
return|return
name|JoseConstants
operator|.
name|RSA_OAEP_ALGO
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getContentEncryptionAlgo
parameter_list|(
name|Message
name|m
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
if|if
condition|(
name|algo
operator|==
literal|null
condition|)
block|{
return|return
name|KeyManagementUtils
operator|.
name|getKeyAlgorithm
argument_list|(
name|m
argument_list|,
name|props
argument_list|,
name|JSON_WEB_ENCRYPTION_CEK_ALGO_PROP
argument_list|,
name|JoseConstants
operator|.
name|A128GCM_ALGO
argument_list|)
return|;
block|}
return|return
name|algo
return|;
block|}
specifier|private
specifier|static
name|String
name|encrypt
parameter_list|(
name|KeyEncryptionAlgorithm
name|keyEncryptionProvider
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|ct
parameter_list|)
block|{
name|JweEncryptionProvider
name|jwe
init|=
name|createJweEncryptionProvider
argument_list|(
name|keyEncryptionProvider
argument_list|,
name|contentAlgo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|encrypt
argument_list|(
name|content
argument_list|,
name|toJweHeaders
argument_list|(
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|decrypt
parameter_list|(
name|KeyDecryptionAlgorithm
name|keyDecryptionProvider
parameter_list|,
name|String
name|contentAlgo
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|JweDecryptionProvider
name|jwe
init|=
name|createJweDecryptionProvider
argument_list|(
name|keyDecryptionProvider
argument_list|,
name|contentAlgo
argument_list|)
decl_stmt|;
return|return
name|jwe
operator|.
name|decrypt
argument_list|(
name|content
argument_list|)
operator|.
name|getContent
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|JweHeaders
name|toJweHeaders
parameter_list|(
name|String
name|ct
parameter_list|)
block|{
return|return
operator|new
name|JweHeaders
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|singletonMap
argument_list|(
name|JoseConstants
operator|.
name|HEADER_CONTENT_TYPE
argument_list|,
name|ct
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

