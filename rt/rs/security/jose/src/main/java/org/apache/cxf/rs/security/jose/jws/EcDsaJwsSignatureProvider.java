begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|Algorithm
import|;
end_import

begin_class
specifier|public
class|class
name|EcDsaJwsSignatureProvider
extends|extends
name|PrivateKeyJwsSignatureProvider
block|{
specifier|public
name|EcDsaJwsSignatureProvider
parameter_list|(
name|ECPrivateKey
name|key
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EcDsaJwsSignatureProvider
parameter_list|(
name|ECPrivateKey
name|key
parameter_list|,
name|AlgorithmParameterSpec
name|spec
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|spec
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EcDsaJwsSignatureProvider
parameter_list|(
name|ECPrivateKey
name|key
parameter_list|,
name|SecureRandom
name|random
parameter_list|,
name|AlgorithmParameterSpec
name|spec
parameter_list|,
name|String
name|algo
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|random
argument_list|,
name|spec
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isValidAlgorithmFamily
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
return|return
name|Algorithm
operator|.
name|isEcDsaSign
argument_list|(
name|algo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|JwsSignature
name|doCreateJwsSignature
parameter_list|(
name|Signature
name|s
parameter_list|)
block|{
return|return
operator|new
name|EcDsaPrivateKeyJwsSignature
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|protected
specifier|static
class|class
name|EcDsaPrivateKeyJwsSignature
extends|extends
name|PrivateKeyJwsSignature
block|{
specifier|public
name|EcDsaPrivateKeyJwsSignature
parameter_list|(
name|Signature
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|sign
parameter_list|()
block|{
name|byte
index|[]
name|der
init|=
name|super
operator|.
name|sign
argument_list|()
decl_stmt|;
return|return
name|jcaOutputToJoseOutput
argument_list|(
name|der
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|jcaOutputToJoseOutput
parameter_list|(
name|byte
name|jcaDer
index|[]
parameter_list|)
block|{
comment|// DER uses a pattern of type-length-value triplets
comment|// http://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One#Example_encoded_in_DER
comment|// The algorithm implementation guarantees the correct DER format so no extra validation
comment|// ECDSA signature production:
comment|// 48 (SEQUENCE) + total length + R& S triples, where every triple is 2
comment|// (INTEGER TYPE + length + the actual integer)
name|int
name|rPartLen
init|=
name|jcaDer
index|[
literal|3
index|]
decl_stmt|;
name|int
name|rOffset
init|=
name|rPartLen
operator|%
literal|8
decl_stmt|;
name|int
name|rValueStart
init|=
literal|4
operator|+
name|rOffset
decl_stmt|;
name|int
name|sPartStart
init|=
literal|4
operator|+
name|rPartLen
decl_stmt|;
name|int
name|sPartLen
init|=
name|jcaDer
index|[
name|sPartStart
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|sOffset
init|=
name|sPartLen
operator|%
literal|8
decl_stmt|;
name|int
name|sValueStart
init|=
name|sPartStart
operator|+
literal|2
operator|+
name|sOffset
decl_stmt|;
name|int
name|partLen
init|=
name|rPartLen
operator|-
name|rOffset
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|partLen
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|jcaDer
argument_list|,
name|rValueStart
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|partLen
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|jcaDer
argument_list|,
name|sValueStart
argument_list|,
name|result
argument_list|,
name|partLen
argument_list|,
name|partLen
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

