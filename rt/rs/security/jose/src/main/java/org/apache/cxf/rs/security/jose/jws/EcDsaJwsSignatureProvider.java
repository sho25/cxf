begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|AlgorithmParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_class
specifier|public
class|class
name|EcDsaJwsSignatureProvider
extends|extends
name|PrivateKeyJwsSignatureProvider
block|{
specifier|public
name|EcDsaJwsSignatureProvider
parameter_list|(
name|ECPrivateKey
name|key
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EcDsaJwsSignatureProvider
parameter_list|(
name|ECPrivateKey
name|key
parameter_list|,
name|AlgorithmParameterSpec
name|spec
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|spec
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EcDsaJwsSignatureProvider
parameter_list|(
name|ECPrivateKey
name|key
parameter_list|,
name|SecureRandom
name|random
parameter_list|,
name|AlgorithmParameterSpec
name|spec
parameter_list|,
name|SignatureAlgorithm
name|algo
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|random
argument_list|,
name|spec
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isValidAlgorithmFamily
parameter_list|(
name|String
name|algo
parameter_list|)
block|{
return|return
name|AlgorithmUtils
operator|.
name|isEcDsaSign
argument_list|(
name|algo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|JwsSignature
name|doCreateJwsSignature
parameter_list|(
name|Signature
name|s
parameter_list|)
block|{
return|return
operator|new
name|EcDsaPrivateKeyJwsSignature
argument_list|(
name|s
argument_list|,
name|EcDsaJwsSignatureVerifier
operator|.
name|SIGNATURE_LENGTH_MAP
operator|.
name|get
argument_list|(
name|super
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|getJwaName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
class|class
name|EcDsaPrivateKeyJwsSignature
extends|extends
name|PrivateKeyJwsSignature
block|{
specifier|private
name|int
name|outLen
decl_stmt|;
specifier|public
name|EcDsaPrivateKeyJwsSignature
parameter_list|(
name|Signature
name|s
parameter_list|,
name|int
name|outLen
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|this
operator|.
name|outLen
operator|=
name|outLen
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|sign
parameter_list|()
block|{
name|byte
index|[]
name|jcaDer
init|=
name|super
operator|.
name|sign
argument_list|()
decl_stmt|;
return|return
name|jcaOutputToJoseOutput
argument_list|(
name|outLen
argument_list|,
name|jcaDer
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|jcaOutputToJoseOutput
parameter_list|(
name|int
name|jwsSignatureLen
parameter_list|,
name|byte
name|jcaDer
index|[]
parameter_list|)
block|{
comment|// DER uses a pattern of type-length-value triplets
comment|// http://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One#Example_encoded_in_DER
comment|// The algorithm implementation guarantees the correct DER format so no extra validation
comment|// ECDSA signature production:
comment|// 48 (SEQUENCE) + Total Length (1 or 2 bytes, the 1st byte is -127 if 2 bytes)
comment|// + R& S triples, where both triples are represented as
comment|// 2(INTEGER TYPE) + length + the actual sequence of a given length;
comment|// The sequence might have the extra leading zeroes which need to be skipped
name|int
name|requiredPartLen
init|=
name|jwsSignatureLen
operator|/
literal|2
decl_stmt|;
name|int
name|rsDataBlockStart
init|=
name|jcaDer
index|[
literal|1
index|]
operator|==
operator|-
literal|127
condition|?
literal|4
else|:
literal|3
decl_stmt|;
name|int
name|rPartLen
init|=
name|jcaDer
index|[
name|rsDataBlockStart
index|]
decl_stmt|;
name|int
name|rDataBlockStart
init|=
name|rsDataBlockStart
operator|+
literal|1
decl_stmt|;
name|int
name|rPartLenDiff
init|=
name|rPartLen
operator|-
name|requiredPartLen
decl_stmt|;
name|int
name|rValueStart
init|=
name|rDataBlockStart
operator|+
name|getDataBlockOffset
argument_list|(
name|jcaDer
argument_list|,
name|rDataBlockStart
argument_list|,
name|rPartLenDiff
argument_list|)
decl_stmt|;
name|int
name|sPartStart
init|=
name|rDataBlockStart
operator|+
name|rPartLen
decl_stmt|;
name|int
name|sPartLen
init|=
name|jcaDer
index|[
name|sPartStart
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|sPartLenDiff
init|=
name|sPartLen
operator|-
name|requiredPartLen
decl_stmt|;
name|int
name|sDataBlockStart
init|=
name|sPartStart
operator|+
literal|2
decl_stmt|;
name|int
name|sValueStart
init|=
name|sDataBlockStart
operator|+
name|getDataBlockOffset
argument_list|(
name|jcaDer
argument_list|,
name|sDataBlockStart
argument_list|,
name|sPartLenDiff
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|jwsSignatureLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|jcaDer
argument_list|,
name|rValueStart
argument_list|,
name|result
argument_list|,
name|rPartLenDiff
operator|<
literal|0
condition|?
name|rPartLenDiff
operator|*
operator|-
literal|1
else|:
literal|0
argument_list|,
name|rPartLenDiff
operator|<
literal|0
condition|?
name|requiredPartLen
operator|+
name|rPartLenDiff
else|:
name|requiredPartLen
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|jcaDer
argument_list|,
name|sValueStart
argument_list|,
name|result
argument_list|,
name|sPartLenDiff
operator|<
literal|0
condition|?
name|requiredPartLen
operator|+
name|sPartLenDiff
operator|*
operator|-
literal|1
else|:
name|requiredPartLen
argument_list|,
name|sPartLenDiff
operator|<
literal|0
condition|?
name|requiredPartLen
operator|+
name|sPartLenDiff
else|:
name|requiredPartLen
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|int
name|getDataBlockOffset
parameter_list|(
name|byte
index|[]
name|jcaDer
parameter_list|,
name|int
name|blockStart
parameter_list|,
name|int
name|partLenDiff
parameter_list|)
block|{
comment|// ECDSA productions have 64, 96 or 132 output lengths. The R and S parts would be 32, 48 or 66 bytes each.
comment|// If it is 32 or 48 bytes then we may have occasional extra zeroes in the JCA DER output
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|partLenDiff
operator|>
literal|0
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|partLenDiff
operator|&&
name|jcaDer
index|[
name|blockStart
operator|+
name|i
index|]
operator|==
literal|0
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
block|}
end_class

end_unit

