begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|json
operator|.
name|JsonMapObjectReaderWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseUtils
import|;
end_import

begin_class
specifier|public
class|class
name|JweJsonConsumer
block|{
specifier|private
name|String
name|protectedHeaderJson
decl_stmt|;
specifier|private
name|JweHeaders
name|protectedHeaderJwe
decl_stmt|;
specifier|private
name|JweHeaders
name|sharedUnprotectedHeader
decl_stmt|;
specifier|private
name|List
argument_list|<
name|JweJsonEncryptionEntry
argument_list|>
name|recipients
init|=
operator|new
name|LinkedList
argument_list|<
name|JweJsonEncryptionEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|JweJsonEncryptionEntry
argument_list|,
name|JweHeaders
argument_list|>
name|recipientsMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|JweJsonEncryptionEntry
argument_list|,
name|JweHeaders
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|aad
decl_stmt|;
specifier|private
name|byte
index|[]
name|iv
decl_stmt|;
specifier|private
name|byte
index|[]
name|cipherBytes
decl_stmt|;
specifier|private
name|byte
index|[]
name|authTag
decl_stmt|;
specifier|private
name|JsonMapObjectReaderWriter
name|reader
init|=
operator|new
name|JsonMapObjectReaderWriter
argument_list|()
decl_stmt|;
specifier|public
name|JweJsonConsumer
parameter_list|(
name|String
name|payload
parameter_list|)
block|{
name|prepare
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JweDecryptionOutput
name|decryptWith
parameter_list|(
name|JweDecryptionProvider
name|jwe
parameter_list|)
block|{
name|JweJsonEncryptionEntry
name|entry
init|=
name|getJweDecryptionEntry
argument_list|(
name|jwe
argument_list|)
decl_stmt|;
return|return
name|decryptWith
argument_list|(
name|jwe
argument_list|,
name|entry
argument_list|)
return|;
block|}
specifier|public
name|JweDecryptionOutput
name|decryptWith
parameter_list|(
name|JweDecryptionProvider
name|jwe
parameter_list|,
name|JweJsonEncryptionEntry
name|entry
parameter_list|)
block|{
name|JweDecryptionInput
name|jweDecryptionInput
init|=
name|getJweDecryptionInput
argument_list|(
name|jwe
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
name|jwe
operator|.
name|decrypt
argument_list|(
name|jweDecryptionInput
argument_list|)
decl_stmt|;
return|return
operator|new
name|JweDecryptionOutput
argument_list|(
name|jweDecryptionInput
operator|.
name|getJweHeaders
argument_list|()
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|private
name|JweDecryptionInput
name|getJweDecryptionInput
parameter_list|(
name|JweDecryptionProvider
name|jwe
parameter_list|,
name|JweJsonEncryptionEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|jwe
operator|==
literal|null
operator|||
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|JweHeaders
name|unionHeaders
init|=
name|recipientsMap
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|unionHeaders
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|JweDecryptionInput
name|input
init|=
operator|new
name|JweDecryptionInput
argument_list|(
name|entry
operator|.
name|getEncryptedKey
argument_list|()
argument_list|,
name|iv
argument_list|,
name|cipherBytes
argument_list|,
name|authTag
argument_list|,
name|aad
argument_list|,
name|protectedHeaderJson
argument_list|,
name|unionHeaders
argument_list|)
decl_stmt|;
return|return
name|input
return|;
block|}
specifier|private
name|JweJsonEncryptionEntry
name|getJweDecryptionEntry
parameter_list|(
name|JweDecryptionProvider
name|jwe
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|JweJsonEncryptionEntry
argument_list|,
name|JweHeaders
argument_list|>
name|entry
range|:
name|recipientsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|keyAlgo
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getKeyEncryptionAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyAlgo
operator|!=
literal|null
operator|&&
name|keyAlgo
operator|.
name|equals
argument_list|(
name|jwe
operator|.
name|getKeyAlgorithm
argument_list|()
operator|.
name|getJwaName
argument_list|()
argument_list|)
operator|||
name|keyAlgo
operator|==
literal|null
operator|&&
name|jwe
operator|.
name|getKeyAlgorithm
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|prepare
parameter_list|(
name|String
name|payload
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObjectMap
init|=
name|reader
operator|.
name|fromJson
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|String
name|encodedProtectedHeader
init|=
operator|(
name|String
operator|)
name|jsonObjectMap
operator|.
name|get
argument_list|(
literal|"protected"
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedProtectedHeader
operator|!=
literal|null
condition|)
block|{
name|protectedHeaderJson
operator|=
name|JoseUtils
operator|.
name|decodeToString
argument_list|(
name|encodedProtectedHeader
argument_list|)
expr_stmt|;
name|protectedHeaderJwe
operator|=
operator|new
name|JweHeaders
argument_list|(
name|reader
operator|.
name|fromJson
argument_list|(
name|protectedHeaderJson
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|unprotectedHeader
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|jsonObjectMap
operator|.
name|get
argument_list|(
literal|"unprotected"
argument_list|)
argument_list|)
decl_stmt|;
name|sharedUnprotectedHeader
operator|=
name|unprotectedHeader
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|JweHeaders
argument_list|(
name|unprotectedHeader
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|encryptionArray
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|jsonObjectMap
operator|.
name|get
argument_list|(
literal|"recipients"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encryptionArray
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|jsonObjectMap
operator|.
name|containsKey
argument_list|(
literal|"encryption_key"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Invalid JWE JSON sequence"
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|encryptionEntry
range|:
name|encryptionArray
control|)
block|{
name|this
operator|.
name|recipients
operator|.
name|add
argument_list|(
name|getEncryptionObject
argument_list|(
name|encryptionEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|recipients
operator|.
name|add
argument_list|(
name|getEncryptionObject
argument_list|(
name|jsonObjectMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aad
operator|=
name|getDecodedBytes
argument_list|(
name|jsonObjectMap
argument_list|,
literal|"aad"
argument_list|)
expr_stmt|;
name|cipherBytes
operator|=
name|getDecodedBytes
argument_list|(
name|jsonObjectMap
argument_list|,
literal|"ciphertext"
argument_list|)
expr_stmt|;
name|iv
operator|=
name|getDecodedBytes
argument_list|(
name|jsonObjectMap
argument_list|,
literal|"iv"
argument_list|)
expr_stmt|;
name|authTag
operator|=
name|getDecodedBytes
argument_list|(
name|jsonObjectMap
argument_list|,
literal|"tag"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|JweJsonEncryptionEntry
name|getEncryptionObject
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|encryptionEntry
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|header
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|encryptionEntry
operator|.
name|get
argument_list|(
literal|"header"
argument_list|)
argument_list|)
decl_stmt|;
name|JweHeaders
name|recipientUnprotected
init|=
name|header
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|JweHeaders
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|String
name|encodedKey
init|=
operator|(
name|String
operator|)
name|encryptionEntry
operator|.
name|get
argument_list|(
literal|"encrypted_key"
argument_list|)
decl_stmt|;
name|JweJsonEncryptionEntry
name|entry
init|=
operator|new
name|JweJsonEncryptionEntry
argument_list|(
name|recipientUnprotected
argument_list|,
name|encodedKey
argument_list|)
decl_stmt|;
name|JweHeaders
name|unionHeaders
init|=
operator|new
name|JweHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|protectedHeaderJwe
operator|!=
literal|null
condition|)
block|{
name|unionHeaders
operator|.
name|asMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|protectedHeaderJwe
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|unionHeaders
operator|.
name|setProtectedHeaders
argument_list|(
name|protectedHeaderJwe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharedUnprotectedHeader
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|unionHeaders
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|sharedUnprotectedHeader
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Protected and unprotected headers have duplicate values"
argument_list|)
throw|;
block|}
name|unionHeaders
operator|.
name|asMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|sharedUnprotectedHeader
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recipientUnprotected
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|unionHeaders
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|recipientUnprotected
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Protected and unprotected headers have duplicate values"
argument_list|)
throw|;
block|}
name|unionHeaders
operator|.
name|asMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|recipientUnprotected
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|recipientsMap
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|unionHeaders
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
specifier|protected
name|byte
index|[]
name|getDecodedBytes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|JoseUtils
operator|.
name|decode
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|JweHeaders
name|getProtectedHeader
parameter_list|()
block|{
return|return
name|protectedHeaderJwe
return|;
block|}
specifier|public
name|JweHeaders
name|getSharedUnprotectedHeader
parameter_list|()
block|{
return|return
name|sharedUnprotectedHeader
return|;
block|}
specifier|public
name|byte
index|[]
name|getAad
parameter_list|()
block|{
return|return
name|aad
return|;
block|}
specifier|public
name|String
name|getAadText
parameter_list|()
block|{
if|if
condition|(
name|aad
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|aad
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|JweJsonEncryptionEntry
argument_list|>
name|getRecipients
parameter_list|()
block|{
return|return
name|recipients
return|;
block|}
specifier|public
name|Map
argument_list|<
name|JweJsonEncryptionEntry
argument_list|,
name|JweHeaders
argument_list|>
name|getRecipientsMap
parameter_list|()
block|{
return|return
name|recipientsMap
return|;
block|}
block|}
end_class

end_unit

