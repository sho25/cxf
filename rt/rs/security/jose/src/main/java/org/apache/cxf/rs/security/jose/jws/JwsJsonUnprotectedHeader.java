begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|JoseHeadersReaderWriter
import|;
end_import

begin_class
specifier|public
class|class
name|JwsJsonUnprotectedHeader
block|{
specifier|private
name|JoseHeadersReaderWriter
name|writer
init|=
operator|new
name|JoseHeadersReaderWriter
argument_list|()
decl_stmt|;
specifier|private
name|JoseHeaders
name|headerEntries
decl_stmt|;
specifier|public
name|JwsJsonUnprotectedHeader
parameter_list|()
block|{     }
specifier|public
name|JwsJsonUnprotectedHeader
parameter_list|(
name|JoseHeaders
name|headers
parameter_list|)
block|{
name|headerEntries
operator|=
name|headers
expr_stmt|;
block|}
specifier|public
name|JwsJsonUnprotectedHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|JoseHeaders
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|JoseConstants
operator|.
name|HEADER_CRITICAL
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|()
throw|;
block|}
name|headerEntries
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|headerEntries
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|JoseHeaders
name|getHeaderEntries
parameter_list|()
block|{
return|return
name|headerEntries
return|;
block|}
specifier|public
name|String
name|toJson
parameter_list|()
block|{
comment|// The "header" member MUST be present and contain the value JWS
comment|// Unprotected Header when the JWS Unprotected Header value is non-
comment|// empty; otherwise, it MUST be absent. This value is represented as
comment|// an unencoded JSON object, rather than as a string. These Header
comment|// Parameter values are not integrity protected.
if|if
condition|(
name|headerEntries
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
literal|"\"header\":"
operator|+
name|writer
operator|.
name|headersToJson
argument_list|(
name|headerEntries
argument_list|)
return|;
block|}
block|}
end_class

end_unit

