begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|AlgorithmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JweJsonProducerTest
extends|extends
name|Assert
block|{
specifier|static
specifier|final
name|byte
index|[]
name|WRAPPER_BYTES1
init|=
block|{
literal|91
block|,
literal|96
block|,
literal|105
block|,
literal|38
block|,
literal|99
block|,
literal|108
block|,
literal|110
block|,
literal|8
block|,
operator|-
literal|93
block|,
literal|50
block|,
operator|-
literal|15
block|,
literal|62
block|,
literal|0
block|,
operator|-
literal|115
block|,
literal|73
block|,
operator|-
literal|39
block|}
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|WRAPPER_BYTES2
init|=
block|{
operator|-
literal|39
block|,
literal|96
block|,
literal|105
block|,
literal|38
block|,
literal|99
block|,
literal|108
block|,
literal|110
block|,
literal|8
block|,
operator|-
literal|93
block|,
literal|50
block|,
operator|-
literal|15
block|,
literal|62
block|,
literal|0
block|,
operator|-
literal|115
block|,
literal|73
block|,
literal|91
block|}
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|CEK_BYTES
init|=
block|{
operator|-
literal|43
block|,
literal|123
block|,
literal|77
block|,
literal|115
block|,
literal|40
block|,
literal|49
block|,
operator|-
literal|4
block|,
operator|-
literal|9
block|,
operator|-
literal|48
block|,
operator|-
literal|74
block|,
literal|62
block|,
literal|59
block|,
literal|60
block|,
literal|102
block|,
operator|-
literal|22
block|,
operator|-
literal|100
block|}
decl_stmt|;
specifier|static
specifier|final
name|String
name|SINGLE_RECIPIENT_OUTPUT
init|=
literal|"{"
operator|+
literal|"\"protected\":\"eyJhbGciOiJBMTI4S1ciLCJlbmMiOiJBMTI4R0NNIn0\","
operator|+
literal|"\"recipients\":"
operator|+
literal|"["
operator|+
literal|"{\"encrypted_key\":\"b3-M9_CRgT3wEBhhXlpb-BoY7vtA4W_N\"}"
operator|+
literal|"],"
operator|+
literal|"\"iv\":\"48V1_ALb6US04U3b\","
operator|+
literal|"\"ciphertext\":\"KTuJBMk9QG59xPB-c_YLM5-J7VG40_eMPvyHDD7eB-WHj_34YiWgpBOydTBm4RW0zUCJZ09xqorhWJME-DcQ\","
operator|+
literal|"\"tag\":\"GxWlwvTPmHi4ZnQgafiHew\""
operator|+
literal|"}"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SINGLE_RECIPIENT_FLAT_OUTPUT
init|=
literal|"{"
operator|+
literal|"\"protected\":\"eyJhbGciOiJBMTI4S1ciLCJlbmMiOiJBMTI4R0NNIn0\","
operator|+
literal|"\"encrypted_key\":\"b3-M9_CRgT3wEBhhXlpb-BoY7vtA4W_N\","
operator|+
literal|"\"iv\":\"48V1_ALb6US04U3b\","
operator|+
literal|"\"ciphertext\":\"KTuJBMk9QG59xPB-c_YLM5-J7VG40_eMPvyHDD7eB-WHj_34YiWgpBOydTBm4RW0zUCJZ09xqorhWJME-DcQ\","
operator|+
literal|"\"tag\":\"GxWlwvTPmHi4ZnQgafiHew\""
operator|+
literal|"}"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SINGLE_RECIPIENT_DIRECT_OUTPUT
init|=
literal|"{"
operator|+
literal|"\"protected\":\"eyJlbmMiOiJBMTI4R0NNIn0\","
operator|+
literal|"\"recipients\":"
operator|+
literal|"["
operator|+
literal|"{}"
operator|+
literal|"],"
operator|+
literal|"\"iv\":\"48V1_ALb6US04U3b\","
operator|+
literal|"\"ciphertext\":\"KTuJBMk9QG59xPB-c_YLM5-J7VG40_eMPvyHDD7eB-WHj_34YiWgpBOydTBm4RW0zUCJZ09xqorhWJME-DcQ\","
operator|+
literal|"\"tag\":\"Te59ApbK8wNBDY_1_dgYSw\""
operator|+
literal|"}"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SINGLE_RECIPIENT_DIRECT_FLAT_OUTPUT
init|=
literal|"{"
operator|+
literal|"\"protected\":\"eyJlbmMiOiJBMTI4R0NNIn0\","
operator|+
literal|"\"iv\":\"48V1_ALb6US04U3b\","
operator|+
literal|"\"ciphertext\":\"KTuJBMk9QG59xPB-c_YLM5-J7VG40_eMPvyHDD7eB-WHj_34YiWgpBOydTBm4RW0zUCJZ09xqorhWJME-DcQ\","
operator|+
literal|"\"tag\":\"Te59ApbK8wNBDY_1_dgYSw\""
operator|+
literal|"}"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SINGLE_RECIPIENT_ALL_HEADERS_AAD_OUTPUT
init|=
literal|"{"
operator|+
literal|"\"protected\":\"eyJlbmMiOiJBMTI4R0NNIn0\","
operator|+
literal|"\"unprotected\":{\"jku\":\"https://server.example.com/keys.jwks\"},"
operator|+
literal|"\"recipients\":"
operator|+
literal|"["
operator|+
literal|"{"
operator|+
literal|"\"header\":{\"alg\":\"A128KW\"},"
operator|+
literal|"\"encrypted_key\":\"b3-M9_CRgT3wEBhhXlpb-BoY7vtA4W_N\""
operator|+
literal|"}"
operator|+
literal|"],"
operator|+
literal|"\"aad\":\""
operator|+
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|JweJsonProducerTest
operator|.
name|EXTRA_AAD_SOURCE
argument_list|)
operator|+
literal|"\","
operator|+
literal|"\"iv\":\"48V1_ALb6US04U3b\","
operator|+
literal|"\"ciphertext\":\"KTuJBMk9QG59xPB-c_YLM5-J7VG40_eMPvyHDD7eB-WHj_34YiWgpBOydTBm4RW0zUCJZ09xqorhWJME-DcQ\","
operator|+
literal|"\"tag\":\"oVUQGS9608D-INq61-vOaA\""
operator|+
literal|"}"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MULTIPLE_RECIPIENTS_OUTPUT
init|=
literal|"{"
operator|+
literal|"\"protected\":\"eyJlbmMiOiJBMTI4R0NNIn0\","
operator|+
literal|"\"unprotected\":{\"jku\":\"https://server.example.com/keys.jwks\",\"alg\":\"A128KW\"},"
operator|+
literal|"\"recipients\":"
operator|+
literal|"["
operator|+
literal|"{"
operator|+
literal|"\"encrypted_key\":\"b3-M9_CRgT3wEBhhXlpb-BoY7vtA4W_N\""
operator|+
literal|"},"
operator|+
literal|"{"
operator|+
literal|"\"encrypted_key\":\"6a_nnEYO45qB_Vp6N2QbFQ7Cv1uecbiE\""
operator|+
literal|"}"
operator|+
literal|"],"
operator|+
literal|"\"aad\":\"WyJ2Y2FyZCIsW1sidmVyc2lvbiIse30sInRleHQiLCI0LjAiXSxbImZuIix7fSwidGV4dCIsIk1lcmlhZG9jIEJyYW5keWJ1Y"
operator|+
literal|"2siXSxbIm4iLHt9LCJ0ZXh0IixbIkJyYW5keWJ1Y2siLCJNZXJpYWRvYyIsIk1yLiIsIiJdXSxbImJkYXkiLHt9LCJ0ZXh0"
operator|+
literal|"IiwiVEEgMjk4MiJdLFsiZ2VuZGVyIix7fSwidGV4dCIsIk0iXV1d\","
operator|+
literal|"\"iv\":\"48V1_ALb6US04U3b\","
operator|+
literal|"\"ciphertext\":\"KTuJBMk9QG59xPB-c_YLM5-J7VG40_eMPvyHDD7eB-WHj_34YiWgpBOydTBm4RW0zUCJZ09xqorhWJME-DcQ\","
operator|+
literal|"\"tag\":\"oVUQGS9608D-INq61-vOaA\""
operator|+
literal|"}"
decl_stmt|;
specifier|static
specifier|final
name|String
name|EXTRA_AAD_SOURCE
init|=
literal|"[\"vcard\",["
operator|+
literal|"[\"version\",{},\"text\",\"4.0\"],"
operator|+
literal|"[\"fn\",{},\"text\",\"Meriadoc Brandybuck\"],"
operator|+
literal|"[\"n\",{},\"text\",[\"Brandybuck\",\"Meriadoc\",\"Mr.\",\"\"]],"
operator|+
literal|"[\"bday\",{},\"text\",\"TA 2982\"],"
operator|+
literal|"[\"gender\",{},\"text\",\"M\"]"
operator|+
literal|"]]"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SINGLE_RECIPIENT_A128CBCHS256_OUTPUT
init|=
literal|"{"
operator|+
literal|"\"protected\":\"eyJhbGciOiJBMTI4S1ciLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0\","
operator|+
literal|"\"recipients\":"
operator|+
literal|"["
operator|+
literal|"{\"encrypted_key\":\"6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ\"}"
operator|+
literal|"],"
operator|+
literal|"\"iv\":\"AxY8DCtDaGlsbGljb3RoZQ\","
operator|+
literal|"\"ciphertext\":\"KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY\","
operator|+
literal|"\"tag\":\"U0m_YmjN04DJvceFICbCVQ\""
operator|+
literal|"}"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SINGLE_RECIPIENT_A128CBCHS256_DIRECT_OUTPUT
init|=
literal|"{"
operator|+
literal|"\"protected\":\"eyJlbmMiOiJBMTI4Q0JDLUhTMjU2In0\","
operator|+
literal|"\"recipients\":"
operator|+
literal|"["
operator|+
literal|"{}"
operator|+
literal|"],"
operator|+
literal|"\"iv\":\"AxY8DCtDaGlsbGljb3RoZQ\","
operator|+
literal|"\"ciphertext\":\"KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY\","
operator|+
literal|"\"tag\":\"Mz-VPPyU4RlcuYv1IwIvzw\""
operator|+
literal|"}"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|registerBouncyCastleIfNeeded
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Cipher
operator|.
name|getInstance
argument_list|(
name|AlgorithmUtils
operator|.
name|AES_GCM_ALGO_JAVA
argument_list|)
expr_stmt|;
name|Cipher
operator|.
name|getInstance
argument_list|(
name|AlgorithmUtils
operator|.
name|AES_CBC_ALGO_JAVA
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|unregisterBouncyCastleIfNeeded
parameter_list|()
throws|throws
name|Exception
block|{
name|Security
operator|.
name|removeProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleRecipientGcm
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|text
init|=
literal|"The true sign of intelligence is not knowledge but imagination."
decl_stmt|;
name|doTestSingleRecipient
argument_list|(
name|text
argument_list|,
name|SINGLE_RECIPIENT_OUTPUT
argument_list|,
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|,
name|WRAPPER_BYTES1
argument_list|,
name|JweCompactReaderWriterTest
operator|.
name|INIT_VECTOR_A1
argument_list|,
name|CEK_BYTES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleRecipientDirectGcm
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|text
init|=
literal|"The true sign of intelligence is not knowledge but imagination."
decl_stmt|;
name|doTestSingleRecipient
argument_list|(
name|text
argument_list|,
name|SINGLE_RECIPIENT_DIRECT_OUTPUT
argument_list|,
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|,
literal|null
argument_list|,
name|JweCompactReaderWriterTest
operator|.
name|INIT_VECTOR_A1
argument_list|,
name|CEK_BYTES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleRecipientDirectFlatGcm
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|text
init|=
literal|"The true sign of intelligence is not knowledge but imagination."
decl_stmt|;
name|doTestSingleRecipient
argument_list|(
name|text
argument_list|,
name|SINGLE_RECIPIENT_DIRECT_FLAT_OUTPUT
argument_list|,
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|,
literal|null
argument_list|,
name|JweCompactReaderWriterTest
operator|.
name|INIT_VECTOR_A1
argument_list|,
name|CEK_BYTES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleRecipientFlatGcm
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|text
init|=
literal|"The true sign of intelligence is not knowledge but imagination."
decl_stmt|;
name|doTestSingleRecipient
argument_list|(
name|text
argument_list|,
name|SINGLE_RECIPIENT_FLAT_OUTPUT
argument_list|,
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|,
name|WRAPPER_BYTES1
argument_list|,
name|JweCompactReaderWriterTest
operator|.
name|INIT_VECTOR_A1
argument_list|,
name|CEK_BYTES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleRecipientA128CBCHS256
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|text
init|=
literal|"Live long and prosper."
decl_stmt|;
name|doTestSingleRecipient
argument_list|(
name|text
argument_list|,
name|SINGLE_RECIPIENT_A128CBCHS256_OUTPUT
argument_list|,
name|AlgorithmUtils
operator|.
name|A128CBC_HS256_ALGO
argument_list|,
name|Base64UrlUtility
operator|.
name|decode
argument_list|(
name|JweCompactReaderWriterTest
operator|.
name|KEY_ENCRYPTION_KEY_A3
argument_list|)
argument_list|,
name|JweCompactReaderWriterTest
operator|.
name|INIT_VECTOR_A3
argument_list|,
name|JweCompactReaderWriterTest
operator|.
name|CONTENT_ENCRYPTION_KEY_A3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleRecipientDirectA128CBCHS256
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|text
init|=
literal|"Live long and prosper."
decl_stmt|;
name|doTestSingleRecipient
argument_list|(
name|text
argument_list|,
name|SINGLE_RECIPIENT_A128CBCHS256_DIRECT_OUTPUT
argument_list|,
name|AlgorithmUtils
operator|.
name|A128CBC_HS256_ALGO
argument_list|,
literal|null
argument_list|,
name|JweCompactReaderWriterTest
operator|.
name|INIT_VECTOR_A3
argument_list|,
name|JweCompactReaderWriterTest
operator|.
name|CONTENT_ENCRYPTION_KEY_A3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|doTestSingleRecipient
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|expectedOutput
parameter_list|,
name|String
name|contentEncryptionAlgo
parameter_list|,
specifier|final
name|byte
index|[]
name|wrapperKeyBytes
parameter_list|,
specifier|final
name|byte
index|[]
name|iv
parameter_list|,
specifier|final
name|byte
index|[]
name|cek
parameter_list|,
name|boolean
name|canBeFlat
parameter_list|)
throws|throws
name|Exception
block|{
name|JweHeaders
name|headers
init|=
operator|new
name|JweHeaders
argument_list|(
name|AlgorithmUtils
operator|.
name|A128KW_ALGO
argument_list|,
name|contentEncryptionAlgo
argument_list|)
decl_stmt|;
name|JweEncryptionProvider
name|jwe
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|wrapperKeyBytes
operator|==
literal|null
condition|)
block|{
name|headers
operator|.
name|asMap
argument_list|()
operator|.
name|remove
argument_list|(
literal|"alg"
argument_list|)
expr_stmt|;
name|SecretKey
name|cekKey
init|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|cek
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|jwe
operator|=
name|JweUtils
operator|.
name|getDirectKeyJweEncryption
argument_list|(
name|cekKey
argument_list|,
name|contentEncryptionAlgo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SecretKey
name|wrapperKey
init|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|wrapperKeyBytes
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|jwe
operator|=
name|JweUtils
operator|.
name|createJweEncryptionProvider
argument_list|(
name|wrapperKey
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
name|JweJsonProducer
name|p
init|=
operator|new
name|JweJsonProducer
argument_list|(
name|headers
argument_list|,
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|text
argument_list|)
argument_list|,
name|canBeFlat
argument_list|)
block|{
specifier|protected
name|JweEncryptionInput
name|createEncryptionInput
parameter_list|(
name|JweHeaders
name|jsonHeaders
parameter_list|)
block|{
name|JweEncryptionInput
name|input
init|=
name|super
operator|.
name|createEncryptionInput
argument_list|(
name|jsonHeaders
argument_list|)
decl_stmt|;
name|input
operator|.
name|setCek
argument_list|(
name|cek
argument_list|)
expr_stmt|;
name|input
operator|.
name|setIv
argument_list|(
name|iv
argument_list|)
expr_stmt|;
return|return
name|input
return|;
block|}
block|}
decl_stmt|;
name|String
name|jweJson
init|=
name|p
operator|.
name|encryptWith
argument_list|(
name|jwe
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOutput
argument_list|,
name|jweJson
argument_list|)
expr_stmt|;
return|return
name|jweJson
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleRecipientAllTypeOfHeadersAndAad
parameter_list|()
block|{
specifier|final
name|String
name|text
init|=
literal|"The true sign of intelligence is not knowledge but imagination."
decl_stmt|;
name|SecretKey
name|wrapperKey
init|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|WRAPPER_BYTES1
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|JweHeaders
name|protectedHeaders
init|=
operator|new
name|JweHeaders
argument_list|(
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|)
decl_stmt|;
name|JweHeaders
name|sharedUnprotectedHeaders
init|=
operator|new
name|JweHeaders
argument_list|()
decl_stmt|;
name|sharedUnprotectedHeaders
operator|.
name|setJsonWebKeysUrl
argument_list|(
literal|"https://server.example.com/keys.jwks"
argument_list|)
expr_stmt|;
name|JweEncryptionProvider
name|jwe
init|=
name|JweUtils
operator|.
name|createJweEncryptionProvider
argument_list|(
name|wrapperKey
argument_list|,
name|AlgorithmUtils
operator|.
name|A128KW_ALGO
argument_list|,
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|JweJsonProducer
name|p
init|=
operator|new
name|JweJsonProducer
argument_list|(
name|protectedHeaders
argument_list|,
name|sharedUnprotectedHeaders
argument_list|,
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|text
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|EXTRA_AAD_SOURCE
argument_list|)
argument_list|,
literal|false
argument_list|)
block|{
specifier|protected
name|JweEncryptionInput
name|createEncryptionInput
parameter_list|(
name|JweHeaders
name|jsonHeaders
parameter_list|)
block|{
name|JweEncryptionInput
name|input
init|=
name|super
operator|.
name|createEncryptionInput
argument_list|(
name|jsonHeaders
argument_list|)
decl_stmt|;
name|input
operator|.
name|setCek
argument_list|(
name|CEK_BYTES
argument_list|)
expr_stmt|;
name|input
operator|.
name|setIv
argument_list|(
name|JweCompactReaderWriterTest
operator|.
name|INIT_VECTOR_A1
argument_list|)
expr_stmt|;
return|return
name|input
return|;
block|}
block|}
decl_stmt|;
name|JweHeaders
name|recepientUnprotectedHeaders
init|=
operator|new
name|JweHeaders
argument_list|()
decl_stmt|;
name|recepientUnprotectedHeaders
operator|.
name|setKeyEncryptionAlgorithm
argument_list|(
name|AlgorithmUtils
operator|.
name|A128KW_ALGO
argument_list|)
expr_stmt|;
name|String
name|jweJson
init|=
name|p
operator|.
name|encryptWith
argument_list|(
name|jwe
argument_list|,
name|recepientUnprotectedHeaders
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SINGLE_RECIPIENT_ALL_HEADERS_AAD_OUTPUT
argument_list|,
name|jweJson
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRecipients
parameter_list|()
block|{
specifier|final
name|String
name|text
init|=
literal|"The true sign of intelligence is not knowledge but imagination."
decl_stmt|;
name|SecretKey
name|wrapperKey1
init|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|WRAPPER_BYTES1
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|SecretKey
name|wrapperKey2
init|=
name|CryptoUtils
operator|.
name|createSecretKeySpec
argument_list|(
name|WRAPPER_BYTES2
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|JweHeaders
name|protectedHeaders
init|=
operator|new
name|JweHeaders
argument_list|(
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|)
decl_stmt|;
name|JweHeaders
name|sharedUnprotectedHeaders
init|=
operator|new
name|JweHeaders
argument_list|()
decl_stmt|;
name|sharedUnprotectedHeaders
operator|.
name|setJsonWebKeysUrl
argument_list|(
literal|"https://server.example.com/keys.jwks"
argument_list|)
expr_stmt|;
name|sharedUnprotectedHeaders
operator|.
name|setKeyEncryptionAlgorithm
argument_list|(
name|AlgorithmUtils
operator|.
name|A128KW_ALGO
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JweEncryptionProvider
argument_list|>
name|jweList
init|=
operator|new
name|LinkedList
argument_list|<
name|JweEncryptionProvider
argument_list|>
argument_list|()
decl_stmt|;
name|KeyEncryptionProvider
name|keyEncryption1
init|=
name|JweUtils
operator|.
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|wrapperKey1
argument_list|,
name|AlgorithmUtils
operator|.
name|A128KW_ALGO
argument_list|)
decl_stmt|;
name|ContentEncryptionProvider
name|contentEncryption
init|=
name|JweUtils
operator|.
name|getContentEncryptionAlgorithm
argument_list|(
name|AlgorithmUtils
operator|.
name|A128GCM_ALGO
argument_list|)
decl_stmt|;
name|JweEncryptionProvider
name|jwe1
init|=
operator|new
name|JweEncryption
argument_list|(
name|keyEncryption1
argument_list|,
name|contentEncryption
argument_list|)
decl_stmt|;
name|KeyEncryptionProvider
name|keyEncryption2
init|=
name|JweUtils
operator|.
name|getSecretKeyEncryptionAlgorithm
argument_list|(
name|wrapperKey2
argument_list|,
name|AlgorithmUtils
operator|.
name|A128KW_ALGO
argument_list|)
decl_stmt|;
name|JweEncryptionProvider
name|jwe2
init|=
operator|new
name|JweEncryption
argument_list|(
name|keyEncryption2
argument_list|,
name|contentEncryption
argument_list|)
decl_stmt|;
name|jweList
operator|.
name|add
argument_list|(
name|jwe1
argument_list|)
expr_stmt|;
name|jweList
operator|.
name|add
argument_list|(
name|jwe2
argument_list|)
expr_stmt|;
name|JweJsonProducer
name|p
init|=
operator|new
name|JweJsonProducer
argument_list|(
name|protectedHeaders
argument_list|,
name|sharedUnprotectedHeaders
argument_list|,
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|text
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|toBytesUTF8
argument_list|(
name|EXTRA_AAD_SOURCE
argument_list|)
argument_list|,
literal|false
argument_list|)
block|{
specifier|protected
name|JweEncryptionInput
name|createEncryptionInput
parameter_list|(
name|JweHeaders
name|jsonHeaders
parameter_list|)
block|{
name|JweEncryptionInput
name|input
init|=
name|super
operator|.
name|createEncryptionInput
argument_list|(
name|jsonHeaders
argument_list|)
decl_stmt|;
name|input
operator|.
name|setCek
argument_list|(
name|CEK_BYTES
argument_list|)
expr_stmt|;
name|input
operator|.
name|setIv
argument_list|(
name|JweCompactReaderWriterTest
operator|.
name|INIT_VECTOR_A1
argument_list|)
expr_stmt|;
return|return
name|input
return|;
block|}
block|}
decl_stmt|;
name|String
name|jweJson
init|=
name|p
operator|.
name|encryptWith
argument_list|(
name|jweList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MULTIPLE_RECIPIENTS_OUTPUT
argument_list|,
name|jweJson
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

