begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JwsCompactHeaderTest
extends|extends
name|Assert
block|{
comment|/**      * JWS string, which lacks the "alg" header field.      *       * => Must be rejected by verification operation, since the spec declares      * that the "alg" header field must be present in the compact serialization.      */
specifier|public
specifier|static
specifier|final
name|String
name|MISSING_ALG_HEADER_FIELD_IN_JWS
init|=
literal|"eyAiZ2xhIiA6ICJDQU1IIiB9.eyAibXNnIjogIllvdSBjYW4ndCB0b3VjaCB0aGlzISIgfQ"
operator|+
literal|".Sqd_AuwlPPqv4L1EV4zPuR-HfFJpe9kOfvc597RlcoE"
decl_stmt|;
comment|/**      * JWS string, which contains two "alg" header fields. Bogus "alg" header      * field first.      *       * => Must be rejected by verification operation, since the spec declares      * that the "alg" header field must be present once in the compact      * serialization.      */
specifier|public
specifier|static
specifier|final
name|String
name|TWO_ALG_HEADER_FIELDS_IN_JWS_BOGUS_FIRST
init|=
literal|"eyAiYWxnIjogIkJvZ3VzIiwgImFsZyI6ICJIUzI1NiIgfQ.eyAibXNnIjogIllvdSBjYW4ndCB0b3VjaCB0aGlzISIgfQ"
operator|+
literal|".FIgpDi1Wp9iIxxXfBw8Zce2kiZ8gmqAaVYPduRFR8kU"
decl_stmt|;
comment|/**      * JWS string, which contains two "alg" header fields. Bogus "alg" header      * field last.      *       * => Must be rejected by verification operation, since the spec declares      * that the "alg" header field must be present once in the compact      * serialization.      */
specifier|public
specifier|static
specifier|final
name|String
name|TWO_ALG_HEADER_FIELDS_IN_JWS_BOGUS_LAST
init|=
literal|"eyAiYWxnIjogIkhTMjU2IiwgImFsZyI6ICJCb2d1cyIgfQ.eyAibXNnIjogIllvdSBjYW4ndCB0b3VjaCB0aGlzISIgfQ"
operator|+
literal|".Ftwla-nAg0Nty8ILVhjlIETOy2Tw1JsD3bBq55AS0PU"
decl_stmt|;
comment|/**      * JWS string, which contains an invalid "alg" header field value.      *       * (1): Algorithm not supported/known      *       * => Must be rejected by verification operation, since the spec declares      * that the signature is not valid if the "alg" value does not represent a      * supported algorithm. "alg" values should either be registered in the IANA      * JSON Web Signature and Encryption Algorithms registry defined in JWA or      * be a value that contains a Collision-Resistant Name.      */
specifier|public
specifier|static
specifier|final
name|String
name|INVALID_ALG_HEADER_VALUE_IN_JWS_1
init|=
literal|"tba"
decl_stmt|;
comment|/**      * JWS string, which contains an invalid "alg" header field value.      *       * (2): Wrong value encoding      *       * => Must be rejected by verification operation, since the spec declares      * that the "alg" value is a case-sensitive string containing a StringOrURI      * value.      */
specifier|public
specifier|static
specifier|final
name|String
name|INVALID_ALG_HEADER_VALUE_IN_JWS_2
init|=
literal|"tba"
decl_stmt|;
comment|/**      * JWS string, which contains a "alg" header field value of "none". The      * signature has been generated with "HS256" and the signed JWS has been      * altered afterwards to the value "none".      *       * => Must be rejected by verification operation, since the "none" algorithm      * is considered harmful.      */
specifier|public
specifier|static
specifier|final
name|String
name|ALG_HEADER_VALUE_HS256_IN_JWS
init|=
literal|"eyAiYWxnIjogIkhTMjU2IiB9"
operator|+
literal|".eyAibXNnIjogIllvdSBjYW4ndCB0b3VjaCB0aGlzISIgfQ"
operator|+
literal|".as_gclokwAmukh3zVF1X5sUCCfSc8TbjDdhdvk6C5c8"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALG_HEADER_VALUE_NONE_IN_JWS
init|=
literal|"eyAiYWxnIjogIm5vbmUiIH0"
operator|+
literal|".eyAibXNnIjogIllvdSBjYW4ndCB0b3VjaCB0aGlzISIgfQ"
operator|+
literal|".as_gclokwAmukh3zVF1X5sUCCfSc8TbjDdhdvk6C5c8"
decl_stmt|;
comment|/**      * Support material (keys, etc.)      */
specifier|private
specifier|static
specifier|final
name|String
name|ENCODED_MAC_KEY
init|=
literal|"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75"
operator|+
literal|"aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
decl_stmt|;
comment|// JWS string, which contains crit header field
comment|// JWS string, which contains more than three parts
comment|// JWS string, which contains less than three parts
comment|// JWS string, which contains null bytes padding
annotation|@
name|Test
specifier|public
name|void
name|verifyJwsWithMissingAlgHeaderField
parameter_list|()
throws|throws
name|Exception
block|{
name|JwsCompactConsumer
name|jwsConsumer
init|=
operator|new
name|JwsCompactConsumer
argument_list|(
name|MISSING_ALG_HEADER_FIELD_IN_JWS
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|jwsConsumer
operator|.
name|verifySignatureWith
argument_list|(
operator|new
name|HmacJwsSignatureVerifier
argument_list|(
name|ENCODED_MAC_KEY
argument_list|,
name|Algorithm
operator|.
name|HmacSHA256
operator|.
name|getJwtName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyJwsWithTwoAlgHeaderFieldsBogusFieldFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|JwsCompactConsumer
name|jwsConsumer
init|=
operator|new
name|JwsCompactConsumer
argument_list|(
name|TWO_ALG_HEADER_FIELDS_IN_JWS_BOGUS_FIRST
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|jwsConsumer
operator|.
name|verifySignatureWith
argument_list|(
operator|new
name|HmacJwsSignatureVerifier
argument_list|(
name|ENCODED_MAC_KEY
argument_list|,
name|Algorithm
operator|.
name|HmacSHA256
operator|.
name|getJwtName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyJwsWithTwoAlgHeaderFieldsBogusFieldLast
parameter_list|()
throws|throws
name|Exception
block|{
name|JwsCompactConsumer
name|jwsConsumer
init|=
operator|new
name|JwsCompactConsumer
argument_list|(
name|TWO_ALG_HEADER_FIELDS_IN_JWS_BOGUS_LAST
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|jwsConsumer
operator|.
name|verifySignatureWith
argument_list|(
operator|new
name|HmacJwsSignatureVerifier
argument_list|(
name|ENCODED_MAC_KEY
argument_list|,
name|Algorithm
operator|.
name|HmacSHA256
operator|.
name|getJwtName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyJwsWithAlgHeaderValueNone
parameter_list|()
throws|throws
name|Exception
block|{
name|JwsCompactConsumer
name|jwsConsumerOriginal
init|=
operator|new
name|JwsCompactConsumer
argument_list|(
name|ALG_HEADER_VALUE_HS256_IN_JWS
argument_list|)
decl_stmt|;
name|JwsCompactConsumer
name|jwsConsumerAltered
init|=
operator|new
name|JwsCompactConsumer
argument_list|(
name|ALG_HEADER_VALUE_NONE_IN_JWS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jwsConsumerOriginal
operator|.
name|verifySignatureWith
argument_list|(
operator|new
name|HmacJwsSignatureVerifier
argument_list|(
name|ENCODED_MAC_KEY
argument_list|,
name|Algorithm
operator|.
name|HmacSHA256
operator|.
name|getJwtName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jwsConsumerAltered
operator|.
name|verifySignatureWith
argument_list|(
operator|new
name|HmacJwsSignatureVerifier
argument_list|(
name|ENCODED_MAC_KEY
argument_list|,
name|Algorithm
operator|.
name|HmacSHA256
operator|.
name|getJwtName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

