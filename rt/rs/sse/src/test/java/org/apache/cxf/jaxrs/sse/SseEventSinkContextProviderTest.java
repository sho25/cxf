begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionStage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|OutboundSseEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|SseEventSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|ContinuationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|mock
operator|.
name|web
operator|.
name|MockAsyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|mock
operator|.
name|web
operator|.
name|MockHttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|mock
operator|.
name|web
operator|.
name|MockHttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|SseEventSinkContextProviderTest
block|{
specifier|private
specifier|static
specifier|final
name|OutboundSseEvent
name|EVENT
init|=
operator|new
name|OutboundSseEventImpl
operator|.
name|BuilderImpl
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
name|SseEventSinkContextProvider
name|provider
decl_stmt|;
specifier|private
name|Message
name|message
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|provider
operator|=
operator|new
name|SseEventSinkContextProvider
argument_list|()
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Endpoint
name|endpoint
init|=
name|mock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ContinuationProvider
name|continuationProvider
init|=
name|mock
argument_list|(
name|ContinuationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MockHttpServletResponse
name|response
init|=
operator|new
name|MockHttpServletResponse
argument_list|()
decl_stmt|;
specifier|final
name|MockHttpServletRequest
name|request
init|=
operator|new
name|MockHttpServletRequest
argument_list|()
decl_stmt|;
specifier|final
name|MockAsyncContext
name|ctx
init|=
operator|new
name|MockAsyncContext
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
comment|/* do nothing */
block|}
block|}
decl_stmt|;
name|request
operator|.
name|setAsyncContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|message
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|ContinuationProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|continuationProvider
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSseEventSinkWithDefaultBufferSize
parameter_list|()
block|{
specifier|final
name|SseEventSink
name|sink
init|=
name|provider
operator|.
name|createContext
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|sink
operator|.
name|send
argument_list|(
name|EVENT
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|CompletionStage
operator|::
name|toCompletableFuture
argument_list|)
comment|// At this point, buffer is full, but nothing has been delivered so far
operator|.
name|forEach
argument_list|(
name|f
lambda|->
name|assertThat
argument_list|(
name|f
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The buffer overflow should trigger message rejection and exceptional completion
specifier|final
name|CompletableFuture
argument_list|<
name|?
argument_list|>
name|overflow
init|=
name|sink
operator|.
name|send
argument_list|(
name|EVENT
argument_list|)
operator|.
name|toCompletableFuture
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|overflow
operator|.
name|isCompletedExceptionally
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|CompletionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"The buffer is full (10000), unable to queue SSE event for send."
argument_list|)
expr_stmt|;
name|overflow
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSseEventSinkWithCustomBufferSize
parameter_list|()
block|{
name|message
operator|.
name|put
argument_list|(
name|SseEventSinkImpl
operator|.
name|BUFFER_SIZE_PROPERTY
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
specifier|final
name|SseEventSink
name|sink
init|=
name|provider
operator|.
name|createContext
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|20000
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|sink
operator|.
name|send
argument_list|(
name|EVENT
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|CompletionStage
operator|::
name|toCompletableFuture
argument_list|)
comment|// At this point, buffer is full, but nothing has been delivered so far
operator|.
name|forEach
argument_list|(
name|f
lambda|->
name|assertThat
argument_list|(
name|f
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The buffer overflow should trigger message rejection and exceptional completion
specifier|final
name|CompletableFuture
argument_list|<
name|?
argument_list|>
name|overflow
init|=
name|sink
operator|.
name|send
argument_list|(
name|EVENT
argument_list|)
operator|.
name|toCompletableFuture
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|overflow
operator|.
name|isCompletedExceptionally
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|CompletionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"The buffer is full (20000), unable to queue SSE event for send."
argument_list|)
expr_stmt|;
name|overflow
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

