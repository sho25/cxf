begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Invocation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|InboundSseEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|SseEventSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|spec
operator|.
name|ClientImpl
operator|.
name|WebTargetImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeast
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SseEventSourceImplTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EVENT
init|=
literal|"    event\n"
operator|+
literal|"id: 1\n"
operator|+
literal|"data: test data\n"
operator|+
literal|"retry: 10000\n"
operator|+
literal|": test comment\n"
operator|+
literal|"\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_NO_RETRY
init|=
literal|"    event\n"
operator|+
literal|"id: 1\n"
operator|+
literal|"data: test data\n"
operator|+
literal|": test comment\n"
operator|+
literal|"\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_BAD_RETRY
init|=
literal|"    event\n"
operator|+
literal|"id: 1\n"
operator|+
literal|"data: test data\n"
operator|+
literal|"retry: blba\n"
operator|+
literal|": test comment\n"
operator|+
literal|"\n"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ClientProviderFactory
name|clientProviderFactory
init|=
name|ClientProviderFactory
operator|.
name|createInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|/**      * Subclass the WebClient to augment the visibility of getConfiguration() method.      */
specifier|private
specifier|static
class|class
name|TestWebClient
extends|extends
name|WebClient
block|{
name|TestWebClient
parameter_list|(
name|URI
name|baseURI
parameter_list|)
block|{
name|super
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClientConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
block|}
annotation|@
name|Mock
specifier|private
name|TestWebClient
name|client
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ClientConfiguration
name|clientConfiguration
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|WebTargetImpl
name|target
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Configuration
name|configuration
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Invocation
operator|.
name|Builder
name|builder
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Endpoint
name|endpoint
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Response
name|response
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|when
argument_list|(
name|target
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|target
operator|.
name|getWebClient
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|target
operator|.
name|request
argument_list|(
name|MediaType
operator|.
name|SERVER_SENT_EVENTS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|builder
operator|.
name|headers
argument_list|(
name|any
argument_list|(
name|MultivaluedMap
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clientConfiguration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clientConfiguration
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.jaxrs.client.ClientProviderFactory"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clientProviderFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectWhenNoContentIsReturned
parameter_list|()
block|{
comment|// Verify that 204 response code won't force reconnect
name|when
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|204
argument_list|)
expr_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|response
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReuseSameEventSourceSeveralTimes
parameter_list|()
block|{
comment|// Verify that 204 response code won't force reconnect
name|when
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|204
argument_list|)
expr_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|response
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|response
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReconnectWillBeScheduledOnError
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|when
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Connection refused"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withReconnect
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sleep a little bit for reconnect to reschedule
name|Thread
operator|.
name|sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|builder
argument_list|,
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectWillBeScheduledWhenClosed
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|when
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Connection refused"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withReconnect
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|close
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Sleep a little bit to make sure for reconnect to reschedule (after 100ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|builder
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTryToConnectTwiceSecondAttemtShouldFail
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|when
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
argument_list|)
expr_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withReconnect
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// The attempt to open the SSE connection in another thread at the same
comment|// time should fail
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|eventSource
operator|.
name|open
argument_list|()
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|builder
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndOneEventReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|EVENT
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|when
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|response
operator|.
name|readEntity
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|is
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|InboundSseEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|register
argument_list|(
name|events
operator|::
name|add
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|response
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReconnectDelay
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReconnectAndTwoEventsReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
specifier|final
name|Collection
argument_list|<
name|InputStream
argument_list|>
name|closeables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|response
operator|.
name|readEntity
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|Invocation
lambda|->
block|{
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|EVENT_NO_RETRY
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|is
return|;
block|}
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|InboundSseEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withReconnect
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|register
argument_list|(
name|events
operator|::
name|add
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify(response, times(1)).getStatus();
comment|// Allow the event processor to pull for events (200ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
specifier|final
name|InputStream
name|is
range|:
name|closeables
control|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndCloseTheStreamWhileEventIsBeingReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|response
operator|.
name|readEntity
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|InboundSseEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|register
argument_list|(
name|events
operator|::
name|add
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|response
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
comment|// Allow the event processor to pull for events (200ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|close
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidReconnectDelayInTheEvent
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|EVENT_BAD_RETRY
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|when
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|response
operator|.
name|readEntity
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|is
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|InboundSseEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|register
argument_list|(
name|events
operator|::
name|add
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|response
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReconnectDelay
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTryToCloseWhileConnecting
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|when
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
argument_list|)
expr_stmt|;
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|()
init|)
block|{
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|eventSource
operator|.
name|open
argument_list|()
argument_list|)
decl_stmt|;
comment|// Wait a bit for open() to advance
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SseEventSource
name|withNoReconnect
parameter_list|()
block|{
return|return
name|SseEventSource
operator|.
name|target
argument_list|(
name|target
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|SseEventSource
name|withReconnect
parameter_list|()
block|{
return|return
name|SseEventSource
operator|.
name|target
argument_list|(
name|target
argument_list|)
operator|.
name|reconnectingEvery
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

