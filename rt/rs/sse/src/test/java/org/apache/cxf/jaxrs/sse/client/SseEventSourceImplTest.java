begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|WebTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|InboundSseEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|SseEventSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_class
specifier|public
class|class
name|SseEventSourceImplTest
block|{
enum|enum
name|Type
block|{
name|NO_CONTENT
block|,
name|NO_SERVER
block|,
name|BUSY
block|,
name|EVENT
block|,
name|EVENT_JUST_DATA
block|,
name|EVENT_JUST_NAME
block|,
name|EVENT_MULTILINE_DATA
block|,
name|EVENT_NO_RETRY
block|,
name|EVENT_BAD_RETRY
block|,
name|EVENT_MIXED
block|,
name|EVENT_BAD_NEW_LINES
block|,
name|EVENT_NOT_AUTHORIZED
block|;     }
specifier|private
specifier|static
specifier|final
name|String
name|EVENT
init|=
literal|"event: event\n"
operator|+
literal|"id: 1\n"
operator|+
literal|"data: test data\n"
operator|+
literal|"retry: 10000\n"
operator|+
literal|": test comment\n"
operator|+
literal|"\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_JUST_DATA
init|=
literal|"\n"
operator|+
literal|"data: just test data\n"
operator|+
literal|"\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_MULTILINE_DATA
init|=
literal|"\n"
operator|+
literal|"data: just test data\n"
operator|+
literal|"data: in multiple lines\n"
operator|+
literal|"\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_JUST_NAME
init|=
literal|"\n"
operator|+
literal|"event: just name\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_NO_RETRY
init|=
literal|"event: event\n"
operator|+
literal|"id: 1\n"
operator|+
literal|"data: test data\n"
operator|+
literal|": test comment\n"
operator|+
literal|"\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_BAD_RETRY
init|=
literal|"event: event\n"
operator|+
literal|"id: 1\n"
operator|+
literal|"data: test data\n"
operator|+
literal|"retry: blba\n"
operator|+
literal|": test comment\n"
operator|+
literal|"\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_MIXED
init|=
name|EVENT_JUST_DATA
operator|+
name|EVENT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_BAD_NEW_LINES
init|=
literal|"\n\n\n\n\n\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_ADDRESS
init|=
literal|"local://"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Type
argument_list|,
name|Server
argument_list|>
name|SERVERS
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Type
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|InboundSseEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectWhenNoContentIsReturned
parameter_list|()
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|NO_CONTENT
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReuseSameEventSourceSeveralTimes
parameter_list|()
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|NO_CONTENT
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReconnectWillBeScheduledOnError
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withReconnect
argument_list|(
name|Type
operator|.
name|NO_SERVER
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sleep a little bit for reconnect to reschedule
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectWillBeScheduledWhenClosed
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withReconnect
argument_list|(
name|Type
operator|.
name|NO_SERVER
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|close
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Sleep a little bit to make sure for reconnect to reschedule (after 100ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTryToConnectTwiceSecondAttemtShouldFail
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withReconnect
argument_list|(
name|Type
operator|.
name|BUSY
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// The attempt to open the SSE connection in another thread at the same
comment|// time should fail
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|eventSource
operator|.
name|open
argument_list|()
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndOneEventReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|EVENT
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReconnectDelay
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndJustDataEventIsReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|EVENT_JUST_DATA
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"just test data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndMultilineDataEventIsReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|EVENT_MULTILINE_DATA
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"just test data\nin multiple lines"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndJustEventNameIsReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|EVENT_JUST_NAME
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"just name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndMixedEventsAreReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|EVENT_MIXED
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"just test data"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getReconnectDelay
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|readData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndNoEventsAreDetected
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|EVENT_BAD_NEW_LINES
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReconnectAndTwoEventsReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withReconnect
argument_list|(
name|Type
operator|.
name|EVENT_NO_RETRY
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (200ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test data"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|readData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReconnectAndNotAuthorized
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withReconnect
argument_list|(
name|Type
operator|.
name|EVENT_NOT_AUTHORIZED
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndNotAuthorized
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|EVENT_NOT_AUTHORIZED
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoReconnectAndCloseTheStreamWhileEventIsBeingReceived
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|BUSY
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (200ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|close
argument_list|(
literal|100L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidReconnectDelayInTheEvent
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|EVENT_BAD_RETRY
argument_list|)
init|)
block|{
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow the event processor to pull for events (150ms)
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReconnectDelay
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTryToCloseWhileConnecting
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
try|try
init|(
name|SseEventSource
name|eventSource
init|=
name|withNoReconnect
argument_list|(
name|Type
operator|.
name|BUSY
argument_list|)
init|)
block|{
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|eventSource
operator|.
name|open
argument_list|()
argument_list|)
decl_stmt|;
comment|// Wait a bit for open() to advance
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eventSource
operator|.
name|isOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SseEventSource
name|withNoReconnect
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|SseEventSource
name|eventSource
init|=
name|SseEventSource
operator|.
name|target
argument_list|(
name|target
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|eventSource
operator|.
name|register
argument_list|(
name|events
operator|::
name|add
argument_list|,
name|errors
operator|::
name|add
argument_list|)
expr_stmt|;
return|return
name|eventSource
return|;
block|}
specifier|private
name|SseEventSource
name|withReconnect
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|SseEventSource
name|eventSource
init|=
name|SseEventSource
operator|.
name|target
argument_list|(
name|target
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|reconnectingEvery
argument_list|(
literal|100L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|eventSource
operator|.
name|register
argument_list|(
name|events
operator|::
name|add
argument_list|,
name|errors
operator|::
name|add
argument_list|)
expr_stmt|;
return|return
name|eventSource
return|;
block|}
specifier|private
specifier|static
name|WebTarget
name|target
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|ClientBuilder
operator|.
name|newClient
argument_list|()
operator|.
name|target
argument_list|(
name|LOCAL_ADDRESS
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServer
parameter_list|()
block|{
name|startServer
argument_list|(
name|Type
operator|.
name|NO_CONTENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Type.NO_SERVER
name|startBusyServer
argument_list|(
name|Type
operator|.
name|BUSY
argument_list|)
expr_stmt|;
name|startNotAuthorizedServer
argument_list|(
name|Type
operator|.
name|EVENT_NOT_AUTHORIZED
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
name|Type
operator|.
name|EVENT
argument_list|,
name|EVENT
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
name|Type
operator|.
name|EVENT_JUST_DATA
argument_list|,
name|EVENT_JUST_DATA
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
name|Type
operator|.
name|EVENT_JUST_NAME
argument_list|,
name|EVENT_JUST_NAME
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
name|Type
operator|.
name|EVENT_MULTILINE_DATA
argument_list|,
name|EVENT_MULTILINE_DATA
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
name|Type
operator|.
name|EVENT_NO_RETRY
argument_list|,
name|EVENT_NO_RETRY
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
name|Type
operator|.
name|EVENT_BAD_RETRY
argument_list|,
name|EVENT_BAD_RETRY
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
name|Type
operator|.
name|EVENT_MIXED
argument_list|,
name|EVENT_MIXED
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
name|Type
operator|.
name|EVENT_BAD_NEW_LINES
argument_list|,
name|EVENT_BAD_NEW_LINES
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startNotAuthorizedServer
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|JAXRSServerFactoryBean
name|sf
init|=
operator|new
name|JAXRSServerFactoryBean
argument_list|()
decl_stmt|;
name|sf
operator|.
name|setAddress
argument_list|(
name|LOCAL_ADDRESS
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setServiceBean
argument_list|(
operator|new
name|ProtectedEventServer
argument_list|()
argument_list|)
expr_stmt|;
name|SERVERS
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|sf
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startBusyServer
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|JAXRSServerFactoryBean
name|sf
init|=
operator|new
name|JAXRSServerFactoryBean
argument_list|()
decl_stmt|;
name|sf
operator|.
name|setAddress
argument_list|(
name|LOCAL_ADDRESS
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setServiceBean
argument_list|(
operator|new
name|BusyEventServer
argument_list|()
argument_list|)
expr_stmt|;
name|SERVERS
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|sf
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startServer
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|payload
parameter_list|)
block|{
name|JAXRSServerFactoryBean
name|sf
init|=
operator|new
name|JAXRSServerFactoryBean
argument_list|()
decl_stmt|;
name|sf
operator|.
name|setAddress
argument_list|(
name|LOCAL_ADDRESS
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setServiceBean
argument_list|(
operator|new
name|EventServer
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
name|SERVERS
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|sf
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopServer
parameter_list|()
block|{
for|for
control|(
name|Server
name|server
range|:
name|SERVERS
operator|.
name|values
argument_list|()
control|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EventServer
block|{
specifier|private
specifier|final
name|String
name|payload
decl_stmt|;
specifier|public
name|EventServer
parameter_list|(
name|String
name|event
parameter_list|)
block|{
name|payload
operator|=
name|event
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|SERVER_SENT_EVENTS
argument_list|)
specifier|public
name|String
name|event
parameter_list|()
block|{
return|return
name|payload
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BusyEventServer
extends|extends
name|EventServer
block|{
specifier|public
name|BusyEventServer
parameter_list|()
block|{
name|super
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|event
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
return|return
name|super
operator|.
name|event
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ProtectedEventServer
block|{
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|SERVER_SENT_EVENTS
argument_list|)
specifier|public
name|Response
name|event
parameter_list|()
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

