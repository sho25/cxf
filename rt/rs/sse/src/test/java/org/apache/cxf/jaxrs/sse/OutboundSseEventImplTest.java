begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|OutboundSseEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|Sse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|OutboundSseEventImplTest
block|{
comment|/**      * Ensure that the<code>SseImpl</code> returns the correct builder class,      *<code>OutboundSseEventImpl.BuilderImpl.class</code>.      */
annotation|@
name|Test
specifier|public
name|void
name|testSseImplReturnsExpectedOutboundSseEventBuilder
parameter_list|()
block|{
name|Sse
name|sse
init|=
operator|new
name|SseImpl
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sse
operator|.
name|newEventBuilder
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|OutboundSseEventImpl
operator|.
name|BuilderImpl
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * A user should not need to specify a media type when creating an outbound event. The default      * should be<code>MediaType.SERVER_SENT_EVENTS_TYPE</code>.      */
annotation|@
name|Test
specifier|public
name|void
name|testDefaultMediaType
parameter_list|()
block|{
name|Sse
name|sse
init|=
operator|new
name|SseImpl
argument_list|()
decl_stmt|;
comment|// test newEvent(data)
name|OutboundSseEvent
name|event
init|=
name|sse
operator|.
name|newEvent
argument_list|(
literal|"myData"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myData"
argument_list|,
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|,
name|event
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
comment|// test newEvent(name, data)
name|event
operator|=
name|sse
operator|.
name|newEvent
argument_list|(
literal|"myName"
argument_list|,
literal|"myData2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myName"
argument_list|,
name|event
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myData2"
argument_list|,
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|,
name|event
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
comment|// test newEventBuilder()...build()
name|event
operator|=
name|sse
operator|.
name|newEventBuilder
argument_list|()
operator|.
name|comment
argument_list|(
literal|"myComment"
argument_list|)
operator|.
name|data
argument_list|(
literal|"myData3"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myComment"
argument_list|,
name|event
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myData3"
argument_list|,
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|,
name|event
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * A user should not need to specify the type of data being sent in an outbound      * event. In that case the OutboundSseEvent should use the data object's type. Other      * types may be specified, but the default (if not specified by the user) should be      * the return value from the object's<code>getClass()</code> method.      */
annotation|@
name|Test
specifier|public
name|void
name|testDefaultClass
parameter_list|()
block|{
name|Sse
name|sse
init|=
operator|new
name|SseImpl
argument_list|()
decl_stmt|;
comment|// test newEvent(string)
name|OutboundSseEvent
name|event
init|=
name|sse
operator|.
name|newEvent
argument_list|(
literal|"myData"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myData"
argument_list|,
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// test newEvent(name, data)
name|event
operator|=
name|sse
operator|.
name|newEvent
argument_list|(
literal|"myName"
argument_list|,
literal|"myData2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myName"
argument_list|,
name|event
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myData2"
argument_list|,
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// test newEventBuilder()...build()
name|event
operator|=
name|sse
operator|.
name|newEventBuilder
argument_list|()
operator|.
name|comment
argument_list|(
literal|"myComment"
argument_list|)
operator|.
name|data
argument_list|(
literal|"myData3"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myComment"
argument_list|,
name|event
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myData3"
argument_list|,
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// test that object's class is re-enabled when calling different signatures of the data method
name|OutboundSseEvent
operator|.
name|Builder
name|builder
init|=
name|sse
operator|.
name|newEventBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|data
argument_list|(
name|TestData
operator|.
name|class
argument_list|,
operator|new
name|TestDataImpl
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|TestData
operator|.
name|class
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|data
argument_list|(
literal|"myString"
argument_list|)
expr_stmt|;
name|event
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// same thing, but don't build in between calls to data
name|event
operator|=
name|sse
operator|.
name|newEventBuilder
argument_list|()
operator|.
name|data
argument_list|(
name|TestDataImpl
operator|.
name|class
argument_list|,
operator|new
name|TestDataImpl
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|data
argument_list|(
literal|"anotherString"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"anotherString"
argument_list|,
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * If the user passes null in as the data object or type object for<code>Builder.data(Object)</code>,      *<code>Builder.data(Class, Object)</code>, or<code>Builder.data(GenericType, Object)</code>, they      * should expect an IllegalArgumentException to be thrown.      */
annotation|@
name|Test
specifier|public
name|void
name|testNullsForDataOrTypes
parameter_list|()
block|{
name|Sse
name|sse
init|=
operator|new
name|SseImpl
argument_list|()
decl_stmt|;
name|OutboundSseEvent
operator|.
name|Builder
name|builder
init|=
name|sse
operator|.
name|newEventBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|data
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Passing a null data object should have resulted in an IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|builder
operator|.
name|data
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Passing a null data object should have resulted in an IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|builder
operator|.
name|data
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Passing a null data object should have resulted in an IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|builder
operator|.
name|data
argument_list|(
operator|new
name|GenericType
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{ }
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Passing a null data object should have resulted in an IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|builder
operator|.
name|data
argument_list|(
operator|(
name|GenericType
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|,
literal|"456"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Passing a null data object should have resulted in an IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**      * Test that event built by the builder contains all of the data passed in      * to it.      */
annotation|@
name|Test
specifier|public
name|void
name|testBuilderAPIs
parameter_list|()
block|{
name|SseImpl
name|sse
init|=
operator|new
name|SseImpl
argument_list|()
decl_stmt|;
name|OutboundSseEvent
operator|.
name|Builder
name|builder
init|=
name|sse
operator|.
name|newEventBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|comment
argument_list|(
literal|"myComment"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|data
argument_list|(
operator|new
name|TestDataImpl
argument_list|(
literal|"dataNoSpecifiedType"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|id
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mediaType
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|name
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|reconnectDelay
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|OutboundSseEvent
name|event
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myComment"
argument_list|,
name|event
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestDataImpl
operator|.
name|class
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|instanceof
name|TestDataImpl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dataNoSpecifiedType"
argument_list|,
operator|(
operator|(
name|TestDataImpl
operator|)
name|event
operator|.
name|getData
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|event
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|event
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|event
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|event
operator|.
name|getReconnectDelay
argument_list|()
argument_list|)
expr_stmt|;
comment|// now reuse the builder to build a new event
name|builder
operator|.
name|comment
argument_list|(
literal|"myComment2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|data
argument_list|(
name|TestData
operator|.
name|class
argument_list|,
operator|new
name|TestDataImpl
argument_list|(
literal|"data1"
argument_list|,
literal|"data2"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|id
argument_list|(
literal|"id2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mediaType
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|name
argument_list|(
literal|"name2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|reconnectDelay
argument_list|(
literal|9000
argument_list|)
expr_stmt|;
name|event
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myComment2"
argument_list|,
name|event
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TestDataImpl
argument_list|(
literal|"data1"
argument_list|,
literal|"data2"
argument_list|)
argument_list|,
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestData
operator|.
name|class
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id2"
argument_list|,
name|event
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|,
name|event
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name2"
argument_list|,
name|event
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9000
argument_list|,
name|event
operator|.
name|getReconnectDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
interface|interface
name|TestData
block|{
name|List
argument_list|<
name|String
argument_list|>
name|getData
parameter_list|()
function_decl|;
block|}
class|class
name|TestDataImpl
implements|implements
name|TestData
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|TestDataImpl
parameter_list|(
name|String
modifier|...
name|entries
parameter_list|)
block|{
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|data
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|TestDataImpl
operator|&&
operator|(
operator|(
name|TestDataImpl
operator|)
name|o
operator|)
operator|.
name|data
operator|.
name|size
argument_list|()
operator|==
name|data
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|TestDataImpl
operator|)
name|o
operator|)
operator|.
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|data
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

