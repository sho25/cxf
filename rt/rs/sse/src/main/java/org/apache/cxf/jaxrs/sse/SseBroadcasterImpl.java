begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Flow
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Flow
operator|.
name|Subscriber
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Flow
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|OutboundSseEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|SseBroadcaster
import|;
end_import

begin_class
specifier|public
class|class
name|SseBroadcasterImpl
implements|implements
name|SseBroadcaster
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Flow
operator|.
name|Subscriber
argument_list|<
name|?
super|super
name|OutboundSseEvent
argument_list|>
argument_list|,
name|Subscription
argument_list|>
name|subscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Consumer
argument_list|<
name|Subscriber
argument_list|<
name|?
super|super
name|OutboundSseEvent
argument_list|>
argument_list|>
argument_list|>
name|closers
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|BiConsumer
argument_list|<
name|Subscriber
argument_list|<
name|?
super|super
name|OutboundSseEvent
argument_list|>
argument_list|,
name|Exception
argument_list|>
argument_list|>
name|exceptioners
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|subscribe
parameter_list|(
name|Flow
operator|.
name|Subscriber
argument_list|<
name|?
super|super
name|OutboundSseEvent
argument_list|>
name|subscriber
parameter_list|)
block|{
specifier|final
name|Subscription
name|subscription
init|=
operator|new
name|Subscription
argument_list|()
block|{
specifier|public
name|void
name|request
parameter_list|(
name|long
name|n
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|()
block|{             }
block|}
decl_stmt|;
try|try
block|{
name|subscriber
operator|.
name|onSubscribe
argument_list|(
name|subscription
argument_list|)
expr_stmt|;
name|subscribers
operator|.
name|put
argument_list|(
name|subscriber
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
name|subscriber
operator|.
name|onError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|broadcast
parameter_list|(
name|OutboundSseEvent
name|event
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Flow
operator|.
name|Subscriber
argument_list|<
name|?
super|super
name|OutboundSseEvent
argument_list|>
name|subscriber
range|:
name|subscribers
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|subscriber
operator|.
name|onNext
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
name|exceptioners
operator|.
name|forEach
argument_list|(
name|exceptioner
lambda|->
name|exceptioner
operator|.
name|accept
argument_list|(
name|subscriber
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|Consumer
argument_list|<
name|Subscriber
argument_list|<
name|?
super|super
name|OutboundSseEvent
argument_list|>
argument_list|>
name|subscriber
parameter_list|)
block|{
name|closers
operator|.
name|add
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|BiConsumer
argument_list|<
name|Subscriber
argument_list|<
name|?
super|super
name|OutboundSseEvent
argument_list|>
argument_list|,
name|Exception
argument_list|>
name|exceptioner
parameter_list|)
block|{
name|exceptioners
operator|.
name|add
argument_list|(
name|exceptioner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|subscribers
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|subscriber
lambda|->
block|{
name|subscriber
operator|.
name|onComplete
argument_list|()
expr_stmt|;
name|closers
operator|.
name|forEach
argument_list|(
name|closer
lambda|->
name|closer
operator|.
name|accept
argument_list|(
name|subscriber
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

