begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionStage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|LockSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|AsyncContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|AsyncEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|AsyncListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|AsyncResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|OutboundSseEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|SseEventSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|SseEventSinkImpl
implements|implements
name|SseEventSink
block|{
specifier|public
specifier|static
specifier|final
name|String
name|BUFFER_SIZE_PROPERTY
init|=
literal|"org.apache.cxf.sse.sink.buffer.size"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Annotation
index|[]
name|EMPTY_ANNOTATIONS
init|=
operator|new
name|Annotation
index|[]
block|{}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SseEventSinkImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|10000
decl_stmt|;
comment|// buffering 10000 messages
specifier|private
specifier|final
name|AsyncContext
name|ctx
decl_stmt|;
specifier|private
specifier|final
name|MessageBodyWriter
argument_list|<
name|OutboundSseEvent
argument_list|>
name|writer
decl_stmt|;
specifier|private
specifier|final
name|Queue
argument_list|<
name|QueuedEvent
argument_list|>
name|buffer
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|dispatching
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|throwable
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|completed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
comment|/**      * Create new SseEventSink implementation with the default buffer size of 10000      * SSE events.      *       * @param writer message body writer      * @param async asynchronous response       * @param ctx asynchronous context      */
specifier|public
name|SseEventSinkImpl
parameter_list|(
specifier|final
name|MessageBodyWriter
argument_list|<
name|OutboundSseEvent
argument_list|>
name|writer
parameter_list|,
specifier|final
name|AsyncResponse
name|async
parameter_list|,
specifier|final
name|AsyncContext
name|ctx
parameter_list|)
block|{
name|this
argument_list|(
name|writer
argument_list|,
name|async
argument_list|,
name|ctx
argument_list|,
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create new SseEventSink implementation with the configurable SSE events buffer       * size.      *       * @param writer message body writer      * @param async asynchronous response       * @param ctx asynchronous context      * @param bufferSize SSE events buffer size      */
specifier|public
name|SseEventSinkImpl
parameter_list|(
specifier|final
name|MessageBodyWriter
argument_list|<
name|OutboundSseEvent
argument_list|>
name|writer
parameter_list|,
specifier|final
name|AsyncResponse
name|async
parameter_list|,
specifier|final
name|AsyncContext
name|ctx
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to retrieve the AsyncContext for this request. "
operator|+
literal|"Is the Servlet configured properly?"
argument_list|)
throw|;
block|}
name|ctx
operator|.
name|getResponse
argument_list|()
operator|.
name|setContentType
argument_list|(
name|OutboundSseEventBodyWriter
operator|.
name|SERVER_SENT_EVENTS
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addListener
argument_list|(
operator|new
name|AsyncListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onComplete
parameter_list|(
name|AsyncEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This callback should be called when dequeue() has encountered an
comment|// error during the execution and is forced to complete the context.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|AsyncEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|AsyncEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
comment|// In case of Tomcat, the context is closed automatically when client closes
comment|// the connection.
if|if
condition|(
name|throwable
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|||
name|throwable
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|event
operator|.
name|getThrowable
argument_list|()
argument_list|)
condition|)
block|{
comment|// This callback should be called when dequeue() has encountered an
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onStartAsync
parameter_list|(
name|AsyncEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AsyncContext
name|getAsyncContext
parameter_list|()
block|{
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Closing SSE sink now"
argument_list|)
expr_stmt|;
comment|// In case we are still dispatching, give the events the chance to be
comment|// sent over to the consumers. The good example would be sent(event) call,
comment|// immediately followed by the close() call.
if|if
condition|(
operator|!
name|awaitQueueToDrain
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"There are still SSE events the queue which may not be delivered (closing now)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|completed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
comment|// In case of Tomcat, the context may be already closed (f.e. due to error),
comment|// in this case request is set to null.
if|if
condition|(
name|ctx
operator|.
name|getRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Completing the AsyncContext"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|complete
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Failed to close the AsyncContext cleanly: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Complete all the accepted but not dispatched send request with the
comment|// error (if any) or signal that sink has been closed already.
name|Throwable
name|ex
init|=
name|throwable
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|ex
operator|=
operator|new
name|IllegalStateException
argument_list|(
literal|"The sink has been already closed"
argument_list|)
expr_stmt|;
block|}
name|QueuedEvent
name|queuedEvent
init|=
name|buffer
operator|.
name|poll
argument_list|()
decl_stmt|;
while|while
condition|(
name|queuedEvent
operator|!=
literal|null
condition|)
block|{
name|queuedEvent
operator|.
name|completion
operator|.
name|completeExceptionally
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|queuedEvent
operator|=
name|buffer
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|awaitQueueToDrain
parameter_list|(
name|int
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
specifier|final
name|long
name|parkTime
init|=
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
operator|/
literal|20
decl_stmt|;
name|int
name|attempt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|dispatching
operator|.
name|get
argument_list|()
operator|&&
operator|++
name|attempt
operator|<
literal|20
condition|)
block|{
name|LockSupport
operator|.
name|parkNanos
argument_list|(
name|parkTime
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletionStage
argument_list|<
name|?
argument_list|>
name|send
parameter_list|(
name|OutboundSseEvent
name|event
parameter_list|)
block|{
specifier|final
name|CompletableFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|closed
operator|.
name|get
argument_list|()
operator|&&
name|writer
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Throwable
name|ex
init|=
name|throwable
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buffer
operator|.
name|offer
argument_list|(
operator|new
name|QueuedEvent
argument_list|(
name|event
argument_list|,
name|future
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|dispatching
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|start
argument_list|(
name|this
operator|::
name|dequeue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"The buffer is full ("
operator|+
name|bufferSize
operator|+
literal|"), unable to queue SSE event for send. Please use '"
operator|+
name|BUFFER_SIZE_PROPERTY
operator|+
literal|"' property to increase the limit."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"The sink is already closed, unable to queue SSE event for send"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
comment|/**      * Processes the buffered events and sends the off to the output channel. There  is      * a special handling for the IOException, which forces the sink to switch to closed       * state:       *   - when the IOException is detected, the AsyncContext is forcebly closed (unless      *     it is already closed like in case of the Tomcat)      *   - all unsent events are completed exceptionally      *   - all unscheduled events are completed exceptionally (see please close() method)      *         */
specifier|private
name|void
name|dequeue
parameter_list|()
block|{
name|Throwable
name|error
init|=
name|throwable
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|QueuedEvent
name|queuedEvent
init|=
name|buffer
operator|.
name|poll
argument_list|()
decl_stmt|;
comment|// Nothing queued, release the thread
if|if
condition|(
name|queuedEvent
operator|==
literal|null
condition|)
block|{
break|break;
block|}
specifier|final
name|OutboundSseEvent
name|event
init|=
name|queuedEvent
operator|.
name|event
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|queuedEvent
operator|.
name|completion
decl_stmt|;
try|try
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Dispatching SSE event over the wire"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeTo
argument_list|(
name|event
argument_list|,
name|event
operator|.
name|getClass
argument_list|()
argument_list|,
name|event
operator|.
name|getGenericType
argument_list|()
argument_list|,
name|EMPTY_ANNOTATIONS
argument_list|,
name|event
operator|.
name|getMediaType
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ctx
operator|.
name|getResponse
argument_list|()
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getResponse
argument_list|()
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Completing the future successfully"
argument_list|)
expr_stmt|;
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Completing the future unsuccessfully (error enountered previously)"
argument_list|)
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
comment|// Very likely the connection is closed by the client (but we cannot
comment|// detect if for sure, container-specific).
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
name|error
operator|=
operator|(
name|IOException
operator|)
name|ex
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Completing the future unsuccessfully (error enountered)"
argument_list|)
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
specifier|final
name|boolean
name|shouldComplete
init|=
operator|(
name|error
operator|!=
literal|null
operator|)
operator|&&
name|throwable
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|error
argument_list|)
decl_stmt|;
name|dispatching
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Ideally, we should be rethrowing the exception here (error) and handle
comment|// it inside the onError() callback. However, most of the servlet containers
comment|// do not handle this case properly (and onError() is not called).
if|if
condition|(
name|shouldComplete
operator|&&
name|completed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Prematurely completing the AsyncContext due to error encountered: "
operator|+
name|error
argument_list|)
expr_stmt|;
comment|// In case of Tomcat, the context is closed automatically when client closes
comment|// the connection and onError callback will be called (in this case request
comment|// is set to null).
if|if
condition|(
name|ctx
operator|.
name|getRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Completing the AsyncContext"
argument_list|)
expr_stmt|;
try|try
block|{
name|ctx
operator|.
name|complete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Failed to close the AsyncContext cleanly: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|QueuedEvent
block|{
specifier|private
specifier|final
name|OutboundSseEvent
name|event
decl_stmt|;
specifier|private
specifier|final
name|CompletableFuture
argument_list|<
name|?
argument_list|>
name|completion
decl_stmt|;
name|QueuedEvent
parameter_list|(
name|OutboundSseEvent
name|event
parameter_list|,
name|CompletableFuture
argument_list|<
name|?
argument_list|>
name|completion
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
name|this
operator|.
name|completion
operator|=
name|completion
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

