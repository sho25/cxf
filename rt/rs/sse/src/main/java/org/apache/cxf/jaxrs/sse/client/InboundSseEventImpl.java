begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|InboundSseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|InboundSseEventImpl
implements|implements
name|InboundSseEvent
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|comment
decl_stmt|;
specifier|private
specifier|final
name|long
name|reconnectDelay
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|reconnectDelaySet
decl_stmt|;
specifier|private
specifier|final
name|String
name|data
decl_stmt|;
specifier|private
specifier|final
name|ClientProviderFactory
name|factory
decl_stmt|;
specifier|private
specifier|final
name|Message
name|message
decl_stmt|;
specifier|static
class|class
name|Builder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Builder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
comment|/* the default event type would be "message" */
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|String
name|comment
decl_stmt|;
specifier|private
name|OptionalLong
name|reconnectDelay
init|=
name|OptionalLong
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|private
name|String
name|data
decl_stmt|;
name|Builder
parameter_list|()
block|{         }
name|Builder
name|id
parameter_list|(
name|String
name|i
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|i
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|name
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|n
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|comment
parameter_list|(
name|String
name|cmt
parameter_list|)
block|{
name|this
operator|.
name|comment
operator|=
name|cmt
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|reconnectDelay
parameter_list|(
name|String
name|rd
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|reconnectDelay
operator|=
name|OptionalLong
operator|.
name|of
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|rd
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Unable to parse reconnectDelay, long number expected: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
name|Builder
name|appendData
parameter_list|(
name|String
name|d
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|this
operator|.
name|data
operator|==
literal|null
condition|?
name|d
else|:
name|this
operator|.
name|data
operator|+
literal|'\n'
operator|+
name|d
expr_stmt|;
return|return
name|this
return|;
block|}
name|InboundSseEvent
name|build
parameter_list|(
name|ClientProviderFactory
name|factory
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
return|return
operator|new
name|InboundSseEventImpl
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|comment
argument_list|,
name|reconnectDelay
operator|.
name|orElse
argument_list|(
name|RECONNECT_NOT_SET
argument_list|)
argument_list|,
name|reconnectDelay
operator|.
name|isPresent
argument_list|()
argument_list|,
name|data
argument_list|,
name|factory
argument_list|,
name|message
argument_list|)
return|;
block|}
block|}
comment|//CHECKSTYLE:OFF
name|InboundSseEventImpl
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|comment
parameter_list|,
name|long
name|reconnectDelay
parameter_list|,
name|boolean
name|reconnectDelaySet
parameter_list|,
name|String
name|data
parameter_list|,
name|ClientProviderFactory
name|factory
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
comment|//CHECKSTYLE:ON
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
name|this
operator|.
name|reconnectDelay
operator|=
name|reconnectDelay
expr_stmt|;
name|this
operator|.
name|reconnectDelaySet
operator|=
name|reconnectDelaySet
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReconnectDelay
parameter_list|()
block|{
return|return
name|reconnectDelay
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReconnectDelaySet
parameter_list|()
block|{
return|return
name|reconnectDelaySet
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|readData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readData
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|read
argument_list|(
name|type
argument_list|,
name|type
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readData
parameter_list|(
name|GenericType
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|read
argument_list|(
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|type
operator|.
name|getRawType
argument_list|()
argument_list|,
name|type
operator|.
name|getType
argument_list|()
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readData
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|messageType
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|read
argument_list|(
name|messageType
argument_list|,
name|messageType
argument_list|,
name|mediaType
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readData
parameter_list|(
name|GenericType
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|read
argument_list|(
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|type
operator|.
name|getRawType
argument_list|()
argument_list|,
name|type
operator|.
name|getType
argument_list|()
argument_list|,
name|mediaType
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|read
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|messageType
parameter_list|,
name|Type
name|type
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Annotation
index|[]
name|annotations
init|=
operator|new
name|Annotation
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|MultivaluedHashMap
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
name|reader
init|=
name|factory
operator|.
name|createMessageBodyReader
argument_list|(
name|messageType
argument_list|,
name|type
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No suitable message body reader for class: "
operator|+
name|messageType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
try|try
init|(
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
return|return
name|reader
operator|.
name|readFrom
argument_list|(
name|messageType
argument_list|,
name|type
argument_list|,
name|annotations
argument_list|,
name|mediaType
argument_list|,
name|headers
argument_list|,
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to read data of type "
operator|+
name|messageType
operator|.
name|getName
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

