begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Flow
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Flow
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|OutboundSseEvent
import|;
end_import

begin_class
class|class
name|SseUnboundedSubscription
implements|implements
name|Subscription
block|{
comment|// Has subscription been cancelled or not?
specifier|private
name|boolean
name|cancelled
decl_stmt|;
comment|// Current demand: what has been requested but not yet delivered
specifier|private
name|long
name|demand
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|OutboundSseEvent
argument_list|>
name|buffer
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Flow
operator|.
name|Subscriber
argument_list|<
name|?
super|super
name|OutboundSseEvent
argument_list|>
name|subscriber
decl_stmt|;
name|SseUnboundedSubscription
parameter_list|(
name|Flow
operator|.
name|Subscriber
argument_list|<
name|?
super|super
name|OutboundSseEvent
argument_list|>
name|subscriber
parameter_list|)
block|{
name|this
operator|.
name|subscriber
operator|=
name|subscriber
expr_stmt|;
block|}
specifier|public
name|void
name|request
parameter_list|(
name|long
name|n
parameter_list|)
block|{
if|if
condition|(
name|demand
operator|+
name|n
operator|<
literal|1
condition|)
block|{
comment|// Effectively unbounded demand
name|demand
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|send
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Here we record the downstream demand
name|demand
operator|+=
name|n
expr_stmt|;
name|send
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|send
parameter_list|(
name|OutboundSseEvent
name|event
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|cancelled
operator|&&
name|buffer
operator|.
name|offer
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|send
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|send
parameter_list|()
block|{
while|while
condition|(
operator|!
name|cancelled
operator|&&
name|demand
operator|>
literal|0
operator|&&
operator|!
name|buffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|OutboundSseEvent
name|event
init|=
name|buffer
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|subscriber
operator|.
name|onNext
argument_list|(
name|event
argument_list|)
expr_stmt|;
operator|--
name|demand
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

