begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|sse
operator|.
name|atmosphere
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
operator|.
name|SseFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|sse
operator|.
name|atmosphere
operator|.
name|SseAtmosphereInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|DestinationRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|ServletDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cache
operator|.
name|UUIDBroadcasterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|ApplicationConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|AtmosphereFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|AtmosphereRequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|AtmosphereResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|AtmosphereResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|handler
operator|.
name|AbstractReflectorAtmosphereHandler
import|;
end_import

begin_class
specifier|public
class|class
name|AtmosphereSseServletDestination
extends|extends
name|ServletDestination
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AtmosphereSseServletDestination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AtmosphereFramework
name|framework
decl_stmt|;
specifier|public
name|AtmosphereSseServletDestination
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|DestinationRegistry
name|registry
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|bus
argument_list|,
name|registry
argument_list|,
name|ei
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|framework
operator|=
operator|new
name|AtmosphereFramework
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|framework
operator|.
name|interceptor
argument_list|(
operator|new
name|SseAtmosphereInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|framework
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|PROPERTY_NATIVE_COMETSUPPORT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|framework
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|WEBSOCKET_SUPPORT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|framework
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|DISABLE_ATMOSPHEREINTERCEPTOR
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|framework
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|CLOSE_STREAM_ON_CANCEL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|framework
operator|.
name|setBroadcasterCacheClassName
argument_list|(
name|UUIDBroadcasterCache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|framework
operator|.
name|addAtmosphereHandler
argument_list|(
literal|"/"
argument_list|,
operator|new
name|DestinationHandler
argument_list|()
argument_list|)
expr_stmt|;
name|framework
operator|.
name|init
argument_list|()
expr_stmt|;
name|bus
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SseFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|invoke
parameter_list|(
name|ServletConfig
name|config
parameter_list|,
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|framework
operator|.
name|doCometSupport
argument_list|(
name|AtmosphereRequestImpl
operator|.
name|wrap
argument_list|(
name|req
argument_list|)
argument_list|,
name|AtmosphereResponseImpl
operator|.
name|wrap
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
name|framework
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Graceful shutdown was not successful: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|DestinationHandler
extends|extends
name|AbstractReflectorAtmosphereHandler
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRequest
parameter_list|(
specifier|final
name|AtmosphereResource
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"onRequest"
argument_list|)
expr_stmt|;
try|try
block|{
name|AtmosphereSseServletDestination
operator|.
name|super
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|resource
operator|.
name|getRequest
argument_list|()
operator|.
name|getServletContext
argument_list|()
argument_list|,
name|resource
operator|.
name|getRequest
argument_list|()
argument_list|,
name|resource
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed to invoke service"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|OutputStream
name|flushHeaders
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|boolean
name|getStream
parameter_list|)
throws|throws
name|IOException
block|{
name|adjustContentLength
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|flushHeaders
argument_list|(
name|outMessage
argument_list|,
name|getStream
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|OutputStream
name|flushHeaders
parameter_list|(
name|Message
name|outMessage
parameter_list|)
throws|throws
name|IOException
block|{
name|adjustContentLength
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|flushHeaders
argument_list|(
name|outMessage
argument_list|)
return|;
block|}
comment|/**      * It has been noticed that Jetty checks the "Content-Length" header and completes the      * response if its value is 0 (or matches the number of bytes written). However, in case      * of SSE the content length is unknown so we are setting it to -1 before flushing the      * response. Otherwise, only the first event is going to be sent and response is going to      * be closed.      */
specifier|private
name|void
name|adjustContentLength
parameter_list|(
name|Message
name|outMessage
parameter_list|)
block|{
specifier|final
name|String
name|contentType
init|=
operator|(
name|String
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|MediaType
operator|.
name|SERVER_SENT_EVENTS
operator|.
name|equalsIgnoreCase
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|Headers
operator|.
name|getSetProtocolHeaders
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

