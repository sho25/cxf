begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|DecimalMax
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|DecimalMin
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Max
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Min
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|BeanParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|MatrixParam
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|BeanDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|introspect
operator|.
name|AnnotatedField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|introspect
operator|.
name|AnnotatedMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|introspect
operator|.
name|BeanPropertyDefinition
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|converter
operator|.
name|ModelConverters
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|AbstractSwaggerExtension
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|SwaggerExtension
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|SwaggerExtensions
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|AbstractSerializableParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|RefProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|util
operator|.
name|Json
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|util
operator|.
name|ParameterProcessor
import|;
end_import

begin_class
specifier|public
class|class
name|JaxRs2Extension
extends|extends
name|AbstractSwaggerExtension
block|{
specifier|private
specifier|final
name|ObjectMapper
name|mapper
init|=
name|Json
operator|.
name|mapper
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Parameter
argument_list|>
name|extractParameters
parameter_list|(
specifier|final
name|List
argument_list|<
name|Annotation
argument_list|>
name|annotations
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|,
specifier|final
name|Set
argument_list|<
name|Type
argument_list|>
name|typesToSkip
parameter_list|,
specifier|final
name|Iterator
argument_list|<
name|SwaggerExtension
argument_list|>
name|chain
parameter_list|)
block|{
if|if
condition|(
name|shouldIgnoreType
argument_list|(
name|type
argument_list|,
name|typesToSkip
argument_list|)
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Annotation
name|annotation
range|:
name|annotations
control|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|MatrixParam
condition|)
block|{
name|MatrixParam
name|param
init|=
operator|(
name|MatrixParam
operator|)
name|annotation
decl_stmt|;
name|MatrixParameter
name|mp
init|=
operator|new
name|MatrixParameter
argument_list|()
operator|.
name|name
argument_list|(
name|param
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|Property
name|schema
init|=
name|createProperty
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|mp
operator|.
name|setProperty
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
name|applyBeanValidatorAnnotations
argument_list|(
name|mp
argument_list|,
name|annotations
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
name|mp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|BeanParam
condition|)
block|{
comment|// Use Jackson's logic for processing Beans
specifier|final
name|BeanDescription
name|beanDesc
init|=
name|mapper
operator|.
name|getSerializationConfig
argument_list|()
operator|.
name|introspect
argument_list|(
name|constructType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|BeanPropertyDefinition
argument_list|>
name|properties
init|=
name|beanDesc
operator|.
name|findProperties
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|BeanPropertyDefinition
name|propDef
range|:
name|properties
control|)
block|{
specifier|final
name|AnnotatedField
name|field
init|=
name|propDef
operator|.
name|getField
argument_list|()
decl_stmt|;
specifier|final
name|AnnotatedMethod
name|setter
init|=
name|propDef
operator|.
name|getSetter
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Annotation
argument_list|>
name|paramAnnotations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|SwaggerExtension
argument_list|>
name|extensions
init|=
name|SwaggerExtensions
operator|.
name|chain
argument_list|()
decl_stmt|;
name|Type
name|paramType
init|=
literal|null
decl_stmt|;
comment|// Gather the field's details
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|paramType
operator|=
name|field
operator|.
name|getAnnotated
argument_list|()
operator|.
name|getGenericType
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Annotation
name|fieldAnnotation
range|:
name|field
operator|.
name|annotations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|paramAnnotations
operator|.
name|contains
argument_list|(
name|fieldAnnotation
argument_list|)
condition|)
block|{
name|paramAnnotations
operator|.
name|add
argument_list|(
name|fieldAnnotation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Gather the setter's details but only the ones we need
if|if
condition|(
name|setter
operator|!=
literal|null
condition|)
block|{
comment|// Do not set the param class/type from the setter if the values are already identified
if|if
condition|(
name|paramType
operator|==
literal|null
operator|&&
name|setter
operator|.
name|getMember
argument_list|()
operator|.
name|getGenericParameterTypes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|paramType
operator|=
name|setter
operator|.
name|getMember
argument_list|()
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Annotation
name|fieldAnnotation
range|:
name|setter
operator|.
name|annotations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|paramAnnotations
operator|.
name|contains
argument_list|(
name|fieldAnnotation
argument_list|)
condition|)
block|{
name|paramAnnotations
operator|.
name|add
argument_list|(
name|fieldAnnotation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Re-process all Bean fields and let the default swagger-jaxrs processor do its thing
name|List
argument_list|<
name|Parameter
argument_list|>
name|extracted
init|=
name|extensions
operator|.
name|next
argument_list|()
operator|.
name|extractParameters
argument_list|(
name|paramAnnotations
argument_list|,
name|paramType
argument_list|,
name|typesToSkip
argument_list|,
name|extensions
argument_list|)
decl_stmt|;
comment|// since downstream processors won't know how to introspect @BeanParam, process here
for|for
control|(
name|Parameter
name|param
range|:
name|extracted
control|)
block|{
if|if
condition|(
name|ParameterProcessor
operator|.
name|applyAnnotations
argument_list|(
literal|null
argument_list|,
name|param
argument_list|,
name|paramType
argument_list|,
name|paramAnnotations
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|applyBeanValidatorAnnotations
argument_list|(
name|param
argument_list|,
name|paramAnnotations
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Only call down to the other items in the chain if no parameters were produced
if|if
condition|(
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parameters
operator|=
name|super
operator|.
name|extractParameters
argument_list|(
name|annotations
argument_list|,
name|type
argument_list|,
name|typesToSkip
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
specifier|private
name|Property
name|createProperty
parameter_list|(
specifier|final
name|Type
name|type
parameter_list|)
block|{
return|return
name|enforcePrimitive
argument_list|(
name|ModelConverters
operator|.
name|getInstance
argument_list|()
operator|.
name|readAsProperty
argument_list|(
name|type
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|Property
name|enforcePrimitive
parameter_list|(
specifier|final
name|Property
name|in
parameter_list|,
specifier|final
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|in
operator|instanceof
name|RefProperty
condition|)
block|{
return|return
operator|new
name|StringProperty
argument_list|()
return|;
block|}
if|if
condition|(
name|in
operator|instanceof
name|ArrayProperty
condition|)
block|{
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
specifier|final
name|ArrayProperty
name|array
init|=
operator|(
name|ArrayProperty
operator|)
name|in
decl_stmt|;
name|array
operator|.
name|setItems
argument_list|(
name|enforcePrimitive
argument_list|(
name|array
operator|.
name|getItems
argument_list|()
argument_list|,
name|level
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
operator|new
name|StringProperty
argument_list|()
return|;
block|}
block|}
return|return
name|in
return|;
block|}
comment|/**      * This is essentially a duplicate of {@link io.swagger.jackson.ModelResolver.applyBeanValidatorAnnotations}.      *      * @param parameter      * @param annotations      */
specifier|private
name|void
name|applyBeanValidatorAnnotations
parameter_list|(
specifier|final
name|Parameter
name|parameter
parameter_list|,
specifier|final
name|List
argument_list|<
name|Annotation
argument_list|>
name|annotations
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Annotation
argument_list|>
name|annos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|annotations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|annotation
range|:
name|annotations
control|)
block|{
name|annos
operator|.
name|put
argument_list|(
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|annotation
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|NotNull
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|parameter
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameter
operator|instanceof
name|AbstractSerializableParameter
condition|)
block|{
name|AbstractSerializableParameter
argument_list|<
name|?
argument_list|>
name|serializable
init|=
operator|(
name|AbstractSerializableParameter
argument_list|<
name|?
argument_list|>
operator|)
name|parameter
decl_stmt|;
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|Min
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Min
name|min
init|=
operator|(
name|Min
operator|)
name|annos
operator|.
name|get
argument_list|(
name|Min
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|serializable
operator|.
name|setMinimum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|min
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|Max
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Max
name|max
init|=
operator|(
name|Max
operator|)
name|annos
operator|.
name|get
argument_list|(
name|Max
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|serializable
operator|.
name|setMaximum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|max
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|Size
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Size
name|size
init|=
operator|(
name|Size
operator|)
name|annos
operator|.
name|get
argument_list|(
name|Size
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|serializable
operator|.
name|setMinimum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|size
operator|.
name|min
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|serializable
operator|.
name|setMaximum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|size
operator|.
name|max
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|serializable
operator|.
name|setMinItems
argument_list|(
name|size
operator|.
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|serializable
operator|.
name|setMaxItems
argument_list|(
name|size
operator|.
name|max
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|DecimalMin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|DecimalMin
name|min
init|=
operator|(
name|DecimalMin
operator|)
name|annos
operator|.
name|get
argument_list|(
name|DecimalMin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|.
name|inclusive
argument_list|()
condition|)
block|{
name|serializable
operator|.
name|setMinimum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|new
name|Double
argument_list|(
name|min
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializable
operator|.
name|setExclusiveMinimum
argument_list|(
operator|!
name|min
operator|.
name|inclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|DecimalMax
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|DecimalMax
name|max
init|=
operator|(
name|DecimalMax
operator|)
name|annos
operator|.
name|get
argument_list|(
name|DecimalMax
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|.
name|inclusive
argument_list|()
condition|)
block|{
name|serializable
operator|.
name|setMaximum
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|new
name|Double
argument_list|(
name|max
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializable
operator|.
name|setExclusiveMaximum
argument_list|(
operator|!
name|max
operator|.
name|inclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|annos
operator|.
name|containsKey
argument_list|(
name|Pattern
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Pattern
name|pattern
init|=
operator|(
name|Pattern
operator|)
name|annos
operator|.
name|get
argument_list|(
name|Pattern
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|serializable
operator|.
name|setPattern
argument_list|(
name|pattern
operator|.
name|regexp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

