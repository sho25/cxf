begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<p>  * A collection of W3C DOM helper methods.  *</p>  *  * @version $Revision: 564607 $  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DOMUtil
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DOMUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DocumentBuilderFactory
name|dbf
decl_stmt|;
specifier|private
specifier|static
name|Queue
name|builders
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|()
decl_stmt|;
specifier|private
name|DOMUtil
parameter_list|()
block|{     }
comment|/**      *<p>      * Returns the text of the element.      *</p>      *      * @param element the element.      * @return the element text value.      */
specifier|public
specifier|static
name|String
name|getElementText
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|NodeList
name|nodeList
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
operator|||
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|CDATA_SECTION_NODE
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *<p>      * Moves the content of the given element to the given element.      *</p>      *      * @param from the source element.      * @param to the destination element.      */
specifier|public
specifier|static
name|void
name|moveContent
parameter_list|(
name|Element
name|from
parameter_list|,
name|Element
name|to
parameter_list|)
block|{
comment|// lets move the child nodes across
name|NodeList
name|childNodes
init|=
name|from
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|childNodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Node
name|node
init|=
name|childNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|from
operator|.
name|removeChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|to
operator|.
name|appendChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Copy the attribues on one element to the other.      *</p>      *      * @param from the source element.      * @param to the destination element.      */
specifier|public
specifier|static
name|void
name|copyAttributes
parameter_list|(
name|Element
name|from
parameter_list|,
name|Element
name|to
parameter_list|)
block|{
comment|// lets copy across all the remainingattributes
name|NamedNodeMap
name|attributes
init|=
name|from
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|node
init|=
operator|(
name|Attr
operator|)
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|to
operator|.
name|setAttributeNS
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * A helper method useful for debugging and logging which will convert the given DOM node into XML text.      *</p>      *      * @param node the node.      * @return a raw XML string representing the node.      */
specifier|public
specifier|static
name|String
name|asXML
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|TransformerException
block|{
name|Transformer
name|transformer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *<p>      * A helper method useful for debugging and logging which will convert the given DOM node into XML text.      *</p>      *      * @param node the node.      * @return a indented XML string representing the node.      */
specifier|public
specifier|static
name|String
name|asIndentedXML
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|TransformerException
block|{
name|Transformer
name|transformer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *<p>      * Adds the child element with the given text.      *</p>      *      * @param element the element where to add child.      * @param name the child elenemt name.      * @param textValue the child element text value.      */
specifier|public
specifier|static
name|void
name|addChildElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|textValue
parameter_list|)
block|{
name|Document
name|document
init|=
name|element
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|Element
name|child
init|=
name|document
operator|.
name|createElement
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|element
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|textValue
operator|!=
literal|null
condition|)
block|{
name|String
name|text
init|=
name|textValue
operator|.
name|toString
argument_list|()
decl_stmt|;
name|child
operator|.
name|appendChild
argument_list|(
name|document
operator|.
name|createTextNode
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Creates a QName instance from the given namespace context for the given qualifiedName.      *</p>      *      * @param element the element to use as the namespace context.      * @param qualifiedName the fully qualified name.      * @return the QName which matches the qualifiedName.      */
specifier|public
specifier|static
name|QName
name|createQName
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
block|{
name|int
name|index
init|=
name|qualifiedName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|String
name|prefix
init|=
name|qualifiedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|qualifiedName
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|recursiveGetAttributeValue
argument_list|(
name|element
argument_list|,
literal|"xmlns:"
operator|+
name|prefix
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|prefix
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|uri
init|=
name|recursiveGetAttributeValue
argument_list|(
name|element
argument_list|,
literal|"xmlns"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|qualifiedName
argument_list|)
return|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|qualifiedName
argument_list|)
return|;
block|}
block|}
comment|/**      *<p>      * Recursive method to find a given attribute value.      *</p>      *      * @param element the element where to looking for attribute.      * @param attributeName the attribute name to look for.      * @return the value of the given attribute.      */
specifier|public
specifier|static
name|String
name|recursiveGetAttributeValue
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|element
operator|.
name|getAttribute
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Caught exception looking up attribute: "
operator|+
name|attributeName
operator|+
literal|" on element: "
operator|+
name|element
operator|+
literal|". Cause: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|||
name|answer
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Node
name|parentNode
init|=
name|element
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentNode
operator|instanceof
name|Element
condition|)
block|{
return|return
name|recursiveGetAttributeValue
argument_list|(
operator|(
name|Element
operator|)
name|parentNode
argument_list|,
name|attributeName
argument_list|)
return|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      *<p>      * Gets the first child element.      *</p>      *      * @param parent the parent node.      * @return the first child element.      */
specifier|public
specifier|static
name|Element
name|getFirstChildElement
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
name|NodeList
name|childs
init|=
name|parent
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Element
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|child
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      *<p>      * Gets the next sibling element.      *</p>      *      * @param el the base element.      * @return the next sibling element.      */
specifier|public
specifier|static
name|Element
name|getNextSiblingElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
for|for
control|(
name|Node
name|n
init|=
name|el
operator|.
name|getNextSibling
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|n
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      *<p>      * Builds a QName from the element name.      *</p>      *      * @param el the element.      * @return the QName for the given element.      */
specifier|public
specifier|static
name|QName
name|getQName
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|el
operator|.
name|getPrefix
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|el
operator|.
name|getPrefix
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|QName
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|DocumentBuilder
name|getBuilder
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|builder
init|=
operator|(
name|DocumentBuilder
operator|)
name|builders
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|dbf
operator|==
literal|null
condition|)
block|{
name|dbf
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|builder
operator|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
specifier|public
specifier|static
name|void
name|releaseBuilder
parameter_list|(
name|DocumentBuilder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Returns a new document, ready to populate.      *</p>      *      * @return a ready to use Document.      */
specifier|public
specifier|static
name|Document
name|newDocument
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|builder
init|=
name|getBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|releaseBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
block|}
end_class

end_unit

