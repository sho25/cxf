begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|InvalidFilterFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|InvalidMessageContentExpressionFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|InvalidProducerPropertiesExpressionFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|InvalidTopicExpressionFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|PauseSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|PauseSubscriptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|QueryExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|Renew
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|RenewResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|ResumeSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|ResumeSubscriptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|SubscribeCreationFailedFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|TopicExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|UnableToDestroySubscriptionFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|UnacceptableInitialTerminationTimeFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|UnacceptableTerminationTimeFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|UnrecognizedPolicyRequestFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|Unsubscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|UnsubscribeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|UseRaw
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|InvalidFilterFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|InvalidMessageContentExpressionFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|InvalidProducerPropertiesExpressionFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|InvalidTopicExpressionFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|PausableSubscriptionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|PauseFailedFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|ResumeFailedFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|SubscribeCreationFailedFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|TopicExpressionDialectUnknownFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|TopicNotSupportedFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|UnableToDestroySubscriptionFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|UnacceptableInitialTerminationTimeFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|UnacceptableTerminationTimeFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|UnrecognizedPolicyRequestFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|UnsupportedPolicyRequestFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsrf
operator|.
name|rw_2
operator|.
name|ResourceUnknownFault
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|endpointInterface
operator|=
literal|"org.oasis_open.docs.wsn.bw_2.PausableSubscriptionManager"
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractSubscription
extends|extends
name|AbstractEndpoint
implements|implements
name|PausableSubscriptionManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|WSN_URI
init|=
literal|"http://docs.oasis-open.org/wsn/b-2"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XPATH1_URI
init|=
literal|"http://www.w3.org/TR/1999/REC-xpath-19991116"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|QNAME_TOPIC_EXPRESSION
init|=
operator|new
name|QName
argument_list|(
name|WSN_URI
argument_list|,
literal|"TopicExpression"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|QNAME_PRODUCER_PROPERTIES
init|=
operator|new
name|QName
argument_list|(
name|WSN_URI
argument_list|,
literal|"ProducerProperties"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|QNAME_MESSAGE_CONTENT
init|=
operator|new
name|QName
argument_list|(
name|WSN_URI
argument_list|,
literal|"MessageContent"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|QNAME_USE_RAW
init|=
operator|new
name|QName
argument_list|(
name|WSN_URI
argument_list|,
literal|"UseRaw"
argument_list|)
decl_stmt|;
specifier|protected
name|DatatypeFactory
name|datatypeFactory
decl_stmt|;
specifier|protected
name|XMLGregorianCalendar
name|terminationTime
decl_stmt|;
specifier|protected
name|boolean
name|useRaw
decl_stmt|;
specifier|protected
name|TopicExpressionType
name|topic
decl_stmt|;
specifier|protected
name|QueryExpressionType
name|contentFilter
decl_stmt|;
specifier|protected
name|W3CEndpointReference
name|consumerReference
decl_stmt|;
specifier|protected
name|AbstractNotificationBroker
name|broker
decl_stmt|;
specifier|public
name|AbstractSubscription
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|datatypeFactory
operator|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to initialize subscription"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      *       * @param renewRequest      * @return returns org.oasis_open.docs.wsn.b_1.RenewResponse      * @throws UnacceptableTerminationTimeFault      * @throws ResourceUnknownFault      */
annotation|@
name|WebMethod
argument_list|(
name|operationName
operator|=
literal|"Renew"
argument_list|)
annotation|@
name|WebResult
argument_list|(
name|name
operator|=
literal|"RenewResponse"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"RenewResponse"
argument_list|)
specifier|public
name|RenewResponse
name|renew
parameter_list|(
annotation|@
name|WebParam
argument_list|(
name|name
operator|=
literal|"Renew"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"RenewRequest"
argument_list|)
name|Renew
name|renewRequest
parameter_list|)
throws|throws
name|ResourceUnknownFault
throws|,
name|UnacceptableTerminationTimeFault
block|{
name|XMLGregorianCalendar
name|time
init|=
name|validateTerminationTime
argument_list|(
name|renewRequest
operator|.
name|getTerminationTime
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|setTerminationTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|renew
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|RenewResponse
name|response
init|=
operator|new
name|RenewResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setTerminationTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCurrentTime
argument_list|(
name|getCurrentTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**      *       * @param unsubscribeRequest      * @return returns org.oasis_open.docs.wsn.b_1.UnsubscribeResponse      * @throws UnableToDestroySubscriptionFault      * @throws ResourceUnknownFault      */
annotation|@
name|WebMethod
argument_list|(
name|operationName
operator|=
literal|"Unsubscribe"
argument_list|)
annotation|@
name|WebResult
argument_list|(
name|name
operator|=
literal|"UnsubscribeResponse"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"UnsubscribeResponse"
argument_list|)
specifier|public
name|UnsubscribeResponse
name|unsubscribe
parameter_list|(
annotation|@
name|WebParam
argument_list|(
name|name
operator|=
literal|"Unsubscribe"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"UnsubscribeRequest"
argument_list|)
name|Unsubscribe
name|unsubscribeRequest
parameter_list|)
throws|throws
name|ResourceUnknownFault
throws|,
name|UnableToDestroySubscriptionFault
block|{
name|broker
operator|.
name|unsubscribe
argument_list|(
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|UnsubscribeResponse
argument_list|()
return|;
block|}
comment|/**      *       * @param pauseSubscriptionRequest      * @return returns org.oasis_open.docs.wsn.b_1.PauseSubscriptionResponse      * @throws PauseFailedFault      * @throws ResourceUnknownFault      */
annotation|@
name|WebMethod
argument_list|(
name|operationName
operator|=
literal|"PauseSubscription"
argument_list|)
annotation|@
name|WebResult
argument_list|(
name|name
operator|=
literal|"PauseSubscriptionResponse"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"PauseSubscriptionResponse"
argument_list|)
specifier|public
name|PauseSubscriptionResponse
name|pauseSubscription
parameter_list|(
annotation|@
name|WebParam
argument_list|(
name|name
operator|=
literal|"PauseSubscription"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"PauseSubscriptionRequest"
argument_list|)
name|PauseSubscription
name|pauseSubscriptionRequest
parameter_list|)
throws|throws
name|PauseFailedFault
throws|,
name|ResourceUnknownFault
block|{
name|pause
argument_list|()
expr_stmt|;
return|return
operator|new
name|PauseSubscriptionResponse
argument_list|()
return|;
block|}
comment|/**      *       * @param resumeSubscriptionRequest      * @return returns org.oasis_open.docs.wsn.b_1.ResumeSubscriptionResponse      * @throws ResumeFailedFault      * @throws ResourceUnknownFault      */
annotation|@
name|WebMethod
argument_list|(
name|operationName
operator|=
literal|"ResumeSubscription"
argument_list|)
annotation|@
name|WebResult
argument_list|(
name|name
operator|=
literal|"ResumeSubscriptionResponse"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"ResumeSubscriptionResponse"
argument_list|)
specifier|public
name|ResumeSubscriptionResponse
name|resumeSubscription
parameter_list|(
annotation|@
name|WebParam
argument_list|(
name|name
operator|=
literal|"ResumeSubscription"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"ResumeSubscriptionRequest"
argument_list|)
name|ResumeSubscription
name|resumeSubscriptionRequest
parameter_list|)
throws|throws
name|ResourceUnknownFault
throws|,
name|ResumeFailedFault
block|{
name|resume
argument_list|()
expr_stmt|;
return|return
operator|new
name|ResumeSubscriptionResponse
argument_list|()
return|;
block|}
specifier|protected
name|XMLGregorianCalendar
name|validateInitialTerminationTime
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|UnacceptableInitialTerminationTimeFault
block|{
name|XMLGregorianCalendar
name|tt
init|=
name|parseTerminationTime
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|tt
operator|==
literal|null
condition|)
block|{
name|UnacceptableInitialTerminationTimeFaultType
name|fault
init|=
operator|new
name|UnacceptableInitialTerminationTimeFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|UnacceptableInitialTerminationTimeFault
argument_list|(
literal|"Unable to parse initial termination time: '"
operator|+
name|value
operator|+
literal|"'"
argument_list|,
name|fault
argument_list|)
throw|;
block|}
name|XMLGregorianCalendar
name|ct
init|=
name|getCurrentTime
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|tt
operator|.
name|compare
argument_list|(
name|ct
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|DatatypeConstants
operator|.
name|LESSER
operator|||
name|c
operator|==
name|DatatypeConstants
operator|.
name|EQUAL
condition|)
block|{
name|UnacceptableInitialTerminationTimeFaultType
name|fault
init|=
operator|new
name|UnacceptableInitialTerminationTimeFaultType
argument_list|()
decl_stmt|;
name|fault
operator|.
name|setMinimumTime
argument_list|(
name|ct
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnacceptableInitialTerminationTimeFault
argument_list|(
literal|"Invalid initial termination time"
argument_list|,
name|fault
argument_list|)
throw|;
block|}
return|return
name|tt
return|;
block|}
specifier|protected
name|XMLGregorianCalendar
name|validateTerminationTime
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|UnacceptableTerminationTimeFault
block|{
name|XMLGregorianCalendar
name|tt
init|=
name|parseTerminationTime
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|tt
operator|==
literal|null
condition|)
block|{
name|UnacceptableTerminationTimeFaultType
name|fault
init|=
operator|new
name|UnacceptableTerminationTimeFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|UnacceptableTerminationTimeFault
argument_list|(
literal|"Unable to parse termination time: '"
operator|+
name|value
operator|+
literal|"'"
argument_list|,
name|fault
argument_list|)
throw|;
block|}
name|XMLGregorianCalendar
name|ct
init|=
name|getCurrentTime
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|tt
operator|.
name|compare
argument_list|(
name|ct
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|DatatypeConstants
operator|.
name|LESSER
operator|||
name|c
operator|==
name|DatatypeConstants
operator|.
name|EQUAL
condition|)
block|{
name|UnacceptableTerminationTimeFaultType
name|fault
init|=
operator|new
name|UnacceptableTerminationTimeFaultType
argument_list|()
decl_stmt|;
name|fault
operator|.
name|setMinimumTime
argument_list|(
name|ct
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnacceptableTerminationTimeFault
argument_list|(
literal|"Invalid termination time"
argument_list|,
name|fault
argument_list|)
throw|;
block|}
return|return
name|tt
return|;
block|}
specifier|protected
name|XMLGregorianCalendar
name|parseTerminationTime
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
name|Duration
name|d
init|=
name|datatypeFactory
operator|.
name|newDuration
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|XMLGregorianCalendar
name|c
init|=
name|getCurrentTime
argument_list|()
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
try|try
block|{
name|Duration
name|d
init|=
name|datatypeFactory
operator|.
name|newDurationDayTime
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|XMLGregorianCalendar
name|c
init|=
name|getCurrentTime
argument_list|()
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
try|try
block|{
name|Duration
name|d
init|=
name|datatypeFactory
operator|.
name|newDurationYearMonth
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|XMLGregorianCalendar
name|c
init|=
name|getCurrentTime
argument_list|()
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
try|try
block|{
return|return
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|XMLGregorianCalendar
name|getCurrentTime
parameter_list|()
block|{
return|return
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|XMLGregorianCalendar
name|getTerminationTime
parameter_list|()
block|{
return|return
name|terminationTime
return|;
block|}
specifier|public
name|void
name|setTerminationTime
parameter_list|(
name|XMLGregorianCalendar
name|terminationTime
parameter_list|)
block|{
name|this
operator|.
name|terminationTime
operator|=
name|terminationTime
expr_stmt|;
block|}
specifier|public
name|void
name|create
parameter_list|(
name|Subscribe
name|subscribeRequest
parameter_list|)
comment|//CHECKSTYLE:OFF
throws|throws
name|InvalidFilterFault
throws|,
name|InvalidMessageContentExpressionFault
throws|,
name|InvalidProducerPropertiesExpressionFault
throws|,
name|InvalidTopicExpressionFault
throws|,
name|SubscribeCreationFailedFault
throws|,
name|TopicExpressionDialectUnknownFault
throws|,
name|TopicNotSupportedFault
throws|,
name|UnacceptableInitialTerminationTimeFault
throws|,
name|UnrecognizedPolicyRequestFault
throws|,
name|UnsupportedPolicyRequestFault
block|{
comment|//CHECKSTYLE:ON
name|validateSubscription
argument_list|(
name|subscribeRequest
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|start
parameter_list|()
throws|throws
name|SubscribeCreationFailedFault
function_decl|;
specifier|protected
specifier|abstract
name|void
name|pause
parameter_list|()
throws|throws
name|PauseFailedFault
function_decl|;
specifier|protected
specifier|abstract
name|void
name|resume
parameter_list|()
throws|throws
name|ResumeFailedFault
function_decl|;
specifier|protected
specifier|abstract
name|void
name|renew
parameter_list|(
name|XMLGregorianCalendar
name|time
parameter_list|)
throws|throws
name|UnacceptableTerminationTimeFault
function_decl|;
specifier|protected
name|void
name|unsubscribe
parameter_list|()
throws|throws
name|UnableToDestroySubscriptionFault
block|{
try|try
block|{
name|unregister
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EndpointRegistrationException
name|e
parameter_list|)
block|{
name|UnableToDestroySubscriptionFaultType
name|fault
init|=
operator|new
name|UnableToDestroySubscriptionFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|UnableToDestroySubscriptionFault
argument_list|(
literal|"Error unregistering endpoint"
argument_list|,
name|fault
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|validateSubscription
parameter_list|(
name|Subscribe
name|subscribeRequest
parameter_list|)
comment|//CHECKSTYLE:OFF - WS-Notification spec throws a lot of faults
throws|throws
name|InvalidFilterFault
throws|,
name|InvalidMessageContentExpressionFault
throws|,
name|InvalidProducerPropertiesExpressionFault
throws|,
name|InvalidTopicExpressionFault
throws|,
name|SubscribeCreationFailedFault
throws|,
name|TopicExpressionDialectUnknownFault
throws|,
name|TopicNotSupportedFault
throws|,
name|UnacceptableInitialTerminationTimeFault
throws|,
name|UnrecognizedPolicyRequestFault
throws|,
name|UnsupportedPolicyRequestFault
block|{
comment|//CHECKSTYLE:ON
comment|// Check consumer reference
name|consumerReference
operator|=
name|subscribeRequest
operator|.
name|getConsumerReference
argument_list|()
expr_stmt|;
comment|// Check terminationTime
if|if
condition|(
name|subscribeRequest
operator|.
name|getInitialTerminationTime
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|subscribeRequest
operator|.
name|getInitialTerminationTime
argument_list|()
operator|.
name|isNil
argument_list|()
operator|&&
name|subscribeRequest
operator|.
name|getInitialTerminationTime
argument_list|()
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|strTerminationTime
init|=
name|subscribeRequest
operator|.
name|getInitialTerminationTime
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|terminationTime
operator|=
name|validateInitialTerminationTime
argument_list|(
name|strTerminationTime
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check filter
if|if
condition|(
name|subscribeRequest
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|f
range|:
name|subscribeRequest
operator|.
name|getFilter
argument_list|()
operator|.
name|getAny
argument_list|()
control|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|e
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|f
operator|instanceof
name|JAXBElement
condition|)
block|{
name|e
operator|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|f
expr_stmt|;
name|f
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|instanceof
name|TopicExpressionType
condition|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|QNAME_TOPIC_EXPRESSION
argument_list|)
condition|)
block|{
name|InvalidTopicExpressionFaultType
name|fault
init|=
operator|new
name|InvalidTopicExpressionFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|InvalidTopicExpressionFault
argument_list|(
literal|"Unrecognized TopicExpression: "
operator|+
name|e
argument_list|,
name|fault
argument_list|)
throw|;
block|}
name|topic
operator|=
operator|(
name|TopicExpressionType
operator|)
name|f
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|instanceof
name|QueryExpressionType
condition|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|QNAME_PRODUCER_PROPERTIES
argument_list|)
condition|)
block|{
name|InvalidProducerPropertiesExpressionFaultType
name|fault
init|=
operator|new
name|InvalidProducerPropertiesExpressionFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|InvalidProducerPropertiesExpressionFault
argument_list|(
literal|"ProducerProperties are not supported"
argument_list|,
name|fault
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|QNAME_MESSAGE_CONTENT
argument_list|)
condition|)
block|{
if|if
condition|(
name|contentFilter
operator|!=
literal|null
condition|)
block|{
name|InvalidMessageContentExpressionFaultType
name|fault
init|=
operator|new
name|InvalidMessageContentExpressionFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|InvalidMessageContentExpressionFault
argument_list|(
literal|"Only one MessageContent filter can be specified"
argument_list|,
name|fault
argument_list|)
throw|;
block|}
name|contentFilter
operator|=
operator|(
name|QueryExpressionType
operator|)
name|f
expr_stmt|;
comment|// Defaults to XPath 1.0
if|if
condition|(
name|contentFilter
operator|.
name|getDialect
argument_list|()
operator|==
literal|null
condition|)
block|{
name|contentFilter
operator|.
name|setDialect
argument_list|(
name|XPATH1_URI
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|InvalidFilterFaultType
name|fault
init|=
operator|new
name|InvalidFilterFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|InvalidFilterFault
argument_list|(
literal|"Unrecognized filter: "
operator|+
operator|(
name|e
operator|!=
literal|null
condition|?
name|e
operator|.
name|getName
argument_list|()
else|:
name|f
operator|)
argument_list|,
name|fault
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|InvalidFilterFaultType
name|fault
init|=
operator|new
name|InvalidFilterFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|InvalidFilterFault
argument_list|(
literal|"Unrecognized filter: "
operator|+
operator|(
name|e
operator|!=
literal|null
condition|?
name|e
operator|.
name|getName
argument_list|()
else|:
name|f
operator|)
argument_list|,
name|fault
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Check policy
if|if
condition|(
name|subscribeRequest
operator|.
name|getSubscriptionPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|p
range|:
name|subscribeRequest
operator|.
name|getSubscriptionPolicy
argument_list|()
operator|.
name|getAny
argument_list|()
control|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|e
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|JAXBElement
condition|)
block|{
name|e
operator|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|p
expr_stmt|;
name|p
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|instanceof
name|UseRaw
condition|)
block|{
name|useRaw
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|UnrecognizedPolicyRequestFaultType
name|fault
init|=
operator|new
name|UnrecognizedPolicyRequestFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|UnrecognizedPolicyRequestFault
argument_list|(
literal|"Unrecognized policy: "
operator|+
name|p
argument_list|,
name|fault
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Check all parameters
if|if
condition|(
name|consumerReference
operator|==
literal|null
condition|)
block|{
name|SubscribeCreationFailedFaultType
name|fault
init|=
operator|new
name|SubscribeCreationFailedFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SubscribeCreationFailedFault
argument_list|(
literal|"Invalid ConsumerReference: null"
argument_list|,
name|fault
argument_list|)
throw|;
block|}
comment|// TODO check we can resolve endpoint
if|if
condition|(
name|topic
operator|==
literal|null
condition|)
block|{
name|InvalidFilterFaultType
name|fault
init|=
operator|new
name|InvalidFilterFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|InvalidFilterFault
argument_list|(
literal|"Must specify a topic to subscribe on"
argument_list|,
name|fault
argument_list|)
throw|;
block|}
if|if
condition|(
name|contentFilter
operator|!=
literal|null
operator|&&
operator|!
name|contentFilter
operator|.
name|getDialect
argument_list|()
operator|.
name|equals
argument_list|(
name|XPATH1_URI
argument_list|)
condition|)
block|{
name|InvalidMessageContentExpressionFaultType
name|fault
init|=
operator|new
name|InvalidMessageContentExpressionFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|InvalidMessageContentExpressionFault
argument_list|(
literal|"Unsupported MessageContent dialect: '"
operator|+
name|contentFilter
operator|.
name|getDialect
argument_list|()
operator|+
literal|"'"
argument_list|,
name|fault
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AbstractNotificationBroker
name|getBroker
parameter_list|()
block|{
return|return
name|broker
return|;
block|}
specifier|public
name|void
name|setBroker
parameter_list|(
name|AbstractNotificationBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
block|}
end_class

end_unit

