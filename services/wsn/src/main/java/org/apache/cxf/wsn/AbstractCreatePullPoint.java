begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsn
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsn
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|CreatePullPointResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|UnableToCreatePullPointFaultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|CreatePullPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|UnableToCreatePullPointFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|bw_2
operator|.
name|UnableToDestroyPullPointFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|endpointInterface
operator|=
literal|"org.oasis_open.docs.wsn.bw_2.CreatePullPoint"
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractCreatePullPoint
extends|extends
name|AbstractEndpoint
implements|implements
name|CreatePullPoint
block|{
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractCreatePullPoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IdGenerator
name|idGenerator
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractPullPoint
argument_list|>
name|pullPoints
decl_stmt|;
specifier|public
name|AbstractCreatePullPoint
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|idGenerator
operator|=
operator|new
name|IdGenerator
argument_list|()
expr_stmt|;
name|pullPoints
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|AbstractPullPoint
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|register
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|unregister
argument_list|()
expr_stmt|;
block|}
annotation|@
name|WebMethod
argument_list|(
name|operationName
operator|=
literal|"CreatePullPoint"
argument_list|)
annotation|@
name|WebResult
argument_list|(
name|name
operator|=
literal|"CreatePullPointResponse"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"CreatePullPointResponse"
argument_list|)
specifier|public
name|CreatePullPointResponse
name|createPullPoint
parameter_list|(
annotation|@
name|WebParam
argument_list|(
name|name
operator|=
literal|"CreatePullPoint"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/wsn/b-2"
argument_list|,
name|partName
operator|=
literal|"CreatePullPointRequest"
argument_list|)
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|CreatePullPoint
name|createPullPointRequest
parameter_list|)
throws|throws
name|UnableToCreatePullPointFault
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"CreatePullEndpoint"
argument_list|)
expr_stmt|;
return|return
name|handleCreatePullPoint
argument_list|(
name|createPullPointRequest
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|CreatePullPointResponse
name|handleCreatePullPoint
parameter_list|(
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|CreatePullPoint
name|createPullPointRequest
parameter_list|,
name|EndpointManager
name|manager
parameter_list|)
throws|throws
name|UnableToCreatePullPointFault
block|{
name|AbstractPullPoint
name|pullPoint
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|pullPoint
operator|=
name|createPullPoint
argument_list|(
name|createPullPointName
argument_list|(
name|createPullPointRequest
argument_list|)
argument_list|)
expr_stmt|;
name|pullPoint
operator|.
name|setCreatePullPoint
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|pullPoints
operator|.
name|put
argument_list|(
name|pullPoint
operator|.
name|getAddress
argument_list|()
argument_list|,
name|pullPoint
argument_list|)
expr_stmt|;
name|pullPoint
operator|.
name|create
argument_list|(
name|createPullPointRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|pullPoint
operator|.
name|setManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
name|pullPoint
operator|.
name|register
argument_list|()
expr_stmt|;
name|CreatePullPointResponse
name|response
init|=
operator|new
name|CreatePullPointResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setPullPoint
argument_list|(
name|pullPoint
operator|.
name|getEpr
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|EndpointRegistrationException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unable to register new endpoint"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|UnableToCreatePullPointFaultType
name|fault
init|=
operator|new
name|UnableToCreatePullPointFaultType
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|UnableToCreatePullPointFault
argument_list|(
literal|"Unable to register new endpoint"
argument_list|,
name|fault
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
name|pullPoint
operator|!=
literal|null
condition|)
block|{
name|pullPoints
operator|.
name|remove
argument_list|(
name|pullPoint
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|pullPoint
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnableToDestroyPullPointFault
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error destroying pullPoint"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|String
name|createPullPointName
parameter_list|(
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|CreatePullPoint
name|createPullPointRequest
parameter_list|)
block|{
comment|// Let the creator decide which pull point name to use
name|String
name|name
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|createPullPointRequest
operator|.
name|getAny
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"name"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
literal|"http://cxf.apache.org/wsn2005/1.0"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|name
operator|=
name|DOMUtil
operator|.
name|getElementText
argument_list|(
name|el
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|// If no name is given, just generate one
name|name
operator|=
name|idGenerator
operator|.
name|generateSanitizedId
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|void
name|destroyPullPoint
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|UnableToDestroyPullPointFault
block|{
name|AbstractPullPoint
name|pullPoint
init|=
name|pullPoints
operator|.
name|remove
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|pullPoint
operator|!=
literal|null
condition|)
block|{
name|pullPoint
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|AbstractPullPoint
name|createPullPoint
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
block|}
end_class

end_unit

