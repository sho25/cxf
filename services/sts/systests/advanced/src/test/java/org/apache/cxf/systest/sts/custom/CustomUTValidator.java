begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|custom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|Validator
import|;
end_import

begin_comment
comment|/**  * This class validates a processed UsernameToken, extracted from the Credential passed to  * the validate method.  */
end_comment

begin_class
specifier|public
class|class
name|CustomUTValidator
implements|implements
name|Validator
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CustomUTValidator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Validate the credential argument. It must contain a non-null UsernameToken. A      * CallbackHandler implementation is also required to be set.      *      * If the password type is either digest or plaintext, it extracts a password from the      * CallbackHandler and then compares the passwords appropriately.      *      * If the password is null it queries a hook to allow the user to validate UsernameTokens      * of this type.      *      * @param credential the Credential to be validated      * @param data the RequestData associated with the request      * @throws WSSecurityException on a failed validation      */
specifier|public
name|Credential
name|validate
parameter_list|(
name|Credential
name|credential
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|credential
operator|==
literal|null
operator|||
name|credential
operator|.
name|getUsernametoken
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"noCredential"
argument_list|)
throw|;
block|}
name|boolean
name|handleCustomPasswordTypes
init|=
name|data
operator|.
name|isHandleCustomPasswordTypes
argument_list|()
decl_stmt|;
name|boolean
name|passwordsAreEncoded
init|=
name|data
operator|.
name|isEncodePasswords
argument_list|()
decl_stmt|;
name|String
name|requiredPasswordType
init|=
name|data
operator|.
name|getRequiredPasswordType
argument_list|()
decl_stmt|;
name|UsernameToken
name|usernameToken
init|=
name|credential
operator|.
name|getUsernametoken
argument_list|()
decl_stmt|;
name|usernameToken
operator|.
name|setPasswordsAreEncoded
argument_list|(
name|passwordsAreEncoded
argument_list|)
expr_stmt|;
name|String
name|pwType
init|=
name|usernameToken
operator|.
name|getPasswordType
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"UsernameToken user "
operator|+
name|usernameToken
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"UsernameToken password type "
operator|+
name|pwType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requiredPasswordType
operator|!=
literal|null
operator|&&
operator|!
name|requiredPasswordType
operator|.
name|equals
argument_list|(
name|pwType
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authentication failed as the received password type does not "
operator|+
literal|"match the required password type of: "
operator|+
name|requiredPasswordType
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
comment|//
comment|// If the UsernameToken is hashed or plaintext, then retrieve the password from the
comment|// callback handler and compare directly. If the UsernameToken is of some unknown type,
comment|// then delegate authentication to the callback handler
comment|//
name|String
name|password
init|=
name|usernameToken
operator|.
name|getPassword
argument_list|()
decl_stmt|;
if|if
condition|(
name|usernameToken
operator|.
name|isHashed
argument_list|()
condition|)
block|{
name|verifyDigestPassword
argument_list|(
name|usernameToken
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|PASSWORD_TEXT
operator|.
name|equals
argument_list|(
name|pwType
argument_list|)
operator|||
name|password
operator|!=
literal|null
operator|&&
operator|(
name|pwType
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|pwType
operator|.
name|trim
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|verifyPlaintextPassword
argument_list|(
name|usernameToken
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|handleCustomPasswordTypes
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authentication failed as handleCustomUsernameTokenTypes is false"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
name|verifyCustomPassword
argument_list|(
name|usernameToken
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyUnknownPassword
argument_list|(
name|usernameToken
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|credential
return|;
block|}
comment|/**      * Verify a UsernameToken containing a password of some unknown (but specified) password      * type. It does this by querying a CallbackHandler instance to obtain a password for the      * given username, and then comparing it against the received password.      * This method currently uses the same LOG.c as the verifyPlaintextPassword case, but it in      * a separate protected method to allow users to override the validation of the custom      * password type specific case.      * @param usernameToken The UsernameToken instance to verify      * @throws WSSecurityException on a failed authentication.      */
specifier|protected
name|void
name|verifyCustomPassword
parameter_list|(
name|UsernameToken
name|usernameToken
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|verifyPlaintextPassword
argument_list|(
name|usernameToken
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify a UsernameToken containing a plaintext password. It does this by querying a      * CallbackHandler instance to obtain a password for the given username, and then comparing      * it against the received password.      * This method currently uses the same LOG.c as the verifyDigestPassword case, but it in      * a separate protected method to allow users to override the validation of the plaintext      * password specific case.      * @param usernameToken The UsernameToken instance to verify      * @throws WSSecurityException on a failed authentication.      */
specifier|protected
name|void
name|verifyPlaintextPassword
parameter_list|(
name|UsernameToken
name|usernameToken
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|verifyDigestPassword
argument_list|(
name|usernameToken
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify a UsernameToken containing a password digest. It does this by querying a      * CallbackHandler instance to obtain a password for the given username, and then comparing      * it against the received password.      * @param usernameToken The UsernameToken instance to verify      * @throws WSSecurityException on a failed authentication.      */
specifier|protected
name|void
name|verifyDigestPassword
parameter_list|(
name|UsernameToken
name|usernameToken
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|data
operator|.
name|getCallbackHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"noCallback"
argument_list|)
throw|;
block|}
name|String
name|user
init|=
name|usernameToken
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|password
init|=
name|usernameToken
operator|.
name|getPassword
argument_list|()
decl_stmt|;
name|String
name|nonce
init|=
name|usernameToken
operator|.
name|getNonce
argument_list|()
decl_stmt|;
name|String
name|createdTime
init|=
name|usernameToken
operator|.
name|getCreated
argument_list|()
decl_stmt|;
name|String
name|pwType
init|=
name|usernameToken
operator|.
name|getPasswordType
argument_list|()
decl_stmt|;
name|boolean
name|passwordsAreEncoded
init|=
name|usernameToken
operator|.
name|getPasswordsAreEncoded
argument_list|()
decl_stmt|;
name|WSPasswordCallback
name|pwCb
init|=
operator|new
name|WSPasswordCallback
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|pwType
argument_list|,
name|WSPasswordCallback
operator|.
name|USERNAME_TOKEN
argument_list|)
decl_stmt|;
try|try
block|{
name|data
operator|.
name|getCallbackHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|Callback
index|[]
block|{
name|pwCb
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|UnsupportedCallbackException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|origPassword
init|=
name|pwCb
operator|.
name|getPassword
argument_list|()
decl_stmt|;
if|if
condition|(
name|origPassword
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Callback supplied no password for: "
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
if|if
condition|(
name|usernameToken
operator|.
name|isHashed
argument_list|()
condition|)
block|{
name|String
name|passDigest
decl_stmt|;
if|if
condition|(
name|passwordsAreEncoded
condition|)
block|{
name|passDigest
operator|=
name|UsernameToken
operator|.
name|doPasswordDigest
argument_list|(
name|nonce
argument_list|,
name|createdTime
argument_list|,
name|Base64
operator|.
name|getMimeDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|origPassword
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|passDigest
operator|=
name|UsernameToken
operator|.
name|doPasswordDigest
argument_list|(
name|nonce
argument_list|,
name|createdTime
argument_list|,
name|origPassword
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|passDigest
operator|.
name|equals
argument_list|(
name|password
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|origPassword
operator|.
name|equals
argument_list|(
name|password
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Verify a UsernameToken containing no password. An exception is thrown unless the user      * has explicitly allowed this use-case via WSHandlerConstants.ALLOW_USERNAMETOKEN_NOPASSWORD      * @param usernameToken The UsernameToken instance to verify      * @throws WSSecurityException on a failed authentication.      */
specifier|protected
name|void
name|verifyUnknownPassword
parameter_list|(
name|UsernameToken
name|usernameToken
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|boolean
name|allowUsernameTokenDerivedKeys
init|=
name|data
operator|.
name|isAllowUsernameTokenNoPassword
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|allowUsernameTokenDerivedKeys
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authentication failed as the received UsernameToken does not "
operator|+
literal|"contain any password element"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

