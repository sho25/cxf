begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|claims
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|SamlSecurityTokenImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SamlSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|WSSecurityTokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|SamlTokenValidatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|TokenContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|InboundSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|core
operator|.
name|xml
operator|.
name|XMLObject
import|;
end_import

begin_comment
comment|/**  * This class validates a SAML Assertion and checks that it has an "AuthenticatedRole" attribute  * corresponding to "admin-user". Note that it only throws an error if the role has the wrong  * value, not if the role doesn't exist. This is because the WS-SecurityPolicy validation will  * check to make sure that the correct defined Claims have been met in the token.  */
end_comment

begin_class
specifier|public
class|class
name|StaxClaimsValidator
extends|extends
name|SamlTokenValidatorImpl
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|SamlSecurityToken
operator|&
name|InboundSecurityToken
parameter_list|>
name|T
name|validate
parameter_list|(
specifier|final
name|SamlAssertionWrapper
name|samlAssertionWrapper
parameter_list|,
specifier|final
name|InboundSecurityToken
name|subjectSecurityToken
parameter_list|,
specifier|final
name|TokenContext
name|tokenContext
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Check conditions
name|checkConditions
argument_list|(
name|samlAssertionWrapper
argument_list|)
expr_stmt|;
comment|// Check OneTimeUse Condition
name|checkOneTimeUse
argument_list|(
name|samlAssertionWrapper
argument_list|,
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getSamlOneTimeUseReplayCache
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate the assertion against schemas/profiles
name|validateAssertion
argument_list|(
name|samlAssertionWrapper
argument_list|)
expr_stmt|;
comment|// Now check Claims
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|samlAssertionWrapper
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|valid
operator|=
name|handleSAML1Assertion
argument_list|(
name|samlAssertionWrapper
operator|.
name|getSaml1
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|samlAssertionWrapper
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|valid
operator|=
name|handleSAML2Assertion
argument_list|(
name|samlAssertionWrapper
operator|.
name|getSaml2
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|valid
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|Crypto
name|sigVerCrypto
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|samlAssertionWrapper
operator|.
name|isSigned
argument_list|()
condition|)
block|{
name|sigVerCrypto
operator|=
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getSignatureVerificationCrypto
argument_list|()
expr_stmt|;
block|}
name|SamlSecurityTokenImpl
name|securityToken
init|=
operator|new
name|SamlSecurityTokenImpl
argument_list|(
name|samlAssertionWrapper
argument_list|,
name|subjectSecurityToken
argument_list|,
name|tokenContext
operator|.
name|getWsSecurityContext
argument_list|()
argument_list|,
name|sigVerCrypto
argument_list|,
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_NoKeyInfo
argument_list|,
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
argument_list|)
decl_stmt|;
name|securityToken
operator|.
name|setElementPath
argument_list|(
name|tokenContext
operator|.
name|getElementPath
argument_list|()
argument_list|)
expr_stmt|;
name|securityToken
operator|.
name|setXMLSecEvent
argument_list|(
name|tokenContext
operator|.
name|getFirstXMLSecEvent
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|securityToken
return|;
block|}
specifier|private
name|boolean
name|handleSAML1Assertion
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Assertion
name|assertion
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|List
argument_list|<
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml1
operator|.
name|core
operator|.
name|AttributeStatement
argument_list|>
name|attributeStatements
init|=
name|assertion
operator|.
name|getAttributeStatements
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributeStatements
operator|==
literal|null
operator|||
name|attributeStatements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml1
operator|.
name|core
operator|.
name|AttributeStatement
name|statement
range|:
name|attributeStatements
control|)
block|{
name|List
argument_list|<
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Attribute
argument_list|>
name|attributes
init|=
name|statement
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
operator|!
name|ClaimTypes
operator|.
name|URI_BASE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getAttributeNamespace
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|XMLObject
name|attributeValue
range|:
name|attribute
operator|.
name|getAttributeValues
argument_list|()
control|)
block|{
name|Element
name|attributeValueElement
init|=
name|attributeValue
operator|.
name|getDOM
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|attributeValueElement
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"admin-user"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|handleSAML2Assertion
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Assertion
name|assertion
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|List
argument_list|<
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AttributeStatement
argument_list|>
name|attributeStatements
init|=
name|assertion
operator|.
name|getAttributeStatements
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributeStatements
operator|==
literal|null
operator|||
name|attributeStatements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AttributeStatement
name|statement
range|:
name|attributeStatements
control|)
block|{
name|List
argument_list|<
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Attribute
argument_list|>
name|attributes
init|=
name|statement
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
operator|!
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ClaimTypes
operator|.
name|URI_BASE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|XMLObject
name|attributeValue
range|:
name|attribute
operator|.
name|getAttributeValues
argument_list|()
control|)
block|{
name|Element
name|attributeValueElement
init|=
name|attributeValue
operator|.
name|getDOM
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|attributeValueElement
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"admin-user"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

