begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|issueunit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBindingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|StaticSTSProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|KeyRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|TokenRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|service
operator|.
name|EncryptionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|SAMLTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|TokenProviderParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|TokenProviderResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|realm
operator|.
name|RealmProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|common
operator|.
name|CommonCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|common
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|deployment
operator|.
name|STSServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|mex
operator|.
name|MetadataExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|mex
operator|.
name|model
operator|.
name|_2004_09
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|mex
operator|.
name|model
operator|.
name|_2004_09
operator|.
name|MetadataSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|CustomTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|OpenSAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSDocInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|engine
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|processor
operator|.
name|SAMLTokenProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * Some unit tests for the CXF STSClient Issue Binding.  */
end_comment

begin_class
specifier|public
class|class
name|IssueUnitTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|STSPORT
init|=
name|allocatePort
argument_list|(
name|STSServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|STSPORT2
init|=
name|allocatePort
argument_list|(
name|STSServer
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAML1_TOKEN_TYPE
init|=
literal|"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAML2_TOKEN_TYPE
init|=
literal|"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYMMETRIC_KEY_KEYTYPE
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUBLIC_KEY_KEYTYPE
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BEARER_KEYTYPE
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_ADDRESS
init|=
literal|"https://localhost:8081/doubleit/services/doubleittransportsaml1"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|STSServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|stopAllServers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testRetrieveWSMEX
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|IssueUnitTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|// Get Metadata
name|JaxWsProxyFactoryBean
name|proxyFac
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|proxyFac
operator|.
name|setBindingId
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP11_BINDING_ID
argument_list|)
expr_stmt|;
name|proxyFac
operator|.
name|setAddress
argument_list|(
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/Transport/mex"
argument_list|)
expr_stmt|;
name|MetadataExchange
name|exc
init|=
name|proxyFac
operator|.
name|create
argument_list|(
name|MetadataExchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
name|exc
operator|.
name|get2004
argument_list|()
decl_stmt|;
comment|// Parse response (as per the STSClient)
name|Definition
name|definition
init|=
literal|null
decl_stmt|;
comment|// Parse the MetadataSections into WSDL definition + associated schemas
for|for
control|(
name|MetadataSection
name|s
range|:
name|metadata
operator|.
name|getMetadataSection
argument_list|()
control|)
block|{
if|if
condition|(
literal|"http://schemas.xmlsoap.org/wsdl/"
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getDialect
argument_list|()
argument_list|)
condition|)
block|{
name|definition
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getDefinition
argument_list|(
operator|(
name|Element
operator|)
name|s
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|definition
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the Symmetric Key SAML1 case      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSymmetricKeySaml1
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|IssueUnitTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|// Get a token
name|SecurityToken
name|token
init|=
name|requestSecurityToken
argument_list|(
name|SAML1_TOKEN_TYPE
argument_list|,
name|SYMMETRIC_KEY_KEYTYPE
argument_list|,
name|bus
argument_list|,
name|DEFAULT_ADDRESS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getSecret
argument_list|()
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getSecret
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SAML1_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmMethod
argument_list|)
argument_list|)
expr_stmt|;
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertion
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|subjectKeyInfo
operator|.
name|getSecret
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the Public Key SAML2 case      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testPublicKeySaml2
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|IssueUnitTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|// Get a token
name|SecurityToken
name|token
init|=
name|requestSecurityToken
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|,
name|PUBLIC_KEY_KEYTYPE
argument_list|,
name|bus
argument_list|,
name|DEFAULT_ADDRESS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getSecret
argument_list|()
operator|==
literal|null
operator|&&
name|token
operator|.
name|getX509Certificate
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmMethod
argument_list|)
argument_list|)
expr_stmt|;
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertion
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|subjectKeyInfo
operator|.
name|getCerts
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the Bearer SAML1 case      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testBearerSaml1
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|IssueUnitTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|// Get a token
name|SecurityToken
name|token
init|=
name|requestSecurityToken
argument_list|(
name|SAML1_TOKEN_TYPE
argument_list|,
name|BEARER_KEYTYPE
argument_list|,
name|bus
argument_list|,
name|DEFAULT_ADDRESS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|SAML1_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|confirmMethod
operator|.
name|contains
argument_list|(
literal|"bearer"
argument_list|)
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the Bearer Sender Vouches SAML2 case      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testBearerSVSaml2
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|IssueUnitTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|// Get a token
name|SecurityToken
name|token
init|=
name|requestSecurityToken
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|,
name|BEARER_KEYTYPE
argument_list|,
literal|null
argument_list|,
name|bus
argument_list|,
name|DEFAULT_ADDRESS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|confirmMethod
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that a request with no AppliesTo can be created by the CXF STS client.      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testNoAppliesTo
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|IssueUnitTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
try|try
block|{
name|requestSecurityToken
argument_list|(
name|SAML1_TOKEN_TYPE
argument_list|,
name|BEARER_KEYTYPE
argument_list|,
name|bus
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// fail("Failure expected on no AppliesTo value");
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the Bearer SAML1 case with a Context Attribute      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testBearerSaml1Context
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|IssueUnitTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|// Get a token
name|String
name|context
init|=
literal|"AuthenticationContext"
decl_stmt|;
name|SecurityToken
name|token
init|=
name|requestSecurityToken
argument_list|(
name|SAML1_TOKEN_TYPE
argument_list|,
name|BEARER_KEYTYPE
argument_list|,
name|bus
argument_list|,
name|DEFAULT_ADDRESS
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|SAML1_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|confirmMethod
operator|.
name|contains
argument_list|(
literal|"bearer"
argument_list|)
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the Bearer SAML1 case with a Lifetime element      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testBearerSaml1Lifetime
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|IssueUnitTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|// Get a token
name|SecurityToken
name|token
init|=
name|requestSecurityTokenTTL
argument_list|(
name|SAML1_TOKEN_TYPE
argument_list|,
name|BEARER_KEYTYPE
argument_list|,
name|bus
argument_list|,
name|DEFAULT_ADDRESS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|SAML1_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|confirmMethod
operator|.
name|contains
argument_list|(
literal|"bearer"
argument_list|)
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//CHECKSTYLE:OFF
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSAMLinWSSecToOtherRealm
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|IssueUnitTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getEncryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|CallbackHandler
name|callbackHandler
init|=
operator|new
name|CommonCallbackHandler
argument_list|()
decl_stmt|;
comment|//Create SAML token
name|Element
name|samlToken
init|=
name|createSAMLAssertion
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|crypto
argument_list|,
literal|"mystskey"
argument_list|,
name|callbackHandler
argument_list|,
literal|null
argument_list|,
literal|"alice"
argument_list|,
literal|"a-issuer"
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|null
decl_stmt|;
name|QName
name|elName
init|=
name|DOMUtils
operator|.
name|getElementQName
argument_list|(
name|samlToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|SAML_NS
argument_list|,
literal|"Assertion"
argument_list|)
argument_list|)
operator|&&
name|samlToken
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
condition|)
block|{
name|id
operator|=
name|samlToken
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|SAML2_NS
argument_list|,
literal|"Assertion"
argument_list|)
argument_list|)
operator|&&
name|samlToken
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
condition|)
block|{
name|id
operator|=
name|samlToken
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|samlToken
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
expr_stmt|;
block|}
name|SecurityToken
name|wstoken
init|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|,
name|samlToken
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|,
name|wstoken
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|wstoken
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get a token
name|SecurityToken
name|token
init|=
name|requestSecurityToken
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|,
name|BEARER_KEYTYPE
argument_list|,
literal|null
argument_list|,
name|bus
argument_list|,
name|DEFAULT_ADDRESS
argument_list|,
literal|null
argument_list|,
name|properties
argument_list|,
literal|"b-issuer"
argument_list|,
literal|"Transport_SAML_Port"
argument_list|)
decl_stmt|;
comment|/*         SecurityToken token =                  requestSecurityToken(SAML2_TOKEN_TYPE, BEARER_KEYTYPE, null,                         bus, DEFAULT_ADDRESS, null, properties, "b-issuer", null);                         */
name|assertTrue
argument_list|(
name|SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getTokenType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|confirmMethod
operator|.
name|contains
argument_list|(
literal|"bearer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"b-issuer"
operator|.
name|equals
argument_list|(
name|assertion
operator|.
name|getIssuerString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|subjectName
init|=
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getSubject
argument_list|()
operator|.
name|getNameID
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Subject must be ALICE instead of "
operator|+
name|subjectName
argument_list|,
literal|"ALICE"
operator|.
name|equals
argument_list|(
name|subjectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SecurityToken
name|requestSecurityToken
parameter_list|(
name|String
name|tokenType
parameter_list|,
name|String
name|keyType
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|String
name|endpointAddress
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|requestSecurityToken
argument_list|(
name|tokenType
argument_list|,
name|keyType
argument_list|,
literal|null
argument_list|,
name|bus
argument_list|,
name|endpointAddress
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|SecurityToken
name|requestSecurityToken
parameter_list|(
name|String
name|tokenType
parameter_list|,
name|String
name|keyType
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|String
name|endpointAddress
parameter_list|,
name|String
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|requestSecurityToken
argument_list|(
name|tokenType
argument_list|,
name|keyType
argument_list|,
literal|null
argument_list|,
name|bus
argument_list|,
name|endpointAddress
argument_list|,
name|context
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|SecurityToken
name|requestSecurityToken
parameter_list|(
name|String
name|tokenType
parameter_list|,
name|String
name|keyType
parameter_list|,
name|Element
name|supportingToken
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|String
name|endpointAddress
parameter_list|,
name|String
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|msgProperties
parameter_list|,
name|String
name|realmUri
parameter_list|,
name|String
name|wsdlPort
parameter_list|)
throws|throws
name|Exception
block|{
name|STSClient
name|stsClient
init|=
operator|new
name|STSClient
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|STSPORT
decl_stmt|;
if|if
condition|(
name|realmUri
operator|!=
literal|null
condition|)
block|{
name|stsClient
operator|.
name|setWsdlLocation
argument_list|(
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/SecurityTokenService/"
operator|+
name|realmUri
operator|+
literal|"/Transport?wsdl"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stsClient
operator|.
name|setWsdlLocation
argument_list|(
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/SecurityTokenService/Transport?wsdl"
argument_list|)
expr_stmt|;
block|}
name|stsClient
operator|.
name|setServiceName
argument_list|(
literal|"{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}SecurityTokenService"
argument_list|)
expr_stmt|;
if|if
condition|(
name|wsdlPort
operator|!=
literal|null
condition|)
block|{
name|stsClient
operator|.
name|setEndpointName
argument_list|(
literal|"{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}"
operator|+
name|wsdlPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stsClient
operator|.
name|setEndpointName
argument_list|(
literal|"{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}Transport_Port"
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|msgProperties
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|USERNAME
argument_list|,
literal|"alice"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
literal|"org.apache.cxf.systest.sts.common.CommonCallbackHandler"
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|IS_BSP_COMPLIANT
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|PUBLIC_KEY_KEYTYPE
operator|.
name|equals
argument_list|(
name|keyType
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_USERNAME
argument_list|,
literal|"myclientkey"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_PROPERTIES
argument_list|,
literal|"clientKeystore.properties"
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setUseCertificateForConfirmationKeyInfo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|supportingToken
operator|!=
literal|null
condition|)
block|{
name|stsClient
operator|.
name|setOnBehalfOf
argument_list|(
name|supportingToken
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|stsClient
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|stsClient
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
return|return
name|stsClient
operator|.
name|requestSecurityToken
argument_list|(
name|endpointAddress
argument_list|)
return|;
block|}
specifier|private
name|Properties
name|getEncryptionProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.ws.security.crypto.provider"
argument_list|,
literal|"org.apache.ws.security.components.crypto.Merlin"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.ws.security.crypto.merlin.keystore.password"
argument_list|,
literal|"stsspass"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.ws.security.crypto.merlin.keystore.file"
argument_list|,
literal|"stsstore.jks"
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
comment|/*      * Mock up an SAML assertion element      */
specifier|private
name|Element
name|createSAMLAssertion
parameter_list|(
name|String
name|tokenType
parameter_list|,
name|Crypto
name|crypto
parameter_list|,
name|String
name|signatureUsername
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RealmProperties
argument_list|>
name|realms
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|issuer
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|SAMLTokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|samlTokenProvider
operator|.
name|setRealmMap
argument_list|(
name|realms
argument_list|)
expr_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|(
name|tokenType
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|,
name|crypto
argument_list|,
name|signatureUsername
argument_list|,
name|callbackHandler
argument_list|,
name|user
argument_list|,
name|issuer
argument_list|)
decl_stmt|;
if|if
condition|(
name|realms
operator|!=
literal|null
condition|)
block|{
name|providerParameters
operator|.
name|setRealm
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
block|}
name|TokenProviderResponse
name|providerResponse
init|=
name|samlTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
operator|(
name|Element
operator|)
name|providerResponse
operator|.
name|getToken
argument_list|()
return|;
block|}
specifier|private
name|TokenProviderParameters
name|createProviderParameters
parameter_list|(
name|String
name|tokenType
parameter_list|,
name|String
name|keyType
parameter_list|,
name|Crypto
name|crypto
parameter_list|,
name|String
name|signatureUsername
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|issuer
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|TokenProviderParameters
name|parameters
init|=
operator|new
name|TokenProviderParameters
argument_list|()
decl_stmt|;
name|TokenRequirements
name|tokenRequirements
init|=
operator|new
name|TokenRequirements
argument_list|()
decl_stmt|;
name|tokenRequirements
operator|.
name|setTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setTokenRequirements
argument_list|(
name|tokenRequirements
argument_list|)
expr_stmt|;
name|KeyRequirements
name|keyRequirements
init|=
operator|new
name|KeyRequirements
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setKeyRequirements
argument_list|(
name|keyRequirements
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock up message context
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|WrappedMessageContext
name|msgCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|setMessageContext
argument_list|(
name|msgCtx
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setAppliesToAddress
argument_list|(
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/b-issuer/Transport"
argument_list|)
expr_stmt|;
comment|// Add STSProperties object
name|StaticSTSProperties
name|stsProperties
init|=
operator|new
name|StaticSTSProperties
argument_list|()
decl_stmt|;
name|stsProperties
operator|.
name|setSignatureCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureUsername
argument_list|(
name|signatureUsername
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIssuer
argument_list|(
name|issuer
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setEncryptionProperties
argument_list|(
operator|new
name|EncryptionProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parameters
return|;
block|}
specifier|private
name|SecurityToken
name|requestSecurityTokenTTL
parameter_list|(
name|String
name|tokenType
parameter_list|,
name|String
name|keyType
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|String
name|endpointAddress
parameter_list|)
throws|throws
name|Exception
block|{
name|STSClient
name|stsClient
init|=
operator|new
name|STSClient
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|STSPORT
decl_stmt|;
name|stsClient
operator|.
name|setWsdlLocation
argument_list|(
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/SecurityTokenService/Transport?wsdl"
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setServiceName
argument_list|(
literal|"{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}SecurityTokenService"
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setEndpointName
argument_list|(
literal|"{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}Transport_Port"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|USERNAME
argument_list|,
literal|"alice"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
literal|"org.apache.cxf.systest.sts.common.CommonCallbackHandler"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
literal|"clientKeystore.properties"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
argument_list|,
literal|"mystskey"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|IS_BSP_COMPLIANT
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|PUBLIC_KEY_KEYTYPE
operator|.
name|equals
argument_list|(
name|keyType
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_USERNAME
argument_list|,
literal|"myclientkey"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_PROPERTIES
argument_list|,
literal|"clientKeystore.properties"
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setUseCertificateForConfirmationKeyInfo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|stsClient
operator|.
name|setEnableLifetime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setTtl
argument_list|(
literal|60
operator|*
literal|30
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
name|stsClient
operator|.
name|setAddressingNamespace
argument_list|(
literal|"http://www.w3.org/2005/08/addressing"
argument_list|)
expr_stmt|;
return|return
name|stsClient
operator|.
name|requestSecurityToken
argument_list|(
name|endpointAddress
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|processToken
parameter_list|(
name|SecurityToken
name|token
parameter_list|)
throws|throws
name|Exception
block|{
name|RequestData
name|requestData
init|=
operator|new
name|RequestData
argument_list|()
decl_stmt|;
name|requestData
operator|.
name|setDisableBSPEnforcement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CallbackHandler
name|callbackHandler
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|common
operator|.
name|CommonCallbackHandler
argument_list|()
decl_stmt|;
name|requestData
operator|.
name|setCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
expr_stmt|;
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
literal|"serviceKeystore.properties"
argument_list|)
decl_stmt|;
name|requestData
operator|.
name|setDecCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|requestData
operator|.
name|setSigVerCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|Processor
name|processor
init|=
operator|new
name|SAMLTokenProcessor
argument_list|()
decl_stmt|;
return|return
name|processor
operator|.
name|handleToken
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
argument_list|,
name|requestData
argument_list|,
operator|new
name|WSDocInfo
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

