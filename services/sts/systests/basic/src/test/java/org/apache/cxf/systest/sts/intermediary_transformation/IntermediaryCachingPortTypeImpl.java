begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|intermediary_transformation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|delegation
operator|.
name|ReceivedTokenCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|example
operator|.
name|contract
operator|.
name|doubleit
operator|.
name|DoubleItPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://www.example.org/contract/DoubleIt"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.example.contract.doubleit.DoubleItPortType"
argument_list|)
annotation|@
name|Features
argument_list|(
name|features
operator|=
literal|"org.apache.cxf.feature.LoggingFeature"
argument_list|)
specifier|public
class|class
name|IntermediaryCachingPortTypeImpl
extends|extends
name|AbstractBusClientServerTestBase
implements|implements
name|DoubleItPortType
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://www.example.org/contract/DoubleIt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_QNAME
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItService"
argument_list|)
decl_stmt|;
annotation|@
name|Resource
specifier|private
name|WebServiceContext
name|wsc
decl_stmt|;
specifier|private
name|int
name|i
decl_stmt|;
specifier|private
name|DoubleItPortType
name|transportPort
decl_stmt|;
specifier|public
name|int
name|doubleIt
parameter_list|(
name|int
name|numberToDouble
parameter_list|)
block|{
if|if
condition|(
name|transportPort
operator|==
literal|null
condition|)
block|{
comment|// Re-use the same proxy
name|URL
name|wsdl
init|=
name|IntermediaryCachingPortTypeImpl
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleIt.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItTransportSAML2Port"
argument_list|)
decl_stmt|;
name|transportPort
operator|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|updateAddressPort
argument_list|(
name|transportPort
argument_list|,
name|IntermediaryTransformationCachingTest
operator|.
name|PORT2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"standalone"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sts.deployment"
argument_list|)
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|transportPort
operator|)
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|STSClient
name|stsClient
init|=
operator|(
name|STSClient
operator|)
name|context
operator|.
name|get
argument_list|(
name|SecurityConstants
operator|.
name|STS_CLIENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|stsClient
operator|!=
literal|null
condition|)
block|{
name|String
name|location
init|=
name|stsClient
operator|.
name|getWsdlLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|contains
argument_list|(
literal|"8080"
argument_list|)
condition|)
block|{
name|stsClient
operator|.
name|setWsdlLocation
argument_list|(
name|location
operator|.
name|replace
argument_list|(
literal|"8080"
argument_list|,
name|IntermediaryTransformationCachingTest
operator|.
name|STSPORT2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|location
operator|.
name|contains
argument_list|(
literal|"8443"
argument_list|)
condition|)
block|{
name|stsClient
operator|.
name|setWsdlLocation
argument_list|(
name|location
operator|.
name|replace
argument_list|(
literal|"8443"
argument_list|,
name|IntermediaryTransformationCachingTest
operator|.
name|STSPORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Principal
name|pr
init|=
name|wsc
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Principal must not be null"
argument_list|,
name|pr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Principal.getName() must not return null"
argument_list|,
name|pr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Principal must be alice"
argument_list|,
name|pr
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disable the STSClient after the first invocation
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|BindingProvider
name|p
init|=
operator|(
name|BindingProvider
operator|)
name|transportPort
decl_stmt|;
name|STSClient
name|stsClient
init|=
operator|new
name|STSClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|stsClient
operator|.
name|setOnBehalfOf
argument_list|(
operator|new
name|ReceivedTokenCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_CLIENT
argument_list|,
name|stsClient
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
return|return
name|transportPort
operator|.
name|doubleIt
argument_list|(
name|numberToDouble
argument_list|)
return|;
block|}
block|}
end_class

end_unit

