begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|utils
operator|.
name|SAMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|common
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestSecurityTokenResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestedSecurityTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|OpenSAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|util
operator|.
name|Loader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSDocInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|engine
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|processor
operator|.
name|SAMLTokenProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * Some tests for the REST interface of the CXF STS.  */
end_comment

begin_class
specifier|public
class|class
name|STSRESTTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|STSPORT
init|=
name|allocatePort
argument_list|(
name|STSRESTServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAML1_TOKEN_TYPE
init|=
literal|"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAML2_TOKEN_TYPE
init|=
literal|"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JWT_TOKEN_TYPE
init|=
literal|"urn:ietf:params:oauth:token-type:jwt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYMMETRIC_KEY_KEYTYPE
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUBLIC_KEY_KEYTYPE
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BEARER_KEYTYPE
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_ADDRESS
init|=
literal|"https://localhost:8081/doubleit/services/doubleittransportsaml1"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|STSRESTServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|stopAllServers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2Token
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML1Token
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml1.1"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSymmetricKeySaml1
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml1.1"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"keyType"
argument_list|,
name|SYMMETRIC_KEY_KEYTYPE
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmMethod
argument_list|)
argument_list|)
expr_stmt|;
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertion
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|subjectKeyInfo
operator|.
name|getSecret
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssuePublicKeySAML2Token
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"keyType"
argument_list|,
name|PUBLIC_KEY_KEYTYPE
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmMethod
argument_list|)
argument_list|)
expr_stmt|;
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertion
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|subjectKeyInfo
operator|.
name|getCerts
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueBearerSAML1Token
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml1.1"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"keyType"
argument_list|,
name|BEARER_KEYTYPE
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|confirmMethod
operator|.
name|contains
argument_list|(
literal|"bearer"
argument_list|)
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenAppliesTo
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"appliesTo"
argument_list|,
name|DEFAULT_ADDRESS
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenUnknownAppliesTo
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"appliesTo"
argument_list|,
literal|"https://localhost:8081/tripleit/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unknown AppliesTo address"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
expr_stmt|;
comment|// First check that the role isn't usually in the generated token
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|ClaimCollection
name|claims
init|=
name|SAMLUtils
operator|.
name|getClaims
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|claims
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Claim
name|claim
init|=
name|claims
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|role
init|=
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role"
decl_stmt|;
name|assertNotEquals
argument_list|(
name|claim
operator|.
name|getClaimType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|role
argument_list|)
expr_stmt|;
comment|// Now get another token specifying the role
name|client
operator|.
name|query
argument_list|(
literal|"claim"
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertionDoc
operator|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// Process the token
name|results
operator|=
name|processToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertion
operator|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
name|claims
operator|=
name|SAMLUtils
operator|.
name|getClaims
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|claims
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|claim
operator|=
name|claims
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|claim
operator|.
name|getClaimType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ordinary-user"
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenViaWSTrust
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"wstrustResponse"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenViaPOST
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_12
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testExplicitlyIssueSAML2TokenViaPOST
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"issue"
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_12
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testExplicitlyIssueSAML1TokenViaPOST
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"issue"
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_12
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML1_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateSAML2Token
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
expr_stmt|;
comment|// 1. Get a token via GET
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// 2. Now validate it in the STS using POST
name|client
operator|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"validate"
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_12
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Validate"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|String
name|tokenType
init|=
name|namespace
operator|+
literal|"/RSTR/Status"
decl_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"ValidateTarget"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|StatusType
name|status
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|securityResponse
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"Status"
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|status
operator|=
operator|(
name|StatusType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|assertNotNull
parameter_list|(
name|status
parameter_list|)
constructor_decl|;
comment|// Check the token was valid
name|String
name|validCode
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid"
decl_stmt|;
name|assertEquals
argument_list|(
name|validCode
argument_list|,
name|status
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testRenewSAML2Token
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"issue"
argument_list|)
expr_stmt|;
comment|// 1. Get a token via POST
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_12
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Element
name|token
init|=
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// 2. Now validate it in the STS using POST
name|client
operator|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"renew"
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|writer
operator|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Renew"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RenewTarget"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|token
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|securityResponse
operator|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTToken
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|token
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|validateJWTToken
argument_list|(
name|token
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTTokenAppliesTo
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"appliesTo"
argument_list|,
name|DEFAULT_ADDRESS
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|token
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|validateJWTToken
argument_list|(
name|token
argument_list|,
name|DEFAULT_ADDRESS
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTTokenClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
expr_stmt|;
comment|// First check that the role isn't usually in the generated token
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|token
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|String
name|role
init|=
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role"
decl_stmt|;
name|assertTrue
argument_list|(
name|jwt
operator|.
name|getClaim
argument_list|(
name|role
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Now get another token specifying the role
name|client
operator|.
name|query
argument_list|(
literal|"claim"
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|()
expr_stmt|;
name|token
operator|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// Process the token
name|validateJWTToken
argument_list|(
name|token
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|jwtConsumer
operator|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|jwt
operator|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ordinary-user"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTTokenViaPOST
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_12
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|JWT_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|RequestedSecurityTokenType
name|requestedSecurityToken
init|=
name|getRequestedSecurityToken
argument_list|(
name|securityResponse
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|requestedSecurityToken
argument_list|)
expr_stmt|;
name|String
name|token
init|=
operator|(
operator|(
name|Element
operator|)
name|requestedSecurityToken
operator|.
name|getAny
argument_list|()
operator|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|validateJWTToken
argument_list|(
name|token
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateSAMLAndIssueJWT
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
expr_stmt|;
comment|// 1. Get a token via GET
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// 2. Now validate it in the STS using POST
name|client
operator|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"validate"
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_12
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Validate"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|JWT_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"ValidateTarget"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|StatusType
name|status
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|securityResponse
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"Status"
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|status
operator|=
operator|(
name|StatusType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function

begin_expr_stmt
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Check the token was valid
end_comment

begin_decl_stmt
name|String
name|validCode
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid"
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|validCode
argument_list|,
name|status
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Check the token
end_comment

begin_decl_stmt
name|RequestedSecurityTokenType
name|requestedSecurityToken
init|=
name|getRequestedSecurityToken
argument_list|(
name|securityResponse
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertNotNull
argument_list|(
name|requestedSecurityToken
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|String
name|token
init|=
operator|(
operator|(
name|Element
operator|)
name|requestedSecurityToken
operator|.
name|getAny
argument_list|()
operator|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|validateJWTToken
argument_list|(
name|token
argument_list|,
literal|null
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}          @
name|org
operator|.
name|junit
operator|.
name|Test
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
specifier|public
name|void
name|testValidateJWTAndIssueSAML
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|STSRESTTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"cxf-client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
expr_stmt|;
comment|// 1. Get a token via GET
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|token
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// 2. Now validate it in the STS using POST
name|client
operator|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"validate"
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_12
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Validate"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"ValidateTarget"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|null
argument_list|,
literal|"TokenWrapper"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|StatusType
name|status
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|securityResponse
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"Status"
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|status
operator|=
operator|(
name|StatusType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function

begin_expr_stmt
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*         // Check the token was valid         String validCode = "http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid";         assertEquals(validCode, status.getCode());                  // Check the token         RequestedSecurityTokenType requestedSecurityToken = getRequestedSecurityToken(securityResponse);         assertNotNull(requestedSecurityToken);                  String token = ((Element)requestedSecurityToken.getAny()).getTextContent();         assertNotNull(token);                  validateJWTToken(token, null);         */
end_comment

begin_expr_stmt
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}          private
name|Element
name|validateSAMLSecurityTokenResponse
parameter_list|(
name|RequestSecurityTokenResponseType
name|securityResponse
parameter_list|,
name|boolean
name|saml2
parameter_list|)
throws|throws
name|Exception
block|{
name|RequestedSecurityTokenType
name|requestedSecurityToken
init|=
name|getRequestedSecurityToken
argument_list|(
name|securityResponse
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|requestedSecurityToken
argument_list|)
expr_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
operator|(
name|Element
operator|)
name|requestedSecurityToken
operator|.
name|getAny
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|saml2
condition|)
block|{
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|Element
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TOKEN_ELEMENT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|RequestedSecurityTokenType
name|getRequestedSecurityToken
parameter_list|(
name|RequestSecurityTokenResponseType
name|securityResponse
parameter_list|)
block|{
for|for
control|(
name|Object
name|obj
range|:
name|securityResponse
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"RequestedSecurityToken"
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|RequestedSecurityTokenType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
end_function

begin_return
return|return
literal|null
return|;
end_return

begin_function
unit|}          private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|processToken
parameter_list|(
name|Element
name|assertionElement
parameter_list|)
throws|throws
name|Exception
block|{
name|RequestData
name|requestData
init|=
operator|new
name|RequestData
argument_list|()
decl_stmt|;
name|requestData
operator|.
name|setDisableBSPEnforcement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CallbackHandler
name|callbackHandler
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|common
operator|.
name|CommonCallbackHandler
argument_list|()
decl_stmt|;
name|requestData
operator|.
name|setCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
expr_stmt|;
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
literal|"serviceKeystore.properties"
argument_list|)
decl_stmt|;
name|requestData
operator|.
name|setDecCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|requestData
operator|.
name|setSigVerCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|Processor
name|processor
init|=
operator|new
name|SAMLTokenProcessor
argument_list|()
decl_stmt|;
return|return
name|processor
operator|.
name|handleToken
argument_list|(
name|assertionElement
argument_list|,
name|requestData
argument_list|,
operator|new
name|WSDocInfo
argument_list|(
name|assertionElement
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|validateJWTToken
parameter_list|(
name|String
name|token
parameter_list|,
name|String
name|audience
parameter_list|)
throws|throws
name|KeyStoreException
throws|,
name|NoSuchAlgorithmException
throws|,
name|CertificateException
throws|,
name|IOException
block|{
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
comment|// Validate claims
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"DoubleItSTSIssuer"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_ISSUER
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|audience
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|audiences
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_AUDIENCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|audiences
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|audience
argument_list|,
name|audiences
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_EXPIRY
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_ISSUED_AT
argument_list|)
argument_list|)
expr_stmt|;
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"JKS"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
name|Loader
operator|.
name|getResource
argument_list|(
literal|"servicestore.jks"
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|,
literal|"sspass"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|Certificate
name|cert
init|=
name|keystore
operator|.
name|getCertificate
argument_list|(
literal|"mystskey"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cert
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jwtConsumer
operator|.
name|verifySignatureWith
argument_list|(
operator|(
name|X509Certificate
operator|)
name|cert
argument_list|,
name|SignatureAlgorithm
operator|.
name|RS256
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

