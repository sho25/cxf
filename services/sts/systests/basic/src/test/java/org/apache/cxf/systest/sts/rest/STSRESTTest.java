begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|CompressionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|crypto
operator|.
name|CryptoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|utils
operator|.
name|SAMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|common
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestSecurityTokenResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestedSecurityTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|OpenSAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSDocInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|engine
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|processor
operator|.
name|SAMLTokenProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSUtils
operator|.
name|WST_NS_05_12
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Some tests for the REST interface of the CXF STS.  */
end_comment

begin_class
specifier|public
class|class
name|STSRESTTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|STSPORT
init|=
name|allocatePort
argument_list|(
name|STSRESTServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAML1_TOKEN_TYPE
init|=
literal|"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAML2_TOKEN_TYPE
init|=
literal|"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JWT_TOKEN_TYPE
init|=
literal|"urn:ietf:params:oauth:token-type:jwt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_ADDRESS
init|=
literal|"https://localhost:8081/doubleit/services/doubleittransportsaml1"
decl_stmt|;
specifier|private
specifier|static
name|TLSClientParameters
name|tlsClientParameters
init|=
operator|new
name|TLSClientParameters
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Crypto
name|serviceCrypto
decl_stmt|;
specifier|private
name|WebClient
name|webClient
decl_stmt|;
annotation|@
name|org
operator|.
name|junit
operator|.
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|STSRESTServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|tlsClientParameters
operator|=
name|getTLSClientParameters
argument_list|()
expr_stmt|;
name|serviceCrypto
operator|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
literal|"serviceKeystore.properties"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|stopAllServers
argument_list|()
expr_stmt|;
name|tlsClientParameters
operator|=
literal|null
expr_stmt|;
name|serviceCrypto
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|After
specifier|public
name|void
name|closeClient
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|webClient
condition|)
block|{
name|webClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2Token
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML1Token
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml1.1"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSymmetricKeySaml1
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml1.1"
argument_list|)
operator|.
name|query
argument_list|(
literal|"keyType"
argument_list|,
name|STSConstants
operator|.
name|SYMMETRIC_KEY_KEYTYPE
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
operator|!
name|methods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmMethod
argument_list|)
argument_list|)
expr_stmt|;
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertion
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subjectKeyInfo
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSymmetricKeySaml1ShortKeyType
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml1.1"
argument_list|)
operator|.
name|query
argument_list|(
literal|"keyType"
argument_list|,
literal|"SymmetricKey"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
operator|!
name|methods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmMethod
argument_list|)
argument_list|)
expr_stmt|;
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertion
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subjectKeyInfo
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssuePublicKeySAML2Token
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|query
argument_list|(
literal|"keyType"
argument_list|,
name|STSConstants
operator|.
name|PUBLIC_KEY_KEYTYPE
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
operator|!
name|methods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmMethod
argument_list|)
argument_list|)
expr_stmt|;
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertion
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subjectKeyInfo
operator|.
name|getCerts
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssuePublicKeySAML2TokenShortKeyType
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|query
argument_list|(
literal|"keyType"
argument_list|,
literal|"PublicKey"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
operator|!
name|methods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmMethod
argument_list|)
argument_list|)
expr_stmt|;
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertion
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subjectKeyInfo
operator|.
name|getCerts
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueBearerSAML1Token
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml1.1"
argument_list|)
operator|.
name|query
argument_list|(
literal|"keyType"
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
operator|!
name|methods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|confirmMethod
operator|.
name|contains
argument_list|(
literal|"bearer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueBearerSAML1TokenShorKeyType
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml1.1"
argument_list|)
operator|.
name|query
argument_list|(
literal|"keyType"
argument_list|,
literal|"Bearer"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|assertion
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
name|String
name|confirmMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
operator|!
name|methods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|confirmMethod
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|confirmMethod
operator|.
name|contains
argument_list|(
literal|"bearer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenAppliesTo
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|query
argument_list|(
literal|"appliesTo"
argument_list|,
name|DEFAULT_ADDRESS
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenUnknownAppliesTo
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|query
argument_list|(
literal|"appliesTo"
argument_list|,
literal|"https://localhost:8081/tripleit/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unknown AppliesTo address"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
comment|// First check that the role isn't usually in the generated token
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|ClaimCollection
name|claims
init|=
name|SAMLUtils
operator|.
name|getClaims
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|claims
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Claim
name|claim
init|=
name|claims
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|role
init|=
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role"
decl_stmt|;
name|assertNotEquals
argument_list|(
name|role
argument_list|,
name|claim
operator|.
name|getClaimType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now get another token specifying the role
name|client
operator|.
name|query
argument_list|(
literal|"claim"
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|assertionDoc
operator|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertion
operator|=
name|validateSAMLToken
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|claims
operator|=
name|SAMLUtils
operator|.
name|getClaims
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|claims
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|claim
operator|=
name|claims
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|role
argument_list|,
name|claim
operator|.
name|getClaimType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ordinary-user"
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenViaWSTrust
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|query
argument_list|(
literal|"wstrustResponse"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|client
operator|.
name|get
argument_list|(
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenViaPOST
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|WST_NS_05_12
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|,
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testExplicitlyIssueSAML2TokenViaPOST
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"issue"
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|WST_NS_05_12
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|,
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testExplicitlyIssueSAML1TokenViaPOST
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"issue"
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|WST_NS_05_12
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML1_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|,
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateSAML2Token
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
comment|// 1. Get a token via GET
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// 2. Now validate it in the STS using POST
name|client
operator|=
name|webClient
argument_list|()
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"validate"
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|WST_NS_05_12
operator|+
literal|"/Validate"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|String
name|tokenType
init|=
name|WST_NS_05_12
operator|+
literal|"/RSTR/Status"
decl_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"ValidateTarget"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|,
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getValidationStatus
argument_list|(
name|securityResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testRenewSAML2Token
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"issue"
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
comment|// 1. Get a token via POST
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|WST_NS_05_12
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|,
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Element
name|token
init|=
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// 2. Now renew it using POST
name|client
operator|=
name|webClient
argument_list|()
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"renew"
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|writer
operator|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|WST_NS_05_12
operator|+
literal|"/Renew"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RenewTarget"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|token
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|securityResponse
operator|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|,
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAML2TokenPlain
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
decl_stmt|;
name|String
name|encodedAssertion
init|=
name|client
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encodedAssertion
argument_list|)
expr_stmt|;
name|byte
index|[]
name|deflatedToken
init|=
name|Base64Utility
operator|.
name|decode
argument_list|(
name|encodedAssertion
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|CompressionUtils
operator|.
name|inflate
argument_list|(
name|deflatedToken
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
comment|// Process the token
name|SamlAssertionWrapper
name|assertion
init|=
name|validateSAMLToken
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTTokenPlain
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
decl_stmt|;
name|String
name|token
init|=
name|client
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateJWTToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTTokenAppliesTo
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
operator|.
name|query
argument_list|(
literal|"appliesTo"
argument_list|,
name|DEFAULT_ADDRESS
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
decl_stmt|;
name|String
name|token
init|=
name|client
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|validateJWTToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|audiences
init|=
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getAudiences
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|audiences
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_ADDRESS
argument_list|,
name|audiences
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTTokenClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
decl_stmt|;
comment|// First check that the role isn't usually in the generated token
name|String
name|token
init|=
name|client
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|validateJWTToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|jwt
operator|.
name|getClaim
argument_list|(
literal|"roles"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now get another token specifying the role
name|client
operator|.
name|query
argument_list|(
literal|"claim"
argument_list|,
literal|"roles"
argument_list|)
expr_stmt|;
name|token
operator|=
name|client
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|jwt
operator|=
name|validateJWTToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ordinary-user"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
literal|"roles"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTTokenViaPOST
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|WST_NS_05_12
operator|+
literal|"/Issue"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|JWT_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|,
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|RequestedSecurityTokenType
name|requestedSecurityToken
init|=
name|getRequestedSecurityToken
argument_list|(
name|securityResponse
argument_list|)
decl_stmt|;
name|String
name|token
init|=
operator|(
operator|(
name|Element
operator|)
name|requestedSecurityToken
operator|.
name|getAny
argument_list|()
operator|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|validateJWTToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateSAMLAndIssueJWT
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
comment|// 1. Get a token via GET
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// 2. Now validate it in the STS using POST
name|client
operator|=
name|webClient
argument_list|()
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"validate"
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|WST_NS_05_12
operator|+
literal|"/Validate"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|JWT_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"ValidateTarget"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|,
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getValidationStatus
argument_list|(
name|securityResponse
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the token
name|RequestedSecurityTokenType
name|requestedSecurityToken
init|=
name|getRequestedSecurityToken
argument_list|(
name|securityResponse
argument_list|)
decl_stmt|;
name|String
name|token
init|=
operator|(
operator|(
name|Element
operator|)
name|requestedSecurityToken
operator|.
name|getAny
argument_list|()
operator|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|validateJWTToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateJWTAndIssueSAML
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
decl_stmt|;
comment|// 1. Get a token via GET
name|String
name|token
init|=
name|client
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// 2. Now validate it in the STS using POST
name|client
operator|=
name|webClient
argument_list|()
operator|.
name|query
argument_list|(
literal|"action"
argument_list|,
literal|"validate"
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
comment|// Create RequestSecurityToken
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|WST_NS_05_12
operator|+
literal|"/Validate"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"ValidateTarget"
argument_list|,
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"TokenWrapper"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|RequestSecurityTokenResponseType
name|securityResponse
init|=
name|client
operator|.
name|post
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|,
name|RequestSecurityTokenResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getValidationStatus
argument_list|(
name|securityResponse
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the token
name|validateSAMLSecurityTokenResponse
argument_list|(
name|securityResponse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTTokenXMLWrapper
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
decl_stmt|;
name|Document
name|assertionDoc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
comment|// Discard XML wrapper
name|validateJWTToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueJWTTokenJSONWrapper
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
name|String
name|token
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readTree
argument_list|(
name|client
operator|.
name|get
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"token"
argument_list|)
operator|.
name|asText
argument_list|()
decl_stmt|;
name|validateJWTToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testDefaultSAMLFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
decl_stmt|;
comment|// It should be XML
name|Document
name|doc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testDefaultJWTFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"jwt"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
decl_stmt|;
comment|// It should be XML
name|Document
name|doc
init|=
name|client
operator|.
name|get
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testIssueSAMLTokenWithWrongAcceptType
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|webClient
argument_list|()
operator|.
name|path
argument_list|(
literal|"saml2.0"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an bad accept type"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|private
specifier|static
name|Element
name|validateSAMLSecurityTokenResponse
parameter_list|(
name|RequestSecurityTokenResponseType
name|securityResponse
parameter_list|,
name|boolean
name|saml2
parameter_list|)
throws|throws
name|Exception
block|{
name|RequestedSecurityTokenType
name|requestedSecurityToken
init|=
name|getRequestedSecurityToken
argument_list|(
name|securityResponse
argument_list|)
decl_stmt|;
comment|// Process the token
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
operator|(
name|Element
operator|)
name|requestedSecurityToken
operator|.
name|getAny
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
if|if
condition|(
name|saml2
condition|)
block|{
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
operator|&&
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|Element
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TOKEN_ELEMENT
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RequestedSecurityTokenType
name|getRequestedSecurityToken
parameter_list|(
name|RequestSecurityTokenResponseType
name|securityResponse
parameter_list|)
block|{
for|for
control|(
name|Object
name|obj
range|:
name|securityResponse
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"RequestedSecurityToken"
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|RequestedSecurityTokenType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
name|fail
argument_list|(
literal|"RequestedSecurityToken missing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_class

begin_function
specifier|private
specifier|static
name|SamlAssertionWrapper
name|validateSAMLToken
parameter_list|(
name|Document
name|assertionDoc
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|assertionDoc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|processToken
argument_list|(
name|assertionDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertion
operator|.
name|isSigned
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assertion
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|processToken
parameter_list|(
name|Element
name|assertionElement
parameter_list|)
throws|throws
name|Exception
block|{
name|RequestData
name|requestData
init|=
operator|new
name|RequestData
argument_list|()
decl_stmt|;
comment|//        requestData.setDisableBSPEnforcement(true);
name|requestData
operator|.
name|setCallbackHandler
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|sts
operator|.
name|common
operator|.
name|CommonCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|requestData
operator|.
name|setDecCrypto
argument_list|(
name|serviceCrypto
argument_list|)
expr_stmt|;
comment|//        requestData.setSigVerCrypto(serviceCrypto);
name|requestData
operator|.
name|setWsDocInfo
argument_list|(
operator|new
name|WSDocInfo
argument_list|(
name|assertionElement
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SAMLTokenProcessor
argument_list|()
operator|.
name|handleToken
argument_list|(
name|assertionElement
argument_list|,
name|requestData
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|JwtToken
name|validateJWTToken
parameter_list|(
name|String
name|token
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
comment|// Validate claims
name|assertEquals
argument_list|(
literal|"DoubleItSTSIssuer"
argument_list|,
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getIssuer
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getExpiryTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getIssuedAt
argument_list|()
argument_list|)
expr_stmt|;
name|CryptoType
name|alias
init|=
operator|new
name|CryptoType
argument_list|(
name|CryptoType
operator|.
name|TYPE
operator|.
name|ALIAS
argument_list|)
decl_stmt|;
name|alias
operator|.
name|setAlias
argument_list|(
literal|"mystskey"
argument_list|)
expr_stmt|;
name|X509Certificate
name|stsCertificate
init|=
name|serviceCrypto
operator|.
name|getX509Certificates
argument_list|(
name|alias
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|jwtConsumer
operator|.
name|verifySignatureWith
argument_list|(
name|stsCertificate
argument_list|,
name|SignatureAlgorithm
operator|.
name|RS256
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jwt
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|getValidationStatus
parameter_list|(
name|RequestSecurityTokenResponseType
name|securityResponse
parameter_list|)
block|{
for|for
control|(
name|Object
name|obj
range|:
name|securityResponse
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"Status"
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|WST_NS_05_12
operator|+
literal|"/status/valid"
operator|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|StatusType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getCode
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_function

begin_expr_stmt
name|fail
argument_list|(
literal|"Status missing"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
literal|false
return|;
end_return

begin_function
unit|}      private
name|WebClient
name|webClient
parameter_list|()
throws|throws
name|Exception
block|{
name|closeClient
argument_list|()
expr_stmt|;
name|webClient
operator|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"https://localhost:"
operator|+
name|STSPORT
operator|+
literal|"/SecurityTokenService/token"
argument_list|)
expr_stmt|;
name|webClient
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|setTlsClientParameters
argument_list|(
name|tlsClientParameters
argument_list|)
expr_stmt|;
return|return
name|webClient
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|TLSClientParameters
name|getTLSClientParameters
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TLSClientParameters
name|tlsCP
init|=
operator|new
name|TLSClientParameters
argument_list|()
decl_stmt|;
name|tlsCP
operator|.
name|setDisableCNCheck
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|KeyStore
name|keyStore
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|ClassLoaderUtils
operator|.
name|getResourceAsStream
argument_list|(
literal|"keys/clientstore.jks"
argument_list|,
name|STSRESTTest
operator|.
name|class
argument_list|)
init|)
block|{
name|keyStore
operator|=
name|CryptoUtils
operator|.
name|loadKeyStore
argument_list|(
name|is
argument_list|,
literal|"cspass"
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|keyStore
argument_list|,
literal|"ckpass"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|tlsCP
operator|.
name|setKeyManagers
argument_list|(
name|kmf
operator|.
name|getKeyManagers
argument_list|()
argument_list|)
expr_stmt|;
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|keyStore
argument_list|)
expr_stmt|;
name|tlsCP
operator|.
name|setTrustManagers
argument_list|(
name|tmf
operator|.
name|getTrustManagers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tlsCP
return|;
block|}
end_function

unit|}
end_unit

