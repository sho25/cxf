begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|ContentAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweDecryptionOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweDecryptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweJwtCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwe
operator|.
name|JweUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|SignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|StaticSTSProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|cache
operator|.
name|DefaultInMemoryTokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
operator|.
name|PasswordCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|KeyRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|TokenRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|service
operator|.
name|EncryptionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|jwt
operator|.
name|JWTTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Merlin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|CustomTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Some unit tests for creating JWTTokens.  */
end_comment

begin_class
specifier|public
class|class
name|JWTTokenProviderTest
extends|extends
name|org
operator|.
name|junit
operator|.
name|Assert
block|{
specifier|private
specifier|static
name|boolean
name|unrestrictedPoliciesInstalled
decl_stmt|;
specifier|private
specifier|static
name|TokenStore
name|tokenStore
init|=
operator|new
name|DefaultInMemoryTokenStore
argument_list|()
decl_stmt|;
static|static
block|{
name|unrestrictedPoliciesInstalled
operator|=
name|TestUtils
operator|.
name|checkUnrestrictedPoliciesInstalled
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateUnsignedJWT
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|jwtTokenProvider
init|=
operator|new
name|JWTTokenProvider
argument_list|()
decl_stmt|;
operator|(
operator|(
name|JWTTokenProvider
operator|)
name|jwtTokenProvider
operator|)
operator|.
name|setSignToken
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|jwtTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|JWTTokenProvider
operator|.
name|JWT_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|jwtTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|token
init|=
operator|(
name|String
operator|)
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// Validate the token
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"alice"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_JWT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getCreated
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_ISSUED_AT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getExpires
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_EXPIRY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateSignedJWT
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|jwtTokenProvider
init|=
operator|new
name|JWTTokenProvider
argument_list|()
decl_stmt|;
operator|(
operator|(
name|JWTTokenProvider
operator|)
name|jwtTokenProvider
operator|)
operator|.
name|setSignToken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|jwtTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|JWTTokenProvider
operator|.
name|JWT_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|jwtTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|token
init|=
operator|(
name|String
operator|)
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// Validate the token
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"alice"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_JWT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getCreated
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_ISSUED_AT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getExpires
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_EXPIRY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify Signature
name|Crypto
name|crypto
init|=
name|providerParameters
operator|.
name|getStsProperties
argument_list|()
operator|.
name|getSignatureCrypto
argument_list|()
decl_stmt|;
name|CryptoType
name|cryptoType
init|=
operator|new
name|CryptoType
argument_list|(
name|CryptoType
operator|.
name|TYPE
operator|.
name|ALIAS
argument_list|)
decl_stmt|;
name|cryptoType
operator|.
name|setAlias
argument_list|(
name|providerParameters
operator|.
name|getStsProperties
argument_list|()
operator|.
name|getSignatureUsername
argument_list|()
argument_list|)
expr_stmt|;
name|X509Certificate
index|[]
name|certs
init|=
name|crypto
operator|.
name|getX509Certificates
argument_list|(
name|cryptoType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|certs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jwtConsumer
operator|.
name|verifySignatureWith
argument_list|(
name|certs
index|[
literal|0
index|]
argument_list|,
name|SignatureAlgorithm
operator|.
name|RS256
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateSignedPSJWT
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
name|TokenProvider
name|jwtTokenProvider
init|=
operator|new
name|JWTTokenProvider
argument_list|()
decl_stmt|;
operator|(
operator|(
name|JWTTokenProvider
operator|)
name|jwtTokenProvider
operator|)
operator|.
name|setSignToken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|()
decl_stmt|;
name|SignatureProperties
name|sigProps
init|=
operator|new
name|SignatureProperties
argument_list|()
decl_stmt|;
name|sigProps
operator|.
name|setSignatureAlgorithm
argument_list|(
name|SignatureAlgorithm
operator|.
name|PS256
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|getStsProperties
argument_list|()
operator|.
name|setSignatureProperties
argument_list|(
name|sigProps
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jwtTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|JWTTokenProvider
operator|.
name|JWT_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|jwtTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|token
init|=
operator|(
name|String
operator|)
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// Validate the token
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"alice"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_JWT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getCreated
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_ISSUED_AT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getExpires
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_EXPIRY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify Signature
name|Crypto
name|crypto
init|=
name|providerParameters
operator|.
name|getStsProperties
argument_list|()
operator|.
name|getSignatureCrypto
argument_list|()
decl_stmt|;
name|CryptoType
name|cryptoType
init|=
operator|new
name|CryptoType
argument_list|(
name|CryptoType
operator|.
name|TYPE
operator|.
name|ALIAS
argument_list|)
decl_stmt|;
name|cryptoType
operator|.
name|setAlias
argument_list|(
name|providerParameters
operator|.
name|getStsProperties
argument_list|()
operator|.
name|getSignatureUsername
argument_list|()
argument_list|)
expr_stmt|;
name|X509Certificate
index|[]
name|certs
init|=
name|crypto
operator|.
name|getX509Certificates
argument_list|(
name|cryptoType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|certs
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jwtConsumer
operator|.
name|verifySignatureWith
argument_list|(
name|certs
index|[
literal|0
index|]
argument_list|,
name|SignatureAlgorithm
operator|.
name|RS256
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jwtConsumer
operator|.
name|verifySignatureWith
argument_list|(
name|certs
index|[
literal|0
index|]
argument_list|,
name|SignatureAlgorithm
operator|.
name|PS256
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Security
operator|.
name|removeProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCachedSignedJWT
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|jwtTokenProvider
init|=
operator|new
name|JWTTokenProvider
argument_list|()
decl_stmt|;
operator|(
operator|(
name|JWTTokenProvider
operator|)
name|jwtTokenProvider
operator|)
operator|.
name|setSignToken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|jwtTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|JWTTokenProvider
operator|.
name|JWT_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|jwtTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|token
init|=
operator|(
name|String
operator|)
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// Validate the token
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"alice"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_JWT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getCreated
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_ISSUED_AT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getExpires
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_EXPIRY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the token is stored correctly in the cache
name|String
name|signature
init|=
name|token
operator|.
name|substring
argument_list|(
name|token
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|SecurityToken
name|secToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Arrays
operator|.
name|hashCode
argument_list|(
name|signature
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|secToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateUnsignedEncryptedJWT
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|jwtTokenProvider
init|=
operator|new
name|JWTTokenProvider
argument_list|()
decl_stmt|;
operator|(
operator|(
name|JWTTokenProvider
operator|)
name|jwtTokenProvider
operator|)
operator|.
name|setSignToken
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|()
decl_stmt|;
name|providerParameters
operator|.
name|setEncryptToken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jwtTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|JWTTokenProvider
operator|.
name|JWT_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|jwtTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|token
init|=
operator|(
name|String
operator|)
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
operator|.
name|length
operator|==
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|unrestrictedPoliciesInstalled
condition|)
block|{
comment|// Validate the token
name|JweJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JweJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|Properties
name|decProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Crypto
name|decryptionCrypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getDecryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|KeyStore
name|keystore
init|=
operator|(
operator|(
name|Merlin
operator|)
name|decryptionCrypto
operator|)
operator|.
name|getKeyStore
argument_list|()
decl_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE
argument_list|,
name|keystore
argument_list|)
expr_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|,
literal|"myservicekey"
argument_list|)
expr_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_PSWD
argument_list|,
literal|"skpass"
argument_list|)
expr_stmt|;
name|JweDecryptionProvider
name|decProvider
init|=
name|JweUtils
operator|.
name|loadDecryptionProvider
argument_list|(
name|decProperties
argument_list|,
name|jwtConsumer
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|JweDecryptionOutput
name|decOutput
init|=
name|decProvider
operator|.
name|decrypt
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|String
name|decToken
init|=
name|decOutput
operator|.
name|getContentText
argument_list|()
decl_stmt|;
name|JwsJwtCompactConsumer
name|jwtJwsConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|decToken
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtJwsConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"alice"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_JWT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getCreated
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_ISSUED_AT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getExpires
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_EXPIRY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateUnsignedEncryptedCBCJWT
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
name|TokenProvider
name|jwtTokenProvider
init|=
operator|new
name|JWTTokenProvider
argument_list|()
decl_stmt|;
operator|(
operator|(
name|JWTTokenProvider
operator|)
name|jwtTokenProvider
operator|)
operator|.
name|setSignToken
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|()
decl_stmt|;
name|providerParameters
operator|.
name|setEncryptToken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|getEncryptionProperties
argument_list|()
operator|.
name|setEncryptionAlgorithm
argument_list|(
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jwtTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|JWTTokenProvider
operator|.
name|JWT_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|jwtTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|token
init|=
operator|(
name|String
operator|)
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
operator|.
name|length
operator|==
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|unrestrictedPoliciesInstalled
condition|)
block|{
comment|// Validate the token
name|JweJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JweJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|Properties
name|decProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Crypto
name|decryptionCrypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getDecryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|KeyStore
name|keystore
init|=
operator|(
operator|(
name|Merlin
operator|)
name|decryptionCrypto
operator|)
operator|.
name|getKeyStore
argument_list|()
decl_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE
argument_list|,
name|keystore
argument_list|)
expr_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|,
literal|"myservicekey"
argument_list|)
expr_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_PSWD
argument_list|,
literal|"skpass"
argument_list|)
expr_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_ENCRYPTION_CONTENT_ALGORITHM
argument_list|,
name|ContentAlgorithm
operator|.
name|A128CBC_HS256
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|JweDecryptionProvider
name|decProvider
init|=
name|JweUtils
operator|.
name|loadDecryptionProvider
argument_list|(
name|decProperties
argument_list|,
name|jwtConsumer
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|JweDecryptionOutput
name|decOutput
init|=
name|decProvider
operator|.
name|decrypt
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|String
name|decToken
init|=
name|decOutput
operator|.
name|getContentText
argument_list|()
decl_stmt|;
name|JwsJwtCompactConsumer
name|jwtJwsConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|decToken
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtJwsConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"alice"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_JWT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getCreated
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_ISSUED_AT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getExpires
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_EXPIRY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|Security
operator|.
name|removeProvider
argument_list|(
name|BouncyCastleProvider
operator|.
name|PROVIDER_NAME
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCreateSignedEncryptedJWT
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|jwtTokenProvider
init|=
operator|new
name|JWTTokenProvider
argument_list|()
decl_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|()
decl_stmt|;
name|providerParameters
operator|.
name|setEncryptToken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jwtTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|JWTTokenProvider
operator|.
name|JWT_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|jwtTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|token
init|=
operator|(
name|String
operator|)
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
operator|.
name|length
operator|==
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|unrestrictedPoliciesInstalled
condition|)
block|{
comment|// Validate the token
name|JweJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JweJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|Properties
name|decProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Crypto
name|decryptionCrypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getDecryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|KeyStore
name|keystore
init|=
operator|(
operator|(
name|Merlin
operator|)
name|decryptionCrypto
operator|)
operator|.
name|getKeyStore
argument_list|()
decl_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE
argument_list|,
name|keystore
argument_list|)
expr_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|,
literal|"myservicekey"
argument_list|)
expr_stmt|;
name|decProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_PSWD
argument_list|,
literal|"skpass"
argument_list|)
expr_stmt|;
name|JweDecryptionProvider
name|decProvider
init|=
name|JweUtils
operator|.
name|loadDecryptionProvider
argument_list|(
name|decProperties
argument_list|,
name|jwtConsumer
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|JweDecryptionOutput
name|decOutput
init|=
name|decProvider
operator|.
name|decrypt
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|String
name|decToken
init|=
name|decOutput
operator|.
name|getContentText
argument_list|()
decl_stmt|;
name|JwsJwtCompactConsumer
name|jwtJwsConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|decToken
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtJwsConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"alice"
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_JWT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getCreated
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_ISSUED_AT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|providerResponse
operator|.
name|getExpires
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|,
name|jwt
operator|.
name|getClaim
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_EXPIRY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|TokenProviderParameters
name|createProviderParameters
parameter_list|()
throws|throws
name|WSSecurityException
block|{
name|TokenProviderParameters
name|parameters
init|=
operator|new
name|TokenProviderParameters
argument_list|()
decl_stmt|;
name|TokenRequirements
name|tokenRequirements
init|=
operator|new
name|TokenRequirements
argument_list|()
decl_stmt|;
name|tokenRequirements
operator|.
name|setTokenType
argument_list|(
name|JWTTokenProvider
operator|.
name|JWT_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setTokenRequirements
argument_list|(
name|tokenRequirements
argument_list|)
expr_stmt|;
name|KeyRequirements
name|keyRequirements
init|=
operator|new
name|KeyRequirements
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|setKeyRequirements
argument_list|(
name|keyRequirements
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setTokenStore
argument_list|(
name|tokenStore
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock up message context
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|WrappedMessageContext
name|msgCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|setMessageContext
argument_list|(
name|msgCtx
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setAppliesToAddress
argument_list|(
literal|"http://dummy-service.com/dummy"
argument_list|)
expr_stmt|;
comment|// Add STSProperties object
name|StaticSTSProperties
name|stsProperties
init|=
operator|new
name|StaticSTSProperties
argument_list|()
decl_stmt|;
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getEncryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|stsProperties
operator|.
name|setSignatureCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureUsername
argument_list|(
literal|"mystskey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setCallbackHandler
argument_list|(
operator|new
name|PasswordCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIssuer
argument_list|(
literal|"STS"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setEncryptionProperties
argument_list|(
operator|new
name|EncryptionProperties
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setEncryptionCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setEncryptionUsername
argument_list|(
literal|"myservicekey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setCallbackHandler
argument_list|(
operator|new
name|PasswordCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parameters
return|;
block|}
specifier|private
name|Properties
name|getEncryptionProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.provider"
argument_list|,
literal|"org.apache.wss4j.common.crypto.Merlin"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.merlin.keystore.password"
argument_list|,
literal|"stsspass"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.merlin.keystore.file"
argument_list|,
literal|"keys/stsstore.jks"
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
specifier|private
name|Properties
name|getDecryptionProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.provider"
argument_list|,
literal|"org.apache.wss4j.common.crypto.Merlin"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.merlin.keystore.password"
argument_list|,
literal|"sspass"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.merlin.keystore.file"
argument_list|,
literal|"keys/servicestore.jks"
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
block|}
end_class

end_unit

