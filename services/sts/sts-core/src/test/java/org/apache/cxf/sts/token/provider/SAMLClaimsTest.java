begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WebServiceContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|StaticSTSProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsAttributeStatementProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|StaticClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|StaticEndpointClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
operator|.
name|CustomAttributeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
operator|.
name|CustomClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
operator|.
name|PasswordCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|KeyRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|TokenRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|service
operator|.
name|EncryptionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|CustomTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|util
operator|.
name|DOM2Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|XMLObject
import|;
end_import

begin_comment
comment|/**  * A unit test for creating a SAML Tokens with various Attributes populated by a ClaimsHandler.  */
end_comment

begin_class
specifier|public
class|class
name|SAMLClaimsTest
extends|extends
name|org
operator|.
name|junit
operator|.
name|Assert
block|{
specifier|public
specifier|static
specifier|final
name|URI
name|CLAIM_STATIC_COMPANY
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://apache.org/claims/test/company"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|URI
name|CLAIM_APPLICATION
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://apache.org/claims/test/applicationId"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLAIM_STATIC_COMPANY_VALUE
init|=
literal|"myc@mpany"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLAIM_APPLICATION_VALUE
init|=
literal|"my@pplic@tion"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_APPLIES_TO
init|=
literal|"http://dummy-service.com/dummy"
decl_stmt|;
comment|/**      * Test the creation of a SAML2 Assertion with various Attributes set by a ClaimsHandler.      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2Claims
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|ClaimsHandler
name|claimsHandler
init|=
operator|new
name|CustomClaimsHandler
argument_list|()
decl_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|claimsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
name|ClaimCollection
name|claims
init|=
name|createClaims
argument_list|()
decl_stmt|;
name|providerParameters
operator|.
name|setRequestedPrimaryClaims
argument_list|(
name|claims
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<
name|AttributeStatementProvider
argument_list|>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|CustomAttributeProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SAMLTokenProvider
operator|)
name|samlTokenProvider
operator|)
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|samlTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Element
name|token
init|=
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the creation of a SAML2 Assertion with various Attributes set by a ClaimsHandler.      * We have both a primary claim (sent in wst:RequestSecurityToken) and a secondary claim      * (send in wst:RequestSecurityToken/wst:SecondaryParameters).      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2MultipleClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|ClaimsHandler
name|claimsHandler
init|=
operator|new
name|CustomClaimsHandler
argument_list|()
decl_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|claimsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
name|ClaimCollection
name|primaryClaims
init|=
name|createClaims
argument_list|()
decl_stmt|;
name|providerParameters
operator|.
name|setRequestedPrimaryClaims
argument_list|(
name|primaryClaims
argument_list|)
expr_stmt|;
name|ClaimCollection
name|secondaryClaims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|STREETADDRESS
argument_list|)
expr_stmt|;
name|secondaryClaims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setRequestedSecondaryClaims
argument_list|(
name|secondaryClaims
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<
name|AttributeStatementProvider
argument_list|>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|CustomAttributeProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SAMLTokenProvider
operator|)
name|samlTokenProvider
operator|)
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|samlTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Element
name|token
init|=
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|STREETADDRESS
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the creation of a SAML2 Assertion with various Attributes set by a ClaimsHandler.      * We have both a primary claim (sent in wst:RequestSecurityToken) and a secondary claim      * (send in wst:RequestSecurityToken/wst:SecondaryParameters), and both have the       * same dialect in this test.      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2MultipleClaimsSameDialect
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|ClaimsHandler
name|claimsHandler
init|=
operator|new
name|CustomClaimsHandler
argument_list|()
decl_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|claimsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
name|ClaimCollection
name|primaryClaims
init|=
name|createClaims
argument_list|()
decl_stmt|;
name|primaryClaims
operator|.
name|setDialect
argument_list|(
name|ClaimTypes
operator|.
name|URI_BASE
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setRequestedPrimaryClaims
argument_list|(
name|primaryClaims
argument_list|)
expr_stmt|;
name|ClaimCollection
name|secondaryClaims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|STREETADDRESS
argument_list|)
expr_stmt|;
name|secondaryClaims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|secondaryClaims
operator|.
name|setDialect
argument_list|(
name|ClaimTypes
operator|.
name|URI_BASE
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setRequestedSecondaryClaims
argument_list|(
name|secondaryClaims
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<
name|AttributeStatementProvider
argument_list|>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|CustomAttributeProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SAMLTokenProvider
operator|)
name|samlTokenProvider
operator|)
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|samlTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Element
name|token
init|=
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|STREETADDRESS
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the creation of a SAML2 Assertion with StaticClaimsHandler      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2StaticClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|StaticClaimsHandler
name|claimsHandler
init|=
operator|new
name|StaticClaimsHandler
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|staticClaimsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|staticClaimsMap
operator|.
name|put
argument_list|(
name|CLAIM_STATIC_COMPANY
operator|.
name|toString
argument_list|()
argument_list|,
name|CLAIM_STATIC_COMPANY_VALUE
argument_list|)
expr_stmt|;
name|claimsHandler
operator|.
name|setGlobalClaims
argument_list|(
name|staticClaimsMap
argument_list|)
expr_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|ClaimsHandler
operator|)
name|claimsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
name|ClaimCollection
name|claims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|CLAIM_STATIC_COMPANY
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setRequestedPrimaryClaims
argument_list|(
name|claims
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<
name|AttributeStatementProvider
argument_list|>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|ClaimsAttributeStatementProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SAMLTokenProvider
operator|)
name|samlTokenProvider
operator|)
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|samlTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Element
name|token
init|=
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Attribute
argument_list|>
name|attributes
init|=
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getAttributeStatements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|attributes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attributes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|CLAIM_STATIC_COMPANY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|XMLObject
name|valueObj
init|=
name|attributes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttributeValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|valueObj
operator|.
name|getDOM
argument_list|()
operator|.
name|getTextContent
argument_list|()
argument_list|,
name|CLAIM_STATIC_COMPANY_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the creation of a SAML2 Assertion with StaticEndpointClaimsHandler      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2StaticEndpointClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|StaticEndpointClaimsHandler
name|claimsHandler
init|=
operator|new
name|StaticEndpointClaimsHandler
argument_list|()
decl_stmt|;
comment|// Create claims map for specific application
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|endpointClaimsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|endpointClaimsMap
operator|.
name|put
argument_list|(
name|CLAIM_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|,
name|CLAIM_APPLICATION_VALUE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|staticClaims
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|staticClaims
operator|.
name|put
argument_list|(
name|APPLICATION_APPLIES_TO
argument_list|,
name|endpointClaimsMap
argument_list|)
expr_stmt|;
name|claimsHandler
operator|.
name|setEndpointClaims
argument_list|(
name|staticClaims
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|supportedClaims
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|supportedClaims
operator|.
name|add
argument_list|(
name|CLAIM_APPLICATION
argument_list|)
expr_stmt|;
name|claimsHandler
operator|.
name|setSupportedClaims
argument_list|(
name|supportedClaims
argument_list|)
expr_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|ClaimsHandler
operator|)
name|claimsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
name|ClaimCollection
name|claims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|CLAIM_APPLICATION
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setRequestedPrimaryClaims
argument_list|(
name|claims
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<
name|AttributeStatementProvider
argument_list|>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|ClaimsAttributeStatementProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SAMLTokenProvider
operator|)
name|samlTokenProvider
operator|)
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|samlTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Element
name|token
init|=
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Attribute
argument_list|>
name|attributes
init|=
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getAttributeStatements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|attributes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attributes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|CLAIM_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|XMLObject
name|valueObj
init|=
name|attributes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttributeValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|valueObj
operator|.
name|getDOM
argument_list|()
operator|.
name|getTextContent
argument_list|()
argument_list|,
name|CLAIM_APPLICATION_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the creation of a SAML2 Assertion with StaticEndpointClaimsHandler      * but unknown AppliesTo value      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2StaticEndpointClaimsUnknownAppliesTo
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|,
name|APPLICATION_APPLIES_TO
operator|+
literal|"UNKNOWN"
argument_list|)
decl_stmt|;
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|StaticEndpointClaimsHandler
name|claimsHandler
init|=
operator|new
name|StaticEndpointClaimsHandler
argument_list|()
decl_stmt|;
comment|// Create claims map for specific application
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|endpointClaimsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|endpointClaimsMap
operator|.
name|put
argument_list|(
name|CLAIM_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|,
name|CLAIM_APPLICATION_VALUE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|staticClaims
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|staticClaims
operator|.
name|put
argument_list|(
name|APPLICATION_APPLIES_TO
argument_list|,
name|endpointClaimsMap
argument_list|)
expr_stmt|;
name|claimsHandler
operator|.
name|setEndpointClaims
argument_list|(
name|staticClaims
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|supportedClaims
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|supportedClaims
operator|.
name|add
argument_list|(
name|CLAIM_APPLICATION
argument_list|)
expr_stmt|;
name|claimsHandler
operator|.
name|setSupportedClaims
argument_list|(
name|supportedClaims
argument_list|)
expr_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|ClaimsHandler
operator|)
name|claimsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
name|ClaimCollection
name|claims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|CLAIM_APPLICATION
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setRequestedPrimaryClaims
argument_list|(
name|claims
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<
name|AttributeStatementProvider
argument_list|>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|ClaimsAttributeStatementProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SAMLTokenProvider
operator|)
name|samlTokenProvider
operator|)
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|samlTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected as the claim for the application can't be found due to unknown AppliesTo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected on the wrong attribute provider
block|}
block|}
comment|/**      * Test the creation of a SAML2 Assertion with various Attributes set by a ClaimsHandler.      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2ClaimsInteger
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|ClaimsHandler
name|claimsHandler
init|=
operator|new
name|CustomClaimsHandler
argument_list|()
decl_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|claimsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
name|ClaimCollection
name|claims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|MOBILEPHONE
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setRequestedPrimaryClaims
argument_list|(
name|claims
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<
name|AttributeStatementProvider
argument_list|>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|CustomAttributeProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SAMLTokenProvider
operator|)
name|samlTokenProvider
operator|)
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlTokenProvider
operator|.
name|canHandleToken
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|samlTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Element
name|token
init|=
name|providerResponse
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|providerResponse
operator|.
name|getTokenId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|MOBILEPHONE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TokenProviderParameters
name|createProviderParameters
parameter_list|(
name|String
name|tokenType
parameter_list|,
name|String
name|keyType
parameter_list|,
name|String
name|appliesTo
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|TokenProviderParameters
name|parameters
init|=
operator|new
name|TokenProviderParameters
argument_list|()
decl_stmt|;
name|TokenRequirements
name|tokenRequirements
init|=
operator|new
name|TokenRequirements
argument_list|()
decl_stmt|;
name|tokenRequirements
operator|.
name|setTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setTokenRequirements
argument_list|(
name|tokenRequirements
argument_list|)
expr_stmt|;
name|KeyRequirements
name|keyRequirements
init|=
operator|new
name|KeyRequirements
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setKeyRequirements
argument_list|(
name|keyRequirements
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock up message context
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|WrappedMessageContext
name|msgCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|WebServiceContextImpl
name|webServiceContext
init|=
operator|new
name|WebServiceContextImpl
argument_list|(
name|msgCtx
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|setWebServiceContext
argument_list|(
name|webServiceContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|appliesTo
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|setAppliesToAddress
argument_list|(
name|appliesTo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parameters
operator|.
name|setAppliesToAddress
argument_list|(
name|APPLICATION_APPLIES_TO
argument_list|)
expr_stmt|;
block|}
comment|// Add STSProperties object
name|StaticSTSProperties
name|stsProperties
init|=
operator|new
name|StaticSTSProperties
argument_list|()
decl_stmt|;
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getEncryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|stsProperties
operator|.
name|setEncryptionCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setEncryptionUsername
argument_list|(
literal|"myservicekey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureUsername
argument_list|(
literal|"mystskey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setCallbackHandler
argument_list|(
operator|new
name|PasswordCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIssuer
argument_list|(
literal|"STS"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setEncryptionProperties
argument_list|(
operator|new
name|EncryptionProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parameters
return|;
block|}
specifier|private
name|Properties
name|getEncryptionProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.provider"
argument_list|,
literal|"org.apache.wss4j.common.crypto.Merlin"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.merlin.keystore.password"
argument_list|,
literal|"stsspass"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.merlin.keystore.file"
argument_list|,
literal|"stsstore.jks"
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
comment|/**      * Create a set of parsed Claims      */
specifier|private
name|ClaimCollection
name|createClaims
parameter_list|()
block|{
name|ClaimCollection
name|claims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|claim
operator|=
operator|new
name|Claim
argument_list|()
expr_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|claim
operator|=
operator|new
name|Claim
argument_list|()
expr_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
return|return
name|claims
return|;
block|}
block|}
end_class

end_unit

