begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaimCollection
import|;
end_import

begin_comment
comment|/**  * A custom ClaimsHandler implementation for use in the tests.  */
end_comment

begin_class
specifier|public
class|class
name|CustomUserClaimsHandler
implements|implements
name|ClaimsHandler
block|{
specifier|private
specifier|static
name|List
argument_list|<
name|URI
argument_list|>
name|knownURIs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|knownURIs
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|URI
argument_list|>
name|getSupportedClaimTypes
parameter_list|()
block|{
return|return
name|knownURIs
return|;
block|}
specifier|public
name|ProcessedClaimCollection
name|retrieveClaimValues
parameter_list|(
name|ClaimCollection
name|claims
parameter_list|,
name|ClaimsParameters
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|claims
operator|!=
literal|null
operator|&&
operator|!
name|claims
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProcessedClaimCollection
name|claimCollection
init|=
operator|new
name|ProcessedClaimCollection
argument_list|()
decl_stmt|;
for|for
control|(
name|Claim
name|requestClaim
range|:
name|claims
control|)
block|{
name|ProcessedClaim
name|claim
init|=
operator|new
name|ProcessedClaim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|requestClaim
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ClaimTypes
operator|.
name|FIRSTNAME
operator|.
name|equals
argument_list|(
name|requestClaim
operator|.
name|getClaimType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|parameters
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"alice"
argument_list|)
condition|)
block|{
name|claim
operator|.
name|addValue
argument_list|(
literal|"aliceClaim"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameters
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"bob"
argument_list|)
condition|)
block|{
name|claim
operator|.
name|addValue
argument_list|(
literal|"bobClaim"
argument_list|)
expr_stmt|;
block|}
block|}
name|claimCollection
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
block|}
return|return
name|claimCollection
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

