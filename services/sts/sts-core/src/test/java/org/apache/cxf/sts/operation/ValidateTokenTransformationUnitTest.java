begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|QNameConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSPropertiesMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|StaticSTSProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsAttributeStatementProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
operator|.
name|CustomAttributeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
operator|.
name|CustomClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
operator|.
name|PasswordCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|KeyRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|TokenRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|service
operator|.
name|EncryptionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|service
operator|.
name|ServiceMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|service
operator|.
name|StaticService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|AttributeStatementProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|SAMLTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|TokenProviderParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|TokenProviderResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|realm
operator|.
name|RealmProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|realm
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|IssuerSAMLRealmCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|SAMLTokenValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|TokenValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|UsernameTokenValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|ClaimsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestSecurityTokenResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestSecurityTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestedSecurityTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|ValidateTargetType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|AttributedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|PasswordString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|UsernameTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|CustomTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|util
operator|.
name|DOM2Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_comment
comment|/**  * In this test, a token (UsernameToken or SAMLToken) is validated and transformed into a SAML Assertion.  */
end_comment

begin_class
specifier|public
class|class
name|ValidateTokenTransformationUnitTest
extends|extends
name|org
operator|.
name|junit
operator|.
name|Assert
block|{
specifier|public
specifier|static
specifier|final
name|QName
name|REQUESTED_SECURITY_TOKEN
init|=
name|QNameConstants
operator|.
name|WS_TRUST_FACTORY
operator|.
name|createRequestedSecurityToken
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|QNAME_WST_STATUS
init|=
name|QNameConstants
operator|.
name|WS_TRUST_FACTORY
operator|.
name|createStatus
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/**      * Test to successfully validate a UsernameToken and transform it into a SAML Assertion.      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testUsernameTokenTransformation
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenValidateOperation
name|validateOperation
init|=
operator|new
name|TokenValidateOperation
argument_list|()
decl_stmt|;
comment|// Add Token Validator
name|List
argument_list|<
name|TokenValidator
argument_list|>
name|validatorList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|validatorList
operator|.
name|add
argument_list|(
operator|new
name|UsernameTokenValidator
argument_list|()
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenValidators
argument_list|(
name|validatorList
argument_list|)
expr_stmt|;
comment|// Add Token Provider
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|providerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|providerList
operator|.
name|add
argument_list|(
operator|new
name|SAMLTokenProvider
argument_list|()
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenProviders
argument_list|(
name|providerList
argument_list|)
expr_stmt|;
comment|// Add STSProperties object
name|STSPropertiesMBean
name|stsProperties
init|=
operator|new
name|StaticSTSProperties
argument_list|()
decl_stmt|;
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getEncryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|stsProperties
operator|.
name|setEncryptionCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setEncryptionUsername
argument_list|(
literal|"myservicekey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureUsername
argument_list|(
literal|"mystskey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setCallbackHandler
argument_list|(
operator|new
name|PasswordCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIssuer
argument_list|(
literal|"STS"
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
comment|// Mock up a request
name|RequestSecurityTokenType
name|request
init|=
operator|new
name|RequestSecurityTokenType
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|TOKEN_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
comment|// Create a UsernameToken
name|JAXBElement
argument_list|<
name|UsernameTokenType
argument_list|>
name|usernameTokenType
init|=
name|createUsernameToken
argument_list|(
literal|"alice"
argument_list|,
literal|"clarinet"
argument_list|)
decl_stmt|;
name|ValidateTargetType
name|validateTarget
init|=
operator|new
name|ValidateTargetType
argument_list|()
decl_stmt|;
name|validateTarget
operator|.
name|setAny
argument_list|(
name|usernameTokenType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
name|validateTargetType
init|=
operator|new
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|VALIDATE_TARGET
argument_list|,
name|ValidateTargetType
operator|.
name|class
argument_list|,
name|validateTarget
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|validateTargetType
argument_list|)
expr_stmt|;
comment|// Mock up message context
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|WrappedMessageContext
name|msgCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"alice"
argument_list|)
decl_stmt|;
name|msgCtx
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|createSecurityContext
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate a token
name|RequestSecurityTokenResponseType
name|response
init|=
name|validateOperation
operator|.
name|validate
argument_list|(
name|request
argument_list|,
name|principal
argument_list|,
name|msgCtx
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|validateResponse
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test the generated token.
name|Element
name|assertion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|tokenObject
range|:
name|response
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|tokenObject
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|&&
name|REQUESTED_SECURITY_TOKEN
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|RequestedSecurityTokenType
name|rstType
init|=
call|(
name|RequestedSecurityTokenType
call|)
argument_list|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertion
operator|=
operator|(
name|Element
operator|)
name|rstType
operator|.
name|getAny
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to successfully validate a UsernameToken (which was issued in realm "A") and       * transform it into a SAML Assertion in Realm "B".      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testUsernameTokenTransformationRealm
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenValidateOperation
name|validateOperation
init|=
operator|new
name|TokenValidateOperation
argument_list|()
decl_stmt|;
comment|// Add Token Validator
name|List
argument_list|<
name|TokenValidator
argument_list|>
name|validatorList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|UsernameTokenValidator
name|validator
init|=
operator|new
name|UsernameTokenValidator
argument_list|()
decl_stmt|;
name|validator
operator|.
name|setUsernameTokenRealmCodec
argument_list|(
operator|new
name|CustomUsernameTokenRealmCodec
argument_list|()
argument_list|)
expr_stmt|;
name|validatorList
operator|.
name|add
argument_list|(
name|validator
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenValidators
argument_list|(
name|validatorList
argument_list|)
expr_stmt|;
comment|// Add Token Provider
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|providerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SAMLTokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|providerList
operator|.
name|add
argument_list|(
name|samlTokenProvider
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenProviders
argument_list|(
name|providerList
argument_list|)
expr_stmt|;
comment|// Add STSProperties object
name|STSPropertiesMBean
name|stsProperties
init|=
operator|new
name|StaticSTSProperties
argument_list|()
decl_stmt|;
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getEncryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|stsProperties
operator|.
name|setEncryptionCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setEncryptionUsername
argument_list|(
literal|"myservicekey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureUsername
argument_list|(
literal|"mystskey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setCallbackHandler
argument_list|(
operator|new
name|PasswordCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIssuer
argument_list|(
literal|"STS"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setRealmParser
argument_list|(
operator|new
name|CustomRealmParser
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIdentityMapper
argument_list|(
operator|new
name|CustomIdentityMapper
argument_list|()
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
comment|// Mock up a request
name|RequestSecurityTokenType
name|request
init|=
operator|new
name|RequestSecurityTokenType
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|TOKEN_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
comment|// Create a UsernameToken
name|JAXBElement
argument_list|<
name|UsernameTokenType
argument_list|>
name|usernameTokenType
init|=
name|createUsernameToken
argument_list|(
literal|"alice"
argument_list|,
literal|"clarinet"
argument_list|)
decl_stmt|;
name|ValidateTargetType
name|validateTarget
init|=
operator|new
name|ValidateTargetType
argument_list|()
decl_stmt|;
name|validateTarget
operator|.
name|setAny
argument_list|(
name|usernameTokenType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
name|validateTargetType
init|=
operator|new
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|VALIDATE_TARGET
argument_list|,
name|ValidateTargetType
operator|.
name|class
argument_list|,
name|validateTarget
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|validateTargetType
argument_list|)
expr_stmt|;
comment|// Mock up message context
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|WrappedMessageContext
name|msgCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"alice"
argument_list|)
decl_stmt|;
name|msgCtx
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|createSecurityContext
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|msgCtx
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
literal|"https"
argument_list|)
expr_stmt|;
comment|// Validate a token - this will fail as the tokenProvider doesn't understand how to handle
comment|// realm "B"
try|try
block|{
name|validateOperation
operator|.
name|validate
argument_list|(
name|request
argument_list|,
name|principal
argument_list|,
name|msgCtx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|STSException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|samlTokenProvider
operator|.
name|setRealmMap
argument_list|(
name|createSamlRealms
argument_list|()
argument_list|)
expr_stmt|;
name|RequestSecurityTokenResponseType
name|response
init|=
name|validateOperation
operator|.
name|validate
argument_list|(
name|request
argument_list|,
name|principal
argument_list|,
name|msgCtx
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|validateResponse
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test the generated token.
name|Element
name|assertion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|tokenObject
range|:
name|response
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|tokenObject
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|&&
name|REQUESTED_SECURITY_TOKEN
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|RequestedSecurityTokenType
name|rstType
init|=
call|(
name|RequestedSecurityTokenType
call|)
argument_list|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertion
operator|=
operator|(
name|Element
operator|)
name|rstType
operator|.
name|getAny
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"ALICE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to successfully validate a UsernameToken and transform it into a SAML Assertion.      * Required claims are a child of RST element      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testUsernameTokenTransformationClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|runUsernameTokenTransformationClaims
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to successfully validate a UsernameToken and transform it into a SAML Assertion.      * Required claims are a child of SecondaryParameters element      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testUsernameTokenTransformationClaimsSecondaryParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|runUsernameTokenTransformationClaims
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to successfully validate a SAML 2 Token issued by realm "A" and      * transform it into a SAML 2 token (realm "B")      * The relationship type between realm A and B is: FederateIdentity      * IdentityMapper is configured globally in STSPropertiesMBean      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateSaml2TokenOnBehalfOfSaml2DifferentRealmFederateIdentityGlobalConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|runValidateSaml2TokenOnBehalfOfSaml2DifferentRealmFederateIdentity
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to successfully validate a SAML 2 Token issued by realm "A" and      * transform it into a SAML 2 token (realm "B")      * The relationship type between realm A and B is: FederateIdentity      * IdentityMapper is configured in the Relationship      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
comment|//[TODO] should work after Relationship support in validateoperation
specifier|public
name|void
name|testValidateSaml2TokenOnBehalfOfSaml2DifferentRealmFederateIdentityRelationshipConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|runValidateSaml2TokenOnBehalfOfSaml2DifferentRealmFederateIdentity
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to successfully validate a SAML 2 Token issued by realm "A" and      * transform it into a SAML 2 token (realm "B")      * The relationship type between realm A and B is: FederateClaims      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateSaml2TokenOnBehalfOfSaml2DifferentRealmFederateClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenValidateOperation
name|validateOperation
init|=
operator|new
name|TokenValidateOperation
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RealmProperties
argument_list|>
name|realms
init|=
name|createSamlRealms
argument_list|()
decl_stmt|;
comment|// Add Token Provider
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|providerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SAMLTokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|samlTokenProvider
operator|.
name|setRealmMap
argument_list|(
name|realms
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|ClaimsAttributeStatementProvider
argument_list|()
argument_list|)
expr_stmt|;
name|samlTokenProvider
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|providerList
operator|.
name|add
argument_list|(
name|samlTokenProvider
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenProviders
argument_list|(
name|providerList
argument_list|)
expr_stmt|;
comment|// Add Token Validator
name|List
argument_list|<
name|TokenValidator
argument_list|>
name|validatorList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SAMLTokenValidator
name|samlTokenValidator
init|=
operator|new
name|SAMLTokenValidator
argument_list|()
decl_stmt|;
name|samlTokenValidator
operator|.
name|setSamlRealmCodec
argument_list|(
operator|new
name|IssuerSAMLRealmCodec
argument_list|()
argument_list|)
expr_stmt|;
name|validatorList
operator|.
name|add
argument_list|(
name|samlTokenValidator
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenValidators
argument_list|(
name|validatorList
argument_list|)
expr_stmt|;
comment|// Add Service
name|ServiceMBean
name|service
init|=
operator|new
name|StaticService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setEndpoints
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"http://dummy-service.com/dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setServices
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add Relationship list
name|List
argument_list|<
name|Relationship
argument_list|>
name|relationshipList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Relationship
name|rs
init|=
name|createRelationship
argument_list|()
decl_stmt|;
name|relationshipList
operator|.
name|add
argument_list|(
name|rs
argument_list|)
expr_stmt|;
comment|// Add STSProperties object
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getEncryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|STSPropertiesMBean
name|stsProperties
init|=
name|createSTSPropertiesMBean
argument_list|(
name|crypto
argument_list|)
decl_stmt|;
name|stsProperties
operator|.
name|setRealmParser
argument_list|(
operator|new
name|CustomRealmParser
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIdentityMapper
argument_list|(
operator|new
name|CustomIdentityMapper
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setRelationships
argument_list|(
name|relationshipList
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
comment|// Set the ClaimsManager
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|ClaimsHandler
operator|)
operator|new
name|CustomClaimsHandler
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
comment|// Mock up a request
name|RequestSecurityTokenType
name|request
init|=
operator|new
name|RequestSecurityTokenType
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|TOKEN_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
comment|// Add a ClaimsType
name|ClaimsType
name|claimsType
init|=
operator|new
name|ClaimsType
argument_list|()
decl_stmt|;
name|claimsType
operator|.
name|setDialect
argument_list|(
name|STSConstants
operator|.
name|IDT_NS_05_05
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|claimType
init|=
name|createClaimsType
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|claimsType
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|claimType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|ClaimsType
argument_list|>
name|claimsTypeJaxb
init|=
operator|new
name|JAXBElement
argument_list|<
name|ClaimsType
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|CLAIMS
argument_list|,
name|ClaimsType
operator|.
name|class
argument_list|,
name|claimsType
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|claimsTypeJaxb
argument_list|)
expr_stmt|;
comment|//request.getAny().add(createAppliesToElement("http://dummy-service.com/dummy"));
comment|// create a SAML Token via the SAMLTokenProvider which contains claims
name|CallbackHandler
name|callbackHandler
init|=
operator|new
name|PasswordCallbackHandler
argument_list|()
decl_stmt|;
name|Element
name|samlToken
init|=
name|createSAMLAssertion
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|crypto
argument_list|,
literal|"mystskey"
argument_list|,
name|callbackHandler
argument_list|,
name|realms
argument_list|)
decl_stmt|;
name|Document
name|docToken
init|=
name|samlToken
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|samlToken
operator|=
operator|(
name|Element
operator|)
name|docToken
operator|.
name|appendChild
argument_list|(
name|samlToken
argument_list|)
expr_stmt|;
name|String
name|samlString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|samlToken
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|samlString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlString
operator|.
name|contains
argument_list|(
literal|"doe"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add SAML token as ValidateTarget element
name|ValidateTargetType
name|validateTarget
init|=
operator|new
name|ValidateTargetType
argument_list|()
decl_stmt|;
name|validateTarget
operator|.
name|setAny
argument_list|(
name|samlToken
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
name|validateTargetType
init|=
operator|new
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|VALIDATE_TARGET
argument_list|,
name|ValidateTargetType
operator|.
name|class
argument_list|,
name|validateTarget
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|validateTargetType
argument_list|)
expr_stmt|;
comment|// Mock up message context
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|WrappedMessageContext
name|msgCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|msgCtx
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
literal|"https"
argument_list|)
expr_stmt|;
comment|// Validate a token
name|RequestSecurityTokenResponseType
name|response
init|=
name|validateOperation
operator|.
name|validate
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
name|msgCtx
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|validateResponse
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test the generated token.
name|Element
name|assertion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|tokenObject
range|:
name|response
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|tokenObject
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|&&
name|REQUESTED_SECURITY_TOKEN
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|RequestedSecurityTokenType
name|rstType
init|=
call|(
name|RequestedSecurityTokenType
call|)
argument_list|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertion
operator|=
operator|(
name|Element
operator|)
name|rstType
operator|.
name|getAny
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
comment|//subject unchanged
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"DOE"
argument_list|)
argument_list|)
expr_stmt|;
comment|//claim changed (to uppercase)
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to successfully validate a UsernameToken and transform it into a SAML Assertion with claims.      */
specifier|private
name|void
name|runUsernameTokenTransformationClaims
parameter_list|(
name|boolean
name|useSecondaryParameters
parameter_list|)
throws|throws
name|Exception
block|{
name|TokenValidateOperation
name|validateOperation
init|=
operator|new
name|TokenValidateOperation
argument_list|()
decl_stmt|;
comment|// Add Token Validator
name|List
argument_list|<
name|TokenValidator
argument_list|>
name|validatorList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|validatorList
operator|.
name|add
argument_list|(
operator|new
name|UsernameTokenValidator
argument_list|()
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenValidators
argument_list|(
name|validatorList
argument_list|)
expr_stmt|;
comment|// Add Token Provider
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|providerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|CustomAttributeProvider
argument_list|()
argument_list|)
expr_stmt|;
name|SAMLTokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|samlTokenProvider
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|providerList
operator|.
name|add
argument_list|(
name|samlTokenProvider
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenProviders
argument_list|(
name|providerList
argument_list|)
expr_stmt|;
comment|// Add STSProperties object
name|STSPropertiesMBean
name|stsProperties
init|=
operator|new
name|StaticSTSProperties
argument_list|()
decl_stmt|;
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getEncryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|stsProperties
operator|.
name|setEncryptionCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setEncryptionUsername
argument_list|(
literal|"myservicekey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureUsername
argument_list|(
literal|"mystskey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setCallbackHandler
argument_list|(
operator|new
name|PasswordCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIssuer
argument_list|(
literal|"STS"
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
comment|// Set the ClaimsManager
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|ClaimsHandler
name|claimsHandler
init|=
operator|new
name|CustomClaimsHandler
argument_list|()
decl_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|claimsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
comment|// Mock up a request
name|RequestSecurityTokenType
name|request
init|=
operator|new
name|RequestSecurityTokenType
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|TOKEN_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|Object
name|claims
init|=
name|useSecondaryParameters
condition|?
name|createClaimsElementInSecondaryParameters
argument_list|()
else|:
name|createClaimsElement
argument_list|()
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|claims
argument_list|)
expr_stmt|;
comment|// Create a UsernameToken
name|JAXBElement
argument_list|<
name|UsernameTokenType
argument_list|>
name|usernameTokenType
init|=
name|createUsernameToken
argument_list|(
literal|"alice"
argument_list|,
literal|"clarinet"
argument_list|)
decl_stmt|;
name|ValidateTargetType
name|validateTarget
init|=
operator|new
name|ValidateTargetType
argument_list|()
decl_stmt|;
name|validateTarget
operator|.
name|setAny
argument_list|(
name|usernameTokenType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
name|validateTargetType
init|=
operator|new
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|VALIDATE_TARGET
argument_list|,
name|ValidateTargetType
operator|.
name|class
argument_list|,
name|validateTarget
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|validateTargetType
argument_list|)
expr_stmt|;
comment|// Mock up message context
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|WrappedMessageContext
name|msgCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"ted"
argument_list|)
decl_stmt|;
name|msgCtx
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|createSecurityContext
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate a token
name|RequestSecurityTokenResponseType
name|response
init|=
name|validateOperation
operator|.
name|validate
argument_list|(
name|request
argument_list|,
name|principal
argument_list|,
name|msgCtx
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|validateResponse
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test the generated token.
name|Element
name|assertion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|tokenObject
range|:
name|response
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|tokenObject
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|&&
name|REQUESTED_SECURITY_TOKEN
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|RequestedSecurityTokenType
name|rstType
init|=
call|(
name|RequestedSecurityTokenType
call|)
argument_list|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertion
operator|=
operator|(
name|Element
operator|)
name|rstType
operator|.
name|getAny
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runValidateSaml2TokenOnBehalfOfSaml2DifferentRealmFederateIdentity
parameter_list|(
name|boolean
name|useGlobalIdentityMapper
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|TokenValidateOperation
name|validateOperation
init|=
operator|new
name|TokenValidateOperation
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RealmProperties
argument_list|>
name|realms
init|=
name|createSamlRealms
argument_list|()
decl_stmt|;
comment|// Add Token Provider
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|providerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SAMLTokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|samlTokenProvider
operator|.
name|setRealmMap
argument_list|(
name|realms
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|ClaimsAttributeStatementProvider
argument_list|()
argument_list|)
expr_stmt|;
name|samlTokenProvider
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|providerList
operator|.
name|add
argument_list|(
name|samlTokenProvider
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenProviders
argument_list|(
name|providerList
argument_list|)
expr_stmt|;
comment|// Add Token Validator
name|List
argument_list|<
name|TokenValidator
argument_list|>
name|validatorList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SAMLTokenValidator
name|samlTokenValidator
init|=
operator|new
name|SAMLTokenValidator
argument_list|()
decl_stmt|;
name|samlTokenValidator
operator|.
name|setSamlRealmCodec
argument_list|(
operator|new
name|IssuerSAMLRealmCodec
argument_list|()
argument_list|)
expr_stmt|;
name|validatorList
operator|.
name|add
argument_list|(
name|samlTokenValidator
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setTokenValidators
argument_list|(
name|validatorList
argument_list|)
expr_stmt|;
comment|// Add Service
name|ServiceMBean
name|service
init|=
operator|new
name|StaticService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setEndpoints
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"http://dummy-service.com/dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setServices
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add Relationship list
name|List
argument_list|<
name|Relationship
argument_list|>
name|relationshipList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Relationship
name|rs
init|=
name|createRelationship
argument_list|()
decl_stmt|;
name|rs
operator|.
name|setType
argument_list|(
name|Relationship
operator|.
name|FED_TYPE_IDENTITY
argument_list|)
expr_stmt|;
name|rs
operator|.
name|setIdentityMapper
argument_list|(
operator|new
name|CustomIdentityMapper
argument_list|()
argument_list|)
expr_stmt|;
name|relationshipList
operator|.
name|add
argument_list|(
name|rs
argument_list|)
expr_stmt|;
comment|// Add STSProperties object
name|Crypto
name|crypto
init|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|getEncryptionProperties
argument_list|()
argument_list|)
decl_stmt|;
name|STSPropertiesMBean
name|stsProperties
init|=
name|createSTSPropertiesMBean
argument_list|(
name|crypto
argument_list|)
decl_stmt|;
name|stsProperties
operator|.
name|setRealmParser
argument_list|(
operator|new
name|CustomRealmParser
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useGlobalIdentityMapper
condition|)
block|{
name|stsProperties
operator|.
name|setIdentityMapper
argument_list|(
operator|new
name|CustomIdentityMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stsProperties
operator|.
name|setRelationships
argument_list|(
name|relationshipList
argument_list|)
expr_stmt|;
block|}
name|validateOperation
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
comment|// Set the ClaimsManager
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|ClaimsHandler
operator|)
operator|new
name|CustomClaimsHandler
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|validateOperation
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
comment|// Mock up a request
name|RequestSecurityTokenType
name|request
init|=
operator|new
name|RequestSecurityTokenType
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|TOKEN_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
comment|// Add a ClaimsType
name|ClaimsType
name|claimsType
init|=
operator|new
name|ClaimsType
argument_list|()
decl_stmt|;
name|claimsType
operator|.
name|setDialect
argument_list|(
name|STSConstants
operator|.
name|IDT_NS_05_05
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|claimType
init|=
name|createClaimsType
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|claimsType
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|claimType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|ClaimsType
argument_list|>
name|claimsTypeJaxb
init|=
operator|new
name|JAXBElement
argument_list|<
name|ClaimsType
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|CLAIMS
argument_list|,
name|ClaimsType
operator|.
name|class
argument_list|,
name|claimsType
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|claimsTypeJaxb
argument_list|)
expr_stmt|;
comment|//request.getAny().add(createAppliesToElement("http://dummy-service.com/dummy"));
comment|// create a SAML Token via the SAMLTokenProvider which contains claims
name|CallbackHandler
name|callbackHandler
init|=
operator|new
name|PasswordCallbackHandler
argument_list|()
decl_stmt|;
name|Element
name|samlToken
init|=
name|createSAMLAssertion
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|,
name|crypto
argument_list|,
literal|"mystskey"
argument_list|,
name|callbackHandler
argument_list|,
name|realms
argument_list|)
decl_stmt|;
name|Document
name|docToken
init|=
name|samlToken
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|samlToken
operator|=
operator|(
name|Element
operator|)
name|docToken
operator|.
name|appendChild
argument_list|(
name|samlToken
argument_list|)
expr_stmt|;
name|String
name|samlString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|samlToken
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|samlString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlString
operator|.
name|contains
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlString
operator|.
name|contains
argument_list|(
literal|"doe"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|samlString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add SAML token as ValidateTarget element
name|ValidateTargetType
name|validateTarget
init|=
operator|new
name|ValidateTargetType
argument_list|()
decl_stmt|;
name|validateTarget
operator|.
name|setAny
argument_list|(
name|samlToken
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
name|validateTargetType
init|=
operator|new
name|JAXBElement
argument_list|<
name|ValidateTargetType
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|VALIDATE_TARGET
argument_list|,
name|ValidateTargetType
operator|.
name|class
argument_list|,
name|validateTarget
argument_list|)
decl_stmt|;
name|request
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|validateTargetType
argument_list|)
expr_stmt|;
comment|// Mock up message context
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|WrappedMessageContext
name|msgCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|msgCtx
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
literal|"https"
argument_list|)
expr_stmt|;
comment|// Validate a token
name|RequestSecurityTokenResponseType
name|response
init|=
name|validateOperation
operator|.
name|validate
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
name|msgCtx
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|validateResponse
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test the generated token.
name|Element
name|assertion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|tokenObject
range|:
name|response
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|tokenObject
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|&&
name|REQUESTED_SECURITY_TOKEN
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|RequestedSecurityTokenType
name|rstType
init|=
call|(
name|RequestedSecurityTokenType
call|)
argument_list|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|tokenObject
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertion
operator|=
operator|(
name|Element
operator|)
name|rstType
operator|.
name|getAny
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|String
name|tokenString
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"AttributeStatement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"ALICE"
argument_list|)
argument_list|)
expr_stmt|;
comment|//subject changed (to uppercase)
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
literal|"doe"
argument_list|)
argument_list|)
expr_stmt|;
comment|//claim unchanged but requested
name|assertTrue
argument_list|(
name|tokenString
operator|.
name|contains
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Create a security context object      */
specifier|private
name|SecurityContext
name|createSecurityContext
parameter_list|(
specifier|final
name|Principal
name|p
parameter_list|)
block|{
return|return
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Relationship
name|createRelationship
parameter_list|()
block|{
name|Relationship
name|rs
init|=
operator|new
name|Relationship
argument_list|()
decl_stmt|;
name|ClaimsMapper
name|claimsMapper
init|=
operator|new
name|CustomClaimsMapper
argument_list|()
decl_stmt|;
name|rs
operator|.
name|setClaimsMapper
argument_list|(
name|claimsMapper
argument_list|)
expr_stmt|;
name|rs
operator|.
name|setSourceRealm
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|rs
operator|.
name|setTargetRealm
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|rs
operator|.
name|setType
argument_list|(
name|Relationship
operator|.
name|FED_TYPE_CLAIMS
argument_list|)
expr_stmt|;
return|return
name|rs
return|;
block|}
comment|/*      * Create STSPropertiesMBean object      */
specifier|private
name|STSPropertiesMBean
name|createSTSPropertiesMBean
parameter_list|(
name|Crypto
name|crypto
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|STSPropertiesMBean
name|stsProperties
init|=
operator|new
name|StaticSTSProperties
argument_list|()
decl_stmt|;
name|stsProperties
operator|.
name|setEncryptionCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setEncryptionUsername
argument_list|(
literal|"myservicekey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureUsername
argument_list|(
literal|"mystskey"
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setCallbackHandler
argument_list|(
operator|new
name|PasswordCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIssuer
argument_list|(
literal|"STS"
argument_list|)
expr_stmt|;
return|return
name|stsProperties
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RealmProperties
argument_list|>
name|createSamlRealms
parameter_list|()
block|{
comment|// Create Realms
name|Map
argument_list|<
name|String
argument_list|,
name|RealmProperties
argument_list|>
name|samlRealms
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RealmProperties
argument_list|>
argument_list|()
decl_stmt|;
name|RealmProperties
name|samlRealm
init|=
operator|new
name|RealmProperties
argument_list|()
decl_stmt|;
name|samlRealm
operator|.
name|setIssuer
argument_list|(
literal|"A-Issuer"
argument_list|)
expr_stmt|;
name|samlRealms
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
name|samlRealm
argument_list|)
expr_stmt|;
name|samlRealm
operator|=
operator|new
name|RealmProperties
argument_list|()
expr_stmt|;
name|samlRealm
operator|.
name|setIssuer
argument_list|(
literal|"B-Issuer"
argument_list|)
expr_stmt|;
name|samlRealms
operator|.
name|put
argument_list|(
literal|"B"
argument_list|,
name|samlRealm
argument_list|)
expr_stmt|;
return|return
name|samlRealms
return|;
block|}
comment|/**      * Return true if the response has a valid status, false otherwise      */
specifier|private
name|boolean
name|validateResponse
parameter_list|(
name|RequestSecurityTokenResponseType
name|response
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getAny
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|getAny
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|requestObject
range|:
name|response
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|requestObject
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|requestObject
decl_stmt|;
if|if
condition|(
name|QNAME_WST_STATUS
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|StatusType
name|status
init|=
operator|(
name|StatusType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|STSConstants
operator|.
name|VALID_CODE
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_class

begin_function
specifier|private
name|Properties
name|getEncryptionProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.provider"
argument_list|,
literal|"org.apache.wss4j.common.crypto.Merlin"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.merlin.keystore.password"
argument_list|,
literal|"stsspass"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"org.apache.wss4j.crypto.merlin.keystore.file"
argument_list|,
literal|"keys/stsstore.jks"
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
end_function

begin_function
specifier|private
name|JAXBElement
argument_list|<
name|UsernameTokenType
argument_list|>
name|createUsernameToken
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|UsernameTokenType
name|usernameToken
init|=
operator|new
name|UsernameTokenType
argument_list|()
decl_stmt|;
name|AttributedString
name|username
init|=
operator|new
name|AttributedString
argument_list|()
decl_stmt|;
name|username
operator|.
name|setValue
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|usernameToken
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
comment|// Add a password
name|PasswordString
name|passwordString
init|=
operator|new
name|PasswordString
argument_list|()
decl_stmt|;
name|passwordString
operator|.
name|setValue
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|passwordString
operator|.
name|setType
argument_list|(
name|WSConstants
operator|.
name|PASSWORD_TEXT
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|PasswordString
argument_list|>
name|passwordType
init|=
operator|new
name|JAXBElement
argument_list|<
name|PasswordString
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|PASSWORD
argument_list|,
name|PasswordString
operator|.
name|class
argument_list|,
name|passwordString
argument_list|)
decl_stmt|;
name|usernameToken
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|passwordType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|UsernameTokenType
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|UsernameTokenType
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|USERNAME_TOKEN
argument_list|,
name|UsernameTokenType
operator|.
name|class
argument_list|,
name|usernameToken
argument_list|)
decl_stmt|;
return|return
name|tokenType
return|;
block|}
end_function

begin_comment
comment|/*      * Mock up a DOM Element containing some claims      */
end_comment

begin_function
specifier|private
name|JAXBElement
argument_list|<
name|ClaimsType
argument_list|>
name|createClaimsElement
parameter_list|()
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|claimType
init|=
name|createClaimsType
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|ClaimsType
name|claims
init|=
operator|new
name|ClaimsType
argument_list|()
decl_stmt|;
name|claims
operator|.
name|setDialect
argument_list|(
name|STSConstants
operator|.
name|IDT_NS_05_05
argument_list|)
expr_stmt|;
name|claims
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|claimType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|ClaimsType
argument_list|>
name|claimsType
init|=
operator|new
name|JAXBElement
argument_list|<
name|ClaimsType
argument_list|>
argument_list|(
name|QNameConstants
operator|.
name|CLAIMS
argument_list|,
name|ClaimsType
operator|.
name|class
argument_list|,
name|claims
argument_list|)
decl_stmt|;
return|return
name|claimsType
return|;
block|}
end_function

begin_comment
comment|/*      * Mock up a SecondaryParameters DOM Element containing some claims      */
end_comment

begin_function
specifier|private
name|Element
name|createClaimsElementInSecondaryParameters
parameter_list|()
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|secondary
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|STSConstants
operator|.
name|WST_NS_05_12
argument_list|,
literal|"SecondaryParameters"
argument_list|)
decl_stmt|;
name|secondary
operator|.
name|setAttributeNS
argument_list|(
name|WSConstants
operator|.
name|XMLNS_NS
argument_list|,
literal|"xmlns"
argument_list|,
name|STSConstants
operator|.
name|WST_NS_05_12
argument_list|)
expr_stmt|;
name|Element
name|claims
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|STSConstants
operator|.
name|WST_NS_05_12
argument_list|,
literal|"Claims"
argument_list|)
decl_stmt|;
name|claims
operator|.
name|setAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"Dialect"
argument_list|,
name|STSConstants
operator|.
name|IDT_NS_05_05
argument_list|)
expr_stmt|;
name|Element
name|claimType
init|=
name|createClaimsType
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|claims
operator|.
name|appendChild
argument_list|(
name|claimType
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|appendChild
argument_list|(
name|claims
argument_list|)
expr_stmt|;
return|return
name|secondary
return|;
block|}
end_function

begin_function
specifier|private
name|Element
name|createClaimsType
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|Element
name|claimType
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|STSConstants
operator|.
name|IDT_NS_05_05
argument_list|,
literal|"ClaimType"
argument_list|)
decl_stmt|;
name|claimType
operator|.
name|setAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"Uri"
argument_list|,
name|ClaimTypes
operator|.
name|LASTNAME
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|claimType
operator|.
name|setAttributeNS
argument_list|(
name|WSConstants
operator|.
name|XMLNS_NS
argument_list|,
literal|"xmlns"
argument_list|,
name|STSConstants
operator|.
name|IDT_NS_05_05
argument_list|)
expr_stmt|;
return|return
name|claimType
return|;
block|}
end_function

begin_comment
comment|/*      * Mock up an SAML assertion element      */
end_comment

begin_function
specifier|private
name|Element
name|createSAMLAssertion
parameter_list|(
name|String
name|tokenType
parameter_list|,
name|Crypto
name|crypto
parameter_list|,
name|String
name|signatureUsername
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RealmProperties
argument_list|>
name|realms
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|SAMLTokenProvider
name|samlTokenProvider
init|=
operator|new
name|SAMLTokenProvider
argument_list|()
decl_stmt|;
name|samlTokenProvider
operator|.
name|setRealmMap
argument_list|(
name|realms
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributeStatementProvider
argument_list|>
name|customProviderList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|customProviderList
operator|.
name|add
argument_list|(
operator|new
name|ClaimsAttributeStatementProvider
argument_list|()
argument_list|)
expr_stmt|;
name|samlTokenProvider
operator|.
name|setAttributeStatementProviders
argument_list|(
name|customProviderList
argument_list|)
expr_stmt|;
name|TokenProviderParameters
name|providerParameters
init|=
name|createProviderParameters
argument_list|(
name|tokenType
argument_list|,
name|STSConstants
operator|.
name|BEARER_KEY_KEYTYPE
argument_list|,
name|crypto
argument_list|,
name|signatureUsername
argument_list|,
name|callbackHandler
argument_list|)
decl_stmt|;
if|if
condition|(
name|realms
operator|!=
literal|null
condition|)
block|{
name|providerParameters
operator|.
name|setRealm
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
block|}
comment|// Set the ClaimsManager
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
name|ClaimsHandler
name|claimsHandler
init|=
operator|new
name|CustomClaimsHandler
argument_list|()
decl_stmt|;
name|claimsManager
operator|.
name|setClaimHandlers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|claimsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setClaimsManager
argument_list|(
name|claimsManager
argument_list|)
expr_stmt|;
name|ClaimCollection
name|requestedClaims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|requestClaim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|requestClaim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|requestClaim
operator|.
name|setOptional
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|requestedClaims
operator|.
name|add
argument_list|(
name|requestClaim
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setRequestedSecondaryClaims
argument_list|(
name|requestedClaims
argument_list|)
expr_stmt|;
name|TokenProviderResponse
name|providerResponse
init|=
name|samlTokenProvider
operator|.
name|createToken
argument_list|(
name|providerParameters
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|providerResponse
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|providerResponse
operator|.
name|getTokenId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
operator|(
name|Element
operator|)
name|providerResponse
operator|.
name|getToken
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|TokenProviderParameters
name|createProviderParameters
parameter_list|(
name|String
name|tokenType
parameter_list|,
name|String
name|keyType
parameter_list|,
name|Crypto
name|crypto
parameter_list|,
name|String
name|signatureUsername
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|TokenProviderParameters
name|parameters
init|=
operator|new
name|TokenProviderParameters
argument_list|()
decl_stmt|;
name|TokenRequirements
name|tokenRequirements
init|=
operator|new
name|TokenRequirements
argument_list|()
decl_stmt|;
name|tokenRequirements
operator|.
name|setTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setTokenRequirements
argument_list|(
name|tokenRequirements
argument_list|)
expr_stmt|;
name|KeyRequirements
name|keyRequirements
init|=
operator|new
name|KeyRequirements
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setKeyRequirements
argument_list|(
name|keyRequirements
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock up message context
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|WrappedMessageContext
name|msgCtx
init|=
operator|new
name|WrappedMessageContext
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|setMessageContext
argument_list|(
name|msgCtx
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setAppliesToAddress
argument_list|(
literal|"http://dummy-service.com/dummy"
argument_list|)
expr_stmt|;
comment|// Add STSProperties object
name|StaticSTSProperties
name|stsProperties
init|=
operator|new
name|StaticSTSProperties
argument_list|()
decl_stmt|;
name|stsProperties
operator|.
name|setSignatureCrypto
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setSignatureUsername
argument_list|(
name|signatureUsername
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
expr_stmt|;
name|stsProperties
operator|.
name|setIssuer
argument_list|(
literal|"STS"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setEncryptionProperties
argument_list|(
operator|new
name|EncryptionProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parameters
return|;
block|}
end_function

unit|}
end_unit

