begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|StaticSTSProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|JexlClaimsMapperTest
extends|extends
name|org
operator|.
name|junit
operator|.
name|Assert
block|{
name|JexlClaimsMapper
name|jcm
decl_stmt|;
specifier|public
name|JexlClaimsMapperTest
parameter_list|(
name|String
name|scriptPath
parameter_list|)
throws|throws
name|IOException
block|{
name|jcm
operator|=
operator|new
name|JexlClaimsMapper
argument_list|()
expr_stmt|;
name|jcm
operator|.
name|setScript
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|data
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"jexlClaimMappingsWithoutFunctions.script"
block|}
block|,
block|{
literal|"jexlClaimMappingsWithFunctions.script"
block|}
block|}
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClaimMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClaimType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Jan Bernhardt"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|result
control|)
block|{
if|if
condition|(
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Only merged claim should be in result set, but not the individual claims"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoleMappings
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|contains
argument_list|(
literal|"manager"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|contains
argument_list|(
literal|"administrator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnusedClaims
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|result
control|)
block|{
name|URI
name|claimType
init|=
name|c
operator|.
name|getClaimType
argument_list|()
decl_stmt|;
if|if
condition|(
name|claimType
operator|!=
literal|null
operator|&&
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/unused"
operator|.
name|equals
argument_list|(
name|claimType
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Claims not handled within the script should not be copied to the target token"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateIssuer
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"STS-B"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOriginalIssuer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewIssuer"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIssuer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"STS-A"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOriginalIssuer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStaticClaim
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ProcessedClaim
name|staticClaim
init|=
name|findClaim
argument_list|(
name|result
argument_list|,
literal|"http://schemas.microsoft.com/identity/claims/identityprovider"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|staticClaim
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpperCaseClaim
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ProcessedClaim
name|claim
init|=
name|findClaim
argument_list|(
name|result
argument_list|,
literal|"http://my.schema.org/identity/claims/uppercase"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|claim
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"VALUE2"
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLowerCaseClaim
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ProcessedClaim
name|claim
init|=
name|findClaim
argument_list|(
name|result
argument_list|,
literal|"http://my.schema.org/identity/claims/lowercase"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|claim
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrappedUpperCaseClaim
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ProcessedClaim
name|claim
init|=
name|findClaim
argument_list|(
name|result
argument_list|,
literal|"http://my.schema.org/identity/claims/wrappedUppercase"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|claim
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PREFIX_VALUE_SUFFIX"
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleClaimCopy
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ProcessedClaim
name|claim
init|=
name|findClaim
argument_list|(
name|result
argument_list|,
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mail"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|claim
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test@apache.com"
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleToMultiValue
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ProcessedClaim
name|claim
init|=
name|findClaim
argument_list|(
name|result
argument_list|,
literal|"http://my.schema.org/identity/claims/single2multi"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|claim
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value2"
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiToSingleValue
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ProcessedClaim
name|claim
init|=
name|findClaim
argument_list|(
name|result
argument_list|,
literal|"http://my.schema.org/identity/claims/multi2single"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|claim
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value1,Value2,Value3"
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValueFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessedClaimCollection
name|result
init|=
name|jcm
operator|.
name|mapClaims
argument_list|(
literal|"A"
argument_list|,
name|createClaimCollection
argument_list|()
argument_list|,
literal|"B"
argument_list|,
name|createProperties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ProcessedClaim
name|claim
init|=
name|findClaim
argument_list|(
name|result
argument_list|,
literal|"http://my.schema.org/identity/claims/filter"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|contains
argument_list|(
literal|"match"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|contains
argument_list|(
literal|"second_match"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|ProcessedClaimCollection
name|createClaimCollection
parameter_list|()
block|{
name|ProcessedClaimCollection
name|cc
init|=
operator|new
name|ProcessedClaimCollection
argument_list|()
decl_stmt|;
name|ProcessedClaim
name|c
init|=
operator|new
name|ProcessedClaim
argument_list|()
decl_stmt|;
name|c
operator|.
name|setIssuer
argument_list|(
literal|"STS-A"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setOriginalIssuer
argument_list|(
literal|"STS-B"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setClaimType
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setValues
argument_list|(
call|(
name|List
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
name|List
argument_list|<
name|?
argument_list|>
argument_list|)
name|Arrays
operator|.
name|asList
argument_list|(
literal|"admin"
argument_list|,
literal|"manager"
argument_list|,
literal|"tester"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|ProcessedClaim
argument_list|()
expr_stmt|;
name|c
operator|.
name|setIssuer
argument_list|(
literal|"STS-A"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setClaimType
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setValues
argument_list|(
call|(
name|List
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
name|List
argument_list|<
name|?
argument_list|>
argument_list|)
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Jan"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|ProcessedClaim
argument_list|()
expr_stmt|;
name|c
operator|.
name|setIssuer
argument_list|(
literal|"STS-A"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setClaimType
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setValues
argument_list|(
call|(
name|List
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
name|List
argument_list|<
name|?
argument_list|>
argument_list|)
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Bernhardt"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|ProcessedClaim
argument_list|()
expr_stmt|;
name|c
operator|.
name|setClaimType
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/unused"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setValues
argument_list|(
call|(
name|List
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
name|List
argument_list|<
name|?
argument_list|>
argument_list|)
name|Arrays
operator|.
name|asList
argument_list|(
literal|"noValue"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|ProcessedClaim
argument_list|()
expr_stmt|;
name|c
operator|.
name|setClaimType
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mail"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setValues
argument_list|(
call|(
name|List
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
name|List
argument_list|<
name|?
argument_list|>
argument_list|)
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test@apache.com"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|cc
return|;
block|}
specifier|protected
name|ClaimsParameters
name|createProperties
parameter_list|()
block|{
name|StaticSTSProperties
name|stsProp
init|=
operator|new
name|StaticSTSProperties
argument_list|()
decl_stmt|;
name|stsProp
operator|.
name|setIssuer
argument_list|(
literal|"NewIssuer"
argument_list|)
expr_stmt|;
name|ClaimsParameters
name|param
init|=
operator|new
name|ClaimsParameters
argument_list|()
decl_stmt|;
name|param
operator|.
name|setStsProperties
argument_list|(
name|stsProp
argument_list|)
expr_stmt|;
return|return
name|param
return|;
block|}
specifier|private
name|ProcessedClaim
name|findClaim
parameter_list|(
name|ProcessedClaimCollection
name|claims
parameter_list|,
name|String
name|claimType
parameter_list|)
block|{
if|if
condition|(
name|claimType
operator|==
literal|null
operator|||
name|claims
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|claims
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getClaimType
argument_list|()
operator|!=
literal|null
operator|&&
name|claimType
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

