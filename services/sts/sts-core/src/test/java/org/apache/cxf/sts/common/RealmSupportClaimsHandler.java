begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|realm
operator|.
name|RealmSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * A custom ClaimsHandler implementation for use in the tests.  */
end_comment

begin_class
specifier|public
class|class
name|RealmSupportClaimsHandler
implements|implements
name|ClaimsHandler
implements|,
name|RealmSupport
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|supportedRealms
decl_stmt|;
specifier|private
name|String
name|realm
decl_stmt|;
specifier|private
name|List
argument_list|<
name|URI
argument_list|>
name|supportedClaimTypes
decl_stmt|;
specifier|public
name|void
name|setSupportedRealms
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|supportedRealms
parameter_list|)
block|{
name|this
operator|.
name|supportedRealms
operator|=
name|supportedRealms
expr_stmt|;
block|}
specifier|public
name|void
name|setRealm
parameter_list|(
name|String
name|realm
parameter_list|)
block|{
name|this
operator|.
name|realm
operator|=
name|realm
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|URI
argument_list|>
name|getSupportedClaimTypes
parameter_list|()
block|{
return|return
name|supportedClaimTypes
return|;
block|}
specifier|public
name|void
name|setSupportedClaimTypes
parameter_list|(
name|List
argument_list|<
name|URI
argument_list|>
name|supportedClaimTypes
parameter_list|)
block|{
name|this
operator|.
name|supportedClaimTypes
operator|=
name|supportedClaimTypes
expr_stmt|;
block|}
specifier|public
name|ProcessedClaimCollection
name|retrieveClaimValues
parameter_list|(
name|ClaimCollection
name|claims
parameter_list|,
name|ClaimsParameters
name|parameters
parameter_list|)
block|{
if|if
condition|(
literal|"A"
operator|.
name|equals
argument_list|(
name|realm
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ClaimHandler in realm A. Alice username must be 'alice'"
argument_list|,
literal|"alice"
argument_list|,
name|parameters
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"B"
operator|.
name|equals
argument_list|(
name|realm
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ClaimHandler in realm B. Alice username must be 'ALICE'"
argument_list|,
literal|"ALICE"
argument_list|,
name|parameters
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|supportedRealms
operator|!=
literal|null
operator|&&
operator|!
name|supportedRealms
operator|.
name|contains
argument_list|(
name|parameters
operator|.
name|getRealm
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"ClaimHandler must not be called. Source realm '"
operator|+
name|parameters
operator|.
name|getRealm
argument_list|()
operator|+
literal|"' not in supportedRealm list: "
operator|+
name|supportedRealms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|claims
operator|!=
literal|null
operator|&&
name|claims
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ProcessedClaimCollection
name|claimCollection
init|=
operator|new
name|ProcessedClaimCollection
argument_list|()
decl_stmt|;
for|for
control|(
name|Claim
name|requestClaim
range|:
name|claims
control|)
block|{
if|if
condition|(
name|getSupportedClaimTypes
argument_list|()
operator|.
name|indexOf
argument_list|(
name|requestClaim
operator|.
name|getClaimType
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|ProcessedClaim
name|claim
init|=
operator|new
name|ProcessedClaim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|requestClaim
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
name|claim
operator|.
name|addValue
argument_list|(
literal|"Value_"
operator|+
name|requestClaim
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
name|claimCollection
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|claimCollection
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSupportedRealms
parameter_list|()
block|{
return|return
name|supportedRealms
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHandlerRealm
parameter_list|()
block|{
return|return
name|realm
return|;
block|}
block|}
end_class

end_unit

