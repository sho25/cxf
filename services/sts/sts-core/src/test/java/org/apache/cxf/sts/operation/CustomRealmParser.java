begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|RealmParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_comment
comment|/**  * A test implementation of RealmParser.  */
end_comment

begin_class
specifier|public
class|class
name|CustomRealmParser
implements|implements
name|RealmParser
block|{
specifier|public
name|String
name|parseRealm
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|messageContext
parameter_list|)
throws|throws
name|STSException
block|{
name|String
name|endpoint
init|=
operator|(
name|String
operator|)
name|messageContext
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|contains
argument_list|(
literal|"ldap"
argument_list|)
condition|)
block|{
return|return
literal|"A"
return|;
block|}
elseif|else
if|if
condition|(
name|endpoint
operator|.
name|contains
argument_list|(
literal|"https"
argument_list|)
condition|)
block|{
return|return
literal|"B"
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

