begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|cache
package|;
end_package

begin_comment
comment|//import java.security.Principal;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|CustomTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryIdentityCacheTest
extends|extends
name|org
operator|.
name|junit
operator|.
name|Assert
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{              }
comment|// tests TokenStore apis for storing in the cache.
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testOneMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|IdentityMapper
name|mapper
init|=
operator|new
name|CacheIdentityMapper
argument_list|()
decl_stmt|;
name|MemoryIdentityCache
name|cache
init|=
operator|new
name|MemoryIdentityCache
argument_list|(
name|mapper
argument_list|)
decl_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_A"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_aaa"
argument_list|)
argument_list|,
literal|"REALM_B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_aaa"
argument_list|,
literal|"REALM_A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_bbb"
argument_list|,
literal|"REALM_B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testTwoDistinctMappings
parameter_list|()
block|{
name|IdentityMapper
name|mapper
init|=
operator|new
name|CacheIdentityMapper
argument_list|()
decl_stmt|;
name|MemoryIdentityCache
name|cache
init|=
operator|new
name|MemoryIdentityCache
argument_list|(
name|mapper
argument_list|)
decl_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_A"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_aaa"
argument_list|)
argument_list|,
literal|"REALM_B"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_C"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_ccc"
argument_list|)
argument_list|,
literal|"REALM_D"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_aaa"
argument_list|,
literal|"REALM_A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_bbb"
argument_list|,
literal|"REALM_B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_ccc"
argument_list|,
literal|"REALM_C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_ddd"
argument_list|,
literal|"REALM_D"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testTwoDistinctAndOneRelatedMapping
parameter_list|()
block|{
name|IdentityMapper
name|mapper
init|=
operator|new
name|CacheIdentityMapper
argument_list|()
decl_stmt|;
name|MemoryIdentityCache
name|cache
init|=
operator|new
name|MemoryIdentityCache
argument_list|(
name|mapper
argument_list|)
decl_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_A"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_aaa"
argument_list|)
argument_list|,
literal|"REALM_B"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_C"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_ccc"
argument_list|)
argument_list|,
literal|"REALM_D"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_A"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_aaa"
argument_list|)
argument_list|,
literal|"REALM_D"
argument_list|)
expr_stmt|;
comment|//now, mapping from A -> D and B -> D are cached as well
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_aaa"
argument_list|,
literal|"REALM_A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_bbb"
argument_list|,
literal|"REALM_B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_ccc"
argument_list|,
literal|"REALM_C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_ddd"
argument_list|,
literal|"REALM_D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_aaa"
argument_list|,
literal|"REALM_A"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_bbb"
argument_list|,
literal|"REALM_B"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_ccc"
argument_list|,
literal|"REALM_C"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_ddd"
argument_list|,
literal|"REALM_D"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testTwoDistinctAndTwoRelatedMapping
parameter_list|()
block|{
name|IdentityMapper
name|mapper
init|=
operator|new
name|CacheIdentityMapper
argument_list|()
decl_stmt|;
name|MemoryIdentityCache
name|cache
init|=
operator|new
name|MemoryIdentityCache
argument_list|(
name|mapper
argument_list|)
decl_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_A"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_aaa"
argument_list|)
argument_list|,
literal|"REALM_B"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_D"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_ddd"
argument_list|)
argument_list|,
literal|"REALM_E"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//No Mapping occured between A,B and D,E (C not involved at all)
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_aaa"
argument_list|,
literal|"REALM_A"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_bbb"
argument_list|,
literal|"REALM_B"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_ddd"
argument_list|,
literal|"REALM_D"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_eee"
argument_list|,
literal|"REALM_E"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_B"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_bbb"
argument_list|)
argument_list|,
literal|"REALM_C"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_aaa"
argument_list|,
literal|"REALM_A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_bbb"
argument_list|,
literal|"REALM_B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_ccc"
argument_list|,
literal|"REALM_C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_ddd"
argument_list|,
literal|"REALM_D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_eee"
argument_list|,
literal|"REALM_E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_aaa"
argument_list|,
literal|"REALM_A"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_bbb"
argument_list|,
literal|"REALM_B"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_ccc"
argument_list|,
literal|"REALM_C"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//No mapping occurred between A,B,C and D,E -> distinct
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_ddd"
argument_list|,
literal|"REALM_D"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_eee"
argument_list|,
literal|"REALM_E"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|mapPrincipal
argument_list|(
literal|"REALM_C"
argument_list|,
operator|new
name|CustomTokenPrincipal
argument_list|(
literal|"user_ccc"
argument_list|)
argument_list|,
literal|"REALM_E"
argument_list|)
expr_stmt|;
comment|//All mappings are known now
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_aaa"
argument_list|,
literal|"REALM_A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_bbb"
argument_list|,
literal|"REALM_B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_ccc"
argument_list|,
literal|"REALM_C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_ddd"
argument_list|,
literal|"REALM_D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"user_eee"
argument_list|,
literal|"REALM_E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_aaa"
argument_list|,
literal|"REALM_A"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_bbb"
argument_list|,
literal|"REALM_B"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_ccc"
argument_list|,
literal|"REALM_C"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_ddd"
argument_list|,
literal|"REALM_D"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"user_eee"
argument_list|,
literal|"REALM_E"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

