begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|LdapClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|CustomTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|AttributesMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|LdapTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|filter
operator|.
name|AndFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|filter
operator|.
name|EqualsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|LDAPClaimsTest
block|{
specifier|private
specifier|static
name|ClassPathXmlApplicationContext
name|appContext
decl_stmt|;
specifier|private
specifier|static
name|Properties
name|props
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpLdap
parameter_list|()
throws|throws
name|Exception
block|{
name|appContext
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"ldap.xml"
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|LDAPClaimsTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ldap.properties"
argument_list|)
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
specifier|public
name|void
name|testRetrieveClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|LdapClaimsHandler
name|claimsHandler
init|=
operator|(
name|LdapClaimsHandler
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"testClaimsHandler"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"claimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|user
argument_list|,
literal|"Property 'claimUser' not configured"
argument_list|)
expr_stmt|;
name|ClaimCollection
name|requestedClaims
init|=
name|createRequestClaimCollection
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|expectedClaims
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
name|ClaimsParameters
name|params
init|=
operator|new
name|ClaimsParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|ProcessedClaimCollection
name|retrievedClaims
init|=
name|claimsHandler
operator|.
name|retrieveClaimValues
argument_list|(
name|requestedClaims
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|==
name|expectedClaims
operator|.
name|size
argument_list|()
argument_list|,
literal|"Retrieved number of claims ["
operator|+
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"] doesn't match with expected ["
operator|+
name|expectedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|retrievedClaims
control|)
block|{
if|if
condition|(
name|expectedClaims
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
condition|)
block|{
name|expectedClaims
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|isTrue
argument_list|(
literal|false
argument_list|,
literal|"Claim '"
operator|+
name|c
operator|.
name|getClaimType
argument_list|()
operator|+
literal|"' not requested"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
argument_list|(
name|expected
operator|=
name|STSException
operator|.
name|class
argument_list|)
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
specifier|public
name|void
name|testRetrieveClaimsWithUnsupportedMandatoryClaimType
parameter_list|()
throws|throws
name|Exception
block|{
name|LdapClaimsHandler
name|claimsHandler
init|=
operator|(
name|LdapClaimsHandler
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"testClaimsHandler"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"claimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|user
argument_list|,
literal|"Property 'claimUser' not configured"
argument_list|)
expr_stmt|;
name|ClaimCollection
name|requestedClaims
init|=
name|createRequestClaimCollection
argument_list|()
decl_stmt|;
comment|// add unsupported but mandatory claim
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|GENDER
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|requestedClaims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|ClaimsParameters
name|params
init|=
operator|new
name|ClaimsParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|claimsHandler
operator|.
name|retrieveClaimValues
argument_list|(
name|requestedClaims
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
specifier|public
name|void
name|testRetrieveClaimsWithUnsupportedOptionalClaimType
parameter_list|()
throws|throws
name|Exception
block|{
name|LdapClaimsHandler
name|claimsHandler
init|=
operator|(
name|LdapClaimsHandler
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"testClaimsHandler"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"claimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|user
argument_list|,
literal|"Property 'claimUser' not configured"
argument_list|)
expr_stmt|;
name|ClaimCollection
name|requestedClaims
init|=
name|createRequestClaimCollection
argument_list|()
decl_stmt|;
comment|// add unsupported but optional unsupported claim
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|GENDER
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requestedClaims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
comment|// Gender is not expected to be returned because not supported
name|List
argument_list|<
name|URI
argument_list|>
name|expectedClaims
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
name|ClaimsParameters
name|params
init|=
operator|new
name|ClaimsParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|ProcessedClaimCollection
name|retrievedClaims
init|=
name|claimsHandler
operator|.
name|retrieveClaimValues
argument_list|(
name|requestedClaims
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|==
name|expectedClaims
operator|.
name|size
argument_list|()
argument_list|,
literal|"Retrieved number of claims ["
operator|+
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"] doesn't match with expected ["
operator|+
name|expectedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|retrievedClaims
control|)
block|{
if|if
condition|(
name|expectedClaims
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
condition|)
block|{
name|expectedClaims
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|isTrue
argument_list|(
literal|false
argument_list|,
literal|"Claim '"
operator|+
name|c
operator|.
name|getClaimType
argument_list|()
operator|+
literal|"' not requested"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ClaimCollection
name|createRequestClaimCollection
parameter_list|()
block|{
name|ClaimCollection
name|claims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|claim
operator|=
operator|new
name|Claim
argument_list|()
expr_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|claim
operator|=
operator|new
name|Claim
argument_list|()
expr_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
return|return
name|claims
return|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSupportedClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"claimsToLdapAttributeMapping"
argument_list|)
argument_list|)
decl_stmt|;
name|LdapClaimsHandler
name|cHandler
init|=
operator|new
name|LdapClaimsHandler
argument_list|()
decl_stmt|;
name|cHandler
operator|.
name|setClaimsLdapAttributeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|supportedClaims
init|=
name|cHandler
operator|.
name|getSupportedClaimTypes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
name|supportedClaims
operator|.
name|size
argument_list|()
argument_list|,
literal|"Supported claims and claims/ldap attribute mapping size different"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|claim
range|:
name|mapping
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|isTrue
argument_list|(
name|supportedClaims
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
name|claim
argument_list|)
argument_list|)
argument_list|,
literal|"Claim '"
operator|+
name|claim
operator|+
literal|"' not listed in supported list"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
specifier|public
name|void
name|testLdapTemplate
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|LdapTemplate
name|ldap
init|=
operator|(
name|LdapTemplate
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"ldapTemplate"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"claimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|user
argument_list|,
literal|"Property 'claimUser' not configured"
argument_list|)
expr_stmt|;
name|String
name|dn
init|=
literal|null
decl_stmt|;
name|AndFilter
name|filter
init|=
operator|new
name|AndFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|and
argument_list|(
operator|new
name|EqualsFilter
argument_list|(
literal|"objectclass"
argument_list|,
literal|"person"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
operator|new
name|EqualsFilter
argument_list|(
literal|"cn"
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
comment|//find DN of user
name|AttributesMapper
name|mapper
init|=
operator|new
name|AttributesMapper
argument_list|()
block|{
specifier|public
name|Object
name|mapFromAttributes
parameter_list|(
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|attrs
operator|.
name|get
argument_list|(
literal|"distinguishedName"
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
name|users
init|=
name|ldap
operator|.
name|search
argument_list|(
literal|"OU=users,DC=emea,DC=mycompany,DC=com"
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|,
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|,
name|mapper
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|users
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|"Only one user expected"
argument_list|)
expr_stmt|;
name|dn
operator|=
operator|(
name|String
operator|)
name|users
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// get attributes
name|AttributesMapper
name|mapper2
init|=
operator|new
name|AttributesMapper
argument_list|()
block|{
specifier|public
name|Object
name|mapFromAttributes
parameter_list|(
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|NamingException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NamingEnumeration
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|attrEnum
init|=
name|attrs
operator|.
name|getAll
argument_list|()
decl_stmt|;
while|while
condition|(
name|attrEnum
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|Attribute
name|att
init|=
name|attrEnum
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|att
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"cn"
argument_list|,
operator|(
name|String
operator|)
name|attrs
operator|.
name|get
argument_list|(
literal|"cn"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"mail"
argument_list|,
operator|(
name|String
operator|)
name|attrs
operator|.
name|get
argument_list|(
literal|"mail"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"sn"
argument_list|,
operator|(
name|String
operator|)
name|attrs
operator|.
name|get
argument_list|(
literal|"sn"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"givenName"
argument_list|,
operator|(
name|String
operator|)
name|attrs
operator|.
name|get
argument_list|(
literal|"givenName"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
decl_stmt|;
name|ldap
operator|.
name|lookup
argument_list|(
name|dn
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cn"
block|,
literal|"mail"
block|,
literal|"sn"
block|,
literal|"givenName"
block|,
literal|"c"
block|}
argument_list|,
name|mapper2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

