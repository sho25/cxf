begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSPropertiesMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|SignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|KeyRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|realm
operator|.
name|SAMLRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_comment
comment|/**  * Some abstract functionality for creating a SAML token  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSAMLTokenProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractSAMLTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|signToken
parameter_list|(
name|SamlAssertionWrapper
name|assertion
parameter_list|,
name|SAMLRealm
name|samlRealm
parameter_list|,
name|STSPropertiesMBean
name|stsProperties
parameter_list|,
name|KeyRequirements
name|keyRequirements
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Initialise signature objects with defaults of STSPropertiesMBean
name|Crypto
name|signatureCrypto
init|=
name|stsProperties
operator|.
name|getSignatureCrypto
argument_list|()
decl_stmt|;
name|CallbackHandler
name|callbackHandler
init|=
name|stsProperties
operator|.
name|getCallbackHandler
argument_list|()
decl_stmt|;
name|SignatureProperties
name|signatureProperties
init|=
name|stsProperties
operator|.
name|getSignatureProperties
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|stsProperties
operator|.
name|getSignatureUsername
argument_list|()
decl_stmt|;
if|if
condition|(
name|samlRealm
operator|!=
literal|null
condition|)
block|{
comment|// If SignatureCrypto configured in realm then
comment|// callbackhandler and alias of STSPropertiesMBean is ignored
if|if
condition|(
name|samlRealm
operator|.
name|getSignatureCrypto
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"SAMLRealm signature keystore used"
argument_list|)
expr_stmt|;
name|signatureCrypto
operator|=
name|samlRealm
operator|.
name|getSignatureCrypto
argument_list|()
expr_stmt|;
name|callbackHandler
operator|=
name|samlRealm
operator|.
name|getCallbackHandler
argument_list|()
expr_stmt|;
name|alias
operator|=
name|samlRealm
operator|.
name|getSignatureAlias
argument_list|()
expr_stmt|;
block|}
comment|// SignatureProperties can be defined independently of SignatureCrypto
if|if
condition|(
name|samlRealm
operator|.
name|getSignatureProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|signatureProperties
operator|=
name|samlRealm
operator|.
name|getSignatureProperties
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Get the signature algorithm to use
name|String
name|signatureAlgorithm
init|=
name|keyRequirements
operator|.
name|getSignatureAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureAlgorithm
operator|==
literal|null
condition|)
block|{
comment|// If none then default to what is configured
name|signatureAlgorithm
operator|=
name|signatureProperties
operator|.
name|getSignatureAlgorithm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
init|=
name|signatureProperties
operator|.
name|getAcceptedSignatureAlgorithms
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|supportedAlgorithms
operator|.
name|contains
argument_list|(
name|signatureAlgorithm
argument_list|)
condition|)
block|{
name|signatureAlgorithm
operator|=
name|signatureProperties
operator|.
name|getSignatureAlgorithm
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"SignatureAlgorithm not supported, defaulting to: "
operator|+
name|signatureAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Get the c14n algorithm to use
name|String
name|c14nAlgorithm
init|=
name|keyRequirements
operator|.
name|getC14nAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|c14nAlgorithm
operator|==
literal|null
condition|)
block|{
comment|// If none then default to what is configured
name|c14nAlgorithm
operator|=
name|signatureProperties
operator|.
name|getC14nAlgorithm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
init|=
name|signatureProperties
operator|.
name|getAcceptedC14nAlgorithms
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|supportedAlgorithms
operator|.
name|contains
argument_list|(
name|c14nAlgorithm
argument_list|)
condition|)
block|{
name|c14nAlgorithm
operator|=
name|signatureProperties
operator|.
name|getC14nAlgorithm
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"C14nAlgorithm not supported, defaulting to: "
operator|+
name|c14nAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If alias not defined, get the default of the SignatureCrypto
if|if
condition|(
operator|(
name|alias
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
operator|)
operator|&&
operator|(
name|signatureCrypto
operator|!=
literal|null
operator|)
condition|)
block|{
name|alias
operator|=
name|signatureCrypto
operator|.
name|getDefaultX509Identifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Signature alias is null so using default alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get the password
name|WSPasswordCallback
index|[]
name|cb
init|=
block|{
operator|new
name|WSPasswordCallback
argument_list|(
name|alias
argument_list|,
name|WSPasswordCallback
operator|.
name|SIGNATURE
argument_list|)
block|}
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Creating SAML Token"
argument_list|)
expr_stmt|;
name|callbackHandler
operator|.
name|handle
argument_list|(
name|cb
argument_list|)
expr_stmt|;
name|String
name|password
init|=
name|cb
index|[
literal|0
index|]
operator|.
name|getPassword
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Signing SAML Token"
argument_list|)
expr_stmt|;
name|boolean
name|useKeyValue
init|=
name|signatureProperties
operator|.
name|isUseKeyValue
argument_list|()
decl_stmt|;
name|assertion
operator|.
name|signAssertion
argument_list|(
name|alias
argument_list|,
name|password
argument_list|,
name|signatureCrypto
argument_list|,
name|useKeyValue
argument_list|,
name|c14nAlgorithm
argument_list|,
name|signatureAlgorithm
argument_list|,
name|signatureProperties
operator|.
name|getDigestAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

