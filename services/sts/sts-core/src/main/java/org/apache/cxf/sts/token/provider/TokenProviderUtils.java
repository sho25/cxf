begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|TokenProviderUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|TokenProviderUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TokenProviderUtils
parameter_list|()
block|{
comment|// complete
block|}
comment|/**      * Extract an address from a Participants EPR DOM element      */
specifier|public
specifier|static
name|String
name|extractAddressFromParticipantsEPR
parameter_list|(
name|Object
name|participants
parameter_list|)
block|{
if|if
condition|(
name|participants
operator|instanceof
name|Element
condition|)
block|{
name|String
name|localName
init|=
operator|(
operator|(
name|Element
operator|)
name|participants
operator|)
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
operator|(
operator|(
name|Element
operator|)
name|participants
operator|)
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|STSConstants
operator|.
name|WSA_NS_05
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|&&
literal|"EndpointReference"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found EndpointReference element"
argument_list|)
expr_stmt|;
name|Element
name|address
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
operator|(
name|Element
operator|)
name|participants
argument_list|,
name|STSConstants
operator|.
name|WSA_NS_05
argument_list|,
literal|"Address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found address element"
argument_list|)
expr_stmt|;
return|return
name|address
operator|.
name|getTextContent
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|STSConstants
operator|.
name|WSP_NS
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|||
name|STSConstants
operator|.
name|WSP_NS_04
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|)
operator|&&
literal|"URI"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|Element
operator|)
name|participants
operator|)
operator|.
name|getTextContent
argument_list|()
return|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Participants element does not exist or could not be parsed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|participants
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|participants
decl_stmt|;
name|QName
name|participantsName
init|=
name|jaxbElement
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|STSConstants
operator|.
name|WSA_NS_05
operator|.
name|equals
argument_list|(
name|participantsName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
literal|"EndpointReference"
operator|.
name|equals
argument_list|(
name|participantsName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found EndpointReference element"
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|endpointReference
init|=
operator|(
name|EndpointReferenceType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpointReference
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found address element"
argument_list|)
expr_stmt|;
return|return
name|endpointReference
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Participants element does not exist or could not be parsed"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
end_class

unit|}
end_unit

