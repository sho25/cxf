begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSPropertiesMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|TokenRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|SAMLCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|bean
operator|.
name|AttributeStatementBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|bean
operator|.
name|AuthDecisionStatementBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|bean
operator|.
name|AuthenticationStatementBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|bean
operator|.
name|ConditionsBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|bean
operator|.
name|SubjectBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|common
operator|.
name|SAMLVersion
import|;
end_import

begin_comment
comment|/**  * This CallbackHandler implementation is populated with SAML Beans by the SAMLTokenProvider, and is tasked  * with setting them on a SAMLCallback object, which will be parsed (by WSS4J) into a SAML Assertion.  */
end_comment

begin_class
specifier|public
class|class
name|SamlCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
name|TokenProviderParameters
name|tokenParameters
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AttributeStatementBean
argument_list|>
name|attributeBeans
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AuthenticationStatementBean
argument_list|>
name|authBeans
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AuthDecisionStatementBean
argument_list|>
name|authDecisionBeans
decl_stmt|;
specifier|private
name|ConditionsBean
name|conditionsBean
decl_stmt|;
specifier|private
name|SubjectBean
name|subjectBean
decl_stmt|;
comment|/**      * Set the list of AttributeBeans.      */
specifier|public
name|void
name|setAttributeBeans
parameter_list|(
name|List
argument_list|<
name|AttributeStatementBean
argument_list|>
name|attributeBeanList
parameter_list|)
block|{
name|this
operator|.
name|attributeBeans
operator|=
name|attributeBeanList
expr_stmt|;
block|}
comment|/**      * Set the list of AuthenticationBeans.      */
specifier|public
name|void
name|setAuthenticationBeans
parameter_list|(
name|List
argument_list|<
name|AuthenticationStatementBean
argument_list|>
name|authBeanList
parameter_list|)
block|{
name|this
operator|.
name|authBeans
operator|=
name|authBeanList
expr_stmt|;
block|}
comment|/**      * Set the list of AuthDecisionBeans.      */
specifier|public
name|void
name|setAuthDecisionStatementBeans
parameter_list|(
name|List
argument_list|<
name|AuthDecisionStatementBean
argument_list|>
name|authDecisionBeanList
parameter_list|)
block|{
name|this
operator|.
name|authDecisionBeans
operator|=
name|authDecisionBeanList
expr_stmt|;
block|}
comment|/**      * Set the SubjectBean      */
specifier|public
name|void
name|setSubjectBean
parameter_list|(
name|SubjectBean
name|subjectBean
parameter_list|)
block|{
name|this
operator|.
name|subjectBean
operator|=
name|subjectBean
expr_stmt|;
block|}
comment|/**      * Set the ConditionsBean      */
specifier|public
name|void
name|setConditionsBean
parameter_list|(
name|ConditionsBean
name|conditionsBean
parameter_list|)
block|{
name|this
operator|.
name|conditionsBean
operator|=
name|conditionsBean
expr_stmt|;
block|}
comment|/**      * Set the TokenProviderParameters.      */
specifier|public
name|void
name|setTokenProviderParameters
parameter_list|(
name|TokenProviderParameters
name|tokenProviderParameters
parameter_list|)
block|{
name|this
operator|.
name|tokenParameters
operator|=
name|tokenProviderParameters
expr_stmt|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callbacks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|callbacks
index|[
name|i
index|]
operator|instanceof
name|SAMLCallback
condition|)
block|{
name|SAMLCallback
name|callback
init|=
operator|(
name|SAMLCallback
operator|)
name|callbacks
index|[
name|i
index|]
decl_stmt|;
comment|// Set the Subject
if|if
condition|(
name|subjectBean
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|setSubject
argument_list|(
name|subjectBean
argument_list|)
expr_stmt|;
block|}
comment|// Set the token Type.
name|TokenRequirements
name|tokenRequirements
init|=
name|tokenParameters
operator|.
name|getTokenRequirements
argument_list|()
decl_stmt|;
name|String
name|tokenType
init|=
name|tokenRequirements
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|callback
operator|.
name|setSamlVersion
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callback
operator|.
name|setSamlVersion
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_11
argument_list|)
expr_stmt|;
name|setSubjectOnBeans
argument_list|()
expr_stmt|;
block|}
comment|// Set the issuer
name|STSPropertiesMBean
name|stsProperties
init|=
name|tokenParameters
operator|.
name|getStsProperties
argument_list|()
decl_stmt|;
name|callback
operator|.
name|setIssuer
argument_list|(
name|stsProperties
operator|.
name|getIssuer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the statements
if|if
condition|(
name|attributeBeans
operator|!=
literal|null
operator|&&
operator|!
name|attributeBeans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|callback
operator|.
name|setAttributeStatementData
argument_list|(
name|attributeBeans
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|authBeans
operator|!=
literal|null
operator|&&
operator|!
name|authBeans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|callback
operator|.
name|setAuthenticationStatementData
argument_list|(
name|authBeans
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|authDecisionBeans
operator|!=
literal|null
operator|&&
operator|!
name|authDecisionBeans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|callback
operator|.
name|setAuthDecisionStatementData
argument_list|(
name|authDecisionBeans
argument_list|)
expr_stmt|;
block|}
comment|// Set the conditions
name|callback
operator|.
name|setConditions
argument_list|(
name|conditionsBean
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * For SAML 1.1 default to setting the SubjectBean on the statements if they      * don't already have a Subject defined.      */
specifier|private
name|void
name|setSubjectOnBeans
parameter_list|()
block|{
if|if
condition|(
name|attributeBeans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AttributeStatementBean
name|attributeBean
range|:
name|attributeBeans
control|)
block|{
if|if
condition|(
name|attributeBean
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|)
block|{
name|attributeBean
operator|.
name|setSubject
argument_list|(
name|subjectBean
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|authBeans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AuthenticationStatementBean
name|authBean
range|:
name|authBeans
control|)
block|{
if|if
condition|(
name|authBean
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|)
block|{
name|authBean
operator|.
name|setSubject
argument_list|(
name|subjectBean
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|authDecisionBeans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AuthDecisionStatementBean
name|authDecisionBean
range|:
name|authDecisionBeans
control|)
block|{
if|if
condition|(
name|authDecisionBean
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|)
block|{
name|authDecisionBean
operator|.
name|setSubject
argument_list|(
name|subjectBean
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

