begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|AbstractSTSEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|AbstractSTSFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|STSEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|TokenCancellerParametersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|TokenProviderParametersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|TokenRenewerParametersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|TokenValidatorParametersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|canceller
operator|.
name|TokenCancellerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|TokenProviderParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|renewer
operator|.
name|TokenRenewerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|TokenValidatorParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_class
specifier|public
class|class
name|EventMapper
implements|implements
name|STSEventListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|EventMapper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MapEventListener
name|mapEventListener
decl_stmt|;
specifier|public
name|EventMapper
parameter_list|(
name|MapEventListener
name|mapEventListener
parameter_list|)
block|{
name|this
operator|.
name|mapEventListener
operator|=
name|mapEventListener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleSTSEvent
parameter_list|(
name|AbstractSTSEvent
name|event
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|TIME
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|OPERATION
operator|.
name|name
argument_list|()
argument_list|,
name|event
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|DURATION
operator|.
name|name
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|event
operator|.
name|getDuration
argument_list|()
argument_list|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|AbstractSTSFailureEvent
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|STATUS
operator|.
name|name
argument_list|()
argument_list|,
literal|"FAILURE"
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
operator|(
operator|(
name|AbstractSTSFailureEvent
operator|)
name|event
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|EXCEPTION
operator|.
name|name
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|STATUS
operator|.
name|name
argument_list|()
argument_list|,
literal|"SUCCESS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|instanceof
name|TokenProviderParametersSupport
condition|)
block|{
name|handleEvent
argument_list|(
operator|(
name|TokenProviderParametersSupport
operator|)
name|event
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TokenValidatorParametersSupport
condition|)
block|{
name|handleEvent
argument_list|(
operator|(
name|TokenValidatorParametersSupport
operator|)
name|event
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TokenCancellerParametersSupport
condition|)
block|{
name|handleEvent
argument_list|(
operator|(
name|TokenCancellerParametersSupport
operator|)
name|event
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TokenRenewerParametersSupport
condition|)
block|{
name|handleEvent
argument_list|(
operator|(
name|TokenRenewerParametersSupport
operator|)
name|event
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Unknown STS event: "
operator|+
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MapEvent
name|mapEvent
init|=
operator|new
name|MapEvent
argument_list|(
literal|"org/apache/cxf/sts"
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|mapEventListener
operator|.
name|onEvent
argument_list|(
name|mapEvent
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleEvent
parameter_list|(
name|TokenProviderParametersSupport
name|event
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|TokenProviderParameters
name|params
init|=
name|event
operator|.
name|getTokenParameters
argument_list|()
decl_stmt|;
try|try
block|{
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|params
operator|.
name|getWebServiceContext
argument_list|()
operator|.
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_HOST
operator|.
name|name
argument_list|()
argument_list|,
name|req
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_PORT
operator|.
name|name
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|req
operator|.
name|getRemotePort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|URL
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|params
operator|.
name|getWebServiceContext
argument_list|()
operator|.
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.request.url"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_HOST
operator|.
name|name
argument_list|()
argument_list|,
literal|"N.A."
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_PORT
operator|.
name|name
argument_list|()
argument_list|,
literal|"N.A."
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|URL
operator|.
name|name
argument_list|()
argument_list|,
literal|"N.A."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|TOKENTYPE
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getTokenType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getOnBehalfOf
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|ONBEHALFOF_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getOnBehalfOf
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getActAs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|ACTAS_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getActAs
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|params
operator|.
name|getKeyRequirements
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|KEYTYPE
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getKeyRequirements
argument_list|()
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getPrincipal
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|WS_SEC_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REALM
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|APPLIESTO
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getAppliesToAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getRequestedPrimaryClaims
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|claims
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Claim
name|claim
range|:
name|params
operator|.
name|getRequestedPrimaryClaims
argument_list|()
control|)
block|{
name|claims
operator|.
name|add
argument_list|(
name|claim
operator|.
name|getClaimType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|CLAIMS_PRIMARY
operator|.
name|name
argument_list|()
argument_list|,
name|claims
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getRequestedSecondaryClaims
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|claims
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Claim
name|claim
range|:
name|params
operator|.
name|getRequestedSecondaryClaims
argument_list|()
control|)
block|{
name|claims
operator|.
name|add
argument_list|(
name|claim
operator|.
name|getClaimType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|CLAIMS_SECONDARY
operator|.
name|name
argument_list|()
argument_list|,
name|claims
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|handleEvent
parameter_list|(
name|TokenValidatorParametersSupport
name|event
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|TokenValidatorParameters
name|params
init|=
name|event
operator|.
name|getTokenParameters
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|params
operator|.
name|getWebServiceContext
argument_list|()
operator|.
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_HOST
operator|.
name|name
argument_list|()
argument_list|,
name|req
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_PORT
operator|.
name|name
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|req
operator|.
name|getRemotePort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|URL
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|params
operator|.
name|getWebServiceContext
argument_list|()
operator|.
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.request.url"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|TOKENTYPE
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getTokenType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getActAs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|VALIDATE_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getValidateTarget
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getKeyRequirements
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|KEYTYPE
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getKeyRequirements
argument_list|()
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getPrincipal
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|WS_SEC_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REALM
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleEvent
parameter_list|(
name|TokenCancellerParametersSupport
name|event
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|TokenCancellerParameters
name|params
init|=
name|event
operator|.
name|getTokenParameters
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|params
operator|.
name|getWebServiceContext
argument_list|()
operator|.
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_HOST
operator|.
name|name
argument_list|()
argument_list|,
name|req
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_PORT
operator|.
name|name
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|req
operator|.
name|getRemotePort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|URL
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|params
operator|.
name|getWebServiceContext
argument_list|()
operator|.
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.request.url"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|TOKENTYPE
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getTokenType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getActAs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|CANCEL_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getCancelTarget
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getKeyRequirements
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|KEYTYPE
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getKeyRequirements
argument_list|()
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getPrincipal
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|WS_SEC_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|handleEvent
parameter_list|(
name|TokenRenewerParametersSupport
name|event
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|TokenRenewerParameters
name|params
init|=
name|event
operator|.
name|getTokenParameters
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|params
operator|.
name|getWebServiceContext
argument_list|()
operator|.
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_HOST
operator|.
name|name
argument_list|()
argument_list|,
name|req
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REMOTE_PORT
operator|.
name|name
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|req
operator|.
name|getRemotePort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|URL
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|params
operator|.
name|getWebServiceContext
argument_list|()
operator|.
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.request.url"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|TOKENTYPE
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getTokenType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getRenewTarget
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|RENEW_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getRenewTarget
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getPrincipal
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|WS_SEC_PRINCIPAL
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getKeyRequirements
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|KEYTYPE
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getKeyRequirements
argument_list|()
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|REALM
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|KEYS
operator|.
name|APPLIESTO
operator|.
name|name
argument_list|()
argument_list|,
name|params
operator|.
name|getAppliesToAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

