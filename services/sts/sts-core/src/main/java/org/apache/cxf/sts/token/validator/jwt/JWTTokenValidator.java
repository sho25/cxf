begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|jwt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|SimplePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSPropertiesMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|ReceivedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|ReceivedToken
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|TokenValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|TokenValidatorParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|TokenValidatorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Merlin
import|;
end_import

begin_comment
comment|/**  * Validate a SAML Assertion. It is valid if it was issued and signed by this STS.  */
end_comment

begin_class
specifier|public
class|class
name|JWTTokenValidator
implements|implements
name|TokenValidator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JWTTokenValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|clockOffset
decl_stmt|;
specifier|private
name|int
name|ttl
decl_stmt|;
comment|/**      * Return true if this TokenValidator implementation is capable of validating the      * ReceivedToken argument.      */
specifier|public
name|boolean
name|canHandleToken
parameter_list|(
name|ReceivedToken
name|validateTarget
parameter_list|)
block|{
return|return
name|canHandleToken
argument_list|(
name|validateTarget
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Return true if this TokenValidator implementation is capable of validating the      * ReceivedToken argument. The realm is ignored in this Validator.      */
specifier|public
name|boolean
name|canHandleToken
parameter_list|(
name|ReceivedToken
name|validateTarget
parameter_list|,
name|String
name|realm
parameter_list|)
block|{
name|Object
name|token
init|=
name|validateTarget
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
operator|(
name|String
operator|)
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Validate a Token using the given TokenValidatorParameters.      */
specifier|public
name|TokenValidatorResponse
name|validateToken
parameter_list|(
name|TokenValidatorParameters
name|tokenParameters
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Validating JWT Token"
argument_list|)
expr_stmt|;
name|STSPropertiesMBean
name|stsProperties
init|=
name|tokenParameters
operator|.
name|getStsProperties
argument_list|()
decl_stmt|;
name|TokenValidatorResponse
name|response
init|=
operator|new
name|TokenValidatorResponse
argument_list|()
decl_stmt|;
name|ReceivedToken
name|validateTarget
init|=
name|tokenParameters
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|validateTarget
operator|.
name|setState
argument_list|(
name|STATE
operator|.
name|INVALID
argument_list|)
expr_stmt|;
name|response
operator|.
name|setToken
argument_list|(
name|validateTarget
argument_list|)
expr_stmt|;
name|String
name|token
init|=
operator|(
name|String
operator|)
name|validateTarget
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
name|response
return|;
block|}
if|if
condition|(
name|token
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"JWT Token appears not to be signed. Validation has failed"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
comment|// Verify the signature
name|Properties
name|verificationProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Crypto
name|signatureCrypto
init|=
name|stsProperties
operator|.
name|getSignatureCrypto
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|stsProperties
operator|.
name|getSignatureUsername
argument_list|()
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|verificationProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE_ALIAS
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|signatureCrypto
operator|instanceof
name|Merlin
operator|)
condition|)
block|{
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Can't get the keystore"
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
name|KeyStore
name|keystore
init|=
operator|(
operator|(
name|Merlin
operator|)
name|signatureCrypto
operator|)
operator|.
name|getKeyStore
argument_list|()
decl_stmt|;
name|verificationProperties
operator|.
name|put
argument_list|(
name|JoseConstants
operator|.
name|RSSEC_KEY_STORE
argument_list|,
name|keystore
argument_list|)
expr_stmt|;
name|JwsSignatureVerifier
name|signatureVerifier
init|=
name|JwsUtils
operator|.
name|loadSignatureVerifier
argument_list|(
name|verificationProperties
argument_list|,
name|jwt
operator|.
name|getJwsHeaders
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jwtConsumer
operator|.
name|verifySignatureWith
argument_list|(
name|signatureVerifier
argument_list|)
condition|)
block|{
return|return
name|response
return|;
block|}
try|try
block|{
name|validateToken
argument_list|(
name|jwt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"JWT token validation failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/*         // Parse roles from the validated token         if (samlRoleParser != null) {             Set<Principal> roles =                  samlRoleParser.parseRolesFromAssertion(principal, null, assertion);             response.setRoles(roles);         }          // Get the realm of the SAML token         String tokenRealm = null;         if (samlRealmCodec != null) {             tokenRealm = samlRealmCodec.getRealmFromToken(assertion);             // verify the realm against the cached token             if (secToken != null) {                 Map<String, Object> props = secToken.getProperties();                 if (props != null) {                     String cachedRealm = (String)props.get(STSConstants.TOKEN_REALM);                     if (cachedRealm != null&& !tokenRealm.equals(cachedRealm)) {                         return response;                     }                 }             }         }         response.setTokenRealm(tokenRealm);         */
if|if
condition|(
name|isVerifiedWithAPublicKey
argument_list|(
name|jwt
argument_list|)
condition|)
block|{
name|Principal
name|principal
init|=
operator|new
name|SimplePrincipal
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setPrincipal
argument_list|(
name|principal
argument_list|)
expr_stmt|;
block|}
name|validateTarget
operator|.
name|setState
argument_list|(
name|STATE
operator|.
name|VALID
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"JWT Token successfully validated"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|private
name|boolean
name|isVerifiedWithAPublicKey
parameter_list|(
name|JwtToken
name|jwt
parameter_list|)
block|{
name|String
name|alg
init|=
operator|(
name|String
operator|)
name|jwt
operator|.
name|getJwsHeader
argument_list|(
name|JoseConstants
operator|.
name|HEADER_ALGORITHM
argument_list|)
decl_stmt|;
name|SignatureAlgorithm
name|sigAlg
init|=
name|SignatureAlgorithm
operator|.
name|getAlgorithm
argument_list|(
name|alg
argument_list|)
decl_stmt|;
return|return
name|SignatureAlgorithm
operator|.
name|isPublicKeyAlgorithm
argument_list|(
name|sigAlg
argument_list|)
return|;
block|}
specifier|protected
name|void
name|validateToken
parameter_list|(
name|JwtToken
name|jwt
parameter_list|)
block|{
comment|// If we have no issued time then we need to have an expiry
name|boolean
name|expiredRequired
init|=
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getIssuedAt
argument_list|()
operator|==
literal|null
decl_stmt|;
name|JwtUtils
operator|.
name|validateJwtExpiry
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
argument_list|,
name|clockOffset
argument_list|,
name|expiredRequired
argument_list|)
expr_stmt|;
name|JwtUtils
operator|.
name|validateJwtNotBefore
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
argument_list|,
name|clockOffset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// If we have no expiry then we must have an issued at
name|boolean
name|issuedAtRequired
init|=
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getExpiryTime
argument_list|()
operator|==
literal|null
decl_stmt|;
name|JwtUtils
operator|.
name|validateJwtIssuedAt
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
argument_list|,
name|ttl
argument_list|,
name|clockOffset
argument_list|,
name|issuedAtRequired
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getClockOffset
parameter_list|()
block|{
return|return
name|clockOffset
return|;
block|}
specifier|public
name|void
name|setClockOffset
parameter_list|(
name|int
name|clockOffset
parameter_list|)
block|{
name|this
operator|.
name|clockOffset
operator|=
name|clockOffset
expr_stmt|;
block|}
specifier|public
name|int
name|getTtl
parameter_list|()
block|{
return|return
name|ttl
return|;
block|}
specifier|public
name|void
name|setTtl
parameter_list|(
name|int
name|ttl
parameter_list|)
block|{
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
block|}
block|}
end_class

end_unit

