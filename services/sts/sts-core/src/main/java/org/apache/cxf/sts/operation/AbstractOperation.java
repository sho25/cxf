begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|QNameConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|RealmParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSPropertiesMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|AbstractSTSEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|event
operator|.
name|STSEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|KeyRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|ReceivedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|ReceivedToken
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|RequestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|RequestRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|TokenRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|service
operator|.
name|EncryptionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|service
operator|.
name|ServiceMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|delegation
operator|.
name|TokenDelegationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|delegation
operator|.
name|TokenDelegationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|delegation
operator|.
name|TokenDelegationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|TokenProviderParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|TokenReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|realm
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|realm
operator|.
name|RelationshipResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|TokenValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|TokenValidatorParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|TokenValidatorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|LifetimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestSecurityTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestedReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|KeyIdentifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|ReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|SecurityTokenReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|utility
operator|.
name|AttributedDateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|WSS4JUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|WSEncryptionPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|util
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecEncrypt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecEncryptedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|util
operator|.
name|XmlSchemaDateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|WSSecurityEventConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|exceptions
operator|.
name|XMLSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|AbstractSecuredElementSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEventConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|TokenSecurityEvent
import|;
end_import

begin_comment
comment|/**  * This abstract class contains some common functionality for different operations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOperation
block|{
specifier|public
specifier|static
specifier|final
name|QName
name|TOKEN_TYPE
init|=
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|WSSE11_NS
argument_list|,
name|WSConstants
operator|.
name|TOKEN_TYPE
argument_list|,
name|WSConstants
operator|.
name|WSSE11_PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractOperation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|STSPropertiesMBean
name|stsProperties
decl_stmt|;
specifier|protected
name|boolean
name|encryptIssuedToken
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|ServiceMBean
argument_list|>
name|services
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|tokenProviders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|TokenValidator
argument_list|>
name|tokenValidators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|returnReferences
init|=
literal|true
decl_stmt|;
specifier|protected
name|TokenStore
name|tokenStore
decl_stmt|;
specifier|protected
name|ClaimsManager
name|claimsManager
init|=
operator|new
name|ClaimsManager
argument_list|()
decl_stmt|;
specifier|protected
name|STSEventListener
name|eventPublisher
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|TokenDelegationHandler
argument_list|>
name|delegationHandlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|isReturnReferences
parameter_list|()
block|{
return|return
name|returnReferences
return|;
block|}
specifier|public
name|void
name|setReturnReferences
parameter_list|(
name|boolean
name|returnReferences
parameter_list|)
block|{
name|this
operator|.
name|returnReferences
operator|=
name|returnReferences
expr_stmt|;
block|}
specifier|public
name|TokenStore
name|getTokenStore
parameter_list|()
block|{
return|return
name|tokenStore
return|;
block|}
specifier|public
name|void
name|setTokenStore
parameter_list|(
name|TokenStore
name|tokenStore
parameter_list|)
block|{
name|this
operator|.
name|tokenStore
operator|=
name|tokenStore
expr_stmt|;
block|}
specifier|public
name|void
name|setStsProperties
parameter_list|(
name|STSPropertiesMBean
name|stsProperties
parameter_list|)
block|{
name|this
operator|.
name|stsProperties
operator|=
name|stsProperties
expr_stmt|;
block|}
specifier|public
name|void
name|setEncryptIssuedToken
parameter_list|(
name|boolean
name|encryptIssuedToken
parameter_list|)
block|{
name|this
operator|.
name|encryptIssuedToken
operator|=
name|encryptIssuedToken
expr_stmt|;
block|}
specifier|public
name|void
name|setServices
parameter_list|(
name|List
argument_list|<
name|ServiceMBean
argument_list|>
name|services
parameter_list|)
block|{
name|this
operator|.
name|services
operator|=
name|services
expr_stmt|;
block|}
specifier|public
name|void
name|setTokenProviders
parameter_list|(
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|tokenProviders
parameter_list|)
block|{
name|this
operator|.
name|tokenProviders
operator|=
name|tokenProviders
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TokenDelegationHandler
argument_list|>
name|getDelegationHandlers
parameter_list|()
block|{
return|return
name|delegationHandlers
return|;
block|}
specifier|public
name|void
name|setDelegationHandlers
parameter_list|(
name|List
argument_list|<
name|TokenDelegationHandler
argument_list|>
name|delegationHandlers
parameter_list|)
block|{
name|this
operator|.
name|delegationHandlers
operator|=
name|delegationHandlers
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|getTokenProviders
parameter_list|()
block|{
return|return
name|tokenProviders
return|;
block|}
specifier|public
name|void
name|setTokenValidators
parameter_list|(
name|List
argument_list|<
name|TokenValidator
argument_list|>
name|tokenValidators
parameter_list|)
block|{
name|this
operator|.
name|tokenValidators
operator|=
name|tokenValidators
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TokenValidator
argument_list|>
name|getTokenValidators
parameter_list|()
block|{
return|return
name|tokenValidators
return|;
block|}
specifier|public
name|ClaimsManager
name|getClaimsManager
parameter_list|()
block|{
return|return
name|claimsManager
return|;
block|}
specifier|public
name|void
name|setClaimsManager
parameter_list|(
name|ClaimsManager
name|claimsManager
parameter_list|)
block|{
name|this
operator|.
name|claimsManager
operator|=
name|claimsManager
expr_stmt|;
block|}
comment|/**      * Check the arguments from the STSProvider and parse the request.      */
specifier|protected
name|RequestRequirements
name|parseRequest
parameter_list|(
name|RequestSecurityTokenType
name|request
parameter_list|,
name|WebServiceContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getMessageContext
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|STSException
argument_list|(
literal|"No message context found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|stsProperties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|STSException
argument_list|(
literal|"No STSProperties object found"
argument_list|)
throw|;
block|}
name|stsProperties
operator|.
name|configureProperties
argument_list|()
expr_stmt|;
name|RequestParser
name|requestParser
init|=
operator|new
name|RequestParser
argument_list|()
decl_stmt|;
return|return
name|requestParser
operator|.
name|parseRequest
argument_list|(
name|request
argument_list|,
name|context
argument_list|,
name|stsProperties
argument_list|,
name|claimsManager
operator|.
name|getClaimParsers
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Create a RequestedReferenceType object using a TokenReference object      */
specifier|protected
specifier|static
name|RequestedReferenceType
name|createRequestedReference
parameter_list|(
name|TokenReference
name|tokenReference
parameter_list|,
name|boolean
name|attached
parameter_list|)
block|{
name|RequestedReferenceType
name|requestedReferenceType
init|=
name|QNameConstants
operator|.
name|WS_TRUST_FACTORY
operator|.
name|createRequestedReferenceType
argument_list|()
decl_stmt|;
name|SecurityTokenReferenceType
name|securityTokenReferenceType
init|=
name|QNameConstants
operator|.
name|WSSE_FACTORY
operator|.
name|createSecurityTokenReferenceType
argument_list|()
decl_stmt|;
comment|// TokenType
name|String
name|tokenType
init|=
name|tokenReference
operator|.
name|getWsse11TokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|!=
literal|null
condition|)
block|{
name|securityTokenReferenceType
operator|.
name|getOtherAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|TOKEN_TYPE
argument_list|,
name|tokenType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenReference
operator|.
name|isUseKeyIdentifier
argument_list|()
condition|)
block|{
name|String
name|identifier
init|=
name|XMLUtils
operator|.
name|getIDFromReference
argument_list|(
name|tokenReference
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|KeyIdentifierType
name|keyIdentifierType
init|=
name|QNameConstants
operator|.
name|WSSE_FACTORY
operator|.
name|createKeyIdentifierType
argument_list|()
decl_stmt|;
name|keyIdentifierType
operator|.
name|setValue
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|String
name|valueType
init|=
name|tokenReference
operator|.
name|getWsseValueType
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueType
operator|!=
literal|null
condition|)
block|{
name|keyIdentifierType
operator|.
name|setValueType
argument_list|(
name|valueType
argument_list|)
expr_stmt|;
block|}
name|JAXBElement
argument_list|<
name|KeyIdentifierType
argument_list|>
name|keyIdentifier
init|=
name|QNameConstants
operator|.
name|WSSE_FACTORY
operator|.
name|createKeyIdentifier
argument_list|(
name|keyIdentifierType
argument_list|)
decl_stmt|;
name|securityTokenReferenceType
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|keyIdentifier
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenReference
operator|.
name|isUseDirectReference
argument_list|()
condition|)
block|{
name|String
name|identifier
init|=
name|tokenReference
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|attached
operator|&&
name|identifier
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'#'
condition|)
block|{
name|identifier
operator|=
literal|"#"
operator|+
name|identifier
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|attached
operator|&&
name|identifier
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
name|identifier
operator|=
name|identifier
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|ReferenceType
name|referenceType
init|=
name|QNameConstants
operator|.
name|WSSE_FACTORY
operator|.
name|createReferenceType
argument_list|()
decl_stmt|;
name|referenceType
operator|.
name|setURI
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|String
name|valueType
init|=
name|tokenReference
operator|.
name|getWsseValueType
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueType
operator|!=
literal|null
condition|)
block|{
name|referenceType
operator|.
name|setValueType
argument_list|(
name|valueType
argument_list|)
expr_stmt|;
block|}
name|JAXBElement
argument_list|<
name|ReferenceType
argument_list|>
name|reference
init|=
name|QNameConstants
operator|.
name|WSSE_FACTORY
operator|.
name|createReference
argument_list|(
name|referenceType
argument_list|)
decl_stmt|;
name|securityTokenReferenceType
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
name|requestedReferenceType
operator|.
name|setSecurityTokenReference
argument_list|(
name|securityTokenReferenceType
argument_list|)
expr_stmt|;
return|return
name|requestedReferenceType
return|;
block|}
comment|/**      * Create a RequestedReferenceType object using a token id and tokenType      */
specifier|protected
specifier|static
name|RequestedReferenceType
name|createRequestedReference
parameter_list|(
name|String
name|tokenId
parameter_list|,
name|String
name|tokenType
parameter_list|,
name|boolean
name|attached
parameter_list|)
block|{
name|TokenReference
name|tokenReference
init|=
operator|new
name|TokenReference
argument_list|()
decl_stmt|;
name|tokenReference
operator|.
name|setIdentifier
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|tokenReference
operator|.
name|setWsse11TokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|tokenReference
operator|.
name|setUseKeyIdentifier
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tokenReference
operator|.
name|setWsseValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|tokenReference
operator|.
name|setWsse11TokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
name|tokenReference
operator|.
name|setUseKeyIdentifier
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tokenReference
operator|.
name|setWsseValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenReference
operator|.
name|setUseDirectReference
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tokenReference
operator|.
name|setWsseValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
block|}
return|return
name|createRequestedReference
argument_list|(
name|tokenReference
argument_list|,
name|attached
argument_list|)
return|;
block|}
comment|/**      * Create a LifetimeType object given a created + expires Dates      */
specifier|protected
specifier|static
name|LifetimeType
name|createLifetime
parameter_list|(
name|Date
name|tokenCreated
parameter_list|,
name|Date
name|tokenExpires
parameter_list|)
block|{
name|AttributedDateTime
name|created
init|=
name|QNameConstants
operator|.
name|UTIL_FACTORY
operator|.
name|createAttributedDateTime
argument_list|()
decl_stmt|;
name|AttributedDateTime
name|expires
init|=
name|QNameConstants
operator|.
name|UTIL_FACTORY
operator|.
name|createAttributedDateTime
argument_list|()
decl_stmt|;
name|Date
name|creationTime
init|=
name|tokenCreated
decl_stmt|;
if|if
condition|(
name|creationTime
operator|==
literal|null
condition|)
block|{
name|creationTime
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
block|}
name|Date
name|expirationTime
init|=
name|tokenExpires
decl_stmt|;
if|if
condition|(
name|expirationTime
operator|==
literal|null
condition|)
block|{
name|expirationTime
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|long
name|lifeTimeOfToken
init|=
literal|300L
decl_stmt|;
name|expirationTime
operator|.
name|setTime
argument_list|(
name|creationTime
operator|.
name|getTime
argument_list|()
operator|+
operator|(
name|lifeTimeOfToken
operator|*
literal|1000L
operator|)
argument_list|)
expr_stmt|;
block|}
name|XmlSchemaDateFormat
name|fmt
init|=
operator|new
name|XmlSchemaDateFormat
argument_list|()
decl_stmt|;
name|created
operator|.
name|setValue
argument_list|(
name|fmt
operator|.
name|format
argument_list|(
name|creationTime
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Token lifetime creation: "
operator|+
name|created
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|expires
operator|.
name|setValue
argument_list|(
name|fmt
operator|.
name|format
argument_list|(
name|expirationTime
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Token lifetime expiration: "
operator|+
name|expires
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|LifetimeType
name|lifetimeType
init|=
name|QNameConstants
operator|.
name|WS_TRUST_FACTORY
operator|.
name|createLifetimeType
argument_list|()
decl_stmt|;
name|lifetimeType
operator|.
name|setCreated
argument_list|(
name|created
argument_list|)
expr_stmt|;
name|lifetimeType
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
return|return
name|lifetimeType
return|;
block|}
comment|/**      * Encrypt a Token element using the given arguments.      */
specifier|protected
name|Element
name|encryptToken
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|id
parameter_list|,
name|EncryptionProperties
name|encryptionProperties
parameter_list|,
name|KeyRequirements
name|keyRequirements
parameter_list|,
name|WebServiceContext
name|context
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|String
name|name
init|=
name|encryptionProperties
operator|.
name|getEncryptionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|stsProperties
operator|.
name|getEncryptionUsername
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"No encryption alias is configured"
argument_list|)
expr_stmt|;
return|return
name|element
return|;
block|}
comment|// Get the encryption algorithm to use
name|String
name|encryptionAlgorithm
init|=
name|keyRequirements
operator|.
name|getEncryptionAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|encryptionAlgorithm
operator|==
literal|null
condition|)
block|{
comment|// If none then default to what is configured
name|encryptionAlgorithm
operator|=
name|encryptionProperties
operator|.
name|getEncryptionAlgorithm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
init|=
name|encryptionProperties
operator|.
name|getAcceptedEncryptionAlgorithms
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|supportedAlgorithms
operator|.
name|contains
argument_list|(
name|encryptionAlgorithm
argument_list|)
condition|)
block|{
name|encryptionAlgorithm
operator|=
name|encryptionProperties
operator|.
name|getEncryptionAlgorithm
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"EncryptionAlgorithm not supported, defaulting to: "
operator|+
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get the key-wrap algorithm to use
name|String
name|keyWrapAlgorithm
init|=
name|keyRequirements
operator|.
name|getKeywrapAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyWrapAlgorithm
operator|==
literal|null
condition|)
block|{
comment|// If none then default to what is configured
name|keyWrapAlgorithm
operator|=
name|encryptionProperties
operator|.
name|getKeyWrapAlgorithm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
init|=
name|encryptionProperties
operator|.
name|getAcceptedKeyWrapAlgorithms
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|supportedAlgorithms
operator|.
name|contains
argument_list|(
name|keyWrapAlgorithm
argument_list|)
condition|)
block|{
name|keyWrapAlgorithm
operator|=
name|encryptionProperties
operator|.
name|getKeyWrapAlgorithm
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"KeyWrapAlgorithm not supported, defaulting to: "
operator|+
name|keyWrapAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
name|WSSecEncrypt
name|builder
init|=
operator|new
name|WSSecEncrypt
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSHandlerConstants
operator|.
name|USE_REQ_SIG_CERT
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|X509Certificate
name|cert
init|=
name|getReqSigCert
argument_list|(
name|context
operator|.
name|getMessageContext
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setUseThisCert
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setUserInfo
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setKeyIdentifierType
argument_list|(
name|encryptionProperties
operator|.
name|getKeyIdentifierType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSymmetricEncAlgorithm
argument_list|(
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setKeyEncAlgo
argument_list|(
name|keyWrapAlgorithm
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setEmbedEncryptedKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WSEncryptionPart
name|encryptionPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|encryptionPart
operator|.
name|setElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|element
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|builder
operator|.
name|prepare
argument_list|(
name|element
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|stsProperties
operator|.
name|getEncryptionCrypto
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|encryptForRef
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|encryptionPart
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
comment|/**      * Encrypt a secret using the given arguments producing a DOM EncryptedKey element      */
specifier|protected
name|Element
name|encryptSecret
parameter_list|(
name|byte
index|[]
name|secret
parameter_list|,
name|EncryptionProperties
name|encryptionProperties
parameter_list|,
name|KeyRequirements
name|keyRequirements
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|String
name|name
init|=
name|encryptionProperties
operator|.
name|getEncryptionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|stsProperties
operator|.
name|getEncryptionUsername
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|STSException
argument_list|(
literal|"No encryption alias is configured"
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
comment|// Get the key-wrap algorithm to use
name|String
name|keyWrapAlgorithm
init|=
name|keyRequirements
operator|.
name|getKeywrapAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyWrapAlgorithm
operator|==
literal|null
condition|)
block|{
comment|// If none then default to what is configured
name|keyWrapAlgorithm
operator|=
name|encryptionProperties
operator|.
name|getKeyWrapAlgorithm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
init|=
name|encryptionProperties
operator|.
name|getAcceptedKeyWrapAlgorithms
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|supportedAlgorithms
operator|.
name|contains
argument_list|(
name|keyWrapAlgorithm
argument_list|)
condition|)
block|{
name|keyWrapAlgorithm
operator|=
name|encryptionProperties
operator|.
name|getKeyWrapAlgorithm
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"KeyWrapAlgorithm not supported, defaulting to: "
operator|+
name|keyWrapAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
name|WSSecEncryptedKey
name|builder
init|=
operator|new
name|WSSecEncryptedKey
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setUserInfo
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setKeyIdentifierType
argument_list|(
name|encryptionProperties
operator|.
name|getKeyIdentifierType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setEphemeralKey
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setKeyEncAlgo
argument_list|(
name|keyWrapAlgorithm
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prepare
argument_list|(
name|doc
argument_list|,
name|stsProperties
operator|.
name|getEncryptionCrypto
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getEncryptedKeyElement
argument_list|()
return|;
block|}
comment|/**      * Extract an address from an AppliesTo DOM element      */
specifier|protected
name|String
name|extractAddressFromAppliesTo
parameter_list|(
name|Element
name|appliesTo
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Parsing AppliesTo element"
argument_list|)
expr_stmt|;
if|if
condition|(
name|appliesTo
operator|!=
literal|null
condition|)
block|{
name|Element
name|endpointRef
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|appliesTo
argument_list|,
name|STSConstants
operator|.
name|WSA_NS_05
argument_list|,
literal|"EndpointReference"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointRef
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found EndpointReference element"
argument_list|)
expr_stmt|;
name|Element
name|address
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|endpointRef
argument_list|,
name|STSConstants
operator|.
name|WSA_NS_05
argument_list|,
literal|"Address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found address element"
argument_list|)
expr_stmt|;
return|return
name|address
operator|.
name|getTextContent
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|appliesTo
operator|.
name|getNamespaceURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Element
name|uri
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|appliesTo
argument_list|,
name|appliesTo
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"URI"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found URI element"
argument_list|)
expr_stmt|;
return|return
name|uri
operator|.
name|getTextContent
argument_list|()
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"AppliesTo element does not exist or could not be parsed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Create a TokenProviderParameters object given a RequestParser and WebServiceContext object      */
specifier|protected
name|TokenProviderParameters
name|createTokenProviderParameters
parameter_list|(
name|RequestRequirements
name|requestRequirements
parameter_list|,
name|WebServiceContext
name|context
parameter_list|)
block|{
name|TokenProviderParameters
name|providerParameters
init|=
operator|new
name|TokenProviderParameters
argument_list|()
decl_stmt|;
name|providerParameters
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setPrincipal
argument_list|(
name|context
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setWebServiceContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setTokenStore
argument_list|(
name|getTokenStore
argument_list|()
argument_list|)
expr_stmt|;
name|KeyRequirements
name|keyRequirements
init|=
name|requestRequirements
operator|.
name|getKeyRequirements
argument_list|()
decl_stmt|;
name|TokenRequirements
name|tokenRequirements
init|=
name|requestRequirements
operator|.
name|getTokenRequirements
argument_list|()
decl_stmt|;
name|providerParameters
operator|.
name|setKeyRequirements
argument_list|(
name|keyRequirements
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setTokenRequirements
argument_list|(
name|tokenRequirements
argument_list|)
expr_stmt|;
comment|// Extract AppliesTo
name|String
name|address
init|=
name|extractAddressFromAppliesTo
argument_list|(
name|tokenRequirements
operator|.
name|getAppliesTo
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"The AppliesTo address that has been received is: "
operator|+
name|address
argument_list|)
expr_stmt|;
name|providerParameters
operator|.
name|setAppliesToAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
comment|// Get the realm of the request
if|if
condition|(
name|stsProperties
operator|.
name|getRealmParser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RealmParser
name|realmParser
init|=
name|stsProperties
operator|.
name|getRealmParser
argument_list|()
decl_stmt|;
name|String
name|realm
init|=
name|realmParser
operator|.
name|parseRealm
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|providerParameters
operator|.
name|setRealm
argument_list|(
name|realm
argument_list|)
expr_stmt|;
block|}
comment|// Set the requested Claims
name|ClaimCollection
name|claims
init|=
name|tokenRequirements
operator|.
name|getPrimaryClaims
argument_list|()
decl_stmt|;
name|providerParameters
operator|.
name|setRequestedPrimaryClaims
argument_list|(
name|claims
argument_list|)
expr_stmt|;
name|claims
operator|=
name|tokenRequirements
operator|.
name|getSecondaryClaims
argument_list|()
expr_stmt|;
name|providerParameters
operator|.
name|setRequestedSecondaryClaims
argument_list|(
name|claims
argument_list|)
expr_stmt|;
name|EncryptionProperties
name|encryptionProperties
init|=
name|stsProperties
operator|.
name|getEncryptionProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|boolean
name|foundService
init|=
literal|false
decl_stmt|;
comment|// Get the stored Service object corresponding to the Service endpoint
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceMBean
name|service
range|:
name|services
control|)
block|{
if|if
condition|(
name|service
operator|.
name|isAddressInEndpoints
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|EncryptionProperties
name|svcEncryptionProperties
init|=
name|service
operator|.
name|getEncryptionProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|svcEncryptionProperties
operator|!=
literal|null
condition|)
block|{
name|encryptionProperties
operator|=
name|svcEncryptionProperties
expr_stmt|;
block|}
if|if
condition|(
name|tokenRequirements
operator|.
name|getTokenType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|tokenType
init|=
name|service
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
name|tokenRequirements
operator|.
name|setTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Using default token type of: "
operator|+
name|tokenType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyRequirements
operator|.
name|getKeyType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|keyType
init|=
name|service
operator|.
name|getKeyType
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Using default key type of: "
operator|+
name|keyType
argument_list|)
expr_stmt|;
block|}
name|foundService
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundService
condition|)
block|{
name|String
name|msg
init|=
literal|"No service corresponding to "
operator|+
name|address
operator|+
literal|" is known. Check 'services' property configuration in SecurityTokenServiceProvider"
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
name|msg
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
block|}
name|providerParameters
operator|.
name|setEncryptionProperties
argument_list|(
name|encryptionProperties
argument_list|)
expr_stmt|;
return|return
name|providerParameters
return|;
block|}
comment|/**      * Get the X509Certificate associated with the signature that was received. This cert is to be used      * for encrypting the issued token.      */
specifier|private
name|X509Certificate
name|getReqSigCert
parameter_list|(
name|MessageContext
name|context
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
decl_stmt|;
comment|// DOM
name|X509Certificate
name|cert
init|=
name|WSS4JUtils
operator|.
name|getReqSigCert
argument_list|(
name|results
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|!=
literal|null
condition|)
block|{
return|return
name|cert
return|;
block|}
comment|// Streaming
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingEventList
init|=
operator|(
name|List
argument_list|<
name|SecurityEvent
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|SecurityEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".in"
argument_list|)
decl_stmt|;
if|if
condition|(
name|incomingEventList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SecurityEvent
name|incomingEvent
range|:
name|incomingEventList
control|)
block|{
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|SignedPart
operator|==
name|incomingEvent
operator|.
name|getSecurityEventType
argument_list|()
operator|||
name|WSSecurityEventConstants
operator|.
name|SignedElement
operator|==
name|incomingEvent
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityToken
name|token
init|=
operator|(
operator|(
name|AbstractSecuredElementSecurityEvent
operator|)
name|incomingEvent
operator|)
operator|.
name|getSecurityToken
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getX509Certificates
argument_list|()
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getX509Certificates
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|token
operator|.
name|getX509Certificates
argument_list|()
index|[
literal|0
index|]
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLSecurityException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|TokenValidatorResponse
name|validateReceivedToken
parameter_list|(
name|WebServiceContext
name|context
parameter_list|,
name|String
name|realm
parameter_list|,
name|TokenRequirements
name|tokenRequirements
parameter_list|,
name|ReceivedToken
name|token
parameter_list|)
block|{
name|token
operator|.
name|setState
argument_list|(
name|STATE
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|TokenRequirements
name|validateRequirements
init|=
operator|new
name|TokenRequirements
argument_list|()
decl_stmt|;
name|validateRequirements
operator|.
name|setValidateTarget
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|TokenValidatorParameters
name|validatorParameters
init|=
operator|new
name|TokenValidatorParameters
argument_list|()
decl_stmt|;
name|validatorParameters
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
name|validatorParameters
operator|.
name|setPrincipal
argument_list|(
name|context
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|validatorParameters
operator|.
name|setWebServiceContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|validatorParameters
operator|.
name|setTokenStore
argument_list|(
name|getTokenStore
argument_list|()
argument_list|)
expr_stmt|;
name|validatorParameters
operator|.
name|setKeyRequirements
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|validatorParameters
operator|.
name|setTokenRequirements
argument_list|(
name|validateRequirements
argument_list|)
expr_stmt|;
name|validatorParameters
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenValidators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"No token validators have been configured to validate the received token"
argument_list|)
expr_stmt|;
block|}
name|TokenValidatorResponse
name|tokenResponse
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TokenValidator
name|tokenValidator
range|:
name|tokenValidators
control|)
block|{
name|boolean
name|canHandle
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|realm
operator|==
literal|null
condition|)
block|{
name|canHandle
operator|=
name|tokenValidator
operator|.
name|canHandleToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|canHandle
operator|=
name|tokenValidator
operator|.
name|canHandleToken
argument_list|(
name|token
argument_list|,
name|realm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canHandle
condition|)
block|{
try|try
block|{
name|tokenResponse
operator|=
name|tokenValidator
operator|.
name|validateToken
argument_list|(
name|validatorParameters
argument_list|)
expr_stmt|;
name|token
operator|=
name|tokenResponse
operator|.
name|getToken
argument_list|()
expr_stmt|;
comment|// The parsed principal/roles is set if available. It's up to other
comment|// components to deal with the STATE of the validation
name|token
operator|.
name|setPrincipal
argument_list|(
name|tokenResponse
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setRoles
argument_list|(
name|tokenResponse
operator|.
name|getRoles
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed to validate the token"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|token
operator|.
name|setState
argument_list|(
name|STATE
operator|.
name|INVALID
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|tokenResponse
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"No token validator has been configured to validate the received token"
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenResponse
return|;
block|}
specifier|protected
name|void
name|performDelegationHandling
parameter_list|(
name|RequestRequirements
name|requestRequirements
parameter_list|,
name|WebServiceContext
name|context
parameter_list|,
name|ReceivedToken
name|token
parameter_list|,
name|Principal
name|tokenPrincipal
parameter_list|,
name|Set
argument_list|<
name|Principal
argument_list|>
name|tokenRoles
parameter_list|)
block|{
name|TokenDelegationParameters
name|delegationParameters
init|=
operator|new
name|TokenDelegationParameters
argument_list|()
decl_stmt|;
name|delegationParameters
operator|.
name|setStsProperties
argument_list|(
name|stsProperties
argument_list|)
expr_stmt|;
name|delegationParameters
operator|.
name|setPrincipal
argument_list|(
name|context
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|delegationParameters
operator|.
name|setWebServiceContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|delegationParameters
operator|.
name|setTokenStore
argument_list|(
name|getTokenStore
argument_list|()
argument_list|)
expr_stmt|;
name|delegationParameters
operator|.
name|setTokenPrincipal
argument_list|(
name|tokenPrincipal
argument_list|)
expr_stmt|;
name|delegationParameters
operator|.
name|setTokenRoles
argument_list|(
name|tokenRoles
argument_list|)
expr_stmt|;
name|KeyRequirements
name|keyRequirements
init|=
name|requestRequirements
operator|.
name|getKeyRequirements
argument_list|()
decl_stmt|;
name|TokenRequirements
name|tokenRequirements
init|=
name|requestRequirements
operator|.
name|getTokenRequirements
argument_list|()
decl_stmt|;
name|delegationParameters
operator|.
name|setKeyRequirements
argument_list|(
name|keyRequirements
argument_list|)
expr_stmt|;
name|delegationParameters
operator|.
name|setTokenRequirements
argument_list|(
name|tokenRequirements
argument_list|)
expr_stmt|;
comment|// Extract AppliesTo
name|String
name|address
init|=
name|extractAddressFromAppliesTo
argument_list|(
name|tokenRequirements
operator|.
name|getAppliesTo
argument_list|()
argument_list|)
decl_stmt|;
name|delegationParameters
operator|.
name|setAppliesToAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|delegationParameters
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|TokenDelegationResponse
name|tokenResponse
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TokenDelegationHandler
name|delegationHandler
range|:
name|delegationHandlers
control|)
block|{
if|if
condition|(
name|delegationHandler
operator|.
name|canHandleToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
try|try
block|{
name|tokenResponse
operator|=
name|delegationHandler
operator|.
name|isDelegationAllowed
argument_list|(
name|delegationParameters
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|""
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Error in delegation handling"
argument_list|,
name|ex
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|tokenResponse
operator|==
literal|null
operator|||
operator|!
name|tokenResponse
operator|.
name|isDelegationAllowed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"No matching token delegation handler found"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"No matching token delegation handler found"
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|checkClaimsSupport
parameter_list|(
name|ClaimCollection
name|requestedClaims
parameter_list|)
block|{
if|if
condition|(
name|requestedClaims
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|unhandledClaimTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Claim
name|requestedClaim
range|:
name|requestedClaims
control|)
block|{
if|if
condition|(
operator|!
name|claimsManager
operator|.
name|getSupportedClaimTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|requestedClaim
operator|.
name|getClaimType
argument_list|()
argument_list|)
operator|&&
operator|!
name|requestedClaim
operator|.
name|isOptional
argument_list|()
condition|)
block|{
name|unhandledClaimTypes
operator|.
name|add
argument_list|(
name|requestedClaim
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|unhandledClaimTypes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"The requested claim "
operator|+
name|unhandledClaimTypes
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be fulfilled by the STS."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"The requested claim "
operator|+
name|unhandledClaimTypes
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be fulfilled by the STS."
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|processValidToken
parameter_list|(
name|TokenProviderParameters
name|providerParameters
parameter_list|,
name|ReceivedToken
name|validatedToken
parameter_list|,
name|TokenValidatorResponse
name|tokenResponse
parameter_list|)
block|{
comment|// Map the principal (if it exists)
name|Principal
name|responsePrincipal
init|=
name|tokenResponse
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|responsePrincipal
operator|!=
literal|null
condition|)
block|{
name|String
name|targetRealm
init|=
name|providerParameters
operator|.
name|getRealm
argument_list|()
decl_stmt|;
name|String
name|sourceRealm
init|=
name|tokenResponse
operator|.
name|getTokenRealm
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceRealm
operator|!=
literal|null
operator|&&
operator|!
name|sourceRealm
operator|.
name|equals
argument_list|(
name|targetRealm
argument_list|)
condition|)
block|{
name|RelationshipResolver
name|relRes
init|=
name|stsProperties
operator|.
name|getRelationshipResolver
argument_list|()
decl_stmt|;
name|Relationship
name|relationship
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|relRes
operator|!=
literal|null
condition|)
block|{
name|relationship
operator|=
name|relRes
operator|.
name|resolveRelationship
argument_list|(
name|sourceRealm
argument_list|,
name|targetRealm
argument_list|)
expr_stmt|;
if|if
condition|(
name|relationship
operator|!=
literal|null
condition|)
block|{
name|tokenResponse
operator|.
name|getAdditionalProperties
argument_list|()
operator|.
name|put
argument_list|(
name|Relationship
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|relationship
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|relationship
operator|==
literal|null
operator|||
name|relationship
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Relationship
operator|.
name|FED_TYPE_IDENTITY
argument_list|)
condition|)
block|{
comment|// federate identity
name|IdentityMapper
name|identityMapper
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
name|identityMapper
operator|=
name|stsProperties
operator|.
name|getIdentityMapper
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|identityMapper
operator|=
name|relationship
operator|.
name|getIdentityMapper
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|identityMapper
operator|!=
literal|null
condition|)
block|{
name|Principal
name|targetPrincipal
init|=
name|identityMapper
operator|.
name|mapPrincipal
argument_list|(
name|sourceRealm
argument_list|,
name|responsePrincipal
argument_list|,
name|targetRealm
argument_list|)
decl_stmt|;
name|validatedToken
operator|.
name|setPrincipal
argument_list|(
name|targetPrincipal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"No IdentityMapper configured in STSProperties or Relationship"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Error in providing a token"
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|relationship
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Relationship
operator|.
name|FED_TYPE_CLAIMS
argument_list|)
condition|)
block|{
comment|// federate claims
comment|// Claims are transformed at the time when the claims are required to create a token
comment|// (ex. ClaimsAttributeStatementProvider)
comment|// principal remains unchanged
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Unkown federation type: "
operator|+
name|relationship
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Error in providing a token"
argument_list|,
name|STSException
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|setEventListener
parameter_list|(
name|STSEventListener
name|eventListener
parameter_list|)
block|{
name|this
operator|.
name|eventPublisher
operator|=
name|eventListener
expr_stmt|;
block|}
specifier|protected
name|void
name|publishEvent
parameter_list|(
name|AbstractSTSEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|eventPublisher
operator|!=
literal|null
condition|)
block|{
name|eventPublisher
operator|.
name|handleSTSEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityToken
name|findInboundSecurityToken
parameter_list|(
name|SecurityEventConstants
operator|.
name|Event
name|event
parameter_list|,
name|MessageContext
name|messageContext
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingEventList
init|=
operator|(
name|List
argument_list|<
name|SecurityEvent
argument_list|>
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|SecurityEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".in"
argument_list|)
decl_stmt|;
if|if
condition|(
name|incomingEventList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SecurityEvent
name|incomingEvent
range|:
name|incomingEventList
control|)
block|{
if|if
condition|(
name|event
operator|==
name|incomingEvent
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityToken
name|token
init|=
operator|(
operator|(
name|TokenSecurityEvent
argument_list|<
name|?
argument_list|>
operator|)
name|incomingEvent
operator|)
operator|.
name|getSecurityToken
argument_list|()
decl_stmt|;
return|return
name|token
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

