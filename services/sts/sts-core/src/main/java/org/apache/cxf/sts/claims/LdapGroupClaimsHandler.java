begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|x500
operator|.
name|X500Principal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|LdapTemplate
import|;
end_import

begin_class
specifier|public
class|class
name|LdapGroupClaimsHandler
implements|implements
name|ClaimsHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|LdapGroupClaimsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCOPE
init|=
literal|"%SCOPE%"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROLE
init|=
literal|"%ROLE%"
decl_stmt|;
specifier|private
name|LdapTemplate
name|ldap
decl_stmt|;
specifier|private
name|String
name|userBaseDn
decl_stmt|;
specifier|private
name|String
name|groupBaseDn
decl_stmt|;
specifier|private
name|String
name|userObjectClass
init|=
literal|"person"
decl_stmt|;
specifier|private
name|String
name|groupObjectClass
init|=
literal|"groupOfNames"
decl_stmt|;
specifier|private
name|String
name|userNameAttribute
init|=
literal|"cn"
decl_stmt|;
specifier|private
name|String
name|groupMemberAttribute
init|=
literal|"member"
decl_stmt|;
specifier|private
name|String
name|groupURI
init|=
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role"
decl_stmt|;
specifier|private
name|String
name|groupNameGlobalFilter
init|=
name|ROLE
decl_stmt|;
specifier|private
name|String
name|groupNameScopedFilter
init|=
name|SCOPE
operator|+
literal|"_"
operator|+
name|ROLE
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|appliesToScopeMapping
decl_stmt|;
specifier|private
name|boolean
name|useFullGroupNameAsValue
decl_stmt|;
specifier|public
name|boolean
name|isUseFullGroupNameAsValue
parameter_list|()
block|{
return|return
name|useFullGroupNameAsValue
return|;
block|}
specifier|public
name|void
name|setUseFullGroupNameAsValue
parameter_list|(
name|boolean
name|useFullGroupNameAsValue
parameter_list|)
block|{
name|this
operator|.
name|useFullGroupNameAsValue
operator|=
name|useFullGroupNameAsValue
expr_stmt|;
block|}
specifier|public
name|String
name|getUserObjectClass
parameter_list|()
block|{
return|return
name|userObjectClass
return|;
block|}
specifier|public
name|void
name|setUserObjectClass
parameter_list|(
name|String
name|userObjectClass
parameter_list|)
block|{
name|this
operator|.
name|userObjectClass
operator|=
name|userObjectClass
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupObjectClass
parameter_list|()
block|{
return|return
name|groupObjectClass
return|;
block|}
specifier|public
name|void
name|setGroupObjectClass
parameter_list|(
name|String
name|groupObjectClass
parameter_list|)
block|{
name|this
operator|.
name|groupObjectClass
operator|=
name|groupObjectClass
expr_stmt|;
block|}
specifier|public
name|String
name|getUserNameAttribute
parameter_list|()
block|{
return|return
name|userNameAttribute
return|;
block|}
specifier|public
name|void
name|setUserNameAttribute
parameter_list|(
name|String
name|userNameAttribute
parameter_list|)
block|{
name|this
operator|.
name|userNameAttribute
operator|=
name|userNameAttribute
expr_stmt|;
block|}
specifier|public
name|void
name|setLdapTemplate
parameter_list|(
name|LdapTemplate
name|ldapTemplate
parameter_list|)
block|{
name|this
operator|.
name|ldap
operator|=
name|ldapTemplate
expr_stmt|;
block|}
specifier|public
name|LdapTemplate
name|getLdapTemplate
parameter_list|()
block|{
return|return
name|ldap
return|;
block|}
specifier|public
name|void
name|setUserBaseDN
parameter_list|(
name|String
name|userBaseDN
parameter_list|)
block|{
name|this
operator|.
name|userBaseDn
operator|=
name|userBaseDN
expr_stmt|;
block|}
specifier|public
name|String
name|getUserBaseDN
parameter_list|()
block|{
return|return
name|userBaseDn
return|;
block|}
specifier|public
name|String
name|getGroupMemberAttribute
parameter_list|()
block|{
return|return
name|groupMemberAttribute
return|;
block|}
specifier|public
name|void
name|setGroupMemberAttribute
parameter_list|(
name|String
name|groupMemberAttribute
parameter_list|)
block|{
name|this
operator|.
name|groupMemberAttribute
operator|=
name|groupMemberAttribute
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupURI
parameter_list|()
block|{
return|return
name|groupURI
return|;
block|}
specifier|public
name|void
name|setGroupURI
parameter_list|(
name|String
name|groupURI
parameter_list|)
block|{
name|this
operator|.
name|groupURI
operator|=
name|groupURI
expr_stmt|;
block|}
specifier|public
name|void
name|setAppliesToScopeMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|appliesToScopeMapping
parameter_list|)
block|{
name|this
operator|.
name|appliesToScopeMapping
operator|=
name|appliesToScopeMapping
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAppliesToScopeMapping
parameter_list|()
block|{
return|return
name|appliesToScopeMapping
return|;
block|}
specifier|public
name|String
name|getGroupBaseDN
parameter_list|()
block|{
return|return
name|groupBaseDn
return|;
block|}
specifier|public
name|void
name|setGroupBaseDN
parameter_list|(
name|String
name|groupBaseDN
parameter_list|)
block|{
name|this
operator|.
name|groupBaseDn
operator|=
name|groupBaseDN
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupNameGlobalFilter
parameter_list|()
block|{
return|return
name|groupNameGlobalFilter
return|;
block|}
specifier|public
name|void
name|setGroupNameGlobalFilter
parameter_list|(
name|String
name|groupNameGlobalFilter
parameter_list|)
block|{
name|this
operator|.
name|groupNameGlobalFilter
operator|=
name|groupNameGlobalFilter
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupNameScopedFilter
parameter_list|()
block|{
return|return
name|groupNameScopedFilter
return|;
block|}
specifier|public
name|void
name|setGroupNameScopedFilter
parameter_list|(
name|String
name|groupNameScopedFilter
parameter_list|)
block|{
name|this
operator|.
name|groupNameScopedFilter
operator|=
name|groupNameScopedFilter
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|URI
argument_list|>
name|getSupportedClaimTypes
parameter_list|()
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|URI
argument_list|(
name|this
operator|.
name|groupURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Invalid groupURI '"
operator|+
name|this
operator|.
name|groupURI
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|ClaimCollection
name|retrieveClaimValues
parameter_list|(
name|RequestClaimCollection
name|claims
parameter_list|,
name|ClaimsParameters
name|parameters
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RequestClaim
name|claim
range|:
name|claims
control|)
block|{
if|if
condition|(
name|claim
operator|.
name|getClaimType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|groupURI
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
return|return
operator|new
name|ClaimCollection
argument_list|()
return|;
block|}
name|String
name|user
init|=
literal|null
decl_stmt|;
name|Principal
name|principal
init|=
name|parameters
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|principal
operator|instanceof
name|KerberosPrincipal
condition|)
block|{
name|KerberosPrincipal
name|kp
init|=
operator|(
name|KerberosPrincipal
operator|)
name|principal
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|kp
operator|.
name|getName
argument_list|()
argument_list|,
literal|"@"
argument_list|)
decl_stmt|;
name|user
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|principal
operator|instanceof
name|X500Principal
condition|)
block|{
name|X500Principal
name|x500p
init|=
operator|(
name|X500Principal
operator|)
name|principal
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
literal|"Unsupported principal type X500: "
operator|+
name|x500p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|principal
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Principal name must not be null"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Principal is null"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ClaimCollection
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|LdapUtils
operator|.
name|isDN
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|Name
name|dn
init|=
name|LdapUtils
operator|.
name|getDnOfEntry
argument_list|(
name|ldap
argument_list|,
name|this
operator|.
name|userBaseDn
argument_list|,
name|this
operator|.
name|getUserObjectClass
argument_list|()
argument_list|,
name|this
operator|.
name|getUserNameAttribute
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|dn
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|dn
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"DN for ("
operator|+
name|this
operator|.
name|getUserNameAttribute
argument_list|()
operator|+
literal|"="
operator|+
name|user
operator|+
literal|") found: "
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"DN not found for user '"
operator|+
name|user
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ClaimCollection
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finer
argument_list|(
literal|"Retrieve groups for user "
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
literal|null
decl_stmt|;
name|groups
operator|=
name|LdapUtils
operator|.
name|getAttributeOfEntries
argument_list|(
name|ldap
argument_list|,
name|this
operator|.
name|groupBaseDn
argument_list|,
name|this
operator|.
name|getGroupObjectClass
argument_list|()
argument_list|,
name|this
operator|.
name|groupMemberAttribute
argument_list|,
name|user
argument_list|,
literal|"cn"
argument_list|)
expr_stmt|;
if|if
condition|(
name|groups
operator|==
literal|null
operator|||
name|groups
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No groups found for user '"
operator|+
name|user
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ClaimCollection
argument_list|()
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Groups for user '"
operator|+
name|parameters
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|groups
argument_list|)
expr_stmt|;
block|}
name|String
name|scope
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getAppliesToScopeMapping
argument_list|()
operator|!=
literal|null
operator|&&
name|getAppliesToScopeMapping
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|parameters
operator|.
name|getAppliesToAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scope
operator|=
name|getAppliesToScopeMapping
argument_list|()
operator|.
name|get
argument_list|(
name|parameters
operator|.
name|getAppliesToAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"AppliesTo matchs with scope: "
operator|+
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|regex
init|=
name|this
operator|.
name|groupNameGlobalFilter
decl_stmt|;
name|regex
operator|=
name|regex
operator|.
name|replaceAll
argument_list|(
name|ROLE
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
name|Pattern
name|globalPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
comment|//If AppliesTo value can be mapped to a Scope Name
comment|//ex. https://localhost/doubleit/services/doubleittransport  -> Demo
name|Pattern
name|scopePattern
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|regex
operator|=
name|this
operator|.
name|groupNameScopedFilter
expr_stmt|;
name|regex
operator|=
name|regex
operator|.
name|replaceAll
argument_list|(
name|SCOPE
argument_list|,
name|scope
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|ROLE
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
name|scopePattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|filteredGroups
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|scopePattern
operator|!=
literal|null
operator|&&
name|scopePattern
operator|.
name|matcher
argument_list|(
name|group
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|//Group matches the scoped filter
comment|//ex. (default groupNameScopeFilter)
comment|//  Demo_User -> Role=User
comment|//  Demo_Admin -> Role=Admin
name|String
name|filter
init|=
name|this
operator|.
name|groupNameScopedFilter
decl_stmt|;
name|String
name|role
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isUseFullGroupNameAsValue
argument_list|()
condition|)
block|{
name|role
operator|=
name|group
expr_stmt|;
block|}
else|else
block|{
name|role
operator|=
name|parseRole
argument_list|(
name|group
argument_list|,
name|filter
operator|.
name|replaceAll
argument_list|(
name|SCOPE
argument_list|,
name|scope
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filteredGroups
operator|.
name|add
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|globalPattern
operator|.
name|matcher
argument_list|(
name|group
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|//Group matches the global filter
comment|//ex. (default groupNameGlobalFilter)
comment|//  User -> Role=User
comment|//  Admin -> Role=Admin
name|String
name|role
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isUseFullGroupNameAsValue
argument_list|()
condition|)
block|{
name|role
operator|=
name|group
expr_stmt|;
block|}
else|else
block|{
name|role
operator|=
name|parseRole
argument_list|(
name|group
argument_list|,
name|this
operator|.
name|groupNameGlobalFilter
argument_list|)
expr_stmt|;
block|}
name|filteredGroups
operator|.
name|add
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|finer
argument_list|(
literal|"Group '"
operator|+
name|group
operator|+
literal|"' doesn't match scoped and global group filter"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Filtered groups: "
operator|+
name|filteredGroups
argument_list|)
expr_stmt|;
if|if
condition|(
name|filteredGroups
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No matching groups found for user '"
operator|+
name|principal
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ClaimCollection
argument_list|()
return|;
block|}
name|ClaimCollection
name|claimsColl
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|c
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|c
operator|.
name|setClaimType
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|this
operator|.
name|groupURI
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPrincipal
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|c
operator|.
name|setValues
argument_list|(
name|filteredGroups
argument_list|)
expr_stmt|;
comment|// c.setIssuer(issuer);
comment|// c.setOriginalIssuer(originalIssuer);
comment|// c.setNamespace(namespace);
name|claimsColl
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|claimsColl
return|;
block|}
specifier|private
name|String
name|parseRole
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|int
name|roleStart
init|=
name|filter
operator|.
name|indexOf
argument_list|(
name|ROLE
argument_list|)
decl_stmt|;
name|int
name|trimEnd
init|=
name|filter
operator|.
name|length
argument_list|()
operator|-
name|ROLE
operator|.
name|length
argument_list|()
operator|-
name|roleStart
decl_stmt|;
return|return
name|group
operator|.
name|substring
argument_list|(
name|roleStart
argument_list|,
name|group
operator|.
name|length
argument_list|()
operator|-
name|trimEnd
argument_list|)
return|;
block|}
block|}
end_class

end_unit

