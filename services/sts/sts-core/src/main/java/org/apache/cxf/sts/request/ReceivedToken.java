begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|QNameConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_comment
comment|/**  * This class contains values that have been extracted from a received Token. The Token can be a  * JAXB UsernameTokenType/BinarySecurityTokenType or a DOM Element.  */
end_comment

begin_class
specifier|public
class|class
name|ReceivedToken
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ReceivedToken
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Object
name|token
decl_stmt|;
specifier|private
name|boolean
name|isBinarySecurityToken
decl_stmt|;
specifier|private
name|boolean
name|isUsernameToken
decl_stmt|;
specifier|private
name|boolean
name|isDOMElement
decl_stmt|;
specifier|private
name|String
name|tokenContext
decl_stmt|;
comment|// WS-Security, OnBehalfOf, ActAs
specifier|private
name|STATE
name|state
init|=
name|STATE
operator|.
name|NONE
decl_stmt|;
specifier|private
name|Principal
name|principal
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Principal
argument_list|>
name|roles
decl_stmt|;
specifier|public
enum|enum
name|STATE
block|{
name|VALID
block|,
name|INVALID
block|,
name|CANCELLED
block|,
name|EXPIRED
block|,
name|NONE
block|}
empty_stmt|;
specifier|public
name|ReceivedToken
parameter_list|(
name|Object
name|receivedToken
parameter_list|)
throws|throws
name|STSException
block|{
if|if
condition|(
name|receivedToken
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|QName
name|parentName
init|=
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|receivedToken
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|QNameConstants
operator|.
name|USERNAME_TOKEN
operator|.
name|equals
argument_list|(
name|parentName
argument_list|)
condition|)
block|{
name|isUsernameToken
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found a UsernameToken"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|BINARY_SECURITY_TOKEN
operator|.
name|equals
argument_list|(
name|parentName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found a BinarySecurityToken"
argument_list|)
expr_stmt|;
name|isBinarySecurityToken
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|SECURITY_TOKEN_REFERENCE
operator|.
name|equals
argument_list|(
name|parentName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found SecurityTokenReference"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found unknown token object: "
operator|+
name|parentName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"An unknown element was received"
argument_list|,
name|STSException
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|token
operator|=
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|receivedToken
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|receivedToken
operator|instanceof
name|Element
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found ValidateTarget element: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|receivedToken
operator|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|token
operator|=
name|receivedToken
expr_stmt|;
name|isDOMElement
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found ValidateTarget object of unknown type"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"An unknown element was received"
argument_list|,
name|STSException
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
end_class

begin_function
specifier|public
name|Object
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setToken
parameter_list|(
name|Object
name|token
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isBinarySecurityToken
parameter_list|()
block|{
return|return
name|isBinarySecurityToken
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setBinarySecurityToken
parameter_list|(
name|boolean
name|binarySecurityToken
parameter_list|)
block|{
name|this
operator|.
name|isBinarySecurityToken
operator|=
name|binarySecurityToken
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isUsernameToken
parameter_list|()
block|{
return|return
name|isUsernameToken
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setUsernameToken
parameter_list|(
name|boolean
name|usernameToken
parameter_list|)
block|{
name|this
operator|.
name|isUsernameToken
operator|=
name|usernameToken
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isDOMElement
parameter_list|()
block|{
return|return
name|isDOMElement
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setDOMElement
parameter_list|(
name|boolean
name|domElement
parameter_list|)
block|{
name|this
operator|.
name|isDOMElement
operator|=
name|domElement
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|String
name|getTokenContext
parameter_list|()
block|{
return|return
name|tokenContext
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setTokenContext
parameter_list|(
name|String
name|tokenContext
parameter_list|)
block|{
name|this
operator|.
name|tokenContext
operator|=
name|tokenContext
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|STATE
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setState
parameter_list|(
name|STATE
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|principal
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setPrincipal
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|Set
argument_list|<
name|Principal
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|roles
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setRoles
parameter_list|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|roles
parameter_list|)
block|{
name|this
operator|.
name|roles
operator|=
name|roles
expr_stmt|;
block|}
end_function

unit|}
end_unit

