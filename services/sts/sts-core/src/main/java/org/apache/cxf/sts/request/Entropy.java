begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * This class contains values that have been extracted from an Entropy structure.  */
end_comment

begin_class
specifier|public
class|class
name|Entropy
block|{
specifier|private
name|byte
index|[]
name|decryptedKey
decl_stmt|;
specifier|private
name|BinarySecret
name|binarySecret
decl_stmt|;
specifier|public
name|BinarySecret
name|getBinarySecret
parameter_list|()
block|{
return|return
name|binarySecret
return|;
block|}
specifier|public
name|void
name|setBinarySecret
parameter_list|(
name|BinarySecret
name|binarySecret
parameter_list|)
block|{
name|this
operator|.
name|binarySecret
operator|=
name|binarySecret
expr_stmt|;
block|}
specifier|public
name|void
name|setDecryptedKey
parameter_list|(
name|byte
index|[]
name|decryptedKey
parameter_list|)
block|{
name|this
operator|.
name|decryptedKey
operator|=
name|decryptedKey
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getDecryptedKey
parameter_list|()
block|{
return|return
name|decryptedKey
return|;
block|}
specifier|public
name|void
name|clean
parameter_list|()
block|{
if|if
condition|(
name|decryptedKey
operator|!=
literal|null
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|decryptedKey
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|binarySecret
operator|!=
literal|null
condition|)
block|{
name|binarySecret
operator|.
name|clean
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

