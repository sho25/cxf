begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|jwt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|SimpleGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
operator|.
name|DefaultSubjectRoleParser
import|;
end_import

begin_comment
comment|/**  * A default implementation to extract roles from a JWT token  */
end_comment

begin_class
specifier|public
class|class
name|DefaultJWTRoleParser
extends|extends
name|DefaultSubjectRoleParser
implements|implements
name|JWTRoleParser
block|{
specifier|private
name|boolean
name|useJaasSubject
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|roleClaim
decl_stmt|;
comment|/**      * Return the set of User/Principal roles from the token.      * @param principal the Principal associated with the token      * @param subject the JAAS Subject associated with a successful validation of the token      * @param token The JWTToken      * @return the set of User/Principal roles from the token.      */
specifier|public
name|Set
argument_list|<
name|Principal
argument_list|>
name|parseRolesFromToken
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|Subject
name|subject
parameter_list|,
name|JwtToken
name|token
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|!=
literal|null
operator|&&
name|useJaasSubject
condition|)
block|{
return|return
name|super
operator|.
name|parseRolesFromSubject
argument_list|(
name|principal
argument_list|,
name|subject
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|Principal
argument_list|>
name|roles
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roleClaim
operator|!=
literal|null
operator|&&
name|token
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getClaims
argument_list|()
operator|.
name|containsProperty
argument_list|(
name|roleClaim
argument_list|)
condition|)
block|{
name|roles
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|role
init|=
name|token
operator|.
name|getClaims
argument_list|()
operator|.
name|getStringProperty
argument_list|(
name|roleClaim
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|role
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|roles
operator|.
name|add
argument_list|(
operator|new
name|SimpleGroup
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|roles
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
return|return
name|roles
return|;
block|}
specifier|public
name|boolean
name|isUseJaasSubject
parameter_list|()
block|{
return|return
name|useJaasSubject
return|;
block|}
comment|/**      * Whether to get roles from the JAAS Subject (if not null) returned from SAML Assertion      * Validation or not. The default is true.      * @param useJaasSubject whether to get roles from the JAAS Subject or not      */
specifier|public
name|void
name|setUseJaasSubject
parameter_list|(
name|boolean
name|useJaasSubject
parameter_list|)
block|{
name|this
operator|.
name|useJaasSubject
operator|=
name|useJaasSubject
expr_stmt|;
block|}
specifier|public
name|String
name|getRoleClaim
parameter_list|()
block|{
return|return
name|roleClaim
return|;
block|}
specifier|public
name|void
name|setRoleClaim
parameter_list|(
name|String
name|roleClaim
parameter_list|)
block|{
name|this
operator|.
name|roleClaim
operator|=
name|roleClaim
expr_stmt|;
block|}
block|}
end_class

end_unit

