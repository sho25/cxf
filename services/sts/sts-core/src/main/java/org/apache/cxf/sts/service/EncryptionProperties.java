begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_comment
comment|/**  * This class contains various configuration properties that can be used to encrypt an issued token.  * The encryptionName property must be specified (corresponding to the alias to be used to select a  * certificate from a KeyStore) - everything else is optional.  */
end_comment

begin_class
specifier|public
class|class
name|EncryptionProperties
block|{
specifier|private
name|String
name|encryptionAlgorithm
init|=
name|WSConstants
operator|.
name|AES_256
decl_stmt|;
specifier|private
name|String
name|keyWrapAlgorithm
init|=
name|WSConstants
operator|.
name|KEYTRANSPORT_RSA15
decl_stmt|;
specifier|private
name|int
name|keyIdentifierType
init|=
name|WSConstants
operator|.
name|ISSUER_SERIAL
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|acceptedEncryptionAlgorithms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|acceptedKeyWrapAlgorithms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|encryptionName
decl_stmt|;
specifier|public
name|EncryptionProperties
parameter_list|()
block|{
comment|// Default symmetric encryption algorithms
name|acceptedEncryptionAlgorithms
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|TRIPLE_DES
argument_list|)
expr_stmt|;
name|acceptedEncryptionAlgorithms
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|AES_128
argument_list|)
expr_stmt|;
name|acceptedEncryptionAlgorithms
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|AES_192
argument_list|)
expr_stmt|;
name|acceptedEncryptionAlgorithms
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|AES_256
argument_list|)
expr_stmt|;
name|acceptedEncryptionAlgorithms
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|AES_128_GCM
argument_list|)
expr_stmt|;
name|acceptedEncryptionAlgorithms
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|AES_192_GCM
argument_list|)
expr_stmt|;
name|acceptedEncryptionAlgorithms
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|AES_256_GCM
argument_list|)
expr_stmt|;
comment|// Default key wrap algorithms
name|acceptedKeyWrapAlgorithms
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|KEYTRANSPORT_RSA15
argument_list|)
expr_stmt|;
name|acceptedKeyWrapAlgorithms
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|KEYTRANSPORT_RSAOEP
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the encryption algorithm to use      */
specifier|public
name|String
name|getEncryptionAlgorithm
parameter_list|()
block|{
return|return
name|encryptionAlgorithm
return|;
block|}
comment|/**      * Set the encryption algorithm to use      */
specifier|public
name|void
name|setEncryptionAlgorithm
parameter_list|(
name|String
name|encryptionAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|encryptionAlgorithm
operator|=
name|encryptionAlgorithm
expr_stmt|;
block|}
comment|/**      * Get the encryption key-wrap algorithm to use      */
specifier|public
name|String
name|getKeyWrapAlgorithm
parameter_list|()
block|{
return|return
name|keyWrapAlgorithm
return|;
block|}
comment|/**      * Set the encryption key-wrap algorithm to use      */
specifier|public
name|void
name|setKeyWrapAlgorithm
parameter_list|(
name|String
name|keyWrapAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|keyWrapAlgorithm
operator|=
name|keyWrapAlgorithm
expr_stmt|;
block|}
comment|/**      * Get the (WSS4J) key identifier type used to reference a certificate for encryption      */
specifier|public
name|int
name|getKeyIdentifierType
parameter_list|()
block|{
return|return
name|keyIdentifierType
return|;
block|}
comment|/**      * Set the (WSS4J) key identifier type used to reference a certificate for encryption      */
specifier|public
name|void
name|setKeyIdentifierType
parameter_list|(
name|int
name|keyIdentifierType
parameter_list|)
block|{
name|this
operator|.
name|keyIdentifierType
operator|=
name|keyIdentifierType
expr_stmt|;
block|}
comment|/**      * Get the alias used to select a certificate for encryption      */
specifier|public
name|String
name|getEncryptionName
parameter_list|()
block|{
return|return
name|encryptionName
return|;
block|}
comment|/**      * Set the alias used to select a certificate for encryption      */
specifier|public
name|void
name|setEncryptionName
parameter_list|(
name|String
name|encryptionName
parameter_list|)
block|{
name|this
operator|.
name|encryptionName
operator|=
name|encryptionName
expr_stmt|;
block|}
comment|/**      * Set the list of accepted encryption algorithms. A request can contain a wst:EncryptionAlgorithm      * uri to use to encrypt an issued token. The algorithm specified must be contained in this list.      * The default algorithms are 3-DES, AES-128, AES-128 GCM, AES-192, AES-192 GCM, AES-256 and AES-256 GCM.      */
specifier|public
name|void
name|setAcceptedEncryptionAlgorithms
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|acceptedEncryptionAlgorithms
parameter_list|)
block|{
name|this
operator|.
name|acceptedEncryptionAlgorithms
operator|=
name|acceptedEncryptionAlgorithms
expr_stmt|;
block|}
comment|/**      * Get the list of accepted encryption algorithms. A request can contain a wst:EncryptionAlgorithm      * uri to use to encrypt an issued token. The algorithm specified must be contained in this list.      * The default algorithms are 3-DES, AES-128, AES-128 GCM, AES-192, AES-192 GCM, AES-256 and AES-256 GCM.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAcceptedEncryptionAlgorithms
parameter_list|()
block|{
return|return
name|acceptedEncryptionAlgorithms
return|;
block|}
comment|/**      * Set the list of accepted key-wrap algorithms. A request can contain a wst:KeyWrapAlgorithm      * uri for use in encrypting an issued token. The algorithm specified must be contained in this list.      * The default algorithms are RSA 1.5 and RSA OEP.      */
specifier|public
name|void
name|setAcceptedKeyWrapAlgorithms
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|acceptedKeyWrapAlgorithms
parameter_list|)
block|{
name|this
operator|.
name|acceptedKeyWrapAlgorithms
operator|=
name|acceptedKeyWrapAlgorithms
expr_stmt|;
block|}
comment|/**      * Get the list of accepted key-wrap algorithms. A request can contain a wst:KeyWrapAlgorithm      * uri for use in encrypting an issued token. The algorithm specified must be contained in this list.      * The default algorithms are RSA 1.5 and RSA OEP.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAcceptedKeyWrapAlgorithms
parameter_list|()
block|{
return|return
name|acceptedKeyWrapAlgorithms
return|;
block|}
block|}
end_class

end_unit

