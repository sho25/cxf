begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Ehcache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|config
operator|.
name|CacheConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|buslifecycle
operator|.
name|BusLifeCycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|buslifecycle
operator|.
name|BusLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|InstrumentationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagementConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|cache
operator|.
name|EHCacheUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|cache
operator|.
name|EHCacheManagerHolder
import|;
end_import

begin_comment
comment|/**  * A EH-Cache based cache to cache identities in different realms where  * the relationship is of type FederateIdentity.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|()
specifier|public
class|class
name|EHCacheIdentityCache
extends|extends
name|AbstractIdentityCache
implements|implements
name|Closeable
implements|,
name|BusLifeCycleListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|EHCacheIdentityCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Ehcache
name|cache
decl_stmt|;
specifier|private
name|CacheManager
name|cacheManager
decl_stmt|;
specifier|public
name|EHCacheIdentityCache
parameter_list|(
name|IdentityMapper
name|identityMapper
parameter_list|,
name|Bus
name|b
parameter_list|)
block|{
name|this
argument_list|(
name|identityMapper
argument_list|,
name|EHCacheIdentityCache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|b
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EHCacheIdentityCache
parameter_list|(
name|IdentityMapper
name|identityMapper
parameter_list|,
name|String
name|key
parameter_list|,
name|Bus
name|b
parameter_list|,
name|URL
name|configFileURL
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|,
name|identityMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|getExtension
argument_list|(
name|BusLifeCycleManager
operator|.
name|class
argument_list|)
operator|.
name|registerLifeCycleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|InstrumentationManager
name|im
init|=
name|b
operator|.
name|getExtension
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|im
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Registering EHCacheIdentityCache failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|configFileURL
operator|!=
literal|null
condition|)
block|{
name|cacheManager
operator|=
name|EHCacheUtils
operator|.
name|getCacheManager
argument_list|(
name|b
argument_list|,
name|configFileURL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cacheManager
operator|=
name|EHCacheUtils
operator|.
name|getCacheManager
argument_list|(
name|b
argument_list|,
name|getDefaultConfigFileURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CacheConfiguration
name|cc
init|=
name|EHCacheManagerHolder
operator|.
name|getCacheConfiguration
argument_list|(
name|key
argument_list|,
name|cacheManager
argument_list|)
decl_stmt|;
name|Ehcache
name|newCache
init|=
operator|new
name|Cache
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|cache
operator|=
name|cacheManager
operator|.
name|addCacheIfAbsent
argument_list|(
name|newCache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|realm
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|identities
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
operator|new
name|Element
argument_list|(
name|user
operator|+
literal|"@"
operator|+
name|realm
argument_list|,
name|identities
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|ManagedOperation
argument_list|()
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|get
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|realm
parameter_list|)
block|{
name|Element
name|element
init|=
name|cache
operator|.
name|get
argument_list|(
name|user
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
operator|&&
operator|!
name|cache
operator|.
name|isExpired
argument_list|(
name|element
argument_list|)
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|element
operator|.
name|getObjectValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|realm
parameter_list|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|user
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|()
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|cache
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|cache
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|()
specifier|public
name|String
name|getContent
parameter_list|()
block|{
return|return
name|this
operator|.
name|cache
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|cacheManager
operator|!=
literal|null
condition|)
block|{
comment|// this step is especially important for global shared cache manager
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cacheManager
operator|.
name|removeCache
argument_list|(
name|cache
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EHCacheManagerHolder
operator|.
name|releaseCacheManger
argument_list|(
name|cacheManager
argument_list|)
expr_stmt|;
name|cacheManager
operator|=
literal|null
expr_stmt|;
name|cache
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|getBus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|BusLifeCycleManager
operator|.
name|class
argument_list|)
operator|.
name|unregisterLifeCycleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initComplete
parameter_list|()
block|{     }
specifier|public
name|void
name|preShutdown
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|postShutdown
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|URL
name|getDefaultConfigFileURL
parameter_list|()
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|super
operator|.
name|getBus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ResourceManager
name|rm
init|=
name|super
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|url
operator|=
name|rm
operator|.
name|resolveResource
argument_list|(
literal|"sts-ehcache.xml"
argument_list|,
name|URL
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
literal|"sts-ehcache.xml"
argument_list|,
name|TokenStoreFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"sts-ehcache.xml"
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|ObjectName
name|getObjectName
parameter_list|()
throws|throws
name|JMException
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|DEFAULT_DOMAIN_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|getBus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|BUS_ID_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|super
operator|.
name|getBus
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|TYPE_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
literal|"EHCacheIdentityCache"
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|NAME_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
literal|"EHCacheIdentityCache-"
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

