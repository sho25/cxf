begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|renewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSPropertiesMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|SignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|ReceivedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|ReceivedToken
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|ConditionsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
operator|.
name|DefaultConditionsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|realm
operator|.
name|SAMLRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|AbstractSamlPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|AssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|bean
operator|.
name|ConditionsBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|builder
operator|.
name|SAML1ComponentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|builder
operator|.
name|SAML2ComponentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|UUIDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|common
operator|.
name|SAMLVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Audience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|AudienceRestrictionCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AudienceRestriction
import|;
end_import

begin_comment
comment|/**  * A TokenRenewer implementation that renews a (valid or expired) SAML Token.  */
end_comment

begin_class
specifier|public
class|class
name|SAMLTokenRenewer
implements|implements
name|TokenRenewer
block|{
comment|// The default maximum expired time a token is allowed to be is 30 minutes
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_MAX_EXPIRY
init|=
literal|60L
operator|*
literal|30L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SAMLTokenRenewer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|signToken
init|=
literal|true
decl_stmt|;
specifier|private
name|ConditionsProvider
name|conditionsProvider
init|=
operator|new
name|DefaultConditionsProvider
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SAMLRealm
argument_list|>
name|realmMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SAMLRealm
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|maxExpiry
init|=
name|DEFAULT_MAX_EXPIRY
decl_stmt|;
comment|// boolean to enable/disable the check of proof of possession
specifier|private
name|boolean
name|verifyProofOfPossession
init|=
literal|true
decl_stmt|;
comment|/**      * Return true if this TokenRenewer implementation is able to renew a token.      */
specifier|public
name|boolean
name|canHandleToken
parameter_list|(
name|ReceivedToken
name|renewTarget
parameter_list|)
block|{
return|return
name|canHandleToken
argument_list|(
name|renewTarget
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Return true if this TokenRenewer implementation is able to renew a token in the given realm.      */
specifier|public
name|boolean
name|canHandleToken
parameter_list|(
name|ReceivedToken
name|renewTarget
parameter_list|,
name|String
name|realm
parameter_list|)
block|{
if|if
condition|(
name|realm
operator|!=
literal|null
operator|&&
operator|!
name|realmMap
operator|.
name|containsKey
argument_list|(
name|realm
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|token
init|=
name|renewTarget
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|tokenElement
init|=
operator|(
name|Element
operator|)
name|token
decl_stmt|;
name|String
name|namespace
init|=
name|tokenElement
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|localname
init|=
name|tokenElement
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|)
operator|&&
literal|"Assertion"
operator|.
name|equals
argument_list|(
name|localname
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Set whether proof of possession is required or not to renew a token      */
specifier|public
name|void
name|setVerifyProofOfPossession
parameter_list|(
name|boolean
name|verifyProofOfPossession
parameter_list|)
block|{
name|this
operator|.
name|verifyProofOfPossession
operator|=
name|verifyProofOfPossession
expr_stmt|;
block|}
comment|/**      * Set a new value (in seconds) for how long a token is allowed to be expired for before renewal.       * The default is 30 minutes.      */
specifier|public
name|void
name|setMaxExpiry
parameter_list|(
name|long
name|newExpiry
parameter_list|)
block|{
name|maxExpiry
operator|=
name|newExpiry
expr_stmt|;
block|}
comment|/**      * Get how long a token is allowed to be expired for before renewal (in seconds). The default is       * 30 minutes.      */
specifier|public
name|long
name|getMaxExpiry
parameter_list|()
block|{
return|return
name|maxExpiry
return|;
block|}
comment|/**      * Renew a token given a TokenRenewerParameters      */
specifier|public
name|TokenRenewerResponse
name|renewToken
parameter_list|(
name|TokenRenewerParameters
name|tokenParameters
parameter_list|)
block|{
name|TokenRenewerResponse
name|response
init|=
operator|new
name|TokenRenewerResponse
argument_list|()
decl_stmt|;
name|ReceivedToken
name|tokenToRenew
init|=
name|tokenParameters
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenToRenew
operator|==
literal|null
operator|||
name|tokenToRenew
operator|.
name|getToken
argument_list|()
operator|==
literal|null
operator|||
operator|(
name|tokenToRenew
operator|.
name|getState
argument_list|()
operator|!=
name|STATE
operator|.
name|EXPIRED
operator|&&
name|tokenToRenew
operator|.
name|getState
argument_list|()
operator|!=
name|STATE
operator|.
name|VALID
operator|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"The token to renew is null or invalid"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"The token to renew is null or invalid"
argument_list|,
name|STSException
operator|.
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
try|try
block|{
name|AssertionWrapper
name|assertion
init|=
operator|new
name|AssertionWrapper
argument_list|(
operator|(
name|Element
operator|)
name|tokenToRenew
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|validateAssertion
argument_list|(
name|assertion
argument_list|,
name|tokenToRenew
argument_list|,
name|tokenParameters
argument_list|)
expr_stmt|;
comment|// Create new Conditions& sign the Assertion
name|byte
index|[]
name|oldSignature
init|=
name|assertion
operator|.
name|getSignatureValue
argument_list|()
decl_stmt|;
name|createNewConditions
argument_list|(
name|assertion
argument_list|,
name|tokenParameters
argument_list|)
expr_stmt|;
name|String
name|oldId
init|=
name|createNewId
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|signAssertion
argument_list|(
name|assertion
argument_list|,
name|tokenParameters
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|token
init|=
name|assertion
operator|.
name|toDOM
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setIdAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|token
operator|.
name|setIdAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|appendChild
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// Remove the previous token (now expired) from the cache
if|if
condition|(
name|tokenParameters
operator|.
name|getTokenStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tokenParameters
operator|.
name|getTokenStore
argument_list|()
operator|.
name|remove
argument_list|(
name|oldId
argument_list|)
expr_stmt|;
name|int
name|hash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|oldSignature
argument_list|)
decl_stmt|;
name|tokenParameters
operator|.
name|getTokenStore
argument_list|()
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Cache the token
name|String
name|realm
init|=
name|tokenParameters
operator|.
name|getRealm
argument_list|()
decl_stmt|;
name|storeTokenInCache
argument_list|(
name|tokenParameters
operator|.
name|getTokenStore
argument_list|()
argument_list|,
name|assertion
argument_list|,
name|tokenParameters
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|realm
argument_list|)
expr_stmt|;
name|response
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTokenId
argument_list|(
name|assertion
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|DateTime
name|validFrom
init|=
literal|null
decl_stmt|;
name|DateTime
name|validTill
init|=
literal|null
decl_stmt|;
name|long
name|lifetime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|assertion
operator|.
name|getSamlVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|)
condition|)
block|{
name|validFrom
operator|=
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getNotBefore
argument_list|()
expr_stmt|;
name|validTill
operator|=
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getNotOnOrAfter
argument_list|()
expr_stmt|;
name|lifetime
operator|=
name|validTill
operator|.
name|getMillis
argument_list|()
operator|-
name|validFrom
operator|.
name|getMillis
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|validFrom
operator|=
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getNotBefore
argument_list|()
expr_stmt|;
name|validTill
operator|=
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getNotOnOrAfter
argument_list|()
expr_stmt|;
name|lifetime
operator|=
name|validTill
operator|.
name|getMillis
argument_list|()
operator|-
name|validFrom
operator|.
name|getMillis
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|setLifetime
argument_list|(
name|lifetime
operator|/
literal|1000
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|""
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Can't renew SAML assertion"
argument_list|,
name|ex
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
block|}
comment|/**      * Set the ConditionsProvider      */
specifier|public
name|void
name|setConditionsProvider
parameter_list|(
name|ConditionsProvider
name|conditionsProvider
parameter_list|)
block|{
name|this
operator|.
name|conditionsProvider
operator|=
name|conditionsProvider
expr_stmt|;
block|}
comment|/**      * Get the ConditionsProvider      */
specifier|public
name|ConditionsProvider
name|getConditionsProvider
parameter_list|()
block|{
return|return
name|conditionsProvider
return|;
block|}
comment|/**      * Return whether the provided token will be signed or not. Default is true.      */
specifier|public
name|boolean
name|isSignToken
parameter_list|()
block|{
return|return
name|signToken
return|;
block|}
comment|/**      * Set whether the provided token will be signed or not. Default is true.      */
specifier|public
name|void
name|setSignToken
parameter_list|(
name|boolean
name|signToken
parameter_list|)
block|{
name|this
operator|.
name|signToken
operator|=
name|signToken
expr_stmt|;
block|}
comment|/**      * Set the map of realm->SAMLRealm for this token provider      * @param realms the map of realm->SAMLRealm for this token provider      */
specifier|public
name|void
name|setRealmMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SAMLRealm
argument_list|>
name|realms
parameter_list|)
block|{
name|this
operator|.
name|realmMap
operator|=
name|realms
expr_stmt|;
block|}
comment|/**      * Get the map of realm->SAMLRealm for this token provider      * @return the map of realm->SAMLRealm for this token provider      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SAMLRealm
argument_list|>
name|getRealmMap
parameter_list|()
block|{
return|return
name|realmMap
return|;
block|}
specifier|private
name|void
name|validateAssertion
parameter_list|(
name|AssertionWrapper
name|assertion
parameter_list|,
name|ReceivedToken
name|tokenToRenew
parameter_list|,
name|TokenRenewerParameters
name|tokenParameters
parameter_list|)
block|{
comment|// Check to see whether the token has expired greater than the configured max expiry time
if|if
condition|(
name|tokenToRenew
operator|.
name|getState
argument_list|()
operator|==
name|STATE
operator|.
name|EXPIRED
condition|)
block|{
name|DateTime
name|expiryDate
init|=
name|getExpiryDate
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|DateTime
name|currentDate
init|=
operator|new
name|DateTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|currentDate
operator|.
name|getMillis
argument_list|()
operator|-
name|expiryDate
operator|.
name|getMillis
argument_list|()
operator|)
operator|>
operator|(
name|maxExpiry
operator|*
literal|1000L
operator|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"The token expired too long ago to be renewed"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"The token expired too long ago to be renewed"
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
block|}
comment|// Verify Proof of Possession
name|ProofOfPossessionValidator
name|popValidator
init|=
operator|new
name|ProofOfPossessionValidator
argument_list|()
decl_stmt|;
if|if
condition|(
name|verifyProofOfPossession
operator|&&
operator|!
name|popValidator
operator|.
name|checkProofOfPossession
argument_list|(
name|tokenParameters
argument_list|,
name|assertion
operator|.
name|getSubjectKeyInfo
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Failed to verify the proof of possession of the key associated with the "
operator|+
literal|"saml token. No matching key found in the request."
argument_list|,
name|STSException
operator|.
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
comment|// Check the AppliesTo address
name|String
name|appliesToAddress
init|=
name|tokenParameters
operator|.
name|getAppliesToAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|appliesToAddress
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|AudienceRestrictionCondition
argument_list|>
name|restrConditions
init|=
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getAudienceRestrictionConditions
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|matchSaml1AudienceRestriction
argument_list|(
name|appliesToAddress
argument_list|,
name|restrConditions
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"The AppliesTo address does not match the Audience Restriction"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"The AppliesTo address does not match the Audience Restriction"
argument_list|,
name|STSException
operator|.
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|AudienceRestriction
argument_list|>
name|audienceRestrs
init|=
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getAudienceRestrictions
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|matchSaml2AudienceRestriction
argument_list|(
name|appliesToAddress
argument_list|,
name|audienceRestrs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"The AppliesTo address does not match the Audience Restriction"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"The AppliesTo address does not match the Audience Restriction"
argument_list|,
name|STSException
operator|.
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|matchSaml1AudienceRestriction
parameter_list|(
name|String
name|appliesTo
parameter_list|,
name|List
argument_list|<
name|AudienceRestrictionCondition
argument_list|>
name|restrConditions
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|restrConditions
operator|!=
literal|null
operator|&&
operator|!
name|restrConditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AudienceRestrictionCondition
name|restrCondition
range|:
name|restrConditions
control|)
block|{
if|if
condition|(
name|restrCondition
operator|.
name|getAudiences
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Audience
name|audience
range|:
name|restrCondition
operator|.
name|getAudiences
argument_list|()
control|)
block|{
if|if
condition|(
name|appliesTo
operator|.
name|equals
argument_list|(
name|audience
operator|.
name|getUri
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
return|return
name|found
return|;
block|}
specifier|private
name|boolean
name|matchSaml2AudienceRestriction
parameter_list|(
name|String
name|appliesTo
parameter_list|,
name|List
argument_list|<
name|AudienceRestriction
argument_list|>
name|audienceRestrictions
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|audienceRestrictions
operator|!=
literal|null
operator|&&
operator|!
name|audienceRestrictions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AudienceRestriction
name|audienceRestriction
range|:
name|audienceRestrictions
control|)
block|{
if|if
condition|(
name|audienceRestriction
operator|.
name|getAudiences
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Audience
name|audience
range|:
name|audienceRestriction
operator|.
name|getAudiences
argument_list|()
control|)
block|{
if|if
condition|(
name|appliesTo
operator|.
name|equals
argument_list|(
name|audience
operator|.
name|getAudienceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
return|return
name|found
return|;
block|}
specifier|private
name|void
name|signAssertion
parameter_list|(
name|AssertionWrapper
name|assertion
parameter_list|,
name|TokenRenewerParameters
name|tokenParameters
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|signToken
condition|)
block|{
name|STSPropertiesMBean
name|stsProperties
init|=
name|tokenParameters
operator|.
name|getStsProperties
argument_list|()
decl_stmt|;
comment|// Initialise signature objects with defaults of STSPropertiesMBean
name|Crypto
name|signatureCrypto
init|=
name|stsProperties
operator|.
name|getSignatureCrypto
argument_list|()
decl_stmt|;
name|CallbackHandler
name|callbackHandler
init|=
name|stsProperties
operator|.
name|getCallbackHandler
argument_list|()
decl_stmt|;
name|SignatureProperties
name|signatureProperties
init|=
name|stsProperties
operator|.
name|getSignatureProperties
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|stsProperties
operator|.
name|getSignatureUsername
argument_list|()
decl_stmt|;
name|String
name|realm
init|=
name|tokenParameters
operator|.
name|getRealm
argument_list|()
decl_stmt|;
name|SAMLRealm
name|samlRealm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|realm
operator|!=
literal|null
operator|&&
name|realmMap
operator|.
name|containsKey
argument_list|(
name|realm
argument_list|)
condition|)
block|{
name|samlRealm
operator|=
name|realmMap
operator|.
name|get
argument_list|(
name|realm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|samlRealm
operator|!=
literal|null
condition|)
block|{
comment|// If SignatureCrypto configured in realm then
comment|// callbackhandler and alias of STSPropertiesMBean is ignored
if|if
condition|(
name|samlRealm
operator|.
name|getSignatureCrypto
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"SAMLRealm signature keystore used"
argument_list|)
expr_stmt|;
name|signatureCrypto
operator|=
name|samlRealm
operator|.
name|getSignatureCrypto
argument_list|()
expr_stmt|;
name|callbackHandler
operator|=
name|samlRealm
operator|.
name|getCallbackHandler
argument_list|()
expr_stmt|;
name|alias
operator|=
name|samlRealm
operator|.
name|getSignatureAlias
argument_list|()
expr_stmt|;
block|}
comment|// SignatureProperties can be defined independently of SignatureCrypto
if|if
condition|(
name|samlRealm
operator|.
name|getSignatureProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|signatureProperties
operator|=
name|samlRealm
operator|.
name|getSignatureProperties
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Get the signature algorithm to use
name|String
name|signatureAlgorithm
init|=
name|tokenParameters
operator|.
name|getKeyRequirements
argument_list|()
operator|.
name|getSignatureAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureAlgorithm
operator|==
literal|null
condition|)
block|{
comment|// If none then default to what is configured
name|signatureAlgorithm
operator|=
name|signatureProperties
operator|.
name|getSignatureAlgorithm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
init|=
name|signatureProperties
operator|.
name|getAcceptedSignatureAlgorithms
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|supportedAlgorithms
operator|.
name|contains
argument_list|(
name|signatureAlgorithm
argument_list|)
condition|)
block|{
name|signatureAlgorithm
operator|=
name|signatureProperties
operator|.
name|getSignatureAlgorithm
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"SignatureAlgorithm not supported, defaulting to: "
operator|+
name|signatureAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get the c14n algorithm to use
name|String
name|c14nAlgorithm
init|=
name|tokenParameters
operator|.
name|getKeyRequirements
argument_list|()
operator|.
name|getC14nAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|c14nAlgorithm
operator|==
literal|null
condition|)
block|{
comment|// If none then default to what is configured
name|c14nAlgorithm
operator|=
name|signatureProperties
operator|.
name|getC14nAlgorithm
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|supportedAlgorithms
init|=
name|signatureProperties
operator|.
name|getAcceptedC14nAlgorithms
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|supportedAlgorithms
operator|.
name|contains
argument_list|(
name|c14nAlgorithm
argument_list|)
condition|)
block|{
name|c14nAlgorithm
operator|=
name|signatureProperties
operator|.
name|getC14nAlgorithm
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"C14nAlgorithm not supported, defaulting to: "
operator|+
name|c14nAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If alias not defined, get the default of the SignatureCrypto
if|if
condition|(
operator|(
name|alias
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
operator|)
operator|&&
operator|(
name|signatureCrypto
operator|!=
literal|null
operator|)
condition|)
block|{
name|alias
operator|=
name|signatureCrypto
operator|.
name|getDefaultX509Identifier
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Signature alias is null so using default alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
block|}
comment|// Get the password
name|WSPasswordCallback
index|[]
name|cb
init|=
block|{
operator|new
name|WSPasswordCallback
argument_list|(
name|alias
argument_list|,
name|WSPasswordCallback
operator|.
name|SIGNATURE
argument_list|)
block|}
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Creating SAML Token"
argument_list|)
expr_stmt|;
name|callbackHandler
operator|.
name|handle
argument_list|(
name|cb
argument_list|)
expr_stmt|;
name|String
name|password
init|=
name|cb
index|[
literal|0
index|]
operator|.
name|getPassword
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Signing SAML Token"
argument_list|)
expr_stmt|;
name|boolean
name|useKeyValue
init|=
name|signatureProperties
operator|.
name|isUseKeyValue
argument_list|()
decl_stmt|;
name|assertion
operator|.
name|signAssertion
argument_list|(
name|alias
argument_list|,
name|password
argument_list|,
name|signatureCrypto
argument_list|,
name|useKeyValue
argument_list|,
name|c14nAlgorithm
argument_list|,
name|signatureAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createNewConditions
parameter_list|(
name|AssertionWrapper
name|assertion
parameter_list|,
name|TokenRenewerParameters
name|tokenParameters
parameter_list|)
block|{
name|ConditionsBean
name|conditions
init|=
name|conditionsProvider
operator|.
name|getConditions
argument_list|(
name|tokenParameters
operator|.
name|getAppliesToAddress
argument_list|()
argument_list|,
name|tokenParameters
operator|.
name|getTokenRequirements
argument_list|()
operator|.
name|getLifetime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Assertion
name|saml1Assertion
init|=
name|assertion
operator|.
name|getSaml1
argument_list|()
decl_stmt|;
name|saml1Assertion
operator|.
name|setIssueInstant
argument_list|(
operator|new
name|DateTime
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Conditions
name|saml1Conditions
init|=
name|SAML1ComponentBuilder
operator|.
name|createSamlv1Conditions
argument_list|(
name|conditions
argument_list|)
decl_stmt|;
name|saml1Assertion
operator|.
name|setConditions
argument_list|(
name|saml1Conditions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Assertion
name|saml2Assertion
init|=
name|assertion
operator|.
name|getSaml2
argument_list|()
decl_stmt|;
name|saml2Assertion
operator|.
name|setIssueInstant
argument_list|(
operator|new
name|DateTime
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Conditions
name|saml2Conditions
init|=
name|SAML2ComponentBuilder
operator|.
name|createConditions
argument_list|(
name|conditions
argument_list|)
decl_stmt|;
name|saml2Assertion
operator|.
name|setConditions
argument_list|(
name|saml2Conditions
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|createNewId
parameter_list|(
name|AssertionWrapper
name|assertion
parameter_list|)
block|{
if|if
condition|(
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Assertion
name|saml1Assertion
init|=
name|assertion
operator|.
name|getSaml1
argument_list|()
decl_stmt|;
name|String
name|oldId
init|=
name|saml1Assertion
operator|.
name|getID
argument_list|()
decl_stmt|;
name|saml1Assertion
operator|.
name|setID
argument_list|(
literal|"_"
operator|+
name|UUIDGenerator
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|oldId
return|;
block|}
else|else
block|{
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Assertion
name|saml2Assertion
init|=
name|assertion
operator|.
name|getSaml2
argument_list|()
decl_stmt|;
name|String
name|oldId
init|=
name|saml2Assertion
operator|.
name|getID
argument_list|()
decl_stmt|;
name|saml2Assertion
operator|.
name|setID
argument_list|(
literal|"_"
operator|+
name|UUIDGenerator
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|oldId
return|;
block|}
block|}
specifier|private
name|void
name|storeTokenInCache
parameter_list|(
name|TokenStore
name|tokenStore
parameter_list|,
name|AssertionWrapper
name|assertion
parameter_list|,
name|Principal
name|principal
parameter_list|,
name|String
name|tokenRealm
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Store the successfully renewed token in the cache
name|byte
index|[]
name|signatureValue
init|=
name|assertion
operator|.
name|getSignatureValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenStore
operator|!=
literal|null
operator|&&
name|signatureValue
operator|!=
literal|null
operator|&&
name|signatureValue
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|DateTime
name|validTill
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|assertion
operator|.
name|getSamlVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|)
condition|)
block|{
name|validTill
operator|=
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getNotOnOrAfter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|validTill
operator|=
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getNotOnOrAfter
argument_list|()
expr_stmt|;
block|}
name|SecurityToken
name|securityToken
init|=
operator|new
name|SecurityToken
argument_list|(
name|assertion
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|validTill
operator|.
name|toDate
argument_list|()
argument_list|)
decl_stmt|;
name|securityToken
operator|.
name|setToken
argument_list|(
name|assertion
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|securityToken
operator|.
name|setPrincipal
argument_list|(
name|principal
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenRealm
operator|!=
literal|null
condition|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|STSConstants
operator|.
name|TOKEN_REALM
argument_list|,
name|tokenRealm
argument_list|)
expr_stmt|;
name|securityToken
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
name|int
name|hash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|signatureValue
argument_list|)
decl_stmt|;
name|securityToken
operator|.
name|setTokenHash
argument_list|(
name|hash
argument_list|)
expr_stmt|;
name|String
name|identifier
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|hash
argument_list|)
decl_stmt|;
name|tokenStore
operator|.
name|add
argument_list|(
name|identifier
argument_list|,
name|securityToken
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DateTime
name|getExpiryDate
parameter_list|(
name|AssertionWrapper
name|assertion
parameter_list|)
block|{
if|if
condition|(
name|assertion
operator|.
name|getSamlVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|)
condition|)
block|{
return|return
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getNotOnOrAfter
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getNotOnOrAfter
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ProofOfPossessionValidator
extends|extends
name|AbstractSamlPolicyValidator
block|{
specifier|public
name|boolean
name|checkProofOfPossession
parameter_list|(
name|TokenRenewerParameters
name|tokenParameters
parameter_list|,
name|SAMLKeyInfo
name|subjectKeyInfo
parameter_list|)
block|{
name|MessageContext
name|messageContext
init|=
name|tokenParameters
operator|.
name|getWebServiceContext
argument_list|()
operator|.
name|getMessageContext
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|handlerResults
operator|!=
literal|null
operator|&&
name|handlerResults
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|WSHandlerResult
name|handlerResult
init|=
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
init|=
name|handlerResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|UT_SIGN
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
block|}
name|TLSSessionInfo
name|tlsInfo
init|=
operator|(
name|TLSSessionInfo
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Certificate
index|[]
name|tlsCerts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tlsInfo
operator|!=
literal|null
condition|)
block|{
name|tlsCerts
operator|=
name|tlsInfo
operator|.
name|getPeerCertificates
argument_list|()
expr_stmt|;
block|}
return|return
name|compareCredentials
argument_list|(
name|subjectKeyInfo
argument_list|,
name|signedResults
argument_list|,
name|tlsCerts
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

