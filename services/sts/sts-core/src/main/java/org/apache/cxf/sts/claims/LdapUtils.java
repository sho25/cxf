begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|x500
operator|.
name|X500Principal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|AttributesMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|ContextMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|DirContextOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|LdapTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|support
operator|.
name|AbstractContextMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|filter
operator|.
name|AndFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|filter
operator|.
name|EqualsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|LdapUtils
block|{
specifier|private
name|LdapUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|boolean
name|isDN
parameter_list|(
name|String
name|user
parameter_list|)
block|{
try|try
block|{
operator|new
name|X500Principal
argument_list|(
name|user
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|//Principal contains a DN -> ldap.lookup
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//Principal does not contain a DN -> ldap.search
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
name|getAttributesOfEntry
parameter_list|(
name|LdapTemplate
name|ldapTemplate
parameter_list|,
name|String
name|baseDN
parameter_list|,
name|String
name|objectClass
parameter_list|,
name|String
name|filterAttributeName
parameter_list|,
name|String
name|filterAttributeValue
parameter_list|,
name|String
index|[]
name|searchAttributes
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
name|ldapAttributes
init|=
literal|null
decl_stmt|;
name|AttributesMapper
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
argument_list|>
name|mapper
init|=
operator|new
name|AttributesMapper
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
name|mapFromAttributes
parameter_list|(
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|NamingException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NamingEnumeration
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|attrEnum
init|=
name|attrs
operator|.
name|getAll
argument_list|()
decl_stmt|;
while|while
condition|(
name|attrEnum
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|Attribute
name|att
init|=
name|attrEnum
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|att
operator|.
name|getID
argument_list|()
argument_list|,
name|att
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|AndFilter
name|filter
init|=
operator|new
name|AndFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|and
argument_list|(
operator|new
name|EqualsFilter
argument_list|(
literal|"objectclass"
argument_list|,
name|objectClass
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
operator|new
name|EqualsFilter
argument_list|(
name|filterAttributeName
argument_list|,
name|filterAttributeValue
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|ldapTemplate
operator|.
name|search
argument_list|(
operator|(
name|baseDN
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|baseDN
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|,
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|,
name|searchAttributes
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ldapAttributes
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ldapAttributes
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAttributeOfEntries
parameter_list|(
name|LdapTemplate
name|ldapTemplate
parameter_list|,
name|String
name|baseDN
parameter_list|,
name|String
name|objectClass
parameter_list|,
name|String
name|filterAttributeName
parameter_list|,
name|String
name|filterAttributeValue
parameter_list|,
name|String
name|searchAttribute
parameter_list|)
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|EqualsFilter
argument_list|(
name|filterAttributeName
argument_list|,
name|filterAttributeValue
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getAttributeOfEntries
argument_list|(
name|ldapTemplate
argument_list|,
name|baseDN
argument_list|,
name|objectClass
argument_list|,
name|filters
argument_list|,
name|searchAttribute
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAttributeOfEntries
parameter_list|(
name|LdapTemplate
name|ldapTemplate
parameter_list|,
name|String
name|baseDN
parameter_list|,
name|String
name|objectClass
parameter_list|,
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|,
name|String
name|searchAttribute
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ldapAttributes
init|=
literal|null
decl_stmt|;
name|AttributesMapper
argument_list|<
name|Object
argument_list|>
name|mapper
init|=
operator|new
name|AttributesMapper
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|mapFromAttributes
parameter_list|(
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|NamingException
block|{
name|NamingEnumeration
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|attrEnum
init|=
name|attrs
operator|.
name|getAll
argument_list|()
decl_stmt|;
while|while
condition|(
name|attrEnum
operator|.
name|hasMore
argument_list|()
condition|)
block|{
return|return
name|attrEnum
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|String
index|[]
name|searchAttributes
init|=
operator|new
name|String
index|[]
block|{
name|searchAttribute
block|}
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|AndFilter
name|filter
init|=
operator|new
name|AndFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|and
argument_list|(
operator|new
name|EqualsFilter
argument_list|(
literal|"objectclass"
argument_list|,
name|objectClass
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|filters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Filter
name|f
range|:
name|filters
control|)
block|{
name|filter
operator|.
name|and
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
name|ldapTemplate
operator|.
name|search
argument_list|(
operator|(
name|baseDN
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|baseDN
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|,
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|,
name|searchAttributes
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ldapAttributes
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|ldapAttributes
return|;
block|}
specifier|public
specifier|static
name|Name
name|getDnOfEntry
parameter_list|(
name|LdapTemplate
name|ldapTemplate
parameter_list|,
name|String
name|baseDN
parameter_list|,
name|String
name|objectClass
parameter_list|,
name|String
name|filterAttributeName
parameter_list|,
name|String
name|filterAttributeValue
parameter_list|)
block|{
name|ContextMapper
argument_list|<
name|Name
argument_list|>
name|mapper
init|=
operator|new
name|AbstractContextMapper
argument_list|<
name|Name
argument_list|>
argument_list|()
block|{
specifier|public
name|Name
name|doMapFromContext
parameter_list|(
name|DirContextOperations
name|ctx
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|getDn
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|AndFilter
name|filter
init|=
operator|new
name|AndFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|and
argument_list|(
operator|new
name|EqualsFilter
argument_list|(
literal|"objectclass"
argument_list|,
name|objectClass
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
operator|new
name|EqualsFilter
argument_list|(
name|filterAttributeName
argument_list|,
name|filterAttributeValue
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Name
argument_list|>
name|result
init|=
name|ldapTemplate
operator|.
name|search
argument_list|(
operator|(
name|baseDN
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|baseDN
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|,
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|,
name|mapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//not only the first one....
return|return
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

