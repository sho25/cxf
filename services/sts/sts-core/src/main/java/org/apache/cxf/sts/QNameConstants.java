begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_comment
comment|/**  * This class holds a collection of QName constants.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|QNameConstants
block|{
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|ObjectFactory
name|WS_TRUST_FACTORY
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|ObjectFactory
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|wstrust14
operator|.
name|ObjectFactory
name|WS_TRUST14_FACTORY
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|wstrust14
operator|.
name|ObjectFactory
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|ObjectFactory
name|WSSE_FACTORY
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|ObjectFactory
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|utility
operator|.
name|ObjectFactory
name|UTIL_FACTORY
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|utility
operator|.
name|ObjectFactory
argument_list|()
decl_stmt|;
comment|//
comment|// Token Requirement QNames
comment|//
specifier|public
specifier|static
specifier|final
name|QName
name|TOKEN_TYPE
init|=
name|WS_TRUST_FACTORY
operator|.
name|createTokenType
argument_list|(
literal|""
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|ENTROPY
init|=
name|WS_TRUST_FACTORY
operator|.
name|createEntropy
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|BINARY_SECRET
init|=
name|WS_TRUST_FACTORY
operator|.
name|createBinarySecret
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|ON_BEHALF_OF
init|=
name|WS_TRUST_FACTORY
operator|.
name|createOnBehalfOf
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|VALIDATE_TARGET
init|=
name|WS_TRUST_FACTORY
operator|.
name|createValidateTarget
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|CANCEL_TARGET
init|=
name|WS_TRUST_FACTORY
operator|.
name|createCancelTarget
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|LIFETIME
init|=
name|WS_TRUST_FACTORY
operator|.
name|createLifetime
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|REQUEST_TYPE
init|=
name|WS_TRUST_FACTORY
operator|.
name|createRequestType
argument_list|(
literal|""
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|CLAIMS
init|=
name|WS_TRUST_FACTORY
operator|.
name|createClaims
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//
comment|// Key Requirement QNames
comment|//
specifier|public
specifier|static
specifier|final
name|QName
name|AUTHENTICATION_TYPE
init|=
name|WS_TRUST_FACTORY
operator|.
name|createAuthenticationType
argument_list|(
literal|""
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|KEY_TYPE
init|=
name|WS_TRUST_FACTORY
operator|.
name|createKeyType
argument_list|(
literal|""
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|KEY_SIZE
init|=
name|WS_TRUST_FACTORY
operator|.
name|createKeySize
argument_list|(
literal|0L
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|SIGNATURE_ALGORITHM
init|=
name|WS_TRUST_FACTORY
operator|.
name|createSignatureAlgorithm
argument_list|(
literal|""
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|ENCRYPTION_ALGORITHM
init|=
name|WS_TRUST_FACTORY
operator|.
name|createEncryptionAlgorithm
argument_list|(
literal|""
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|C14N_ALGORITHM
init|=
name|WS_TRUST_FACTORY
operator|.
name|createCanonicalizationAlgorithm
argument_list|(
literal|""
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|COMPUTED_KEY_ALGORITHM
init|=
name|WS_TRUST_FACTORY
operator|.
name|createComputedKeyAlgorithm
argument_list|(
literal|""
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|KEYWRAP_ALGORITHM
init|=
name|WS_TRUST_FACTORY
operator|.
name|createKeyWrapAlgorithm
argument_list|(
literal|""
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|USE_KEY
init|=
name|WS_TRUST_FACTORY
operator|.
name|createUseKey
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//
comment|// WSSE QNames
comment|//
specifier|public
specifier|static
specifier|final
name|QName
name|USERNAME_TOKEN
init|=
name|WSSE_FACTORY
operator|.
name|createUsernameToken
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|BINARY_SECURITY_TOKEN
init|=
name|WSSE_FACTORY
operator|.
name|createBinarySecurityToken
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|PASSWORD
init|=
name|QNameConstants
operator|.
name|WSSE_FACTORY
operator|.
name|createPassword
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|NONCE
init|=
name|QNameConstants
operator|.
name|WSSE_FACTORY
operator|.
name|createNonce
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|SECURITY_TOKEN_REFERENCE
init|=
name|WSSE_FACTORY
operator|.
name|createSecurityTokenReference
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|SECURITY
init|=
name|QNameConstants
operator|.
name|WSSE_FACTORY
operator|.
name|createSecurity
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//
comment|// WSTrust 1.4 QNames
comment|//
specifier|public
specifier|static
specifier|final
name|QName
name|ACT_AS
init|=
name|WS_TRUST14_FACTORY
operator|.
name|createActAs
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|QNameConstants
parameter_list|()
block|{
comment|//
block|}
block|}
end_class

end_unit

