begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|QNameConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|STSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|RequestClaim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|RequestClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|BinarySecretType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|CancelTargetType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|ClaimsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|EntropyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|LifetimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|OnBehalfOfType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestSecurityTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|UseKeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|ValidateTargetType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|ReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|SecurityTokenReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|wstrust14
operator|.
name|ActAsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|xmldsig
operator|.
name|KeyInfoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|xmldsig
operator|.
name|X509DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|SecurityContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * This class parses a RequestSecurityToken object. It stores the values that it finds into a KeyRequirements  * and TokenRequirements objects.  */
end_comment

begin_class
specifier|public
class|class
name|RequestParser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|RequestParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|KeyRequirements
name|keyRequirements
init|=
operator|new
name|KeyRequirements
argument_list|()
decl_stmt|;
specifier|private
name|TokenRequirements
name|tokenRequirements
init|=
operator|new
name|TokenRequirements
argument_list|()
decl_stmt|;
specifier|public
name|void
name|parseRequest
parameter_list|(
name|RequestSecurityTokenType
name|request
parameter_list|,
name|WebServiceContext
name|wsContext
parameter_list|)
throws|throws
name|STSException
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Parsing RequestSecurityToken"
argument_list|)
expr_stmt|;
name|keyRequirements
operator|=
operator|new
name|KeyRequirements
argument_list|()
expr_stmt|;
name|tokenRequirements
operator|=
operator|new
name|TokenRequirements
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|requestObject
range|:
name|request
operator|.
name|getAny
argument_list|()
control|)
block|{
comment|// JAXB types
if|if
condition|(
name|requestObject
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|requestObject
decl_stmt|;
name|boolean
name|found
init|=
name|parseTokenRequirements
argument_list|(
name|jaxbElement
argument_list|,
name|tokenRequirements
argument_list|,
name|wsContext
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|found
operator|=
name|parseKeyRequirements
argument_list|(
name|jaxbElement
argument_list|,
name|keyRequirements
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Found a JAXB object of unknown type: "
operator|+
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"An unknown element was received"
argument_list|,
name|STSException
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
comment|// SecondaryParameters/AppliesTo
block|}
elseif|else
if|if
condition|(
name|requestObject
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|requestObject
decl_stmt|;
if|if
condition|(
name|STSConstants
operator|.
name|WST_NS_05_12
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
literal|"SecondaryParameters"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|parseSecondaryParameters
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AppliesTo"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
operator|(
name|STSConstants
operator|.
name|WSP_NS
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|||
name|STSConstants
operator|.
name|WSP_NS_04
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|tokenRequirements
operator|.
name|setAppliesTo
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found AppliesTo element"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"An unknown (DOM) element was received: "
operator|+
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"An unknown element was received"
argument_list|,
name|STSException
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"An unknown element was received"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"An unknown element was received"
argument_list|,
name|STSException
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
name|String
name|context
init|=
name|request
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|tokenRequirements
operator|.
name|setContext
parameter_list|(
name|context
parameter_list|)
constructor_decl|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Received Context attribute: "
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
specifier|public
name|KeyRequirements
name|getKeyRequirements
parameter_list|()
block|{
return|return
name|keyRequirements
return|;
block|}
end_function

begin_function
specifier|public
name|TokenRequirements
name|getTokenRequirements
parameter_list|()
block|{
return|return
name|tokenRequirements
return|;
block|}
end_function

begin_comment
comment|/**      * Parse the Key and Encryption requirements into the KeyRequirements argument.      */
end_comment

begin_function
specifier|private
specifier|static
name|boolean
name|parseKeyRequirements
parameter_list|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
parameter_list|,
name|KeyRequirements
name|keyRequirements
parameter_list|)
block|{
if|if
condition|(
name|QNameConstants
operator|.
name|AUTHENTICATION_TYPE
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|authenticationType
init|=
operator|(
name|String
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setAuthenticationType
argument_list|(
name|authenticationType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found AuthenticationType: "
operator|+
name|authenticationType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|KEY_TYPE
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|keyType
init|=
operator|(
name|String
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found KeyType: "
operator|+
name|keyType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|KEY_SIZE
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|keySize
init|=
operator|(
operator|(
name|Long
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setKeySize
argument_list|(
name|keySize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found KeySize: "
operator|+
name|keySize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|SIGNATURE_ALGORITHM
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|signatureAlgorithm
init|=
operator|(
name|String
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setSignatureAlgorithm
argument_list|(
name|signatureAlgorithm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found Signature Algorithm: "
operator|+
name|signatureAlgorithm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|ENCRYPTION_ALGORITHM
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|encryptionAlgorithm
init|=
operator|(
name|String
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setEncryptionAlgorithm
argument_list|(
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found Encryption Algorithm: "
operator|+
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|C14N_ALGORITHM
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|c14nAlgorithm
init|=
operator|(
name|String
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setC14nAlgorithm
argument_list|(
name|c14nAlgorithm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found C14n Algorithm: "
operator|+
name|c14nAlgorithm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|COMPUTED_KEY_ALGORITHM
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|computedKeyAlgorithm
init|=
operator|(
name|String
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setComputedKeyAlgorithm
argument_list|(
name|computedKeyAlgorithm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found ComputedKeyAlgorithm: "
operator|+
name|computedKeyAlgorithm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|KEYWRAP_ALGORITHM
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|keywrapAlgorithm
init|=
operator|(
name|String
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|keyRequirements
operator|.
name|setKeywrapAlgorithm
argument_list|(
name|keywrapAlgorithm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found KeyWrapAlgorithm: "
operator|+
name|keywrapAlgorithm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|USE_KEY
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|UseKeyType
name|useKey
init|=
operator|(
name|UseKeyType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|X509Certificate
name|cert
init|=
name|parseUseKey
argument_list|(
name|useKey
argument_list|)
decl_stmt|;
name|keyRequirements
operator|.
name|setCertificate
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|ENTROPY
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|EntropyType
name|entropyType
init|=
operator|(
name|EntropyType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Entropy
name|entropy
init|=
name|parseEntropy
argument_list|(
name|entropyType
argument_list|)
decl_stmt|;
name|keyRequirements
operator|.
name|setEntropy
argument_list|(
name|entropy
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|REQUEST_TYPE
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//NOPMD
comment|// Skip the request type.
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_comment
comment|/**      * Parse the Token requirements into the TokenRequirements argument.      */
end_comment

begin_function
specifier|private
specifier|static
name|boolean
name|parseTokenRequirements
parameter_list|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
parameter_list|,
name|TokenRequirements
name|tokenRequirements
parameter_list|,
name|WebServiceContext
name|wsContext
parameter_list|)
block|{
if|if
condition|(
name|QNameConstants
operator|.
name|TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|tokenType
init|=
operator|(
name|String
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|tokenRequirements
operator|.
name|setTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found TokenType: "
operator|+
name|tokenType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|ON_BEHALF_OF
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|OnBehalfOfType
name|onBehalfOfType
init|=
operator|(
name|OnBehalfOfType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ReceivedToken
name|onBehalfOf
init|=
operator|new
name|ReceivedToken
argument_list|(
name|onBehalfOfType
operator|.
name|getAny
argument_list|()
argument_list|)
decl_stmt|;
name|tokenRequirements
operator|.
name|setOnBehalfOf
argument_list|(
name|onBehalfOf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found OnBehalfOf token"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|ACT_AS
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ActAsType
name|actAsType
init|=
operator|(
name|ActAsType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ReceivedToken
name|actAs
init|=
operator|new
name|ReceivedToken
argument_list|(
name|actAsType
operator|.
name|getAny
argument_list|()
argument_list|)
decl_stmt|;
name|tokenRequirements
operator|.
name|setActAs
argument_list|(
name|actAs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found ActAs token"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|LIFETIME
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LifetimeType
name|lifetimeType
init|=
operator|(
name|LifetimeType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Lifetime
name|lifetime
init|=
operator|new
name|Lifetime
argument_list|()
decl_stmt|;
if|if
condition|(
name|lifetimeType
operator|.
name|getCreated
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lifetime
operator|.
name|setCreated
argument_list|(
name|lifetimeType
operator|.
name|getCreated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lifetimeType
operator|.
name|getExpires
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lifetime
operator|.
name|setExpires
argument_list|(
name|lifetimeType
operator|.
name|getExpires
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tokenRequirements
operator|.
name|setLifetime
argument_list|(
name|lifetime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found Lifetime element"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|VALIDATE_TARGET
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ValidateTargetType
name|validateTargetType
init|=
operator|(
name|ValidateTargetType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ReceivedToken
name|validateTarget
init|=
operator|new
name|ReceivedToken
argument_list|(
name|validateTargetType
operator|.
name|getAny
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTokenReferenced
argument_list|(
name|validateTarget
argument_list|)
condition|)
block|{
name|validateTarget
operator|=
name|fetchTokenFromReference
argument_list|(
name|validateTarget
argument_list|,
name|wsContext
argument_list|)
expr_stmt|;
block|}
name|tokenRequirements
operator|.
name|setValidateTarget
argument_list|(
name|validateTarget
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found ValidateTarget token"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|CANCEL_TARGET
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|CancelTargetType
name|cancelTargetType
init|=
operator|(
name|CancelTargetType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ReceivedToken
name|cancelTarget
init|=
operator|new
name|ReceivedToken
argument_list|(
name|cancelTargetType
operator|.
name|getAny
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTokenReferenced
argument_list|(
name|cancelTarget
argument_list|)
condition|)
block|{
name|cancelTarget
operator|=
name|fetchTokenFromReference
argument_list|(
name|cancelTarget
argument_list|,
name|wsContext
argument_list|)
expr_stmt|;
block|}
name|tokenRequirements
operator|.
name|setCancelTarget
argument_list|(
name|cancelTarget
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found CancelTarget token"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QNameConstants
operator|.
name|CLAIMS
operator|.
name|equals
argument_list|(
name|jaxbElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ClaimsType
name|claimsType
init|=
operator|(
name|ClaimsType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|RequestClaimCollection
name|requestedClaims
init|=
name|parseClaims
argument_list|(
name|claimsType
argument_list|)
decl_stmt|;
name|tokenRequirements
operator|.
name|setClaims
argument_list|(
name|requestedClaims
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found Claims token"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_comment
comment|/**      * Parse the UseKey structure to get a certificate      * @param useKey The UseKey object      * @return the X509 certificate that has been parsed      * @throws STSException      */
end_comment

begin_function
specifier|private
specifier|static
name|X509Certificate
name|parseUseKey
parameter_list|(
name|UseKeyType
name|useKey
parameter_list|)
throws|throws
name|STSException
block|{
name|byte
index|[]
name|x509
init|=
literal|null
decl_stmt|;
name|KeyInfoType
name|keyInfoType
init|=
name|extractType
argument_list|(
name|useKey
operator|.
name|getAny
argument_list|()
argument_list|,
name|KeyInfoType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|keyInfoType
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found KeyInfo UseKey type"
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|keyInfoContent
range|:
name|keyInfoType
operator|.
name|getContent
argument_list|()
control|)
block|{
name|X509DataType
name|x509DataType
init|=
name|extractType
argument_list|(
name|keyInfoContent
argument_list|,
name|X509DataType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|x509DataType
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found X509Data KeyInfo type"
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|x509Object
range|:
name|x509DataType
operator|.
name|getX509IssuerSerialOrX509SKIOrX509SubjectName
argument_list|()
control|)
block|{
name|x509
operator|=
name|extractType
argument_list|(
name|x509Object
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|x509
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found X509Certificate UseKey type"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|useKey
operator|.
name|getAny
argument_list|()
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|elementNSImpl
init|=
operator|(
name|Element
operator|)
name|useKey
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|NodeList
name|x509CertData
init|=
name|elementNSImpl
operator|.
name|getElementsByTagNameNS
argument_list|(
name|Constants
operator|.
name|SignatureSpecNS
argument_list|,
name|Constants
operator|.
name|_TAG_X509CERTIFICATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|x509CertData
operator|!=
literal|null
operator|&&
name|x509CertData
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|x509
operator|=
name|Base64Utility
operator|.
name|decode
argument_list|(
name|x509CertData
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found X509Certificate UseKey type"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|,
name|STSException
operator|.
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|x509
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|x509
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Successfully parsed X509 Certificate from UseKey"
argument_list|)
expr_stmt|;
return|return
name|cert
return|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|""
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Error in parsing certificate: "
argument_list|,
name|ex
argument_list|,
name|STSException
operator|.
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|extractType
parameter_list|(
name|Object
name|param
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|param
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|param
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
name|jaxbElement
operator|.
name|getDeclaredType
argument_list|()
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|jaxbElement
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
end_function

begin_return
return|return
literal|null
return|;
end_return

begin_comment
unit|}
comment|/**      * Parse an Entropy object      * @param entropy an Entropy object      */
end_comment

begin_function
unit|private
specifier|static
name|Entropy
name|parseEntropy
parameter_list|(
name|EntropyType
name|entropyType
parameter_list|)
block|{
for|for
control|(
name|Object
name|entropyObject
range|:
name|entropyType
operator|.
name|getAny
argument_list|()
control|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|entropyObjectJaxb
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|entropyObject
decl_stmt|;
if|if
condition|(
name|QNameConstants
operator|.
name|BINARY_SECRET
operator|.
name|equals
argument_list|(
name|entropyObjectJaxb
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|BinarySecretType
name|binarySecret
init|=
operator|(
name|BinarySecretType
operator|)
name|entropyObjectJaxb
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found BinarySecret Entropy type"
argument_list|)
expr_stmt|;
name|Entropy
name|entropy
init|=
operator|new
name|Entropy
argument_list|()
decl_stmt|;
name|entropy
operator|.
name|setBinarySecretType
argument_list|(
name|binarySecret
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|entropy
operator|.
name|setBinarySecretValue
argument_list|(
name|binarySecret
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entropy
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Unsupported Entropy type: "
operator|+
name|entropyObjectJaxb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO support EncryptedKey
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**      * Parse the secondaryParameters element. Precedence goes to values that are specified as      * direct children of the RequestSecurityToken element.       * @param secondaryParameters the secondaryParameters element to parse      */
end_comment

begin_function
specifier|private
name|void
name|parseSecondaryParameters
parameter_list|(
name|Element
name|secondaryParameters
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found SecondaryParameters element"
argument_list|)
expr_stmt|;
name|Element
name|child
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|secondaryParameters
argument_list|)
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|String
name|localName
init|=
name|child
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|child
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyRequirements
operator|.
name|getKeySize
argument_list|()
operator|==
literal|0
operator|&&
literal|"KeySize"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|&&
name|STSConstants
operator|.
name|WST_NS_05_12
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|long
name|keySize
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|child
operator|.
name|getTextContent
argument_list|()
argument_list|)
decl_stmt|;
name|keyRequirements
operator|.
name|setKeySize
argument_list|(
name|keySize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found KeySize: "
operator|+
name|keySize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenRequirements
operator|.
name|getTokenType
argument_list|()
operator|==
literal|null
operator|&&
literal|"TokenType"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|&&
name|STSConstants
operator|.
name|WST_NS_05_12
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|String
name|tokenType
init|=
name|child
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|tokenRequirements
operator|.
name|setTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found TokenType: "
operator|+
name|tokenType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyRequirements
operator|.
name|getKeyType
argument_list|()
operator|==
literal|null
operator|&&
literal|"KeyType"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|&&
name|STSConstants
operator|.
name|WST_NS_05_12
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|String
name|keyType
init|=
name|child
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found KeyType: "
operator|+
name|keyType
argument_list|)
expr_stmt|;
name|keyRequirements
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenRequirements
operator|.
name|getClaims
argument_list|()
operator|==
literal|null
operator|&&
literal|"Claims"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|&&
name|STSConstants
operator|.
name|WST_NS_05_12
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found Claims element"
argument_list|)
expr_stmt|;
name|RequestClaimCollection
name|requestedClaims
init|=
name|parseClaims
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|tokenRequirements
operator|.
name|setClaims
argument_list|(
name|requestedClaims
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found unknown element: "
operator|+
name|localName
operator|+
literal|" "
operator|+
name|namespace
argument_list|)
expr_stmt|;
block|}
name|child
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Create a RequestClaimCollection from a DOM Element      */
end_comment

begin_function
specifier|private
name|RequestClaimCollection
name|parseClaims
parameter_list|(
name|Element
name|claimsElement
parameter_list|)
block|{
name|String
name|dialectAttr
init|=
literal|null
decl_stmt|;
name|RequestClaimCollection
name|requestedClaims
init|=
operator|new
name|RequestClaimCollection
argument_list|()
decl_stmt|;
try|try
block|{
name|dialectAttr
operator|=
name|claimsElement
operator|.
name|getAttribute
argument_list|(
literal|"Dialect"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dialectAttr
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|dialectAttr
argument_list|)
condition|)
block|{
name|requestedClaims
operator|.
name|setDialect
argument_list|(
operator|new
name|URI
argument_list|(
name|dialectAttr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Cannot create URI from the given Dialect attribute value "
operator|+
name|dialectAttr
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
name|Element
name|childClaimType
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|claimsElement
argument_list|)
decl_stmt|;
while|while
condition|(
name|childClaimType
operator|!=
literal|null
condition|)
block|{
name|RequestClaim
name|requestClaim
init|=
name|parseChildClaimType
argument_list|(
name|childClaimType
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestClaim
operator|!=
literal|null
condition|)
block|{
name|requestedClaims
operator|.
name|add
argument_list|(
name|requestClaim
argument_list|)
expr_stmt|;
block|}
name|childClaimType
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|childClaimType
argument_list|)
expr_stmt|;
block|}
return|return
name|requestedClaims
return|;
block|}
end_function

begin_comment
comment|/**      * Create a RequestClaimCollection from a JAXB ClaimsType object      */
end_comment

begin_function
specifier|private
specifier|static
name|RequestClaimCollection
name|parseClaims
parameter_list|(
name|ClaimsType
name|claimsType
parameter_list|)
block|{
name|String
name|dialectAttr
init|=
literal|null
decl_stmt|;
name|RequestClaimCollection
name|requestedClaims
init|=
operator|new
name|RequestClaimCollection
argument_list|()
decl_stmt|;
try|try
block|{
name|dialectAttr
operator|=
name|claimsType
operator|.
name|getDialect
argument_list|()
expr_stmt|;
if|if
condition|(
name|dialectAttr
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|dialectAttr
argument_list|)
condition|)
block|{
name|requestedClaims
operator|.
name|setDialect
argument_list|(
operator|new
name|URI
argument_list|(
name|dialectAttr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Cannot create URI from the given Dialect attribute value "
operator|+
name|dialectAttr
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|claim
range|:
name|claimsType
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|claim
operator|instanceof
name|Element
condition|)
block|{
name|RequestClaim
name|requestClaim
init|=
name|parseChildClaimType
argument_list|(
operator|(
name|Element
operator|)
name|claim
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestClaim
operator|!=
literal|null
condition|)
block|{
name|requestedClaims
operator|.
name|add
argument_list|(
name|requestClaim
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|requestedClaims
return|;
block|}
end_function

begin_comment
comment|/**      * Parse a child ClaimType into a RequestClaim object.      */
end_comment

begin_function
specifier|private
specifier|static
name|RequestClaim
name|parseChildClaimType
parameter_list|(
name|Element
name|childClaimType
parameter_list|)
block|{
name|String
name|claimLocalName
init|=
name|childClaimType
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|claimNS
init|=
name|childClaimType
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"ClaimType"
operator|.
name|equals
argument_list|(
name|claimLocalName
argument_list|)
condition|)
block|{
name|String
name|claimTypeUri
init|=
name|childClaimType
operator|.
name|getAttribute
argument_list|(
literal|"Uri"
argument_list|)
decl_stmt|;
name|String
name|claimTypeOptional
init|=
name|childClaimType
operator|.
name|getAttribute
argument_list|(
literal|"Optional"
argument_list|)
decl_stmt|;
name|RequestClaim
name|requestClaim
init|=
operator|new
name|RequestClaim
argument_list|()
decl_stmt|;
try|try
block|{
name|requestClaim
operator|.
name|setClaimType
argument_list|(
operator|new
name|URI
argument_list|(
name|claimTypeUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Cannot create URI from the given ClaimType attribute value "
operator|+
name|claimTypeUri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|requestClaim
operator|.
name|setOptional
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|claimTypeOptional
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|requestClaim
return|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found unknown element: "
operator|+
name|claimLocalName
operator|+
literal|" "
operator|+
name|claimNS
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**      * Method to check if the passed token is a SecurityTokenReference      */
end_comment

begin_function
specifier|private
specifier|static
name|boolean
name|isTokenReferenced
parameter_list|(
name|ReceivedToken
name|token
parameter_list|)
block|{
name|Object
name|targetToken
init|=
name|token
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetToken
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|tokenElement
init|=
operator|(
name|Element
operator|)
name|targetToken
decl_stmt|;
name|String
name|namespace
init|=
name|tokenElement
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|localname
init|=
name|tokenElement
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|STSConstants
operator|.
name|WSSE_EXT_04_01
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|&&
literal|"SecurityTokenReference"
operator|.
name|equals
argument_list|(
name|localname
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|targetToken
operator|instanceof
name|SecurityTokenReferenceType
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|/**      * Method to fetch token from the SecurityTokenReference      */
end_comment

begin_function
specifier|private
specifier|static
name|ReceivedToken
name|fetchTokenFromReference
parameter_list|(
name|ReceivedToken
name|tokenReference
parameter_list|,
name|WebServiceContext
name|wsContext
parameter_list|)
block|{
comment|// Get the reference URI
name|String
name|referenceURI
init|=
literal|null
decl_stmt|;
name|Object
name|targetToken
init|=
name|tokenReference
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetToken
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|tokenElement
init|=
operator|(
name|Element
operator|)
name|targetToken
decl_stmt|;
name|NodeList
name|refList
init|=
name|tokenElement
operator|.
name|getElementsByTagNameNS
argument_list|(
name|STSConstants
operator|.
name|WSSE_EXT_04_01
argument_list|,
literal|"Reference"
argument_list|)
decl_stmt|;
if|if
condition|(
name|refList
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Cannot find Reference element in the SecurityTokenReference."
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
name|referenceURI
operator|=
name|refList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetToken
operator|instanceof
name|SecurityTokenReferenceType
condition|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|iterator
init|=
operator|(
operator|(
name|SecurityTokenReferenceType
operator|)
name|targetToken
operator|)
operator|.
name|getAny
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|jaxbElement
operator|.
name|getValue
argument_list|()
operator|instanceof
name|ReferenceType
condition|)
block|{
name|referenceURI
operator|=
operator|(
operator|(
name|ReferenceType
operator|)
name|jaxbElement
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getURI
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Reference URI found "
operator|+
name|referenceURI
argument_list|)
expr_stmt|;
comment|// Find processed token corresponding to the URI
if|if
condition|(
name|referenceURI
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
name|referenceURI
operator|=
name|referenceURI
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|MessageContext
name|messageContext
init|=
name|wsContext
operator|.
name|getMessageContext
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|handlerResults
operator|!=
literal|null
operator|&&
name|handlerResults
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|WSHandlerResult
name|handlerResult
init|=
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|engineResults
init|=
name|handlerResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|engineResult
range|:
name|engineResults
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|engineResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
name|String
name|id
init|=
operator|(
name|String
operator|)
name|engineResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|referenceURI
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|Element
name|tokenElement
init|=
operator|(
name|Element
operator|)
name|engineResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TOKEN_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenElement
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Cannot retrieve token from reference"
argument_list|,
name|STSException
operator|.
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
return|return
operator|new
name|ReceivedToken
argument_list|(
name|tokenElement
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|actInt
operator|==
name|WSConstants
operator|.
name|SCT
condition|)
block|{
comment|// Need to check special case of SecurityContextToken Identifier separately
name|SecurityContextToken
name|sct
init|=
operator|(
name|SecurityContextToken
operator|)
name|engineResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECURITY_CONTEXT_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|referenceURI
operator|.
name|equals
argument_list|(
name|sct
operator|.
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReceivedToken
argument_list|(
name|sct
operator|.
name|getElement
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Cannot retreive token from reference"
argument_list|,
name|STSException
operator|.
name|REQUEST_FAILED
argument_list|)
throw|;
block|}
end_function

unit|}
end_unit

