begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|ReceivedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|request
operator|.
name|TokenRequirements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|secext
operator|.
name|UsernameTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|SAMLTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|SAMLTokenPrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|bean
operator|.
name|AttributeBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|bean
operator|.
name|AttributeStatementBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_comment
comment|/**  * An AttributeStatementProvider implementation to handle "ActAs". It adds an "ActAs "attribute" with the name of  * the principal that this token is "acting as".  */
end_comment

begin_class
specifier|public
class|class
name|ActAsAttributeStatementProvider
implements|implements
name|AttributeStatementProvider
block|{
comment|/**      * Get an AttributeStatementBean using the given parameters.      */
specifier|public
name|AttributeStatementBean
name|getStatement
parameter_list|(
name|TokenProviderParameters
name|providerParameters
parameter_list|)
block|{
name|AttributeStatementBean
name|attrBean
init|=
operator|new
name|AttributeStatementBean
argument_list|()
decl_stmt|;
name|TokenRequirements
name|tokenRequirements
init|=
name|providerParameters
operator|.
name|getTokenRequirements
argument_list|()
decl_stmt|;
name|ReceivedToken
name|actAs
init|=
name|tokenRequirements
operator|.
name|getActAs
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|actAs
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|AttributeBean
argument_list|>
name|attributeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|tokenType
init|=
name|tokenRequirements
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
name|AttributeBean
name|parameterBean
init|=
name|handleAdditionalParameters
argument_list|(
name|actAs
operator|.
name|getToken
argument_list|()
argument_list|,
name|tokenType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parameterBean
operator|.
name|getAttributeValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|attributeList
operator|.
name|add
argument_list|(
name|parameterBean
argument_list|)
expr_stmt|;
block|}
name|attrBean
operator|.
name|setSamlAttributes
argument_list|(
name|attributeList
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|STSException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
name|attrBean
return|;
block|}
comment|/**      * Handle an ActAs element.      */
specifier|private
name|AttributeBean
name|handleAdditionalParameters
parameter_list|(
name|Object
name|parameter
parameter_list|,
name|String
name|tokenType
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|AttributeBean
name|parameterBean
init|=
operator|new
name|AttributeBean
argument_list|()
decl_stmt|;
name|String
name|claimType
init|=
literal|"ActAs"
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|parameterBean
operator|.
name|setSimpleName
argument_list|(
name|claimType
argument_list|)
expr_stmt|;
name|parameterBean
operator|.
name|setQualifiedName
argument_list|(
literal|"http://cxf.apache.org/sts"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parameterBean
operator|.
name|setQualifiedName
argument_list|(
name|claimType
argument_list|)
expr_stmt|;
name|parameterBean
operator|.
name|setNameFormat
argument_list|(
literal|"http://cxf.apache.org/sts"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameter
operator|instanceof
name|UsernameTokenType
condition|)
block|{
name|parameterBean
operator|.
name|addAttributeValue
argument_list|(
operator|(
operator|(
name|UsernameTokenType
operator|)
name|parameter
operator|)
operator|.
name|getUsername
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameter
operator|instanceof
name|Element
condition|)
block|{
name|SamlAssertionWrapper
name|wrapper
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
operator|(
name|Element
operator|)
name|parameter
argument_list|)
decl_stmt|;
name|SAMLTokenPrincipal
name|principal
init|=
operator|new
name|SAMLTokenPrincipalImpl
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
name|parameterBean
operator|.
name|addAttributeValue
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|parameterBean
return|;
block|}
block|}
end_class

end_unit

