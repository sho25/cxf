begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Element
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultInMemoryCache
implements|implements
name|STSCache
block|{
specifier|private
name|Cache
name|cache
decl_stmt|;
specifier|private
name|CacheManager
name|cacheManager
init|=
name|CacheManager
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|public
name|DefaultInMemoryCache
parameter_list|()
block|{
name|cache
operator|=
operator|new
name|Cache
argument_list|(
literal|"STS"
argument_list|,
literal|5000
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|3600
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|cacheManager
operator|.
name|addCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Element
name|element
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
return|return
name|element
operator|.
name|getObjectValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|element
return|;
block|}
block|}
specifier|public
name|void
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
operator|new
name|Element
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeAll
parameter_list|()
block|{
name|cache
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|cache
operator|.
name|getSize
argument_list|()
return|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Integer
name|timeToLiveSeconds
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
operator|new
name|Element
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|false
argument_list|,
name|timeToLiveSeconds
argument_list|,
name|timeToLiveSeconds
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

