begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|provider
package|;
end_package

begin_comment
comment|/**  * A class that encapsulates how a token should be referenced  */
end_comment

begin_class
specifier|public
class|class
name|TokenReference
block|{
specifier|private
name|String
name|identifier
decl_stmt|;
specifier|private
name|String
name|wsse11TokenType
decl_stmt|;
specifier|private
name|String
name|wsseValueType
decl_stmt|;
specifier|private
name|boolean
name|useDirectReference
decl_stmt|;
specifier|private
name|boolean
name|useKeyIdentifier
decl_stmt|;
comment|/**      * Get the identifier associated with this token      * @return the identifier associated with this token      */
specifier|public
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|identifier
return|;
block|}
comment|/**      * Set the identifier associated with this token      * @param identifier the identifier associated with this token      */
specifier|public
name|void
name|setIdentifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
block|}
comment|/**      * Get the wsse11 TokenType attribute      * @return the wsse11 TokenType attribute      */
specifier|public
name|String
name|getWsse11TokenType
parameter_list|()
block|{
return|return
name|wsse11TokenType
return|;
block|}
comment|/**      * Set the wsse11 TokenType attribute      * @param wsse11TokenType the wsse11 TokenType attribute      */
specifier|public
name|void
name|setWsse11TokenType
parameter_list|(
name|String
name|wsse11TokenType
parameter_list|)
block|{
name|this
operator|.
name|wsse11TokenType
operator|=
name|wsse11TokenType
expr_stmt|;
block|}
comment|/**      * Get the wsse ValueType attribute      * @return the wsse ValueType attribute      */
specifier|public
name|String
name|getWsseValueType
parameter_list|()
block|{
return|return
name|wsseValueType
return|;
block|}
comment|/**      * Set the wsse ValueType attribute      * @param wsseValueType the wsse ValueType attribute      */
specifier|public
name|void
name|setWsseValueType
parameter_list|(
name|String
name|wsseValueType
parameter_list|)
block|{
name|this
operator|.
name|wsseValueType
operator|=
name|wsseValueType
expr_stmt|;
block|}
comment|/**      * Get whether to use direct reference to refer to this token      * @return whether to use direct reference to refer to this token      */
specifier|public
name|boolean
name|isUseDirectReference
parameter_list|()
block|{
return|return
name|useDirectReference
return|;
block|}
comment|/**      * Set whether to use direct reference to refer to this token      * @param useDirectReference whether to use direct reference to refer to this token      */
specifier|public
name|void
name|setUseDirectReference
parameter_list|(
name|boolean
name|useDirectReference
parameter_list|)
block|{
name|this
operator|.
name|useDirectReference
operator|=
name|useDirectReference
expr_stmt|;
block|}
comment|/**      * Get whether to use a KeyIdentifier to refer to this token      * @return whether to use a KeyIdentifier to refer to this token      */
specifier|public
name|boolean
name|isUseKeyIdentifier
parameter_list|()
block|{
return|return
name|useKeyIdentifier
return|;
block|}
comment|/**      * Set whether to use a KeyIdentifier to refer to this token      * @param useKeyIdentifier whether to use a KeyIdentifier to refer to this token      */
specifier|public
name|void
name|setUseKeyIdentifier
parameter_list|(
name|boolean
name|useKeyIdentifier
parameter_list|)
block|{
name|this
operator|.
name|useKeyIdentifier
operator|=
name|useKeyIdentifier
expr_stmt|;
block|}
block|}
end_class

end_unit

