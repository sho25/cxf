begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_comment
comment|/**  * This represents a Claim that has been processed by a ClaimsHandler instance.  */
end_comment

begin_class
specifier|public
class|class
name|ProcessedClaim
extends|extends
name|Claim
block|{
comment|/**      *      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|336574019841442184L
decl_stmt|;
specifier|private
name|String
name|issuer
decl_stmt|;
specifier|private
name|String
name|originalIssuer
decl_stmt|;
specifier|private
specifier|transient
name|Principal
name|principal
decl_stmt|;
specifier|public
name|ProcessedClaim
parameter_list|()
block|{     }
specifier|public
name|ProcessedClaim
parameter_list|(
name|ProcessedClaim
name|processedClaim
parameter_list|)
block|{
name|super
argument_list|(
name|processedClaim
argument_list|)
expr_stmt|;
name|issuer
operator|=
name|processedClaim
operator|.
name|issuer
expr_stmt|;
name|originalIssuer
operator|=
name|processedClaim
operator|.
name|originalIssuer
expr_stmt|;
name|principal
operator|=
name|processedClaim
operator|.
name|principal
expr_stmt|;
block|}
specifier|public
name|String
name|getIssuer
parameter_list|()
block|{
return|return
name|issuer
return|;
block|}
specifier|public
name|void
name|setIssuer
parameter_list|(
name|String
name|issuer
parameter_list|)
block|{
name|this
operator|.
name|issuer
operator|=
name|issuer
expr_stmt|;
block|}
specifier|public
name|String
name|getOriginalIssuer
parameter_list|()
block|{
return|return
name|originalIssuer
return|;
block|}
specifier|public
name|void
name|setOriginalIssuer
parameter_list|(
name|String
name|originalIssuer
parameter_list|)
block|{
name|this
operator|.
name|originalIssuer
operator|=
name|originalIssuer
expr_stmt|;
block|}
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|principal
return|;
block|}
specifier|public
name|void
name|setPrincipal
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|128
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"ProcessedClaim ["
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", issuer="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|issuer
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", originalIssuer="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|originalIssuer
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", principal="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|issuer
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|issuer
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|originalIssuer
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|originalIssuer
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ProcessedClaim
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ProcessedClaim
name|other
init|=
operator|(
name|ProcessedClaim
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|issuer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|issuer
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|issuer
operator|.
name|equals
argument_list|(
name|other
operator|.
name|issuer
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|originalIssuer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|originalIssuer
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|originalIssuer
operator|.
name|equals
argument_list|(
name|other
operator|.
name|originalIssuer
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProcessedClaim
name|clone
parameter_list|()
block|{
comment|//NOPMD
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|// Checkstyle requires this call
return|return
operator|new
name|ProcessedClaim
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

