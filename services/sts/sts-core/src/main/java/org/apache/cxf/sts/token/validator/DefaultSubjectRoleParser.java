begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|token
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|DefaultSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|RolePrefixSecurityContextImpl
import|;
end_import

begin_comment
comment|/**  * A default implementation to extract roles from a Subject  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSubjectRoleParser
implements|implements
name|SubjectRoleParser
block|{
specifier|private
name|String
name|roleClassifier
decl_stmt|;
specifier|private
name|String
name|roleClassifierType
init|=
literal|"prefix"
decl_stmt|;
comment|/**      * Return the set of User/Principal roles from the Subject.      * @param principal the optional Principal      * @param subject the JAAS Subject      * @return the set of User/Principal roles from the Subject.      */
specifier|public
name|Set
argument_list|<
name|Principal
argument_list|>
name|parseRolesFromSubject
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|Subject
name|subject
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|roleClassifier
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|roleClassifier
argument_list|)
condition|)
block|{
name|RolePrefixSecurityContextImpl
name|securityContext
init|=
operator|new
name|RolePrefixSecurityContextImpl
argument_list|(
name|subject
argument_list|,
name|roleClassifier
argument_list|,
name|roleClassifierType
argument_list|)
decl_stmt|;
return|return
name|securityContext
operator|.
name|getUserRoles
argument_list|()
return|;
block|}
return|return
operator|new
name|DefaultSecurityContext
argument_list|(
name|principal
argument_list|,
name|subject
argument_list|)
operator|.
name|getUserRoles
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRoleClassifier
parameter_list|()
block|{
return|return
name|roleClassifier
return|;
block|}
comment|/**      * Set the Subject Role Classifier to use. If this value is not specified, then it tries to      * get roles from the supplied JAAS Subject (if not null) using the DefaultSecurityContext      * in cxf-rt-core. Otherwise it uses this value in combination with the      * SUBJECT_ROLE_CLASSIFIER_TYPE to get the roles from the Subject.      * @param roleClassifier the Subject Role Classifier to use      */
specifier|public
name|void
name|setRoleClassifier
parameter_list|(
name|String
name|roleClassifier
parameter_list|)
block|{
name|this
operator|.
name|roleClassifier
operator|=
name|roleClassifier
expr_stmt|;
block|}
specifier|public
name|String
name|getRoleClassifierType
parameter_list|()
block|{
return|return
name|roleClassifierType
return|;
block|}
comment|/**      * Set the Subject Role Classifier Type to use. Currently accepted values are "prefix" or      * "classname". Must be used in conjunction with the SUBJECT_ROLE_CLASSIFIER. The default      * value is "prefix".      * @param roleClassifierType the Subject Role Classifier Type to use      */
specifier|public
name|void
name|setRoleClassifierType
parameter_list|(
name|String
name|roleClassifierType
parameter_list|)
block|{
name|this
operator|.
name|roleClassifierType
operator|=
name|roleClassifierType
expr_stmt|;
block|}
block|}
end_class

end_unit

