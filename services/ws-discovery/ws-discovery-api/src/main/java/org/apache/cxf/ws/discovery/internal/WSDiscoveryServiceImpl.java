begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlSeeAlso
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|util
operator|.
name|JAXBSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|EndpointReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReferenceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBContextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|spi
operator|.
name|ProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceModelUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|transform
operator|.
name|InTransformReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|WSDVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|WSDiscoveryClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|WSDiscoveryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ByeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|HelloType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ProbeMatchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ProbeMatchesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ProbeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ResolveMatchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ResolveMatchesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ResolveType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ScopesType
import|;
end_import

begin_class
specifier|public
class|class
name|WSDiscoveryServiceImpl
implements|implements
name|WSDiscoveryService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDiscoveryService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bus
name|bus
decl_stmt|;
name|Endpoint
name|udpEndpoint
decl_stmt|;
name|WSDiscoveryClient
name|client
decl_stmt|;
name|List
argument_list|<
name|HelloType
argument_list|>
name|registered
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|HelloType
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectFactory
name|factory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|boolean
name|started
decl_stmt|;
specifier|public
name|WSDiscoveryServiceImpl
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
operator|==
literal|null
condition|?
name|BusFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createBus
argument_list|()
else|:
name|b
expr_stmt|;
name|client
operator|=
operator|new
name|WSDiscoveryClient
argument_list|()
expr_stmt|;
name|update
argument_list|(
name|bus
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WSDiscoveryServiceImpl
parameter_list|()
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createBus
argument_list|()
expr_stmt|;
name|client
operator|=
operator|new
name|WSDiscoveryClient
argument_list|()
expr_stmt|;
name|update
argument_list|(
name|bus
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WSDiscoveryServiceImpl
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
name|client
operator|=
operator|new
name|WSDiscoveryClient
argument_list|()
expr_stmt|;
name|update
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|synchronized
name|void
name|update
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
block|{
name|String
name|address
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.service.ws-discovery.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|udpEndpoint
operator|!=
literal|null
operator|&&
operator|!
name|client
operator|.
name|isAdHoc
argument_list|()
condition|)
block|{
name|udpEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
name|udpEndpoint
operator|=
literal|null
expr_stmt|;
name|started
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|WSDiscoveryClient
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
specifier|public
name|HelloType
name|register
parameter_list|(
name|EndpointReference
name|ref
parameter_list|)
block|{
name|startup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|HelloType
name|ht
init|=
name|client
operator|.
name|register
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|registered
operator|.
name|add
argument_list|(
name|ht
argument_list|)
expr_stmt|;
return|return
name|ht
return|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|HelloType
name|ht
parameter_list|)
block|{
name|startup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|client
operator|.
name|register
argument_list|(
name|ht
argument_list|)
expr_stmt|;
name|registered
operator|.
name|add
argument_list|(
name|ht
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|getProperty
parameter_list|(
name|Server
name|server
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|Object
name|o
init|=
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
specifier|public
name|void
name|serverStarted
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|Object
name|o
init|=
name|getProperty
argument_list|(
name|server
argument_list|,
literal|"ws-discovery-disable"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|Boolean
operator|.
name|TRUE
operator|||
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|startup
argument_list|(
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|HelloType
name|ht
init|=
operator|new
name|HelloType
argument_list|()
decl_stmt|;
name|ht
operator|.
name|setScopes
argument_list|(
operator|new
name|ScopesType
argument_list|()
argument_list|)
expr_stmt|;
name|ht
operator|.
name|setMetadataVersion
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|o
operator|=
name|getProperty
argument_list|(
name|server
argument_list|,
literal|"ws-discovery-types"
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|QName
condition|)
block|{
name|ht
operator|.
name|getTypes
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|QName
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
for|for
control|(
name|Object
name|o2
range|:
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|o
control|)
block|{
if|if
condition|(
name|o2
operator|instanceof
name|QName
condition|)
block|{
name|ht
operator|.
name|getTypes
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|QName
operator|)
name|o2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o2
operator|instanceof
name|String
condition|)
block|{
name|ht
operator|.
name|getTypes
argument_list|()
operator|.
name|add
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|ht
operator|.
name|getTypes
argument_list|()
operator|.
name|add
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ht
operator|.
name|getTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QName
name|sn
init|=
name|ServiceModelUtil
operator|.
name|getServiceQName
argument_list|(
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
decl_stmt|;
name|ht
operator|.
name|getTypes
argument_list|()
operator|.
name|add
argument_list|(
name|sn
argument_list|)
expr_stmt|;
block|}
name|o
operator|=
name|getProperty
argument_list|(
name|server
argument_list|,
literal|"ws-discovery-scopes"
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|setScopes
argument_list|(
name|ht
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|setXAddrs
argument_list|(
name|ht
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|String
name|uuid
init|=
operator|(
name|String
operator|)
name|getProperty
argument_list|(
name|server
argument_list|,
literal|"ws-discovery-uuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
comment|//persistent uuid
name|W3CEndpointReferenceBuilder
name|builder
init|=
operator|new
name|W3CEndpointReferenceBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|address
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|ht
operator|.
name|setEndpointReference
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ht
operator|=
name|client
operator|.
name|register
argument_list|(
name|ht
argument_list|)
expr_stmt|;
name|registered
operator|.
name|add
argument_list|(
name|ht
argument_list|)
expr_stmt|;
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|put
argument_list|(
name|HelloType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ht
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setXAddrs
parameter_list|(
name|HelloType
name|ht
parameter_list|,
name|Server
name|server
parameter_list|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|getProperty
argument_list|(
name|server
argument_list|,
literal|"ws-discovery-published-url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|(
name|String
operator|)
name|getProperty
argument_list|(
name|server
argument_list|,
literal|"publishedEndpointUrl"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|ht
operator|.
name|getXAddrs
argument_list|()
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setScopes
parameter_list|(
name|HelloType
name|ht
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|l
init|=
operator|(
name|List
operator|)
name|o
decl_stmt|;
for|for
control|(
name|Object
name|o2
range|:
name|l
control|)
block|{
name|ht
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|add
argument_list|(
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ht
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|serverStopped
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|HelloType
name|ht
init|=
operator|(
name|HelloType
operator|)
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|get
argument_list|(
name|HelloType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ht
operator|!=
literal|null
condition|)
block|{
name|unregister
argument_list|(
name|ht
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregister
parameter_list|(
name|HelloType
name|ht
parameter_list|)
block|{
name|registered
operator|.
name|remove
argument_list|(
name|ht
argument_list|)
expr_stmt|;
name|client
operator|.
name|unregister
argument_list|(
name|ht
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|startup
parameter_list|()
block|{
name|startup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|startup
parameter_list|(
name|boolean
name|optional
parameter_list|)
block|{
if|if
condition|(
operator|!
name|started
operator|&&
name|client
operator|.
name|isAdHoc
argument_list|()
condition|)
block|{
name|Bus
name|b
init|=
name|BusFactory
operator|.
name|getAndSetThreadDefaultBus
argument_list|(
name|bus
argument_list|)
decl_stmt|;
try|try
block|{
name|udpEndpoint
operator|=
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
operator|new
name|WSDiscoveryProvider
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"jaxws.provider.interpretNullAsOneway"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|udpEndpoint
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|udpEndpoint
operator|.
name|publish
argument_list|(
literal|"soap.udp://239.255.255.250:3702"
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|optional
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Could not start WS-Discovery Service."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|b
operator|!=
name|bus
condition|)
block|{
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|ProbeMatchesType
name|handleProbe
parameter_list|(
name|ProbeType
name|pt
parameter_list|)
block|{
name|List
argument_list|<
name|HelloType
argument_list|>
name|consider
init|=
operator|new
name|LinkedList
argument_list|<
name|HelloType
argument_list|>
argument_list|(
name|registered
argument_list|)
decl_stmt|;
comment|//step one, consider the "types"
comment|//ALL types in the probe must be in the registered type
if|if
condition|(
name|pt
operator|.
name|getTypes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|pt
operator|.
name|getTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ListIterator
argument_list|<
name|HelloType
argument_list|>
name|cit
init|=
name|consider
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|cit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HelloType
name|ht
init|=
name|cit
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|matches
init|=
literal|true
decl_stmt|;
for|for
control|(
name|QName
name|qn
range|:
name|pt
operator|.
name|getTypes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ht
operator|.
name|getTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|matches
condition|)
block|{
name|cit
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//next, consider the scopes
name|matchScopes
argument_list|(
name|pt
argument_list|,
name|consider
argument_list|)
expr_stmt|;
if|if
condition|(
name|consider
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ProbeMatchesType
name|pmt
init|=
operator|new
name|ProbeMatchesType
argument_list|()
decl_stmt|;
for|for
control|(
name|HelloType
name|ht
range|:
name|consider
control|)
block|{
name|ProbeMatchType
name|m
init|=
operator|new
name|ProbeMatchType
argument_list|()
decl_stmt|;
name|m
operator|.
name|setEndpointReference
argument_list|(
name|ht
operator|.
name|getEndpointReference
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setScopes
argument_list|(
name|ht
operator|.
name|getScopes
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMetadataVersion
argument_list|(
name|ht
operator|.
name|getMetadataVersion
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|getTypes
argument_list|()
operator|.
name|addAll
argument_list|(
name|ht
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|getXAddrs
argument_list|()
operator|.
name|addAll
argument_list|(
name|ht
operator|.
name|getXAddrs
argument_list|()
argument_list|)
expr_stmt|;
name|pmt
operator|.
name|getProbeMatch
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|pmt
return|;
block|}
specifier|private
name|UUID
name|toUUID
parameter_list|(
name|String
name|scope
parameter_list|)
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|scope
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|UUID
operator|.
name|fromString
argument_list|(
name|scope
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"urn"
argument_list|)
condition|)
block|{
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"uuid"
argument_list|)
condition|)
block|{
return|return
name|UUID
operator|.
name|fromString
argument_list|(
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|compare
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
name|s2
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|matchURIs
parameter_list|(
name|URI
name|probe
parameter_list|,
name|URI
name|target
parameter_list|)
block|{
if|if
condition|(
name|compare
argument_list|(
name|target
operator|.
name|getScheme
argument_list|()
argument_list|,
name|probe
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|&&
name|compare
argument_list|(
name|target
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|probe
operator|.
name|getAuthority
argument_list|()
argument_list|)
condition|)
block|{
name|String
index|[]
name|ppath
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|probe
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
index|[]
name|tpath
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|target
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ppath
operator|.
name|length
operator|<=
name|tpath
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ppath
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|ppath
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|tpath
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|matchScopes
parameter_list|(
name|ProbeType
name|pt
parameter_list|,
name|List
argument_list|<
name|HelloType
argument_list|>
name|consider
parameter_list|)
block|{
if|if
condition|(
name|pt
operator|.
name|getScopes
argument_list|()
operator|==
literal|null
operator|||
name|pt
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|mb
init|=
name|pt
operator|.
name|getScopes
argument_list|()
operator|.
name|getMatchBy
argument_list|()
decl_stmt|;
if|if
condition|(
name|mb
operator|==
literal|null
condition|)
block|{
name|mb
operator|=
literal|"http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01/rfc3986"
expr_stmt|;
block|}
if|if
condition|(
name|mb
operator|.
name|startsWith
argument_list|(
name|WSDVersion
operator|.
name|NS_1_0
argument_list|)
condition|)
block|{
name|mb
operator|=
name|mb
operator|.
name|substring
argument_list|(
name|WSDVersion
operator|.
name|NS_1_0
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mb
operator|.
name|startsWith
argument_list|(
name|WSDVersion
operator|.
name|NS_1_1
argument_list|)
condition|)
block|{
name|mb
operator|=
name|mb
operator|.
name|substring
argument_list|(
name|WSDVersion
operator|.
name|NS_1_1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ListIterator
argument_list|<
name|HelloType
argument_list|>
name|cit
init|=
name|consider
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|cit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HelloType
name|ht
init|=
name|cit
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|matches
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"/rfc3986"
operator|.
name|equals
argument_list|(
name|mb
argument_list|)
condition|)
block|{
name|matches
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|pt
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|ps
range|:
name|pt
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
control|)
block|{
name|boolean
name|foundOne
init|=
literal|false
decl_stmt|;
name|URI
name|psuri
init|=
name|URI
operator|.
name|create
argument_list|(
name|ps
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|hts
range|:
name|ht
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
control|)
block|{
name|URI
name|hturi
init|=
name|URI
operator|.
name|create
argument_list|(
name|hts
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchURIs
argument_list|(
name|psuri
argument_list|,
name|hturi
argument_list|)
condition|)
block|{
name|foundOne
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|matches
operator|&=
name|foundOne
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"/uuid"
operator|.
name|equals
argument_list|(
name|mb
argument_list|)
condition|)
block|{
name|matches
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|pt
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|ps
range|:
name|pt
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
control|)
block|{
name|boolean
name|foundOne
init|=
literal|false
decl_stmt|;
name|UUID
name|psuuid
init|=
name|toUUID
argument_list|(
name|ps
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|hts
range|:
name|ht
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
control|)
block|{
name|UUID
name|htuuid
init|=
name|toUUID
argument_list|(
name|hts
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|htuuid
operator|.
name|equals
argument_list|(
name|psuuid
argument_list|)
condition|)
block|{
name|foundOne
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|matches
operator|&=
name|foundOne
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"/ldap"
operator|.
name|equals
argument_list|(
name|mb
argument_list|)
condition|)
block|{
comment|//LDAP not supported
if|if
condition|(
operator|!
name|pt
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"/strcmp0"
operator|.
name|equals
argument_list|(
name|mb
argument_list|)
condition|)
block|{
name|matches
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|pt
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|pt
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ht
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"/none"
operator|.
name|equals
argument_list|(
name|mb
argument_list|)
operator|&&
operator|(
name|ht
operator|.
name|getScopes
argument_list|()
operator|==
literal|null
operator|||
name|ht
operator|.
name|getScopes
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|matches
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|matches
condition|)
block|{
name|cit
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|WebServiceProvider
argument_list|(
name|wsdlLocation
operator|=
literal|"classpath:/org/apache/cxf/ws/discovery/wsdl/wsdd-discovery-1.1-wsdl-os.wsdl"
argument_list|,
name|targetNamespace
operator|=
literal|"http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01"
argument_list|,
name|serviceName
operator|=
literal|"Discovery"
argument_list|,
name|portName
operator|=
literal|"DiscoveryUDP"
argument_list|)
annotation|@
name|XmlSeeAlso
argument_list|(
name|ObjectFactory
operator|.
name|class
argument_list|)
annotation|@
name|Addressing
argument_list|(
name|required
operator|=
literal|true
argument_list|)
class|class
name|WSDiscoveryProvider
implements|implements
name|Provider
argument_list|<
name|Source
argument_list|>
block|{
name|JAXBContext
name|context
decl_stmt|;
name|WSDiscoveryProvider
parameter_list|()
block|{
try|try
block|{
name|context
operator|=
name|JAXBContextCache
operator|.
name|getCachedContextAndSchemas
argument_list|(
name|ObjectFactory
operator|.
name|class
argument_list|)
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Source
name|mapToOld
parameter_list|(
name|Document
name|doc
parameter_list|,
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|mt
parameter_list|)
throws|throws
name|JAXBException
throws|,
name|XMLStreamException
block|{
name|doc
operator|.
name|removeChild
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|XMLStreamWriter
name|r
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|context
operator|.
name|createMarshaller
argument_list|()
operator|.
name|marshal
argument_list|(
name|mt
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|XMLStreamReader
name|domReader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|inMap
operator|.
name|put
argument_list|(
literal|"{"
operator|+
name|WSDVersion
operator|.
name|INSTANCE_1_1
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"}*"
argument_list|,
literal|"{"
operator|+
name|WSDVersion
operator|.
name|INSTANCE_1_0
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"}*"
argument_list|)
expr_stmt|;
name|inMap
operator|.
name|put
argument_list|(
literal|"{"
operator|+
name|WSDVersion
operator|.
name|INSTANCE_1_1
operator|.
name|getAddressingNamespace
argument_list|()
operator|+
literal|"}*"
argument_list|,
literal|"{"
operator|+
name|WSDVersion
operator|.
name|INSTANCE_1_0
operator|.
name|getAddressingNamespace
argument_list|()
operator|+
literal|"}*"
argument_list|)
expr_stmt|;
name|InTransformReader
name|reader
init|=
operator|new
name|InTransformReader
argument_list|(
name|domReader
argument_list|,
name|inMap
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|doc
operator|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
return|;
block|}
specifier|private
name|void
name|updateOutputAction
parameter_list|(
name|String
name|append
parameter_list|)
block|{
name|AddressingProperties
name|p
init|=
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AddressingProperties
name|pout
init|=
operator|new
name|AddressingProperties
argument_list|()
decl_stmt|;
name|AttributedURIType
name|action
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|action
operator|.
name|setValue
argument_list|(
name|p
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|()
operator|+
name|append
argument_list|)
expr_stmt|;
name|pout
operator|.
name|exposeAs
argument_list|(
name|p
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|pout
operator|.
name|setAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|ContextUtils
operator|.
name|storeMAPs
argument_list|(
name|pout
argument_list|,
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Document
name|mapFromOld
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|domReader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|inMap
operator|.
name|put
argument_list|(
literal|"{"
operator|+
name|WSDVersion
operator|.
name|INSTANCE_1_0
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"}*"
argument_list|,
literal|"{"
operator|+
name|WSDVersion
operator|.
name|INSTANCE_1_1
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"}*"
argument_list|)
expr_stmt|;
name|inMap
operator|.
name|put
argument_list|(
literal|"{"
operator|+
name|WSDVersion
operator|.
name|INSTANCE_1_0
operator|.
name|getAddressingNamespace
argument_list|()
operator|+
literal|"}*"
argument_list|,
literal|"{"
operator|+
name|WSDVersion
operator|.
name|INSTANCE_1_1
operator|.
name|getAddressingNamespace
argument_list|()
operator|+
literal|"}*"
argument_list|)
expr_stmt|;
name|InTransformReader
name|reader
init|=
operator|new
name|InTransformReader
argument_list|(
name|domReader
argument_list|,
name|inMap
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|doc
operator|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|//System.out.println(StaxUtils.toString(doc));
return|return
name|doc
return|;
block|}
specifier|public
name|Source
name|invoke
parameter_list|(
name|Source
name|request
parameter_list|)
block|{
name|Source
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//Bug in JAXB - if you pass the StaxSource or SaxSource into unmarshall,
comment|//the namespaces for the QNames for the Types elements are lost.
comment|//Since WS-Discovery messages are small (UDP datagram size), parsing to DOM
comment|//is not a HUGE deal
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|boolean
name|mapToOld
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"http://schemas.xmlsoap.org/ws/2005/04/discovery"
operator|.
name|equals
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
comment|//old version of ws-discovery, we'll transform this to newer version
name|doc
operator|=
name|mapFromOld
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|mapToOld
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01"
operator|.
name|equals
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
comment|//not a proper ws-discovery message, ignore it
return|return
literal|null
return|;
block|}
name|Object
name|obj
init|=
name|JAXBUtils
operator|.
name|unmarshall
argument_list|(
name|context
argument_list|,
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
condition|)
block|{
name|obj
operator|=
operator|(
operator|(
name|JAXBElement
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ProbeType
condition|)
block|{
name|ProbeMatchesType
name|pmt
init|=
name|handleProbe
argument_list|(
operator|(
name|ProbeType
operator|)
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|pmt
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|updateOutputAction
argument_list|(
literal|"Matches"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapToOld
condition|)
block|{
name|ret
operator|=
name|mapToOld
argument_list|(
name|doc
argument_list|,
name|factory
operator|.
name|createProbeMatches
argument_list|(
name|pmt
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
operator|new
name|JAXBSource
argument_list|(
name|context
argument_list|,
name|factory
operator|.
name|createProbeMatches
argument_list|(
name|pmt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ResolveType
condition|)
block|{
name|ResolveMatchesType
name|rmt
init|=
name|handleResolve
argument_list|(
operator|(
name|ResolveType
operator|)
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmt
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|updateOutputAction
argument_list|(
literal|"Matches"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapToOld
condition|)
block|{
name|ret
operator|=
name|mapToOld
argument_list|(
name|doc
argument_list|,
name|factory
operator|.
name|createResolveMatches
argument_list|(
name|rmt
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
operator|new
name|JAXBSource
argument_list|(
name|context
argument_list|,
name|factory
operator|.
name|createResolveMatches
argument_list|(
name|rmt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|HelloType
condition|)
block|{
comment|//check if it's a DiscoveryProxy
name|HelloType
name|h
init|=
operator|(
name|HelloType
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|WSDiscoveryClient
operator|.
name|SERVICE_QNAME
argument_list|)
operator|||
name|h
operator|.
name|getTypes
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|WSDiscoveryClient
operator|.
name|SERVICE_QNAME
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// A DiscoveryProxy wants us to flip to managed mode
try|try
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
operator|new
name|WSDiscoveryClient
argument_list|(
name|h
operator|.
name|getXAddrs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ByeType
condition|)
block|{
name|ByeType
name|h
init|=
operator|(
name|ByeType
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|WSDiscoveryClient
operator|.
name|SERVICE_QNAME
argument_list|)
operator|||
name|h
operator|.
name|getTypes
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|WSDiscoveryClient
operator|.
name|SERVICE_QNAME
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// Our proxy has gone away, flip to ad-hoc
try|try
block|{
if|if
condition|(
name|client
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|h
operator|.
name|getXAddrs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
operator|new
name|WSDiscoveryClient
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e1
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|ResolveMatchesType
name|handleResolve
parameter_list|(
name|ResolveType
name|resolve
parameter_list|)
block|{
name|ResolveMatchType
name|rmt
init|=
operator|new
name|ResolveMatchType
argument_list|()
decl_stmt|;
name|EndpointReference
name|ref
init|=
name|resolve
operator|.
name|getEndpointReference
argument_list|()
decl_stmt|;
name|EndpointReferenceType
name|iref
init|=
name|ProviderImpl
operator|.
name|convertToInternal
argument_list|(
name|ref
argument_list|)
decl_stmt|;
for|for
control|(
name|HelloType
name|hello
range|:
name|registered
control|)
block|{
name|W3CEndpointReference
name|r
init|=
name|hello
operator|.
name|getEndpointReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
argument_list|(
name|iref
argument_list|,
name|r
argument_list|)
condition|)
block|{
name|rmt
operator|.
name|setEndpointReference
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|rmt
operator|.
name|setScopes
argument_list|(
name|hello
operator|.
name|getScopes
argument_list|()
argument_list|)
expr_stmt|;
name|rmt
operator|.
name|getTypes
argument_list|()
operator|.
name|addAll
argument_list|(
name|hello
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|rmt
operator|.
name|getXAddrs
argument_list|()
operator|.
name|addAll
argument_list|(
name|hello
operator|.
name|getXAddrs
argument_list|()
argument_list|)
expr_stmt|;
name|rmt
operator|.
name|getOtherAttributes
argument_list|()
operator|.
name|putAll
argument_list|(
name|hello
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|rmt
operator|.
name|setMetadataVersion
argument_list|(
name|hello
operator|.
name|getMetadataVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ResolveMatchesType
name|rmts
init|=
operator|new
name|ResolveMatchesType
argument_list|()
decl_stmt|;
name|rmts
operator|.
name|setResolveMatch
argument_list|(
name|rmt
argument_list|)
expr_stmt|;
return|return
name|rmts
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|matches
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|W3CEndpointReference
name|r
parameter_list|)
block|{
name|EndpointReferenceType
name|cref
init|=
name|ProviderImpl
operator|.
name|convertToInternal
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|QName
name|snr
init|=
name|EndpointReferenceUtils
operator|.
name|getServiceName
argument_list|(
name|ref
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|QName
name|snc
init|=
name|EndpointReferenceUtils
operator|.
name|getServiceName
argument_list|(
name|cref
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|String
name|addr
init|=
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|String
name|addc
init|=
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|cref
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|addr
operator|.
name|equals
argument_list|(
name|addc
argument_list|)
condition|)
block|{
return|return
operator|!
operator|(
name|snr
operator|!=
literal|null
operator|&&
operator|!
name|snr
operator|.
name|equals
argument_list|(
name|snc
argument_list|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

