begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|HelloType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ProbeMatchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ProbeMatchesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|discovery
operator|.
name|wsdl
operator|.
name|ProbeType
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|WSDiscoveryClientTest
block|{
specifier|private
name|WSDiscoveryClientTest
parameter_list|()
block|{              }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|arg
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|Endpoint
name|ep
init|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:51919/Foo/Snarf"
argument_list|,
operator|new
name|FooImpl
argument_list|()
argument_list|)
decl_stmt|;
name|WSDiscoveryService
name|service
init|=
operator|new
name|WSDiscoveryService
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|service
operator|.
name|startup
argument_list|()
expr_stmt|;
name|WSDiscoveryClient
name|c
init|=
operator|new
name|WSDiscoveryClient
argument_list|()
decl_stmt|;
name|HelloType
name|h
init|=
name|service
operator|.
name|register
argument_list|(
name|ep
operator|.
name|getEndpointReference
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|ProbeMatchesType
name|pmts
init|=
name|c
operator|.
name|probe
argument_list|(
operator|new
name|ProbeType
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pmts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProbeMatchType
name|pmt
range|:
name|pmts
operator|.
name|getProbeMatch
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|pmt
operator|.
name|getEndpointReference
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pmt
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pmt
operator|.
name|getXAddrs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|pmts
operator|=
name|c
operator|.
name|probe
argument_list|(
operator|new
name|ProbeType
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pmts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProbeMatchType
name|pmt
range|:
name|pmts
operator|.
name|getProbeMatch
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|pmt
operator|.
name|getEndpointReference
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pmt
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pmt
operator|.
name|getXAddrs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|service
operator|.
name|unregister
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"4"
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|WebService
specifier|public
specifier|static
class|class
name|FooImpl
block|{
annotation|@
name|WebMethod
specifier|public
name|int
name|echo
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
end_class

end_unit

