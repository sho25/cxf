begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|repo
operator|.
name|CertificateRepo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_class
specifier|public
class|class
name|CertificateRepoProxyFactory
block|{
specifier|private
name|ServiceTracker
name|tracker
decl_stmt|;
specifier|private
name|CertificateRepo
name|proxy
decl_stmt|;
specifier|public
name|CertificateRepoProxyFactory
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|serviceInterface
parameter_list|,
name|String
name|filterSt
parameter_list|,
name|BundleContext
name|context
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|createFilter
argument_list|(
name|filterSt
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|this
operator|.
name|tracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|serviceInterface
block|}
empty_stmt|;
name|InvocationHandler
name|handler
init|=
operator|new
name|NamedServiceProxy
argument_list|(
name|tracker
argument_list|,
name|filterSt
argument_list|)
decl_stmt|;
name|proxy
operator|=
operator|(
name|CertificateRepo
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|serviceInterface
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|interfaces
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Filter
name|createFilter
parameter_list|(
name|String
name|filterSt
parameter_list|,
name|BundleContext
name|context
parameter_list|)
block|{
try|try
block|{
return|return
name|context
operator|.
name|createFilter
argument_list|(
name|filterSt
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid filter "
operator|+
name|filterSt
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CertificateRepo
name|create
parameter_list|()
block|{
return|return
name|proxy
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

