begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
operator|.
name|XKMSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|KeyBindingEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|KeyUsageEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|ValidateRequestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|repo
operator|.
name|CertificateRepo
import|;
end_import

begin_class
specifier|public
class|class
name|DirectTrustValidator
implements|implements
name|Validator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DirectTrustValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CertificateRepo
name|certRepo
decl_stmt|;
specifier|public
name|DirectTrustValidator
parameter_list|(
name|CertificateRepo
name|certRepo
parameter_list|)
block|{
name|this
operator|.
name|certRepo
operator|=
name|certRepo
expr_stmt|;
block|}
comment|/**      * Checks if a certificate is located in XKMS storage.      *      * @param certificate to check      * @return true if certificate is found      */
specifier|public
name|boolean
name|isCertificateInRepo
parameter_list|(
name|X509Certificate
name|certificate
parameter_list|)
block|{
name|X509Certificate
name|findCert
init|=
name|certRepo
operator|.
name|findBySubjectDn
argument_list|(
name|certificate
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|findCert
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|StatusType
name|validate
parameter_list|(
name|ValidateRequestType
name|request
parameter_list|)
block|{
name|StatusType
name|status
init|=
operator|new
name|StatusType
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getQueryKeyBinding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|KeyUsageEnum
argument_list|>
name|keyUsages
init|=
name|request
operator|.
name|getQueryKeyBinding
argument_list|()
operator|.
name|getKeyUsage
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyUsages
operator|.
name|contains
argument_list|(
name|KeyUsageEnum
operator|.
name|HTTP_WWW_W_3_ORG_2002_03_XKMS_SIGNATURE
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certificates
init|=
name|ValidateRequestParser
operator|.
name|parse
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|certificates
operator|==
literal|null
operator|||
name|certificates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|status
operator|.
name|setStatusValue
argument_list|(
name|KeyBindingEnum
operator|.
name|HTTP_WWW_W_3_ORG_2002_03_XKMS_INDETERMINATE
argument_list|)
expr_stmt|;
name|status
operator|.
name|getIndeterminateReason
argument_list|()
operator|.
name|add
argument_list|(
literal|"http://www.cxf.apache.org/2002/03/xkms#RequestNotSupported"
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
for|for
control|(
name|X509Certificate
name|certificate
range|:
name|certificates
control|)
block|{
if|if
condition|(
operator|!
name|isCertificateInRepo
argument_list|(
name|certificate
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Certificate is not found in XKMS repo and is not directly trusted: "
operator|+
name|certificate
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|getInvalidReason
argument_list|()
operator|.
name|add
argument_list|(
name|XKMSConstants
operator|.
name|DIRECT_TRUST_VALIDATION
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatusValue
argument_list|(
name|KeyBindingEnum
operator|.
name|HTTP_WWW_W_3_ORG_2002_03_XKMS_INVALID
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
block|}
name|status
operator|.
name|getValidReason
argument_list|()
operator|.
name|add
argument_list|(
name|XKMSConstants
operator|.
name|DIRECT_TRUST_VALIDATION
argument_list|)
expr_stmt|;
block|}
block|}
name|status
operator|.
name|setStatusValue
argument_list|(
name|KeyBindingEnum
operator|.
name|HTTP_WWW_W_3_ORG_2002_03_XKMS_VALID
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

