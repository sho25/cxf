begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|locator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|exception
operator|.
name|XKMSArgumentNotMatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|exception
operator|.
name|XKMSCertificateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|exception
operator|.
name|XKMSConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|exception
operator|.
name|XKMSTooManyResponsesException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
operator|.
name|Applications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|LocateRequestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|ResultMajorEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|ResultMinorEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|UnverifiedKeyBindingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|UseKeyWithType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|parser
operator|.
name|LocateRequestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|utils
operator|.
name|X509Utils
import|;
end_import

begin_class
specifier|public
class|class
name|FileLocator
implements|implements
name|Locator
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CN_PREFIX
init|=
literal|"cn="
decl_stmt|;
comment|//private static final Logger LOG = LoggerFactory.getLogger(FilePersistenceManager.class);
specifier|private
specifier|final
name|File
name|storageDir
decl_stmt|;
specifier|private
specifier|final
name|CertificateFactory
name|certFactory
decl_stmt|;
specifier|public
name|FileLocator
parameter_list|(
name|File
name|storageDir
parameter_list|)
throws|throws
name|CertificateException
block|{
if|if
condition|(
name|storageDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"File Persistence: root certificate directory is not initialized"
argument_list|)
throw|;
block|}
name|this
operator|.
name|storageDir
operator|=
name|storageDir
expr_stmt|;
name|this
operator|.
name|certFactory
operator|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UnverifiedKeyBindingType
name|locate
parameter_list|(
name|LocateRequestType
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|UseKeyWithType
argument_list|>
name|keyIDs
init|=
name|LocateRequestParser
operator|.
name|parse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
name|findCertificate
argument_list|(
name|keyIDs
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|UnverifiedKeyBindingType
name|result
init|=
operator|new
name|UnverifiedKeyBindingType
argument_list|()
decl_stmt|;
name|result
operator|.
name|setKeyInfo
argument_list|(
name|X509Utils
operator|.
name|getKeyInfo
argument_list|(
name|cert
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|CertificateEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XKMSCertificateException
argument_list|(
literal|"Cannot encode certificate: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|X509Certificate
name|findCertificate
parameter_list|(
name|List
argument_list|<
name|UseKeyWithType
argument_list|>
name|ids
parameter_list|)
block|{
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certs
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|getIdForApplication
argument_list|(
name|Applications
operator|.
name|PKIX
argument_list|,
name|ids
argument_list|)
operator|!=
literal|null
operator|)
operator|||
operator|(
name|getIdForApplication
argument_list|(
name|Applications
operator|.
name|SERVICE_SOAP
argument_list|,
name|ids
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
name|String
name|subjectDN
init|=
name|getSubjectDN
argument_list|(
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplication
argument_list|()
argument_list|,
name|ids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|certs
operator|=
name|findCertificateBySubjectDn
argument_list|(
name|subjectDN
argument_list|)
expr_stmt|;
block|}
name|String
name|issuer
init|=
name|getIdForApplication
argument_list|(
name|Applications
operator|.
name|ISSUER
argument_list|,
name|ids
argument_list|)
decl_stmt|;
name|String
name|serial
init|=
name|getIdForApplication
argument_list|(
name|Applications
operator|.
name|SERIAL
argument_list|,
name|ids
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|issuer
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|serial
operator|!=
literal|null
operator|)
condition|)
block|{
name|certs
operator|=
name|findCertificateByIssuerSerial
argument_list|(
name|issuer
argument_list|,
name|serial
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|certs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|XKMSTooManyResponsesException
argument_list|(
literal|"More than one matching key was found for: "
operator|+
name|ids
argument_list|)
throw|;
block|}
if|if
condition|(
name|certs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|certs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|String
name|getSubjectDN
parameter_list|(
name|String
name|applicationUri
parameter_list|,
name|String
name|identifier
parameter_list|)
block|{
if|if
condition|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|applicationUri
argument_list|)
condition|)
block|{
return|return
name|identifier
return|;
block|}
elseif|else
if|if
condition|(
name|Applications
operator|.
name|SERVICE_SOAP
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|applicationUri
argument_list|)
condition|)
block|{
return|return
name|CN_PREFIX
operator|+
name|identifier
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|XKMSArgumentNotMatchException
argument_list|(
literal|"Unsupported application uri: "
operator|+
name|applicationUri
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|findCertificateBySubjectDn
parameter_list|(
name|String
name|subjectDN
parameter_list|)
block|{
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|X509Certificate
argument_list|>
argument_list|()
decl_stmt|;
name|File
index|[]
name|list
init|=
name|getX509Files
argument_list|()
decl_stmt|;
comment|//        String searchId = DnUtils.extractMostSignificantAttribute(subjectDN);
for|for
control|(
name|File
name|certFile
range|:
name|list
control|)
block|{
try|try
block|{
name|X509Certificate
name|cert
init|=
name|readCertificate
argument_list|(
name|certFile
argument_list|)
decl_stmt|;
comment|//                String id = DnUtils.extractMostSignificantAttribute(cert.getSubjectDN().getName());
comment|//                if (searchId.equalsIgnoreCase(id)) {
if|if
condition|(
name|subjectDN
operator|.
name|equalsIgnoreCase
argument_list|(
name|cert
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|subjectDN
operator|.
name|equalsIgnoreCase
argument_list|(
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error reading certificate for "
operator|+
name|subjectDN
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|findCertificateByIssuerSerial
parameter_list|(
name|String
name|issuer
parameter_list|,
name|String
name|serial
parameter_list|)
block|{
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|X509Certificate
argument_list|>
argument_list|()
decl_stmt|;
name|File
index|[]
name|list
init|=
name|getX509Files
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|certFile
range|:
name|list
control|)
block|{
try|try
block|{
name|X509Certificate
name|cert
init|=
name|readCertificate
argument_list|(
name|certFile
argument_list|)
decl_stmt|;
name|BigInteger
name|cs
init|=
name|cert
operator|.
name|getSerialNumber
argument_list|()
decl_stmt|;
name|BigInteger
name|ss
init|=
operator|new
name|BigInteger
argument_list|(
name|serial
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|issuer
operator|.
name|equalsIgnoreCase
argument_list|(
name|cert
operator|.
name|getIssuerX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|cs
operator|.
name|equals
argument_list|(
name|ss
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error reading certificate for issuer "
operator|+
name|issuer
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|File
index|[]
name|getX509Files
parameter_list|()
block|{
name|File
index|[]
name|list
init|=
name|storageDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XKMSConfigurationException
argument_list|(
name|ResultMajorEnum
operator|.
name|HTTP_WWW_W_3_ORG_2002_03_XKMS_RECEIVER
argument_list|,
name|ResultMinorEnum
operator|.
name|HTTP_WWW_W_3_ORG_2002_03_XKMS_FAILURE
argument_list|,
literal|"File base persistence storage is not found: "
operator|+
name|storageDir
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|X509Certificate
name|readCertificate
parameter_list|(
name|File
name|certFile
parameter_list|)
throws|throws
name|CertificateException
throws|,
name|FileNotFoundException
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|certFile
argument_list|)
decl_stmt|;
return|return
operator|(
name|X509Certificate
operator|)
name|certFactory
operator|.
name|generateCertificate
argument_list|(
name|fis
argument_list|)
return|;
block|}
specifier|public
name|void
name|saveCertificate
parameter_list|(
name|X509Certificate
name|cert
parameter_list|,
name|UseKeyWithType
name|id
parameter_list|)
block|{
name|String
name|name
init|=
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|File
name|certFile
init|=
operator|new
name|File
argument_list|(
name|storageDir
argument_list|,
name|getRelativePathForSubjectDn
argument_list|(
name|id
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|cert
argument_list|)
argument_list|)
decl_stmt|;
name|certFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|certFile
argument_list|)
decl_stmt|;
name|BufferedOutputStream
name|bos
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|cert
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error saving certificate "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|convertDnForFileSystem
parameter_list|(
name|String
name|dn
parameter_list|)
block|{
name|String
name|result
init|=
name|dn
operator|.
name|replace
argument_list|(
literal|"="
argument_list|,
literal|"-"
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|", "
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|"{"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|"}"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|String
name|getRelativePathForSubjectDn
parameter_list|(
name|String
name|subjectDn
parameter_list|,
name|X509Certificate
name|cert
parameter_list|)
block|{
name|BigInteger
name|serialNumber
init|=
name|cert
operator|.
name|getSerialNumber
argument_list|()
decl_stmt|;
name|String
name|issuer
init|=
name|cert
operator|.
name|getIssuerX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|convertDnForFileSystem
argument_list|(
name|subjectDn
argument_list|)
operator|+
literal|"-"
operator|+
name|serialNumber
operator|.
name|toString
argument_list|()
operator|+
literal|"-"
operator|+
name|convertDnForFileSystem
argument_list|(
name|issuer
argument_list|)
operator|+
literal|".cer"
decl_stmt|;
comment|// TODO Filter for only valid and safe characters
return|return
name|path
return|;
block|}
specifier|private
name|String
name|getIdForApplication
parameter_list|(
name|Applications
name|application
parameter_list|,
name|List
argument_list|<
name|UseKeyWithType
argument_list|>
name|ids
parameter_list|)
block|{
for|for
control|(
name|UseKeyWithType
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|application
operator|.
name|getUri
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|id
operator|.
name|getApplication
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|id
operator|.
name|getIdentifier
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

