begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|UnverifiedKeyBindingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xmldsig
operator|.
name|KeyInfoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xmldsig
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xmldsig
operator|.
name|X509DataType
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|X509Utils
block|{
specifier|public
specifier|static
specifier|final
name|QName
name|X509_DATA
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|,
literal|"X509Data"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|X509_KEY_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|,
literal|"KeyName"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|X509_ISSUER_SERIAL
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|,
literal|"X509IssuerSerial"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|X509_SUBJECT_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|,
literal|"X509SubjectName"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|X509_CERTIFICATE
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|,
literal|"X509Certificate"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|X509Utils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CertificateFactory
name|X509_FACTORY
decl_stmt|;
static|static
block|{
try|try
block|{
name|X509_FACTORY
operator|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot initialize X509 CertificateFactory: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|X509Utils
parameter_list|()
block|{      }
specifier|public
specifier|static
name|void
name|parseX509Data
parameter_list|(
name|X509DataType
name|x509Data
parameter_list|,
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certs
parameter_list|)
throws|throws
name|CertificateException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|dataList
init|=
name|x509Data
operator|.
name|getX509IssuerSerialOrX509SKIOrX509SubjectName
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|x509Object
range|:
name|dataList
control|)
block|{
if|if
condition|(
name|x509Object
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|x509Item
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|x509Object
decl_stmt|;
name|X509Certificate
name|certificate
init|=
name|parseX509Item
argument_list|(
name|x509Item
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|certificate
condition|)
block|{
name|certs
operator|.
name|add
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_function
specifier|private
specifier|static
name|X509Certificate
name|parseX509Item
parameter_list|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|x509Item
parameter_list|)
throws|throws
name|CertificateException
block|{
name|QName
name|x509ItemName
init|=
name|x509Item
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|X509_CERTIFICATE
operator|.
name|equals
argument_list|(
name|x509ItemName
argument_list|)
condition|)
block|{
name|X509Certificate
name|certificate
decl_stmt|;
name|certificate
operator|=
name|extractCertificate
argument_list|(
name|x509Item
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Extracted "
operator|+
name|certificate
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|certificate
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|X509Certificate
name|extractCertificate
parameter_list|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|x509Item
parameter_list|)
throws|throws
name|CertificateException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
name|byteElement
init|=
operator|(
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|x509Item
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|byteElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|Certificate
name|certificate
init|=
name|X509_FACTORY
operator|.
name|generateCertificate
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|certificate
operator|instanceof
name|X509Certificate
condition|)
block|{
return|return
operator|(
name|X509Certificate
operator|)
name|certificate
return|;
block|}
throw|throw
operator|new
name|CertificateException
argument_list|(
literal|"Unsupported certificate type encountered: "
operator|+
operator|(
operator|(
name|certificate
operator|!=
literal|null
operator|&&
name|certificate
operator|.
name|getClass
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|certificate
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"Null"
operator|)
argument_list|)
throw|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|UnverifiedKeyBindingType
name|getUnverifiedKeyBinding
parameter_list|(
name|X509Certificate
name|cert
parameter_list|)
throws|throws
name|CertificateEncodingException
block|{
name|UnverifiedKeyBindingType
name|unverifiedKeyBinding
init|=
operator|new
name|UnverifiedKeyBindingType
argument_list|()
decl_stmt|;
name|unverifiedKeyBinding
operator|.
name|setKeyInfo
argument_list|(
name|getKeyInfo
argument_list|(
name|cert
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|unverifiedKeyBinding
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|KeyInfoType
name|getKeyInfo
parameter_list|(
name|X509Certificate
name|cert
parameter_list|)
throws|throws
name|CertificateEncodingException
block|{
name|KeyInfoType
name|keyInfo
init|=
operator|new
name|KeyInfoType
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
name|certificate
init|=
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createX509DataTypeX509Certificate
argument_list|(
name|cert
operator|.
name|getEncoded
argument_list|()
argument_list|)
decl_stmt|;
name|X509DataType
name|x509DataType
init|=
operator|new
name|X509DataType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|x509DataContent
init|=
name|x509DataType
operator|.
name|getX509IssuerSerialOrX509SKIOrX509SubjectName
argument_list|()
decl_stmt|;
name|x509DataContent
operator|.
name|add
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
name|x509Data
init|=
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createX509Data
argument_list|(
name|x509DataType
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|keyInfoContent
init|=
name|keyInfo
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|keyInfoContent
operator|.
name|add
argument_list|(
name|x509Data
argument_list|)
expr_stmt|;
return|return
name|keyInfo
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|assertElementNotNull
parameter_list|(
name|Object
name|element
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|elementClass
parameter_list|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|elementClass
operator|.
name|getName
argument_list|()
operator|+
literal|" must be set"
argument_list|)
throw|;
block|}
block|}
end_function

unit|}
end_unit

