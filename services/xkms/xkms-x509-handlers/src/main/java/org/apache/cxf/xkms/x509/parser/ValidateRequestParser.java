begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|exception
operator|.
name|XKMSRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|ValidateRequestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xmldsig
operator|.
name|X509DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|utils
operator|.
name|X509Utils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ValidateRequestParser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ValidateRequestParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ValidateRequestParser
parameter_list|()
block|{     }
comment|/**      * Extract the X509 certificates from ValidateRequestType and return them as list.      */
specifier|public
specifier|static
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|parse
parameter_list|(
name|ValidateRequestType
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certs
init|=
operator|new
name|ArrayList
argument_list|<
name|X509Certificate
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|request
operator|.
name|getQueryKeyBinding
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
operator|(
name|request
operator|.
name|getQueryKeyBinding
argument_list|()
operator|.
name|getKeyInfo
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|keyInfoContent
init|=
name|request
operator|.
name|getQueryKeyBinding
argument_list|()
operator|.
name|getKeyInfo
argument_list|()
operator|.
name|getContent
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|keyInfoObject
range|:
name|keyInfoContent
control|)
block|{
if|if
condition|(
name|keyInfoObject
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|dataInstance
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|keyInfoObject
decl_stmt|;
if|if
condition|(
name|X509Utils
operator|.
name|X509_DATA
operator|.
name|equals
argument_list|(
name|dataInstance
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|X509Utils
operator|.
name|parseX509Data
argument_list|(
operator|(
name|X509DataType
operator|)
name|dataInstance
operator|.
name|getValue
argument_list|()
argument_list|,
name|certs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Extracted "
operator|+
name|certs
operator|.
name|size
argument_list|()
operator|+
literal|" certificates from ValidateRequest"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XKMSRequestException
argument_list|(
literal|"Corrupted X509 certificate in request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
return|return
name|certs
return|;
block|}
end_class

unit|}
end_unit

