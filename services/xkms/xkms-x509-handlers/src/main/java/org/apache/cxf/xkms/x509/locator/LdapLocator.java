begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|locator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|exception
operator|.
name|XKMSCertificateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
operator|.
name|Applications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|LocateRequestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|UnverifiedKeyBindingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|UseKeyWithType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|handlers
operator|.
name|LdapSchemaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|handlers
operator|.
name|LdapSearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|parser
operator|.
name|LocateRequestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|utils
operator|.
name|X509Utils
import|;
end_import

begin_class
specifier|public
class|class
name|LdapLocator
implements|implements
name|Locator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|LdapLocator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LdapSearch
name|ldapSearch
decl_stmt|;
specifier|private
name|CertificateFactory
name|certificateFactory
decl_stmt|;
specifier|private
specifier|final
name|LdapSchemaConfig
name|ldapConfig
decl_stmt|;
specifier|private
specifier|final
name|String
name|filterUIDTemplate
decl_stmt|;
specifier|private
specifier|final
name|String
name|filterIssuerSerialTemplate
decl_stmt|;
specifier|private
specifier|final
name|String
name|rootDN
decl_stmt|;
specifier|public
name|LdapLocator
parameter_list|(
name|LdapSearch
name|ldapSearch
parameter_list|,
name|LdapSchemaConfig
name|ldapConfig
parameter_list|,
name|String
name|rootDN
parameter_list|)
block|{
name|this
operator|.
name|ldapSearch
operator|=
name|ldapSearch
expr_stmt|;
name|this
operator|.
name|ldapConfig
operator|=
name|ldapConfig
expr_stmt|;
name|this
operator|.
name|rootDN
operator|=
name|rootDN
expr_stmt|;
try|try
block|{
name|this
operator|.
name|certificateFactory
operator|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|filterUIDTemplate
operator|=
literal|"("
operator|+
name|ldapConfig
operator|.
name|getAttrUID
argument_list|()
operator|+
literal|"=%s)"
expr_stmt|;
name|filterIssuerSerialTemplate
operator|=
literal|"(&("
operator|+
name|ldapConfig
operator|.
name|getAttrIssuerID
argument_list|()
operator|+
literal|"=%s)("
operator|+
name|ldapConfig
operator|.
name|getAttrSerialNumber
argument_list|()
operator|+
literal|"=%s))"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UnverifiedKeyBindingType
name|locate
parameter_list|(
name|LocateRequestType
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|UseKeyWithType
argument_list|>
name|keyIDs
init|=
name|LocateRequestParser
operator|.
name|parse
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
name|findCertificate
argument_list|(
name|keyIDs
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|UnverifiedKeyBindingType
name|result
init|=
operator|new
name|UnverifiedKeyBindingType
argument_list|()
decl_stmt|;
name|result
operator|.
name|setKeyInfo
argument_list|(
name|X509Utils
operator|.
name|getKeyInfo
argument_list|(
name|cert
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|CertificateEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XKMSCertificateException
argument_list|(
literal|"Cannot encode certificate: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|X509Certificate
name|findCertificate
parameter_list|(
name|List
argument_list|<
name|UseKeyWithType
argument_list|>
name|ids
parameter_list|)
block|{
try|try
block|{
name|String
name|issuer
init|=
literal|null
decl_stmt|;
name|String
name|serial
init|=
literal|null
decl_stmt|;
for|for
control|(
name|UseKeyWithType
name|key
range|:
name|ids
control|)
block|{
if|if
condition|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getApplication
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|findByDn
argument_list|(
name|key
operator|.
name|getApplication
argument_list|()
argument_list|,
name|key
operator|.
name|getIdentifier
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Applications
operator|.
name|SERVICE_SOAP
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getApplication
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|findByDn
argument_list|(
name|key
operator|.
name|getApplication
argument_list|()
argument_list|,
name|key
operator|.
name|getIdentifier
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Applications
operator|.
name|ISSUER
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getApplication
argument_list|()
argument_list|)
condition|)
block|{
name|issuer
operator|=
name|key
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Applications
operator|.
name|SERIAL
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getApplication
argument_list|()
argument_list|)
condition|)
block|{
name|serial
operator|=
name|key
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|issuer
operator|!=
literal|null
operator|&&
name|serial
operator|!=
literal|null
condition|)
block|{
return|return
name|findByIssuerSerial
argument_list|(
name|issuer
argument_list|,
name|serial
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Application identifier not supported"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Search certificates failure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|X509Certificate
name|findByDn
parameter_list|(
name|String
name|application
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|CertificateException
block|{
name|byte
index|[]
name|content
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|dn
init|=
name|X509Utils
operator|.
name|getDN
argument_list|(
name|application
argument_list|,
name|id
argument_list|,
name|ldapConfig
operator|.
name|getServiceCertRDNTemplate
argument_list|()
argument_list|,
name|rootDN
argument_list|)
decl_stmt|;
name|content
operator|=
name|getCertificateForDn
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
comment|// Not found
block|}
comment|// Try to find certificate by search for uid attribute
try|try
block|{
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
name|String
name|uidAttr
init|=
name|X509Utils
operator|.
name|getSubjectDN
argument_list|(
name|application
argument_list|,
name|id
argument_list|,
name|ldapConfig
operator|.
name|getServiceCertUIDTemplate
argument_list|()
argument_list|)
decl_stmt|;
name|content
operator|=
name|getCertificateForUIDAttr
argument_list|(
name|uidAttr
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
comment|// Not found
block|}
return|return
operator|(
name|content
operator|!=
literal|null
operator|)
condition|?
operator|(
name|X509Certificate
operator|)
name|certificateFactory
operator|.
name|generateCertificate
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
specifier|private
name|byte
index|[]
name|getCertificateForDn
parameter_list|(
name|String
name|dn
parameter_list|)
throws|throws
name|NamingException
block|{
name|Attribute
name|attr
init|=
name|ldapSearch
operator|.
name|getAttribute
argument_list|(
name|dn
argument_list|,
name|ldapConfig
operator|.
name|getAttrCrtBinary
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|attr
operator|!=
literal|null
operator|)
condition|?
operator|(
name|byte
index|[]
operator|)
name|attr
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
specifier|private
name|X509Certificate
name|findByIssuerSerial
parameter_list|(
name|String
name|issuer
parameter_list|,
name|String
name|serial
parameter_list|)
throws|throws
name|CertificateException
throws|,
name|NamingException
block|{
if|if
condition|(
operator|(
name|issuer
operator|==
literal|null
operator|)
operator|||
operator|(
name|serial
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Issuer and serial applications are expected in request"
argument_list|)
throw|;
block|}
name|String
name|filter
init|=
name|String
operator|.
name|format
argument_list|(
name|filterIssuerSerialTemplate
argument_list|,
name|issuer
argument_list|,
name|serial
argument_list|)
decl_stmt|;
name|Attribute
name|attr
init|=
name|ldapSearch
operator|.
name|findAttribute
argument_list|(
name|rootDN
argument_list|,
name|filter
argument_list|,
name|ldapConfig
operator|.
name|getAttrCrtBinary
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|attr
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|attr
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
operator|(
name|X509Certificate
operator|)
name|certificateFactory
operator|.
name|generateCertificate
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|attr
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|byte
index|[]
name|getCertificateForUIDAttr
parameter_list|(
name|String
name|dn
parameter_list|)
throws|throws
name|NamingException
block|{
name|String
name|filter
init|=
name|String
operator|.
name|format
argument_list|(
name|filterUIDTemplate
argument_list|,
name|dn
argument_list|)
decl_stmt|;
name|Attribute
name|attr
init|=
name|ldapSearch
operator|.
name|findAttribute
argument_list|(
name|rootDN
argument_list|,
name|filter
argument_list|,
name|ldapConfig
operator|.
name|getAttrCrtBinary
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|attr
operator|!=
literal|null
operator|)
condition|?
operator|(
name|byte
index|[]
operator|)
name|attr
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

