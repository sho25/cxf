begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CRLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509CRL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
operator|.
name|Applications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|UseKeyWithType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|repo
operator|.
name|file
operator|.
name|FileCertificateRepo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TrustedAuthorityValidatorCRLTest
extends|extends
name|BasicValidationTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PATH_TO_RESOURCES
init|=
literal|"/trustedAuthorityValidator/"
decl_stmt|;
specifier|private
specifier|final
name|X509Certificate
name|certificateRoot
decl_stmt|;
specifier|private
specifier|final
name|X509Certificate
name|certificateWss40Rev
decl_stmt|;
specifier|private
specifier|final
name|X509Certificate
name|certificateWss40
decl_stmt|;
specifier|private
specifier|final
name|X509CRL
name|crl
decl_stmt|;
specifier|private
name|FileCertificateRepo
name|certificateRepo
decl_stmt|;
specifier|public
name|TrustedAuthorityValidatorCRLTest
parameter_list|()
throws|throws
name|CertificateException
throws|,
name|CRLException
block|{
name|certificateRoot
operator|=
name|readCertificate
argument_list|(
literal|"wss40CA.cer"
argument_list|)
expr_stmt|;
name|certificateWss40Rev
operator|=
name|readCertificate
argument_list|(
literal|"wss40rev.cer"
argument_list|)
expr_stmt|;
name|certificateWss40
operator|=
name|readCertificate
argument_list|(
literal|"wss40.cer"
argument_list|)
expr_stmt|;
name|crl
operator|=
name|readCRL
argument_list|(
literal|"wss40CACRL.cer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUpCertificateRepo
parameter_list|()
throws|throws
name|CertificateException
block|{
name|File
name|storageDir
init|=
operator|new
name|File
argument_list|(
literal|"target/teststore_trusted_authority_validator"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|removeDir
argument_list|(
name|storageDir
argument_list|)
expr_stmt|;
name|storageDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|certificateRepo
operator|=
operator|new
name|FileCertificateRepo
argument_list|(
literal|"target/teststore_trusted_authority_validator"
argument_list|)
expr_stmt|;
name|UseKeyWithType
name|rootKey
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|rootKey
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|subjectDN
init|=
name|certificateRoot
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|rootKey
operator|.
name|setIdentifier
argument_list|(
name|subjectDN
argument_list|)
expr_stmt|;
name|certificateRepo
operator|.
name|saveTrustedCACertificate
argument_list|(
name|certificateRoot
argument_list|,
name|rootKey
argument_list|)
expr_stmt|;
name|UseKeyWithType
name|aliceKey
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|aliceKey
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|subjectDN
operator|=
name|certificateWss40Rev
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|aliceKey
operator|.
name|setIdentifier
argument_list|(
name|subjectDN
argument_list|)
expr_stmt|;
name|certificateRepo
operator|.
name|saveCACertificate
argument_list|(
name|certificateWss40Rev
argument_list|,
name|aliceKey
argument_list|)
expr_stmt|;
name|UseKeyWithType
name|bobKey
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|bobKey
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|subjectDN
operator|=
name|certificateWss40
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|bobKey
operator|.
name|setIdentifier
argument_list|(
name|subjectDN
argument_list|)
expr_stmt|;
name|certificateRepo
operator|.
name|saveCACertificate
argument_list|(
name|certificateWss40
argument_list|,
name|bobKey
argument_list|)
expr_stmt|;
name|UseKeyWithType
name|crlKey
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|crlKey
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|crlKey
operator|.
name|setIdentifier
argument_list|(
name|crl
operator|.
name|getIssuerX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|certificateRepo
operator|.
name|saveCRL
argument_list|(
name|crl
argument_list|,
name|crlKey
argument_list|)
expr_stmt|;
block|}
comment|/**      * FIXME Fails on JDK 7      */
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testIsCertChainValid
parameter_list|()
throws|throws
name|CertificateException
block|{
name|TrustedAuthorityValidator
name|validator
init|=
operator|new
name|TrustedAuthorityValidator
argument_list|(
name|certificateRepo
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Root should be valid"
argument_list|,
name|validator
operator|.
name|isCertificateChainValid
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|certificateRoot
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"wss40rev should not be valid"
argument_list|,
operator|!
name|validator
operator|.
name|isCertificateChainValid
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|certificateWss40Rev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"wss40 should be valid"
argument_list|,
name|validator
operator|.
name|isCertificateChainValid
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|certificateWss40
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|X509Certificate
name|readCertificate
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|CertificateException
block|{
name|InputStream
name|inputStream
init|=
name|TrustedAuthorityValidatorCRLTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|PATH_TO_RESOURCES
operator|+
name|path
argument_list|)
decl_stmt|;
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
return|return
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|X509CRL
name|readCRL
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|CertificateException
throws|,
name|CRLException
block|{
name|InputStream
name|inputStream
init|=
name|TrustedAuthorityValidatorCRLTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|PATH_TO_RESOURCES
operator|+
name|path
argument_list|)
decl_stmt|;
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
return|return
operator|(
name|X509CRL
operator|)
name|cf
operator|.
name|generateCRL
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
block|}
end_class

end_unit

