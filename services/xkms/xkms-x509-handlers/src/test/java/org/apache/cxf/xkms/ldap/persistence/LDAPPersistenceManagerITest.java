begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|ldap
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
operator|.
name|Applications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|UseKeyWithType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|handlers
operator|.
name|LDAPSearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|handlers
operator|.
name|LdapRegisterHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|locator
operator|.
name|LdapLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests need a real ldap server  */
end_comment

begin_class
specifier|public
class|class
name|LDAPPersistenceManagerITest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_SUBJECT_DN
init|=
literal|"CN=www.issuer.com, L=CGN, ST=NRW, C=DE, O=Issuer"
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testFindUserCert
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|NamingException
throws|,
name|CertificateException
block|{
name|LdapLocator
name|persistenceManager
init|=
name|createLdapLocator
argument_list|()
decl_stmt|;
name|testFindBySubjectDnInternal
argument_list|(
name|persistenceManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testFindUserCertForNonExistantDn
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|NamingException
throws|,
name|CertificateException
block|{
name|LdapLocator
name|persistenceManager
init|=
name|createLdapLocator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UseKeyWithType
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|UseKeyWithType
argument_list|>
argument_list|()
decl_stmt|;
name|UseKeyWithType
name|key
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|key
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setIdentifier
argument_list|(
literal|"CN=wrong"
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|X509Certificate
name|cert
init|=
name|persistenceManager
operator|.
name|findCertificate
argument_list|(
name|ids
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Certifiacte should be null"
argument_list|,
name|cert
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testFindServiceCert
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|NamingException
throws|,
name|CertificateException
block|{
name|LdapLocator
name|persistenceManager
init|=
name|createLdapLocator
argument_list|()
decl_stmt|;
name|String
name|serviceUri
init|=
literal|"cn=http:\\/\\/myservice.apache.org\\/MyServiceName,ou=services"
decl_stmt|;
name|List
argument_list|<
name|UseKeyWithType
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|UseKeyWithType
argument_list|>
argument_list|()
decl_stmt|;
name|UseKeyWithType
name|key
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|key
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|SERVICE_SOAP
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setIdentifier
argument_list|(
name|serviceUri
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|X509Certificate
name|cert
init|=
name|persistenceManager
operator|.
name|findCertificate
argument_list|(
name|ids
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_SUBJECT_DN
argument_list|,
name|cert
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testSave
parameter_list|()
throws|throws
name|Exception
block|{
name|LDAPSearch
name|ldapSearch
init|=
operator|new
name|LDAPSearch
argument_list|(
literal|"ldap://localhost:2389"
argument_list|,
literal|"cn=Directory Manager"
argument_list|,
literal|"test"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LdapLocator
name|locator
init|=
name|createLdapLocator
argument_list|()
decl_stmt|;
name|LdapRegisterHandler
name|persistenceManager
init|=
operator|new
name|LdapRegisterHandler
argument_list|(
name|ldapSearch
argument_list|,
literal|"dc=example,dc=com"
argument_list|)
decl_stmt|;
name|File
name|certFile
init|=
operator|new
name|File
argument_list|(
literal|"src/test/java/cert1.cer"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|certFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|certFile
argument_list|)
decl_stmt|;
name|CertificateFactory
name|factory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|factory
operator|.
name|generateCertificate
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|UseKeyWithType
name|key
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|key
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setIdentifier
argument_list|(
name|EXPECTED_SUBJECT_DN
argument_list|)
expr_stmt|;
name|persistenceManager
operator|.
name|saveCertificate
argument_list|(
name|cert
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|testFindBySubjectDnInternal
argument_list|(
name|locator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LdapLocator
name|createLdapLocator
parameter_list|()
throws|throws
name|CertificateException
block|{
name|LDAPSearch
name|ldapSearch
init|=
operator|new
name|LDAPSearch
argument_list|(
literal|"ldap://localhost:2389"
argument_list|,
literal|"cn=Directory Manager"
argument_list|,
literal|"test"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
operator|new
name|LdapLocator
argument_list|(
name|ldapSearch
argument_list|,
literal|"dc=example,dc=com"
argument_list|)
return|;
block|}
specifier|private
name|void
name|testFindBySubjectDnInternal
parameter_list|(
name|LdapLocator
name|persistenceManager
parameter_list|)
block|{
name|List
argument_list|<
name|UseKeyWithType
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|UseKeyWithType
argument_list|>
argument_list|()
decl_stmt|;
name|UseKeyWithType
name|key
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|key
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setIdentifier
argument_list|(
name|EXPECTED_SUBJECT_DN
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|X509Certificate
name|cert2
init|=
name|persistenceManager
operator|.
name|findCertificate
argument_list|(
name|ids
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_SUBJECT_DN
argument_list|,
name|cert2
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

