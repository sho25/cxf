begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|ldap
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
operator|.
name|Applications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|model
operator|.
name|xkms
operator|.
name|UseKeyWithType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|handlers
operator|.
name|LdapRegisterHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|handlers
operator|.
name|LdapSchemaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|x509
operator|.
name|handlers
operator|.
name|LdapSearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|LDAPPersistenceManagerTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_DN
init|=
literal|"dc=example,dc=com"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_SUBJECT_DN
init|=
literal|"CN=www.issuer.com,L=CGN,ST=NRW,C=DE,O=Issuer"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_SERVICE_URI
init|=
literal|"http://myservice.apache.org/MyServiceName"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_DN_FOR_SERVICE
init|=
literal|"cn=http:\\/\\/myservice.apache.org\\/MyServiceName,ou=services"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LdapSchemaConfig
name|LDAP_CERT_CONFIG
init|=
operator|new
name|LdapSchemaConfig
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSaveUserCert
parameter_list|()
throws|throws
name|Exception
block|{
name|IMocksControl
name|c
init|=
name|EasyMock
operator|.
name|createControl
argument_list|()
decl_stmt|;
name|LdapSearch
name|ldapSearch
init|=
name|c
operator|.
name|createMock
argument_list|(
name|LdapSearch
operator|.
name|class
argument_list|)
decl_stmt|;
name|ldapSearch
operator|.
name|bind
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|EXPECTED_SUBJECT_DN
operator|+
literal|","
operator|+
name|ROOT_DN
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|Attributes
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|LdapRegisterHandler
name|persistenceManager
init|=
operator|new
name|LdapRegisterHandler
argument_list|(
name|ldapSearch
argument_list|,
name|LDAP_CERT_CONFIG
argument_list|,
name|ROOT_DN
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
name|getTestCert
argument_list|()
decl_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
name|UseKeyWithType
name|key
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|key
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|PKIX
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setIdentifier
argument_list|(
name|EXPECTED_SUBJECT_DN
argument_list|)
expr_stmt|;
name|persistenceManager
operator|.
name|saveCertificate
argument_list|(
name|cert
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSaveServiceCert
parameter_list|()
throws|throws
name|Exception
block|{
name|IMocksControl
name|c
init|=
name|EasyMock
operator|.
name|createControl
argument_list|()
decl_stmt|;
name|LdapSearch
name|ldapSearch
init|=
name|c
operator|.
name|createMock
argument_list|(
name|LdapSearch
operator|.
name|class
argument_list|)
decl_stmt|;
name|ldapSearch
operator|.
name|bind
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|EXPECTED_DN_FOR_SERVICE
operator|+
literal|","
operator|+
name|ROOT_DN
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|Attributes
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|LdapRegisterHandler
name|persistenceManager
init|=
operator|new
name|LdapRegisterHandler
argument_list|(
name|ldapSearch
argument_list|,
name|LDAP_CERT_CONFIG
argument_list|,
name|ROOT_DN
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
name|getTestCert
argument_list|()
decl_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
name|UseKeyWithType
name|key
init|=
operator|new
name|UseKeyWithType
argument_list|()
decl_stmt|;
name|key
operator|.
name|setApplication
argument_list|(
name|Applications
operator|.
name|SERVICE_SOAP
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setIdentifier
argument_list|(
name|EXPECTED_SERVICE_URI
argument_list|)
expr_stmt|;
name|persistenceManager
operator|.
name|saveCertificate
argument_list|(
name|cert
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|X509Certificate
name|getTestCert
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|CertificateException
block|{
name|File
name|certFile
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/cert1.cer"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|certFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|certFile
argument_list|)
decl_stmt|;
name|CertificateFactory
name|factory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
return|return
operator|(
name|X509Certificate
operator|)
name|factory
operator|.
name|generateCertificate
argument_list|(
name|fis
argument_list|)
return|;
block|}
block|}
end_class

end_unit

