begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xkms
operator|.
name|handlers
package|;
end_package

begin_comment
comment|/**  * A couple of utility methods for working with X500 Distinguished Names  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DnUtils
block|{
specifier|private
name|DnUtils
parameter_list|()
block|{              }
specifier|public
specifier|static
name|String
name|extractMostSignificantAttribute
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
comment|// first find the first comma-delimited value
name|String
index|[]
name|split
init|=
name|identifier
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|msaVal
init|=
literal|null
decl_stmt|;
name|String
name|cnVal
init|=
literal|null
decl_stmt|;
name|String
name|ouVal
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|split
control|)
block|{
name|val
operator|=
name|normalizeAttribute
argument_list|(
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|msaVal
condition|)
block|{
name|msaVal
operator|=
name|val
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|cnVal
operator|==
literal|null
operator|)
operator|&&
name|val
operator|.
name|startsWith
argument_list|(
literal|"cn="
argument_list|)
condition|)
block|{
name|cnVal
operator|=
name|val
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|ouVal
operator|==
literal|null
operator|)
operator|&&
name|val
operator|.
name|startsWith
argument_list|(
literal|"ou="
argument_list|)
condition|)
block|{
name|ouVal
operator|=
name|val
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cnVal
operator|!=
literal|null
condition|)
block|{
return|return
name|cnVal
return|;
block|}
elseif|else
if|if
condition|(
name|ouVal
operator|!=
literal|null
condition|)
block|{
return|return
name|ouVal
return|;
block|}
else|else
block|{
return|return
name|msaVal
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|extractMostSignificantAttributeValue
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|String
name|attr
init|=
name|extractMostSignificantAttribute
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|String
index|[]
name|split
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|split
operator|=
name|attr
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
comment|// normalize the prefix if present
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
name|split
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|attr
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
return|return
name|attr
return|;
block|}
specifier|private
specifier|static
name|String
name|normalizeAttribute
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|String
index|[]
name|split
decl_stmt|;
name|String
name|normalized
init|=
name|val
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|val
condition|)
block|{
name|split
operator|=
name|val
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
comment|// normalize the prefix if present
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|prefix
init|=
name|split
index|[
literal|0
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|split
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|normalized
operator|=
name|prefix
operator|+
literal|"="
operator|+
name|value
expr_stmt|;
block|}
else|else
block|{
name|normalized
operator|=
name|val
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|normalized
return|;
block|}
specifier|public
specifier|static
class|class
name|DnAttribute
block|{
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|full
decl_stmt|;
specifier|public
name|DnAttribute
parameter_list|(
name|String
name|attributeDefinition
parameter_list|)
block|{
name|full
operator|=
name|attributeDefinition
expr_stmt|;
name|String
index|[]
name|split
init|=
name|attributeDefinition
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|==
name|split
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|split
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|2
operator|==
name|split
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|prefix
operator|=
name|split
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|split
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|prefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|full
parameter_list|()
block|{
return|return
name|full
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|full
return|;
block|}
block|}
block|}
end_class

end_unit

