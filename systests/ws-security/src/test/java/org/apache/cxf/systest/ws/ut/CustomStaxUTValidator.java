begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|ut
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|SimpleGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|binding
operator|.
name|wss10
operator|.
name|UsernameTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|UsernameSecurityTokenImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|UsernameSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|TokenContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|UsernameTokenValidatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|InboundSecurityToken
import|;
end_import

begin_comment
comment|/**  * A custom UsernameToken Validator that wraps the default Validator in WSS4J and set a Subject  * on the context as well. It adds a role for "Alice" of "manager", and a role for everyone of  * "worker".  */
end_comment

begin_class
specifier|public
class|class
name|CustomStaxUTValidator
extends|extends
name|UsernameTokenValidatorImpl
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|UsernameSecurityToken
operator|&
name|InboundSecurityToken
parameter_list|>
name|T
name|validate
parameter_list|(
name|UsernameTokenType
name|usernameTokenType
parameter_list|,
name|TokenContext
name|tokenContext
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|UsernameSecurityTokenImpl
name|token
init|=
name|super
operator|.
expr|<
comment|/*fake @see above*/
name|UsernameSecurityTokenImpl
operator|>
name|validate
argument_list|(
name|usernameTokenType
argument_list|,
name|tokenContext
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
name|token
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Alice"
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getUsername
argument_list|()
argument_list|)
condition|)
block|{
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SimpleGroup
argument_list|(
literal|"manager"
argument_list|,
name|token
operator|.
name|getUsername
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SimpleGroup
argument_list|(
literal|"worker"
argument_list|,
name|token
operator|.
name|getUsername
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|token
return|;
block|}
block|}
end_class

end_unit

