begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|common
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|common
operator|.
name|TestParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|saml
operator|.
name|client
operator|.
name|SamlCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|saml
operator|.
name|client
operator|.
name|SamlElementCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|saml
operator|.
name|client
operator|.
name|SamlRoleCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|ut
operator|.
name|SecurityHeaderCacheInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|bean
operator|.
name|AudienceRestrictionBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|bean
operator|.
name|ConditionsBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|bean
operator|.
name|KeyInfoBean
operator|.
name|CERT_IDENTIFIER
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML1Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|example
operator|.
name|contract
operator|.
name|doubleit
operator|.
name|DoubleItPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * A set of tests for SAML Tokens.   */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SamlTokenTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|PORT
init|=
name|allocatePort
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|STAX_PORT
init|=
name|allocatePort
argument_list|(
name|StaxServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|PORT2
init|=
name|allocatePort
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|STAX_PORT2
init|=
name|allocatePort
argument_list|(
name|StaxServer
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://www.example.org/contract/DoubleIt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_QNAME
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItService"
argument_list|)
decl_stmt|;
specifier|final
name|TestParam
name|test
decl_stmt|;
specifier|public
name|SamlTokenTest
parameter_list|(
name|TestParam
name|type
parameter_list|)
block|{
name|this
operator|.
name|test
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|StaxServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|TestParam
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TestParam
index|[]
index|[]
block|{
block|{
operator|new
name|TestParam
argument_list|(
name|PORT
argument_list|,
literal|false
argument_list|)
block|}
block|,
block|{
operator|new
name|TestParam
argument_list|(
name|PORT
argument_list|,
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|TestParam
argument_list|(
name|STAX_PORT
argument_list|,
literal|false
argument_list|)
block|}
block|,
block|{
operator|new
name|TestParam
argument_list|(
name|STAX_PORT
argument_list|,
literal|true
argument_list|)
block|}
block|,         }
argument_list|)
return|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|stopAllServers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml1OverTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml1TransportPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml1Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml1Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml1Port
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure on an invocation with no SAML Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No SAML CallbackHandler available"
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure on an invocation with a SAML2 Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Wrong SAML Version"
argument_list|)
operator|||
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"enforces SamlVersion11Profile11 but we got 2.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
comment|// Don't send any Token...failure expected
name|portQName
operator|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml1TransportPort2"
argument_list|)
expr_stmt|;
name|saml1Port
operator|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|saml1Port
argument_list|,
name|PORT2
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on no token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|String
name|error
init|=
literal|"The received token does not match the token inclusion requirement"
decl_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml1Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml1Supporting
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml1SupportingPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml1Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml1Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml1Port
argument_list|)
expr_stmt|;
block|}
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML1Constants
operator|.
name|CONF_BEARER
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|samlCallbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml1Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Self-signing (see CXF-5248)
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml1SupportingSelfSigned
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml1SupportingPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml1Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml1Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml1Port
argument_list|)
expr_stmt|;
block|}
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|callbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML1Constants
operator|.
name|CONF_BEARER
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
argument_list|,
literal|"alice"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
literal|"alice.properties"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
literal|"org.apache.cxf.systest.ws.common.KeystorePasswordCallback"
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml1Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml1ElementOverTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml1TransportPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml1Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml1Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml1Port
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure on an invocation with no SAML Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No SAML CallbackHandler available"
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlElementCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml1Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2OverSymmetric
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2SymmetricPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure on an invocation with no SAML Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No SAML CallbackHandler available"
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure on an invocation with a SAML1 Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Wrong SAML Version"
argument_list|)
operator|||
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"enforces SamlVersion20Profile11 but we got 1.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|()
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setSignAssertion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|samlCallbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Some negative tests. Send a sender-vouches assertion as a SupportingToken...this will
comment|// fail as the provider will demand that there is a signature covering both the assertion
comment|// and the message body.
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2OverSymmetricSupporting
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2SymmetricSupportingPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure on an invocation with an unsigned SAML SV Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SamlToken not satisfied"
argument_list|)
operator|||
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|WSSecurityException
operator|.
name|UNIFIED_SECURITY_ERR
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2OverAsymmetric
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2AsymmetricPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure on an invocation with no SAML Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No SAML CallbackHandler available"
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure on an invocation with a SAML1 Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Wrong SAML Version"
argument_list|)
operator|||
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"enforces SamlVersion20Profile11 but we got 1.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
comment|// Don't send any Token...failure expected
name|portQName
operator|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2AsymmetricPort2"
argument_list|)
expr_stmt|;
name|saml2Port
operator|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on no token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|String
name|error
init|=
literal|"The received token does not match the token inclusion requirement"
decl_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml1SelfSignedOverTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml1SelfSignedTransportPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml1Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml1Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml1Port
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml1Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml1SelfSignedOverTransportSP11
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml1SelfSignedTransportSP11Port"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml1Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml1Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml1Port
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml1Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml1Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml1Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testAsymmetricSamlInitiator
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItAsymmetricSamlInitiatorPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|callbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2OverSymmetricSignedElements
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2SymmetricSignedElementsPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
comment|// This test only works for DOM
if|if
condition|(
operator|!
name|test
operator|.
name|isStreaming
argument_list|()
operator|&&
name|PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|()
decl_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|samlCallbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2EndorsingOverTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2EndorsingTransportPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|callbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2EndorsingPKOverTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2EndorsingTransportPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|callbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
name|callbackHandler
operator|.
name|setKeyInfoIdentifier
argument_list|(
name|CERT_IDENTIFIER
operator|.
name|KEY_VALUE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2EndorsingOverTransportSP11
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2EndorsingTransportSP11Port"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|callbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2OverAsymmetricSignedEncrypted
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2AsymmetricSignedEncryptedPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2OverAsymmetricSignedEncryptedEncryptBeforeSigning
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2AsymmetricSignedEncryptedEncryptBeforeSigningPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
comment|// TODO Only working for DOM client + server atm
if|if
condition|(
operator|!
name|test
operator|.
name|isStreaming
argument_list|()
operator|&&
name|PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2OverAsymmetricEncrypted
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2AsymmetricEncryptedPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|callbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_BEARER
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2EndorsingEncryptedOverTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2EndorsingEncryptedTransportPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|callbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testNoSamlToken
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItInlinePolicyPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|SecurityTestUtil
operator|.
name|enableStreaming
argument_list|(
name|saml2Port
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on no SamlToken"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|String
name|error
init|=
literal|"The received token does not match the token inclusion requirement"
decl_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|error
argument_list|)
operator|||
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SamlToken not satisfied"
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// In this test-case, the WSP is configured with a XACML PEP interceptor, which in this
comment|// case just mocks the call to the PDP + enforces the decision
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2PEP
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2PEPPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected as Assertion doesn't contain Role information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|SamlRoleCallbackHandler
name|roleCallbackHandler
init|=
operator|new
name|SamlRoleCallbackHandler
argument_list|()
decl_stmt|;
name|roleCallbackHandler
operator|.
name|setSignAssertion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|roleCallbackHandler
operator|.
name|setRoleName
argument_list|(
literal|"manager"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|roleCallbackHandler
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|50
argument_list|)
expr_stmt|;
comment|// Expected failure on incorrect role
name|roleCallbackHandler
operator|.
name|setRoleName
argument_list|(
literal|"boss"
argument_list|)
expr_stmt|;
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected as Assertion doesn't contain correct role"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSaml2Replay
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2TransportPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
comment|// Create a SAML Token with no "OneTimeUse" Condition
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
operator|new
name|SamlCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|Client
name|cxfClient
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|saml2Port
argument_list|)
decl_stmt|;
name|SecurityHeaderCacheInterceptor
name|cacheInterceptor
init|=
operator|new
name|SecurityHeaderCacheInterceptor
argument_list|()
decl_stmt|;
name|cxfClient
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|cacheInterceptor
argument_list|)
expr_stmt|;
comment|// Make two invocations...should succeed
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
comment|// Now create a SAML Token with a "OneTimeUse" Condition
name|ConditionsBean
name|conditions
init|=
operator|new
name|ConditionsBean
argument_list|()
decl_stmt|;
name|conditions
operator|.
name|setTokenPeriodMinutes
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|conditions
operator|.
name|setOneTimeUse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|setConditions
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|cxfClient
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|remove
argument_list|(
name|cacheInterceptor
argument_list|)
expr_stmt|;
name|cacheInterceptor
operator|=
operator|new
name|SecurityHeaderCacheInterceptor
argument_list|()
expr_stmt|;
name|cxfClient
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|cacheInterceptor
argument_list|)
expr_stmt|;
comment|// Make two invocations...should fail on the second one
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a replayed SAML Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|WSSecurityException
operator|.
name|UNIFIED_SECURITY_ERR
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|saml2Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testAudienceRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2TransportPort2"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
comment|// Create a SAML Token with an AudienceRestrictionCondition
name|ConditionsBean
name|conditions
init|=
operator|new
name|ConditionsBean
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AudienceRestrictionBean
argument_list|>
name|audienceRestrictions
init|=
operator|new
name|ArrayList
argument_list|<
name|AudienceRestrictionBean
argument_list|>
argument_list|()
decl_stmt|;
name|AudienceRestrictionBean
name|audienceRestriction
init|=
operator|new
name|AudienceRestrictionBean
argument_list|()
decl_stmt|;
name|audienceRestriction
operator|.
name|setAudienceURIs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"https://localhost:"
operator|+
name|portNumber
operator|+
literal|"/DoubleItSaml2Transport2"
argument_list|)
argument_list|)
expr_stmt|;
name|audienceRestrictions
operator|.
name|add
argument_list|(
name|audienceRestriction
argument_list|)
expr_stmt|;
name|conditions
operator|.
name|setAudienceRestrictions
argument_list|(
name|audienceRestrictions
argument_list|)
expr_stmt|;
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|setConditions
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Now use an "unknown" audience restriction
name|audienceRestriction
operator|=
operator|new
name|AudienceRestrictionBean
argument_list|()
expr_stmt|;
name|audienceRestriction
operator|.
name|setAudienceURIs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"https://localhost:"
operator|+
name|portNumber
operator|+
literal|"/DoubleItSaml2Transport2unknown"
argument_list|)
argument_list|)
expr_stmt|;
name|audienceRestrictions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|audienceRestrictions
operator|.
name|add
argument_list|(
name|audienceRestriction
argument_list|)
expr_stmt|;
name|conditions
operator|.
name|setAudienceRestrictions
argument_list|(
name|audienceRestrictions
argument_list|)
expr_stmt|;
name|callbackHandler
operator|.
name|setConditions
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on unknown AudienceRestriction"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testAudienceRestrictionServiceName
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2TransportPort2"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
comment|// Create a SAML Token with an AudienceRestrictionCondition
name|ConditionsBean
name|conditions
init|=
operator|new
name|ConditionsBean
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AudienceRestrictionBean
argument_list|>
name|audienceRestrictions
init|=
operator|new
name|ArrayList
argument_list|<
name|AudienceRestrictionBean
argument_list|>
argument_list|()
decl_stmt|;
name|AudienceRestrictionBean
name|audienceRestriction
init|=
operator|new
name|AudienceRestrictionBean
argument_list|()
decl_stmt|;
name|audienceRestriction
operator|.
name|setAudienceURIs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|service
operator|.
name|getServiceName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|audienceRestrictions
operator|.
name|add
argument_list|(
name|audienceRestriction
argument_list|)
expr_stmt|;
name|conditions
operator|.
name|setAudienceRestrictions
argument_list|(
name|audienceRestrictions
argument_list|)
expr_stmt|;
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|setConditions
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testDisableAudienceRestrictionValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2TransportPort2"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|saml2Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|portNumber
init|=
name|PORT2
decl_stmt|;
if|if
condition|(
name|STAX_PORT
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|portNumber
operator|=
name|STAX_PORT2
expr_stmt|;
block|}
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
comment|// Create a SAML Token with an AudienceRestrictionCondition
name|ConditionsBean
name|conditions
init|=
operator|new
name|ConditionsBean
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AudienceRestrictionBean
argument_list|>
name|audienceRestrictions
init|=
operator|new
name|ArrayList
argument_list|<
name|AudienceRestrictionBean
argument_list|>
argument_list|()
decl_stmt|;
name|AudienceRestrictionBean
name|audienceRestriction
init|=
operator|new
name|AudienceRestrictionBean
argument_list|()
decl_stmt|;
name|audienceRestriction
operator|.
name|setAudienceURIs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|service
operator|.
name|getServiceName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|audienceRestrictions
operator|.
name|add
argument_list|(
name|audienceRestriction
argument_list|)
expr_stmt|;
name|conditions
operator|.
name|setAudienceRestrictions
argument_list|(
name|audienceRestrictions
argument_list|)
expr_stmt|;
name|SamlCallbackHandler
name|callbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|setConditions
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
comment|// It should fail with validation enabled
try|try
block|{
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on unknown AudienceRestriction"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// It should pass with validation disabled
name|portQName
operator|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSaml2TransportPort3"
argument_list|)
expr_stmt|;
name|saml2Port
operator|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|saml2Port
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|saml2Port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"ws-security.saml-callback-handler"
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|saml2Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

