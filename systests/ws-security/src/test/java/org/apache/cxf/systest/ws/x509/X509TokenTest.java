begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|x509
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|common
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|common
operator|.
name|TestParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|ut
operator|.
name|SecurityHeaderCacheInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|example
operator|.
name|contract
operator|.
name|doubleit
operator|.
name|DoubleItPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|example
operator|.
name|contract
operator|.
name|doubleit
operator|.
name|DoubleItPortType2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * A set of tests for X.509 Tokens.   */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|X509TokenTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|allocatePort
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAX_PORT
init|=
name|allocatePort
argument_list|(
name|StaxServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INTERMEDIARY_PORT
init|=
name|allocatePort
argument_list|(
name|Intermediary
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|PORT2
init|=
name|allocatePort
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|STAX_PORT2
init|=
name|allocatePort
argument_list|(
name|StaxServer
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://www.example.org/contract/DoubleIt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_QNAME
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItService"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|unrestrictedPoliciesInstalled
init|=
name|SecurityTestUtil
operator|.
name|checkUnrestrictedPoliciesInstalled
argument_list|()
decl_stmt|;
specifier|final
name|TestParam
name|test
decl_stmt|;
specifier|public
name|X509TokenTest
parameter_list|(
name|TestParam
name|type
parameter_list|)
block|{
name|this
operator|.
name|test
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|StaxServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Intermediary failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|Intermediary
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|TestParam
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TestParam
index|[]
index|[]
block|{
block|{
operator|new
name|TestParam
argument_list|(
name|PORT
argument_list|,
literal|false
argument_list|)
block|}
block|,
comment|// {new TestParam(PORT, true)},
comment|//{new TestParam(STAX_PORT, false)},
comment|// {new TestParam(STAX_PORT, true)},
block|}
argument_list|)
return|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|stopAllServers
argument_list|()
expr_stmt|;
block|}
comment|/*     @org.junit.Test     public void testSymmetricErrorMessage() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);                  URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItSymmetricErrorMessagePort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  try {             x509Port.doubleIt(25);             fail("Failure expected on an incorrect key");         } catch (javax.xml.ws.soap.SOAPFaultException ex) {             String error = "No certificates were found for decryption";             if (STAX_PORT.equals(test.getPort())) {                 error = "Referenced security token could not be retrieved";             }             assertTrue(ex.getMessage().contains(error));         }                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testKeyIdentifier() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);                  URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItKeyIdentifierPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testKeyIdentifierDerived() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);                  URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItKeyIdentifierDerivedPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testKeyIdentifierEncryptBeforeSigning() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);                  URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItKeyIdentifierEncryptBeforeSigningPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testKeyIdentifierEncryptBeforeSigningDerived() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);                  URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItKeyIdentifierEncryptBeforeSigningDerivedPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }        @org.junit.Test     public void testKeyIdentifierJaxwsClient() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("jaxws-client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);                  URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItKeyIdentifierPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  ((BindingProvider)x509Port).getRequestContext().put(SecurityConstants.ENCRYPT_PROPERTIES,                 "bob.properties");         ((BindingProvider)x509Port).getRequestContext().put(SecurityConstants.ENCRYPT_USERNAME, "bob");                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testIntermediary() throws Exception {          if (test.isStreaming() || STAX_PORT.equals(test.getPort())) {             return;         }                  SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("intermediary-client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);                  URL wsdl = X509TokenTest.class.getResource("DoubleItIntermediary.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, INTERMEDIARY_PORT);                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testIssuerSerial() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItIssuerSerialPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testThumbprint() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItThumbprintPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }     */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSymmetricThumbprintEndorsing
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|X509TokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|X509TokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItX509.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItSymmetricThumbprintEndorsingPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|x509Port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|x509Port
argument_list|,
name|test
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|test
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|x509Port
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|x509Port
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*     @org.junit.Test     public void testSymmetricEndorsingEncrypted() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItSymmetricEndorsingEncryptedPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (!test.isStreaming()) {             x509Port.doubleIt(25);         }                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testContentEncryptedElements() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItContentEncryptedElementsPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricIssuerSerial() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricIssuerSerialPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricNoInitiatorTokenReference() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricNoInitiatorReferencePort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricSP11() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricSP11Port");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricEncryptedPassword() throws Exception {                  if (!unrestrictedPoliciesInstalled) {             return;         }          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricEncryptedPasswordPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricSHA256() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricSHA256Port");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricThumbprint() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricThumbprintPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricPKIPath() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricPKIPathPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricEncryptBeforeSigning() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricEncryptBeforeSigningPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricEncryptBeforeSigningNoEnc() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricEncryptBeforeSigningNoEncPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricEncryptSignature() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricEncryptSignaturePort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricProtectTokens() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricProtectTokensPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricUsernameToken() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricUsernameTokenPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testSymmetricUsernameToken() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItSymmetricUsernameTokenPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testSymmetricProtectTokens() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItSymmetricProtectTokensPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  // TODO WSS-456 Streaming         if (!test.isStreaming()) {             x509Port.doubleIt(25);         }                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testTransportEndorsing() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTransportEndorsingPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         String port = PORT2;         if (STAX_PORT.equals(test.getPort())) {             port = STAX_PORT2;         }         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testTransportEndorsingSP11() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTransportEndorsingSP11Port");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         String port = PORT2;         if (STAX_PORT.equals(test.getPort())) {             port = STAX_PORT2;         }         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testTransportSignedEndorsing() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTransportSignedEndorsingPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         String port = PORT2;         if (STAX_PORT.equals(test.getPort())) {             port = STAX_PORT2;         }         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testTransportEndorsingEncrypted() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTransportEndorsingEncryptedPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         String port = PORT2;         if (STAX_PORT.equals(test.getPort())) {             port = STAX_PORT2;         }         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testTransportSignedEndorsingEncrypted() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTransportSignedEndorsingEncryptedPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         String port = PORT2;         if (STAX_PORT.equals(test.getPort())) {             port = STAX_PORT2;         }         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricSignature() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509Signature.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricSignaturePort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricSignatureSP11() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509Signature.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricSignatureSP11Port");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricEncryption() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509Signature.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricEncryptionPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testAsymmetricSignatureReplay() throws Exception {         if (test.isStreaming()) {             return;         }          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509Signature.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricSignaturePort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  Client cxfClient = ClientProxy.getClient(x509Port);         SecurityHeaderCacheInterceptor cacheInterceptor =             new SecurityHeaderCacheInterceptor();         cxfClient.getOutInterceptors().add(cacheInterceptor);                  // Make two invocations with the same security header         x509Port.doubleIt(25);         try {             x509Port.doubleIt(25);             fail("Failure expected on a replayed Timestamp");         } catch (javax.xml.ws.soap.SOAPFaultException ex) {             String error = "A replay attack has been detected";             assertTrue(ex.getMessage().contains(error)                        || ex.getMessage().contains("The message has expired"));         }                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testTransportSupportingSigned() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTransportSupportingSignedPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         String port = PORT2;         if (STAX_PORT.equals(test.getPort())) {             port = STAX_PORT2;         }         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testTransportSupportingSignedCertConstraints() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTransportSupportingSignedCertConstraintsPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         String port = PORT2;         if (STAX_PORT.equals(test.getPort())) {             port = STAX_PORT2;         }         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  ((BindingProvider)x509Port).getRequestContext().put(SecurityConstants.SIGNATURE_PROPERTIES,                 "bob.properties");         ((BindingProvider)x509Port).getRequestContext().put(SecurityConstants.SIGNATURE_USERNAME, "bob");                  try {             x509Port.doubleIt(25);             fail("Failure expected on bob");         } catch (Exception ex) {             // expected         }                  x509Port = service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, port);                  ((BindingProvider)x509Port).getRequestContext().put(SecurityConstants.SIGNATURE_PROPERTIES,             "alice.properties");         ((BindingProvider)x509Port).getRequestContext().put(SecurityConstants.SIGNATURE_USERNAME, "alice");              x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testTransportKVT() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTransportKVTPort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         String port = PORT2;         if (STAX_PORT.equals(test.getPort())) {             port = STAX_PORT2;         }         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testKeyIdentifier2() throws Exception {          if (test.isStreaming()) {             return;         }                  SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);                  URL wsdl = X509TokenTest.class.getResource("DoubleItOperations.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItKeyIdentifierPort2");         DoubleItPortType2 x509Port =                  service.getPort(portQName, DoubleItPortType2.class);         updateAddressPort(x509Port, PORT);                  List<Header> headers = new ArrayList<Header>();         Header dummyHeader = new Header(new QName("uri:org.apache.cxf", "dummy"), "dummy-header",                                         new JAXBDataBinding(String.class));         headers.add(dummyHeader);         ((BindingProvider)x509Port).getRequestContext().put(Header.HEADER_LIST, headers);                  int response = x509Port.doubleIt(25);         assertEquals(50, response);                  int response2 = x509Port.doubleIt2(15);         assertEquals(30, response2);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testSupportingToken() throws Exception {         if (test.isStreaming()) {             // Just sending an X.509 Token without a Signature is not supported in the StAX layer (yet)              return;         }          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);                 // Successful invocation         QName portQName = new QName(NAMESPACE, "DoubleItTransportSupportingTokenPort");         DoubleItPortType port = service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(port, PORT2);                  port.doubleIt(25);                  // This should fail, as the client is not sending an X.509 Supporting Token         portQName = new QName(NAMESPACE, "DoubleItTransportSupportingTokenPort2");         port = service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(port, PORT2);                  try {             port.doubleIt(25);             fail("Failure expected on not sending an X.509 Supporting Token");         } catch (javax.xml.ws.soap.SOAPFaultException ex) {             String error = "These policy alternatives can not be satisfied";             assertTrue(ex.getMessage().contains(error));         }                  // This should fail, as the client is not sending a PKI Token         portQName = new QName(NAMESPACE, "DoubleItTransportPKISupportingTokenPort");         port = service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(port, PORT2);                  try {             port.doubleIt(25);             fail("Failure expected on not sending a PKI token");         } catch (javax.xml.ws.soap.SOAPFaultException ex) {             String error = "These policy alternatives can not be satisfied";             assertTrue(ex.getMessage().contains(error));         }                  ((java.io.Closeable)port).close();         bus.shutdown(true);     }          @org.junit.Test     public void testNegativeEndorsing() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = X509TokenTest.class.getResource("DoubleItX509.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);                 // Successful invocation         QName portQName = new QName(NAMESPACE, "DoubleItTransportNegativeEndorsingPort");         DoubleItPortType x509Port = service.getPort(portQName, DoubleItPortType.class);         String port = PORT2;         if (STAX_PORT.equals(test.getPort())) {             port = STAX_PORT2;         }         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  // This should fail, as the client is not endorsing the token         portQName = new QName(NAMESPACE, "DoubleItTransportNegativeEndorsingPort2");         x509Port = service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, port);                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  try {             x509Port.doubleIt(25);             fail("Failure expected on not endorsing the token");         } catch (javax.xml.ws.soap.SOAPFaultException ex) {             String error = "These policy alternatives can not be satisfied";             assertTrue(ex.getMessage().contains(error)                        || ex.getMessage().contains("X509Token not satisfied"));         }                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }        @org.junit.Test     public void testSymmetricSignature() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = X509TokenTest.class.getResource("client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);                  URL wsdl = X509TokenTest.class.getResource("DoubleItX509Signature.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItSymmetricSignaturePort");         DoubleItPortType x509Port =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(x509Port, test.getPort());                  if (test.isStreaming()) {             SecurityTestUtil.enableStreaming(x509Port);         }                  x509Port.doubleIt(25);                  ((java.io.Closeable)x509Port).close();         bus.shutdown(true);     }     */
block|}
end_class

end_unit

