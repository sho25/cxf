begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|common
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|policy
operator|.
name|server
operator|.
name|JavaFirstPolicyServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
specifier|public
class|class
name|JavaFirstPolicyServiceTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|PORT
init|=
name|allocatePort
argument_list|(
name|JavaFirstPolicyServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|PORT2
init|=
name|allocatePort
argument_list|(
name|JavaFirstPolicyServer
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WSDL_NAMESPACE
init|=
literal|"http://schemas.xmlsoap.org/wsdl/"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|JavaFirstPolicyServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|stopAllServers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testJavaFirstAttachmentWsdl
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|loadWsdl
argument_list|(
literal|"JavaFirstAttachmentPolicyService"
argument_list|)
decl_stmt|;
name|Element
name|binding
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|WSDL_NAMESPACE
argument_list|,
literal|"binding"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|operationMessages
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|binding
argument_list|,
name|WSDL_NAMESPACE
argument_list|,
literal|"operation"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|operationMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|doOperationLevelPolicy
init|=
name|getOperationElement
argument_list|(
literal|"doOperationLevelPolicy"
argument_list|,
name|operationMessages
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"#UsernameToken"
argument_list|,
name|getOperationPolicyReferenceId
argument_list|(
name|doOperationLevelPolicy
argument_list|,
name|Constants
operator|.
name|URI_POLICY_13_NS
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|doInputMessagePolicy
init|=
name|getOperationElement
argument_list|(
literal|"doInputMessagePolicy"
argument_list|,
name|operationMessages
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"#UsernameToken"
argument_list|,
name|getMessagePolicyReferenceId
argument_list|(
name|doInputMessagePolicy
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_13_NS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getMessagePolicyReferenceId
argument_list|(
name|doInputMessagePolicy
argument_list|,
name|Type
operator|.
name|OUTPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_13_NS
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|doOutputMessagePolicy
init|=
name|getOperationElement
argument_list|(
literal|"doOutputMessagePolicy"
argument_list|,
name|operationMessages
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"#UsernameToken"
argument_list|,
name|getMessagePolicyReferenceId
argument_list|(
name|doOutputMessagePolicy
argument_list|,
name|Type
operator|.
name|OUTPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_13_NS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getMessagePolicyReferenceId
argument_list|(
name|doOutputMessagePolicy
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_13_NS
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|doNoPolicy
init|=
name|getOperationElement
argument_list|(
literal|"doNoPolicy"
argument_list|,
name|operationMessages
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|getMessagePolicyReferenceId
argument_list|(
name|doNoPolicy
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_13_NS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getMessagePolicyReferenceId
argument_list|(
name|doNoPolicy
argument_list|,
name|Type
operator|.
name|OUTPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_13_NS
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure that the policies are attached to the wsdl:definitions
name|List
argument_list|<
name|Element
argument_list|>
name|policyMessages
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|Constants
operator|.
name|URI_POLICY_13_NS
argument_list|,
literal|"Policy"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policyMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UsernameToken"
argument_list|,
name|getPolicyId
argument_list|(
name|policyMessages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testJavaFirstWsdl
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|loadWsdl
argument_list|(
literal|"JavaFirstPolicyService"
argument_list|)
decl_stmt|;
name|Element
name|portType
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|WSDL_NAMESPACE
argument_list|,
literal|"portType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|portType
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|operationMessages
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|portType
argument_list|,
name|WSDL_NAMESPACE
argument_list|,
literal|"operation"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|operationMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|operationOne
init|=
name|getOperationElement
argument_list|(
literal|"doOperationOne"
argument_list|,
name|operationMessages
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"#InternalTransportAndUsernamePolicy"
argument_list|,
name|getMessagePolicyReferenceId
argument_list|(
name|operationOne
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_NS
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|operationTwo
init|=
name|getOperationElement
argument_list|(
literal|"doOperationTwo"
argument_list|,
name|operationMessages
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"#TransportAndUsernamePolicy"
argument_list|,
name|getMessagePolicyReferenceId
argument_list|(
name|operationTwo
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_NS
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|operationThree
init|=
name|getOperationElement
argument_list|(
literal|"doOperationThree"
argument_list|,
name|operationMessages
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"#InternalTransportAndUsernamePolicy"
argument_list|,
name|getMessagePolicyReferenceId
argument_list|(
name|operationThree
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_NS
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|operationFour
init|=
name|getOperationElement
argument_list|(
literal|"doOperationFour"
argument_list|,
name|operationMessages
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"#TransportAndUsernamePolicy"
argument_list|,
name|getMessagePolicyReferenceId
argument_list|(
name|operationFour
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_NS
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|operationPing
init|=
name|getOperationElement
argument_list|(
literal|"doPing"
argument_list|,
name|operationMessages
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|getMessagePolicyReferenceId
argument_list|(
name|operationPing
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|,
name|Constants
operator|.
name|URI_POLICY_NS
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|policyMessages
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|Constants
operator|.
name|URI_POLICY_NS
argument_list|,
literal|"Policy"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policyMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate that both the internal and external policies are included
name|assertEquals
argument_list|(
literal|"TransportAndUsernamePolicy"
argument_list|,
name|getPolicyId
argument_list|(
name|policyMessages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"InternalTransportAndUsernamePolicy"
argument_list|,
name|getPolicyId
argument_list|(
name|policyMessages
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Document
name|loadWsdl
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|connection
init|=
name|getHttpConnection
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT2
operator|+
literal|"/"
operator|+
name|serviceName
operator|+
literal|"?wsdl"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|String
name|wsdlContents
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|)
decl_stmt|;
return|return
name|DOMUtils
operator|.
name|readXml
argument_list|(
operator|new
name|StringReader
argument_list|(
name|wsdlContents
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getPolicyId
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
name|element
operator|.
name|getAttributeNS
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|,
name|PolicyConstants
operator|.
name|WSU_ID_ATTR_NAME
argument_list|)
return|;
block|}
specifier|private
name|Element
name|getOperationElement
parameter_list|(
name|String
name|operationName
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|operationMessages
parameter_list|)
block|{
name|Element
name|operationElement
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Element
name|operation
range|:
name|operationMessages
control|)
block|{
if|if
condition|(
name|operationName
operator|.
name|equals
argument_list|(
name|operation
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
name|operationElement
operator|=
name|operation
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|operationElement
argument_list|)
expr_stmt|;
return|return
name|operationElement
return|;
block|}
specifier|private
name|String
name|getMessagePolicyReferenceId
parameter_list|(
name|Element
name|operationElement
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|policyNamespace
parameter_list|)
block|{
name|Element
name|messageElement
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|operationElement
argument_list|,
name|WSDL_NAMESPACE
argument_list|,
name|type
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|messageElement
argument_list|)
expr_stmt|;
name|Element
name|policyReference
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|messageElement
argument_list|,
name|policyNamespace
argument_list|,
literal|"PolicyReference"
argument_list|)
decl_stmt|;
if|if
condition|(
name|policyReference
operator|!=
literal|null
condition|)
block|{
return|return
name|policyReference
operator|.
name|getAttribute
argument_list|(
literal|"URI"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|String
name|getOperationPolicyReferenceId
parameter_list|(
name|Element
name|operationElement
parameter_list|,
name|String
name|policyNamespace
parameter_list|)
block|{
name|Element
name|policyReference
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|operationElement
argument_list|,
name|policyNamespace
argument_list|,
literal|"PolicyReference"
argument_list|)
decl_stmt|;
if|if
condition|(
name|policyReference
operator|!=
literal|null
condition|)
block|{
return|return
name|policyReference
operator|.
name|getAttribute
argument_list|(
literal|"URI"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

