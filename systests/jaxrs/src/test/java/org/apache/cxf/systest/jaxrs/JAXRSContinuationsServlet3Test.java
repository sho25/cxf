begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|AsyncInvoker
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|WebTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|AbstractResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|ServerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JAXRSContinuationsServlet3Test
extends|extends
name|AbstractJAXRSContinuationsTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|BookContinuationServlet3Server
operator|.
name|PORT
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractResourceInfo
operator|.
name|clearAllMaps
argument_list|()
expr_stmt|;
name|createStaticBus
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookContinuationServlet3Server
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeoutAndCancelAsyncExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTimeoutAndCancel
argument_list|(
literal|"/asyncexecutor/bookstore"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBookUnmappedFromFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
name|getBaseAddress
argument_list|()
operator|+
literal|"/books/unmappedFromFilter"
argument_list|)
decl_stmt|;
name|wc
operator|.
name|accept
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
name|Response
name|r
init|=
name|wc
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientDisconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerLauncher
name|launcher
init|=
operator|new
name|ServerLauncher
argument_list|(
name|BookContinuationClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launcher
operator|.
name|launchServer
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCancelVoidOnResumedTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|base
init|=
literal|"http://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/async/resource/"
decl_stmt|;
name|String
name|expectedResponse
init|=
literal|"Expected response"
decl_stmt|;
name|Future
argument_list|<
name|Response
argument_list|>
name|suspend
init|=
name|invokeRequest
argument_list|(
name|base
operator|+
literal|"suspend"
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Response
argument_list|>
name|resume
init|=
name|invokeRequest
argument_list|(
name|base
operator|+
literal|"resume?stage=0"
argument_list|,
name|expectedResponse
argument_list|)
decl_stmt|;
name|assertString
argument_list|(
name|resume
argument_list|,
name|AsyncResource
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|suspend
argument_list|,
name|expectedResponse
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Response
argument_list|>
name|cancel
init|=
name|invokeRequest
argument_list|(
name|base
operator|+
literal|"cancelvoid?stage=1"
argument_list|)
decl_stmt|;
name|assertString
argument_list|(
name|cancel
argument_list|,
name|AsyncResource
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLostThrowFromSuspendedCall
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|base
init|=
literal|"http://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/async/resource/"
decl_stmt|;
name|Future
argument_list|<
name|Response
argument_list|>
name|suspend
init|=
name|invokeRequest
argument_list|(
name|base
operator|+
literal|"suspendthrow"
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|suspend
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|502
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuspendSetTimeoutt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|base
init|=
literal|"http://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/async/resource2/"
decl_stmt|;
name|Future
argument_list|<
name|Response
argument_list|>
name|suspend
init|=
name|invokeRequest
argument_list|(
name|base
operator|+
literal|"suspend"
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Future
argument_list|<
name|Response
argument_list|>
name|timeout
init|=
name|invokeRequest
argument_list|(
name|base
operator|+
literal|"setTimeOut"
argument_list|)
decl_stmt|;
try|try
block|{
name|assertString
argument_list|(
name|timeout
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|503
argument_list|,
name|suspend
operator|.
name|get
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertString
parameter_list|(
name|Future
argument_list|<
name|Response
argument_list|>
name|future
parameter_list|,
name|String
name|check
parameter_list|)
throws|throws
name|Exception
block|{
name|Response
name|response
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|check
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|Response
argument_list|>
name|invokeRequest
parameter_list|(
name|String
name|resource
parameter_list|,
name|T
name|entity
parameter_list|)
block|{
name|AsyncInvoker
name|async
init|=
name|createAsyncInvoker
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|async
operator|.
name|post
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Future
argument_list|<
name|Response
argument_list|>
name|invokeRequest
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|AsyncInvoker
name|async
init|=
name|createAsyncInvoker
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|async
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|AsyncInvoker
name|createAsyncInvoker
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|WebTarget
name|target
init|=
name|ClientBuilder
operator|.
name|newClient
argument_list|()
operator|.
name|target
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|target
operator|.
name|request
argument_list|()
operator|.
name|async
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getBaseAddress
parameter_list|()
block|{
return|return
literal|"/async/bookstore"
return|;
block|}
specifier|protected
name|String
name|getPort
parameter_list|()
block|{
return|return
name|PORT
return|;
block|}
block|}
end_class

end_unit

