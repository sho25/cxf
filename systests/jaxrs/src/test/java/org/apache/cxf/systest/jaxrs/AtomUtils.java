begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|Abdera
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|factory
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|AtomUtils
block|{
specifier|private
name|AtomUtils
parameter_list|()
block|{      }
specifier|public
specifier|static
name|Entry
name|createBookEntry
parameter_list|(
name|Book
name|b
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBookEntry
argument_list|(
name|Abdera
operator|.
name|getNewFactory
argument_list|()
argument_list|,
name|b
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Entry
name|createBookEntry
parameter_list|(
name|Factory
name|factory
parameter_list|,
name|Book
name|b
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBookEntry
argument_list|(
name|factory
argument_list|,
name|b
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Entry
name|createBookEntry
parameter_list|(
name|Book
name|b
parameter_list|,
name|String
name|baseUri
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBookEntry
argument_list|(
name|Abdera
operator|.
name|getNewFactory
argument_list|()
argument_list|,
name|b
argument_list|,
name|baseUri
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Entry
name|createBookEntry
parameter_list|(
name|Factory
name|factory
parameter_list|,
name|Book
name|b
parameter_list|,
name|String
name|baseUri
parameter_list|)
throws|throws
name|Exception
block|{
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|Entry
name|e
init|=
name|factory
operator|.
name|newEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseUri
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|setBaseUri
argument_list|(
name|baseUri
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setTitle
argument_list|(
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setId
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|jc
operator|.
name|createMarshaller
argument_list|()
operator|.
name|marshal
argument_list|(
name|b
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|e
operator|.
name|setContent
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|,
name|Content
operator|.
name|Type
operator|.
name|XML
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
block|}
end_class

end_unit

