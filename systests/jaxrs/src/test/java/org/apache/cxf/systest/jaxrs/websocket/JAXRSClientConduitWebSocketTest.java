begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|websocket
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|AbstractResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|JAXRSClientConduitWebSocketTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PORT
init|=
name|BookServerWebSocket
operator|.
name|PORT
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractResourceInfo
operator|.
name|clearAllMaps
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
operator|new
name|BookServerWebSocket
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|createStaticBus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBookWithWebSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/websocket"
decl_stmt|;
name|BookStoreWebSocket
name|resource
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|BookStoreWebSocket
operator|.
name|class
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|WebClient
operator|.
name|client
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|client
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|USER_AGENT
argument_list|,
name|JAXRSClientConduitWebSocketTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// call the GET service
name|assertEquals
argument_list|(
literal|"CXF in Action"
argument_list|,
operator|new
name|String
argument_list|(
name|resource
operator|.
name|getBookName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// call the GET service in text mode
comment|//TODO add some way to control the client to switch between the bytes and text modes
name|assertEquals
argument_list|(
literal|"CXF in Action"
argument_list|,
operator|new
name|String
argument_list|(
name|resource
operator|.
name|getBookName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// call another GET service
name|Book
name|book
init|=
name|resource
operator|.
name|getBook
argument_list|(
literal|123
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CXF in Action"
argument_list|,
name|book
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// call the POST service
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|123
argument_list|)
argument_list|,
name|resource
operator|.
name|echoBookId
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
comment|// call the same POST service in the text mode
comment|//TODO add some way to control the client to switch between the bytes and text modes
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|123
argument_list|)
argument_list|,
name|resource
operator|.
name|echoBookId
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
comment|// call the GET service returning a continous stream output
comment|//TODO there is no way to get the continuous stream at the moment
comment|//resource.getBookBought();
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCallsWithIDReferences
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/websocket"
decl_stmt|;
name|BookStoreWebSocket
name|resource
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|BookStoreWebSocket
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|WebClient
operator|.
name|client
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|client
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|USER_AGENT
argument_list|,
name|JAXRSClientConduitWebSocketTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// call the POST service twice (a unique requestId is automatically included to correlate the response)
name|EchoBookIdRunner
index|[]
name|runners
init|=
operator|new
name|EchoBookIdRunner
index|[
literal|2
index|]
decl_stmt|;
name|runners
index|[
literal|0
index|]
operator|=
operator|new
name|EchoBookIdRunner
argument_list|(
name|resource
argument_list|,
literal|549
argument_list|)
expr_stmt|;
name|runners
index|[
literal|1
index|]
operator|=
operator|new
name|EchoBookIdRunner
argument_list|(
name|resource
argument_list|,
literal|495
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|runners
index|[
literal|0
index|]
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|runners
index|[
literal|1
index|]
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|timetowait
init|=
literal|5000
decl_stmt|;
while|while
condition|(
name|timetowait
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|runners
index|[
literal|0
index|]
operator|.
name|isCompleted
argument_list|()
operator|&&
name|runners
index|[
literal|1
index|]
operator|.
name|isCompleted
argument_list|()
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|timetowait
operator|-=
literal|500
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|549
argument_list|)
argument_list|,
name|runners
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|495
argument_list|)
argument_list|,
name|runners
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|EchoBookIdRunner
implements|implements
name|Runnable
block|{
specifier|private
name|BookStoreWebSocket
name|resource
decl_stmt|;
specifier|private
name|long
name|input
decl_stmt|;
specifier|private
name|Long
name|value
decl_stmt|;
specifier|private
name|boolean
name|completed
decl_stmt|;
name|EchoBookIdRunner
parameter_list|(
name|BookStoreWebSocket
name|resource
parameter_list|,
name|long
name|input
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|value
operator|=
name|resource
operator|.
name|echoBookId
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|completed
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|boolean
name|isCompleted
parameter_list|()
block|{
return|return
name|completed
return|;
block|}
block|}
specifier|protected
name|String
name|getPort
parameter_list|()
block|{
return|return
name|PORT
return|;
block|}
block|}
end_class

end_unit

