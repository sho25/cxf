begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|FailoverFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|FailoverFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|RandomStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|SequentialStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|circuitbreaker
operator|.
name|CircuitBreakerFailoverFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|BookStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests failover within a static cluster.  */
end_comment

begin_class
specifier|public
class|class
name|CircuitBreakerFailoverTest
extends|extends
name|AbstractFailoverTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NON_PORT
init|=
name|allocatePort
argument_list|(
name|CircuitBreakerFailoverTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FailoverFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSequentialStrategyUnavailableAlternatives
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|"http://localhost:"
operator|+
name|NON_PORT
operator|+
literal|"/non-existent"
argument_list|,
literal|"http://localhost:"
operator|+
name|NON_PORT
operator|+
literal|"/non-existent2"
argument_list|)
decl_stmt|;
specifier|final
name|BookStore
name|bookStore
init|=
name|getBookStore
argument_list|(
literal|"http://localhost:"
operator|+
name|NON_PORT
operator|+
literal|"/non-existent"
argument_list|,
name|feature
argument_list|)
decl_stmt|;
comment|// First iteration is going to open all circuit breakers.
comment|// Second iteration should not call any URL as all targets are not available.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|bookStore
operator|.
name|getBook
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProcessingException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FailoverFailedException
condition|)
block|{
throw|throw
operator|(
name|FailoverFailedException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequentialStrategyWithElapsingCircuitBreakerTimeout
parameter_list|()
throws|throws
name|Throwable
block|{
name|FailoverFeature
name|feature
init|=
name|customizeFeature
argument_list|(
operator|new
name|CircuitBreakerFailoverFeature
argument_list|(
literal|1
argument_list|,
literal|3000
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"http://localhost:"
operator|+
name|NON_PORT
operator|+
literal|"/non-existent"
argument_list|,
literal|"http://localhost:"
operator|+
name|NON_PORT
operator|+
literal|"/non-existent2"
argument_list|)
decl_stmt|;
specifier|final
name|BookStore
name|bookStore
init|=
name|getBookStore
argument_list|(
literal|"http://localhost:"
operator|+
name|NON_PORT
operator|+
literal|"/non-existent"
argument_list|,
name|feature
argument_list|)
decl_stmt|;
comment|// First iteration is going to open all circuit breakers. The timeout at the end
comment|// should reset all circuit breakers and the URLs could be tried again.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|bookStore
operator|.
name|getBook
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProcessingException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
operator|)
condition|)
block|{
throw|throw
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
comment|// Let's wait a bit more than circuit breaker timeout
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequentialStrategyWithRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|"http://localhost:"
operator|+
name|NON_PORT
operator|+
literal|"/non-existent"
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
literal|"http://localhost:"
operator|+
name|NON_PORT
operator|+
literal|"/non-existent"
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|FailoverFeature
name|getFeature
parameter_list|(
name|boolean
name|random
parameter_list|,
name|String
modifier|...
name|address
parameter_list|)
block|{
return|return
name|customizeFeature
argument_list|(
operator|new
name|CircuitBreakerFailoverFeature
argument_list|()
argument_list|,
name|random
argument_list|,
name|address
argument_list|)
return|;
block|}
specifier|private
name|FailoverFeature
name|customizeFeature
parameter_list|(
name|CircuitBreakerFailoverFeature
name|feature
parameter_list|,
name|boolean
name|random
parameter_list|,
name|String
modifier|...
name|address
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|alternateAddresses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|address
control|)
block|{
name|alternateAddresses
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|random
condition|)
block|{
name|SequentialStrategy
name|strategy
init|=
operator|new
name|SequentialStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setAlternateAddresses
argument_list|(
name|alternateAddresses
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RandomStrategy
name|strategy
init|=
operator|new
name|RandomStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setAlternateAddresses
argument_list|(
name|alternateAddresses
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
return|return
name|feature
return|;
block|}
block|}
end_class

end_unit

