begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|WebTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|LoggingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|SSLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|JAXRS20HttpsBookTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|BookHttpsServer
operator|.
name|PORT
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|createStaticBus
argument_list|(
literal|"org/apache/cxf/systest/jaxrs/security/jaxrs-https-server.xml"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookHttpsServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBook
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientBuilder
name|builder
init|=
name|ClientBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|keystore
init|=
name|ClassLoaderUtils
operator|.
name|getResourceAsStream
argument_list|(
literal|"keys/Truststore.jks"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
init|)
block|{
name|KeyStore
name|trustStore
init|=
name|loadStore
argument_list|(
name|keystore
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|trustStore
argument_list|(
name|trustStore
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|hostnameVerifier
argument_list|(
operator|new
name|AllowAllHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|keystore
init|=
name|ClassLoaderUtils
operator|.
name|getResourceAsStream
argument_list|(
literal|"keys/Morpit.jks"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
init|)
block|{
name|KeyStore
name|keyStore
init|=
name|loadStore
argument_list|(
name|keystore
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|keyStore
argument_list|(
name|keyStore
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
block|}
name|Client
name|client
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|register
argument_list|(
operator|new
name|LoggingFeature
argument_list|()
argument_list|)
expr_stmt|;
name|WebTarget
name|target
init|=
name|client
operator|.
name|target
argument_list|(
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore/securebooks/123"
argument_list|)
decl_stmt|;
name|Book
name|b
init|=
name|target
operator|.
name|request
argument_list|()
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|b
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBookSslContext
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientBuilder
name|builder
init|=
name|ClientBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|SSLContext
name|sslContext
init|=
name|createSSLContext
argument_list|()
decl_stmt|;
name|builder
operator|.
name|sslContext
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
name|builder
operator|.
name|hostnameVerifier
argument_list|(
operator|new
name|AllowAllHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|WebTarget
name|target
init|=
name|client
operator|.
name|target
argument_list|(
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore/securebooks/123"
argument_list|)
decl_stmt|;
name|Book
name|b
init|=
name|target
operator|.
name|request
argument_list|()
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|b
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|KeyStore
name|loadStore
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStore
name|store
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"JKS"
argument_list|)
decl_stmt|;
name|store
operator|.
name|load
argument_list|(
name|inputStream
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|store
return|;
block|}
specifier|private
name|SSLContext
name|createSSLContext
parameter_list|()
throws|throws
name|Exception
block|{
name|TLSClientParameters
name|tlsParams
init|=
operator|new
name|TLSClientParameters
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|keystore
init|=
name|ClassLoaderUtils
operator|.
name|getResourceAsStream
argument_list|(
literal|"keys/Truststore.jks"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
init|)
block|{
name|KeyStore
name|trustStore
init|=
name|loadStore
argument_list|(
name|keystore
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|trustStore
argument_list|)
expr_stmt|;
name|tlsParams
operator|.
name|setTrustManagers
argument_list|(
name|tmf
operator|.
name|getTrustManagers
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|InputStream
name|keystore
init|=
name|ClassLoaderUtils
operator|.
name|getResourceAsStream
argument_list|(
literal|"keys/Morpit.jks"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
init|)
block|{
name|KeyStore
name|keyStore
init|=
name|loadStore
argument_list|(
name|keystore
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|keyStore
argument_list|,
literal|"password"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|tlsParams
operator|.
name|setKeyManagers
argument_list|(
name|kmf
operator|.
name|getKeyManagers
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|SSLUtils
operator|.
name|getSSLContext
argument_list|(
name|tlsParams
argument_list|)
return|;
block|}
block|}
end_class

end_unit

