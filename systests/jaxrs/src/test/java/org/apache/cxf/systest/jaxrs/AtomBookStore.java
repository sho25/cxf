begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|Abdera
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|factory
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Feed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|customer
operator|.
name|book
operator|.
name|BookNotFoundDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|customer
operator|.
name|book
operator|.
name|BookNotFoundFault
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
specifier|public
class|class
name|AtomBookStore
block|{
annotation|@
name|Context
specifier|protected
name|UriInfo
name|uField
decl_stmt|;
specifier|private
name|HttpHeaders
name|headers
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Book
argument_list|>
name|books
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Book
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|CD
argument_list|>
name|cds
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CD
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|bookId
init|=
literal|123
decl_stmt|;
specifier|private
name|long
name|cdId
init|=
literal|123
decl_stmt|;
specifier|public
name|AtomBookStore
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
comment|//System.out.println("----books: " + books.size());
block|}
annotation|@
name|Context
specifier|public
name|void
name|setHttpHeaders
parameter_list|(
name|HttpHeaders
name|theHeaders
parameter_list|)
block|{
name|headers
operator|=
name|theHeaders
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/books/jsonfeed"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
literal|"application/xml"
block|,
literal|"application/json"
block|,
literal|"text/html"
block|,
literal|"application/atom+xml"
block|}
argument_list|)
specifier|public
name|Feed
name|getBooksAsJsonFeed
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uParam
parameter_list|)
block|{
return|return
name|getBooksAsFeed
argument_list|(
name|uParam
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/books/feed"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
literal|"application/atom+xml"
block|,
literal|"application/json"
block|}
argument_list|)
specifier|public
name|Feed
name|getBooksAsFeed
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uParam
parameter_list|)
block|{
name|MediaType
name|mt
init|=
name|headers
operator|.
name|getMediaType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mt
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|valueOf
argument_list|(
name|MediaType
operator|.
name|MEDIA_TYPE_WILDCARD
argument_list|)
argument_list|)
operator|&&
operator|!
name|mt
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
operator|&&
operator|!
name|mt
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_ATOM_XML_TYPE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
return|return
name|doGetBookAsFeed
argument_list|(
name|uParam
argument_list|)
return|;
block|}
specifier|private
name|Feed
name|doGetBookAsFeed
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uParam
parameter_list|)
block|{
name|Factory
name|factory
init|=
name|Abdera
operator|.
name|getNewFactory
argument_list|()
decl_stmt|;
name|Feed
name|f
init|=
name|factory
operator|.
name|newFeed
argument_list|()
decl_stmt|;
name|f
operator|.
name|setBaseUri
argument_list|(
name|uParam
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setTitle
argument_list|(
literal|"Collection of Books"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setId
argument_list|(
literal|"http://www.books.com"
argument_list|)
expr_stmt|;
name|f
operator|.
name|addAuthor
argument_list|(
literal|"BookStore Management Company"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Book
name|b
range|:
name|books
operator|.
name|values
argument_list|()
control|)
block|{
name|Entry
name|e
init|=
name|AtomUtils
operator|.
name|createBookEntry
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|f
operator|.
name|addEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|f
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/feed"
argument_list|)
annotation|@
name|Consumes
argument_list|(
literal|"application/atom+xml"
argument_list|)
specifier|public
name|Response
name|addBookAsEntry
parameter_list|(
name|Entry
name|e
parameter_list|)
block|{
try|try
block|{
name|String
name|text
init|=
name|e
operator|.
name|getContentElement
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|Book
name|b
init|=
operator|(
name|Book
operator|)
name|jc
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|books
operator|.
name|put
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|uField
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"books"
argument_list|)
operator|.
name|path
argument_list|(
literal|"entries"
argument_list|)
operator|.
name|path
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|uri
argument_list|)
operator|.
name|entity
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/feed/relative"
argument_list|)
annotation|@
name|Consumes
argument_list|(
literal|"application/atom+xml"
argument_list|)
specifier|public
name|Response
name|addBookAsEntryRelativeURI
parameter_list|(
name|Entry
name|e
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|text
init|=
name|e
operator|.
name|getContentElement
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|Book
name|b
init|=
operator|(
name|Book
operator|)
name|jc
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|books
operator|.
name|put
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"books/entries/"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|uri
argument_list|)
operator|.
name|entity
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/books/entries/{bookId}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
literal|"application/atom+xml"
block|,
literal|"application/json"
block|}
argument_list|)
specifier|public
name|Entry
name|getBookAsEntry
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"bookId"
argument_list|)
name|String
name|id
parameter_list|)
throws|throws
name|BookNotFoundFault
block|{
comment|//System.out.println("----invoking getBook with id: " + id);
name|Book
name|book
init|=
name|books
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|book
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|AtomUtils
operator|.
name|createBookEntry
argument_list|(
name|book
argument_list|,
name|uField
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
name|BookNotFoundDetails
name|details
init|=
operator|new
name|BookNotFoundDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setId
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BookNotFoundFault
argument_list|(
name|details
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Path
argument_list|(
literal|"/books/subresources/{bookId}/"
argument_list|)
specifier|public
name|AtomBook
name|getBook
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"bookId"
argument_list|)
name|String
name|id
parameter_list|)
throws|throws
name|BookNotFoundFault
block|{
comment|//System.out.println("----invoking getBook with id: " + id);
name|Book
name|book
init|=
name|books
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|book
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|new
name|AtomBook
argument_list|(
name|book
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
name|BookNotFoundDetails
name|details
init|=
operator|new
name|BookNotFoundDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setId
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BookNotFoundFault
argument_list|(
name|details
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
specifier|final
name|void
name|init
parameter_list|()
block|{
name|Book
name|book
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|book
operator|.
name|setId
argument_list|(
name|bookId
argument_list|)
expr_stmt|;
name|book
operator|.
name|setName
argument_list|(
literal|"CXF in Action"
argument_list|)
expr_stmt|;
name|books
operator|.
name|put
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|,
name|book
argument_list|)
expr_stmt|;
name|CD
name|cd
init|=
operator|new
name|CD
argument_list|()
decl_stmt|;
name|cd
operator|.
name|setId
argument_list|(
name|cdId
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setName
argument_list|(
literal|"BOHEMIAN RHAPSODY"
argument_list|)
expr_stmt|;
name|cds
operator|.
name|put
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
argument_list|)
expr_stmt|;
name|CD
name|cd1
init|=
operator|new
name|CD
argument_list|()
decl_stmt|;
name|cd1
operator|.
name|setId
argument_list|(
operator|++
name|cdId
argument_list|)
expr_stmt|;
name|cd1
operator|.
name|setName
argument_list|(
literal|"BICYCLE RACE"
argument_list|)
expr_stmt|;
name|cds
operator|.
name|put
argument_list|(
name|cd1
operator|.
name|getId
argument_list|()
argument_list|,
name|cd1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

