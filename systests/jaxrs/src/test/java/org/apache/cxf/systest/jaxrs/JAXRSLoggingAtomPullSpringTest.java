begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Feed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|provider
operator|.
name|AtomEntryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|provider
operator|.
name|AtomFeedProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|ReadWriteLogStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|ReadableLogStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|atom
operator|.
name|AtomPullServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JAXRSLoggingAtomPullSpringTest
extends|extends
name|AbstractClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|SpringServer
operator|.
name|PORT
decl_stmt|;
specifier|private
specifier|static
name|JAXBContext
name|context
decl_stmt|;
specifier|private
name|int
name|fakyLogger
decl_stmt|;
specifier|private
name|int
name|namedLogger
decl_stmt|;
specifier|private
name|int
name|resourceLogger
decl_stmt|;
specifier|private
name|int
name|throwables
decl_stmt|;
specifier|private
name|int
name|errorLevels
decl_stmt|;
specifier|private
name|int
name|traceLevels
decl_stmt|;
specifier|private
name|int
name|infoLevels
decl_stmt|;
specifier|private
name|int
name|debugLevels
decl_stmt|;
specifier|private
name|int
name|warningLevels
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|//make sure the Resource things have their static initializers called
comment|//to make sure the Loggers are created.  Otherwise, the Loggers that the server
comment|//sets the handler into could be garbage collected before the init is called
operator|new
name|Resource
argument_list|()
expr_stmt|;
operator|new
name|Resource2
argument_list|()
expr_stmt|;
operator|new
name|Resource3
argument_list|()
expr_stmt|;
comment|// must be 'in-process' to communicate with inner class in single JVM
comment|// and to spawn class SpringServer w/o using main() method
name|String
name|resourceDir
init|=
name|JAXRSLoggingAtomPullSpringTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"resources"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"systemtests.jaxrs.logs.folder"
argument_list|,
name|resourceDir
argument_list|)
expr_stmt|;
name|launchServer
argument_list|(
name|SpringServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
specifier|public
specifier|static
class|class
name|SpringServer
extends|extends
name|AbstractSpringServer
block|{
specifier|public
name|SpringServer
parameter_list|()
block|{
name|super
argument_list|(
literal|"/jaxrs_logging_atompull"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|Storage
operator|.
name|clearRecords
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFeed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|listing
init|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/services"
argument_list|)
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|listing
argument_list|,
name|listing
operator|.
name|contains
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom/logs"
argument_list|)
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/resource/root"
argument_list|)
decl_stmt|;
name|wc
operator|.
name|path
argument_list|(
literal|"/log"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|checkSimpleFeed
argument_list|(
name|getFeed
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom/logs"
argument_list|)
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|checkSimpleFeed
argument_list|(
name|getFeed
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom/logs"
argument_list|)
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|LinkedList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
name|WebClient
name|wcEntry
init|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom/logs"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|AtomEntryProvider
argument_list|()
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/atom+xml;type=entry"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|Entry
name|entry
init|=
name|wcEntry
operator|.
name|path
argument_list|(
literal|"entry/"
operator|+
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|Entry
operator|.
name|class
argument_list|)
decl_stmt|;
name|entry
operator|.
name|toString
argument_list|()
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|wcEntry
operator|.
name|back
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|checkSimpleFeed
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSimpleFeed
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|entries
control|)
block|{
name|updateCounters
argument_list|(
name|readLogRecord
argument_list|(
name|e
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
literal|"Resource"
argument_list|,
literal|"namedLogger"
argument_list|)
expr_stmt|;
block|}
name|verifyCounters
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPagedFeed
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/resource2/paged"
argument_list|)
decl_stmt|;
name|wc
operator|.
name|path
argument_list|(
literal|"/log"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|verifyPages
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom2/logs"
argument_list|,
literal|"next"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|"theNamedLogger"
argument_list|)
expr_stmt|;
name|verifyPages
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom2/logs/3"
argument_list|,
literal|"previous"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|"theNamedLogger"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPagedFeedWithQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|wcReset
init|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/reset"
argument_list|)
decl_stmt|;
name|wcReset
operator|.
name|post
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/resource2/paged/log"
argument_list|)
decl_stmt|;
name|wc
operator|.
name|get
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom2/logs"
operator|+
literal|"?_s=level==INFO,level==ERROR,level==WARN"
decl_stmt|;
name|verifyPagesWithQuery
argument_list|(
name|address
argument_list|,
literal|"next"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|"Resource2"
argument_list|,
literal|"theNamedLogger"
argument_list|)
expr_stmt|;
name|verifyPagesWithQuery
argument_list|(
name|address
argument_list|,
literal|"next"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|"Resource2"
argument_list|,
literal|"theNamedLogger"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPagedFeedWithReadWriteStorage
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/resource3/storage"
argument_list|)
decl_stmt|;
name|wc
operator|.
name|path
argument_list|(
literal|"/log"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|verifyStoragePages
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom3/logs"
argument_list|,
literal|"next"
argument_list|,
literal|"Resource3"
argument_list|,
literal|"theStorageLogger"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
name|list
init|=
name|Storage
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoragePages
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom3/logs"
argument_list|,
literal|"next"
argument_list|,
literal|"Resource3"
argument_list|,
literal|"theStorageLogger"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyStoragePages
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom3/logs/2"
argument_list|,
literal|"previous"
argument_list|,
literal|"Resource3"
argument_list|,
literal|"theStorageLogger"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPagedFeedWithReadOnlyStorage
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyStoragePages
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom4/logs"
argument_list|,
literal|"next"
argument_list|,
literal|"Resource4"
argument_list|,
literal|"readOnlyStorageLogger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyStoragePages
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom4/logs/2"
argument_list|,
literal|"previous"
argument_list|,
literal|"Resource4"
argument_list|,
literal|"readOnlyStorageLogger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPagedFeedWithReadonlyStorageAngQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|checkInfoLevelOnly
argument_list|()
expr_stmt|;
name|checkDebugLevelOnly
argument_list|()
expr_stmt|;
name|checkInfoLevelOnly
argument_list|()
expr_stmt|;
name|checkDebugLevelOnly
argument_list|()
expr_stmt|;
name|checkInfoOrDebugLevel
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkInfoLevelOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom5/logs"
operator|+
literal|"?_s=level==INFO"
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|href1
init|=
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|address
argument_list|,
literal|1
argument_list|,
literal|"next"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|entries
control|)
block|{
name|updateCounters
argument_list|(
name|readLogRecord
argument_list|(
name|e
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errorLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|infoLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|debugLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|traceLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|warningLevels
argument_list|)
expr_stmt|;
name|entries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|href1
argument_list|,
literal|0
argument_list|,
literal|"next"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkInfoOrDebugLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom5/logs"
operator|+
literal|"?_s=level==INFO,level==DEBUG"
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|href1
init|=
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|address
argument_list|,
literal|1
argument_list|,
literal|"next"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|entries
control|)
block|{
name|updateCounters
argument_list|(
name|readLogRecord
argument_list|(
name|e
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errorLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|infoLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|debugLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|traceLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|warningLevels
argument_list|)
expr_stmt|;
name|entries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|href2
init|=
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|href1
argument_list|,
literal|1
argument_list|,
literal|"next"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|entries
control|)
block|{
name|updateCounters
argument_list|(
name|readLogRecord
argument_list|(
name|e
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errorLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|infoLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|debugLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|traceLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|warningLevels
argument_list|)
expr_stmt|;
name|entries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|href2
argument_list|,
literal|0
argument_list|,
literal|"next"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDebugLevelOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/atom5/logs"
operator|+
literal|"?_s=level==DEBUG"
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|href1
init|=
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|address
argument_list|,
literal|1
argument_list|,
literal|"next"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|entries
control|)
block|{
name|updateCounters
argument_list|(
name|readLogRecord
argument_list|(
name|e
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errorLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|infoLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|debugLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|traceLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|warningLevels
argument_list|)
expr_stmt|;
name|entries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|href1
argument_list|,
literal|0
argument_list|,
literal|"next"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyStoragePages
parameter_list|(
name|String
name|startAddress
parameter_list|,
name|String
name|rel
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|String
name|nLogger
parameter_list|,
name|boolean
name|readOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|href1
init|=
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|startAddress
argument_list|,
literal|4
argument_list|,
name|rel
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|href1
argument_list|,
literal|4
argument_list|,
name|rel
argument_list|,
literal|"next"
operator|.
name|equals
argument_list|(
name|rel
argument_list|)
operator|&&
name|readOnly
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|entries
control|)
block|{
name|updateCounters
argument_list|(
name|readLogRecord
argument_list|(
name|e
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
name|resourceName
argument_list|,
name|nLogger
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Resource4"
operator|.
name|equals
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|throwables
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|resourceLogger
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|namedLogger
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fakyLogger
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyCounters
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyPages
parameter_list|(
name|String
name|startAddress
parameter_list|,
name|String
name|rel
parameter_list|,
name|int
name|firstValue
parameter_list|,
name|int
name|lastValue
parameter_list|,
name|String
name|nLogger
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|href1
init|=
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|startAddress
argument_list|,
name|firstValue
argument_list|,
name|rel
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|href2
init|=
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|href1
argument_list|,
literal|3
argument_list|,
name|rel
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|href2
argument_list|,
name|lastValue
argument_list|,
name|rel
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|entries
control|)
block|{
name|updateCounters
argument_list|(
name|readLogRecord
argument_list|(
name|e
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
literal|"Resource2"
argument_list|,
name|nLogger
argument_list|)
expr_stmt|;
block|}
name|verifyCounters
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyPagesWithQuery
parameter_list|(
name|String
name|startAddress
parameter_list|,
name|String
name|rel
parameter_list|,
name|int
name|firstValue
parameter_list|,
name|int
name|lastValue
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|String
name|nLogger
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|hrefRel
init|=
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|startAddress
argument_list|,
name|firstValue
argument_list|,
name|rel
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|hrefRel
operator|=
name|fillPagedEntries
argument_list|(
name|entries
argument_list|,
name|hrefRel
argument_list|,
name|lastValue
argument_list|,
name|rel
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|firstValue
operator|+
name|lastValue
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|entries
control|)
block|{
name|updateCounters
argument_list|(
name|readLogRecord
argument_list|(
name|e
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
literal|"Resource2"
argument_list|,
name|nLogger
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|errorLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|infoLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|debugLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|traceLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|warningLevels
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|fillPagedEntries
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|,
name|String
name|href
parameter_list|,
name|int
name|expected
parameter_list|,
name|String
name|rel
parameter_list|,
name|boolean
name|relExpected
parameter_list|)
block|{
name|Feed
name|feed
init|=
name|getFeed
argument_list|(
name|href
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|feed
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|Link
name|link
init|=
name|feed
operator|.
name|getLink
argument_list|(
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
name|relExpected
condition|)
block|{
name|assertNotNull
argument_list|(
name|link
argument_list|)
expr_stmt|;
return|return
name|link
operator|.
name|getHref
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|link
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Feed
name|getFeed
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|AtomFeedProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|wc
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|10000000
argument_list|)
expr_stmt|;
name|Feed
name|feed
init|=
name|wc
operator|.
name|accept
argument_list|(
literal|"application/atom+xml"
argument_list|)
operator|.
name|get
argument_list|(
name|Feed
operator|.
name|class
argument_list|)
decl_stmt|;
name|feed
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|feed
return|;
block|}
annotation|@
name|Ignore
annotation|@
name|Path
argument_list|(
literal|"/root"
argument_list|)
specifier|public
specifier|static
class|class
name|Resource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG1
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG2
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Resource
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"namedLogger"
argument_list|)
decl_stmt|;
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/log"
argument_list|)
specifier|public
name|void
name|doLogging
parameter_list|()
block|{
name|doLog
argument_list|(
name|Resource
operator|.
name|LOG1
argument_list|,
name|Resource
operator|.
name|LOG2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Path
argument_list|(
literal|"/paged"
argument_list|)
specifier|public
specifier|static
class|class
name|Resource2
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG1
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Resource2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG2
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Resource2
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"theNamedLogger"
argument_list|)
decl_stmt|;
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/log"
argument_list|)
specifier|public
name|void
name|doLogging
parameter_list|()
block|{
name|doLog
argument_list|(
name|Resource2
operator|.
name|LOG1
argument_list|,
name|Resource2
operator|.
name|LOG2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Path
argument_list|(
literal|"/storage"
argument_list|)
specifier|public
specifier|static
class|class
name|Resource3
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG1
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Resource3
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG2
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Resource3
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"theStorageLogger"
argument_list|)
decl_stmt|;
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/log"
argument_list|)
specifier|public
name|void
name|doLogging
parameter_list|()
block|{
name|doLog
argument_list|(
name|Resource3
operator|.
name|LOG1
argument_list|,
name|Resource3
operator|.
name|LOG2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
specifier|public
specifier|static
class|class
name|AtomServerReset
block|{
specifier|private
name|AtomPullServer
name|server
decl_stmt|;
specifier|public
name|void
name|setServer
parameter_list|(
name|AtomPullServer
name|s
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|POST
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|server
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
specifier|public
specifier|static
class|class
name|ExternalStorage
implements|implements
name|ReadableLogStorage
block|{
specifier|private
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
name|records
init|=
operator|new
name|LinkedList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ExternalStorage
parameter_list|()
block|{
name|addRecord
argument_list|(
literal|"org.apache.cxf.systest.jaxrs.JAXRSLoggingAtomPullSpringTest$Resource4"
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addRecord
argument_list|(
literal|"org.apache.cxf.systest.jaxrs.JAXRSLoggingAtomPullSpringTest$Resource4"
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addRecord
argument_list|(
literal|"org.apache.cxf.systest.jaxrs.JAXRSLoggingAtomPullSpringTest$Resource4"
argument_list|,
name|Level
operator|.
name|INFO
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addRecord
argument_list|(
literal|"org.apache.cxf.systest.jaxrs.JAXRSLoggingAtomPullSpringTest$Resource4"
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|()
argument_list|)
expr_stmt|;
name|addRecord
argument_list|(
literal|"org.apache.cxf.systest.jaxrs.JAXRSLoggingAtomPullSpringTest$Resource4"
argument_list|,
name|Level
operator|.
name|FINEST
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addRecord
argument_list|(
literal|"org.apache.cxf.systest.jaxrs.JAXRSLoggingAtomPullSpringTest$Resource4"
argument_list|,
name|Level
operator|.
name|FINER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addRecord
argument_list|(
literal|"readOnlyStorageLogger"
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addRecord
argument_list|(
literal|"readOnlyStorageLogger"
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRecord
parameter_list|(
name|String
name|loggerName
parameter_list|,
name|Level
name|level
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
name|lr
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|()
decl_stmt|;
name|lr
operator|.
name|setLoggerName
argument_list|(
name|loggerName
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setLevel
argument_list|(
name|LogLevel
operator|.
name|fromJUL
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setThrowable
argument_list|(
name|sw
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|records
operator|.
name|add
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
comment|// this storage is getting the records from a file log entries are added to
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|load
parameter_list|(
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
name|list
parameter_list|,
name|SearchCondition
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
name|condition
parameter_list|,
name|int
name|pageNumber
parameter_list|,
name|int
name|pageSize
parameter_list|)
block|{
name|int
name|loadFrom
init|=
name|pageNumber
operator|==
literal|1
condition|?
literal|0
else|:
name|pageSize
operator|*
operator|(
name|pageNumber
operator|-
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|loadFrom
init|;
name|i
operator|<
name|loadFrom
operator|+
name|pageSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|condition
operator|.
name|isMet
argument_list|(
name|records
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|records
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pageNumber
return|;
block|}
block|}
annotation|@
name|Ignore
specifier|public
specifier|static
class|class
name|Storage
implements|implements
name|ReadWriteLogStorage
block|{
specifier|private
specifier|static
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
name|records
init|=
operator|new
name|LinkedList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|int
name|load
parameter_list|(
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
name|list
parameter_list|,
name|SearchCondition
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
name|sc
parameter_list|,
name|int
name|pageNumber
parameter_list|,
name|int
name|pageSize
parameter_list|)
block|{
name|int
name|loadFrom
init|=
name|pageNumber
operator|==
literal|1
condition|?
literal|0
else|:
name|pageSize
operator|*
operator|(
name|pageNumber
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|loadFrom
operator|+
name|pageSize
operator|<=
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|records
operator|.
name|subList
argument_list|(
name|loadFrom
argument_list|,
name|loadFrom
operator|+
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pageNumber
return|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
name|list
parameter_list|)
block|{
name|records
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{         }
specifier|public
name|void
name|close
parameter_list|()
block|{         }
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|records
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
argument_list|>
name|getRecords
parameter_list|()
block|{
return|return
name|records
return|;
block|}
specifier|public
specifier|static
name|void
name|clearRecords
parameter_list|()
block|{
name|records
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|doLog
parameter_list|(
name|Logger
name|l1
parameter_list|,
name|Logger
name|l2
parameter_list|)
block|{
comment|// 3 severe, 1 warning, 1 info and 3 debug messages
comment|// 1
name|l1
operator|.
name|severe
argument_list|(
literal|"severe message"
argument_list|)
expr_stmt|;
comment|// 2
name|l1
operator|.
name|warning
argument_list|(
literal|"warning message"
argument_list|)
expr_stmt|;
comment|// 3
name|l1
operator|.
name|info
argument_list|(
literal|"info message"
argument_list|)
expr_stmt|;
name|LogRecord
name|r
init|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"fine message"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Resource4"
operator|.
name|equals
argument_list|(
name|l1
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|setLoggerName
argument_list|(
name|l1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setThrown
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"tadaam"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4
name|l1
operator|.
name|log
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
literal|"finer message with {0} and {1}"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setParameters
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"param1"
block|,
literal|"param2"
block|}
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLoggerName
argument_list|(
literal|"faky-logger"
argument_list|)
expr_stmt|;
comment|// 5
name|l1
operator|.
name|log
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// 6
name|l1
operator|.
name|finest
argument_list|(
literal|"finest message"
argument_list|)
expr_stmt|;
comment|// for LOG2 only 'warning' and above messages should be logged
comment|// 7
name|l2
operator|.
name|severe
argument_list|(
literal|"severe message"
argument_list|)
expr_stmt|;
comment|// 8
name|l2
operator|.
name|severe
argument_list|(
literal|"severe message2"
argument_list|)
expr_stmt|;
name|l2
operator|.
name|info
argument_list|(
literal|"info message - should not pass!"
argument_list|)
expr_stmt|;
name|l2
operator|.
name|finer
argument_list|(
literal|"finer message - should not pass!"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
name|readLogRecord
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
operator|)
name|context
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|new
name|StringReader
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|updateCounters
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
name|record
parameter_list|,
name|String
name|clsName
parameter_list|,
name|String
name|namedLoggerName
parameter_list|)
block|{
name|String
name|name
init|=
name|record
operator|.
name|getLoggerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
literal|"org.apache.cxf.systest.jaxrs.JAXRSLoggingAtomPullSpringTest$"
operator|+
name|clsName
operator|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|resourceLogger
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedLoggerName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|namedLogger
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"faky-logger"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fakyLogger
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|record
operator|.
name|getThrowable
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|throwables
operator|++
expr_stmt|;
block|}
name|LogLevel
name|level
init|=
name|record
operator|.
name|getLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|level
operator|==
name|LogLevel
operator|.
name|ERROR
condition|)
block|{
name|errorLevels
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
name|LogLevel
operator|.
name|DEBUG
condition|)
block|{
name|debugLevels
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
name|LogLevel
operator|.
name|TRACE
condition|)
block|{
name|traceLevels
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
name|LogLevel
operator|.
name|INFO
condition|)
block|{
name|infoLevels
operator|++
expr_stmt|;
block|}
else|else
block|{
name|warningLevels
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|resetCounters
parameter_list|()
block|{
name|fakyLogger
operator|=
literal|0
expr_stmt|;
name|namedLogger
operator|=
literal|0
expr_stmt|;
name|resourceLogger
operator|=
literal|0
expr_stmt|;
name|throwables
operator|=
literal|0
expr_stmt|;
name|errorLevels
operator|=
literal|0
expr_stmt|;
name|infoLevels
operator|=
literal|0
expr_stmt|;
name|debugLevels
operator|=
literal|0
expr_stmt|;
name|traceLevels
operator|=
literal|0
expr_stmt|;
name|warningLevels
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|verifyCounters
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|throwables
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|resourceLogger
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|namedLogger
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fakyLogger
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|errorLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|infoLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|debugLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|traceLevels
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|warningLevels
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

