begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|AbstractResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Testing: @Path("/echoxmlbookregex/{id : [5-9]{3,4}}")  */
end_comment

begin_class
specifier|public
class|class
name|JAXRSPathRegexTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|BookServer
operator|.
name|PORT
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PORT2
init|=
name|allocatePort
argument_list|(
name|JAXRSPathRegexTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractResourceInfo
operator|.
name|clearAllMaps
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|createStaticBus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWeblientPathRegularExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpointAddress
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore/echoxmlbookregex"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|endpointAddress
argument_list|)
decl_stmt|;
name|long
name|id
init|=
literal|5678
decl_stmt|;
name|Book
name|book
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|book
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// Successful
name|Book
name|echoedBook
init|=
name|client
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
name|id
argument_list|)
operator|.
name|post
argument_list|(
name|book
argument_list|,
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|echoedBook
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Too long
try|try
block|{
name|client
operator|.
name|reset
argument_list|()
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
literal|56789
argument_list|)
operator|.
name|post
argument_list|(
name|book
argument_list|,
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a failing regex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// Too short
try|try
block|{
name|client
operator|.
name|reset
argument_list|()
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
literal|56
argument_list|)
operator|.
name|post
argument_list|(
name|book
argument_list|,
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a failing regex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// Wrong digits
try|try
block|{
name|client
operator|.
name|reset
argument_list|()
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
literal|1234
argument_list|)
operator|.
name|post
argument_list|(
name|book
argument_list|,
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a failing regex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// Finally try another successful call
name|assertNotNull
argument_list|(
name|client
operator|.
name|reset
argument_list|()
operator|.
name|type
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
literal|8667
argument_list|)
operator|.
name|post
argument_list|(
name|book
argument_list|,
name|Book
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJaxrs20PathRegularExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpointAddress
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore/echoxmlbookregex"
decl_stmt|;
name|long
name|id
init|=
literal|5678
decl_stmt|;
name|Book
name|book
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|book
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// Successful
name|Client
name|client
init|=
name|ClientBuilder
operator|.
name|newClient
argument_list|()
decl_stmt|;
name|Book
name|echoedBook
init|=
name|client
operator|.
name|target
argument_list|(
name|endpointAddress
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
name|id
argument_list|)
operator|.
name|request
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|post
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
name|book
argument_list|,
literal|"application/xml"
argument_list|)
argument_list|,
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|echoedBook
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Too long
try|try
block|{
name|client
operator|.
name|target
argument_list|(
name|endpointAddress
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
literal|56789
argument_list|)
operator|.
name|request
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|post
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
name|book
argument_list|,
literal|"application/xml"
argument_list|)
argument_list|,
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a failing regex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// Too short
try|try
block|{
name|client
operator|.
name|target
argument_list|(
name|endpointAddress
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
literal|56
argument_list|)
operator|.
name|request
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|post
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
name|book
argument_list|,
literal|"application/xml"
argument_list|)
argument_list|,
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a failing regex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// Wrong digits
try|try
block|{
name|client
operator|.
name|target
argument_list|(
name|endpointAddress
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
literal|1234
argument_list|)
operator|.
name|request
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|post
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
name|book
argument_list|,
literal|"application/xml"
argument_list|)
argument_list|,
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a failing regex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// Finally try another successful call
name|client
operator|=
name|ClientBuilder
operator|.
name|newClient
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
operator|.
name|target
argument_list|(
name|endpointAddress
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
literal|8667
argument_list|)
operator|.
name|request
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|post
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
name|book
argument_list|,
literal|"application/xml"
argument_list|)
argument_list|,
name|Book
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

