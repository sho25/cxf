begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|Json
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonArrayBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonObjectBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/bookstore/"
argument_list|)
specifier|public
class|class
name|BookJsonStore
block|{
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Book
argument_list|>
name|books
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Book
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/books/{bookId}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|JsonObject
name|getBook
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"bookId"
argument_list|)
name|Long
name|id
parameter_list|)
block|{
specifier|final
name|Book
name|book
init|=
name|books
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|book
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|bookToJson
argument_list|(
name|book
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/books"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|JsonArray
name|getBooks
parameter_list|()
block|{
specifier|final
name|JsonArrayBuilder
name|builder
init|=
name|Json
operator|.
name|createArrayBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Book
name|book
range|:
name|books
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|bookToJson
argument_list|(
name|book
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|Response
name|addBook
parameter_list|(
annotation|@
name|Context
specifier|final
name|UriInfo
name|uriInfo
parameter_list|,
name|JsonObject
name|obj
parameter_list|)
block|{
specifier|final
name|Book
name|book
init|=
name|bookFromJson
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|books
operator|.
name|put
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|,
name|book
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|uriInfo
operator|.
name|getRequestUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/books"
argument_list|)
specifier|public
name|Response
name|deleteAll
parameter_list|()
block|{
name|books
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|JsonObject
name|bookToJson
parameter_list|(
specifier|final
name|Book
name|book
parameter_list|)
block|{
specifier|final
name|JsonObjectBuilder
name|builder
init|=
name|Json
operator|.
name|createObjectBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|book
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|book
operator|.
name|getChapters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|JsonArrayBuilder
name|chapters
init|=
name|Json
operator|.
name|createArrayBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|BookChapter
name|chapter
range|:
name|book
operator|.
name|getChapters
argument_list|()
control|)
block|{
name|chapters
operator|.
name|add
argument_list|(
name|Json
operator|.
name|createObjectBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
name|chapter
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"title"
argument_list|,
name|chapter
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
literal|"chapters"
argument_list|,
name|chapters
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|Book
name|bookFromJson
parameter_list|(
name|JsonObject
name|obj
parameter_list|)
block|{
specifier|final
name|Book
name|book
init|=
operator|new
name|Book
argument_list|(
name|obj
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|obj
operator|.
name|getInt
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|JsonArray
name|chapters
init|=
operator|(
name|JsonArray
operator|)
name|obj
operator|.
name|get
argument_list|(
literal|"chapters"
argument_list|)
decl_stmt|;
if|if
condition|(
name|chapters
operator|!=
literal|null
operator|&&
operator|!
name|chapters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|JsonObject
name|chapter
range|:
name|chapters
operator|.
name|getValuesAs
argument_list|(
name|JsonObject
operator|.
name|class
argument_list|)
control|)
block|{
name|book
operator|.
name|addChapter
argument_list|(
name|chapter
operator|.
name|getInt
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|chapter
operator|.
name|getString
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|book
return|;
block|}
block|}
end_class

end_unit

