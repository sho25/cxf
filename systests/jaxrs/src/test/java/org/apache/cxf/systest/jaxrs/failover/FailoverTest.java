begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|FailoverFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|FailoverTargetSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|RandomStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|RetryStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|SequentialStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ClientWebApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|ServerWebApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|BookStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests failover within a static cluster.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|FailoverTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|activeReplica1Started
init|=
literal|false
decl_stmt|;
name|boolean
name|activeReplica2Started
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|activeReplica1Started
condition|)
block|{
name|activeReplica1Started
operator|=
name|checkReplica
argument_list|(
name|Server
operator|.
name|ADDRESS2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|activeReplica2Started
condition|)
block|{
name|activeReplica2Started
operator|=
name|checkReplica
argument_list|(
name|Server
operator|.
name|ADDRESS3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|activeReplica1Started
operator|&&
name|activeReplica2Started
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|checkReplica
parameter_list|(
name|String
name|address
parameter_list|)
block|{
try|try
block|{
name|Response
name|r
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|)
operator|.
name|query
argument_list|(
literal|"_wadl"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|r
operator|.
name|getStatus
argument_list|()
operator|==
literal|200
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequentialStrategy
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequentialStrategyWithCustomTargetSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
literal|"resolver://info"
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequentialStrategyWithCustomTargetSelector2
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
literal|"resolver://info"
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequentialStrategyWebClient
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|)
decl_stmt|;
name|strategyTestWebClient
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomStrategyWebClient
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|)
decl_stmt|;
name|strategyTestWebClient
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomStrategy
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomStrategy2
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequentialStrategyWithDiffBaseAddresses
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSequentialStrategyWithDiffBaseAddresses2
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ServerWebApplicationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSequentialStrategyWithServerException
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|,
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ClientWebApplicationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSequentialStrategyFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|"http://localhost:8182/non-existent"
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequentialStrategyWithRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"http://localhost:8182/non-existent"
decl_stmt|;
name|String
name|address2
init|=
literal|"http://localhost:8182/non-existent2"
decl_stmt|;
name|FailoverFeature
name|feature
init|=
operator|new
name|FailoverFeature
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|alternateAddresses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|alternateAddresses
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|alternateAddresses
operator|.
name|add
argument_list|(
name|address2
argument_list|)
expr_stmt|;
name|CustomRetryStrategy
name|strategy
init|=
operator|new
name|CustomRetryStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setMaxNumberOfRetries
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|setAlternateAddresses
argument_list|(
name|alternateAddresses
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|BookStore
name|store
init|=
name|getBookStore
argument_list|(
name|address
argument_list|,
name|feature
argument_list|)
decl_stmt|;
try|try
block|{
name|store
operator|.
name|getBook
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClientWebApplicationException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|strategy
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|strategy
operator|.
name|getAddressCount
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|strategy
operator|.
name|getAddressCount
argument_list|(
name|address2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|FailoverFeature
name|getFeature
parameter_list|(
name|boolean
name|custom
parameter_list|,
name|boolean
name|random
parameter_list|,
name|String
modifier|...
name|address
parameter_list|)
block|{
name|FailoverFeature
name|feature
init|=
operator|new
name|FailoverFeature
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|alternateAddresses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|address
control|)
block|{
name|alternateAddresses
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|random
condition|)
block|{
name|SequentialStrategy
name|strategy
init|=
operator|new
name|SequentialStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setAlternateAddresses
argument_list|(
name|alternateAddresses
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RandomStrategy
name|strategy
init|=
operator|new
name|RandomStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setAlternateAddresses
argument_list|(
name|alternateAddresses
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|custom
condition|)
block|{
name|FailoverTargetSelector
name|selector
init|=
operator|new
name|ReplaceInitialAddressSelector
argument_list|()
decl_stmt|;
name|feature
operator|.
name|setTargetSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
block|}
return|return
name|feature
return|;
block|}
specifier|protected
name|BookStore
name|getBookStore
parameter_list|(
name|String
name|address
parameter_list|,
name|FailoverFeature
name|feature
parameter_list|)
throws|throws
name|Exception
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
name|createBean
argument_list|(
name|address
argument_list|,
name|feature
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setServiceClass
argument_list|(
name|BookStore
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|bean
operator|.
name|create
argument_list|(
name|BookStore
operator|.
name|class
argument_list|)
return|;
block|}
specifier|protected
name|WebClient
name|getWebClient
parameter_list|(
name|String
name|address
parameter_list|,
name|FailoverFeature
name|feature
parameter_list|)
throws|throws
name|Exception
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
name|createBean
argument_list|(
name|address
argument_list|,
name|feature
argument_list|)
decl_stmt|;
return|return
name|bean
operator|.
name|createWebClient
argument_list|()
return|;
block|}
specifier|protected
name|JAXRSClientFactoryBean
name|createBean
parameter_list|(
name|String
name|address
parameter_list|,
name|FailoverFeature
name|feature
parameter_list|)
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
operator|new
name|JAXRSClientFactoryBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractFeature
argument_list|>
argument_list|()
decl_stmt|;
name|features
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setFeatures
argument_list|(
name|features
argument_list|)
expr_stmt|;
return|return
name|bean
return|;
block|}
specifier|protected
name|void
name|strategyTest
parameter_list|(
name|String
name|inactiveReplica
parameter_list|,
name|FailoverFeature
name|feature
parameter_list|,
name|String
name|activeReplica1
parameter_list|,
name|String
name|activeReplica2
parameter_list|,
name|boolean
name|expectServerException
parameter_list|,
name|boolean
name|expectRandom
parameter_list|,
name|boolean
name|singleProxy
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|randomized
init|=
literal|false
decl_stmt|;
name|String
name|prevEndpoint
init|=
literal|null
decl_stmt|;
name|BookStore
name|bookStore
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|singleProxy
condition|)
block|{
name|bookStore
operator|=
name|getBookStore
argument_list|(
name|inactiveReplica
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|singleProxy
condition|)
block|{
name|bookStore
operator|=
name|getBookStore
argument_list|(
name|inactiveReplica
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
name|verifyStrategy
argument_list|(
name|bookStore
argument_list|,
name|expectRandom
condition|?
name|RandomStrategy
operator|.
name|class
else|:
name|SequentialStrategy
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|bookId
init|=
name|expectServerException
condition|?
literal|"9999"
else|:
literal|"123"
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Book
name|book
init|=
name|bookStore
operator|.
name|getBook
argument_list|(
name|bookId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected non-null response"
argument_list|,
name|book
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected id"
argument_list|,
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expectServerException
condition|)
block|{
comment|//String currEndpoint = getCurrentEndpointAddress(bookStore);
comment|//assertTrue(currEndpoint.equals(inactiveReplica));
throw|throw
name|error
throw|;
block|}
name|ex
operator|=
name|error
expr_stmt|;
block|}
name|String
name|currEndpoint
init|=
name|getCurrentEndpointAddress
argument_list|(
name|bookStore
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|currEndpoint
operator|.
name|equals
argument_list|(
name|inactiveReplica
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectRandom
condition|)
block|{
name|assertTrue
argument_list|(
name|currEndpoint
operator|.
name|equals
argument_list|(
name|activeReplica1
argument_list|)
operator|||
name|currEndpoint
operator|.
name|equals
argument_list|(
name|activeReplica2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|currEndpoint
operator|.
name|equals
argument_list|(
name|activeReplica1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectServerException
condition|)
block|{
name|assertNotNull
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|prevEndpoint
operator|==
literal|null
operator|||
name|currEndpoint
operator|.
name|equals
argument_list|(
name|prevEndpoint
argument_list|)
operator|)
condition|)
block|{
name|randomized
operator|=
literal|true
expr_stmt|;
block|}
name|prevEndpoint
operator|=
name|currEndpoint
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|singleProxy
condition|)
block|{
name|assertEquals
argument_list|(
literal|"unexpected random/sequential distribution of failovers"
argument_list|,
name|expectRandom
argument_list|,
name|randomized
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|strategyTestWebClient
parameter_list|(
name|String
name|inactiveReplica
parameter_list|,
name|FailoverFeature
name|feature
parameter_list|,
name|String
name|activeReplica1
parameter_list|,
name|String
name|activeReplica2
parameter_list|,
name|boolean
name|expectServerException
parameter_list|,
name|boolean
name|expectRandom
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|randomized
init|=
literal|false
decl_stmt|;
name|String
name|prevEndpoint
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|WebClient
name|bookStore
init|=
name|getWebClient
argument_list|(
name|inactiveReplica
argument_list|,
name|feature
argument_list|)
decl_stmt|;
name|verifyStrategy
argument_list|(
name|bookStore
argument_list|,
name|expectRandom
condition|?
name|RandomStrategy
operator|.
name|class
else|:
name|SequentialStrategy
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|bookId
init|=
name|expectServerException
condition|?
literal|"9999"
else|:
literal|"123"
decl_stmt|;
name|bookStore
operator|.
name|path
argument_list|(
literal|"bookstore/books"
argument_list|)
operator|.
name|path
argument_list|(
name|bookId
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Book
name|book
init|=
name|bookStore
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected non-null response"
argument_list|,
name|book
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected id"
argument_list|,
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expectServerException
condition|)
block|{
throw|throw
name|error
throw|;
block|}
name|ex
operator|=
name|error
expr_stmt|;
block|}
name|String
name|currEndpoint
init|=
name|getCurrentEndpointAddress
argument_list|(
name|bookStore
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|currEndpoint
operator|.
name|equals
argument_list|(
name|inactiveReplica
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectRandom
condition|)
block|{
name|assertTrue
argument_list|(
name|currEndpoint
operator|.
name|equals
argument_list|(
name|activeReplica1
argument_list|)
operator|||
name|currEndpoint
operator|.
name|equals
argument_list|(
name|activeReplica2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|currEndpoint
operator|.
name|equals
argument_list|(
name|activeReplica1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectServerException
condition|)
block|{
name|assertNotNull
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|prevEndpoint
operator|==
literal|null
operator|||
name|currEndpoint
operator|.
name|equals
argument_list|(
name|prevEndpoint
argument_list|)
operator|)
condition|)
block|{
name|randomized
operator|=
literal|true
expr_stmt|;
block|}
name|prevEndpoint
operator|=
name|currEndpoint
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"unexpected random/sequential distribution of failovers"
argument_list|,
name|expectRandom
argument_list|,
name|randomized
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getCurrentEndpointAddress
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
return|return
name|WebClient
operator|.
name|client
argument_list|(
name|client
argument_list|)
operator|.
name|getBaseURI
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|verifyStrategy
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
name|ConduitSelector
name|conduitSelector
init|=
name|WebClient
operator|.
name|getConfig
argument_list|(
name|proxy
argument_list|)
operator|.
name|getConduitSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|conduitSelector
operator|instanceof
name|FailoverTargetSelector
condition|)
block|{
name|Object
name|strategy
init|=
operator|(
operator|(
name|FailoverTargetSelector
operator|)
name|conduitSelector
operator|)
operator|.
name|getStrategy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected strategy"
argument_list|,
name|clz
operator|.
name|isInstance
argument_list|(
name|strategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected conduit selector: "
operator|+
name|conduitSelector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ReplaceInitialAddressSelector
extends|extends
name|FailoverTargetSelector
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|prepare
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|EndpointInfo
name|ei
init|=
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
name|Server
operator|.
name|ADDRESS3
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|)
expr_stmt|;
name|super
operator|.
name|prepare
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|requiresFailover
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CustomRetryStrategy
extends|extends
name|RetryStrategy
block|{
specifier|private
name|int
name|totalCount
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getNextAlternate
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|alternates
parameter_list|)
block|{
name|totalCount
operator|++
expr_stmt|;
name|T
name|next
init|=
name|super
operator|.
name|getNextAlternate
argument_list|(
name|alternates
argument_list|)
decl_stmt|;
name|String
name|address
init|=
operator|(
name|String
operator|)
name|next
decl_stmt|;
name|Integer
name|count
init|=
name|map
operator|.
name|get
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|address
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
name|next
return|;
block|}
specifier|public
name|int
name|getTotalCount
parameter_list|()
block|{
return|return
name|totalCount
operator|-
literal|2
return|;
block|}
specifier|public
name|int
name|getAddressCount
parameter_list|(
name|String
name|address
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|address
argument_list|)
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

