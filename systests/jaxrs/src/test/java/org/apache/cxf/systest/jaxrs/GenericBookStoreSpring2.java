begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|Logging
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"application/json"
block|,
literal|"application/xml"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
literal|"application/json"
block|,
literal|"application/xml"
block|}
argument_list|)
annotation|@
name|Logging
specifier|public
class|class
name|GenericBookStoreSpring2
extends|extends
name|AbstractBookStoreSpring
block|{
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/superbook"
argument_list|)
specifier|public
parameter_list|<
name|T
extends|extends
name|Book
parameter_list|>
name|T
name|echoSuperBook
parameter_list|(
name|T
name|book
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|SuperBook
operator|)
name|book
operator|)
operator|.
name|isSuperBook
argument_list|()
condition|)
block|{
return|return
name|book
return|;
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|400
argument_list|)
throw|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/superbooks"
argument_list|)
specifier|public
parameter_list|<
name|T
extends|extends
name|Book
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|echoSuperBookCollection
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|book
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|SuperBook
operator|)
name|book
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|isSuperBook
argument_list|()
condition|)
block|{
return|return
name|book
return|;
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|400
argument_list|)
throw|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/superbooktype"
argument_list|)
specifier|public
parameter_list|<
name|T
extends|extends
name|BookType
parameter_list|>
name|T
name|echoSuperBookType
parameter_list|(
name|T
name|book
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|SuperBook2
operator|)
name|book
operator|)
operator|.
name|isSuperBook
argument_list|()
condition|)
block|{
return|return
name|book
return|;
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|400
argument_list|)
throw|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/superbooktypes"
argument_list|)
specifier|public
parameter_list|<
name|T
extends|extends
name|BookType
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|echoSuperBookTypeCollection
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|book
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|SuperBook2
operator|)
name|book
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|isSuperBook
argument_list|()
condition|)
block|{
return|return
name|book
return|;
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|400
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

