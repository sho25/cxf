begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|FailoverFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|FailoverTargetSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|LoadDistributorFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|LoadDistributorTargetSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|SequentialStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|BookStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests failover within a static cluster.  */
end_comment

begin_class
specifier|public
class|class
name|LoadDistributorTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|activeReplica1Started
init|=
literal|false
decl_stmt|;
name|boolean
name|activeReplica2Started
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|activeReplica1Started
condition|)
block|{
name|activeReplica1Started
operator|=
name|checkReplica
argument_list|(
name|Server
operator|.
name|ADDRESS2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|activeReplica2Started
condition|)
block|{
name|activeReplica2Started
operator|=
name|checkReplica
argument_list|(
name|Server
operator|.
name|ADDRESS3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|activeReplica1Started
operator|&&
name|activeReplica2Started
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|checkReplica
parameter_list|(
name|String
name|address
parameter_list|)
block|{
try|try
block|{
name|Response
name|r
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|)
operator|.
name|query
argument_list|(
literal|"_wadl"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|r
operator|.
name|getStatus
argument_list|()
operator|==
literal|200
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleAltAddresses
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverFeature
name|feature
init|=
name|getFeature
argument_list|(
name|Server
operator|.
name|ADDRESS2
argument_list|,
name|Server
operator|.
name|ADDRESS3
argument_list|)
decl_stmt|;
name|strategyTest
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleAltAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|LoadDistributorFeature
name|feature
init|=
operator|new
name|LoadDistributorFeature
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|alternateAddresses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|alternateAddresses
operator|.
name|add
argument_list|(
name|Server
operator|.
name|ADDRESS2
argument_list|)
expr_stmt|;
name|SequentialStrategy
name|strategy
init|=
operator|new
name|SequentialStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setAlternateAddresses
argument_list|(
name|alternateAddresses
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|BookStore
name|bookStore
init|=
name|getBookStore
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|feature
argument_list|)
decl_stmt|;
name|Book
name|book
init|=
name|bookStore
operator|.
name|getBook
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected id"
argument_list|,
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|book
operator|=
name|bookStore
operator|.
name|getBook
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected id"
argument_list|,
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FailoverFeature
name|getFeature
parameter_list|(
name|String
modifier|...
name|address
parameter_list|)
block|{
name|FailoverFeature
name|feature
init|=
operator|new
name|FailoverFeature
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|alternateAddresses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|address
control|)
block|{
name|alternateAddresses
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|SequentialStrategy
name|strategy
init|=
operator|new
name|SequentialStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setAlternateAddresses
argument_list|(
name|alternateAddresses
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|LoadDistributorTargetSelector
name|selector
init|=
operator|new
name|LoadDistributorTargetSelector
argument_list|()
decl_stmt|;
name|selector
operator|.
name|setFailover
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setTargetSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
return|return
name|feature
return|;
block|}
specifier|protected
name|BookStore
name|getBookStore
parameter_list|(
name|String
name|address
parameter_list|,
name|FailoverFeature
name|feature
parameter_list|)
throws|throws
name|Exception
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
name|createBean
argument_list|(
name|address
argument_list|,
name|feature
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setServiceClass
argument_list|(
name|BookStore
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|bean
operator|.
name|create
argument_list|(
name|BookStore
operator|.
name|class
argument_list|)
return|;
block|}
specifier|protected
name|JAXRSClientFactoryBean
name|createBean
parameter_list|(
name|String
name|address
parameter_list|,
name|FailoverFeature
name|feature
parameter_list|)
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
operator|new
name|JAXRSClientFactoryBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractFeature
argument_list|>
argument_list|()
decl_stmt|;
name|features
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setFeatures
argument_list|(
name|features
argument_list|)
expr_stmt|;
return|return
name|bean
return|;
block|}
specifier|protected
name|void
name|strategyTest
parameter_list|(
name|String
name|initialAddress
parameter_list|,
name|FailoverFeature
name|feature
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Server
operator|.
name|ADDRESS1
argument_list|,
name|initialAddress
argument_list|)
expr_stmt|;
name|int
name|address2Count
init|=
literal|0
decl_stmt|;
name|int
name|address3Count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|BookStore
name|bookStore
init|=
name|getBookStore
argument_list|(
name|initialAddress
argument_list|,
name|feature
argument_list|)
decl_stmt|;
name|verifyStrategy
argument_list|(
name|bookStore
argument_list|,
name|SequentialStrategy
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|bookId
init|=
literal|"123"
decl_stmt|;
name|Book
name|book
init|=
name|bookStore
operator|.
name|getBook
argument_list|(
name|bookId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected non-null response"
argument_list|,
name|book
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected id"
argument_list|,
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|address
init|=
name|getCurrentEndpointAddress
argument_list|(
name|bookStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|Server
operator|.
name|ADDRESS2
operator|.
name|equals
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|address2Count
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Server
operator|.
name|ADDRESS3
operator|.
name|equals
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|address3Count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|address2Count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|address3Count
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getCurrentEndpointAddress
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
return|return
name|WebClient
operator|.
name|getConfig
argument_list|(
name|client
argument_list|)
operator|.
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
return|;
block|}
specifier|protected
name|void
name|verifyStrategy
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
name|ConduitSelector
name|conduitSelector
init|=
name|WebClient
operator|.
name|getConfig
argument_list|(
name|proxy
argument_list|)
operator|.
name|getConduitSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|conduitSelector
operator|instanceof
name|FailoverTargetSelector
condition|)
block|{
name|Object
name|strategy
init|=
operator|(
operator|(
name|FailoverTargetSelector
operator|)
name|conduitSelector
operator|)
operator|.
name|getStrategy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected strategy"
argument_list|,
name|clz
operator|.
name|isInstance
argument_list|(
name|strategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected conduit selector: "
operator|+
name|conduitSelector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

