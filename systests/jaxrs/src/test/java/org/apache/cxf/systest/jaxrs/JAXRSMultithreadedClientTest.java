begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JAXRSMultithreadedClientTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|BookServer
operator|.
name|PORT
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatefulWebClientWithCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|runWebClients
argument_list|(
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore"
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatefulWebClientThreadLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|runWebClients
argument_list|(
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore"
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatefulWebClientThreadLocalWithCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|runWebClients
argument_list|(
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore"
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleWebClient
parameter_list|()
throws|throws
name|Exception
block|{
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore/booksecho"
argument_list|)
decl_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|header
argument_list|(
literal|"CustomHeader"
argument_list|,
literal|"CustomValue"
argument_list|)
expr_stmt|;
name|runWebClients
argument_list|(
name|client
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|BookStore
name|proxy
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
argument_list|,
name|BookStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|runProxies
argument_list|(
name|proxy
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThreadSafeProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|BookStore
name|proxy
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
argument_list|,
name|BookStore
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|runProxies
argument_list|(
name|proxy
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThreadSafeProxyWithCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|BookStore
name|proxy
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
argument_list|,
name|BookStore
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|runProxies
argument_list|(
name|proxy
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThreadSafeSubProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|BookStore
name|proxy
init|=
name|JAXRSClientFactory
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
argument_list|,
name|BookStore
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|runProxies
argument_list|(
name|proxy
operator|.
name|echoThroughBookStoreSub
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runWebClients
parameter_list|(
name|WebClient
name|client
parameter_list|,
name|int
name|numberOfClients
parameter_list|,
name|boolean
name|threadSafe
parameter_list|,
name|boolean
name|stateCanBeChanged
parameter_list|)
throws|throws
name|Exception
block|{
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfClients
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numberOfClients
condition|;
name|i
operator|++
control|)
block|{
name|WebClient
name|wc
init|=
operator|!
name|threadSafe
condition|?
name|WebClient
operator|.
name|fromClient
argument_list|(
name|client
argument_list|)
else|:
name|client
decl_stmt|;
name|String
name|bookName
init|=
name|stateCanBeChanged
condition|?
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
else|:
literal|"TheBook"
decl_stmt|;
name|String
name|bookHeader
init|=
name|stateCanBeChanged
condition|?
literal|"value"
operator|+
name|i
else|:
literal|"CustomValue"
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|WebClientWorker
argument_list|(
name|wc
argument_list|,
name|bookName
argument_list|,
name|bookHeader
argument_list|,
name|startSignal
argument_list|,
name|doneSignal
argument_list|,
name|stateCanBeChanged
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|startSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|doneSignal
operator|.
name|await
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not all invocations have completed"
argument_list|,
literal|0
argument_list|,
name|doneSignal
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runProxies
parameter_list|(
name|BookStore
name|proxy
parameter_list|,
name|int
name|numberOfClients
parameter_list|,
name|boolean
name|threadSafe
parameter_list|,
name|boolean
name|stateCanBeChanged
parameter_list|)
throws|throws
name|Exception
block|{
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfClients
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numberOfClients
condition|;
name|i
operator|++
control|)
block|{
comment|// here we do a double copy : from proxy to web client and back to proxy
name|BookStore
name|bs
init|=
operator|!
name|threadSafe
condition|?
name|JAXRSClientFactory
operator|.
name|fromClient
argument_list|(
name|WebClient
operator|.
name|fromClient
argument_list|(
name|WebClient
operator|.
name|client
argument_list|(
name|proxy
argument_list|)
argument_list|)
argument_list|,
name|BookStore
operator|.
name|class
argument_list|)
else|:
name|proxy
decl_stmt|;
name|String
name|bookName
init|=
name|stateCanBeChanged
condition|?
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
else|:
literal|"TheBook"
decl_stmt|;
name|String
name|bookHeader
init|=
name|stateCanBeChanged
condition|?
literal|"value"
operator|+
name|i
else|:
literal|"CustomValue"
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|RootProxyWorker
argument_list|(
name|bs
argument_list|,
name|bookName
argument_list|,
name|bookHeader
argument_list|,
name|startSignal
argument_list|,
name|doneSignal
argument_list|,
name|stateCanBeChanged
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|startSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|doneSignal
operator|.
name|await
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not all invocations have completed"
argument_list|,
literal|0
argument_list|,
name|doneSignal
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
specifier|private
class|class
name|WebClientWorker
implements|implements
name|Runnable
block|{
specifier|private
name|WebClient
name|client
decl_stmt|;
specifier|private
name|String
name|bookName
decl_stmt|;
specifier|private
name|String
name|bookHeader
decl_stmt|;
specifier|private
name|CountDownLatch
name|startSignal
decl_stmt|;
specifier|private
name|CountDownLatch
name|doneSignal
decl_stmt|;
specifier|private
name|boolean
name|stateCanBeChanged
decl_stmt|;
specifier|public
name|WebClientWorker
parameter_list|(
name|WebClient
name|client
parameter_list|,
name|String
name|bookName
parameter_list|,
name|String
name|bookHeader
parameter_list|,
name|CountDownLatch
name|startSignal
parameter_list|,
name|CountDownLatch
name|doneSignal
parameter_list|,
name|boolean
name|stateCanBeChanged
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|bookName
operator|=
name|bookName
expr_stmt|;
name|this
operator|.
name|bookHeader
operator|=
name|bookHeader
expr_stmt|;
name|this
operator|.
name|startSignal
operator|=
name|startSignal
expr_stmt|;
name|this
operator|.
name|doneSignal
operator|=
name|doneSignal
expr_stmt|;
name|this
operator|.
name|stateCanBeChanged
operator|=
name|stateCanBeChanged
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stateCanBeChanged
condition|)
block|{
name|invoke
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doInvoke
argument_list|(
name|bookName
argument_list|,
name|bookHeader
argument_list|)
expr_stmt|;
block|}
block|}
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"WebClientWorker thread failed for "
operator|+
name|bookName
operator|+
literal|","
operator|+
name|bookHeader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|invoke
parameter_list|(
name|int
name|ind
parameter_list|)
throws|throws
name|Exception
block|{
name|client
operator|.
name|type
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
name|String
name|actualHeaderName
init|=
name|bookHeader
operator|+
name|ind
decl_stmt|;
name|String
name|actualBookName
init|=
name|bookName
operator|+
name|ind
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|client
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|map
operator|.
name|putSingle
argument_list|(
literal|"CustomHeader"
argument_list|,
name|actualHeaderName
argument_list|)
expr_stmt|;
name|client
operator|.
name|headers
argument_list|(
name|map
argument_list|)
operator|.
name|path
argument_list|(
literal|"booksecho"
argument_list|)
expr_stmt|;
name|doInvoke
argument_list|(
name|actualBookName
argument_list|,
name|actualHeaderName
argument_list|)
expr_stmt|;
comment|// reset current path
name|client
operator|.
name|back
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doInvoke
parameter_list|(
name|String
name|actualBookName
parameter_list|,
name|String
name|actualHeaderName
parameter_list|)
throws|throws
name|Exception
block|{
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|actualBookName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|actualHeaderName
argument_list|,
name|response
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"CustomHeader"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|responseValue
init|=
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|actualBookName
argument_list|,
name|responseValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
specifier|private
class|class
name|RootProxyWorker
implements|implements
name|Runnable
block|{
specifier|private
name|BookStore
name|proxy
decl_stmt|;
specifier|private
name|String
name|bookName
decl_stmt|;
specifier|private
name|String
name|bookHeader
decl_stmt|;
specifier|private
name|CountDownLatch
name|startSignal
decl_stmt|;
specifier|private
name|CountDownLatch
name|doneSignal
decl_stmt|;
specifier|private
name|boolean
name|stateCanBeChanged
decl_stmt|;
specifier|public
name|RootProxyWorker
parameter_list|(
name|BookStore
name|proxy
parameter_list|,
name|String
name|bookName
parameter_list|,
name|String
name|bookHeader
parameter_list|,
name|CountDownLatch
name|startSignal
parameter_list|,
name|CountDownLatch
name|doneSignal
parameter_list|,
name|boolean
name|stateCanBeChanged
parameter_list|)
block|{
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
name|this
operator|.
name|bookName
operator|=
name|bookName
expr_stmt|;
name|this
operator|.
name|bookHeader
operator|=
name|bookHeader
expr_stmt|;
name|this
operator|.
name|startSignal
operator|=
name|startSignal
expr_stmt|;
name|this
operator|.
name|doneSignal
operator|=
name|doneSignal
expr_stmt|;
name|this
operator|.
name|stateCanBeChanged
operator|=
name|stateCanBeChanged
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|invoke
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"WebClientWorker thread failed for "
operator|+
name|bookName
operator|+
literal|","
operator|+
name|bookHeader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|invoke
parameter_list|(
name|int
name|ind
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|actualHeaderName
init|=
name|bookHeader
operator|+
name|ind
decl_stmt|;
name|String
name|actualBookName
init|=
name|bookName
operator|+
name|ind
decl_stmt|;
if|if
condition|(
name|stateCanBeChanged
condition|)
block|{
name|Client
name|c
init|=
name|WebClient
operator|.
name|client
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|c
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|map
operator|.
name|putSingle
argument_list|(
literal|"CustomHeader"
argument_list|,
name|actualHeaderName
argument_list|)
expr_stmt|;
name|c
operator|.
name|headers
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|echoBookNameAndHeader2
argument_list|(
name|actualBookName
argument_list|)
expr_stmt|;
name|verifyResponse
argument_list|(
name|c
operator|.
name|getResponse
argument_list|()
argument_list|,
name|actualBookName
argument_list|,
name|actualHeaderName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyResponse
argument_list|(
name|proxy
operator|.
name|echoBookNameAndHeader
argument_list|(
name|actualHeaderName
argument_list|,
name|actualBookName
argument_list|)
argument_list|,
name|actualBookName
argument_list|,
name|actualHeaderName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyResponse
parameter_list|(
name|Response
name|response
parameter_list|,
name|String
name|actualBookName
parameter_list|,
name|String
name|actualHeaderName
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|actualHeaderName
argument_list|,
name|response
operator|.
name|getMetadata
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"CustomHeader"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|responseValue
init|=
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|actualBookName
argument_list|,
name|responseValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

