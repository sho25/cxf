begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientResponseContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientResponseFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|InvocationCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ReaderInterceptorContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|WriterInterceptorContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JAXRS20ClientServerBookTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|BookServer20
operator|.
name|PORT
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServer20
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBook
parameter_list|()
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore/bookheaders/simple"
decl_stmt|;
name|doTestBook
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBookAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore/bookheaders/simple"
decl_stmt|;
name|doTestBookAsync
argument_list|(
name|address
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBookAsyncInvoker
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore/bookheaders/simple"
decl_stmt|;
name|doTestBookAsync
argument_list|(
name|address
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBookWrongPath
parameter_list|()
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/wrongpath"
decl_stmt|;
name|doTestBook
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBookWrongPathAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/wrongpath"
decl_stmt|;
name|doTestBookAsync
argument_list|(
name|address
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestBook
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientHeaderRequestFilter
argument_list|()
argument_list|)
expr_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientHeaderResponseFilter
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|providers
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|wc
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|1000000L
argument_list|)
expr_stmt|;
name|Book
name|book
init|=
name|wc
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|124L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|wc
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"OK"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Response"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"custom"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Custom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"simple"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Simple"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"serverWrite"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"ServerWriterInterceptor"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost/redirect"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestBookAsync
parameter_list|(
name|String
name|address
parameter_list|,
name|boolean
name|asyncInvoker
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientHeaderRequestFilter
argument_list|()
argument_list|)
expr_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientHeaderResponseFilter
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|providers
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|wc
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|1000000L
argument_list|)
expr_stmt|;
specifier|final
name|Holder
argument_list|<
name|Book
argument_list|>
name|holder
init|=
operator|new
name|Holder
argument_list|<
name|Book
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|InvocationCallback
argument_list|<
name|Book
argument_list|>
name|callback
init|=
operator|new
name|InvocationCallback
argument_list|<
name|Book
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|completed
parameter_list|(
name|Book
name|response
parameter_list|)
block|{
name|holder
operator|.
name|value
operator|=
name|response
expr_stmt|;
block|}
specifier|public
name|void
name|failed
parameter_list|(
name|ClientException
name|error
parameter_list|)
block|{             }
block|}
decl_stmt|;
name|Future
argument_list|<
name|Book
argument_list|>
name|future
init|=
name|asyncInvoker
condition|?
name|wc
operator|.
name|async
argument_list|()
operator|.
name|get
argument_list|(
name|callback
argument_list|)
else|:
name|wc
operator|.
name|get
argument_list|(
name|callback
argument_list|)
decl_stmt|;
name|Book
name|book
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|book
argument_list|,
name|holder
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|124L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|wc
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"OK"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Response"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"custom"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Custom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"simple"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Simple"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"serverWrite"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"ServerWriterInterceptor"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost/redirect"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientFiltersLocalResponse
parameter_list|()
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstores"
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientCacheRequestFilter
argument_list|()
argument_list|)
expr_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientHeaderResponseFilter
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|providers
argument_list|)
decl_stmt|;
name|Book
name|theBook
init|=
operator|new
name|Book
argument_list|(
literal|"Echo"
argument_list|,
literal|123L
argument_list|)
decl_stmt|;
name|Response
name|r
init|=
name|wc
operator|.
name|post
argument_list|(
name|theBook
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost/redirect"
argument_list|,
name|r
operator|.
name|getHeaderString
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|Book
name|responseBook
init|=
name|r
operator|.
name|readEntity
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|theBook
argument_list|,
name|responseBook
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostBook
parameter_list|()
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/bookstore/bookheaders/simple"
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientHeaderRequestFilter
argument_list|()
argument_list|)
expr_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientHeaderResponseFilter
argument_list|()
argument_list|)
expr_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientReaderInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|ClientWriterInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|providers
argument_list|)
decl_stmt|;
name|WebClient
operator|.
name|getConfig
argument_list|(
name|wc
argument_list|)
operator|.
name|getHttpConduit
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
literal|1000000L
argument_list|)
expr_stmt|;
name|Book
name|book
init|=
name|wc
operator|.
name|post
argument_list|(
operator|new
name|Book
argument_list|(
literal|"Book"
argument_list|,
literal|126L
argument_list|)
argument_list|,
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|124L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|wc
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"OK"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Response"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"custom"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Custom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"simple"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Simple"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"serverRead"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"ServerReaderInterceptor"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"serverWrite"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"ServerWriterInterceptor"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"clientWrite"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"ClientWriterInterceptor"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"clientRead"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"ClientReaderInterceptor"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost/redirect"
argument_list|,
name|response
operator|.
name|getHeaderString
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ClientCacheRequestFilter
implements|implements
name|ClientRequestFilter
block|{
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|ClientRequestContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|abortWith
argument_list|(
name|Response
operator|.
name|status
argument_list|(
literal|201
argument_list|)
operator|.
name|entity
argument_list|(
name|context
operator|.
name|getEntity
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ClientHeaderRequestFilter
implements|implements
name|ClientRequestFilter
block|{
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|ClientRequestContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|getHeaders
argument_list|()
operator|.
name|putSingle
argument_list|(
literal|"Simple"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ClientHeaderResponseFilter
implements|implements
name|ClientResponseFilter
block|{
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|ClientRequestContext
name|reqContext
parameter_list|,
name|ClientResponseContext
name|respContext
parameter_list|)
throws|throws
name|IOException
block|{
name|respContext
operator|.
name|getHeaders
argument_list|()
operator|.
name|putSingle
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|,
literal|"http://localhost/redirect"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ClientReaderInterceptor
implements|implements
name|ReaderInterceptor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|aroundReadFrom
parameter_list|(
name|ReaderInterceptorContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|context
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
literal|"ClientReaderInterceptor"
argument_list|,
literal|"clientRead"
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|proceed
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ClientWriterInterceptor
implements|implements
name|WriterInterceptor
block|{
annotation|@
name|Override
specifier|public
name|void
name|aroundWriteTo
parameter_list|(
name|WriterInterceptorContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|context
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
literal|"ClientWriterInterceptor"
argument_list|,
literal|"clientWrite"
argument_list|)
expr_stmt|;
name|context
operator|.
name|proceed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

