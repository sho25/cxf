begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|ConnectionFactoryFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_comment
comment|/**  * Base class for JMS tests that use the an in VM ConnectionFactory.  *  *  The idea is to start the bus and services in the @BeforeClass of the test.  *  In each test method clients are created and marked for removal.  *  The base class then makes sure that all clients are closed after each test method  *  and that the bus is shut down after the whole test class.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractVmJMSTest
block|{
specifier|protected
specifier|static
name|Bus
name|bus
decl_stmt|;
specifier|protected
specifier|static
name|ConnectionFactoryFeature
name|cff
decl_stmt|;
specifier|protected
specifier|static
name|ConnectionFactory
name|cf
decl_stmt|;
specifier|protected
specifier|static
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|closeableResources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|startBusAndJMS
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
parameter_list|)
block|{
name|String
name|brokerURI
init|=
literal|"vm://"
operator|+
name|testClass
operator|.
name|getName
argument_list|()
operator|+
literal|"?broker.persistent=false&broker.useJmx=false"
decl_stmt|;
name|startBusAndJMS
argument_list|(
name|brokerURI
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|brokerURI
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|startBusAndJMS
parameter_list|(
name|String
name|brokerURI
parameter_list|)
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|cf1
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerURI
argument_list|)
decl_stmt|;
name|RedeliveryPolicy
name|redeliveryPolicy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|redeliveryPolicy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|redeliveryPolicy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|cf1
operator|.
name|setRedeliveryPolicy
argument_list|(
name|redeliveryPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|cf
operator|=
operator|new
name|PooledConnectionFactory
argument_list|(
name|cf1
argument_list|)
expr_stmt|;
name|cff
operator|=
operator|new
name|ConnectionFactoryFeature
argument_list|(
name|cf
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|RedeliveryPolicy
name|redeliveryPolicy
parameter_list|()
block|{
name|RedeliveryPolicy
name|redeliveryPolicy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|redeliveryPolicy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|redeliveryPolicy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
name|redeliveryPolicy
return|;
block|}
specifier|public
specifier|static
name|void
name|startBroker
parameter_list|(
name|String
name|brokerURI
parameter_list|)
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|MemoryPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setTmpDataDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"./target"
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|brokerURI
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|markForClose
parameter_list|(
name|T
name|resource
parameter_list|)
block|{
name|closeableResources
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopClosables
parameter_list|()
block|{
for|for
control|(
name|Object
name|proxy
range|:
name|closeableResources
control|)
block|{
if|if
condition|(
name|proxy
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|proxy
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
name|closeableResources
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopBus
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bus
operator|=
literal|null
expr_stmt|;
name|cf
operator|=
literal|null
expr_stmt|;
name|cff
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|URL
name|getWSDLURL
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|u
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"WSDL classpath resource not found "
operator|+
name|s
argument_list|)
throw|;
block|}
return|return
name|u
return|;
block|}
specifier|public
specifier|static
name|void
name|publish
parameter_list|(
name|String
name|address
parameter_list|,
name|Object
name|impl
parameter_list|)
block|{
name|EndpointImpl
name|ep
init|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|create
argument_list|(
name|impl
argument_list|)
decl_stmt|;
name|ep
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|ep
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|cff
argument_list|)
expr_stmt|;
name|ep
operator|.
name|publish
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|publish
parameter_list|(
name|Object
name|impl
parameter_list|)
block|{
name|publish
argument_list|(
literal|null
argument_list|,
name|impl
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

