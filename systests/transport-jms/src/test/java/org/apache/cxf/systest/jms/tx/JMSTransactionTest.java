begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jms
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQXAConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jms
operator|.
name|pool
operator|.
name|JcaPooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|ConfiguredBeanLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jms
operator|.
name|AbstractVmJMSTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|ConnectionFactoryFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|spec
operator|.
name|JMSSpecConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|util
operator|.
name|JMSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|transaction
operator|.
name|manager
operator|.
name|GeronimoTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_doc_lit
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JMSTransactionTest
extends|extends
name|AbstractVmJMSTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_ADDRESS
init|=
literal|"jms:queue:greeter.queue.tx?receivetTimeOut=5000&sessionTransacted=true"
decl_stmt|;
specifier|private
specifier|static
name|EndpointImpl
name|endpoint
decl_stmt|;
specifier|private
specifier|static
name|TransactionManager
name|transactionManager
decl_stmt|;
specifier|public
specifier|static
name|void
name|startBusAndJMS
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
parameter_list|)
block|{
name|String
name|brokerURI
init|=
literal|"vm://"
operator|+
name|testClass
operator|.
name|getName
argument_list|()
operator|+
literal|"?broker.persistent=false&broker.useJmx=false"
decl_stmt|;
name|startBusAndJMS
argument_list|(
name|brokerURI
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|brokerURI
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|startBusAndJMS
parameter_list|(
name|String
name|brokerURI
parameter_list|)
block|{
try|try
block|{
name|transactionManager
operator|=
operator|new
name|GeronimoTransactionManager
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XAException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
expr_stmt|;
name|registerTransactionManager
argument_list|()
expr_stmt|;
name|ActiveMQXAConnectionFactory
name|cf1
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|brokerURI
argument_list|)
decl_stmt|;
name|cf1
operator|.
name|setRedeliveryPolicy
argument_list|(
name|redeliveryPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|JcaPooledConnectionFactory
name|pcf
init|=
operator|new
name|JcaPooledConnectionFactory
argument_list|()
decl_stmt|;
name|pcf
operator|.
name|setTransactionManager
argument_list|(
name|transactionManager
argument_list|)
expr_stmt|;
name|pcf
operator|.
name|setConnectionFactory
argument_list|(
name|cf1
argument_list|)
expr_stmt|;
name|cf
operator|=
name|pcf
expr_stmt|;
name|cff
operator|=
operator|new
name|ConnectionFactoryFeature
argument_list|(
name|pcf
argument_list|)
expr_stmt|;
block|}
comment|/**      * For real world scenarios create a bean for the transaction manager in blueprint or spring      */
specifier|private
specifier|static
name|void
name|registerTransactionManager
parameter_list|()
block|{
name|ConfiguredBeanLocator
name|cbl
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ConfiguredBeanLocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|MyBeanLocator
name|mybl
init|=
operator|new
name|MyBeanLocator
argument_list|(
name|cbl
argument_list|)
decl_stmt|;
name|mybl
operator|.
name|register
argument_list|(
literal|"tm"
argument_list|,
name|transactionManager
argument_list|)
expr_stmt|;
name|bus
operator|.
name|setExtension
argument_list|(
name|mybl
argument_list|,
name|ConfiguredBeanLocator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|startBusAndJMS
argument_list|(
name|JMSTransactionTest
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//startBusAndJMS("tcp://localhost:61616");
name|endpoint
operator|=
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
operator|new
name|GreeterImplWithTransaction
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setAddress
argument_list|(
name|SERVICE_ADDRESS
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setFeatures
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|cff
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|publish
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|clearProperty
parameter_list|()
block|{
name|endpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Request reply should not cause roll backs      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testNoTransactionRequestReply
parameter_list|()
throws|throws
name|Exception
block|{
name|Greeter
name|greeter
init|=
name|markForClose
argument_list|(
name|createGreeterProxy
argument_list|()
argument_list|)
decl_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Good guy"
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Bad guy"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Fine
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionOneWay
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Queue
name|queue
init|=
name|JMSUtil
operator|.
name|createQueue
argument_list|(
name|conn
argument_list|,
literal|"ActiveMQ.DLQ"
argument_list|)
decl_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"DLQ should be empty"
argument_list|,
name|conn
argument_list|,
name|queue
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|markForClose
argument_list|(
name|createGreeterProxy
argument_list|()
argument_list|)
decl_stmt|;
comment|// Should be processed normally
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|GreeterImplWithTransaction
operator|.
name|GOOD_GUY
argument_list|)
expr_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"DLQ should be empty"
argument_list|,
name|conn
argument_list|,
name|queue
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// Should cause rollback, redelivery and in the end the message should go to the dead letter queue
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|GreeterImplWithTransaction
operator|.
name|BAD_GUY
argument_list|)
expr_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"Request should be put into DLQ"
argument_list|,
name|conn
argument_list|,
name|queue
argument_list|,
literal|1
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Greeter
name|createGreeterProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxWsProxyFactoryBean
name|factory
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|cff
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setTransportId
argument_list|(
name|JMSSpecConstants
operator|.
name|SOAP_JMS_SPECIFICATION_TRANSPORTID
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setServiceClass
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setAddress
argument_list|(
name|SERVICE_ADDRESS
argument_list|)
expr_stmt|;
return|return
operator|(
name|Greeter
operator|)
name|markForClose
argument_list|(
name|factory
operator|.
name|create
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertNumMessagesInQueue
parameter_list|(
name|String
name|message
parameter_list|,
name|Connection
name|connection
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|int
name|expectedNum
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|actualNum
decl_stmt|;
do|do
block|{
name|actualNum
operator|=
name|JMSUtil
operator|.
name|getNumMessages
argument_list|(
name|connection
argument_list|,
name|queue
argument_list|)
expr_stmt|;
comment|//System.out.println("Messages in queue " + queue.getQueueName() + ": " + actualNum
comment|//                   + ", expecting: " + expectedNum);
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|<
name|timeout
operator|)
operator|&&
name|expectedNum
operator|!=
name|actualNum
condition|)
do|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|message
operator|+
literal|" -> number of messages"
argument_list|,
name|expectedNum
argument_list|,
name|actualNum
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

