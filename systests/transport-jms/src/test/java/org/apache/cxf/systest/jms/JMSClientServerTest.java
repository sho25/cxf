begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|AddressingFeature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|TibcoSoapActionInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|LoggingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|LoggingInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|LoggingOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|BadRecordLitFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HWByteMsgService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldOneWayPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldOneWayQueueService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldPubSubPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldPubSubService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldQueueDecoupledOneWaysService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|NoSuchCodeLitFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|EmbeddedJMSBrokerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSConfigFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSMessageHeadersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|util
operator|.
name|TestReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_doc_lit
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_doc_lit
operator|.
name|PingMeFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_doc_lit
operator|.
name|SOAPService2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_doc_lit
operator|.
name|SOAPService7
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
specifier|public
class|class
name|JMSClientServerTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|allocatePort
argument_list|(
name|JMSClientServerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|EmbeddedJMSBrokerLauncher
name|broker
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|wsdlStrings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|EmbeddedJMSBrokerLauncher
argument_list|(
literal|"tcp://localhost:"
operator|+
name|PORT
argument_list|)
expr_stmt|;
name|launchServer
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|launchServer
argument_list|(
operator|new
name|Server
argument_list|(
name|broker
argument_list|)
argument_list|)
expr_stmt|;
name|createStaticBus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
name|getStaticBus
argument_list|()
argument_list|,
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|wsdlStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|URL
name|getWSDLURL
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|u
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"WSDL classpath resource not found "
operator|+
name|s
argument_list|)
throw|;
block|}
name|String
name|wsdlString
init|=
name|u
operator|.
name|toString
argument_list|()
operator|.
name|intern
argument_list|()
decl_stmt|;
name|wsdlStrings
operator|.
name|add
argument_list|(
name|wsdlString
argument_list|)
expr_stmt|;
name|broker
operator|.
name|updateWsdl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|wsdlString
argument_list|)
expr_stmt|;
return|return
name|u
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SOAPService2"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SoapPort2"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/hello_world_doc_lit.wsdl"
argument_list|)
decl_stmt|;
name|SOAPService2
name|service
init|=
operator|new
name|SOAPService2
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|greeter
argument_list|)
decl_stmt|;
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TibcoSoapActionInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"test String"
argument_list|)
expr_stmt|;
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|pingMe
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown FaultException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PingMeFault
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|docBasicJmsDestinationTest
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SOAPService6"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SoapPort6"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/hello_world_doc_lit.wsdl"
argument_list|)
decl_stmt|;
name|SOAPService2
name|service
init|=
operator|new
name|SOAPService2
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"test String"
argument_list|)
expr_stmt|;
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Milestone-"
operator|+
name|idx
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bonjour"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|pingMe
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown FaultException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PingMeFault
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testAsyncCall
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPort"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|HelloWorldService
name|service
init|=
operator|new
name|HelloWorldService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|HelloWorldPortType
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
class|class
name|TestAsyncHandler
implements|implements
name|AsyncHandler
argument_list|<
name|String
argument_list|>
block|{
name|String
name|expected
decl_stmt|;
name|TestAsyncHandler
parameter_list|(
name|String
name|x
parameter_list|)
block|{
name|expected
operator|=
name|x
expr_stmt|;
block|}
specifier|public
name|String
name|getExpected
parameter_list|()
block|{
return|return
name|expected
return|;
block|}
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Response
argument_list|<
name|String
argument_list|>
name|response
parameter_list|)
block|{
try|try
block|{
name|Thread
name|thread2
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|thread
argument_list|,
name|thread2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello "
operator|+
name|expected
argument_list|,
name|response
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|TestAsyncHandler
name|h1
init|=
operator|new
name|TestAsyncHandler
argument_list|(
literal|"Homer"
argument_list|)
decl_stmt|;
name|TestAsyncHandler
name|h2
init|=
operator|new
name|TestAsyncHandler
argument_list|(
literal|"Maggie"
argument_list|)
decl_stmt|;
name|TestAsyncHandler
name|h3
init|=
operator|new
name|TestAsyncHandler
argument_list|(
literal|"Bart"
argument_list|)
decl_stmt|;
name|TestAsyncHandler
name|h4
init|=
operator|new
name|TestAsyncHandler
argument_list|(
literal|"Lisa"
argument_list|)
decl_stmt|;
name|TestAsyncHandler
name|h5
init|=
operator|new
name|TestAsyncHandler
argument_list|(
literal|"Marge"
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f1
init|=
name|greeter
operator|.
name|greetMeAsync
argument_list|(
literal|"Santa's Little Helper"
argument_list|,
operator|new
name|TestAsyncHandler
argument_list|(
literal|"Santa's Little Helper"
argument_list|)
argument_list|)
decl_stmt|;
name|f1
operator|.
name|get
argument_list|()
expr_stmt|;
name|f1
operator|=
name|greeter
operator|.
name|greetMeAsync
argument_list|(
literal|"PauseForTwoSecs Santa's Little Helper"
argument_list|,
operator|new
name|TestAsyncHandler
argument_list|(
literal|"Santa's Little Helper"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|f1
operator|=
name|greeter
operator|.
name|greetMeAsync
argument_list|(
literal|"PauseForTwoSecs "
operator|+
name|h1
operator|.
name|getExpected
argument_list|()
argument_list|,
name|h1
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f2
init|=
name|greeter
operator|.
name|greetMeAsync
argument_list|(
literal|"PauseForTwoSecs "
operator|+
name|h2
operator|.
name|getExpected
argument_list|()
argument_list|,
name|h2
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f3
init|=
name|greeter
operator|.
name|greetMeAsync
argument_list|(
literal|"PauseForTwoSecs "
operator|+
name|h3
operator|.
name|getExpected
argument_list|()
argument_list|,
name|h3
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f4
init|=
name|greeter
operator|.
name|greetMeAsync
argument_list|(
literal|"PauseForTwoSecs "
operator|+
name|h4
operator|.
name|getExpected
argument_list|()
argument_list|,
name|h4
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f5
init|=
name|greeter
operator|.
name|greetMeAsync
argument_list|(
literal|"PauseForTwoSecs "
operator|+
name|h5
operator|.
name|getExpected
argument_list|()
argument_list|,
name|h5
argument_list|)
decl_stmt|;
name|long
name|mid
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello "
operator|+
name|h1
operator|.
name|getExpected
argument_list|()
argument_list|,
name|f1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello "
operator|+
name|h2
operator|.
name|getExpected
argument_list|()
argument_list|,
name|f2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello "
operator|+
name|h3
operator|.
name|getExpected
argument_list|()
argument_list|,
name|f3
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello "
operator|+
name|h4
operator|.
name|getExpected
argument_list|()
argument_list|,
name|f4
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello "
operator|+
name|h5
operator|.
name|getExpected
argument_list|()
argument_list|,
name|f5
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Time too long: "
operator|+
operator|(
name|mid
operator|-
name|start
operator|)
argument_list|,
operator|(
name|mid
operator|-
name|start
operator|)
operator|<
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|end
operator|-
name|mid
operator|)
operator|>
literal|1000
argument_list|)
expr_stmt|;
name|f1
operator|=
literal|null
expr_stmt|;
name|f2
operator|=
literal|null
expr_stmt|;
name|f3
operator|=
literal|null
expr_stmt|;
name|f4
operator|=
literal|null
expr_stmt|;
name|f5
operator|=
literal|null
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|greeter
operator|=
literal|null
expr_stmt|;
name|service
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPort"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|HelloWorldService
name|service
init|=
operator|new
name|HelloWorldService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
name|HelloWorldPortType
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|testRpcLitFault
argument_list|(
literal|"BadRecordLitFault"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown BadRecoedLitFault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRecordLitFault
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|greeter
operator|.
name|testRpcLitFault
argument_list|(
literal|"NoSuchCodeLitFault"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown NoSuchCodeLitFault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchCodeLitFault
name|nslf
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HWByteMsgService"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|HWByteMsgService
name|service
init|=
operator|new
name|HWByteMsgService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
name|HelloWorldPortType
name|greeter
init|=
name|service
operator|.
name|getHWSByteMsgPort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneWayTopicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPubSubService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPubSubPort"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|HelloWorldPubSubService
name|service
init|=
operator|new
name|HelloWorldPubSubService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|HelloWorldPubSubPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPubSubPort
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"JMS:PubSub:Milestone-"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
comment|// Give some time to complete one-way calls.
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJmsDestTopicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"JmsDestinationPubSubService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"JmsDestinationPubSubPort"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|HelloWorldPubSubService
name|service
init|=
operator|new
name|HelloWorldPubSubService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|HelloWorldPubSubPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPubSubPort
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"JMS:PubSub:Milestone-"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
comment|// Give some time to complete one-way calls.
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionsWithinSpring
parameter_list|()
throws|throws
name|Exception
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClassPathXmlApplicationContext
name|ctx
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/org/apache/cxf/systest/jms/JMSClients.xml"
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|wsdlString2
init|=
literal|"classpath:wsdl/jms_test.wsdl"
decl_stmt|;
name|wsdlStrings
operator|.
name|add
argument_list|(
name|wsdlString2
argument_list|)
expr_stmt|;
name|broker
operator|.
name|updateWsdl
argument_list|(
operator|(
name|Bus
operator|)
name|ctx
operator|.
name|getBean
argument_list|(
literal|"cxf"
argument_list|)
argument_list|,
name|wsdlString2
argument_list|)
expr_stmt|;
name|HelloWorldPortType
name|greeter
init|=
operator|(
name|HelloWorldPortType
operator|)
name|ctx
operator|.
name|getBean
argument_list|(
literal|"jmsRPCClient"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
literal|"Hello Milestone-"
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bonjour"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|testRpcLitFault
argument_list|(
literal|"BadRecordLitFault"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown BadRecoedLitFault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRecordLitFault
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|greeter
operator|.
name|testRpcLitFault
argument_list|(
literal|"NoSuchCodeLitFault"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown NoSuchCodeLitFault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchCodeLitFault
name|nslf
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
name|HelloWorldOneWayPort
name|greeter1
init|=
operator|(
name|HelloWorldOneWayPort
operator|)
name|ctx
operator|.
name|getBean
argument_list|(
literal|"jmsQueueOneWayServiceClient"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|greeter1
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter1
operator|.
name|greetMeOneWay
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"There should not throw the exception"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneWayQueueConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldOneWayQueueService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldOneWayQueuePort"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|HelloWorldOneWayQueueService
name|service
init|=
operator|new
name|HelloWorldOneWayQueueService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|HelloWorldOneWayPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldOneWayPort
operator|.
name|class
argument_list|,
operator|new
name|AddressingFeature
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"JMS:Queue:Milestone-"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
comment|// Give some time to complete one-way calls.
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueDecoupledOneWaysConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldQueueDecoupledOneWaysService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldQueueDecoupledOneWaysPort"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|String
name|wsdl2
init|=
literal|"testutils/jms_test.wsdl"
operator|.
name|intern
argument_list|()
decl_stmt|;
name|wsdlStrings
operator|.
name|add
argument_list|(
name|wsdl2
argument_list|)
expr_stmt|;
name|broker
operator|.
name|updateWsdl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|wsdl2
argument_list|)
expr_stmt|;
name|HelloWorldQueueDecoupledOneWaysService
name|service
init|=
operator|new
name|HelloWorldQueueDecoupledOneWaysService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Endpoint
name|requestEndpoint
init|=
literal|null
decl_stmt|;
name|Endpoint
name|replyEndpoint
init|=
literal|null
decl_stmt|;
name|HelloWorldOneWayPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldOneWayPort
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|GreeterImplQueueDecoupledOneWays
name|requestServant
init|=
operator|new
name|GreeterImplQueueDecoupledOneWays
argument_list|()
decl_stmt|;
name|requestEndpoint
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|null
argument_list|,
name|requestServant
argument_list|,
operator|new
name|LoggingFeature
argument_list|()
argument_list|)
expr_stmt|;
name|GreeterImplQueueDecoupledOneWaysDeferredReply
name|replyServant
init|=
operator|new
name|GreeterImplQueueDecoupledOneWaysDeferredReply
argument_list|()
decl_stmt|;
name|replyEndpoint
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|null
argument_list|,
name|replyServant
argument_list|,
operator|new
name|LoggingFeature
argument_list|()
argument_list|)
expr_stmt|;
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|bp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|requestHeader
init|=
operator|new
name|JMSMessageHeadersType
argument_list|()
decl_stmt|;
name|requestHeader
operator|.
name|setJMSReplyTo
argument_list|(
literal|"dynamicQueues/test.jmstransport.oneway.with.set.replyto.reply"
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
name|String
name|expectedRequest
init|=
literal|"JMS:Queue:Request"
decl_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|expectedRequest
argument_list|)
expr_stmt|;
name|String
name|request
init|=
name|requestServant
operator|.
name|ackRequestReceived
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The oneway call didn't reach its intended endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedRequest
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|requestServant
operator|.
name|proceedWithReply
argument_list|()
expr_stmt|;
name|String
name|expectedReply
init|=
name|requestServant
operator|.
name|ackReplySent
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedReply
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The decoupled one-way reply was not sent"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|reply
init|=
name|replyServant
operator|.
name|ackRequest
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|replyServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|replyServant
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The decoupled one-way reply didn't reach its intended endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedReply
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|requestEndpoint
operator|!=
literal|null
condition|)
block|{
name|requestEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|replyEndpoint
operator|!=
literal|null
condition|)
block|{
name|replyEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueOneWaySpecCompliantConnection
parameter_list|()
throws|throws
name|Throwable
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldQueueDecoupledOneWaysService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldQueueDecoupledOneWaysPort"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|String
name|wsdlString2
init|=
literal|"testutils/jms_test.wsdl"
decl_stmt|;
name|wsdlStrings
operator|.
name|add
argument_list|(
name|wsdlString2
argument_list|)
expr_stmt|;
name|broker
operator|.
name|updateWsdl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|wsdlString2
argument_list|)
expr_stmt|;
name|HelloWorldQueueDecoupledOneWaysService
name|service
init|=
operator|new
name|HelloWorldQueueDecoupledOneWaysService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Endpoint
name|requestEndpoint
init|=
literal|null
decl_stmt|;
name|HelloWorldOneWayPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldOneWayPort
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|GreeterImplQueueDecoupledOneWays
name|requestServant
init|=
operator|new
name|GreeterImplQueueDecoupledOneWays
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|requestEndpoint
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|null
argument_list|,
name|requestServant
argument_list|)
expr_stmt|;
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|bp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|requestHeader
init|=
operator|new
name|JMSMessageHeadersType
argument_list|()
decl_stmt|;
name|requestHeader
operator|.
name|setJMSReplyTo
argument_list|(
literal|"dynamicQueues/test.jmstransport.oneway.with.set.replyto.reply"
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
name|String
name|expectedRequest
init|=
literal|"JMS:Queue:Request"
decl_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|expectedRequest
argument_list|)
expr_stmt|;
name|String
name|request
init|=
name|requestServant
operator|.
name|ackRequestReceived
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The oneway call didn't reach its intended endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedRequest
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|requestServant
operator|.
name|proceedWithReply
argument_list|()
expr_stmt|;
name|boolean
name|ack
init|=
name|requestServant
operator|.
name|ackNoReplySent
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ack
condition|)
block|{
if|if
condition|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|ex
init|=
name|requestServant
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Request context was not null"
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
name|requestServant
operator|.
name|getException
argument_list|()
throw|;
block|}
name|fail
argument_list|(
literal|"The decoupled one-way reply was sent"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|requestEndpoint
operator|!=
literal|null
condition|)
block|{
name|requestEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContextPropagation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testReturnPropertyName
init|=
literal|"Test_Prop"
decl_stmt|;
specifier|final
name|String
name|testIgnoredPropertyName
init|=
literal|"Test_Prop_No_Return"
decl_stmt|;
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPort"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|HelloWorldService
name|service
init|=
operator|new
name|HelloWorldService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|HelloWorldPortType
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|requestHeader
init|=
operator|new
name|JMSMessageHeadersType
argument_list|()
decl_stmt|;
name|requestHeader
operator|.
name|setJMSCorrelationID
argument_list|(
literal|"JMS_SAMPLE_CORRELATION_ID"
argument_list|)
expr_stmt|;
name|requestHeader
operator|.
name|setJMSExpiration
argument_list|(
literal|3600000L
argument_list|)
expr_stmt|;
name|requestHeader
operator|.
name|putProperty
argument_list|(
name|testReturnPropertyName
argument_list|,
literal|"mustReturn"
argument_list|)
expr_stmt|;
name|requestHeader
operator|.
name|putProperty
argument_list|(
name|testIgnoredPropertyName
argument_list|,
literal|"mustNotReturn"
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Milestone-"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|responseHdr
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_RESPONSE_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseHdr
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"response Header should not be null"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"CORRELATION ID should match :"
argument_list|,
literal|"JMS_SAMPLE_CORRELATION_ID"
operator|.
name|equals
argument_list|(
name|responseHdr
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"response Headers must conain the app property set in request context."
argument_list|,
name|responseHdr
operator|.
name|getPropertyKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
name|responseHdr
operator|.
name|getPropertyKeys
argument_list|()
operator|.
name|contains
argument_list|(
name|testReturnPropertyName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"response Headers must match the app property set in request context."
argument_list|,
name|found
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplyToConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getBrokerURL
argument_list|()
argument_list|)
decl_stmt|;
name|TestReceiver
name|receiver
init|=
operator|new
name|TestReceiver
argument_list|(
name|cf
argument_list|,
literal|"SoapService7.replyto.queue"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|setStaticReplyQueue
argument_list|(
literal|"SoapService7.reply.queue"
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|runAsync
argument_list|()
expr_stmt|;
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SOAPService7"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SoapPort7"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/hello_world_doc_lit.wsdl"
argument_list|)
decl_stmt|;
name|SOAPService7
name|service
init|=
operator|new
name|SOAPService7
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"FooBar"
decl_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello "
operator|+
name|name
argument_list|,
name|reply
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SOAPFaultException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testReplyAndReplyToDestinations
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxWsProxyFactoryBean
name|factory
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setWsdlLocation
argument_list|(
literal|"classpath:/wsdl/jms_test.wsdl"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldService"
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setEndpointName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPort"
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setAddress
argument_list|(
literal|"jms://"
argument_list|)
expr_stmt|;
name|JMSConfigFeature
name|feature
init|=
operator|new
name|JMSConfigFeature
argument_list|()
decl_stmt|;
name|JMSConfiguration
name|config
init|=
operator|new
name|JMSConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setConnectionFactory
argument_list|(
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getBrokerURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setRequestURI
argument_list|(
literal|"test.jmstransport.text"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setTargetDestination
argument_list|(
literal|"test.jmstransport.text"
argument_list|)
expr_stmt|;
comment|// replyDestination and replyToDestination intentionally differ in this test scenario
comment|// replyDestination = Destination name to listen on for reply messages
name|config
operator|.
name|setReplyDestination
argument_list|(
literal|"test.jmstransport.text.reply"
argument_list|)
expr_stmt|;
comment|// replyToDestination = Destination name to send out as replyTo address in the message
name|config
operator|.
name|setReplyToDestination
argument_list|(
literal|"test.jmstransport.text.replyTo"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setReceiveTimeout
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setJmsConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|HelloWorldPortType
name|greeter
init|=
name|factory
operator|.
name|create
argument_list|(
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"FooBar"
argument_list|)
expr_stmt|;
comment|// Timeout exception should be thrown
block|}
finally|finally
block|{
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|greeter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

