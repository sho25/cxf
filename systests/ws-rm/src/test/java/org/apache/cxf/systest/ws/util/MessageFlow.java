begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMConstants
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|MessageFlow
block|{
specifier|private
specifier|final
name|String
name|addressingNamespace
decl_stmt|;
specifier|private
specifier|final
name|String
name|rmNamespace
decl_stmt|;
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|inStreams
decl_stmt|;
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|outStreams
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Document
argument_list|>
name|outboundMessages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Document
argument_list|>
name|inboundMessages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|MessageFlow
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|out
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|in
parameter_list|,
name|String
name|addrns
parameter_list|,
name|String
name|rmns
parameter_list|)
throws|throws
name|Exception
block|{
name|addressingNamespace
operator|=
name|addrns
expr_stmt|;
name|rmNamespace
operator|=
name|rmns
expr_stmt|;
name|reset
argument_list|(
name|out
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MessageFlow
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|out
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|Names
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|Exception
block|{
name|inStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|outStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|reset
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|out
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|in
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inboundMessages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|inStreams
operator|=
name|in
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outboundMessages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|outStreams
operator|=
name|out
expr_stmt|;
name|inboundMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|bytes
range|:
name|inStreams
control|)
block|{
name|inboundMessages
operator|.
name|add
argument_list|(
name|StaxUtils
operator|.
name|read
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outboundMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|bytes
range|:
name|outStreams
control|)
block|{
name|outboundMessages
operator|.
name|add
argument_list|(
name|StaxUtils
operator|.
name|read
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Document
name|getMessage
parameter_list|(
name|int
name|i
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
return|return
name|outbound
condition|?
name|outboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|void
name|verifyActions
parameter_list|(
name|String
index|[]
name|expectedActions
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|expectedActions
operator|.
name|length
argument_list|,
name|outbound
condition|?
name|outboundMessages
operator|.
name|size
argument_list|()
else|:
name|inboundMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedActions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|outbound
condition|?
name|outboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|action
init|=
name|getAction
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|expectedActions
index|[
name|i
index|]
condition|)
block|{
name|assertNull
argument_list|(
operator|(
name|outbound
condition|?
literal|"Outbound "
else|:
literal|"Inbound"
operator|)
operator|+
literal|" message "
operator|+
name|i
operator|+
literal|" has unexpected action: "
operator|+
name|action
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|(
name|outbound
condition|?
literal|"Outbound "
else|:
literal|"Inbound"
operator|)
operator|+
literal|" message "
operator|+
name|i
operator|+
literal|" does not contain expected action header"
argument_list|,
name|expectedActions
index|[
name|i
index|]
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|verifyActionsIgnoringPartialResponses
parameter_list|(
name|String
index|[]
name|expectedActions
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inboundMessages
operator|.
name|size
argument_list|()
operator|&&
name|j
operator|<
name|expectedActions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|action
init|=
name|getAction
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|action
operator|&&
name|emptyBody
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
literal|null
operator|==
name|expectedActions
index|[
name|j
index|]
condition|)
block|{
name|assertNull
argument_list|(
literal|"Inbound message "
operator|+
name|i
operator|+
literal|" has unexpected action: "
operator|+
name|action
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Inbound message "
operator|+
name|i
operator|+
literal|" has unexpected action: "
argument_list|,
name|expectedActions
index|[
name|j
index|]
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
name|j
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|<
name|expectedActions
operator|.
name|length
condition|)
block|{
name|fail
argument_list|(
literal|"Inbound messages do not contain all expected actions."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|checkActions
parameter_list|(
name|String
index|[]
name|expectedActions
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|expectedActions
operator|.
name|length
operator|!=
operator|(
name|outbound
condition|?
name|outboundMessages
operator|.
name|size
argument_list|()
else|:
name|inboundMessages
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedActions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|action
init|=
name|outbound
condition|?
name|getAction
argument_list|(
name|outboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
else|:
name|getAction
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|expectedActions
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|expectedActions
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|verifyAction
parameter_list|(
name|String
name|expectedAction
parameter_list|,
name|int
name|expectedCount
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|exact
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
name|outbound
condition|?
name|outboundMessages
operator|.
name|size
argument_list|()
else|:
name|inboundMessages
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|action
init|=
name|outbound
condition|?
name|getAction
argument_list|(
name|outboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
else|:
name|getAction
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|expectedAction
condition|)
block|{
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|expectedAction
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|exact
condition|)
block|{
name|assertEquals
argument_list|(
literal|"unexpected count for action: "
operator|+
name|expectedAction
argument_list|,
name|expectedCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"unexpected count for action: "
operator|+
name|expectedAction
operator|+
literal|": "
operator|+
name|count
argument_list|,
name|expectedCount
operator|<=
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|verifyMessageNumbers
parameter_list|(
name|String
index|[]
name|expectedMessageNumbers
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyMessageNumbers
argument_list|(
name|expectedMessageNumbers
argument_list|,
name|outbound
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyMessageNumbers
parameter_list|(
name|String
index|[]
name|expectedMessageNumbers
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|exact
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|actualMessageCount
init|=
name|outbound
condition|?
name|outboundMessages
operator|.
name|size
argument_list|()
else|:
name|inboundMessages
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|exact
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedMessageNumbers
operator|.
name|length
argument_list|,
name|actualMessageCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|expectedMessageNumbers
operator|.
name|length
operator|<=
name|actualMessageCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exact
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMessageNumbers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|outbound
condition|?
name|outboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Element
name|e
init|=
name|getSequence
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|expectedMessageNumbers
index|[
name|i
index|]
condition|)
block|{
name|assertNull
argument_list|(
operator|(
name|outbound
condition|?
literal|"Outbound"
else|:
literal|"Inbound"
operator|)
operator|+
literal|" message "
operator|+
name|i
operator|+
literal|" contains unexpected message number "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|(
name|outbound
condition|?
literal|"Outbound"
else|:
literal|"Inbound"
operator|)
operator|+
literal|" message "
operator|+
name|i
operator|+
literal|" does not contain expected message number "
operator|+
name|expectedMessageNumbers
index|[
name|i
index|]
argument_list|,
name|expectedMessageNumbers
index|[
name|i
index|]
argument_list|,
name|getMessageNumber
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|boolean
index|[]
name|matches
init|=
operator|new
name|boolean
index|[
name|expectedMessageNumbers
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualMessageCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|messageNumber
init|=
literal|null
decl_stmt|;
name|Element
name|e
init|=
name|outbound
condition|?
name|getSequence
argument_list|(
name|outboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
else|:
name|getSequence
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|messageNumber
operator|=
literal|null
operator|==
name|e
condition|?
literal|null
else|:
name|getMessageNumber
argument_list|(
name|e
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|expectedMessageNumbers
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|messageNumber
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|expectedMessageNumbers
index|[
name|j
index|]
operator|==
literal|null
operator|&&
operator|!
name|matches
index|[
name|j
index|]
condition|)
block|{
name|matches
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|messageNumber
operator|.
name|equals
argument_list|(
name|expectedMessageNumbers
index|[
name|j
index|]
argument_list|)
operator|&&
operator|!
name|matches
index|[
name|j
index|]
condition|)
block|{
name|matches
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|expectedMessageNumbers
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"no match for message number: "
operator|+
name|expectedMessageNumbers
index|[
name|k
index|]
argument_list|,
name|matches
index|[
name|k
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|verifyLastMessage
parameter_list|(
name|boolean
index|[]
name|expectedLastMessages
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyLastMessage
argument_list|(
name|expectedLastMessages
argument_list|,
name|outbound
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyLastMessage
parameter_list|(
name|boolean
index|[]
name|expectedLastMessages
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|exact
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|actualMessageCount
init|=
name|outbound
condition|?
name|outboundMessages
operator|.
name|size
argument_list|()
else|:
name|inboundMessages
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|exact
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedLastMessages
operator|.
name|length
argument_list|,
name|actualMessageCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|expectedLastMessages
operator|.
name|length
operator|<=
name|actualMessageCount
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedLastMessages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|lastMessage
decl_stmt|;
name|Element
name|e
init|=
name|outbound
condition|?
name|getSequence
argument_list|(
name|outboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
else|:
name|getSequence
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|lastMessage
operator|=
literal|null
operator|!=
name|e
operator|&&
name|getLastMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Outbound message "
operator|+
name|i
operator|+
operator|(
name|expectedLastMessages
index|[
name|i
index|]
condition|?
literal|" does not contain expected last message element."
else|:
literal|" contains last message element."
operator|)
argument_list|,
name|expectedLastMessages
index|[
name|i
index|]
argument_list|,
name|lastMessage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|verifyAcknowledgements
parameter_list|(
name|boolean
index|[]
name|expectedAcks
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|expectedAcks
operator|.
name|length
argument_list|,
name|outbound
condition|?
name|outboundMessages
operator|.
name|size
argument_list|()
else|:
name|inboundMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedAcks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|ack
init|=
name|outbound
condition|?
operator|(
literal|null
operator|!=
name|getAcknowledgment
argument_list|(
name|outboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
else|:
operator|(
literal|null
operator|!=
name|getAcknowledgment
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|expectedAcks
index|[
name|i
index|]
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
name|outbound
condition|?
literal|"Outbound"
else|:
literal|"Inbound"
operator|)
operator|+
literal|" message "
operator|+
name|i
operator|+
literal|" does not contain expected acknowledgement"
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
operator|(
name|outbound
condition|?
literal|"Outbound"
else|:
literal|"Inbound"
operator|)
operator|+
literal|" message "
operator|+
name|i
operator|+
literal|" contains unexpected acknowledgement"
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|verifyAcknowledgements
parameter_list|(
name|int
name|expectedAcks
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|exact
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|actualMessageCount
init|=
name|outbound
condition|?
name|outboundMessages
operator|.
name|size
argument_list|()
else|:
name|inboundMessages
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|ackCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualMessageCount
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|ack
init|=
name|outbound
condition|?
operator|(
literal|null
operator|!=
name|getAcknowledgment
argument_list|(
name|outboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
else|:
operator|(
literal|null
operator|!=
name|getAcknowledgment
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|ack
condition|)
block|{
name|ackCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exact
condition|)
block|{
name|assertEquals
argument_list|(
literal|"unexpected number of acks"
argument_list|,
name|expectedAcks
argument_list|,
name|ackCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"unexpected number of acks: "
operator|+
name|ackCount
argument_list|,
name|expectedAcks
operator|<=
name|ackCount
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|verifyAckRequestedOutbound
parameter_list|(
name|boolean
name|outbound
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|messages
init|=
name|outbound
condition|?
name|outboundMessages
else|:
name|inboundMessages
decl_stmt|;
for|for
control|(
name|Document
name|d
range|:
name|messages
control|)
block|{
name|Element
name|se
init|=
name|getAckRequested
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|se
operator|!=
literal|null
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"expected AckRequested"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifySequenceFault
parameter_list|(
name|QName
name|code
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
name|outbound
condition|?
name|outboundMessages
operator|.
name|get
argument_list|(
name|index
argument_list|)
else|:
name|inboundMessages
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|getRMHeaderElement
argument_list|(
name|d
argument_list|,
name|RMConstants
operator|.
name|SEQUENCE_FAULT_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyHeader
parameter_list|(
name|QName
name|name
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
name|outbound
condition|?
name|outboundMessages
operator|.
name|get
argument_list|(
name|index
argument_list|)
else|:
name|inboundMessages
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
operator|(
name|outbound
condition|?
literal|"Outbound"
else|:
literal|"Inbound"
operator|)
operator|+
literal|" message "
operator|+
name|index
operator|+
literal|" does not have "
operator|+
name|name
operator|+
literal|"header."
argument_list|,
name|getHeaderElement
argument_list|(
name|d
argument_list|,
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyNoHeader
parameter_list|(
name|QName
name|name
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
name|outbound
condition|?
name|outboundMessages
operator|.
name|get
argument_list|(
name|index
argument_list|)
else|:
name|inboundMessages
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
operator|(
name|outbound
condition|?
literal|"Outbound"
else|:
literal|"Inbound"
operator|)
operator|+
literal|" message "
operator|+
name|index
operator|+
literal|" has "
operator|+
name|name
operator|+
literal|"header."
argument_list|,
name|getHeaderElement
argument_list|(
name|d
argument_list|,
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getAction
parameter_list|(
name|Document
name|document
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|e
init|=
name|getHeaderElement
argument_list|(
name|document
argument_list|,
name|addressingNamespace
argument_list|,
literal|"Action"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|e
condition|)
block|{
return|return
name|getText
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Element
name|getSequence
parameter_list|(
name|Document
name|document
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRMHeaderElement
argument_list|(
name|document
argument_list|,
name|RMConstants
operator|.
name|SEQUENCE_NAME
argument_list|)
return|;
block|}
specifier|public
name|String
name|getMessageNumber
parameter_list|(
name|Element
name|elem
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Node
name|nd
init|=
name|elem
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|nd
operator|.
name|getNodeType
argument_list|()
operator|&&
literal|"MessageNumber"
operator|.
name|equals
argument_list|(
name|nd
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getText
argument_list|(
name|nd
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|getLastMessage
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Node
name|nd
init|=
name|element
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|nd
operator|.
name|getNodeType
argument_list|()
operator|&&
literal|"LastMessage"
operator|.
name|equals
argument_list|(
name|nd
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|Element
name|getAcknowledgment
parameter_list|(
name|Document
name|document
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRMHeaderElement
argument_list|(
name|document
argument_list|,
name|RMConstants
operator|.
name|SEQUENCE_ACK_NAME
argument_list|)
return|;
block|}
specifier|private
name|Element
name|getAckRequested
parameter_list|(
name|Document
name|document
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRMHeaderElement
argument_list|(
name|document
argument_list|,
name|RMConstants
operator|.
name|ACK_REQUESTED_NAME
argument_list|)
return|;
block|}
specifier|private
name|Element
name|getRMHeaderElement
parameter_list|(
name|Document
name|document
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getHeaderElement
argument_list|(
name|document
argument_list|,
name|rmNamespace
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Element
name|getHeaderElement
parameter_list|(
name|Document
name|document
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|localName
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|envelopeElement
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Element
name|headerElement
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Node
name|nd
init|=
name|envelopeElement
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|nd
operator|.
name|getNodeType
argument_list|()
operator|&&
literal|"Header"
operator|.
name|equals
argument_list|(
name|nd
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|headerElement
operator|=
operator|(
name|Element
operator|)
name|nd
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|headerElement
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Node
name|nd
init|=
name|headerElement
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|!=
name|nd
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nd
decl_stmt|;
name|String
name|ns
init|=
name|element
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|ln
init|=
name|element
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
return|return
name|element
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|verifyMessages
parameter_list|(
name|int
name|nExpected
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
name|verifyMessages
argument_list|(
name|nExpected
argument_list|,
name|outbound
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyMessages
parameter_list|(
name|int
name|nExpected
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|exact
parameter_list|)
block|{
if|if
condition|(
name|outbound
condition|)
block|{
if|if
condition|(
name|exact
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected number of outbound messages"
operator|+
name|dump
argument_list|(
name|outStreams
argument_list|)
argument_list|,
name|nExpected
argument_list|,
name|outboundMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Unexpected number of outbound messages: "
operator|+
name|dump
argument_list|(
name|outStreams
argument_list|)
argument_list|,
name|nExpected
operator|<=
name|outboundMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|exact
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected number of inbound messages"
operator|+
name|dump
argument_list|(
name|inStreams
argument_list|)
argument_list|,
name|nExpected
argument_list|,
name|inboundMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Unexpected number of inbound messages: "
operator|+
name|dump
argument_list|(
name|inStreams
argument_list|)
argument_list|,
name|nExpected
operator|<=
name|inboundMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|verifyAcknowledgementRange
parameter_list|(
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|currentLower
init|=
literal|0
decl_stmt|;
name|long
name|currentUpper
init|=
literal|0
decl_stmt|;
comment|// get the final ack range
for|for
control|(
name|Document
name|doc
range|:
name|inboundMessages
control|)
block|{
name|Element
name|e
init|=
name|getRMHeaderElement
argument_list|(
name|doc
argument_list|,
name|RMConstants
operator|.
name|SEQUENCE_ACK_NAME
argument_list|)
decl_stmt|;
comment|// let the newer messages take precedence over the older messages in getting the final range
if|if
condition|(
literal|null
operator|!=
name|e
condition|)
block|{
name|e
operator|=
name|getNamedElement
argument_list|(
name|e
argument_list|,
literal|"AcknowledgementRange"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|e
condition|)
block|{
name|currentLower
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"Lower"
argument_list|)
argument_list|)
expr_stmt|;
name|currentUpper
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
literal|"Upper"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Unexpected acknowledgement lower range"
argument_list|,
name|lower
argument_list|,
name|currentLower
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected acknowledgement upper range"
argument_list|,
name|upper
argument_list|,
name|currentUpper
argument_list|)
expr_stmt|;
block|}
comment|// note that this method picks the first match and returns
specifier|public
specifier|static
name|Element
name|getNamedElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|lcname
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Node
name|nd
init|=
name|element
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|nd
operator|.
name|getNodeType
argument_list|()
operator|&&
name|lcname
operator|.
name|equals
argument_list|(
name|nd
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|nd
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|purgePartialResponses
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
name|inboundMessages
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|isPartialResponse
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|inboundMessages
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|purge
parameter_list|()
block|{
name|inboundMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|outboundMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|outStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|verifyPartialResponses
parameter_list|(
name|int
name|nExpected
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyPartialResponses
argument_list|(
name|nExpected
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyPartialResponses
parameter_list|(
name|int
name|nExpected
parameter_list|,
name|boolean
index|[]
name|piggybackedAcks
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|npr
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inboundMessages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isPartialResponse
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|piggybackedAcks
operator|!=
literal|null
condition|)
block|{
name|Element
name|ack
init|=
name|getAcknowledgment
argument_list|(
name|inboundMessages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|piggybackedAcks
index|[
name|npr
index|]
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"Partial response "
operator|+
name|npr
operator|+
literal|" does not include acknowledgement."
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"Partial response "
operator|+
name|npr
operator|+
literal|" has unexpected acknowledgement."
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
name|npr
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Inbound messages did not contain expected number of partial responses."
argument_list|,
name|nExpected
argument_list|,
name|npr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPartialResponse
parameter_list|(
name|Document
name|d
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
operator|==
name|getAction
argument_list|(
name|d
argument_list|)
operator|&&
name|emptyBody
argument_list|(
name|d
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|emptyBody
parameter_list|(
name|Document
name|d
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|envelopeElement
init|=
name|d
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Element
name|bodyElement
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Node
name|nd
init|=
name|envelopeElement
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|nd
operator|.
name|getNodeType
argument_list|()
operator|&&
literal|"Body"
operator|.
name|equals
argument_list|(
name|nd
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|bodyElement
operator|=
operator|(
name|Element
operator|)
name|nd
expr_stmt|;
break|break;
block|}
block|}
return|return
operator|!
operator|(
literal|null
operator|!=
name|bodyElement
operator|&&
name|bodyElement
operator|.
name|hasChildNodes
argument_list|()
operator|)
return|;
block|}
specifier|static
name|String
name|dump
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|streams
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streams
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"] : "
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|streams
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|ex
operator|.
name|getMessage
argument_list|()
return|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getText
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
for|for
control|(
name|Node
name|nd
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|TEXT_NODE
operator|==
name|nd
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
return|return
name|nd
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

