begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlJavaTypeAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|MTOM
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|Logging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|LoggingInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|LoggingOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusTestServerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|MTOMBase64Test
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|PORT
init|=
name|allocatePort
argument_list|(
name|MTOMTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/MTOMBase64"
decl_stmt|;
specifier|public
specifier|static
class|class
name|ObjectWithHashMapData
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|keyData
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ObjectWithHashMapData
parameter_list|()
block|{         }
annotation|@
name|XmlJavaTypeAdapter
argument_list|(
name|HashMapAdapter
operator|.
name|class
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getKeyData
parameter_list|()
block|{
return|return
name|keyData
return|;
block|}
specifier|public
name|void
name|setKeyData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|d
parameter_list|)
block|{
name|keyData
operator|=
name|d
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
annotation|@
name|Logging
argument_list|(
name|pretty
operator|=
literal|true
argument_list|)
annotation|@
name|WebService
annotation|@
name|MTOM
argument_list|(
name|threshold
operator|=
literal|1
argument_list|)
specifier|public
interface|interface
name|MTOMService
block|{
name|ObjectWithHashMapData
name|getHashMapData
parameter_list|(
name|int
name|y
parameter_list|)
function_decl|;
block|}
annotation|@
name|WebService
specifier|public
specifier|static
class|class
name|MTOMServer
implements|implements
name|MTOMService
block|{
specifier|public
name|ObjectWithHashMapData
name|getHashMapData
parameter_list|(
name|int
name|y
parameter_list|)
block|{
name|ObjectWithHashMapData
name|ret
init|=
operator|new
name|ObjectWithHashMapData
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setName
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
name|y
condition|;
name|x
operator|++
control|)
block|{
name|ret
operator|.
name|getKeyData
argument_list|()
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|x
argument_list|)
argument_list|,
name|generateByteData
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|byte
index|[]
name|generateByteData
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
name|x
index|]
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|x
condition|;
name|y
operator|++
control|)
block|{
name|int
name|z
init|=
literal|'A'
operator|+
name|y
decl_stmt|;
if|if
condition|(
name|z
operator|>
literal|'z'
condition|)
block|{
name|z
operator|-=
literal|'A'
expr_stmt|;
block|}
name|bytes
index|[
name|y
index|]
operator|=
operator|(
name|byte
operator|)
name|z
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Server
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|EndpointImpl
name|endpointImpl
init|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|ADDRESS
argument_list|,
operator|new
name|MTOMServer
argument_list|()
argument_list|)
decl_stmt|;
name|endpointImpl
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TRANSFER_ENCODING
argument_list|,
literal|"base64"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Server
name|s
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
name|s
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"done!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMTOMInHashMapWithBase64
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|ADDRESS
argument_list|)
expr_stmt|;
name|MTOMService
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|MTOMService
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|port
argument_list|)
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|port
argument_list|)
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
literal|99
decl_stmt|;
name|ObjectWithHashMapData
name|data
init|=
name|port
operator|.
name|getHashMapData
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|1
init|;
name|y
operator|<
name|count
condition|;
name|y
operator|++
control|)
block|{
name|byte
name|bytes
index|[]
init|=
name|data
operator|.
name|getKeyData
argument_list|()
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|y
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

