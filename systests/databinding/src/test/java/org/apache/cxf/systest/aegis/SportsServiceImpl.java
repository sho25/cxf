begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|aegis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|SportsServiceImpl
implements|implements
name|SportsService
block|{
comment|/** {@inheritDoc}*/
specifier|public
name|Collection
argument_list|<
name|Team
argument_list|>
name|getTeams
parameter_list|()
block|{
name|List
argument_list|<
name|Team
argument_list|>
name|teams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|teams
operator|.
name|add
argument_list|(
operator|new
name|Team
argument_list|(
literal|"Patriots"
argument_list|,
literal|"New England"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|teams
return|;
block|}
specifier|public
name|String
name|testForMinOccurs0
parameter_list|(
name|String
name|a
parameter_list|,
name|Integer
name|b
parameter_list|,
name|String
name|c
parameter_list|)
block|{
return|return
name|a
operator|+
name|b
operator|+
name|c
return|;
block|}
specifier|public
name|AttributeBean
name|getAttributeBean
parameter_list|()
block|{
return|return
operator|new
name|AttributeBean
argument_list|()
return|;
block|}
specifier|public
name|BeanWithCharacter
name|getCharBean
parameter_list|()
block|{
return|return
operator|new
name|BeanWithCharacter
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|testComplexMapResult
parameter_list|()
block|{
name|CustomerMap
name|result
init|=
operator|new
name|CustomerMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map1
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|map1
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
name|map1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getGeneric
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
name|Iterator
argument_list|<
name|T
argument_list|>
name|iter
init|=
name|collection
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|T
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ret
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|Pair
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|getReturnGenericPair
parameter_list|(
name|T1
name|first
parameter_list|,
name|T2
name|second
parameter_list|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
return|;
block|}
specifier|public
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getReturnQualifiedPair
parameter_list|(
name|Integer
name|first
parameter_list|,
name|String
name|second
parameter_list|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|int
name|getGenericPair
parameter_list|(
name|Pair
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|pair
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|pair
operator|.
name|getFirst
argument_list|()
return|;
block|}
specifier|public
name|int
name|getQualifiedPair
parameter_list|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
parameter_list|)
block|{
return|return
name|pair
operator|.
name|getFirst
argument_list|()
return|;
block|}
block|}
end_class

end_unit

