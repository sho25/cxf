begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|tracing
operator|.
name|opentracing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|JacksonJsonProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|SingletonResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|AbstractResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaeger
operator|.
name|TestSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|tracing
operator|.
name|BookStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusTestServerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tracing
operator|.
name|opentracing
operator|.
name|jaxrs
operator|.
name|OpenTracingClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tracing
operator|.
name|opentracing
operator|.
name|jaxrs
operator|.
name|OpenTracingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|awaitility
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|Configuration
operator|.
name|ReporterConfiguration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|Configuration
operator|.
name|SamplerConfiguration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|Configuration
operator|.
name|SenderConfiguration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|JaegerSpanContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|samplers
operator|.
name|ConstSampler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|spi
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|propagation
operator|.
name|Format
operator|.
name|Builtin
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|propagation
operator|.
name|TextMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|tracing
operator|.
name|opentracing
operator|.
name|HasSpan
operator|.
name|hasSpan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|tracing
operator|.
name|opentracing
operator|.
name|IsLogContaining
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|tracing
operator|.
name|opentracing
operator|.
name|IsTagContaining
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
operator|.
name|await
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_class
specifier|public
class|class
name|OpenTracingTracingTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|allocatePort
argument_list|(
name|OpenTracingTracingTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Tracer
name|tracer
decl_stmt|;
specifier|private
name|OpenTracingClientProvider
name|openTracingClientProvider
decl_stmt|;
specifier|private
name|Random
name|random
decl_stmt|;
annotation|@
name|Ignore
specifier|public
specifier|static
class|class
name|Server
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|protected
name|void
name|run
parameter_list|()
block|{
specifier|final
name|Tracer
name|tracer
init|=
operator|new
name|Configuration
argument_list|(
literal|"tracer-test-server"
argument_list|)
operator|.
name|withSampler
argument_list|(
operator|new
name|SamplerConfiguration
argument_list|()
operator|.
name|withType
argument_list|(
name|ConstSampler
operator|.
name|TYPE
argument_list|)
operator|.
name|withParam
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|withReporter
argument_list|(
operator|new
name|ReporterConfiguration
argument_list|()
operator|.
name|withSender
argument_list|(
operator|new
name|SenderConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Sender
name|getSender
parameter_list|()
block|{
return|return
operator|new
name|TestSender
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
operator|.
name|getTracer
argument_list|()
decl_stmt|;
specifier|final
name|JAXRSServerFactoryBean
name|sf
init|=
operator|new
name|JAXRSServerFactoryBean
argument_list|()
decl_stmt|;
name|sf
operator|.
name|setResourceClasses
argument_list|(
name|BookStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setResourceProvider
argument_list|(
name|BookStore
operator|.
name|class
argument_list|,
operator|new
name|SingletonResourceProvider
argument_list|(
operator|new
name|BookStore
argument_list|<
name|Scope
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setAddress
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setProvider
argument_list|(
operator|new
name|JacksonJsonProvider
argument_list|()
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setProvider
argument_list|(
operator|new
name|OpenTracingFeature
argument_list|(
name|tracer
argument_list|)
argument_list|)
expr_stmt|;
name|sf
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractResourceInfo
operator|.
name|clearAllMaps
argument_list|()
expr_stmt|;
comment|//keep out of process due to stack traces testing failures
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|createStaticBus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|TestSender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tracer
operator|=
operator|new
name|Configuration
argument_list|(
literal|"tracer-test-client"
argument_list|)
operator|.
name|withSampler
argument_list|(
operator|new
name|SamplerConfiguration
argument_list|()
operator|.
name|withType
argument_list|(
name|ConstSampler
operator|.
name|TYPE
argument_list|)
operator|.
name|withParam
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|withReporter
argument_list|(
operator|new
name|ReporterConfiguration
argument_list|()
operator|.
name|withSender
argument_list|(
operator|new
name|SenderConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Sender
name|getSender
parameter_list|()
block|{
return|return
operator|new
name|TestSender
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
operator|.
name|getTracer
argument_list|()
expr_stmt|;
name|openTracingClientProvider
operator|=
operator|new
name|OpenTracingClientProvider
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatNewSpanIsCreatedWhenNotProvided
parameter_list|()
block|{
specifier|final
name|Response
name|r
init|=
name|createWebClient
argument_list|(
literal|"/bookstore/books"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Get Books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatNewInnerSpanIsCreated
parameter_list|()
block|{
specifier|final
name|JaegerSpanContext
name|spanId
init|=
name|fromRandom
argument_list|()
decl_stmt|;
specifier|final
name|Response
name|r
init|=
name|withTrace
argument_list|(
name|createWebClient
argument_list|(
literal|"/bookstore/books"
argument_list|)
argument_list|,
name|spanId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Get Books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatCurrentSpanIsAnnotatedWithKeyValue
parameter_list|()
block|{
specifier|final
name|JaegerSpanContext
name|spanId
init|=
name|fromRandom
argument_list|()
decl_stmt|;
specifier|final
name|Response
name|r
init|=
name|withTrace
argument_list|(
name|createWebClient
argument_list|(
literal|"/bookstore/book/1"
argument_list|)
argument_list|,
name|spanId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/book/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTags
argument_list|()
argument_list|,
name|hasItem
argument_list|(
literal|"book-id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatParallelSpanIsAnnotatedWithTimeline
parameter_list|()
block|{
specifier|final
name|JaegerSpanContext
name|spanId
init|=
name|fromRandom
argument_list|()
decl_stmt|;
specifier|final
name|Response
name|r
init|=
name|withTrace
argument_list|(
name|createWebClient
argument_list|(
literal|"/bookstore/process"
argument_list|)
argument_list|,
name|spanId
argument_list|)
operator|.
name|put
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
argument_list|,
name|hasSpan
argument_list|(
literal|"Processing books"
argument_list|,
name|hasItem
argument_list|(
literal|"Processing started"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
argument_list|,
name|hasSpan
argument_list|(
literal|"PUT /bookstore/process"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatNewChildSpanIsCreatedWhenParentIsProvided
parameter_list|()
block|{
specifier|final
name|Response
name|r
init|=
name|createWebClient
argument_list|(
literal|"/bookstore/books"
argument_list|,
name|openTracingClientProvider
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Get Books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatNewInnerSpanIsCreatedUsingAsyncInvocation
parameter_list|()
block|{
specifier|final
name|JaegerSpanContext
name|spanId
init|=
name|fromRandom
argument_list|()
decl_stmt|;
specifier|final
name|Response
name|r
init|=
name|withTrace
argument_list|(
name|createWebClient
argument_list|(
literal|"/bookstore/books/async"
argument_list|)
argument_list|,
name|spanId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Processing books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books/async"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getReferences
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSpanContext
argument_list|()
operator|.
name|getSpanId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|spanId
operator|.
name|getSpanId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatOuterSpanIsCreatedUsingAsyncInvocation
parameter_list|()
block|{
specifier|final
name|JaegerSpanContext
name|spanId
init|=
name|fromRandom
argument_list|()
decl_stmt|;
specifier|final
name|Response
name|r
init|=
name|withTrace
argument_list|(
name|createWebClient
argument_list|(
literal|"/bookstore/books/async/notrace"
argument_list|)
argument_list|,
name|spanId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books/async/notrace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatNewSpanIsCreatedUsingAsyncInvocation
parameter_list|()
block|{
specifier|final
name|Response
name|r
init|=
name|createWebClient
argument_list|(
literal|"/bookstore/books/async"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Processing books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books/async"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatNewSpanIsCreatedWhenNotProvidedUsingAsyncClient
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|WebClient
name|client
init|=
name|createWebClient
argument_list|(
literal|"/bookstore/books"
argument_list|,
name|openTracingClientProvider
argument_list|)
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|Response
argument_list|>
name|f
init|=
name|client
operator|.
name|async
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Response
name|r
init|=
name|f
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Get Books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET "
operator|+
name|client
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThatNewSpansAreCreatedWhenNotProvidedUsingMultipleAsyncClients
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|WebClient
name|client
init|=
name|createWebClient
argument_list|(
literal|"/bookstore/books"
argument_list|,
name|openTracingClientProvider
argument_list|)
decl_stmt|;
comment|// The intention is to make a calls one after another, not in parallel, to ensure the
comment|// thread have trace contexts cleared out.
specifier|final
name|Collection
argument_list|<
name|Response
argument_list|>
name|responses
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|index
lambda|->
name|client
operator|.
name|async
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Response
name|r
range|:
name|responses
control|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|map
argument_list|(
name|index
lambda|->
name|index
operator|*
literal|3
argument_list|)
operator|.
name|forEach
argument_list|(
name|index
lambda|->
block|{
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Get Books"
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books"
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
name|index
operator|+
literal|2
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET "
operator|+
name|client
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
argument_list|)
argument_list|;
block|}
block|)
class|;
end_class

begin_function
unit|}          @
name|Test
specifier|public
name|void
name|testThatNewSpansAreCreatedWhenNotProvidedUsingMultipleClients
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|WebClient
name|client
init|=
name|createWebClient
argument_list|(
literal|"/bookstore/books"
argument_list|,
name|openTracingClientProvider
argument_list|)
decl_stmt|;
comment|// The intention is to make a calls one after another, not in parallel, to ensure the
comment|// thread have trace contexts cleared out.
specifier|final
name|Collection
argument_list|<
name|Response
argument_list|>
name|responses
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|index
lambda|->
name|client
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Response
name|r
range|:
name|responses
control|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|map
argument_list|(
name|index
lambda|->
name|index
operator|*
literal|3
argument_list|)
operator|.
name|forEach
argument_list|(
name|index
lambda|->
block|{
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Get Books"
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books"
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
name|index
operator|+
literal|2
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET "
operator|+
name|client
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
argument_list|)
argument_list|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Test
specifier|public
name|void
name|testThatProvidedSpanIsNotClosedWhenActive
parameter_list|()
throws|throws
name|MalformedURLException
block|{
specifier|final
name|WebClient
name|client
init|=
name|createWebClient
argument_list|(
literal|"/bookstore/books"
argument_list|,
name|openTracingClientProvider
argument_list|)
decl_stmt|;
try|try
init|(
name|Scope
name|span
init|=
name|tracer
operator|.
name|buildSpan
argument_list|(
literal|"test span"
argument_list|)
operator|.
name|startActive
argument_list|(
literal|true
argument_list|)
init|)
block|{
specifier|final
name|Response
name|r
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Get Books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET "
operator|+
name|client
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Await till flush happens, usually every second
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
name|Duration
operator|.
name|ONE_SECOND
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test span"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testThatProvidedSpanIsNotDetachedWhenActiveUsingAsyncClient
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|WebClient
name|client
init|=
name|createWebClient
argument_list|(
literal|"/bookstore/books"
argument_list|,
name|openTracingClientProvider
argument_list|)
decl_stmt|;
try|try
init|(
name|Scope
name|scope
init|=
name|tracer
operator|.
name|buildSpan
argument_list|(
literal|"test span"
argument_list|)
operator|.
name|startActive
argument_list|(
literal|true
argument_list|)
init|)
block|{
specifier|final
name|Future
argument_list|<
name|Response
argument_list|>
name|f
init|=
name|client
operator|.
name|async
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Response
name|r
init|=
name|f
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracer
operator|.
name|activeSpan
argument_list|()
operator|.
name|context
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|scope
operator|.
name|span
argument_list|()
operator|.
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Get Books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET "
operator|+
name|client
operator|.
name|getCurrentURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Await till flush happens, usually every second
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
name|Duration
operator|.
name|ONE_SECOND
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test span"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getReferences
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testThatInnerSpanIsCreatedUsingPseudoAsyncInvocation
parameter_list|()
block|{
specifier|final
name|JaegerSpanContext
name|spanId
init|=
name|fromRandom
argument_list|()
decl_stmt|;
specifier|final
name|Response
name|r
init|=
name|withTrace
argument_list|(
name|createWebClient
argument_list|(
literal|"/bookstore/books/pseudo-async"
argument_list|)
argument_list|,
name|spanId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"GET /bookstore/books/pseudo-async"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TestSender
operator|.
name|getAllSpans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Processing books"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|WebClient
name|createWebClient
parameter_list|(
specifier|final
name|String
name|url
parameter_list|,
specifier|final
name|Object
modifier|...
name|providers
parameter_list|)
block|{
return|return
name|WebClient
operator|.
name|create
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
name|url
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|providers
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
return|;
block|}
end_function

begin_function
specifier|protected
name|WebClient
name|withTrace
parameter_list|(
specifier|final
name|WebClient
name|client
parameter_list|,
specifier|final
name|JaegerSpanContext
name|spanContext
parameter_list|)
block|{
name|tracer
operator|.
name|inject
argument_list|(
name|spanContext
argument_list|,
name|Builtin
operator|.
name|HTTP_HEADERS
argument_list|,
operator|new
name|TextMap
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|client
operator|.
name|header
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
end_function

begin_function
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
specifier|final
name|Future
argument_list|<
name|T
argument_list|>
name|future
parameter_list|)
block|{
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|TimeoutException
decl||
name|ExecutionException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|private
name|JaegerSpanContext
name|fromRandom
parameter_list|()
block|{
return|return
operator|new
name|JaegerSpanContext
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|,
comment|/* traceId */
name|random
operator|.
name|nextLong
argument_list|()
comment|/* spanId */
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
comment|/* parentId */
argument_list|,
operator|(
name|byte
operator|)
literal|1
comment|/* sampled */
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

