begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|BusApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|FiltersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|MessageTrustDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|URLConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|UntrustedURLConnectionIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|auth
operator|.
name|HttpAuthHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|auth
operator|.
name|HttpAuthSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|HttpsURLConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world
operator|.
name|services
operator|.
name|SOAPService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_comment
comment|/**  * This class tests several issues and Conduit policies based   * on a set up of redirecting servers.  *<pre>  *   * Http Redirection:  *   * Rethwel(http:9004) ------\  *                           ----> Mortimer (http:9000)  * Poltim(https:9005) ------/  *   * HttpS redirection/Trust:  *   * Tarpin(https:9003) ----> Gordy(https:9001) ----> Bethal(https:9002)  *   * Redirect Loop:  *   * Hurlon (http:9006) ----> Abost(http:9007) ----\  *   ^                                            |  *   |-------------------------------------------/  *   * Hostname Verifier Test  *   * Morpit (https:9008)  *   *</pre>  * The Bethal server issues 401 with differing realms depending on the  * User name given in the authorization header.  *<p>  * The Morpit has a CN that is not equal to "localhost" to kick in  * the Hostname Verifier.  */
end_comment

begin_class
specifier|public
class|class
name|HTTPConduitTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|IN_PROCESS
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
name|TLSClientParameters
name|tlsClientParameters
init|=
operator|new
name|TLSClientParameters
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|addrMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
try|try
block|{
comment|//System.setProperty("javax.net.debug", "all");
name|String
name|keystore
init|=
operator|new
name|File
argument_list|(
name|Server
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"resources/Morpit.jks"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|//System.out.println("Keystore: " + keystore);
name|KeyManager
index|[]
name|kmgrs
init|=
name|getKeyManagers
argument_list|(
name|getKeyStore
argument_list|(
literal|"JKS"
argument_list|,
name|keystore
argument_list|,
literal|"password"
argument_list|)
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|String
name|truststore
init|=
operator|new
name|File
argument_list|(
name|Server
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"resources/Truststore.jks"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|//System.out.println("Truststore: " + truststore);
name|TrustManager
index|[]
name|tmgrs
init|=
name|getTrustManagers
argument_list|(
name|getKeyStore
argument_list|(
literal|"JKS"
argument_list|,
name|truststore
argument_list|,
literal|"password"
argument_list|)
argument_list|)
decl_stmt|;
name|tlsClientParameters
operator|.
name|setKeyManagers
argument_list|(
name|kmgrs
argument_list|)
expr_stmt|;
name|tlsClientParameters
operator|.
name|setTrustManagers
argument_list|(
name|tmgrs
argument_list|)
expr_stmt|;
name|FiltersType
name|filters
init|=
operator|new
name|FiltersType
argument_list|()
decl_stmt|;
name|filters
operator|.
name|getInclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_EXPORT_.*"
argument_list|)
expr_stmt|;
name|filters
operator|.
name|getInclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_EXPORT1024_.*"
argument_list|)
expr_stmt|;
name|filters
operator|.
name|getInclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_WITH_DES_.*"
argument_list|)
expr_stmt|;
name|filters
operator|.
name|getInclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_WITH_AES_.*"
argument_list|)
expr_stmt|;
name|filters
operator|.
name|getInclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_WITH_NULL_.*"
argument_list|)
expr_stmt|;
name|filters
operator|.
name|getInclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_DH_anon_.*"
argument_list|)
expr_stmt|;
name|tlsClientParameters
operator|.
name|setCipherSuitesFilter
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Static initialization failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world"
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|bethalQ
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world"
argument_list|,
literal|"Bethal"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|gordyQ
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world"
argument_list|,
literal|"Gordy"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|tarpinQ
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world"
argument_list|,
literal|"Tarpin"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|rethwelQ
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world"
argument_list|,
literal|"Rethwel"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|mortimerQ
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world"
argument_list|,
literal|"Mortimer"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|poltimQ
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world"
argument_list|,
literal|"Poltim"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|hurlonQ
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world"
argument_list|,
literal|"Hurlon"
argument_list|)
decl_stmt|;
comment|// PMD Violation because it is not used, but
comment|// it is here for completeness.
comment|//private final QName abostQ =
comment|//new QName("http://apache.org/hello_world", "Abost");
specifier|public
name|HTTPConduitTest
parameter_list|()
block|{     }
specifier|public
specifier|static
name|String
name|getPort
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|BusServer
operator|.
name|PORTMAP
operator|.
name|get
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|allocatePorts
parameter_list|()
block|{
name|BusServer
operator|.
name|resetPortMap
argument_list|()
expr_stmt|;
name|addrMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addrMap
operator|.
name|put
argument_list|(
literal|"Mortimer"
argument_list|,
literal|"http://localhost:"
operator|+
name|getPort
argument_list|(
literal|"PORT0"
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|addrMap
operator|.
name|put
argument_list|(
literal|"Tarpin"
argument_list|,
literal|"https://localhost:"
operator|+
name|getPort
argument_list|(
literal|"PORT3"
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|addrMap
operator|.
name|put
argument_list|(
literal|"Rethwel"
argument_list|,
literal|"http://localhost:"
operator|+
name|getPort
argument_list|(
literal|"PORT4"
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|addrMap
operator|.
name|put
argument_list|(
literal|"Poltim"
argument_list|,
literal|"https://localhost:"
operator|+
name|getPort
argument_list|(
literal|"PORT5"
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|addrMap
operator|.
name|put
argument_list|(
literal|"Gordy"
argument_list|,
literal|"https://localhost:"
operator|+
name|getPort
argument_list|(
literal|"PORT1"
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|addrMap
operator|.
name|put
argument_list|(
literal|"Bethal"
argument_list|,
literal|"https://localhost:"
operator|+
name|getPort
argument_list|(
literal|"PORT2"
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|addrMap
operator|.
name|put
argument_list|(
literal|"Abost"
argument_list|,
literal|"http://localhost:"
operator|+
name|getPort
argument_list|(
literal|"PORT7"
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|addrMap
operator|.
name|put
argument_list|(
literal|"Hurlon"
argument_list|,
literal|"http://localhost:"
operator|+
name|getPort
argument_list|(
literal|"PORT6"
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|addrMap
operator|.
name|put
argument_list|(
literal|"Morpit"
argument_list|,
literal|"https://localhost:"
operator|+
name|getPort
argument_list|(
literal|"PORT8"
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|tlsClientParameters
operator|.
name|setDisableCNCheck
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|servers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * This function is used to start up a server. It only "starts" a      * server if it hasn't been started before, hence its static nature.      *<p>      * This approach is used to start the needed servers for a particular test      * instead of starting them all in "startServers". This single needed      * server approach allieviates the pain in starting them all just to run      * a particular test in the debugger.      */
specifier|public
specifier|synchronized
name|boolean
name|startServer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|servers
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Bus
name|bus
init|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|URL
name|serverC
init|=
name|Server
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"resources/"
operator|+
name|name
operator|+
literal|".cxf"
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|server
init|=
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|addrMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
block|,
name|serverC
operator|.
name|toString
argument_list|()
block|}
argument_list|,
name|IN_PROCESS
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
condition|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanUp
parameter_list|()
block|{
name|Bus
name|b
init|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|b
operator|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|KeyStore
name|getKeyStore
parameter_list|(
name|String
name|ksType
parameter_list|,
name|String
name|file
parameter_list|,
name|String
name|ksPassword
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|String
name|type
init|=
name|ksType
operator|!=
literal|null
condition|?
name|ksType
else|:
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
decl_stmt|;
name|char
index|[]
name|password
init|=
name|ksPassword
operator|!=
literal|null
condition|?
name|ksPassword
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// We just use the default Keystore provider
name|KeyStore
name|keyStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|keyStore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|keyStore
return|;
block|}
specifier|public
specifier|static
name|KeyManager
index|[]
name|getKeyManagers
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|,
name|String
name|keyPassword
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
comment|// For tests, we just use the default algorithm
name|String
name|alg
init|=
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
decl_stmt|;
name|char
index|[]
name|keyPass
init|=
name|keyPassword
operator|!=
literal|null
condition|?
name|keyPassword
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// For tests, we just use the default provider.
name|KeyManagerFactory
name|fac
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|alg
argument_list|)
decl_stmt|;
name|fac
operator|.
name|init
argument_list|(
name|keyStore
argument_list|,
name|keyPass
argument_list|)
expr_stmt|;
return|return
name|fac
operator|.
name|getKeyManagers
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TrustManager
index|[]
name|getTrustManagers
parameter_list|(
name|KeyStore
name|keyStore
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
comment|// For tests, we just use the default algorithm
name|String
name|alg
init|=
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
decl_stmt|;
comment|// For tests, we just use the default provider.
name|TrustManagerFactory
name|fac
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|alg
argument_list|)
decl_stmt|;
name|fac
operator|.
name|init
argument_list|(
name|keyStore
argument_list|)
expr_stmt|;
return|return
name|fac
operator|.
name|getTrustManagers
argument_list|()
return|;
block|}
comment|//methods that a subclass can override to inject a Proxy into the flow
comment|//and assert the proxy was appropriately called
specifier|public
name|void
name|configureProxy
parameter_list|(
name|Client
name|c
parameter_list|)
block|{     }
specifier|public
name|void
name|resetProxyCount
parameter_list|()
block|{     }
specifier|public
name|void
name|assertProxyRequestCount
parameter_list|(
name|int
name|i
parameter_list|)
block|{     }
specifier|private
name|Greeter
name|getMortimerGreeter
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|mortimer
init|=
name|service
operator|.
name|getPort
argument_list|(
name|mortimerQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|mortimer
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|mortimer
argument_list|,
name|getPort
argument_list|(
literal|"PORT0"
argument_list|)
argument_list|)
expr_stmt|;
name|configureProxy
argument_list|(
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|mortimer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mortimer
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Mortimer"
argument_list|)
expr_stmt|;
name|Greeter
name|mortimer
init|=
name|getMortimerGreeter
argument_list|()
decl_stmt|;
name|String
name|answer
init|=
name|mortimer
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|answer
operator|=
name|mortimer
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|answer
operator|=
name|mortimer
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected answer: "
operator|+
name|answer
argument_list|,
literal|"Bonjour from Mortimer"
operator|.
name|equals
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
name|assertProxyRequestCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogLevelIssueCXF3466
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Mortimer"
argument_list|)
expr_stmt|;
name|Greeter
name|mortimer
init|=
name|getMortimerGreeter
argument_list|()
decl_stmt|;
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getLogManager
argument_list|()
operator|.
name|getLogger
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Level
name|oldLevel
init|=
name|rootLogger
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Will throw exception Stream is closed if bug is present
name|mortimer
operator|.
name|sayHi
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|oldLevel
argument_list|)
expr_stmt|;
block|}
name|assertProxyRequestCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * This methods tests that a conduit that is not configured      * to follow redirects will not. The default is not to       * follow redirects.       * Rethwel redirects to Mortimer.      *       * Note: Unfortunately, the invocation will       * "fail" for any number of other reasons.      *       */
annotation|@
name|Test
specifier|public
name|void
name|testHttp2HttpRedirectFail
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Mortimer"
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
literal|"Rethwel"
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|rethwel
init|=
name|service
operator|.
name|getPort
argument_list|(
name|rethwelQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|rethwel
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|rethwel
argument_list|,
name|getPort
argument_list|(
literal|"PORT4"
argument_list|)
argument_list|)
expr_stmt|;
name|configureProxy
argument_list|(
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|rethwel
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|rethwel
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Redirect didn't fail. Got answer: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
block|}
name|assertProxyRequestCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * We use this class to reset the default bus.      * Note: This may not always work in the future.      * I was lucky in that "defaultBus" is actually a       * protected static.      */
class|class
name|DefaultBusFactory
extends|extends
name|SpringBusFactory
block|{
specifier|public
name|Bus
name|createBus
parameter_list|(
name|URL
name|config
parameter_list|)
block|{
name|Bus
name|bus
init|=
name|super
operator|.
name|createBus
argument_list|(
name|config
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
return|return
name|bus
return|;
block|}
block|}
comment|/**      * This method tests if http to http redirects work.      * Rethwel redirects to Mortimer.      */
annotation|@
name|Test
specifier|public
name|void
name|testHttp2HttpRedirect
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Mortimer"
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
literal|"Rethwel"
argument_list|)
expr_stmt|;
name|URL
name|config
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/Http2HttpRedirect.cxf"
argument_list|)
decl_stmt|;
comment|// We go through the back door, setting the default bus.
operator|new
name|DefaultBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|rethwel
init|=
name|service
operator|.
name|getPort
argument_list|(
name|rethwelQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|rethwel
argument_list|,
name|getPort
argument_list|(
literal|"PORT4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|rethwel
argument_list|)
expr_stmt|;
name|configureProxy
argument_list|(
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|rethwel
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|rethwel
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected answer: "
operator|+
name|answer
argument_list|,
literal|"Bonjour from Mortimer"
operator|.
name|equals
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
name|assertProxyRequestCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * This methods tests that a redirection loop will fail.      * Hurlon redirects to Abost, which redirects to Hurlon.      *       * Note: Unfortunately, the invocation may "fail" for any      * number of reasons.      */
annotation|@
name|Test
specifier|public
name|void
name|testHttp2HttpLoopRedirectFail
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Abost"
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
literal|"Hurlon"
argument_list|)
expr_stmt|;
name|URL
name|config
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/Http2HttpLoopRedirectFail.cxf"
argument_list|)
decl_stmt|;
comment|// We go through the back door, setting the default bus.
operator|new
name|DefaultBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|hurlon
init|=
name|service
operator|.
name|getPort
argument_list|(
name|hurlonQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|hurlon
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|hurlon
argument_list|,
name|getPort
argument_list|(
literal|"PORT6"
argument_list|)
argument_list|)
expr_stmt|;
name|configureProxy
argument_list|(
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|hurlon
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|hurlon
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Redirect didn't fail. Got answer: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// This exception will be one of not being able to
comment|// read from the StreamReader
comment|//e.printStackTrace();
block|}
name|assertProxyRequestCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * This methods tests a basic https connection to Bethal.      * It supplies an authorization policy with premetive user/pass      * to avoid the 401.      */
annotation|@
name|Test
specifier|public
name|void
name|testHttpsBasicConnectionWithConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Bethal"
argument_list|)
expr_stmt|;
name|URL
name|config
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/BethalClientConfig.cxf"
argument_list|)
decl_stmt|;
comment|// We go through the back door, setting the default bus.
operator|new
name|DefaultBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|bethal
init|=
name|service
operator|.
name|getPort
argument_list|(
name|bethalQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|bethal
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|bethal
argument_list|,
name|getPort
argument_list|(
literal|"PORT2"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyBethalClient
argument_list|(
name|bethal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetClientFromSpringContext
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Bethal"
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// The client bean configuration file
name|URL
name|beans
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/BethalClientBeans.xml"
argument_list|)
decl_stmt|;
comment|// We go through the back door, setting the default bus.
name|Bus
name|bus
init|=
operator|new
name|DefaultBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
name|beans
argument_list|)
decl_stmt|;
name|ApplicationContext
name|context
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|BusApplicationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Greeter
name|bethal
init|=
operator|(
name|Greeter
operator|)
name|context
operator|.
name|getBean
argument_list|(
literal|"Bethal"
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|bethal
argument_list|,
name|getPort
argument_list|(
literal|"PORT2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify the client side's setting
name|verifyBethalClient
argument_list|(
name|bethal
argument_list|)
expr_stmt|;
block|}
comment|// we just verify the configurations are loaded successfully
specifier|private
name|void
name|verifyBethalClient
parameter_list|(
name|Greeter
name|bethal
parameter_list|)
block|{
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|bethal
argument_list|)
decl_stmt|;
name|HTTPConduit
name|http
init|=
operator|(
name|HTTPConduit
operator|)
name|client
operator|.
name|getConduit
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|httpClientPolicy
init|=
name|http
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the httpClientPolicy's autoRedirect should be true"
argument_list|,
literal|true
argument_list|,
name|httpClientPolicy
operator|.
name|isAutoRedirect
argument_list|()
argument_list|)
expr_stmt|;
name|TLSClientParameters
name|tlsParameters
init|=
name|http
operator|.
name|getTlsClientParameters
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"the http conduit's tlsParameters should not be null"
argument_list|,
name|tlsParameters
argument_list|)
expr_stmt|;
comment|// If we set any name, but Edward, Mary, or George,
comment|// and a password of "password" we will get through
comment|// Bethal.
name|AuthorizationPolicy
name|authPolicy
init|=
name|http
operator|.
name|getAuthorization
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Set the wrong user name from the configuration"
argument_list|,
literal|"Betty"
argument_list|,
name|authPolicy
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Set the wrong pass word form the configuration"
argument_list|,
literal|"password"
argument_list|,
name|authPolicy
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|configureProxy
argument_list|(
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|bethal
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|bethal
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|answer
operator|=
name|bethal
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|answer
operator|=
name|bethal
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|answer
operator|=
name|bethal
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|answer
operator|=
name|bethal
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected answer: "
operator|+
name|answer
argument_list|,
literal|"Bonjour from Bethal"
operator|.
name|equals
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
comment|//With HTTPS, it will just be a CONNECT to the proxy and all the
comment|//data is encrypted.  Thus, the proxy cannot distinquish the requests
name|assertProxyRequestCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * This methods tests a basic https connection to Bethal.      * It supplies an authorization policy with premetive user/pass      * to avoid the 401.      */
annotation|@
name|Test
specifier|public
name|void
name|testHttpsBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Bethal"
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|bethal
init|=
name|service
operator|.
name|getPort
argument_list|(
name|bethalQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|bethal
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|bethal
argument_list|,
name|getPort
argument_list|(
literal|"PORT2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Okay, I'm sick of configuration files.
comment|// This also tests dynamic configuration of the conduit.
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|bethal
argument_list|)
decl_stmt|;
name|HTTPConduit
name|http
init|=
operator|(
name|HTTPConduit
operator|)
name|client
operator|.
name|getConduit
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|httpClientPolicy
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|httpClientPolicy
operator|.
name|setAutoRedirect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// If we set any name, but Edward, Mary, or George,
comment|// and a password of "password" we will get through
comment|// Bethal.
name|AuthorizationPolicy
name|authPolicy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|authPolicy
operator|.
name|setUserName
argument_list|(
literal|"Betty"
argument_list|)
expr_stmt|;
name|authPolicy
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|http
operator|.
name|setClient
argument_list|(
name|httpClientPolicy
argument_list|)
expr_stmt|;
name|http
operator|.
name|setTlsClientParameters
argument_list|(
name|tlsClientParameters
argument_list|)
expr_stmt|;
name|http
operator|.
name|setAuthorization
argument_list|(
name|authPolicy
argument_list|)
expr_stmt|;
name|configureProxy
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|bethal
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected answer: "
operator|+
name|answer
argument_list|,
literal|"Bonjour from Bethal"
operator|.
name|equals
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
name|assertProxyRequestCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHttpsRedirectToHttpFail
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Mortimer"
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
literal|"Poltim"
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|poltim
init|=
name|service
operator|.
name|getPort
argument_list|(
name|poltimQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|poltim
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|poltim
argument_list|,
name|getPort
argument_list|(
literal|"PORT5"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Okay, I'm sick of configuration files.
comment|// This also tests dynamic configuration of the conduit.
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|poltim
argument_list|)
decl_stmt|;
name|HTTPConduit
name|http
init|=
operator|(
name|HTTPConduit
operator|)
name|client
operator|.
name|getConduit
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|httpClientPolicy
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|httpClientPolicy
operator|.
name|setAutoRedirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|http
operator|.
name|setClient
argument_list|(
name|httpClientPolicy
argument_list|)
expr_stmt|;
name|http
operator|.
name|setTlsClientParameters
argument_list|(
name|tlsClientParameters
argument_list|)
expr_stmt|;
name|configureProxy
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|poltim
operator|.
name|sayHi
argument_list|()
expr_stmt|;
comment|//client -> poltim is https and thus not recorded but then redirected to mortimer
comment|//client -> mortimer is http and recoreded
name|assertProxyRequestCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
class|class
name|MyHttpsTrustDecider
extends|extends
name|MessageTrustDecider
block|{
specifier|private
name|String
index|[]
name|trustName
decl_stmt|;
specifier|private
name|int
name|called
decl_stmt|;
name|MyHttpsTrustDecider
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|trustName
operator|=
operator|new
name|String
index|[]
block|{
name|name
block|}
expr_stmt|;
block|}
name|MyHttpsTrustDecider
parameter_list|(
name|String
index|[]
name|name
parameter_list|)
block|{
name|trustName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|int
name|wasCalled
parameter_list|()
block|{
return|return
name|called
return|;
block|}
specifier|public
name|void
name|establishTrust
parameter_list|(
name|String
name|conduitName
parameter_list|,
name|URLConnectionInfo
name|cinfo
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|UntrustedURLConnectionIOException
block|{
name|called
operator|++
expr_stmt|;
name|HttpsURLConnectionInfo
name|ci
init|=
operator|(
name|HttpsURLConnectionInfo
operator|)
name|cinfo
decl_stmt|;
name|boolean
name|trusted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trustName
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|trusted
operator|=
name|trusted
operator|||
name|ci
operator|.
name|getPeerPrincipal
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OU="
operator|+
name|trustName
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|trusted
condition|)
block|{
throw|throw
operator|new
name|UntrustedURLConnectionIOException
argument_list|(
literal|"Peer Principal \""
operator|+
name|ci
operator|.
name|getPeerPrincipal
argument_list|()
operator|+
literal|"\" does not contain "
operator|+
name|getTrustNames
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getTrustNames
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trustName
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\"OU="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|trustName
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|trustName
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHttpsTrust
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Bethal"
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|bethal
init|=
name|service
operator|.
name|getPort
argument_list|(
name|bethalQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|bethal
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|bethal
argument_list|,
name|getPort
argument_list|(
literal|"PORT2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Okay, I'm sick of configuration files.
comment|// This also tests dynamic configuration of the conduit.
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|bethal
argument_list|)
decl_stmt|;
name|HTTPConduit
name|http
init|=
operator|(
name|HTTPConduit
operator|)
name|client
operator|.
name|getConduit
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|httpClientPolicy
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|httpClientPolicy
operator|.
name|setAutoRedirect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// If we set any name, but Edward, Mary, or George,
comment|// and a password of "password" we will get through
comment|// Bethal.
name|AuthorizationPolicy
name|authPolicy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|authPolicy
operator|.
name|setUserName
argument_list|(
literal|"Betty"
argument_list|)
expr_stmt|;
name|authPolicy
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|http
operator|.
name|setClient
argument_list|(
name|httpClientPolicy
argument_list|)
expr_stmt|;
name|http
operator|.
name|setTlsClientParameters
argument_list|(
name|tlsClientParameters
argument_list|)
expr_stmt|;
name|http
operator|.
name|setAuthorization
argument_list|(
name|authPolicy
argument_list|)
expr_stmt|;
comment|// Our expected server should be OU=Bethal
name|http
operator|.
name|setTrustDecider
argument_list|(
operator|new
name|MyHttpsTrustDecider
argument_list|(
literal|"Bethal"
argument_list|)
argument_list|)
expr_stmt|;
name|configureProxy
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|bethal
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected answer: "
operator|+
name|answer
argument_list|,
literal|"Bonjour from Bethal"
operator|.
name|equals
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
name|assertProxyRequestCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Nobody will not equal OU=Bethal
name|MyHttpsTrustDecider
name|trustDecider
init|=
operator|new
name|MyHttpsTrustDecider
argument_list|(
literal|"Nobody"
argument_list|)
decl_stmt|;
name|http
operator|.
name|setTrustDecider
argument_list|(
name|trustDecider
argument_list|)
expr_stmt|;
try|try
block|{
name|answer
operator|=
name|bethal
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Unexpected answer from Bethal: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
comment|//assertTrue("Trust Decider was not called",
comment|//              0> trustDecider.wasCalled());
block|}
name|assertProxyRequestCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHttpsTrustRedirect
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Tarpin"
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
literal|"Gordy"
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
literal|"Bethal"
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|tarpin
init|=
name|service
operator|.
name|getPort
argument_list|(
name|tarpinQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|tarpin
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|tarpin
argument_list|,
name|getPort
argument_list|(
literal|"PORT3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Okay, I'm sick of configuration files.
comment|// This also tests dynamic configuration of the conduit.
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|tarpin
argument_list|)
decl_stmt|;
name|HTTPConduit
name|http
init|=
operator|(
name|HTTPConduit
operator|)
name|client
operator|.
name|getConduit
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|httpClientPolicy
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|httpClientPolicy
operator|.
name|setAutoRedirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// If we set any name, but Edward, Mary, or George,
comment|// and a password of "password" we will get through
comment|// Bethal.
name|AuthorizationPolicy
name|authPolicy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|authPolicy
operator|.
name|setUserName
argument_list|(
literal|"Betty"
argument_list|)
expr_stmt|;
name|authPolicy
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|http
operator|.
name|setClient
argument_list|(
name|httpClientPolicy
argument_list|)
expr_stmt|;
name|http
operator|.
name|setTlsClientParameters
argument_list|(
name|tlsClientParameters
argument_list|)
expr_stmt|;
name|http
operator|.
name|setAuthorization
argument_list|(
name|authPolicy
argument_list|)
expr_stmt|;
comment|// We get redirected from Tarpin, to Gordy, to Bethal.
name|MyHttpsTrustDecider
name|trustDecider
init|=
operator|new
name|MyHttpsTrustDecider
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Tarpin"
block|,
literal|"Gordy"
block|,
literal|"Bethal"
block|}
argument_list|)
decl_stmt|;
name|http
operator|.
name|setTrustDecider
argument_list|(
name|trustDecider
argument_list|)
expr_stmt|;
comment|// We actually get our answer from Bethal at the end of the
comment|// redirects.
name|configureProxy
argument_list|(
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|tarpin
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|tarpin
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertProxyRequestCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Trust Decider wasn't called correctly"
argument_list|,
literal|3
operator|==
name|trustDecider
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected answer: "
operator|+
name|answer
argument_list|,
literal|"Bonjour from Bethal"
operator|.
name|equals
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
comment|// Limit the redirects to 1, since there are two, this should fail.
name|http
operator|.
name|getClient
argument_list|()
operator|.
name|setMaxRetransmits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|answer
operator|=
name|tarpin
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Unexpected answer from Tarpin: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
block|}
name|assertProxyRequestCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Set back to unlimited.
name|http
operator|.
name|getClient
argument_list|()
operator|.
name|setMaxRetransmits
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Effectively we will not trust Gordy in the middle.
name|trustDecider
operator|=
operator|new
name|MyHttpsTrustDecider
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Tarpin"
block|,
literal|"Bethal"
block|}
argument_list|)
expr_stmt|;
name|http
operator|.
name|setTrustDecider
argument_list|(
name|trustDecider
argument_list|)
expr_stmt|;
try|try
block|{
name|answer
operator|=
name|tarpin
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Unexpected answer from Tarpin: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
name|assertTrue
argument_list|(
literal|"Trust Decider wasn't called correctly"
argument_list|,
literal|2
operator|==
name|trustDecider
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertProxyRequestCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|MyBasicAuthSupplier
implements|implements
name|HttpAuthSupplier
block|{
name|String
name|realm
decl_stmt|;
name|String
name|user
decl_stmt|;
name|String
name|pass
decl_stmt|;
comment|/**          * This will loop from Cronus, to Andromeda, to Zorantius          */
name|MyBasicAuthSupplier
parameter_list|()
block|{         }
name|MyBasicAuthSupplier
parameter_list|(
name|String
name|r
parameter_list|,
name|String
name|u
parameter_list|,
name|String
name|p
parameter_list|)
block|{
name|realm
operator|=
name|r
expr_stmt|;
name|user
operator|=
name|u
expr_stmt|;
name|pass
operator|=
name|p
expr_stmt|;
block|}
comment|/**          * If we don't have the realm set, then we loop          * through the realms.          */
specifier|public
name|String
name|getAuthorization
parameter_list|(
name|AuthorizationPolicy
name|authPolicy
parameter_list|,
name|URI
name|currentURI
parameter_list|,
name|Message
name|message
parameter_list|,
name|String
name|fullHeader
parameter_list|)
block|{
name|String
name|reqestedRealm
init|=
operator|new
name|HttpAuthHeader
argument_list|(
name|fullHeader
argument_list|)
operator|.
name|getRealm
argument_list|()
decl_stmt|;
if|if
condition|(
name|realm
operator|!=
literal|null
operator|&&
name|realm
operator|.
name|equals
argument_list|(
name|reqestedRealm
argument_list|)
condition|)
block|{
return|return
name|createUserPass
argument_list|(
name|user
argument_list|,
name|pass
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Andromeda"
operator|.
name|equals
argument_list|(
name|reqestedRealm
argument_list|)
condition|)
block|{
comment|// This will get us another 401 to Zorantius
return|return
name|createUserPass
argument_list|(
literal|"Edward"
argument_list|,
literal|"password"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Zorantius"
operator|.
name|equals
argument_list|(
name|reqestedRealm
argument_list|)
condition|)
block|{
comment|// George will get us another 401 to Cronus
return|return
name|createUserPass
argument_list|(
literal|"George"
argument_list|,
literal|"password"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Cronus"
operator|.
name|equals
argument_list|(
name|reqestedRealm
argument_list|)
condition|)
block|{
comment|// Mary will get us another 401 to Andromeda
return|return
name|createUserPass
argument_list|(
literal|"Mary"
argument_list|,
literal|"password"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|createUserPass
parameter_list|(
name|String
name|usr
parameter_list|,
name|String
name|pwd
parameter_list|)
block|{
name|String
name|userpass
init|=
name|usr
operator|+
literal|":"
operator|+
name|pwd
decl_stmt|;
name|String
name|token
init|=
name|Base64Utility
operator|.
name|encode
argument_list|(
name|userpass
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|"Basic "
operator|+
name|token
return|;
block|}
specifier|public
name|boolean
name|requiresRequestCaching
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * This tests redirects through Gordy to Bethal. Bethal will      * supply a series of 401s. See PushBack401.      */
annotation|@
name|Test
specifier|public
name|void
name|testHttpsRedirect401Response
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"Gordy"
argument_list|)
expr_stmt|;
name|startServer
argument_list|(
literal|"Bethal"
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/greeting.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|gordy
init|=
name|service
operator|.
name|getPort
argument_list|(
name|gordyQ
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Port is null"
argument_list|,
name|gordy
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|gordy
argument_list|,
name|getPort
argument_list|(
literal|"PORT1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Okay, I'm sick of configuration files.
comment|// This also tests dynamic configuration of the conduit.
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|gordy
argument_list|)
decl_stmt|;
name|HTTPConduit
name|http
init|=
operator|(
name|HTTPConduit
operator|)
name|client
operator|.
name|getConduit
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|httpClientPolicy
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|httpClientPolicy
operator|.
name|setAutoRedirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|http
operator|.
name|setClient
argument_list|(
name|httpClientPolicy
argument_list|)
expr_stmt|;
name|http
operator|.
name|setTlsClientParameters
argument_list|(
name|tlsClientParameters
argument_list|)
expr_stmt|;
comment|// We get redirected from Gordy, to Bethal.
name|http
operator|.
name|setTrustDecider
argument_list|(
operator|new
name|MyHttpsTrustDecider
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Gordy"
block|,
literal|"Bethal"
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Without preemptive user/pass Bethal returns a
comment|// 401 for realm Cronus. If we supply any name other
comment|// than Edward, George, or Mary, with the pass of "password"
comment|// we should succeed.
name|http
operator|.
name|setAuthSupplier
argument_list|(
operator|new
name|MyBasicAuthSupplier
argument_list|(
literal|"Cronus"
argument_list|,
literal|"Betty"
argument_list|,
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We actually get our answer from Bethal at the end of the
comment|// redirects.
name|String
name|answer
init|=
name|gordy
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected answer: "
operator|+
name|answer
argument_list|,
literal|"Bonjour from Bethal"
operator|.
name|equals
argument_list|(
name|answer
argument_list|)
argument_list|)
expr_stmt|;
comment|// The loop auth supplier,
comment|// We should die with looping realms.
name|http
operator|.
name|setAuthSupplier
argument_list|(
operator|new
name|MyBasicAuthSupplier
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|answer
operator|=
name|gordy
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Unexpected answer from Gordy: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
block|}
block|}
block|}
end_class

end_unit

