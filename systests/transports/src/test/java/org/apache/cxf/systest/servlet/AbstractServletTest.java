begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|HttpNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|HttpUnitOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|servletunit
operator|.
name|ServletRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|servletunit
operator|.
name|ServletUnitClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
operator|.
name|AbstractCXFTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractServletTest
extends|extends
name|AbstractCXFTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT
init|=
literal|"/mycontext"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_URL
init|=
literal|"http://localhost/mycontext"
decl_stmt|;
specifier|protected
name|ServletRunner
name|sr
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|configurationStream
init|=
name|getResourceAsStream
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|sr
operator|=
operator|new
name|ServletRunner
argument_list|(
name|configurationStream
argument_list|,
name|CONTEXT
argument_list|)
expr_stmt|;
try|try
block|{
name|sr
operator|.
name|newClient
argument_list|()
operator|.
name|getResponse
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore, we just want to boot up the servlet
block|}
name|HttpUnitOptions
operator|.
name|setExceptionsThrownOnErrorStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|configurationStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|sr
operator|!=
literal|null
condition|)
block|{
name|sr
operator|.
name|shutDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return The web.xml to use for testing.      */
specifier|protected
name|String
name|getConfiguration
parameter_list|()
block|{
return|return
literal|"/org/apache/cxf/systest/servlet/web.xml"
return|;
block|}
specifier|protected
name|ServletUnitClient
name|newClient
parameter_list|()
block|{
return|return
name|sr
operator|.
name|newClient
argument_list|()
return|;
block|}
comment|/**      * Here we expect an errorCode other than 200, and look for it checking for      * text is omitted as it doesnt work. It would never work on java1.3, but      * one may have expected java1.4+ to have access to the error stream in      * responses. Clearly not.      *      * @param request      * @param errorCode      * @param errorText optional text string to search for      * @throws MalformedURLException      * @throws IOException      * @throws SAXException      */
specifier|protected
name|void
name|expectErrorCode
parameter_list|(
name|WebRequest
name|request
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|errorText
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|String
name|failureText
init|=
literal|"Expected error "
operator|+
name|errorCode
operator|+
literal|" from "
operator|+
name|request
operator|.
name|getURL
argument_list|()
decl_stmt|;
try|try
block|{
name|newClient
argument_list|()
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|errorText
operator|+
literal|" -got success instead"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|failureText
argument_list|,
name|errorCode
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|/*              * checking for text omitted as it doesnt work. if(errorText!=null) {              * assertTrue( "Failed to find "+errorText+" in "+              * e.getResponseMessage(), e.getMessage().indexOf(errorText)>=0); }              */
block|}
block|}
block|}
end_class

end_unit

