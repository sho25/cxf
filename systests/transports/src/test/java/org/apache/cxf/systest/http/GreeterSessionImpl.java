begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|types
operator|.
name|GreetMeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|types
operator|.
name|PingMeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|types
operator|.
name|SayHiResponse
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|serviceName
operator|=
literal|"GreeterService"
argument_list|,
name|portName
operator|=
literal|"GreeterPort"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.greeter_control.Greeter"
argument_list|,
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/greeter_control"
argument_list|)
specifier|public
class|class
name|GreeterSessionImpl
implements|implements
name|Greeter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|GreeterSessionImpl
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|GreeterSessionImpl
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Resource
specifier|private
name|WebServiceContext
name|context
decl_stmt|;
comment|// greetMe will use session to return last called name
specifier|public
name|String
name|greetMe
parameter_list|(
name|String
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation greetMe"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Message received: "
operator|+
name|me
argument_list|)
expr_stmt|;
name|MessageContext
name|mc
init|=
name|context
operator|.
name|getMessageContext
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|mc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|SERVLET_REQUEST
argument_list|)
decl_stmt|;
name|Cookie
name|cookies
index|[]
init|=
name|req
operator|.
name|getCookies
argument_list|()
decl_stmt|;
name|String
name|val
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|cookies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cookie
name|cookie
range|:
name|cookies
control|)
block|{
name|val
operator|+=
literal|";"
operator|+
name|cookie
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|cookie
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|HttpSession
name|session
init|=
name|req
operator|.
name|getSession
argument_list|()
decl_stmt|;
comment|// Get a session property "counter" from context
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
literal|"No session in WebServiceContext"
argument_list|)
throw|;
block|}
name|String
name|name
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|me
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting the Session"
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|me
argument_list|)
expr_stmt|;
return|return
literal|"Hello "
operator|+
name|name
operator|+
name|val
return|;
block|}
specifier|public
name|String
name|sayHi
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation sayHi"
argument_list|)
expr_stmt|;
return|return
literal|"Bonjour "
return|;
block|}
specifier|public
name|void
name|pingMe
parameter_list|()
block|{     }
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|greetMeAsync
parameter_list|(
name|String
name|requestType
parameter_list|,
name|AsyncHandler
argument_list|<
name|GreetMeResponse
argument_list|>
name|asyncHandler
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Response
argument_list|<
name|GreetMeResponse
argument_list|>
name|greetMeAsync
parameter_list|(
name|String
name|requestType
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|greetMeOneWay
parameter_list|(
name|String
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation greetMeOneWay"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Message received: "
operator|+
name|me
argument_list|)
expr_stmt|;
name|MessageContext
name|mc
init|=
name|context
operator|.
name|getMessageContext
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|mc
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|SERVLET_REQUEST
argument_list|)
decl_stmt|;
name|HttpSession
name|session
init|=
name|req
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
literal|"No session in WebServiceContext"
argument_list|)
throw|;
block|}
name|String
name|name
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|me
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting the Session"
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|me
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|pingMeAsync
parameter_list|(
name|AsyncHandler
argument_list|<
name|PingMeResponse
argument_list|>
name|asyncHandler
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Response
argument_list|<
name|PingMeResponse
argument_list|>
name|pingMeAsync
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|sayHiAsync
parameter_list|(
name|AsyncHandler
argument_list|<
name|SayHiResponse
argument_list|>
name|asyncHandler
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Response
argument_list|<
name|SayHiResponse
argument_list|>
name|sayHiAsync
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

