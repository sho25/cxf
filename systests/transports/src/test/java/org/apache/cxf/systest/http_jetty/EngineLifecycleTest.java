begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|http_jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
operator|.
name|JettyHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
operator|.
name|JettyHTTPServerEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|webapp
operator|.
name|WebAppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|PropertyPlaceholderConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|XmlBeanDefinitionReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|GenericApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|ClassPathResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class tests starting up and shutting down the embedded server when there  * is extra jetty configuration.  */
end_comment

begin_class
specifier|public
class|class
name|EngineLifecycleTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PORT1
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|EngineLifecycleTest
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PORT2
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|EngineLifecycleTest
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|GenericApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testUpDownWithServlets
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBus
argument_list|()
expr_stmt|;
name|Bus
name|bus
init|=
operator|(
name|Bus
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"cxf"
argument_list|)
decl_stmt|;
name|ServerRegistry
name|sr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServerImpl
name|si
init|=
operator|(
name|ServerImpl
operator|)
name|sr
operator|.
name|getServers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|JettyHTTPDestination
name|jhd
init|=
operator|(
name|JettyHTTPDestination
operator|)
name|si
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|JettyHTTPServerEngine
name|e
init|=
operator|(
name|JettyHTTPServerEngine
operator|)
name|jhd
operator|.
name|getEngine
argument_list|()
decl_stmt|;
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
name|jettyServer
init|=
name|e
operator|.
name|getServer
argument_list|()
decl_stmt|;
for|for
control|(
name|Handler
name|h
range|:
name|jettyServer
operator|.
name|getChildHandlersByClass
argument_list|(
name|WebAppContext
operator|.
name|class
argument_list|)
control|)
block|{
name|WebAppContext
name|wac
init|=
operator|(
name|WebAppContext
operator|)
name|h
decl_stmt|;
if|if
condition|(
literal|"/jsunit"
operator|.
name|equals
argument_list|(
name|wac
operator|.
name|getContextPath
argument_list|()
argument_list|)
condition|)
block|{
name|wac
operator|.
name|addServlet
argument_list|(
literal|"org.eclipse.jetty.servlet.DefaultServlet"
argument_list|,
literal|"/bloop"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
try|try
block|{
name|verifyStaticHtml
argument_list|()
expr_stmt|;
name|invokeService
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerUpDownUp
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
comment|// twice
name|setUpBus
argument_list|()
expr_stmt|;
try|try
block|{
name|verifyStaticHtml
argument_list|()
expr_stmt|;
name|invokeService
argument_list|()
expr_stmt|;
name|invokeService8801
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setUpBus
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyNoServer
argument_list|(
name|PORT2
argument_list|)
expr_stmt|;
name|verifyNoServer
argument_list|(
name|PORT1
argument_list|)
expr_stmt|;
name|applicationContext
operator|=
operator|new
name|GenericApplicationContext
argument_list|()
expr_stmt|;
name|XmlBeanDefinitionReader
name|reader
init|=
operator|new
name|XmlBeanDefinitionReader
argument_list|(
name|applicationContext
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadBeanDefinitions
argument_list|(
operator|new
name|ClassPathResource
argument_list|(
literal|"META-INF/cxf/cxf.xml"
argument_list|)
argument_list|,
operator|new
name|ClassPathResource
argument_list|(
literal|"cxf.xml"
argument_list|,
name|getClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ClassPathResource
argument_list|(
literal|"jetty-engine.xml"
argument_list|,
name|getClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ClassPathResource
argument_list|(
literal|"server-lifecycle-beans.xml"
argument_list|,
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// bring in some property values from a Properties file
name|PropertyPlaceholderConfigurer
name|cfg
init|=
operator|new
name|PropertyPlaceholderConfigurer
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"staticResourceURL"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
comment|// now actually do the replacement
name|cfg
operator|.
name|postProcessBeanFactory
argument_list|(
name|applicationContext
operator|.
name|getBeanFactory
argument_list|()
argument_list|)
expr_stmt|;
name|applicationContext
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|invokeService
parameter_list|()
block|{
name|DummyInterface
name|client
init|=
operator|(
name|DummyInterface
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"dummy-client"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"We should get out put from this client"
argument_list|,
literal|"hello world"
argument_list|,
name|client
operator|.
name|echo
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|invokeService8801
parameter_list|()
block|{
name|DummyInterface
name|client
init|=
operator|(
name|DummyInterface
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"dummy-client-8801"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"We should get out put from this client"
argument_list|,
literal|"hello world"
argument_list|,
name|client
operator|.
name|echo
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|verifyStaticHtml
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|response
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
operator|&&
literal|null
operator|==
name|response
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT2
operator|+
literal|"/test.html"
argument_list|)
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"Test doc can not be read"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|String
name|html
decl_stmt|;
try|try
init|(
name|InputStream
name|htmlFile
init|=
name|EngineLifecycleTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.html"
argument_list|)
init|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|htmlFile
operator|.
name|available
argument_list|()
index|]
decl_stmt|;
name|htmlFile
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|html
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Can't get the right test html"
argument_list|,
name|html
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|shutdownService
parameter_list|()
throws|throws
name|Exception
block|{
name|applicationContext
operator|.
name|close
argument_list|()
expr_stmt|;
name|applicationContext
operator|=
literal|null
expr_stmt|;
comment|//        System.gc(); // make sure the port is cleaned up a bit
name|verifyNoServer
argument_list|(
name|PORT2
argument_list|)
expr_stmt|;
name|verifyNoServer
argument_list|(
name|PORT1
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|verifyNoServer
parameter_list|(
name|String
name|port
parameter_list|)
block|{
try|try
init|(
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
argument_list|)
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"Server on port "
operator|+
name|port
operator|+
literal|" accepted a connection."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unknown host for local address"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// this is what we want.
block|}
block|}
block|}
end_class

end_unit

