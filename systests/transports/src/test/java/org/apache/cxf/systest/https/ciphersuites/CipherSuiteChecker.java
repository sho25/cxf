begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|https
operator|.
name|ciphersuites
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_comment
comment|/**  * A service side interceptor to check that the negotiated TLS protocol matches a desired  * algorithm  */
end_comment

begin_class
specifier|public
class|class
name|CipherSuiteChecker
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
name|String
name|requiredAlgorithm
decl_stmt|;
specifier|public
name|CipherSuiteChecker
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_INVOKE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CipherSuiteChecker
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|mc
parameter_list|)
throws|throws
name|Fault
block|{
name|TLSSessionInfo
name|session
init|=
name|mc
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getCipherSuite
argument_list|()
operator|.
name|contains
argument_list|(
name|requiredAlgorithm
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"Required algorithm not found"
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getRequiredAlgorithm
parameter_list|()
block|{
return|return
name|requiredAlgorithm
return|;
block|}
specifier|public
name|void
name|setRequiredAlgorithm
parameter_list|(
name|String
name|requiredAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|requiredAlgorithm
operator|=
name|requiredAlgorithm
expr_stmt|;
block|}
block|}
end_class

end_unit

