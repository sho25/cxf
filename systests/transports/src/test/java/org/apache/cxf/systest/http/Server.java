begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusTestServerBase
import|;
end_import

begin_class
specifier|public
class|class
name|Server
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|allocatePort
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|address
decl_stmt|;
specifier|private
name|URL
name|configFileURL
decl_stmt|;
specifier|private
name|EndpointImpl
name|ep
decl_stmt|;
specifier|public
name|Server
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Server
parameter_list|(
name|String
name|n
parameter_list|,
name|String
name|addr
parameter_list|,
name|String
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|name
operator|=
name|n
expr_stmt|;
name|address
operator|=
name|addr
expr_stmt|;
name|configFileURL
operator|=
operator|new
name|URL
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//System.out.println("Starting " + name
comment|//                     + " Server at " + address
comment|//                     + " with config " + configFileURL);
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|ep
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ep
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|run
parameter_list|()
block|{
comment|// We use a null binding id in the call to EndpointImpl
comment|// constructor. Why?
specifier|final
name|String
name|nullBindingID
init|=
literal|null
decl_stmt|;
comment|// We need to specify to use defaults on constructing the
comment|// bus, because our configuration file doesn't have
comment|// everything needed.
specifier|final
name|boolean
name|useDefaults
init|=
literal|true
decl_stmt|;
comment|// We configure a new bus for this server.
name|setBus
argument_list|(
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
name|configFileURL
argument_list|,
name|useDefaults
argument_list|)
argument_list|)
expr_stmt|;
comment|// This impl class must have the appropriate annotations
comment|// to match the WSDL file that we are using.
name|Object
name|implementor
init|=
operator|new
name|GreeterImpl
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// I don't know why this works.
name|ep
operator|=
operator|new
name|EndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|implementor
argument_list|,
name|nullBindingID
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"greeting.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// How the hell do I know what the name of the
comment|// http-destination is from using this call?
name|ep
operator|.
name|setEndpointName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|ep
operator|.
name|publish
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Server
name|s
init|=
operator|new
name|Server
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|s
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

