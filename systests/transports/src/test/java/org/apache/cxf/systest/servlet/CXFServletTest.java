begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|GetMethodWebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|PostMethodWebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|WebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|WebResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|servletunit
operator|.
name|ServletUnitClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testsupport
operator|.
name|AbstractServletTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|BaseGreeterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CXFServletTest
extends|extends
name|AbstractServletTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Bus
name|createBus
parameter_list|()
throws|throws
name|BusException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostInvokeServices
parameter_list|()
throws|throws
name|Exception
block|{
name|invoke
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|invoke
argument_list|(
literal|"iso-8859-1"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|invoke
parameter_list|(
name|String
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
name|WebRequest
name|req
init|=
operator|new
name|PostMethodWebRequest
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"GreeterMessage.xml"
argument_list|)
argument_list|,
literal|"text/xml; charset="
operator|+
name|encoding
argument_list|)
decl_stmt|;
name|ServletUnitClient
name|client
init|=
name|newClient
argument_list|()
decl_stmt|;
name|WebResponse
name|response
init|=
name|client
operator|.
name|getResponse
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|client
operator|.
name|setExceptionsThrownOnErrorStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml"
argument_list|,
name|response
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|encoding
operator|.
name|equalsIgnoreCase
argument_list|(
name|response
operator|.
name|getCharacterSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|response
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"h"
argument_list|,
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/s:Envelope/s:Body"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//h:sayHiResponse"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetServiceList
parameter_list|()
throws|throws
name|Exception
block|{
name|ServletUnitClient
name|client
init|=
name|newClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|setExceptionsThrownOnErrorStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|WebResponse
name|res
init|=
name|client
operator|.
name|getResponse
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services"
argument_list|)
decl_stmt|;
name|WebLink
index|[]
name|links
init|=
name|res
operator|.
name|getLinks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should get two links for the service"
argument_list|,
literal|3
argument_list|,
name|links
operator|.
name|length
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|links2
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WebLink
name|l
range|:
name|links
control|)
block|{
name|links2
operator|.
name|add
argument_list|(
name|l
operator|.
name|getURLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|links2
operator|.
name|contains
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter?wsdl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|links2
operator|.
name|contains
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter2?wsdl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/html"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|client
operator|.
name|getResponse
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/"
argument_list|)
expr_stmt|;
name|links
operator|=
name|res
operator|.
name|getLinks
argument_list|()
expr_stmt|;
name|links2
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|WebLink
name|l
range|:
name|links
control|)
block|{
name|links2
operator|.
name|add
argument_list|(
name|l
operator|.
name|getURLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"There should get two links for the service"
argument_list|,
literal|3
argument_list|,
name|links
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|links2
operator|.
name|contains
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter?wsdl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|links2
operator|.
name|contains
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter2?wsdl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/html"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure that the Bus is available for people doing an Endpoint.publish() or similar.
name|assertNotNull
argument_list|(
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWSDL
parameter_list|()
throws|throws
name|Exception
block|{
name|ServletUnitClient
name|client
init|=
name|newClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|setExceptionsThrownOnErrorStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebRequest
name|req
init|=
operator|new
name|GetMethodQueryWebRequest
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter?wsdl"
argument_list|)
decl_stmt|;
name|WebResponse
name|res
init|=
name|client
operator|.
name|getResponse
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|res
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|res
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//wsdl:operation[@name='greetMe']"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//wsdlsoap:address[@location='"
operator|+
name|CONTEXT_URL
operator|+
literal|"/services/greeter']"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWSDLWithIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|ServletUnitClient
name|client
init|=
name|newClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|setExceptionsThrownOnErrorStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebRequest
name|req
init|=
operator|new
name|GetMethodQueryWebRequest
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter3?wsdl"
argument_list|)
decl_stmt|;
name|WebResponse
name|res
init|=
name|client
operator|.
name|getResponse
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|res
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|res
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertXPathEquals
argument_list|(
literal|"//xsd:include/@schemaLocation"
argument_list|,
literal|"http://localhost/mycontext/services/greeter3?xsd=hello_world_includes2.xsd"
argument_list|,
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|GetMethodQueryWebRequest
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter3?xsd=hello_world_includes2.xsd"
argument_list|)
expr_stmt|;
name|res
operator|=
name|client
operator|.
name|getResponse
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|res
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|res
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//xsd:complexType[@name='ErrorCode']"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWSDLWithXMLBinding
parameter_list|()
throws|throws
name|Exception
block|{
name|ServletUnitClient
name|client
init|=
name|newClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|setExceptionsThrownOnErrorStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebRequest
name|req
init|=
operator|new
name|GetMethodQueryWebRequest
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter2?wsdl"
argument_list|)
decl_stmt|;
name|WebResponse
name|res
init|=
name|client
operator|.
name|getResponse
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|res
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|res
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"http"
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/http/"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//wsdl:operation[@name='greetMe']"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//http:address[@location='"
operator|+
name|CONTEXT_URL
operator|+
literal|"/services/greeter2']"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidServiceUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|ServletUnitClient
name|client
init|=
name|newClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|setExceptionsThrownOnErrorStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|WebResponse
name|res
init|=
name|client
operator|.
name|getResponse
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/NoSuchService"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|404
argument_list|,
name|res
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/html"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServiceWsdlNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|WebRequest
name|req
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/NoSuchService?wsdl"
argument_list|)
decl_stmt|;
name|expectErrorCode
argument_list|(
name|req
argument_list|,
literal|404
argument_list|,
literal|"Response code 404 required for invalid WSDL url."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetImportedXSD
parameter_list|()
throws|throws
name|Exception
block|{
name|ServletUnitClient
name|client
init|=
name|newClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|setExceptionsThrownOnErrorStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebRequest
name|req
init|=
operator|new
name|GetMethodQueryWebRequest
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter?wsdl"
argument_list|)
decl_stmt|;
name|WebResponse
name|res
init|=
name|client
operator|.
name|getResponse
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|res
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|res
operator|.
name|getText
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|contains
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter?wsdl=test_import.xsd"
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|GetMethodQueryWebRequest
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services/greeter?wsdl=test_import.xsd"
argument_list|)
expr_stmt|;
name|res
operator|=
name|client
operator|.
name|getResponse
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|res
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|=
name|res
operator|.
name|getText
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml"
argument_list|,
name|res
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"the xsd should contain the completType SimpleStruct"
argument_list|,
name|text
operator|.
name|contains
argument_list|(
literal|"<complexType name=\"SimpleStruct\">"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinding
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|ep
init|=
name|Endpoint
operator|.
name|create
argument_list|(
literal|"http://schemas.xmlsoap.org/wsdl/soap/http"
argument_list|,
operator|new
name|HelloImpl
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ep
operator|.
name|getBinding
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|WebService
argument_list|(
name|name
operator|=
literal|"Hello"
argument_list|,
name|portName
operator|=
literal|"HelloPort"
argument_list|,
name|serviceName
operator|=
literal|"HelloService"
argument_list|,
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/hello"
argument_list|)
specifier|public
specifier|static
class|class
name|HelloImpl
block|{
specifier|public
name|String
name|hello
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|"Hello "
operator|+
name|name
return|;
block|}
block|}
annotation|@
name|WebService
argument_list|(
name|serviceName
operator|=
literal|"SOAPService"
argument_list|,
name|portName
operator|=
literal|"SoapPort"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.hello_world_soap_http.Greeter"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/hello_world_soap_http"
argument_list|)
specifier|public
specifier|static
class|class
name|NoWsdlGreeter
extends|extends
name|BaseGreeterImpl
block|{       }
block|}
end_class

end_unit

