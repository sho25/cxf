begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms
operator|.
name|testsuite
operator|.
name|testcases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms
operator|.
name|testsuite
operator|.
name|util
operator|.
name|JMSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testsuite
operator|.
name|testcase
operator|.
name|MessagePropertiesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testsuite
operator|.
name|testcase
operator|.
name|TestCaseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|EmbeddedJMSBrokerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSMessageHeadersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|spec
operator|.
name|JMSSpecConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSOAPJMSTestSuite
extends|extends
name|AbstractBusClientServerTestBase
block|{
comment|/**      *       */
specifier|public
name|AbstractSOAPJMSTestSuite
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|T2
name|getPort
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|portName
parameter_list|,
name|Class
argument_list|<
name|T1
argument_list|>
name|serviceClass
parameter_list|,
name|Class
argument_list|<
name|T2
argument_list|>
name|portTypeClass
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|namespace
init|=
literal|"http://cxf.apache.org/jms_simple"
decl_stmt|;
name|QName
name|qServiceName
init|=
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|QName
name|qPortName
init|=
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|portName
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_spec_testsuite.wsdl"
argument_list|)
decl_stmt|;
name|EmbeddedJMSBrokerLauncher
operator|.
name|updateWsdlExtensors
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|wsdl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Service
argument_list|>
name|svcls
init|=
name|serviceClass
operator|.
name|asSubclass
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Service
argument_list|>
name|serviceConstructor
init|=
name|svcls
operator|.
name|getConstructor
argument_list|(
name|URL
operator|.
name|class
argument_list|,
name|QName
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|serviceConstructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|wsdl
block|,
name|qServiceName
block|}
argument_list|)
decl_stmt|;
return|return
name|service
operator|.
name|getPort
argument_list|(
name|qPortName
argument_list|,
name|portTypeClass
argument_list|)
return|;
block|}
specifier|public
name|void
name|checkJMSProperties
parameter_list|(
name|Message
name|message
parameter_list|,
name|MessagePropertiesType
name|messageProperties
parameter_list|)
throws|throws
name|JMSException
block|{
comment|// todo messagetype
comment|// todo messageid
if|if
condition|(
name|messageProperties
operator|.
name|isSetDeliveryMode
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getDeliveryMode
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetPriority
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getPriority
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetExpiration
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getJMSExpiration
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getExpiration
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetReplyTo
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getReplyTo
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getJMSReplyTo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getReplyTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetCorrelationID
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getCorrelationID
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetDestination
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getDestination
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getJMSDestination
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetRedelivered
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|isRedelivered
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetBindingVersion
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getBindingVersion
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getStringProperty
argument_list|(
name|JMSSpecConstants
operator|.
name|BINDINGVERSION_FIELD
argument_list|)
argument_list|,
name|messageProperties
operator|.
name|getBindingVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetTargetService
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getTargetService
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getStringProperty
argument_list|(
name|JMSSpecConstants
operator|.
name|TARGETSERVICE_FIELD
argument_list|)
argument_list|,
name|messageProperties
operator|.
name|getTargetService
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetContentType
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getContentType
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getStringProperty
argument_list|(
name|JMSSpecConstants
operator|.
name|CONTENTTYPE_FIELD
argument_list|)
argument_list|,
name|messageProperties
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetSoapAction
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getSoapAction
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getStringProperty
argument_list|(
name|JMSSpecConstants
operator|.
name|SOAPACTION_FIELD
argument_list|)
argument_list|,
name|messageProperties
operator|.
name|getSoapAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetRequestURI
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getRequestURI
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getStringProperty
argument_list|(
name|JMSSpecConstants
operator|.
name|REQUESTURI_FIELD
argument_list|)
argument_list|,
name|messageProperties
operator|.
name|getRequestURI
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetIsFault
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|message
operator|.
name|getBooleanProperty
argument_list|(
name|JMSSpecConstants
operator|.
name|ISFAULT_FIELD
argument_list|)
argument_list|,
name|messageProperties
operator|.
name|isIsFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// todo messagebody
block|}
specifier|public
name|void
name|checkJMSProperties
parameter_list|(
name|TestCaseType
name|testcase
parameter_list|,
name|JMSMessageHeadersType
name|requestHeader
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|testcase
operator|.
name|getRequestMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checkJMSProperties
argument_list|(
name|testcase
operator|.
name|getRequestMessage
argument_list|()
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkJMSProperties
parameter_list|(
name|TestCaseType
name|testcase
parameter_list|,
name|JMSMessageHeadersType
name|requestHeader
parameter_list|,
name|JMSMessageHeadersType
name|responseHeader
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|testcase
operator|.
name|getRequestMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checkJMSProperties
argument_list|(
name|testcase
operator|.
name|getRequestMessage
argument_list|()
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testcase
operator|.
name|getResponseMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checkJMSProperties
argument_list|(
name|testcase
operator|.
name|getResponseMessage
argument_list|()
argument_list|,
name|responseHeader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestHeader
operator|.
name|getJMSCorrelationID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|requestHeader
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|,
name|responseHeader
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|requestHeader
operator|.
name|getJMSMessageID
argument_list|()
argument_list|,
name|responseHeader
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkJMSProperties
parameter_list|(
name|MessagePropertiesType
name|messageProperties
parameter_list|,
name|JMSMessageHeadersType
name|header
parameter_list|)
block|{
comment|// todo messagetype
comment|// todo messageid
if|if
condition|(
name|messageProperties
operator|.
name|isSetDeliveryMode
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|header
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getDeliveryMode
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetPriority
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|header
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getPriority
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*          * if (messageProperties.isSetExpiration()) { assertEquals(header.getJMSExpiration(),          * messageProperties.getExpiration().intValue()); }          */
comment|/*          * if (messageProperties.isSetReplyTo()&& !messageProperties.getReplyTo().trim().equals("")) {          * assertEquals(header.getJMSReplyTo().toString(), messageProperties.getReplyTo()); }          */
comment|// correlationid
comment|/*          * if (messageProperties.isSetDestination()&& !messageProperties.getDestination().trim().equals(""))          * { assertEquals(header.get.toString(), messageProperties.getDestination()); }          */
if|if
condition|(
name|messageProperties
operator|.
name|isSetBindingVersion
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getBindingVersion
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|header
operator|.
name|getSOAPJMSBindingVersion
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getBindingVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetTargetService
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getTargetService
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|header
operator|.
name|getSOAPJMSTargetService
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getTargetService
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetContentType
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getContentType
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|header
operator|.
name|getSOAPJMSContentType
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetSoapAction
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getSoapAction
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|header
operator|.
name|getSOAPJMSSOAPAction
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getSoapAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetRequestURI
argument_list|()
operator|&&
operator|!
name|messageProperties
operator|.
name|getRequestURI
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|header
operator|.
name|getSOAPJMSRequestURI
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|getRequestURI
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageProperties
operator|.
name|isSetIsFault
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|header
operator|.
name|isSOAPJMSIsFault
argument_list|()
argument_list|,
name|messageProperties
operator|.
name|isIsFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// todo messagebody
block|}
specifier|public
name|void
name|twoWayTestWithCreateMessage
parameter_list|(
specifier|final
name|TestCaseType
name|testcase
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|address
init|=
name|testcase
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|JMSConfiguration
name|jmsConfig
init|=
name|JMSTestUtil
operator|.
name|getInitJMSConfiguration
argument_list|(
name|address
argument_list|)
decl_stmt|;
specifier|final
name|JmsTemplate
name|jmsTemplate
init|=
name|JMSFactory
operator|.
name|createJmsTemplate
argument_list|(
name|jmsConfig
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|replyToDestination
init|=
name|JMSFactory
operator|.
name|resolveOrCreateDestination
argument_list|(
name|jmsTemplate
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
class|class
name|JMSConduitMessageCreator
implements|implements
name|MessageCreator
block|{
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
decl_stmt|;
specifier|public
name|javax
operator|.
name|jms
operator|.
name|Message
name|createMessage
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|jmsMessage
operator|=
name|JMSTestUtil
operator|.
name|buildJMSMessageFromTestCase
argument_list|(
name|testcase
argument_list|,
name|session
argument_list|,
name|replyToDestination
argument_list|)
expr_stmt|;
return|return
name|jmsMessage
return|;
block|}
specifier|public
name|String
name|getMessageID
parameter_list|()
block|{
if|if
condition|(
name|jmsMessage
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|jmsMessage
operator|.
name|getJMSMessageID
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
name|JMSConduitMessageCreator
name|messageCreator
init|=
operator|new
name|JMSConduitMessageCreator
argument_list|()
decl_stmt|;
name|jmsTemplate
operator|.
name|send
argument_list|(
name|jmsConfig
operator|.
name|getTargetDestination
argument_list|()
argument_list|,
name|messageCreator
argument_list|)
expr_stmt|;
name|String
name|messageId
init|=
name|messageCreator
operator|.
name|getMessageID
argument_list|()
decl_stmt|;
name|String
name|messageSelector
init|=
literal|"JMSCorrelationID = '"
operator|+
name|messageId
operator|+
literal|"'"
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|replyMessage
init|=
name|jmsTemplate
operator|.
name|receiveSelected
argument_list|(
name|replyToDestination
argument_list|,
name|messageSelector
argument_list|)
decl_stmt|;
name|checkReplyMessage
argument_list|(
name|replyMessage
argument_list|,
name|testcase
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkReplyMessage
parameter_list|(
name|Message
name|replyMessage
parameter_list|,
name|TestCaseType
name|testcase
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkJMSProperties
argument_list|(
name|replyMessage
argument_list|,
name|testcase
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

