begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|microprofile
operator|.
name|rest
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|config
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|config
operator|.
name|spi
operator|.
name|ConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|config
operator|.
name|spi
operator|.
name|ConfigProviderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|config
operator|.
name|spi
operator|.
name|ConfigSource
import|;
end_import

begin_class
specifier|public
class|class
name|MockConfigProviderResolver
extends|extends
name|ConfigProviderResolver
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configValues
decl_stmt|;
specifier|private
specifier|final
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|propertyType
parameter_list|)
block|{
name|String
name|value
init|=
name|configValues
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|propertyType
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
name|propertyType
operator|.
name|cast
argument_list|(
name|value
argument_list|)
return|;
block|}
if|if
condition|(
name|propertyType
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
return|return
name|propertyType
operator|.
name|cast
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|getOptionalValue
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|propertyType
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|getValue
argument_list|(
name|propertyName
argument_list|,
name|propertyType
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getPropertyNames
parameter_list|()
block|{
return|return
name|configValues
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ConfigSource
argument_list|>
name|getConfigSources
parameter_list|()
block|{
name|ConfigSource
name|source
init|=
operator|new
name|ConfigSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|configValues
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|configValues
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"stub"
return|;
block|}
block|}
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|source
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|MockConfigProviderResolver
parameter_list|()
block|{
name|configValues
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MockConfigProviderResolver
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configValues
parameter_list|)
block|{
name|this
operator|.
name|configValues
operator|=
name|configValues
expr_stmt|;
block|}
specifier|public
name|void
name|setConfigValues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configValues
parameter_list|)
block|{
name|this
operator|.
name|configValues
operator|.
name|putAll
argument_list|(
name|configValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Config
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
annotation|@
name|Override
specifier|public
name|Config
name|getConfig
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
return|return
name|config
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConfigBuilder
name|getBuilder
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerConfig
parameter_list|(
name|Config
name|newConfig
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseConfig
parameter_list|(
name|Config
name|newConfig
parameter_list|)
block|{
name|configValues
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

