begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|http_undertow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|security
operator|.
name|idm
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|security
operator|.
name|idm
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|security
operator|.
name|idm
operator|.
name|DigestCredential
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|security
operator|.
name|idm
operator|.
name|IdentityManager
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|security
operator|.
name|idm
operator|.
name|PasswordCredential
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|HexConverter
import|;
end_import

begin_class
class|class
name|MapIdentityManager
implements|implements
name|IdentityManager
block|{
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF_8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|char
index|[]
argument_list|>
name|users
decl_stmt|;
name|MapIdentityManager
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|char
index|[]
argument_list|>
name|users
parameter_list|)
block|{
name|this
operator|.
name|users
operator|=
name|users
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Account
name|verify
parameter_list|(
name|Account
name|account
parameter_list|)
block|{
comment|// An existing account so for testing assume still valid.
return|return
name|account
return|;
block|}
annotation|@
name|Override
specifier|public
name|Account
name|verify
parameter_list|(
name|String
name|id
parameter_list|,
name|Credential
name|credential
parameter_list|)
block|{
name|Account
name|account
init|=
name|getAccount
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|!=
literal|null
operator|&&
name|verifyCredential
argument_list|(
name|account
argument_list|,
name|credential
argument_list|)
condition|)
block|{
return|return
name|account
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Account
name|verify
parameter_list|(
name|Credential
name|credential
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|verifyCredential
parameter_list|(
name|Account
name|account
parameter_list|,
name|Credential
name|credential
parameter_list|)
block|{
if|if
condition|(
name|credential
operator|instanceof
name|PasswordCredential
condition|)
block|{
name|char
index|[]
name|password
init|=
operator|(
operator|(
name|PasswordCredential
operator|)
name|credential
operator|)
operator|.
name|getPassword
argument_list|()
decl_stmt|;
name|char
index|[]
name|expectedPassword
init|=
name|users
operator|.
name|get
argument_list|(
name|account
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|password
argument_list|,
name|expectedPassword
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|credential
operator|instanceof
name|DigestCredential
condition|)
block|{
name|DigestCredential
name|digCred
init|=
operator|(
name|DigestCredential
operator|)
name|credential
decl_stmt|;
name|MessageDigest
name|digest
init|=
literal|null
decl_stmt|;
try|try
block|{
name|digest
operator|=
name|digCred
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|getMessageDigest
argument_list|()
expr_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|account
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|digest
operator|.
name|update
argument_list|(
operator|(
name|byte
operator|)
literal|':'
argument_list|)
expr_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|digCred
operator|.
name|getRealm
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|digest
operator|.
name|update
argument_list|(
operator|(
name|byte
operator|)
literal|':'
argument_list|)
expr_stmt|;
name|char
index|[]
name|expectedPassword
init|=
name|users
operator|.
name|get
argument_list|(
name|account
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|digest
operator|.
name|update
argument_list|(
operator|new
name|String
argument_list|(
name|expectedPassword
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|digCred
operator|.
name|verifyHA1
argument_list|(
name|HexConverter
operator|.
name|convertToHexBytes
argument_list|(
name|digest
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported Algorithm"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|digest
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|Account
name|getAccount
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|users
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
operator|new
name|Account
argument_list|()
block|{
specifier|private
specifier|final
name|Principal
name|principal
init|=
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|principal
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

