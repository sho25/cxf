begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|wssec
operator|.
name|examples
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|wssec
operator|.
name|examples
operator|.
name|common
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|wssec
operator|.
name|examples
operator|.
name|saml
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|wssec
operator|.
name|examples
operator|.
name|sts
operator|.
name|STSServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|example
operator|.
name|contract
operator|.
name|doubleit
operator|.
name|DoubleItPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * A set of tests for SAML Tokens using policies defined in the OASIS spec:  * "WS-SecurityPolicy Examples Version 1.0".  */
end_comment

begin_class
specifier|public
class|class
name|SamlTokenTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|PORT
init|=
name|allocatePort
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|PORT2
init|=
name|allocatePort
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|STS_PORT
init|=
name|allocatePort
argument_list|(
name|STSServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://www.example.org/contract/DoubleIt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_QNAME
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItService"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|STSServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|stopAllServers
argument_list|()
expr_stmt|;
block|}
comment|/**      * 2.3.1.1 (WSS1.0) SAML1.1 Assertion (Bearer)      */
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testBearer
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client/client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SpringBusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|SpringBusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|SamlTokenTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DoubleItSaml.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
name|QName
name|portQName
init|=
operator|new
name|QName
argument_list|(
name|NAMESPACE
argument_list|,
literal|"DoubleItBearerPort"
argument_list|)
decl_stmt|;
name|DoubleItPortType
name|samlPort
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portQName
argument_list|,
name|DoubleItPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|samlPort
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
name|samlPort
operator|.
name|doubleIt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|samlPort
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * 2.3.1.2 (WSS1.0) SAML1.1 Assertion (Sender Vouches) over SSL     @org.junit.Test     public void testTLSSenderVouches() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = SamlTokenTest.class.getResource("client/client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = SamlTokenTest.class.getResource("DoubleItSaml.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTLSSenderVouchesPort");         DoubleItPortType samlPort =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(samlPort, PORT2);                  samlPort.doubleIt(25);                  ((java.io.Closeable)samlPort).close();         bus.shutdown(true);     }          /**      * 2.3.1.3 (WSS1.0) SAML1.1 Assertion (HK) over SSL     @org.junit.Test     public void testTLSHOKSignedEndorsing() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = SamlTokenTest.class.getResource("client/client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = SamlTokenTest.class.getResource("DoubleItSaml.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTLSHOKSignedEndorsingPort");         DoubleItPortType samlPort =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(samlPort, PORT2);                  samlPort.doubleIt(25);                  ((java.io.Closeable)samlPort).close();         bus.shutdown(true);     }          /**      * 2.3.1.4 (WSS1.0) SAML1.1 Sender Vouches with X.509 Certificates, Sign, Optional Encrypt     @org.junit.Test     public void testAsymmetricSigned() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = SamlTokenTest.class.getResource("client/client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = SamlTokenTest.class.getResource("DoubleItSaml.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricSignedPort");         DoubleItPortType samlPort =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(samlPort, PORT);                  samlPort.doubleIt(25);                  ((java.io.Closeable)samlPort).close();         bus.shutdown(true);     }          /**      * 2.3.1.5 (WSS1.0) SAML1.1 Holder of Key, Sign, Optional Encrypt     @org.junit.Test     public void testAsymmetricInitiator() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = SamlTokenTest.class.getResource("client/client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = SamlTokenTest.class.getResource("DoubleItSaml.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricInitiatorPort");         DoubleItPortType samlPort =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(samlPort, PORT);                  samlPort.doubleIt(25);                  ((java.io.Closeable)samlPort).close();         bus.shutdown(true);     }               /**      * 2.3.2.1 (WSS1.1) SAML 2.0 Bearer     @org.junit.Test     public void testAsymmetricSaml2Bearer() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = SamlTokenTest.class.getResource("client/client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = SamlTokenTest.class.getResource("DoubleItSaml.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItAsymmetricSaml2BearerPort");         DoubleItPortType samlPort =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(samlPort, PORT);                  samlPort.doubleIt(25);                  ((java.io.Closeable)samlPort).close();         bus.shutdown(true);     }          /**      * 2.3.2.2 (WSS1.1) SAML2.0 Sender Vouches over SSL     @org.junit.Test     public void testTLSSenderVouchesSaml2() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = SamlTokenTest.class.getResource("client/client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = SamlTokenTest.class.getResource("DoubleItSaml.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTLSSenderVouchesSaml2Port");         DoubleItPortType samlPort =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(samlPort, PORT2);                  samlPort.doubleIt(25);                  ((java.io.Closeable)samlPort).close();         bus.shutdown(true);     }          /**      * 2.3.2.3 (WSS1.1) SAML2.0 HoK over SSL     @org.junit.Test     public void testTLSHOKSignedEndorsingSaml2() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = SamlTokenTest.class.getResource("client/client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = SamlTokenTest.class.getResource("DoubleItSaml.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItTLSHOKSignedEndorsingSaml2Port");         DoubleItPortType samlPort =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(samlPort, PORT2);                  samlPort.doubleIt(25);                  ((java.io.Closeable)samlPort).close();         bus.shutdown(true);     }          /**      * 2.3.2.4 (WSS1.1) SAML1.1/2.0 Sender Vouches with X.509 Certificate, Sign, Encrypt     @org.junit.Test     public void testSymmetricSV() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = SamlTokenTest.class.getResource("client/client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = SamlTokenTest.class.getResource("DoubleItSaml.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItSymmetricSVPort");         DoubleItPortType samlPort =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(samlPort, PORT);                  samlPort.doubleIt(25);                  ((java.io.Closeable)samlPort).close();         bus.shutdown(true);     }          /**      * 2.3.2.5 (WSS1.1) SAML1.1/2.0 Holder of Key, Sign, Encrypt     @org.junit.Test     public void testSymmetricIssuedToken() throws Exception {          SpringBusFactory bf = new SpringBusFactory();         URL busFile = SamlTokenTest.class.getResource("client/client.xml");          Bus bus = bf.createBus(busFile.toString());         SpringBusFactory.setDefaultBus(bus);         SpringBusFactory.setThreadDefaultBus(bus);          URL wsdl = SamlTokenTest.class.getResource("DoubleItSaml.wsdl");         Service service = Service.create(wsdl, SERVICE_QNAME);         QName portQName = new QName(NAMESPACE, "DoubleItSymmetricIssuedTokenPort");         DoubleItPortType samlPort =                  service.getPort(portQName, DoubleItPortType.class);         updateAddressPort(samlPort, PORT);         updateSTSPort((BindingProvider)samlPort, STS_PORT);                  samlPort.doubleIt(25);                  ((java.io.Closeable)samlPort).close();         bus.shutdown(true);     }     */
specifier|private
specifier|static
name|void
name|updateSTSPort
parameter_list|(
name|BindingProvider
name|p
parameter_list|,
name|String
name|port
parameter_list|)
block|{
name|STSClient
name|stsClient
init|=
operator|(
name|STSClient
operator|)
name|p
operator|.
name|getRequestContext
argument_list|()
operator|.
name|get
argument_list|(
name|SecurityConstants
operator|.
name|STS_CLIENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|stsClient
operator|!=
literal|null
condition|)
block|{
name|String
name|location
init|=
name|stsClient
operator|.
name|getWsdlLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|contains
argument_list|(
literal|"8080"
argument_list|)
condition|)
block|{
name|stsClient
operator|.
name|setWsdlLocation
argument_list|(
name|location
operator|.
name|replace
argument_list|(
literal|"8080"
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|location
operator|.
name|contains
argument_list|(
literal|"8443"
argument_list|)
condition|)
block|{
name|stsClient
operator|.
name|setWsdlLocation
argument_list|(
name|location
operator|.
name|replace
argument_list|(
literal|"8443"
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

