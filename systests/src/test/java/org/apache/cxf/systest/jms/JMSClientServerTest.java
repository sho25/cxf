begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|State
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|BadRecordLitFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HWByteMsgService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldOneWayPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldOneWayQueueService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldPubSubPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldPubSubService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldQueueDecoupledOneWaysService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldServiceAppCorrelationIDNoPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldServiceAppCorrelationIDStaticPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldServiceRuntimeCorrelationIDDynamicPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|HelloWorldServiceRuntimeCorrelationIDStaticPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|hello_world_jms
operator|.
name|NoSuchCodeLitFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms_greeter
operator|.
name|JMSGreeterPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms_greeter
operator|.
name|JMSGreeterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms_greeter
operator|.
name|JMSGreeterService2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms_mtom
operator|.
name|JMSMTOMPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms_mtom
operator|.
name|JMSMTOMService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
operator|.
name|Hello
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSMessageHeadersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSNamingPropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSPropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|spec
operator|.
name|JMSSpecConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_doc_lit
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_doc_lit
operator|.
name|PingMeFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_doc_lit
operator|.
name|SOAPService2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
specifier|public
class|class
name|JMSClientServerTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"activemq.store.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
literal|"activemq.store.dir"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"activemq.store.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|put
argument_list|(
literal|"java.util.logging.config.file"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.util.logging.config.file"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|EmbeddedJMSBrokerLauncher
operator|.
name|class
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|URL
name|getWSDLURL
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getServiceName
parameter_list|(
name|QName
name|q
parameter_list|)
block|{
return|return
name|q
return|;
block|}
specifier|public
name|QName
name|getPortName
parameter_list|(
name|QName
name|q
parameter_list|)
block|{
return|return
name|q
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SOAPService2"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SoapPort2"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/hello_world_doc_lit.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService2
name|service
init|=
operator|new
name|SOAPService2
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|greeter
argument_list|)
decl_stmt|;
name|EndpointInfo
name|ei
init|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|AddressType
name|address
init|=
name|ei
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|AddressType
argument_list|()
argument_list|,
name|AddressType
operator|.
name|class
argument_list|)
decl_stmt|;
name|JMSNamingPropertyType
name|name
init|=
operator|new
name|JMSNamingPropertyType
argument_list|()
decl_stmt|;
name|JMSNamingPropertyType
name|password
init|=
operator|new
name|JMSNamingPropertyType
argument_list|()
decl_stmt|;
name|name
operator|.
name|setName
argument_list|(
literal|"java.naming.security.principal"
argument_list|)
expr_stmt|;
name|name
operator|.
name|setValue
argument_list|(
literal|"ivan"
argument_list|)
expr_stmt|;
name|password
operator|.
name|setName
argument_list|(
literal|"java.naming.security.credentials"
argument_list|)
expr_stmt|;
name|password
operator|.
name|setValue
argument_list|(
literal|"the-terrible"
argument_list|)
expr_stmt|;
name|address
operator|.
name|getJMSNamingProperty
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|address
operator|.
name|getJMSNamingProperty
argument_list|()
operator|.
name|add
argument_list|(
name|password
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"test String"
argument_list|)
expr_stmt|;
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|pingMe
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown FaultException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PingMeFault
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|docBasicJmsDestinationTest
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SOAPService6"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_doc_lit"
argument_list|,
literal|"SoapPort6"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/hello_world_doc_lit.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService2
name|service
init|=
operator|new
name|SOAPService2
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"test String"
argument_list|)
expr_stmt|;
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|pingMe
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown FaultException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PingMeFault
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldService
name|service
init|=
operator|new
name|HelloWorldService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|HelloWorldPortType
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|testRpcLitFault
argument_list|(
literal|"BadRecordLitFault"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown BadRecoedLitFault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRecordLitFault
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|greeter
operator|.
name|testRpcLitFault
argument_list|(
literal|"NoSuchCodeLitFault"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown NoSuchCodeLitFault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchCodeLitFault
name|nslf
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
name|t
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HWByteMsgService"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HWByteMsgService
name|service
init|=
operator|new
name|HWByteMsgService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|HelloWorldPortType
name|greeter
init|=
name|service
operator|.
name|getHWSByteMsgPort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneWayTopicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPubSubService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPubSubPort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldPubSubService
name|service
init|=
operator|new
name|HelloWorldPubSubService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
try|try
block|{
name|HelloWorldPubSubPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPubSubPort
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"JMS:PubSub:Milestone-"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
comment|//Give some time to complete one-way calls.
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJmsDestTopicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"JmsDestinationPubSubService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"JmsDestinationPubSubPort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldPubSubService
name|service
init|=
operator|new
name|HelloWorldPubSubService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
try|try
block|{
name|HelloWorldPubSubPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPubSubPort
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"JMS:PubSub:Milestone-"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
comment|//Give some time to complete one-way calls.
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionsWithinSpring
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassPathXmlApplicationContext
name|ctx
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/org/apache/cxf/systest/jms/JMSClients.xml"
block|}
argument_list|)
decl_stmt|;
name|HelloWorldPortType
name|greeter
init|=
operator|(
name|HelloWorldPortType
operator|)
name|ctx
operator|.
name|getBean
argument_list|(
literal|"jmsRPCClient"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|greeter
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|testRpcLitFault
argument_list|(
literal|"BadRecordLitFault"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown BadRecoedLitFault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRecordLitFault
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|greeter
operator|.
name|testRpcLitFault
argument_list|(
literal|"NoSuchCodeLitFault"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown NoSuchCodeLitFault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchCodeLitFault
name|nslf
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
name|HelloWorldOneWayPort
name|greeter1
init|=
operator|(
name|HelloWorldOneWayPort
operator|)
name|ctx
operator|.
name|getBean
argument_list|(
literal|"jmsQueueOneWayServiceClient"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|greeter1
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter1
operator|.
name|greetMeOneWay
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"There should not throw the exception"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneWayQueueConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldOneWayQueueService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldOneWayQueuePort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldOneWayQueueService
name|service
init|=
operator|new
name|HelloWorldOneWayQueueService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
try|try
block|{
name|HelloWorldOneWayPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldOneWayPort
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"JMS:Queue:Milestone-"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
comment|//Give some time to complete one-way calls.
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueDecoupledOneWaysConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldQueueDecoupledOneWaysService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldQueueDecoupledOneWaysPort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldQueueDecoupledOneWaysService
name|service
init|=
operator|new
name|HelloWorldQueueDecoupledOneWaysService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Endpoint
name|requestEndpoint
init|=
literal|null
decl_stmt|;
name|Endpoint
name|replyEndpoint
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HelloWorldOneWayPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldOneWayPort
operator|.
name|class
argument_list|)
decl_stmt|;
name|GreeterImplQueueDecoupledOneWays
name|requestServant
init|=
operator|new
name|GreeterImplQueueDecoupledOneWays
argument_list|()
decl_stmt|;
name|requestEndpoint
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|""
argument_list|,
name|requestServant
argument_list|)
expr_stmt|;
name|GreeterImplQueueDecoupledOneWaysDeferredReply
name|replyServant
init|=
operator|new
name|GreeterImplQueueDecoupledOneWaysDeferredReply
argument_list|()
decl_stmt|;
name|replyEndpoint
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|""
argument_list|,
name|replyServant
argument_list|)
expr_stmt|;
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|bp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|requestHeader
init|=
operator|new
name|JMSMessageHeadersType
argument_list|()
decl_stmt|;
name|requestHeader
operator|.
name|setJMSReplyTo
argument_list|(
literal|"dynamicQueues/test.jmstransport.oneway.with.set.replyto.reply"
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
name|String
name|expectedRequest
init|=
literal|"JMS:Queue:Request"
decl_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|expectedRequest
argument_list|)
expr_stmt|;
name|String
name|request
init|=
name|requestServant
operator|.
name|ackRequestReceived
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The oneway call didn't reach its intended endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedRequest
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|requestServant
operator|.
name|proceedWithReply
argument_list|()
expr_stmt|;
name|String
name|expectedReply
init|=
name|requestServant
operator|.
name|ackReplySent
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedReply
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The decoupled one-way reply was not sent"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|reply
init|=
name|replyServant
operator|.
name|ackRequest
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|replyServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|replyServant
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The decoupled one-way reply didn't reach its intended endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedReply
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|requestEndpoint
operator|!=
literal|null
condition|)
block|{
name|requestEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|replyEndpoint
operator|!=
literal|null
condition|)
block|{
name|replyEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueOneWaySpecCompliantConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldQueueDecoupledOneWaysService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldQueueDecoupledOneWaysPort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldQueueDecoupledOneWaysService
name|service
init|=
operator|new
name|HelloWorldQueueDecoupledOneWaysService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Endpoint
name|requestEndpoint
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HelloWorldOneWayPort
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldOneWayPort
operator|.
name|class
argument_list|)
decl_stmt|;
name|GreeterImplQueueDecoupledOneWays
name|requestServant
init|=
operator|new
name|GreeterImplQueueDecoupledOneWays
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|requestEndpoint
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|""
argument_list|,
name|requestServant
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|greeter
argument_list|)
decl_stmt|;
operator|(
operator|(
name|JMSConduit
operator|)
name|client
operator|.
name|getConduit
argument_list|()
operator|)
operator|.
name|getJmsConfig
argument_list|()
operator|.
name|setEnforceSpec
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|bp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|requestHeader
init|=
operator|new
name|JMSMessageHeadersType
argument_list|()
decl_stmt|;
name|requestHeader
operator|.
name|setJMSReplyTo
argument_list|(
literal|"dynamicQueues/test.jmstransport.oneway.with.set.replyto.reply"
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
name|String
name|expectedRequest
init|=
literal|"JMS:Queue:Request"
decl_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|expectedRequest
argument_list|)
expr_stmt|;
name|String
name|request
init|=
name|requestServant
operator|.
name|ackRequestReceived
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The oneway call didn't reach its intended endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedRequest
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|requestServant
operator|.
name|proceedWithReply
argument_list|()
expr_stmt|;
name|boolean
name|ack
init|=
name|requestServant
operator|.
name|ackNoReplySent
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ack
condition|)
block|{
if|if
condition|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|requestServant
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"The decoupled one-way reply was sent"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|requestEndpoint
operator|!=
literal|null
condition|)
block|{
name|requestEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
interface|interface
name|CorrelationIDFactory
block|{
name|String
name|createCorrealtionID
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|ClientRunnable
implements|implements
name|Runnable
block|{
specifier|private
name|HelloWorldPortType
name|port
decl_stmt|;
specifier|private
name|CorrelationIDFactory
name|corrFactory
decl_stmt|;
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|private
name|Throwable
name|ex
decl_stmt|;
specifier|public
name|ClientRunnable
parameter_list|(
name|HelloWorldPortType
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
specifier|public
name|ClientRunnable
parameter_list|(
name|HelloWorldPortType
name|port
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
specifier|public
name|ClientRunnable
parameter_list|(
name|HelloWorldPortType
name|port
parameter_list|,
name|CorrelationIDFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|corrFactory
operator|=
name|factory
expr_stmt|;
block|}
specifier|public
name|Throwable
name|getException
parameter_list|()
block|{
return|return
name|ex
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|port
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|bp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|requestHeader
init|=
operator|new
name|JMSMessageHeadersType
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|request
init|=
literal|"World"
operator|+
operator|(
operator|(
name|prefix
operator|!=
literal|null
operator|)
condition|?
literal|":"
operator|+
name|prefix
else|:
literal|""
operator|)
decl_stmt|;
name|String
name|correlationID
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|corrFactory
operator|!=
literal|null
condition|)
block|{
name|correlationID
operator|=
name|corrFactory
operator|.
name|createCorrealtionID
argument_list|()
expr_stmt|;
name|requestHeader
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationID
argument_list|)
expr_stmt|;
name|request
operator|+=
literal|":"
operator|+
name|correlationID
expr_stmt|;
block|}
name|String
name|expected
init|=
literal|"Hello "
operator|+
name|request
decl_stmt|;
name|String
name|response
init|=
name|port
operator|.
name|greetMe
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response didn't match expected request"
argument_list|,
name|expected
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|corrFactory
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|bp
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|responseHeader
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_RESPONSE_HEADERS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Request and Response CorrelationID didn't match"
argument_list|,
name|correlationID
argument_list|,
name|responseHeader
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayQueueAppCorrelationIDStaticPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldServiceAppCorrelationIDStaticPrefix"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portNameEng
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPortAppCorrelationIDStaticPrefixEng"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portNameSales
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPortAppCorrelationIDStaticPrefixSales"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldServiceAppCorrelationIDStaticPrefix
name|service
init|=
operator|new
name|HelloWorldServiceAppCorrelationIDStaticPrefix
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|ClientRunnable
name|engClient
init|=
operator|new
name|ClientRunnable
argument_list|(
name|service
operator|.
name|getPort
argument_list|(
name|portNameEng
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|CorrelationIDFactory
argument_list|()
block|{
specifier|private
name|int
name|counter
decl_stmt|;
specifier|public
name|String
name|createCorrealtionID
parameter_list|()
block|{
return|return
literal|"com.mycompany.eng:"
operator|+
name|counter
operator|++
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ClientRunnable
name|salesClient
init|=
operator|new
name|ClientRunnable
argument_list|(
name|service
operator|.
name|getPort
argument_list|(
name|portNameSales
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|CorrelationIDFactory
argument_list|()
block|{
specifier|private
name|int
name|counter
decl_stmt|;
specifier|public
name|String
name|createCorrealtionID
parameter_list|()
block|{
return|return
literal|"com.mycompany.sales:"
operator|+
name|counter
operator|++
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[]
block|{
operator|new
name|Thread
argument_list|(
name|engClient
argument_list|)
block|,
operator|new
name|Thread
argument_list|(
name|salesClient
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No terminated state: "
operator|+
name|t
operator|.
name|getState
argument_list|()
argument_list|,
name|t
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|TERMINATED
argument_list|)
expr_stmt|;
block|}
name|Throwable
name|e
init|=
operator|(
name|engClient
operator|.
name|getException
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|engClient
operator|.
name|getException
argument_list|()
else|:
operator|(
name|salesClient
operator|.
name|getException
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|salesClient
operator|.
name|getException
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|message
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|ste
range|:
name|e
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
name|message
operator|.
name|append
argument_list|(
name|ste
operator|.
name|toString
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* TO DO:      * This tests shows a missing QoS. When CXF clients share a named (persistent) reply queue      *  with an application provided correlationID there will be a guaranteed response      * message loss.       *       * A large number of threads is used to ensure message loss and avoid a false       * positive assertion      */
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayQueueAppCorrelationIDNoPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldServiceAppCorrelationIDNoPrefix"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPortAppCorrelationIDNoPrefix"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldServiceAppCorrelationIDNoPrefix
name|service
init|=
operator|new
name|HelloWorldServiceAppCorrelationIDNoPrefix
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ClientRunnable
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<
name|ClientRunnable
argument_list|>
argument_list|()
decl_stmt|;
name|HelloWorldPortType
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ClientRunnable
name|client
init|=
operator|new
name|ClientRunnable
argument_list|(
name|port
argument_list|,
operator|new
name|CorrelationIDFactory
argument_list|()
block|{
specifier|public
name|String
name|createCorrealtionID
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|//Sleep for up to 10 seconds.   The timeout should be at 5 seconds so this
comment|//should bail earlier
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|ClientRunnable
name|client
range|:
name|clients
control|)
block|{
if|if
condition|(
name|client
operator|.
name|getException
argument_list|()
operator|!=
literal|null
operator|&&
name|client
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Timeout"
argument_list|)
condition|)
block|{
comment|// exceptions expected
return|return;
block|}
block|}
block|}
name|fail
argument_list|(
literal|"This is a negative pass. If this test passed this means that the missing QoS"
operator|+
literal|" has been added to the runtime or an unexpected exception received. "
operator|+
literal|" If latter is true, then read method comments for details on missing QoS"
operator|+
literal|" and change this test to fail on exception"
argument_list|)
expr_stmt|;
block|}
comment|/*      * This tests a use case where there is a shared request and reply queues between      * two servers (Eng and Sales). However each server has a design time provided selector      * which allows them to share the same queue and do not consume the other's      * messages.       *       * The clients to these two servers use the same request and reply queues.      * An Eng client uses a design time selector prefix to form request message       * correlationID and to form a reply consumer that filters only reply      * messages originated from the Eng server. To differentiate between      * one Eng client instance from another this suffix is supplemented by      * a runtime value of ConduitId which has 1-1 relation to a client instance      * This guarantees that an Eng client instance will only consume its own reply       * messages.       *       * In case of a single client instance being shared among multiple threads      * the third portion of the request message correlationID,       * an atomic rolling message counter, ensures that each message gets a unique ID      *        * So the model is:      *       * Many concurrent Sales clients to a single request and reply queues (Q1, Q2)       * to a single Sales server      * Many concurrent Eng clients to a single request and reply queues (Q1, Q2)       * to a single Eng server      */
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayQueueRuntimeCorrelationIDStaticPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldServiceRuntimeCorrelationIDStaticPrefix"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portNameEng
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPortRuntimeCorrelationIDStaticPrefixEng"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portNameSales
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPortRuntimeCorrelationIDStaticPrefixSales"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldServiceRuntimeCorrelationIDStaticPrefix
name|service
init|=
operator|new
name|HelloWorldServiceRuntimeCorrelationIDStaticPrefix
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ClientRunnable
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<
name|ClientRunnable
argument_list|>
argument_list|()
decl_stmt|;
name|HelloWorldPortType
name|portEng
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portNameEng
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|HelloWorldPortType
name|portSales
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portNameSales
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ClientRunnable
name|client
init|=
operator|new
name|ClientRunnable
argument_list|(
name|portEng
argument_list|,
literal|"com.mycompany.eng:"
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|=
operator|new
name|ClientRunnable
argument_list|(
name|portSales
argument_list|,
literal|"com.mycompany.sales:"
argument_list|)
expr_stmt|;
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not terminated state: "
operator|+
name|t
operator|.
name|getState
argument_list|()
argument_list|,
name|t
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|TERMINATED
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClientRunnable
name|client
range|:
name|clients
control|)
block|{
if|if
condition|(
name|client
operator|.
name|getException
argument_list|()
operator|!=
literal|null
operator|&&
name|client
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Timeout"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|client
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayQueueRuntimeCorrelationDynamicPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldServiceRuntimeCorrelationIDDynamicPrefix"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPortRuntimeCorrelationIDDynamicPrefix"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldServiceRuntimeCorrelationIDDynamicPrefix
name|service
init|=
operator|new
name|HelloWorldServiceRuntimeCorrelationIDDynamicPrefix
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ClientRunnable
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<
name|ClientRunnable
argument_list|>
argument_list|()
decl_stmt|;
name|HelloWorldPortType
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ClientRunnable
name|client
init|=
operator|new
name|ClientRunnable
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not terminated state: "
operator|+
name|t
operator|.
name|getState
argument_list|()
argument_list|,
name|t
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|TERMINATED
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClientRunnable
name|client
range|:
name|clients
control|)
block|{
if|if
condition|(
name|client
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|client
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContextPropogation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testReturnPropertyName
init|=
literal|"Test_Prop"
decl_stmt|;
specifier|final
name|String
name|testIgnoredPropertyName
init|=
literal|"Test_Prop_No_Return"
decl_stmt|;
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/hello_world_jms"
argument_list|,
literal|"HelloWorldPort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|HelloWorldService
name|service
init|=
operator|new
name|HelloWorldService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
try|try
block|{
name|HelloWorldPortType
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HelloWorldPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|requestHeader
init|=
operator|new
name|JMSMessageHeadersType
argument_list|()
decl_stmt|;
name|requestHeader
operator|.
name|setJMSCorrelationID
argument_list|(
literal|"JMS_SAMPLE_CORRELATION_ID"
argument_list|)
expr_stmt|;
name|requestHeader
operator|.
name|setJMSExpiration
argument_list|(
literal|3600000L
argument_list|)
expr_stmt|;
name|JMSPropertyType
name|propType
init|=
operator|new
name|JMSPropertyType
argument_list|()
decl_stmt|;
name|propType
operator|.
name|setName
argument_list|(
name|testReturnPropertyName
argument_list|)
expr_stmt|;
name|propType
operator|.
name|setValue
argument_list|(
literal|"mustReturn"
argument_list|)
expr_stmt|;
name|requestHeader
operator|.
name|getProperty
argument_list|()
operator|.
name|add
argument_list|(
name|propType
argument_list|)
expr_stmt|;
name|propType
operator|=
operator|new
name|JMSPropertyType
argument_list|()
expr_stmt|;
name|propType
operator|.
name|setName
argument_list|(
name|testIgnoredPropertyName
argument_list|)
expr_stmt|;
name|propType
operator|.
name|setValue
argument_list|(
literal|"mustNotReturn"
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Milestone-"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|responseHdr
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_RESPONSE_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseHdr
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"response Header should not be null"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"CORRELATION ID should match :"
argument_list|,
literal|"JMS_SAMPLE_CORRELATION_ID"
operator|.
name|equals
argument_list|(
name|responseHdr
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"response Headers must conain the app property set in request context."
argument_list|,
name|responseHdr
operator|.
name|getProperty
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JMSPropertyType
name|p
range|:
name|responseHdr
operator|.
name|getProperty
argument_list|()
control|)
block|{
if|if
condition|(
name|testReturnPropertyName
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"response Headers must match the app property set in request context."
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMTOM
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_mtom"
argument_list|,
literal|"JMSMTOMService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_mtom"
argument_list|,
literal|"MTOMPort"
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/jms_test_mtom.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|JMSMTOMService
name|service
init|=
operator|new
name|JMSMTOMService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|JMSMTOMPortType
name|mtom
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|JMSMTOMPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Binding
name|binding
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|mtom
operator|)
operator|.
name|getBinding
argument_list|()
decl_stmt|;
operator|(
operator|(
name|SOAPBinding
operator|)
name|binding
operator|)
operator|.
name|setMTOMEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|name
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"Sam"
argument_list|)
decl_stmt|;
name|URL
name|fileURL
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/org/apache/cxf/systest/jms/JMSClientServerTest.class"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DataHandler
argument_list|>
name|handler1
init|=
operator|new
name|Holder
argument_list|<
name|DataHandler
argument_list|>
argument_list|()
decl_stmt|;
name|handler1
operator|.
name|value
operator|=
operator|new
name|DataHandler
argument_list|(
name|fileURL
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|handler1
operator|.
name|value
operator|.
name|getInputStream
argument_list|()
operator|.
name|available
argument_list|()
decl_stmt|;
name|mtom
operator|.
name|testDataHandler
argument_list|(
name|name
argument_list|,
name|handler1
argument_list|)
expr_stmt|;
name|byte
name|bytes
index|[]
init|=
name|IOUtils
operator|.
name|readBytesFromStream
argument_list|(
name|handler1
operator|.
name|value
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The response file is not same with the sent file."
argument_list|,
name|size
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecJMS
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_greeter"
argument_list|,
literal|"JMSGreeterService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_greeter"
argument_list|,
literal|"GreeterPort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_spec_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|JMSGreeterService
name|service
init|=
operator|new
name|JMSGreeterService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
name|JMSGreeterPortType
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|JMSGreeterPortType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"test String"
argument_list|)
expr_stmt|;
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWsdlExtensionSpecJMS
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_greeter"
argument_list|,
literal|"JMSGreeterService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_greeter"
argument_list|,
literal|"GreeterPort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_spec_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|JMSGreeterService
name|service
init|=
operator|new
name|JMSGreeterService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|JMSGreeterPortType
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|JMSGreeterPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|requestHeader
init|=
operator|new
name|JMSMessageHeadersType
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|requestContext
operator|=
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getRequestContext
argument_list|()
expr_stmt|;
name|requestHeader
operator|=
operator|(
name|JMSMessageHeadersType
operator|)
name|requestContext
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestHeader
operator|.
name|getSOAPJMSBindingVersion
argument_list|()
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestHeader
operator|.
name|getSOAPJMSSOAPAction
argument_list|()
argument_list|,
literal|"\"test\""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestHeader
operator|.
name|getTimeToLive
argument_list|()
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestHeader
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestHeader
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|responseHeader
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_RESPONSE_HEADERS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|responseHeader
operator|.
name|getSOAPJMSBindingVersion
argument_list|()
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|responseHeader
operator|.
name|getSOAPJMSSOAPAction
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|responseHeader
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|responseHeader
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWsdlExtensionSpecJMSPortError
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_greeter"
argument_list|,
literal|"JMSGreeterService2"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_greeter"
argument_list|,
literal|"GreeterPort2"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_spec_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|JMSGreeterService2
name|service
init|=
operator|new
name|JMSGreeterService2
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
name|JMSGreeterPortType
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|JMSGreeterPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecNoWsdlService
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"jms:jndi:dynamicQueues/test.cxf.jmstransport.queue3"
operator|+
literal|"?jndiInitialContextFactory"
operator|+
literal|"=org.apache.activemq.jndi.ActiveMQInitialContextFactory"
operator|+
literal|"&jndiConnectionFactoryName=ConnectionFactory&jndiURL=tcp://localhost:61500"
decl_stmt|;
name|JaxWsProxyFactoryBean
name|factory
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setTransportId
argument_list|(
name|JMSSpecConstants
operator|.
name|SOAP_JMS_SPECIFICIATION_TRANSPORTID
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setServiceClass
argument_list|(
name|Hello
operator|.
name|class
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|Hello
name|client
init|=
operator|(
name|Hello
operator|)
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|reply
init|=
name|client
operator|.
name|sayHi
argument_list|(
literal|" HI"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|reply
argument_list|,
literal|"get HI"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindingVersionError
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_greeter"
argument_list|,
literal|"JMSGreeterService"
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
name|getPortName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/jms_greeter"
argument_list|,
literal|"GreeterPort"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|wsdl
init|=
name|getWSDLURL
argument_list|(
literal|"/wsdl/jms_spec_test.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|JMSGreeterService
name|service
init|=
operator|new
name|JMSGreeterService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|JMSGreeterPortType
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|JMSGreeterPortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|bp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|requestHeader
init|=
operator|new
name|JMSMessageHeadersType
argument_list|()
decl_stmt|;
name|requestHeader
operator|.
name|setSOAPJMSBindingVersion
argument_list|(
literal|"0.3"
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|,
name|requestHeader
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a fault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"0.3"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|bp
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|responseHdr
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_RESPONSE_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseHdr
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"response Header should not be null"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|responseHdr
operator|.
name|isSOAPJMSIsFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

