begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|PingException
import|;
end_import

begin_comment
comment|/**  * Describe class TestHandlerBase here.  *  *  * Created: Fri Oct 21 14:02:50 2005  *  * @author<a href="mailto:codea@iona.com">codea</a>  * @version 1.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TestHandlerBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|TestHandlerBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|sid
decl_stmt|;
specifier|private
specifier|static
name|int
name|sinvokedOrder
decl_stmt|;
specifier|private
name|boolean
name|handleMessageRet
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|invokeOrderOfHandleMessage
decl_stmt|;
specifier|private
name|int
name|invokeOrderOfHandleFault
decl_stmt|;
specifier|private
name|int
name|invokeOrderOfClose
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|methodCallCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isServerSideHandler
decl_stmt|;
specifier|public
name|TestHandlerBase
parameter_list|(
name|boolean
name|serverSide
parameter_list|)
block|{
name|id
operator|=
operator|++
name|sid
expr_stmt|;
name|isServerSideHandler
operator|=
name|serverSide
expr_stmt|;
block|}
specifier|protected
name|void
name|methodCalled
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|int
name|val
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|methodCallCount
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|val
operator|=
name|methodCallCount
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"handleMessage"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|invokeOrderOfHandleMessage
operator|=
operator|++
name|sinvokedOrder
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"handleFault"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|invokeOrderOfHandleFault
operator|=
operator|++
name|sinvokedOrder
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"close"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|invokeOrderOfClose
operator|=
operator|++
name|sinvokedOrder
expr_stmt|;
block|}
name|val
operator|++
expr_stmt|;
name|methodCallCount
operator|.
name|put
argument_list|(
name|methodName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getInvokeOrderOfHandleMessage
parameter_list|()
block|{
return|return
name|invokeOrderOfHandleMessage
return|;
block|}
specifier|public
name|int
name|getInvokeOrderOfHandleFault
parameter_list|()
block|{
return|return
name|invokeOrderOfHandleFault
return|;
block|}
specifier|public
name|int
name|getInvokeOrderOfClose
parameter_list|()
block|{
return|return
name|invokeOrderOfClose
return|;
block|}
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
specifier|abstract
name|String
name|getHandlerId
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isCloseInvoked
parameter_list|()
block|{
return|return
name|methodCallCount
operator|.
name|containsKey
argument_list|(
literal|"close"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDestroyInvoked
parameter_list|()
block|{
return|return
name|methodCallCount
operator|.
name|containsKey
argument_list|(
literal|"destroy"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isHandleFaultInvoked
parameter_list|()
block|{
return|return
name|methodCallCount
operator|.
name|containsKey
argument_list|(
literal|"handleFault"
argument_list|)
return|;
block|}
specifier|public
name|int
name|getHandleFaultInvoked
parameter_list|()
block|{
return|return
name|getMethodCallCount
argument_list|(
literal|"handleFault"
argument_list|)
return|;
block|}
specifier|public
name|int
name|getCloseInvoked
parameter_list|()
block|{
return|return
name|getMethodCallCount
argument_list|(
literal|"close"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isHandleMessageInvoked
parameter_list|()
block|{
return|return
name|methodCallCount
operator|.
name|containsKey
argument_list|(
literal|"handleMessage"
argument_list|)
return|;
block|}
specifier|public
name|int
name|getHandleMessageInvoked
parameter_list|()
block|{
return|return
name|getMethodCallCount
argument_list|(
literal|"handleMessage"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isInitInvoked
parameter_list|()
block|{
return|return
name|methodCallCount
operator|.
name|containsKey
argument_list|(
literal|"init"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isPostConstructInvoked
parameter_list|()
block|{
return|return
name|methodCallCount
operator|.
name|containsKey
argument_list|(
literal|"doPostConstruct"
argument_list|)
return|;
block|}
specifier|public
name|void
name|setHandleMessageRet
parameter_list|(
name|boolean
name|ret
parameter_list|)
block|{
name|handleMessageRet
operator|=
name|ret
expr_stmt|;
block|}
specifier|public
name|boolean
name|getHandleMessageRet
parameter_list|()
block|{
return|return
name|handleMessageRet
return|;
block|}
specifier|public
name|boolean
name|isServerSideHandler
parameter_list|()
block|{
return|return
name|isServerSideHandler
return|;
block|}
specifier|public
name|void
name|verifyJAXWSProperties
parameter_list|(
name|MessageContext
name|ctx
parameter_list|)
throws|throws
name|PingException
block|{
if|if
condition|(
name|isServerSideHandler
argument_list|()
operator|&&
name|isOutbound
argument_list|(
name|ctx
argument_list|)
condition|)
block|{
comment|/*             QName operationName = (QName)ctx.get(MessageContext.WSDL_OPERATION);             if (operationName == null) {                 throw new PingException("WSDL_OPERATION not found");             }             URI wsdlDescription = (URI)ctx.get(MessageContext.WSDL_DESCRIPTION);             if (!wsdlDescription.toString().equals("http://localhost:9005/HandlerTest/SoapPort?wsdl")) {                 throw new PingException("WSDL_DESCRIPTION not found");             }             QName wsdlPort = (QName)ctx.get(MessageContext.WSDL_PORT);             if (!wsdlPort.getLocalPart().equals("SoapPort")) {                 throw new PingException("WSDL_PORT not found");             }                    QName wsdlInterface = (QName)ctx.get(MessageContext.WSDL_INTERFACE);             if (!wsdlInterface.getLocalPart().equals("HandlerTest")) {                 throw new PingException("WSDL_INTERFACE not found");             }                   QName wsdlService = (QName)ctx.get(MessageContext.WSDL_SERVICE);             if (!wsdlService.getLocalPart().equals("HandlerTestService")) {                 throw new PingException("WSDL_SERVICE not found");             }             */
block|}
block|}
specifier|protected
name|void
name|printHandlerInfo
parameter_list|(
name|String
name|methodName
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
name|String
name|info
init|=
name|getHandlerId
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|outbound
condition|?
literal|"outbound"
else|:
literal|"inbound"
operator|)
operator|+
literal|" "
operator|+
name|methodName
operator|+
literal|"   "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getHandlerInfoList
parameter_list|(
name|MessageContext
name|ctx
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|handlerInfoList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|containsKey
argument_list|(
literal|"handler.info"
argument_list|)
condition|)
block|{
name|handlerInfoList
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
operator|)
name|ctx
operator|.
name|get
argument_list|(
literal|"handler.info"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handlerInfoList
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
literal|"handler.info"
argument_list|,
name|handlerInfoList
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setScope
argument_list|(
literal|"handler.info"
argument_list|,
name|MessageContext
operator|.
name|Scope
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
return|return
name|handlerInfoList
return|;
block|}
specifier|protected
name|boolean
name|isOutbound
parameter_list|(
name|MessageContext
name|ctx
parameter_list|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
return|;
block|}
specifier|private
name|int
name|getMethodCallCount
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|methodCallCount
operator|.
name|containsKey
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|ret
operator|=
name|methodCallCount
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

