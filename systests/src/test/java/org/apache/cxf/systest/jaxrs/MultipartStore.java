begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MultipartID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|multipart
operator|.
name|AttachmentUtils
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/bookstore"
argument_list|)
specifier|public
class|class
name|MultipartStore
block|{
annotation|@
name|Context
specifier|private
name|MessageContext
name|context
decl_stmt|;
specifier|public
name|MultipartStore
parameter_list|()
block|{     }
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/stream"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookFromStream
parameter_list|(
name|StreamSource
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|JAXBContext
name|c
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
operator|new
name|Class
index|[]
block|{
name|Book
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Unmarshaller
name|u
init|=
name|c
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Book
name|b
init|=
operator|(
name|Book
operator|)
name|u
operator|.
name|unmarshal
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|b
operator|.
name|setId
argument_list|(
literal|124
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/istream"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookFromInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|readBookFromInputStream
argument_list|(
name|is
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/dsource"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookFromDataSource
parameter_list|(
name|DataSource
name|ds
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|readBookFromInputStream
argument_list|(
name|ds
operator|.
name|getInputStream
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/jaxb2"
argument_list|)
annotation|@
name|Consumes
argument_list|(
literal|"multipart/related;type=\"text/xml\""
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookParts
parameter_list|(
annotation|@
name|MultipartID
argument_list|(
literal|"rootPart"
argument_list|)
name|Book
name|b1
parameter_list|,
annotation|@
name|MultipartID
argument_list|(
literal|"book2"
argument_list|)
name|Book
name|b2
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|b1
operator|.
name|equals
argument_list|(
name|b2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|b1
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|b2
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
name|b1
operator|.
name|setId
argument_list|(
literal|124
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|b1
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/jaxbjson"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookJaxbJson
parameter_list|(
annotation|@
name|MultipartID
argument_list|(
name|value
operator|=
literal|"rootPart"
argument_list|,
name|type
operator|=
literal|"text/xml"
argument_list|)
name|Book2
name|b1
parameter_list|,
annotation|@
name|MultipartID
argument_list|(
name|value
operator|=
literal|"book2"
argument_list|,
name|type
operator|=
literal|"application/json"
argument_list|)
name|Book
name|b2
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
literal|"CXF in Action"
operator|.
name|equals
argument_list|(
name|b1
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
operator|!
literal|"CXF in Action - 2"
operator|.
name|equals
argument_list|(
name|b2
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
name|b2
operator|.
name|setId
argument_list|(
literal|124
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|b2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/dsource2"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookFromDataSource2
parameter_list|(
annotation|@
name|MultipartID
argument_list|(
literal|"rootPart"
argument_list|)
name|DataSource
name|ds1
parameter_list|,
annotation|@
name|MultipartID
argument_list|(
literal|"book2"
argument_list|)
name|DataSource
name|ds2
parameter_list|)
throws|throws
name|Exception
block|{
name|Response
name|r1
init|=
name|readBookFromInputStream
argument_list|(
name|ds1
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|r2
init|=
name|readBookFromInputStream
argument_list|(
name|ds2
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Book
name|b1
init|=
operator|(
name|Book
operator|)
name|r1
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|Book
name|b2
init|=
operator|(
name|Book
operator|)
name|r2
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|b1
operator|.
name|equals
argument_list|(
name|b2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|b1
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|b2
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
return|return
name|r1
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/dhandler"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookFromDataHandler
parameter_list|(
name|DataHandler
name|dh
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|readBookFromInputStream
argument_list|(
name|dh
operator|.
name|getInputStream
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/mchandlers"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookFromMessageContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|handlers
init|=
name|AttachmentUtils
operator|.
name|getAttachments
argument_list|(
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|entry
range|:
name|handlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"book2"
argument_list|)
condition|)
block|{
return|return
name|readBookFromInputStream
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getInputStream
argument_list|()
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|500
argument_list|)
throw|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/jaxb"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBook
parameter_list|(
name|Book
name|b
parameter_list|)
throws|throws
name|Exception
block|{
name|b
operator|.
name|setId
argument_list|(
literal|124
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/mismatch1"
argument_list|)
annotation|@
name|Consumes
argument_list|(
literal|"multipart/related;type=\"bar/foo\""
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookMismatched
parameter_list|(
name|Book
name|b
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books/mismatch2"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|Response
name|addBookMismatched2
parameter_list|(
annotation|@
name|MultipartID
argument_list|(
name|value
operator|=
literal|"rootPart"
argument_list|,
name|type
operator|=
literal|"f/b"
argument_list|)
name|Book
name|b
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|()
throw|;
block|}
specifier|private
name|Response
name|readBookFromInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
name|JAXBContext
name|c
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
operator|new
name|Class
index|[]
block|{
name|Book
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Unmarshaller
name|u
init|=
name|c
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Book
name|b
init|=
operator|(
name|Book
operator|)
name|u
operator|.
name|unmarshal
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|b
operator|.
name|setId
argument_list|(
literal|124
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

