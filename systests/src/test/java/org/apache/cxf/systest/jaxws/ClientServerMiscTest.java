begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|anonymous_complex_type
operator|.
name|AnonymousComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|anonymous_complex_type
operator|.
name|AnonymousComplexTypeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|anonymous_complex_type
operator|.
name|RefSplitName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|anonymous_complex_type
operator|.
name|RefSplitNameResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|anonymous_complex_type
operator|.
name|SplitName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|anonymous_complex_type
operator|.
name|SplitNameResponse
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ASMHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb_element_test
operator|.
name|JaxbElementTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb_element_test
operator|.
name|JaxbElementTest_Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ordered_param_holder
operator|.
name|ComplexStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ordered_param_holder
operator|.
name|OrderedParamHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ordered_param_holder
operator|.
name|OrderedParamHolder_Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
operator|.
name|DocLitWrappedCodeFirstService
operator|.
name|Foo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tests
operator|.
name|inherit
operator|.
name|Inherit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tests
operator|.
name|inherit
operator|.
name|InheritService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tests
operator|.
name|inherit
operator|.
name|objects
operator|.
name|SubTypeA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tests
operator|.
name|inherit
operator|.
name|objects
operator|.
name|SubTypeB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tests
operator|.
name|inherit
operator|.
name|types
operator|.
name|ObjectInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ClientServerMiscTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|ServerMisc
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWSDLDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"wsdl"
argument_list|,
name|WSDLConstants
operator|.
name|NS_WSDL11
argument_list|)
expr_stmt|;
name|XPathUtils
name|xpu
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|Document
name|wsdl
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|this
operator|.
name|getHttpConnection
argument_list|(
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_URL
operator|+
literal|"?wsdl"
argument_list|)
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
comment|//XMLUtils.printDOM(wsdl.getDocumentElement());
name|assertEquals
argument_list|(
literal|"DocLitWrappedCodeFirstService impl"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:service/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DocLitWrappedCodeFirstService interface"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:portType/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DocLitWrappedCodeFirstService top level doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DocLitWrappedCodeFirstService binding doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:binding/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DocLitWrappedCodeFirstService service/port doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:service/wsdl:port/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multiInOut doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:portType/wsdl:operation[@name='multiInOut']"
operator|+
literal|"/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multiInOut Input doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:portType/wsdl:operation[@name='multiInOut']"
operator|+
literal|"/wsdl:input/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multiInOut Output doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:portType/wsdl:operation[@name='multiInOut']"
operator|+
literal|"/wsdl:output/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multiInOut InputMessage doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:message[@name='multiInOut']"
operator|+
literal|"/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multiInOut OutputMessage doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:message[@name='multiInOutResponse']"
operator|+
literal|"/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multiInOut binding doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:binding/wsdl:operation[@name='multiInOut']"
operator|+
literal|"/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multiInOut binding Input doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:binding/wsdl:operation[@name='multiInOut']"
operator|+
literal|"/wsdl:input/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multiInOut binding Output doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:binding/wsdl:operation[@name='multiInOut']"
operator|+
literal|"/wsdl:output/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fault binding doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:binding/wsdl:operation[@name='throwException']"
operator|+
literal|"/wsdl:fault/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fault porttype doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:portType/wsdl:operation[@name='throwException']"
operator|+
literal|"/wsdl:fault/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fault message doc"
argument_list|,
name|xpu
operator|.
name|getValue
argument_list|(
literal|"/wsdl:definitions/wsdl:message[@name='CustomException']"
operator|+
literal|"/wsdl:documentation"
argument_list|,
name|wsdl
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocLitBare
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitBareCodeFirstService"
argument_list|,
literal|"DocLitBareCodeFirstServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitBareCodeFirstService"
argument_list|,
literal|"DocLitBareCodeFirstService"
argument_list|)
decl_stmt|;
comment|//try without wsdl
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|servName
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|portName
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|ServerMisc
operator|.
name|DOCLITBARE_CODEFIRST_URL
argument_list|)
expr_stmt|;
name|DocLitBareCodeFirstService
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|DocLitBareCodeFirstService
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocLitBareCodeFirstService
operator|.
name|GreetMeRequest
name|req
init|=
operator|new
name|DocLitBareCodeFirstService
operator|.
name|GreetMeRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setName
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|DocLitBareCodeFirstService
operator|.
name|GreetMeResponse
name|resp
init|=
name|port
operator|.
name|greetMe
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|req
operator|.
name|getName
argument_list|()
argument_list|,
name|resp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//try with wsdl
name|service
operator|=
name|Service
operator|.
name|create
argument_list|(
operator|new
name|URL
argument_list|(
name|ServerMisc
operator|.
name|DOCLITBARE_CODEFIRST_URL
operator|+
literal|"?wsdl"
argument_list|)
argument_list|,
name|servName
argument_list|)
expr_stmt|;
name|port
operator|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|DocLitBareCodeFirstService
operator|.
name|class
argument_list|)
expr_stmt|;
name|resp
operator|=
name|port
operator|.
name|greetMe
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|req
operator|.
name|getName
argument_list|()
argument_list|,
name|resp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//try the fault
name|req
operator|.
name|setName
argument_list|(
literal|"fault"
argument_list|)
expr_stmt|;
try|try
block|{
name|resp
operator|=
name|port
operator|.
name|greetMe
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get fault back"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"mr.actor"
argument_list|,
name|ex
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultActor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|ex
operator|.
name|getFault
argument_list|()
operator|.
name|getDetail
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnonymousComplexType
parameter_list|()
throws|throws
name|Exception
block|{
name|AnonymousComplexTypeService
name|actService
init|=
operator|new
name|AnonymousComplexTypeService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|actService
argument_list|)
expr_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/anonymous_complex_type/"
argument_list|,
literal|"anonymous_complex_typeSOAP"
argument_list|)
decl_stmt|;
name|AnonymousComplexType
name|act
init|=
name|actService
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|AnonymousComplexType
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|Names
name|reply
init|=
name|act
operator|.
name|splitName
argument_list|(
literal|"Tom Li"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tom"
argument_list|,
name|reply
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Li"
argument_list|,
name|reply
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRefAnonymousComplexType
parameter_list|()
throws|throws
name|Exception
block|{
name|AnonymousComplexTypeService
name|actService
init|=
operator|new
name|AnonymousComplexTypeService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|actService
argument_list|)
expr_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/anonymous_complex_type/"
argument_list|,
literal|"anonymous_complex_typeSOAP"
argument_list|)
decl_stmt|;
name|AnonymousComplexType
name|act
init|=
name|actService
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|AnonymousComplexType
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|SplitName
name|name
init|=
operator|new
name|SplitName
argument_list|()
decl_stmt|;
name|name
operator|.
name|setName
argument_list|(
literal|"Tom Li"
argument_list|)
expr_stmt|;
name|RefSplitName
name|refName
init|=
operator|new
name|RefSplitName
argument_list|()
decl_stmt|;
name|refName
operator|.
name|setSplitName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|RefSplitNameResponse
name|reply
init|=
name|act
operator|.
name|refSplitName
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tom"
argument_list|,
name|reply
operator|.
name|getSplitNameResponse
argument_list|()
operator|.
name|getNames
argument_list|()
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Li"
argument_list|,
name|reply
operator|.
name|getSplitNameResponse
argument_list|()
operator|.
name|getNames
argument_list|()
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinOccursAndNillableJAXBElement
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxbElementTest_Service
name|service
init|=
operator|new
name|JaxbElementTest_Service
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|JaxbElementTest
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|JaxbElementTest
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|response
init|=
name|port
operator|.
name|newOperation
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in=hello"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|response
operator|=
name|port
operator|.
name|newOperation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in=null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderedParamHolder
parameter_list|()
throws|throws
name|Exception
block|{
name|OrderedParamHolder_Service
name|service
init|=
operator|new
name|OrderedParamHolder_Service
argument_list|()
decl_stmt|;
name|OrderedParamHolder
name|port
init|=
name|service
operator|.
name|getOrderedParamHolderSOAP
argument_list|()
decl_stmt|;
try|try
block|{
name|Holder
argument_list|<
name|ComplexStruct
argument_list|>
name|part3
init|=
operator|new
name|Holder
argument_list|<
name|ComplexStruct
argument_list|>
argument_list|()
decl_stmt|;
name|part3
operator|.
name|value
operator|=
operator|new
name|ComplexStruct
argument_list|()
expr_stmt|;
name|part3
operator|.
name|value
operator|.
name|setElem1
argument_list|(
literal|"elem1"
argument_list|)
expr_stmt|;
name|part3
operator|.
name|value
operator|.
name|setElem2
argument_list|(
literal|"elem2"
argument_list|)
expr_stmt|;
name|part3
operator|.
name|value
operator|.
name|setElem3
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|Integer
argument_list|>
name|part2
init|=
operator|new
name|Holder
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|part2
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|part1
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part1
operator|.
name|value
operator|=
literal|"part1"
expr_stmt|;
name|port
operator|.
name|orderedParamHolder
argument_list|(
name|part3
argument_list|,
name|part2
argument_list|,
name|part1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|part3
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check value"
argument_list|,
literal|"return elem1"
argument_list|,
name|part3
operator|.
name|value
operator|.
name|getElem1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check value"
argument_list|,
literal|"return elem2"
argument_list|,
name|part3
operator|.
name|value
operator|.
name|getElem2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check value"
argument_list|,
literal|1
argument_list|,
name|part3
operator|.
name|value
operator|.
name|getElem3
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|part2
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check value"
argument_list|,
literal|1
argument_list|,
name|part2
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|part1
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check value"
argument_list|,
literal|"return part1"
argument_list|,
name|part1
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstService"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
operator|new
name|URL
argument_list|(
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_URL
operator|+
literal|"?wsdl"
argument_list|)
argument_list|,
name|servName
argument_list|)
decl_stmt|;
name|DocLitWrappedCodeFirstServiceMissingOps
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|DocLitWrappedCodeFirstServiceMissingOps
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
index|[]
name|ret
init|=
name|port
operator|.
name|echoIntArray
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|port
operator|.
name|echoIntArray
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|port
operator|.
name|echoIntArray
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
comment|//port.arrayOutput();
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocLitWrappedCodeFirstServiceNoWsdl
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstService"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|servName
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|portName
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_URL
argument_list|)
expr_stmt|;
name|DocLitWrappedCodeFirstService
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|DocLitWrappedCodeFirstService
operator|.
name|class
argument_list|)
decl_stmt|;
name|runDocLitTest
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocLitWrappedCodeFirstServiceWsdl
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstService"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
operator|new
name|URL
argument_list|(
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_URL
operator|+
literal|"?wsdl"
argument_list|)
argument_list|,
name|servName
argument_list|)
decl_stmt|;
name|DocLitWrappedCodeFirstService
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|DocLitWrappedCodeFirstService
operator|.
name|class
argument_list|)
decl_stmt|;
name|runDocLitTest
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setASM
parameter_list|(
name|boolean
name|b
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|ASMHelper
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"oldASM"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocLitWrappedCodeFirstServiceNoWsdlNoASM
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|setASM
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstService"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|servName
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|portName
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_URL
argument_list|)
expr_stmt|;
name|DocLitWrappedCodeFirstService
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|DocLitWrappedCodeFirstService
operator|.
name|class
argument_list|)
decl_stmt|;
name|runDocLitTest
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|setASM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocLitWrappedCodeFirstServiceWsdlNoASM
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|setASM
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstService"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
operator|new
name|URL
argument_list|(
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_URL
operator|+
literal|"?wsdl"
argument_list|)
argument_list|,
name|servName
argument_list|)
decl_stmt|;
name|DocLitWrappedCodeFirstService
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|DocLitWrappedCodeFirstService
operator|.
name|class
argument_list|)
decl_stmt|;
name|runDocLitTest
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|setASM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleClientWithWsdl
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|,
literal|"DocLitWrappedCodeFirstService"
argument_list|)
decl_stmt|;
name|ClientProxyFactoryBean
name|factory
init|=
operator|new
name|ClientProxyFactoryBean
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setWsdlURL
argument_list|(
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_URL
operator|+
literal|"?wsdl"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setServiceName
argument_list|(
name|servName
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setServiceClass
argument_list|(
name|DocLitWrappedCodeFirstService
operator|.
name|class
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setEndpointName
argument_list|(
name|portName
argument_list|)
expr_stmt|;
name|DocLitWrappedCodeFirstService
name|port
init|=
operator|(
name|DocLitWrappedCodeFirstService
operator|)
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|String
name|echoMsg
init|=
name|port
operator|.
name|echo
argument_list|(
literal|"Hello"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|echoMsg
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runDocLitTest
parameter_list|(
name|DocLitWrappedCodeFirstService
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|port
operator|.
name|outOnly
argument_list|(
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|port
operator|.
name|doOneWay
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|<
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|port
operator|.
name|echoStringNotReallyAsync
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Foo
argument_list|>
name|fooSet
init|=
name|port
operator|.
name|getFooSet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fooSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size: 2"
argument_list|,
name|port
operator|.
name|doFooList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Foo
argument_list|>
argument_list|(
name|fooSet
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|port
operator|.
name|echoIntDifferentWrapperName
argument_list|(
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|echoMsg
init|=
name|port
operator|.
name|echo
argument_list|(
literal|"Hello"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|echoMsg
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rev
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DocLitWrappedCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|String
name|s
decl_stmt|;
name|String
name|arrayOut
index|[]
init|=
name|port
operator|.
name|arrayOutput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|arrayOut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|arrayOut
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|3
condition|;
name|x
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|DocLitWrappedCodeFirstServiceImpl
operator|.
name|DATA
index|[
name|x
index|]
argument_list|,
name|arrayOut
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|listOut
init|=
name|port
operator|.
name|listOutput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|listOut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|listOut
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|3
condition|;
name|x
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|DocLitWrappedCodeFirstServiceImpl
operator|.
name|DATA
index|[
name|x
index|]
argument_list|,
name|listOut
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|port
operator|.
name|arrayInput
argument_list|(
name|DocLitWrappedCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1string2string3"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|port
operator|.
name|listInput
argument_list|(
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|DocLitWrappedCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1string2string3"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|port
operator|.
name|multiListInput
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DocLitWrappedCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
argument_list|,
name|rev
argument_list|,
literal|"Hello"
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1string2string3string3string2string1Hello24"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|port
operator|.
name|listInput
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|port
operator|.
name|listInput
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|port
operator|.
name|multiListInput
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DocLitWrappedCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1string2string3string3string2string1<null>24"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|a
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|b
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"Hello"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|c
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|d
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|e
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"world!"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|f
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|g
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|=
name|port
operator|.
name|multiInOut
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|,
name|f
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello world!"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|a
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|b
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|d
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|e
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|f
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|g
operator|.
name|value
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Foo
argument_list|>
name|foos
init|=
name|port
operator|.
name|listObjectOutput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|foos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|foos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|foos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Foo
index|[]
argument_list|>
name|foos2
init|=
name|port
operator|.
name|listObjectArrayOutput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|foos2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|foos2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|foos2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|foos2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|ints
index|[]
init|=
name|port
operator|.
name|echoIntArray
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ints
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ints
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|new
name|ASMHelper
argument_list|()
operator|.
name|createClassWriter
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//doing the type adapter things and such really
comment|//requires the ASM generated helper classes
name|assertEquals
argument_list|(
literal|"Val"
argument_list|,
name|port
operator|.
name|createBar
argument_list|(
literal|"Val"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|testExceptionCases
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testExceptionCases
parameter_list|(
name|DocLitWrappedCodeFirstService
name|port
parameter_list|)
throws|throws
name|Exception
block|{
comment|/*   CXF-926 test case */
try|try
block|{
name|port
operator|.
name|throwException
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceTestFault
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|ex
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// CXF-1131 testcase
try|try
block|{
name|port
operator|.
name|throwException
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceTestFault
name|ex
parameter_list|)
block|{
name|assertNull
argument_list|(
name|ex
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// CXF-1136 testcase
try|try
block|{
name|port
operator|.
name|throwException
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CustomException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"CE: -2"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A Value"
argument_list|,
name|ex
operator|.
name|getA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B Value"
argument_list|,
name|ex
operator|.
name|getB
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// CXF-1407
try|try
block|{
name|port
operator|.
name|throwException
argument_list|(
operator|-
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ComplexException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Throw user fault -3"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ex
operator|.
name|getInts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|port
operator|.
name|throwException
argument_list|(
operator|-
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ComplexException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Throw user fault -3"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRpcLitNoWsdl
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/RpcLitCodeFirstService"
argument_list|,
literal|"RpcLitCodimlpementor6eFirstServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/RpcLitCodeFirstService"
argument_list|,
literal|"RpcLitCodeFirstService"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|servName
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|portName
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|ServerMisc
operator|.
name|RPCLIT_CODEFIRST_URL
argument_list|)
expr_stmt|;
name|RpcLitCodeFirstService
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|RpcLitCodeFirstService
operator|.
name|class
argument_list|)
decl_stmt|;
name|runRpcLitTest
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRpcLitWsdl
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/RpcLitCodeFirstService"
argument_list|,
literal|"RpcLitCodeFirstServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/RpcLitCodeFirstService"
argument_list|,
literal|"RpcLitCodeFirstService"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
operator|new
name|URL
argument_list|(
name|ServerMisc
operator|.
name|RPCLIT_CODEFIRST_URL
operator|+
literal|"?wsdl"
argument_list|)
argument_list|,
name|servName
argument_list|)
decl_stmt|;
name|RpcLitCodeFirstService
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|RpcLitCodeFirstService
operator|.
name|class
argument_list|)
decl_stmt|;
name|runRpcLitTest
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runRpcLitTest
parameter_list|(
name|RpcLitCodeFirstService
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|ret
index|[]
init|=
name|port
operator|.
name|convertToString
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ret
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rev
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RpcLitCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|String
name|s
decl_stmt|;
name|String
name|arrayOut
index|[]
init|=
name|port
operator|.
name|arrayOutput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|arrayOut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|arrayOut
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|3
condition|;
name|x
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|RpcLitCodeFirstServiceImpl
operator|.
name|DATA
index|[
name|x
index|]
argument_list|,
name|arrayOut
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|listOut
init|=
name|port
operator|.
name|listOutput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|listOut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|listOut
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|3
condition|;
name|x
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|RpcLitCodeFirstServiceImpl
operator|.
name|DATA
index|[
name|x
index|]
argument_list|,
name|listOut
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|port
operator|.
name|arrayInput
argument_list|(
name|RpcLitCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1string2string3"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|port
operator|.
name|listInput
argument_list|(
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|RpcLitCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1string2string3"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|port
operator|.
name|multiListInput
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RpcLitCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
argument_list|,
name|rev
argument_list|,
literal|"Hello"
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1string2string3string3string2string1Hello24"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|port
operator|.
name|listInput
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|=
name|port
operator|.
name|listInput
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RPC/Lit parts cannot be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|ex
parameter_list|)
block|{
comment|//ignore, expected
block|}
try|try
block|{
name|s
operator|=
name|port
operator|.
name|multiListInput
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RpcLitCodeFirstServiceImpl
operator|.
name|DATA
argument_list|)
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RPC/Lit parts cannot be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|ex
parameter_list|)
block|{
comment|//ignore, expected
block|}
name|Holder
argument_list|<
name|String
argument_list|>
name|a
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|b
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"Hello"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|c
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|d
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|e
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"world!"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|f
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|g
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|=
name|port
operator|.
name|multiInOut
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|,
name|f
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello world!"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|a
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|b
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|d
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|e
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|f
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|g
operator|.
name|value
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|b
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|d
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|e
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"world!"
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|g
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|s
operator|=
name|port
operator|.
name|multiHeaderInOut
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|,
name|f
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello world!"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|a
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|b
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|d
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|e
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|f
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|g
operator|.
name|value
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
operator|.
name|RpcLitCodeFirstService
operator|.
name|Foo
argument_list|>
name|foos
init|=
name|port
operator|.
name|listObjectOutput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|foos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|foos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|foos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
operator|.
name|RpcLitCodeFirstService
operator|.
name|Foo
index|[]
argument_list|>
name|foos2
init|=
name|port
operator|.
name|listObjectArrayOutput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|foos2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|foos2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|foos2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|foos2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInheritedTypesInOtherPackage
parameter_list|()
throws|throws
name|Exception
block|{
name|InheritService
name|serv
init|=
operator|new
name|InheritService
argument_list|()
decl_stmt|;
name|Inherit
name|port
init|=
name|serv
operator|.
name|getInheritPort
argument_list|()
decl_stmt|;
name|ObjectInfo
name|obj
init|=
name|port
operator|.
name|getObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|obj
operator|.
name|getBaseObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|obj
operator|.
name|getBaseObject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|.
name|getBaseObject
argument_list|()
operator|instanceof
name|SubTypeA
argument_list|)
expr_stmt|;
name|obj
operator|=
name|port
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|obj
operator|.
name|getBaseObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|obj
operator|.
name|getBaseObject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|.
name|getBaseObject
argument_list|()
operator|instanceof
name|SubTypeB
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterfaceExtension
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstBaseService"
argument_list|,
literal|"DocLitWrappedCodeFirstBaseServicePort"
argument_list|)
decl_stmt|;
name|QName
name|servName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstBaseService"
argument_list|,
literal|"DocLitWrappedCodeFirstBaseService"
argument_list|)
decl_stmt|;
comment|//try without wsdl
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|servName
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|portName
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_BASE_URL
argument_list|)
expr_stmt|;
name|DocLitWrappedCodeFirstBaseService
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|DocLitWrappedCodeFirstBaseService
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|port
operator|.
name|operationInBase
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|port
operator|.
name|operationInSub1
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|port
operator|.
name|operationInSub2
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|//try with wsdl
name|service
operator|=
name|Service
operator|.
name|create
argument_list|(
operator|new
name|URL
argument_list|(
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_BASE_URL
operator|+
literal|"?wsdl"
argument_list|)
argument_list|,
name|servName
argument_list|)
expr_stmt|;
name|port
operator|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|DocLitWrappedCodeFirstBaseService
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|port
operator|.
name|operationInBase
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|port
operator|.
name|operationInSub1
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|port
operator|.
name|operationInSub2
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnonymousMinOccursConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|httpConnection
init|=
name|getHttpConnection
argument_list|(
name|ServerMisc
operator|.
name|DOCLIT_CODEFIRST_SETTINGS_URL
operator|+
literal|"?wsdl"
argument_list|)
decl_stmt|;
name|httpConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|httpConnection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OK"
argument_list|,
name|httpConnection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|httpConnection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"soap"
argument_list|,
name|Soap11
operator|.
name|SOAP_NAMESPACE
argument_list|)
expr_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"tns"
argument_list|,
literal|"http://cxf.apache.org/systest/jaxws/DocLitWrappedCodeFirstService"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"wsdl"
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"xs"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|)
expr_stmt|;
name|XPathUtils
name|xu
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
comment|//make sure the wrapper types are anonymous types
name|Node
name|ct
init|=
operator|(
name|Node
operator|)
name|xu
operator|.
name|getValue
argument_list|(
literal|"//wsdl:definitions/wsdl:types/xs:schema"
operator|+
literal|"/xs:element[@name='getFooSetResponse']/xs:complexType/xs:sequence"
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ct
argument_list|)
expr_stmt|;
comment|//make sure the params are nillable, not minOccurs=0
name|ct
operator|=
operator|(
name|Node
operator|)
name|xu
operator|.
name|getValue
argument_list|(
literal|"//wsdl:definitions/wsdl:types/xs:schema"
operator|+
literal|"/xs:element[@name='multiInOut']/xs:complexType/xs:sequence"
operator|+
literal|"/xs:element[@nillable='true']"
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

