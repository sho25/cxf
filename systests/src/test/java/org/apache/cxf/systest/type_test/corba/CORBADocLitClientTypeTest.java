begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|type_test
operator|.
name|corba
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|type_test
operator|.
name|AbstractTypeTestClient5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CORBADocLitClientTypeTest
extends|extends
name|AbstractTypeTestClient5
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|WSDL_PATH
init|=
literal|"/wsdl/type_test_corba/type_test_corba-corba.wsdl"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/type_test/doc"
argument_list|,
literal|"TypeTestCORBAService"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|QName
name|PORT_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/type_test/doc"
argument_list|,
literal|"TypeTestCORBAPort"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|NOT_WORKING_TESTS
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|RUN_TESTS
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|String
name|notWorking
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"DerivedChoiceBaseChoice"
block|,
literal|"UnionWithAnonEnum"
block|,
literal|"SimpleAll"
block|,
literal|"OccuringChoiceWithAnyAttribute"
block|,
literal|"ChoiceArray"
block|,
literal|"ChoiceOfSeq"
block|,
literal|"DerivedStructBaseStruct"
block|,
literal|"OccuringChoice2"
block|,
literal|"OccuringStructWithAnyAttribute"
block|,
literal|"OccuringStruct"
block|,
literal|"OccuringStruct2"
block|,
literal|"InheritanceUnboundedArrayDerivedChoice"
block|,
literal|"ComplexTypeWithAttributes"
block|,
literal|"OccuringChoice1"
block|,
literal|"StructWithSubstitutionGroup"
block|,
literal|"StructWithNillableStruct"
block|,
literal|"SimpleContent2"
block|,
literal|"OccuringAll"
block|,
literal|"Document"
block|,
literal|"ChoiceWithAnyAttribute"
block|,
literal|"RecursiveUnionData"
block|,
literal|"ExtBase64Binary"
block|,
literal|"RecursiveStructArray"
block|,
literal|"StructWithAnyArray"
block|,
literal|"UnsignedByte"
block|,
literal|"SimpleStruct"
block|,
literal|"RecOuterType"
block|,
literal|"UnionWithStringListRestriction"
block|,
literal|"RecElType"
block|,
literal|"AnonEnumList"
block|,
literal|"DerivedNoContent"
block|,
literal|"StructWithMultipleSubstitutionGroups"
block|,
literal|"StructWithNillableChoice"
block|,
literal|"RestrictedAllBaseAll"
block|,
literal|"NestedStruct"
block|,
literal|"StructWithOccuringStruct"
block|,
literal|"SequenceWithGroups"
block|,
literal|"RecursiveUnion"
block|,
literal|"ExtendsSimpleType"
block|,
literal|"InheritanceEmptyAllDerivedEmpty"
block|,
literal|"HexBinaryRestriction"
block|,
literal|"DerivedStructBaseChoice"
block|,
literal|"UnionSimpleContent"
block|,
literal|"ChoiceWithSubstitutionGroup"
block|,
literal|"UnionWithAnonList"
block|,
literal|"ComplexRestriction"
block|,
literal|"NMTOKENS"
block|,
literal|"SequenceWithGroupSeq"
block|,
literal|"IDTypeAttribute"
block|,
literal|"SimpleContent3"
block|,
literal|"SimpleUnionList"
block|,
literal|"OccuringChoice"
block|,
literal|"SimpleRestriction2"
block|,
literal|"SimpleContent1"
block|,
literal|"StructWithAnyXsi"
block|,
literal|"InheritanceNestedStruct"
block|,
literal|"StructWithInvalidAny"
block|,
literal|"SimpleRestriction6"
block|,
literal|"ComplexRestriction5"
block|,
literal|"ExtendsSimpleContent"
block|,
literal|"DateTime"
block|,
literal|"DerivedChoiceBaseStruct"
block|,
literal|"StringI18N"
block|,
literal|"ChoiceOfChoice"
block|,
literal|"ComplexRestriction3"
block|,
literal|"Base64BinaryRestriction"
block|,
literal|"StructWithList"
block|,
literal|"QNameList"
block|,
literal|"InheritanceSimpleStructDerivedStruct"
block|,
literal|"SimpleRestriction5"
block|,
literal|"ChoiceWithSubstitutionGroupAbstract"
block|,
literal|"ChoiceWithSubstitutionGroupNil"
block|,
literal|"ChoiceWithGroups"
block|,
literal|"SequenceWithGroupChoice"
block|,
literal|"DerivedChoiceBaseArray"
block|,
literal|"UnionWithStringList"
block|,
literal|"SimpleRestriction3"
block|,
literal|"ComplexRestriction2"
block|,
literal|"SimpleListRestriction2"
block|,
literal|"DerivedStructBaseEmpty"
block|,
literal|"RestrictedChoiceBaseChoice"
block|,
literal|"ChoiceWithGroupSeq"
block|,
literal|"EmptyStruct"
block|,
literal|"RestrictedStructBaseStruct"
block|,
literal|"InheritanceSimpleChoiceDerivedStruct"
block|,
literal|"RecursiveStruct"
block|,
literal|"MRecSeqA"
block|,
literal|"StructWithUnion"
block|,
literal|"StructWithOptionals"
block|,
literal|"OccuringStruct1"
block|,
literal|"ExtColourEnum"
block|,
literal|"RecSeqB6918"
block|,
literal|"StructWithSubstitutionGroupNil"
block|,
literal|"SimpleContentExtWithAnyAttribute"
block|,
literal|"StructWithAnyAttribute"
block|,
literal|"StringList"
block|,
literal|"StructWithOccuringChoice"
block|,
literal|"StructWithAny"
block|,
literal|"SequenceWithOccuringGroup"
block|,
literal|"ComplexTypeWithAttributeGroup1"
block|,
literal|"QName"
block|,
literal|"StructWithOccuringStruct2"
block|,
literal|"Occuri ngStruct2"
block|,
literal|"ChoiceWithGroupChoice"
block|,
literal|"StructWithInvalidAnyArray"
block|,
literal|"MRecSeqC"
block|,
literal|"AnonymousType"
block|,
literal|"AnyURIRestriction"
block|,
literal|"NumberList"
block|,
literal|"StructWithSubstitutionGroupAbstract"
block|,
literal|"GroupDirectlyInComplexType"
block|,
literal|"ComplexTypeWithAttributeGroup"
block|,
literal|"ComplexRestriction4"
block|,         }
decl_stmt|;
name|NOT_WORKING_TESTS
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|notWorking
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|ok
init|=
name|launchServer
argument_list|(
name|CORBADocLitServerImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed to launch server"
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|initClient
argument_list|(
name|AbstractTypeTestClient5
operator|.
name|class
argument_list|,
name|SERVICE_NAME
argument_list|,
name|PORT_NAME
argument_list|,
name|WSDL_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|deleteRefFile
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"./TypeTest.ref"
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|//for (String s : RUN_TESTS) {
comment|//    System.out.println(s);
comment|//}
block|}
specifier|public
name|boolean
name|shouldRunTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|NOT_WORKING_TESTS
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|RUN_TESTS
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|//return true;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testA
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|protected
name|float
index|[]
index|[]
name|getTestFloatData
parameter_list|()
block|{
return|return
operator|new
name|float
index|[]
index|[]
block|{
block|{
literal|0.0f
block|,
literal|1.0f
block|}
block|,
block|{
operator|-
literal|1.0f
block|,
operator|(
name|float
operator|)
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|PI
block|}
block|,
block|{
operator|-
literal|100.0f
block|,
literal|100.0f
block|}
block|}
return|;
block|}
specifier|protected
name|double
index|[]
index|[]
name|getTestDoubleData
parameter_list|()
block|{
return|return
operator|new
name|double
index|[]
index|[]
block|{
block|{
literal|0.0f
block|,
literal|1.0f
block|}
block|,
block|{
operator|-
literal|1
block|,
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|PI
block|}
block|,
block|{
operator|-
literal|100.0
block|,
literal|100.0
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

