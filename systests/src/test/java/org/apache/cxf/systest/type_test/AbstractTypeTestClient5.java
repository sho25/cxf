begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|type_test
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ComplexRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ComplexRestriction2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ComplexRestriction3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ComplexRestriction4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ComplexRestriction5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTypeTestClient5
extends|extends
name|AbstractTypeTestClient4
block|{
comment|//org.apache.type_test.types1.ComplexRestriction
annotation|@
name|Test
specifier|public
name|void
name|testComplexRestriction
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ComplexRestriction"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, maxLength=10
name|ComplexRestriction
name|x
init|=
operator|new
name|ComplexRestriction
argument_list|()
decl_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"str_x"
argument_list|)
expr_stmt|;
name|ComplexRestriction
name|yOrig
init|=
operator|new
name|ComplexRestriction
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"string_yyy"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction
argument_list|>
argument_list|()
decl_stmt|;
name|ComplexRestriction
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testComplexRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testComplexRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testComplexRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testComplexRestriction(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|getValue
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction(): Incorrect return value"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|ret
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// abnormal case
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
try|try
block|{
name|x
operator|=
operator|new
name|ComplexRestriction
argument_list|()
expr_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"string_x"
argument_list|)
expr_stmt|;
name|yOrig
operator|=
operator|new
name|ComplexRestriction
argument_list|()
expr_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"string_yyyyyy"
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction
argument_list|>
argument_list|()
expr_stmt|;
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testComplexRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testComplexRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=10 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
block|}
block|}
block|}
comment|//org.apache.type_test.types1.ComplexRestriction2
annotation|@
name|Test
specifier|public
name|void
name|testComplexRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ComplexRestriction2"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, length=10
name|ComplexRestriction2
name|x
init|=
operator|new
name|ComplexRestriction2
argument_list|()
decl_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"string_xxx"
argument_list|)
expr_stmt|;
name|ComplexRestriction2
name|yOrig
init|=
operator|new
name|ComplexRestriction2
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"string_yyy"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction2
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction2
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction2
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction2
argument_list|>
argument_list|()
decl_stmt|;
name|ComplexRestriction2
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testComplexRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testComplexRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testComplexRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testComplexRestriction2(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction2(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|getValue
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction2(): Incorrect return value"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|ret
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// abnormal case
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
try|try
block|{
name|x
operator|=
operator|new
name|ComplexRestriction2
argument_list|()
expr_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"str_x"
argument_list|)
expr_stmt|;
name|yOrig
operator|=
operator|new
name|ComplexRestriction2
argument_list|()
expr_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"string_yyy"
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction2
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction2
argument_list|>
argument_list|()
expr_stmt|;
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testComplexRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testComplexRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"length=10 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
block|}
block|}
block|}
comment|//org.apache.type_test.types1.ComplexRestriction3
annotation|@
name|Test
specifier|public
name|void
name|testComplexRestriction3
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ComplexRestriction3"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, maxLength=10 for ComplexRestriction
comment|//&& minLength=5 for ComplexRestriction3
name|ComplexRestriction3
name|x
init|=
operator|new
name|ComplexRestriction3
argument_list|()
decl_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"str_x"
argument_list|)
expr_stmt|;
name|ComplexRestriction3
name|yOrig
init|=
operator|new
name|ComplexRestriction3
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"string_yyy"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction3
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction3
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction3
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction3
argument_list|>
argument_list|()
decl_stmt|;
name|ComplexRestriction3
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testComplexRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testComplexRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testComplexRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testComplexRestriction3(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction3(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|getValue
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction3(): Incorrect return value"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|ret
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// abnormal cases
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
try|try
block|{
name|x
operator|=
operator|new
name|ComplexRestriction3
argument_list|()
expr_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction3
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction3
argument_list|>
argument_list|()
expr_stmt|;
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testComplexRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testComplexRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=10&& minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
block|}
try|try
block|{
name|x
operator|=
operator|new
name|ComplexRestriction3
argument_list|()
expr_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"string_x"
argument_list|)
expr_stmt|;
name|yOrig
operator|=
operator|new
name|ComplexRestriction3
argument_list|()
expr_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"string_yyyyyy"
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction3
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction3
argument_list|>
argument_list|()
expr_stmt|;
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testComplexRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testComplexRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=10&& minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
block|}
block|}
block|}
comment|//org.apache.type_test.types1.ComplexRestriction4
annotation|@
name|Test
specifier|public
name|void
name|testComplexRestriction4
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ComplexRestriction4"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, maxLength=10 for ComplexRestriction
comment|//&& maxLength=5 for ComplexRestriction4
name|ComplexRestriction4
name|x
init|=
operator|new
name|ComplexRestriction4
argument_list|()
decl_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"str_x"
argument_list|)
expr_stmt|;
name|ComplexRestriction4
name|yOrig
init|=
operator|new
name|ComplexRestriction4
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction4
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction4
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction4
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction4
argument_list|>
argument_list|()
decl_stmt|;
name|ComplexRestriction4
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testComplexRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testComplexRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testComplexRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testComplexRestriction4(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction4(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|getValue
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction4(): Incorrect return value"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|ret
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// abnormal case
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
try|try
block|{
name|x
operator|=
operator|new
name|ComplexRestriction4
argument_list|()
expr_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"str_xxx"
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction4
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction4
argument_list|>
argument_list|()
expr_stmt|;
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testComplexRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testComplexRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
block|}
block|}
block|}
comment|//org.apache.type_test.types1.ComplexRestriction5
annotation|@
name|Test
specifier|public
name|void
name|testComplexRestriction5
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ComplexRestriction5"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, maxLength=50&& minLength=5 for ComplexRestriction5
name|ComplexRestriction5
name|x
init|=
operator|new
name|ComplexRestriction5
argument_list|()
decl_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"http://www.iona.com"
argument_list|)
expr_stmt|;
name|ComplexRestriction5
name|yOrig
init|=
operator|new
name|ComplexRestriction5
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"http://www.iona.com/info/services/oss/"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction5
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction5
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ComplexRestriction5
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction5
argument_list|>
argument_list|()
decl_stmt|;
name|ComplexRestriction5
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testComplexRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testComplexRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testComplexRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testComplexRestriction5(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction5(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|getValue
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComplexRestriction5(): Incorrect return value"
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|ret
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// abnormal cases
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
try|try
block|{
name|x
operator|=
operator|new
name|ComplexRestriction5
argument_list|()
expr_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"uri"
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction5
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction5
argument_list|>
argument_list|()
expr_stmt|;
name|ret
operator|=
name|docClient
operator|.
name|testComplexRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=50&& minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
block|}
try|try
block|{
name|x
operator|=
operator|new
name|ComplexRestriction5
argument_list|()
expr_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"http://www.iona.com"
argument_list|)
expr_stmt|;
name|yOrig
operator|=
operator|new
name|ComplexRestriction5
argument_list|()
expr_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"http://www.iona.com/info/services/oss/info_services_oss_train.html"
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction5
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|ComplexRestriction5
argument_list|>
argument_list|()
expr_stmt|;
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testComplexRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testComplexRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=50&& minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
block|}
block|}
block|}
block|}
end_class

end_unit

