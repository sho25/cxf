begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|CXFBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|dynamic
operator|.
name|DynamicClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|BadRecordLitFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|DocLitBare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|NoSuchCodeLitFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|SOAPService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|SOAPServiceBogusAddressTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|SOAPServiceDocLitBare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|SOAPServiceMultiPortTypeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|types
operator|.
name|BareDocumentResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|types
operator|.
name|GreetMeLaterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|types
operator|.
name|GreetMeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ClientServerTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|ClientServerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|fakePortName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"FakePort"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|portName1
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort2"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up configuration to enable schema validation
name|URL
name|url
init|=
name|ClientServerTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"fault-stack-trace.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"cannot find test resource"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|defaultConfigFileName
operator|=
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBase64
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/others/dynamic_client_base64.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|String
name|wsdlUrl
init|=
literal|null
decl_stmt|;
name|wsdlUrl
operator|=
name|wsdl
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|CXFBusFactory
name|busFactory
init|=
operator|new
name|CXFBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|bus
init|=
name|busFactory
operator|.
name|createBus
argument_list|()
decl_stmt|;
name|DynamicClientFactory
name|dynamicClientFactory
init|=
name|DynamicClientFactory
operator|.
name|newInstance
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|dynamicClientFactory
operator|.
name|createClient
argument_list|(
name|wsdlUrl
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJaxWsDynamicClient
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/others/dynamic_client_base64.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|String
name|wsdlUrl
init|=
literal|null
decl_stmt|;
name|wsdlUrl
operator|=
name|wsdl
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|CXFBusFactory
name|busFactory
init|=
operator|new
name|CXFBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|bus
init|=
name|busFactory
operator|.
name|createBus
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|endpoint
operator|.
name|dynamic
operator|.
name|JaxWsDynamicClientFactory
name|dynamicClientFactory
init|=
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|endpoint
operator|.
name|dynamic
operator|.
name|JaxWsDynamicClientFactory
operator|.
name|newInstance
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|dynamicClientFactory
operator|.
name|createClient
argument_list|(
name|wsdlUrl
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bonjour"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|bp
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|Integer
name|responseCode
init|=
operator|(
name|Integer
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|responseCode
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNillable
parameter_list|()
throws|throws
name|Exception
block|{
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|reply
init|=
name|greeter
operator|.
name|testNillable
argument_list|(
literal|"test"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|reply
operator|=
name|greeter
operator|.
name|testNillable
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPortWithSpecifiedSoap12Binding
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|fakePortName
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|SOAP12HTTP_BINDING
argument_list|,
literal|"http://localhost:9009/SoapContext/SoapPort"
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|fakePortName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|response
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPortWithSpecifiedSoap11Binding
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|fakePortName
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
literal|"http://localhost:9000/SoapContext/SoapPort"
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|fakePortName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|response
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPort
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|fakePortName
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/"
argument_list|,
literal|"http://localhost:9000/SoapContext/SoapPort"
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|fakePortName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|response
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPortOneParam
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|url
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|response
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocLitBareConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|SOAPServiceDocLitBare
name|service
init|=
operator|new
name|SOAPServiceDocLitBare
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|DocLitBare
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName1
argument_list|,
name|DocLitBare
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|BareDocumentResponse
name|bareres
init|=
name|greeter
operator|.
name|testDocLitBare
argument_list|(
literal|"MySimpleDocument"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response for operation testDocLitBare"
argument_list|,
name|bareres
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CXF"
argument_list|,
name|bareres
operator|.
name|getCompany
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bareres
operator|.
name|getId
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicConnectionAndOneway
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|1
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicConnection2
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|//getPort only passing in SEI
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello Milestone-"
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|greeting
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|exResponse
init|=
name|response1
operator|+
name|idx
decl_stmt|;
name|assertEquals
argument_list|(
name|exResponse
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"Milestone-"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncPollingCall
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|delay
init|=
literal|3000
decl_stmt|;
name|Response
argument_list|<
name|GreetMeLaterResponse
argument_list|>
name|r1
init|=
name|greeter
operator|.
name|greetMeLaterAsync
argument_list|(
name|delay
argument_list|)
decl_stmt|;
name|Response
argument_list|<
name|GreetMeLaterResponse
argument_list|>
name|r2
init|=
name|greeter
operator|.
name|greetMeLaterAsync
argument_list|(
name|delay
argument_list|)
decl_stmt|;
name|long
name|after
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Duration of calls exceeded "
operator|+
operator|(
literal|2
operator|*
name|delay
operator|)
operator|+
literal|" ms"
argument_list|,
name|after
operator|-
name|before
operator|<
operator|(
literal|2
operator|*
name|delay
operator|)
argument_list|)
expr_stmt|;
comment|// first time round, responses should not be available yet
name|assertFalse
argument_list|(
literal|"Response already available."
argument_list|,
name|r1
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Response already available."
argument_list|,
name|r2
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
comment|// after three seconds responses should be available
name|long
name|waited
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|waited
operator|<
operator|(
name|delay
operator|+
literal|1000
operator|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|r1
operator|.
name|isDone
argument_list|()
operator|&&
name|r2
operator|.
name|isDone
argument_list|()
condition|)
block|{
break|break;
block|}
name|waited
operator|+=
literal|500
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Response is  not available."
argument_list|,
name|r1
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Response is  not available."
argument_list|,
name|r2
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncSynchronousPolling
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedString
init|=
operator|new
name|String
argument_list|(
literal|"Hello, finally!"
argument_list|)
decl_stmt|;
class|class
name|Poller
extends|extends
name|Thread
block|{
name|Response
argument_list|<
name|GreetMeLaterResponse
argument_list|>
name|response
decl_stmt|;
name|int
name|tid
decl_stmt|;
name|Poller
parameter_list|(
name|Response
argument_list|<
name|GreetMeLaterResponse
argument_list|>
name|r
parameter_list|,
name|int
name|t
parameter_list|)
block|{
name|response
operator|=
name|r
expr_stmt|;
name|tid
operator|=
name|t
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|tid
operator|%
literal|2
operator|>
literal|0
condition|)
block|{
while|while
condition|(
operator|!
name|response
operator|.
name|isDone
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|GreetMeLaterResponse
name|reply
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reply
operator|=
name|response
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Poller "
operator|+
name|tid
operator|+
literal|" failed with "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Poller "
operator|+
name|tid
operator|+
literal|": no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|reply
operator|.
name|getResponseType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedString
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|Greeter
name|greeter
init|=
operator|(
name|Greeter
operator|)
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|delay
init|=
literal|3000
decl_stmt|;
name|Response
argument_list|<
name|GreetMeLaterResponse
argument_list|>
name|response
init|=
name|greeter
operator|.
name|greetMeLaterAsync
argument_list|(
name|delay
argument_list|)
decl_stmt|;
name|long
name|after
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Duration of calls exceeded "
operator|+
name|delay
operator|+
literal|" ms"
argument_list|,
name|after
operator|-
name|before
operator|<
name|delay
argument_list|)
expr_stmt|;
comment|// first time round, responses should not be available yet
name|assertFalse
argument_list|(
literal|"Response already available."
argument_list|,
name|response
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|Poller
index|[]
name|pollers
init|=
operator|new
name|Poller
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pollers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pollers
index|[
name|i
index|]
operator|=
operator|new
name|Poller
argument_list|(
name|response
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Poller
name|p
range|:
name|pollers
control|)
block|{
name|p
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Poller
name|p
range|:
name|pollers
control|)
block|{
name|p
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MyHandler
implements|implements
name|AsyncHandler
argument_list|<
name|GreetMeLaterResponse
argument_list|>
block|{
specifier|static
name|int
name|invocationCount
decl_stmt|;
specifier|private
name|String
name|replyBuffer
decl_stmt|;
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Response
argument_list|<
name|GreetMeLaterResponse
argument_list|>
name|response
parameter_list|)
block|{
name|invocationCount
operator|++
expr_stmt|;
try|try
block|{
name|GreetMeLaterResponse
name|reply
init|=
name|response
operator|.
name|get
argument_list|()
decl_stmt|;
name|replyBuffer
operator|=
name|reply
operator|.
name|getResponseType
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|getReplyBuffer
parameter_list|()
block|{
return|return
name|replyBuffer
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncCallUseProperAssignedExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
class|class
name|TestExecutor
implements|implements
name|Executor
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"asyn call time "
operator|+
name|count
argument_list|)
expr_stmt|;
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
name|Executor
name|executor
init|=
operator|new
name|TestExecutor
argument_list|()
decl_stmt|;
name|service
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|executor
argument_list|,
name|service
operator|.
name|getExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|TestExecutor
operator|)
name|executor
operator|)
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
operator|(
name|Greeter
operator|)
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Response
argument_list|<
name|GreetMeResponse
argument_list|>
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<
name|Response
argument_list|<
name|GreetMeResponse
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|responses
operator|.
name|add
argument_list|(
name|greeter
operator|.
name|greetMeAsync
argument_list|(
literal|"asyn call"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//wait for all the responses
for|for
control|(
name|Response
argument_list|<
name|GreetMeResponse
argument_list|>
name|resp
range|:
name|responses
control|)
block|{
name|resp
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
operator|(
name|TestExecutor
operator|)
name|executor
operator|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncCallWithHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|MyHandler
name|h
init|=
operator|new
name|MyHandler
argument_list|()
decl_stmt|;
name|MyHandler
operator|.
name|invocationCount
operator|=
literal|0
expr_stmt|;
name|String
name|expectedString
init|=
operator|new
name|String
argument_list|(
literal|"Hello, finally!"
argument_list|)
decl_stmt|;
try|try
block|{
name|Greeter
name|greeter
init|=
operator|(
name|Greeter
operator|)
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|delay
init|=
literal|3000
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f
init|=
name|greeter
operator|.
name|greetMeLaterAsync
argument_list|(
name|delay
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|long
name|after
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Duration of calls exceeded "
operator|+
name|delay
operator|+
literal|" ms"
argument_list|,
name|after
operator|-
name|before
operator|<
name|delay
argument_list|)
expr_stmt|;
comment|// first time round, responses should not be available yet
name|assertFalse
argument_list|(
literal|"Response already available."
argument_list|,
name|f
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|f
operator|.
name|isDone
argument_list|()
operator|&&
name|i
operator|<
literal|50
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"callback was not executed or did not return the expected result"
argument_list|,
name|expectedString
argument_list|,
name|h
operator|.
name|getReplyBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MyHandler
operator|.
name|invocationCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncCallWithHandlerAndMultipleClients
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
specifier|final
name|MyHandler
name|h
init|=
operator|new
name|MyHandler
argument_list|()
decl_stmt|;
name|MyHandler
operator|.
name|invocationCount
operator|=
literal|0
expr_stmt|;
specifier|final
name|String
name|expectedString
init|=
operator|new
name|String
argument_list|(
literal|"Hello, finally!"
argument_list|)
decl_stmt|;
class|class
name|Poller
extends|extends
name|Thread
block|{
name|Future
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
name|int
name|tid
decl_stmt|;
name|Poller
parameter_list|(
name|Future
argument_list|<
name|?
argument_list|>
name|f
parameter_list|,
name|int
name|t
parameter_list|)
block|{
name|future
operator|=
name|f
expr_stmt|;
name|tid
operator|=
name|t
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|tid
operator|%
literal|2
operator|>
literal|0
condition|)
block|{
while|while
condition|(
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Poller "
operator|+
name|tid
operator|+
literal|" failed with "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"callback was not executed or did not return the expected result"
argument_list|,
name|expectedString
argument_list|,
name|h
operator|.
name|getReplyBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Greeter
name|greeter
init|=
operator|(
name|Greeter
operator|)
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|delay
init|=
literal|3000
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f
init|=
name|greeter
operator|.
name|greetMeLaterAsync
argument_list|(
name|delay
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|long
name|after
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Duration of calls exceeded "
operator|+
name|delay
operator|+
literal|" ms"
argument_list|,
name|after
operator|-
name|before
operator|<
name|delay
argument_list|)
expr_stmt|;
comment|// first time round, responses should not be available yet
name|assertFalse
argument_list|(
literal|"Response already available."
argument_list|,
name|f
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|Poller
index|[]
name|pollers
init|=
operator|new
name|Poller
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pollers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pollers
index|[
name|i
index|]
operator|=
operator|new
name|Poller
argument_list|(
name|f
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Poller
name|p
range|:
name|pollers
control|)
block|{
name|p
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Poller
name|p
range|:
name|pollers
control|)
block|{
name|p
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MyHandler
operator|.
name|invocationCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFaults
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|ExecutorService
name|ex
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|service
operator|.
name|setExecutor
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|noSuchCodeFault
init|=
literal|"NoSuchCodeLitFault"
decl_stmt|;
name|String
name|badRecordFault
init|=
literal|"BadRecordLitFault"
decl_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
try|try
block|{
name|greeter
operator|.
name|testDocLitFault
argument_list|(
name|noSuchCodeFault
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown NoSuchCodeLitFault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchCodeLitFault
name|nslf
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nslf
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|greeter
operator|.
name|testDocLitFault
argument_list|(
name|badRecordFault
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown BadRecordLitFault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRecordLitFault
name|brlf
parameter_list|)
block|{
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|bp
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|String
name|contentType
init|=
operator|(
name|String
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml; charset=utf-8"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|Integer
name|responseCode
init|=
operator|(
name|Integer
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|responseCode
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|brlf
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BadRecordLitFault"
argument_list|,
name|brlf
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFaultStackTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"cxf.config.file.url"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"fault-stack-trace.xml"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|SOAPService
name|service
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|ExecutorService
name|ex
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|service
operator|.
name|setExecutor
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// trigger runtime exception throw of implementor method
name|greeter
operator|.
name|testDocLitFault
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown Runtime exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"can't get back original message"
argument_list|,
literal|"Unknown source"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getStackTrace
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSayHi
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|httpConnection
init|=
name|getHttpConnection
argument_list|(
literal|"http://localhost:9000/SoapContext/SoapPort/sayHi"
argument_list|)
decl_stmt|;
name|httpConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|httpConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|httpConnection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml; charset=utf-8"
argument_list|,
name|httpConnection
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OK"
argument_list|,
name|httpConnection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|httpConnection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"soap"
argument_list|,
name|Soap11
operator|.
name|SOAP_NAMESPACE
argument_list|)
expr_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"ns2"
argument_list|,
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|)
expr_stmt|;
name|XPathUtils
name|xu
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|Node
name|body
init|=
operator|(
name|Node
operator|)
name|xu
operator|.
name|getValue
argument_list|(
literal|"/soap:Envelope/soap:Body"
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|String
name|response
init|=
operator|(
name|String
operator|)
name|xu
operator|.
name|getValue
argument_list|(
literal|"//ns2:sayHiResponse/ns2:responseType/text()"
argument_list|,
name|body
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bonjour"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGreetMe
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|httpConnection
init|=
name|getHttpConnection
argument_list|(
literal|"http://localhost:9000/SoapContext/SoapPort/greetMe/requestType/cxf"
argument_list|)
decl_stmt|;
name|httpConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|httpConnection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml; charset=utf-8"
argument_list|,
name|httpConnection
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OK"
argument_list|,
name|httpConnection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|httpConnection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"soap"
argument_list|,
name|Soap11
operator|.
name|SOAP_NAMESPACE
argument_list|)
expr_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"ns2"
argument_list|,
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|)
expr_stmt|;
name|XPathUtils
name|xu
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|Node
name|body
init|=
operator|(
name|Node
operator|)
name|xu
operator|.
name|getValue
argument_list|(
literal|"/soap:Envelope/soap:Body"
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|String
name|response
init|=
operator|(
name|String
operator|)
name|xu
operator|.
name|getValue
argument_list|(
literal|"//ns2:greetMeResponse/ns2:responseType/text()"
argument_list|,
name|body
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello cxf"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWSDL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"http://localhost:9000/SoapContext/SoapPort?wsdl"
decl_stmt|;
name|HttpURLConnection
name|httpConnection
init|=
name|getHttpConnection
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|httpConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|httpConnection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml"
argument_list|,
name|httpConnection
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OK"
argument_list|,
name|httpConnection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|httpConnection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetGreetMeFromQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"http://localhost:9000/SoapContext/SoapPort/greetMe?requestType="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"cxf (was CeltixFire)"
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|httpConnection
init|=
name|getHttpConnection
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|httpConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|httpConnection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml; charset=utf-8"
argument_list|,
name|httpConnection
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OK"
argument_list|,
name|httpConnection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|httpConnection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"soap"
argument_list|,
name|Soap11
operator|.
name|SOAP_NAMESPACE
argument_list|)
expr_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"ns2"
argument_list|,
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|)
expr_stmt|;
name|XPathUtils
name|xu
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|Node
name|body
init|=
operator|(
name|Node
operator|)
name|xu
operator|.
name|getValue
argument_list|(
literal|"/soap:Envelope/soap:Body"
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|String
name|response
init|=
operator|(
name|String
operator|)
name|xu
operator|.
name|getValue
argument_list|(
literal|"//ns2:greetMeResponse/ns2:responseType/text()"
argument_list|,
name|body
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello cxf (was CeltixFire)"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|fakePortName
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/"
argument_list|,
literal|"http://localhost:9000/SoapContext/SoapPort"
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|fakePortName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|//try the jaxws way
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|bp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|USERNAME_PROPERTY
argument_list|,
literal|"BJ"
argument_list|)
expr_stmt|;
name|bp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|PASSWORD_PROPERTY
argument_list|,
literal|"pswd"
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"secure"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello BJ"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|bp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|remove
argument_list|(
name|BindingProvider
operator|.
name|USERNAME_PROPERTY
argument_list|)
expr_stmt|;
name|bp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|remove
argument_list|(
name|BindingProvider
operator|.
name|PASSWORD_PROPERTY
argument_list|)
expr_stmt|;
comment|//try setting on the conduit directly
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|greeter
argument_list|)
decl_stmt|;
name|HTTPConduit
name|httpConduit
init|=
operator|(
name|HTTPConduit
operator|)
name|client
operator|.
name|getConduit
argument_list|()
decl_stmt|;
name|AuthorizationPolicy
name|policy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setUserName
argument_list|(
literal|"BJ2"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setPassword
argument_list|(
literal|"pswd"
argument_list|)
expr_stmt|;
name|httpConduit
operator|.
name|setAuthorization
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|s
operator|=
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"secure"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello BJ2"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBogusAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|realAddress
init|=
literal|"http://localhost:9015/SoapContext/SoapPort"
decl_stmt|;
name|SOAPServiceBogusAddressTest
name|service
init|=
operator|new
name|SOAPServiceBogusAddressTest
argument_list|()
decl_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getSoapPort
argument_list|()
decl_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|f
parameter_list|)
block|{
comment|// expected
block|}
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|bp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|realAddress
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|//should persist
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|bp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|remove
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|f
parameter_list|)
block|{
comment|// expected
block|}
name|bp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|realAddress
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bonjour"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
comment|/*     @Test     public void testDynamicClientFactory2() throws Exception {         String wsdlUrl = "http://sdpwsparam.strikeiron.com/sdpNFLTeams?WSDL";          //TODO test fault exceptions          DynamicClientFactory dcf = DynamicClientFactory.newInstance();         Client client = dcf.createClient(wsdlUrl);         Object o = Class.forName("com.strikeiron.GetTeamInfoByCity", true,                                   Thread.currentThread().getContextClassLoader()).newInstance();         Object[] result = client.invoke("GetTeamInfoByCity", "a", "b", "New England");                           //System.out.println(Arrays.asList(result));              }     */
annotation|@
name|Test
specifier|public
name|void
name|testDynamicClientFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|String
name|wsdlUrl
init|=
literal|null
decl_stmt|;
name|wsdlUrl
operator|=
name|wsdl
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|//TODO test fault exceptions
name|DynamicClientFactory
name|dcf
init|=
name|DynamicClientFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Client
name|client
init|=
name|dcf
operator|.
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|serviceName
argument_list|,
name|portName
argument_list|)
decl_stmt|;
name|client
operator|.
name|invoke
argument_list|(
literal|"greetMe"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Object
index|[]
name|result
init|=
name|client
operator|.
name|invoke
argument_list|(
literal|"sayHi"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bonjour"
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//TODO: the following isn't a real test. We need to test against a service
comment|// that would actually notice the difference. At least it ensures that
comment|// specifying the property does not explode.
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jaxbContextProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|jaxbContextProperties
operator|.
name|put
argument_list|(
literal|"com.sun.xml.bind.defaultNamespaceRemap"
argument_list|,
literal|"uri:ultima:thule"
argument_list|)
expr_stmt|;
name|dcf
operator|.
name|setJaxbContextProperties
argument_list|(
name|jaxbContextProperties
argument_list|)
expr_stmt|;
name|client
operator|=
name|dcf
operator|.
name|createClient
argument_list|(
name|wsdlUrl
argument_list|,
name|serviceName
argument_list|,
name|portName
argument_list|)
expr_stmt|;
name|client
operator|.
name|invoke
argument_list|(
literal|"greetMe"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|result
operator|=
name|client
operator|.
name|invoke
argument_list|(
literal|"sayHi"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bonjour"
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiPorts
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
name|QName
name|sname
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SOAPServiceMultiPortTypeTest"
argument_list|)
decl_stmt|;
name|SOAPServiceMultiPortTypeTest
name|service
init|=
operator|new
name|SOAPServiceMultiPortTypeTest
argument_list|(
name|wsdl
argument_list|,
name|sname
argument_list|)
decl_stmt|;
name|BareDocumentResponse
name|resp
init|=
name|service
operator|.
name|getDocLitBarePort
argument_list|()
operator|.
name|testDocLitBare
argument_list|(
literal|"CXF"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CXF"
argument_list|,
name|resp
operator|.
name|getCompany
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|service
operator|.
name|getGreeterPort
argument_list|()
operator|.
name|greetMe
argument_list|(
literal|"CXF"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello CXF"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|InvocationHandler
name|handler
init|=
operator|new
name|InvocationHandler
argument_list|()
block|{
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Object
name|implementor4
init|=
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|DocLitWrappedCodeFirstService
operator|.
name|class
block|}
operator|,
name|handler
block|)
function|;
name|Endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:9023/DocLitWrappedCodeFirstService/"
argument_list|,
name|implementor4
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:9023/DocLitWrappedCodeFirstService/?wsdl"
argument_list|)
decl_stmt|;
name|InputStream
name|ins
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|ins
operator|.
name|close
parameter_list|()
constructor_decl|;
block|}
end_class

unit|}
end_unit

