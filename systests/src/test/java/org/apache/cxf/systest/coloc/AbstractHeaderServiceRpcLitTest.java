begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|coloc
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|FaultDetailT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|HeaderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|InHeaderResponseT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|InHeaderT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|InoutHeaderResponseT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|InoutHeaderT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|OutHeaderResponseT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|OutHeaderT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|PingMeResponseT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|PingMeT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|rpc_lit
operator|.
name|HeaderTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|rpc_lit
operator|.
name|PingMeFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|//import org.junit.Ignore;
end_comment

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class invokes the service described in /wsdl/header_rpc_lit.wsdl.  * This WSDL contains operations with in-out parameters.  * It sets up the a client in "testRouter()" to send requests to the  * router which is listening on port 9001 (SOAP/HTTP).  * The subclass defines where CXF configuration and the  * target server (transport, etc).  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHeaderServiceRpcLitTest
extends|extends
name|AbstractColocTest
block|{
specifier|static
specifier|final
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/headers/rpc_lit"
argument_list|,
literal|"SOAPHeaderService"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|QName
name|PORT_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/headers/rpc_lit"
argument_list|,
literal|"SoapPort"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|WSDL_LOCATION
init|=
literal|"/wsdl/header_rpc_lit.wsdl"
decl_stmt|;
specifier|private
name|HeaderTester
name|port
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|port
operator|=
name|getPort
argument_list|(
name|getServiceQname
argument_list|()
argument_list|,
name|getPortQName
argument_list|()
argument_list|,
name|getWsdlLocation
argument_list|()
argument_list|,
name|HeaderTester
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayOperation
parameter_list|()
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|verifyTwoWay
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInHeaderParts
parameter_list|()
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|verifyInHeaderParts
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInOutHeaderParts
parameter_list|()
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|verifyInOutHeaderParts
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutHeaderParts
parameter_list|()
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|verifyOutHeaderParts
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFault
parameter_list|()
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|verifyFaults
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAll
parameter_list|()
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
name|idx
operator|++
control|)
block|{
name|verifyTwoWay
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|verifyInHeaderParts
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|verifyInOutHeaderParts
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|verifyOutHeaderParts
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|verifyFaults
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|verifyTwoWay
parameter_list|(
name|HeaderTester
name|ht
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Client: calling pingMe"
argument_list|)
expr_stmt|;
name|PingMeT
name|in
init|=
operator|new
name|PingMeT
argument_list|()
decl_stmt|;
try|try
block|{
name|in
operator|.
name|setFaultType
argument_list|(
literal|"ABCD"
argument_list|)
expr_stmt|;
name|PingMeResponseT
name|ret
init|=
name|ht
operator|.
name|pingMe
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not throw any exception"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|verifyInHeaderParts
parameter_list|(
name|HeaderTester
name|ht
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Client: calling inHeader"
argument_list|)
expr_stmt|;
name|InHeaderT
name|inHeader
init|=
operator|new
name|InHeaderT
argument_list|()
decl_stmt|;
name|inHeader
operator|.
name|setRequestType
argument_list|(
name|HeaderTesterUtil
operator|.
name|IN_REQUEST_TYPE
argument_list|)
expr_stmt|;
name|HeaderInfo
name|headerInfo
init|=
operator|new
name|HeaderInfo
argument_list|()
decl_stmt|;
name|headerInfo
operator|.
name|setMessage
argument_list|(
name|HeaderTesterUtil
operator|.
name|IN_MESSAGE
argument_list|)
expr_stmt|;
name|headerInfo
operator|.
name|setOriginator
argument_list|(
name|HeaderTesterUtil
operator|.
name|IN_ORIGINATOR
argument_list|)
expr_stmt|;
name|InHeaderResponseT
name|inHeaderResponse
init|=
name|ht
operator|.
name|inHeader
argument_list|(
name|inHeader
argument_list|,
name|headerInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_RESPONSE_TYPE
argument_list|,
name|inHeaderResponse
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyInOutHeaderParts
parameter_list|(
name|HeaderTester
name|ht
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Client: calling inoutHeader"
argument_list|)
expr_stmt|;
name|InoutHeaderT
name|inoutHeader
init|=
operator|new
name|InoutHeaderT
argument_list|()
decl_stmt|;
name|inoutHeader
operator|.
name|setRequestType
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_REQUEST_TYPE_IN
argument_list|)
expr_stmt|;
name|HeaderInfo
name|headerInfo
init|=
operator|new
name|HeaderInfo
argument_list|()
decl_stmt|;
name|headerInfo
operator|.
name|setMessage
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_MESSAGE_IN
argument_list|)
expr_stmt|;
name|headerInfo
operator|.
name|setOriginator
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_ORIGINATOR_IN
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|HeaderInfo
argument_list|>
name|holder
init|=
operator|new
name|Holder
argument_list|<
name|HeaderInfo
argument_list|>
argument_list|()
decl_stmt|;
name|holder
operator|.
name|value
operator|=
name|headerInfo
expr_stmt|;
name|InoutHeaderResponseT
name|inoutHeaderResponse
init|=
name|ht
operator|.
name|inoutHeader
argument_list|(
name|inoutHeader
argument_list|,
name|holder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_REQUEST_TYPE_OUT
argument_list|,
name|inoutHeaderResponse
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_REQUEST_TYPE_OUT
argument_list|,
name|inoutHeader
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_MESSAGE_OUT
argument_list|,
name|holder
operator|.
name|value
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_ORIGINATOR_OUT
argument_list|,
name|holder
operator|.
name|value
operator|.
name|getOriginator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyOutHeaderParts
parameter_list|(
name|HeaderTester
name|ht
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Client: calling outHeader"
argument_list|)
expr_stmt|;
name|OutHeaderT
name|outHeader
init|=
operator|new
name|OutHeaderT
argument_list|()
decl_stmt|;
name|outHeader
operator|.
name|setRequestType
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_REQUEST_TYPE
argument_list|)
expr_stmt|;
name|OutHeaderResponseT
name|theResponse
init|=
operator|new
name|OutHeaderResponseT
argument_list|()
decl_stmt|;
name|theResponse
operator|.
name|setResponseType
argument_list|(
literal|"bogus"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|OutHeaderResponseT
argument_list|>
name|respHolder
init|=
operator|new
name|Holder
argument_list|<
name|OutHeaderResponseT
argument_list|>
argument_list|()
decl_stmt|;
name|respHolder
operator|.
name|value
operator|=
name|theResponse
expr_stmt|;
name|Holder
argument_list|<
name|HeaderInfo
argument_list|>
name|holder
init|=
operator|new
name|Holder
argument_list|<
name|HeaderInfo
argument_list|>
argument_list|()
decl_stmt|;
name|HeaderInfo
name|headerInfo
init|=
operator|new
name|HeaderInfo
argument_list|()
decl_stmt|;
name|headerInfo
operator|.
name|setMessage
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_MESSAGE_IN
argument_list|)
expr_stmt|;
name|headerInfo
operator|.
name|setOriginator
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_ORIGINATOR_IN
argument_list|)
expr_stmt|;
name|holder
operator|.
name|value
operator|=
name|headerInfo
expr_stmt|;
name|ht
operator|.
name|outHeader
argument_list|(
name|outHeader
argument_list|,
name|respHolder
argument_list|,
name|holder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_MESSAGE_OUT
argument_list|,
name|holder
operator|.
name|value
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_ORIGINATOR_OUT
argument_list|,
name|holder
operator|.
name|value
operator|.
name|getOriginator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_RESPONSE_TYPE
argument_list|,
name|respHolder
operator|.
name|value
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyFaults
parameter_list|(
name|HeaderTester
name|ht
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Client: calling pingMe user fault"
argument_list|)
expr_stmt|;
name|PingMeT
name|in
init|=
operator|new
name|PingMeT
argument_list|()
decl_stmt|;
try|try
block|{
name|in
operator|.
name|setFaultType
argument_list|(
literal|"USER"
argument_list|)
expr_stmt|;
name|ht
operator|.
name|pingMe
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw a PingeMeFault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PingMeFault
name|pmf
parameter_list|)
block|{
name|FaultDetailT
name|detail
init|=
name|pmf
operator|.
name|getFaultInfo
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|detail
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major Version should be 1"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|detail
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor Version should be 2"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|detail
operator|.
name|getMinor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFaultCodeCheckEnabled
argument_list|()
condition|)
block|{
name|verifyFaultCode
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Client: calling pingMe Cxf System Fault"
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|setFaultType
argument_list|(
literal|"SYSTEM"
argument_list|)
expr_stmt|;
name|ht
operator|.
name|pingMe
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw a CXF Fault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|fault
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Wrong message: "
operator|+
name|fault
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|-
literal|1
operator|==
name|fault
operator|.
name|getMessage
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|HeaderTesterUtil
operator|.
name|EX_STRING
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFaultCodeCheckEnabled
argument_list|()
condition|)
block|{
name|verifyFaultCode
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PingMeFault
name|pmf
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not receive PingMefault"
argument_list|)
expr_stmt|;
block|}
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Client: calling pingMe java runtime exception"
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|setFaultType
argument_list|(
literal|"RUNTIME"
argument_list|)
expr_stmt|;
name|ht
operator|.
name|pingMe
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw a CXF Fault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|fault
parameter_list|)
block|{
name|assertFalse
argument_list|(
operator|-
literal|1
operator|==
name|fault
operator|.
name|getMessage
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|HeaderTesterUtil
operator|.
name|EX_STRING
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFaultCodeCheckEnabled
argument_list|()
condition|)
block|{
name|verifyFaultCode
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PingMeFault
name|pmf
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not receive PingMefault"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|verifyFaultCode
parameter_list|(
name|HeaderTester
name|proxy
parameter_list|)
block|{
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|proxy
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|respCtx
init|=
name|bp
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|respCtx
argument_list|)
expr_stmt|;
name|Integer
name|val
init|=
operator|(
name|Integer
operator|)
name|respCtx
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Message.RESPONSE_CODE should be 500"
argument_list|,
literal|500
argument_list|,
name|val
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getWsdlLocation
parameter_list|()
block|{
return|return
name|WSDL_LOCATION
return|;
block|}
specifier|protected
name|QName
name|getServiceQname
parameter_list|()
block|{
return|return
name|SERVICE_NAME
return|;
block|}
specifier|protected
name|QName
name|getPortQName
parameter_list|()
block|{
return|return
name|PORT_NAME
return|;
block|}
specifier|protected
name|boolean
name|isFaultCodeCheckEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

