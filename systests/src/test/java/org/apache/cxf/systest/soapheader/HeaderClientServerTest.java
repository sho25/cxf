begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|soapheader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlSeeAlso
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pizza
operator|.
name|Pizza
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pizza
operator|.
name|PizzaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pizza
operator|.
name|types
operator|.
name|CallerIDHeaderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pizza
operator|.
name|types
operator|.
name|OrderPizzaResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pizza
operator|.
name|types
operator|.
name|OrderPizzaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pizza
operator|.
name|types
operator|.
name|ToppingsListType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|HeaderClientServerTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|private
specifier|final
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/pizza"
argument_list|,
literal|"PizzaService"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Pizza
name|port
init|=
name|getPort
argument_list|()
decl_stmt|;
name|OrderPizzaType
name|req
init|=
operator|new
name|OrderPizzaType
argument_list|()
decl_stmt|;
name|ToppingsListType
name|t
init|=
operator|new
name|ToppingsListType
argument_list|()
decl_stmt|;
name|t
operator|.
name|getTopping
argument_list|()
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setToppings
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|CallerIDHeaderType
name|header
init|=
operator|new
name|CallerIDHeaderType
argument_list|()
decl_stmt|;
name|header
operator|.
name|setName
argument_list|(
literal|"mao"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setPhoneNumber
argument_list|(
literal|"108"
argument_list|)
expr_stmt|;
name|OrderPizzaResponseType
name|res
init|=
name|port
operator|.
name|orderPizza
argument_list|(
name|req
argument_list|,
name|header
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|208
argument_list|,
name|res
operator|.
name|getMinutesUntilReady
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicConnectionNoHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|PizzaNoHeader
name|port
init|=
name|getPortNoHeader
argument_list|()
decl_stmt|;
name|OrderPizzaType
name|req
init|=
operator|new
name|OrderPizzaType
argument_list|()
decl_stmt|;
name|ToppingsListType
name|t
init|=
operator|new
name|ToppingsListType
argument_list|()
decl_stmt|;
name|t
operator|.
name|getTopping
argument_list|()
operator|.
name|add
argument_list|(
literal|"NoHeader!"
argument_list|)
expr_stmt|;
name|t
operator|.
name|getTopping
argument_list|()
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setToppings
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|OrderPizzaResponseType
name|res
init|=
name|port
operator|.
name|orderPizza
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|res
operator|.
name|getMinutesUntilReady
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Pizza
name|getPort
parameter_list|()
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/pizza_service.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|PizzaService
name|service
init|=
operator|new
name|PizzaService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null "
argument_list|,
name|service
argument_list|)
expr_stmt|;
return|return
name|service
operator|.
name|getPizzaPort
argument_list|()
return|;
block|}
specifier|private
name|PizzaNoHeader
name|getPortNoHeader
parameter_list|()
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/pizza_service.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|PizzaService
name|service
init|=
operator|new
name|PizzaService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null "
argument_list|,
name|service
argument_list|)
expr_stmt|;
return|return
name|service
operator|.
name|getPort
argument_list|(
name|PizzaNoHeader
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/pizza"
argument_list|,
name|name
operator|=
literal|"Pizza"
argument_list|)
annotation|@
name|XmlSeeAlso
argument_list|(
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pizza
operator|.
name|types
operator|.
name|ObjectFactory
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SOAPBinding
argument_list|(
name|parameterStyle
operator|=
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|BARE
argument_list|)
specifier|public
interface|interface
name|PizzaNoHeader
block|{
annotation|@
name|SOAPBinding
argument_list|(
name|parameterStyle
operator|=
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|BARE
argument_list|)
annotation|@
name|WebResult
argument_list|(
name|name
operator|=
literal|"OrderResponse"
argument_list|,
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/pizza/types"
argument_list|,
name|partName
operator|=
literal|"body"
argument_list|)
annotation|@
name|WebMethod
argument_list|(
name|operationName
operator|=
literal|"OrderPizza"
argument_list|)
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pizza
operator|.
name|types
operator|.
name|OrderPizzaResponseType
name|orderPizza
parameter_list|(
annotation|@
name|WebParam
argument_list|(
name|partName
operator|=
literal|"body"
argument_list|,
name|name
operator|=
literal|"OrderRequest"
argument_list|,
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/pizza/types"
argument_list|)
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pizza
operator|.
name|types
operator|.
name|OrderPizzaType
name|body
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

