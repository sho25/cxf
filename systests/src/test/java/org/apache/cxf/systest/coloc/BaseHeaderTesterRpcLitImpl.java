begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|coloc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|FaultDetailT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|HeaderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|InHeaderResponseT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|InHeaderT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|InoutHeaderResponseT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|InoutHeaderT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|OutHeaderResponseT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|OutHeaderT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|PingMeResponseT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|coloc
operator|.
name|types
operator|.
name|PingMeT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|rpc_lit
operator|.
name|HeaderTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|rpc_lit
operator|.
name|PingMeFault
import|;
end_import

begin_class
specifier|public
class|class
name|BaseHeaderTesterRpcLitImpl
implements|implements
name|HeaderTester
block|{
specifier|private
name|Log
name|logger
decl_stmt|;
specifier|public
name|InHeaderResponseT
name|inHeader
parameter_list|(
name|InHeaderT
name|in
parameter_list|,
name|HeaderInfo
name|header
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Server: inHeader called"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|IN_REQUEST_TYPE
argument_list|,
name|in
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|IN_MESSAGE
argument_list|,
name|header
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|IN_ORIGINATOR
argument_list|,
name|header
operator|.
name|getOriginator
argument_list|()
argument_list|)
expr_stmt|;
name|InHeaderResponseT
name|inHeaderResponse
init|=
operator|new
name|InHeaderResponseT
argument_list|()
decl_stmt|;
name|inHeaderResponse
operator|.
name|setResponseType
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_RESPONSE_TYPE
argument_list|)
expr_stmt|;
return|return
name|inHeaderResponse
return|;
block|}
specifier|public
name|InoutHeaderResponseT
name|inoutHeader
parameter_list|(
name|InoutHeaderT
name|in
parameter_list|,
name|Holder
argument_list|<
name|HeaderInfo
argument_list|>
name|header
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Server: inoutHeader called"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_REQUEST_TYPE_IN
argument_list|,
name|in
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_MESSAGE_IN
argument_list|,
name|header
operator|.
name|value
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_ORIGINATOR_IN
argument_list|,
name|header
operator|.
name|value
operator|.
name|getOriginator
argument_list|()
argument_list|)
expr_stmt|;
name|HeaderInfo
name|out
init|=
operator|new
name|HeaderInfo
argument_list|()
decl_stmt|;
name|out
operator|.
name|setMessage
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_MESSAGE_OUT
argument_list|)
expr_stmt|;
name|out
operator|.
name|setOriginator
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_ORIGINATOR_OUT
argument_list|)
expr_stmt|;
name|header
operator|.
name|value
operator|=
name|out
expr_stmt|;
name|InoutHeaderResponseT
name|inoutHeaderResponse
init|=
operator|new
name|InoutHeaderResponseT
argument_list|()
decl_stmt|;
name|inoutHeaderResponse
operator|.
name|setResponseType
argument_list|(
name|HeaderTesterUtil
operator|.
name|INOUT_REQUEST_TYPE_OUT
argument_list|)
expr_stmt|;
return|return
name|inoutHeaderResponse
return|;
block|}
specifier|public
name|void
name|outHeader
parameter_list|(
name|OutHeaderT
name|in
parameter_list|,
name|Holder
argument_list|<
name|OutHeaderResponseT
argument_list|>
name|out
parameter_list|,
name|Holder
argument_list|<
name|HeaderInfo
argument_list|>
name|header
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Server: outHeader called"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_REQUEST_TYPE
argument_list|,
name|in
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
name|HeaderInfo
name|outHeader
init|=
operator|new
name|HeaderInfo
argument_list|()
decl_stmt|;
name|outHeader
operator|.
name|setMessage
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_MESSAGE_OUT
argument_list|)
expr_stmt|;
name|outHeader
operator|.
name|setOriginator
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_ORIGINATOR_OUT
argument_list|)
expr_stmt|;
name|header
operator|.
name|value
operator|=
name|outHeader
expr_stmt|;
name|OutHeaderResponseT
name|resp
init|=
operator|new
name|OutHeaderResponseT
argument_list|()
decl_stmt|;
name|resp
operator|.
name|setResponseType
argument_list|(
name|HeaderTesterUtil
operator|.
name|OUT_RESPONSE_TYPE
argument_list|)
expr_stmt|;
name|out
operator|.
name|value
operator|=
name|resp
expr_stmt|;
block|}
specifier|public
name|PingMeResponseT
name|pingMe
parameter_list|(
name|PingMeT
name|in
parameter_list|)
throws|throws
name|PingMeFault
block|{
name|String
name|msgType
init|=
name|in
operator|.
name|getFaultType
argument_list|()
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Server: in pingMe:"
operator|+
name|msgType
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"USER"
operator|.
name|equals
argument_list|(
name|msgType
argument_list|)
condition|)
block|{
name|FaultDetailT
name|detail
init|=
operator|new
name|FaultDetailT
argument_list|()
decl_stmt|;
name|detail
operator|.
name|setMajor
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|detail
operator|.
name|setMinor
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PingMeFault
argument_list|(
literal|"USER FAULT TEST"
argument_list|,
name|detail
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"SYSTEM"
operator|.
name|equals
argument_list|(
name|msgType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
name|HeaderTesterUtil
operator|.
name|EX_STRING
argument_list|,
operator|(
name|ResourceBundle
operator|)
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"FAULT TEST"
block|}
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"RUNTIME"
operator|.
name|equals
argument_list|(
name|msgType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|HeaderTesterUtil
operator|.
name|EX_STRING
argument_list|)
throw|;
block|}
return|return
operator|new
name|PingMeResponseT
argument_list|()
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|logger
operator|=
name|log
expr_stmt|;
block|}
specifier|protected
name|Log
name|getLogger
parameter_list|()
block|{
return|return
name|logger
return|;
block|}
block|}
end_class

end_unit

