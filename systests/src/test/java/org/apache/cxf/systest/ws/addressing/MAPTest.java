begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|BadRecordLitFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the addition of WS-Addressing Message Addressing Properties.  */
end_comment

begin_class
specifier|public
class|class
name|MAPTest
extends|extends
name|MAPTestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG
decl_stmt|;
static|static
block|{
name|CONFIG
operator|=
literal|"org/apache/cxf/systest/ws/addressing/cxf"
operator|+
operator|(
operator|(
literal|"HP-UX"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|)
operator|||
literal|"Windows XP"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|)
operator|)
condition|?
literal|"-hpux"
else|:
literal|""
operator|)
operator|+
literal|".xml"
expr_stmt|;
block|}
specifier|public
name|String
name|getConfigFileName
parameter_list|()
block|{
return|return
name|CONFIG
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUsingKeepAliveConnection
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
literal|"HP-UX"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|n
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"oneway on keep-alive connection"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"twoway on keep-alive connection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|0
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|greeter
operator|.
name|testDocLitFault
argument_list|(
literal|"BadRecordLitFault"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected fault from service"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRecordLitFault
name|brlf
parameter_list|)
block|{
comment|//checkVerification();
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|testFallbackThreadPoolConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Runnable
name|r
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|greeter
operator|.
name|greetMeLater
argument_list|(
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Thread
index|[]
name|invokers
init|=
operator|new
name|Thread
index|[
literal|5
index|]
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|invokers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|invokers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|invokers
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|invokers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|invokers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|invokers
index|[
name|i
index|]
operator|.
name|join
argument_list|(
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected duration: "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
argument_list|,
name|end
operator|-
name|start
operator|>
literal|9
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

