begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AttachmentProviderXMLClientServerTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|AttachmentServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestWithAttachment
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
literal|"http://localhost:9033/XMLServiceAttachment"
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|String
name|ct
init|=
literal|"multipart/related; type=\"text/xml\"; "
operator|+
literal|"start=\"rootPart\"; "
operator|+
literal|"boundary=\"----=_Part_4_701508.1145579811786\""
decl_stmt|;
name|connection
operator|.
name|addRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
name|ct
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"attachmentData"
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|connection
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wrong content type"
argument_list|,
name|connection
operator|.
name|getContentType
argument_list|()
operator|.
name|contains
argument_list|(
literal|"multipart/related"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|input
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|input
operator|.
name|indexOf
argument_list|(
literal|"--uuid"
argument_list|)
decl_stmt|;
name|int
name|idx2
init|=
name|input
operator|.
name|indexOf
argument_list|(
literal|"--uuid"
argument_list|,
name|idx
operator|+
literal|5
argument_list|)
decl_stmt|;
name|String
name|root
init|=
name|input
operator|.
name|substring
argument_list|(
name|idx
argument_list|,
name|idx2
argument_list|)
decl_stmt|;
name|idx
operator|=
name|root
operator|.
name|indexOf
argument_list|(
literal|"\r\n\r\n"
argument_list|)
expr_stmt|;
name|root
operator|=
name|root
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Document
name|result
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|resList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagName
argument_list|(
name|result
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"att"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Two attachments must've been encoded"
argument_list|,
literal|2
argument_list|,
name|resList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAttachment
argument_list|(
name|resList
argument_list|,
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|verifyAttachment
argument_list|(
name|resList
argument_list|,
literal|"bar"
argument_list|,
literal|"barbaz"
argument_list|)
expr_stmt|;
name|input
operator|=
name|input
operator|.
name|substring
argument_list|(
name|idx2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|input
operator|.
name|contains
argument_list|(
literal|"<foo>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|input
operator|.
name|contains
argument_list|(
literal|"ABCDEFGHIJKLMNOP"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyAttachment
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|atts
parameter_list|,
name|String
name|contentId
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|Element
name|expElem
range|:
name|atts
control|)
block|{
name|String
name|child
init|=
name|expElem
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|String
name|contentIdVal
init|=
name|expElem
operator|.
name|getAttribute
argument_list|(
literal|"contentId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentId
operator|.
name|equals
argument_list|(
name|contentIdVal
argument_list|)
operator|&&
operator|(
name|Base64Utility
operator|.
name|encode
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|child
argument_list|)
operator|||
name|Base64Utility
operator|.
name|encode
argument_list|(
operator|(
name|value
operator|+
literal|"\n"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|child
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"No encoded attachment with id "
operator|+
name|contentId
operator|+
literal|" found"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

