begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPBody
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPEnvelope
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|soap
operator|.
name|SOAPHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|soap
operator|.
name|SOAPMessageContext
import|;
end_import

begin_class
specifier|public
class|class
name|TestSOAPHandler
implements|implements
name|SOAPHandler
argument_list|<
name|SOAPMessageContext
argument_list|>
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
try|try
block|{
name|SOAPMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|/*              * System.out.println("-----------soap---------");              * msg.writeTo(System.out);              * System.out.println("-----------soap---------");              */
name|SOAPEnvelope
name|env
init|=
name|msg
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
decl_stmt|;
name|SOAPBody
name|body
init|=
name|env
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|body
operator|.
name|getChildElements
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|elem
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|elem
operator|instanceof
name|SOAPElement
condition|)
block|{
name|Iterator
name|it2
init|=
operator|(
operator|(
name|SOAPElement
operator|)
name|elem
operator|)
operator|.
name|getChildElements
argument_list|()
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|elem2
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|elem2
operator|instanceof
name|SOAPElement
condition|)
block|{
name|String
name|value
init|=
operator|(
operator|(
name|SOAPElement
operator|)
name|elem2
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|(
name|value
operator|.
name|indexOf
argument_list|(
literal|"Milestone-0"
argument_list|)
operator|>=
literal|0
operator|||
name|value
operator|.
name|indexOf
argument_list|(
literal|"TestGreetMeResponseServerLogicalHandler"
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
name|value
operator|=
name|value
operator|+
literal|"ServerSOAPHandler"
expr_stmt|;
operator|(
operator|(
name|SOAPElement
operator|)
name|elem2
operator|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|msg
operator|.
name|saveChanges
argument_list|()
expr_stmt|;
comment|/*              * System.out.println("-----------soapaf---------");              * msg.writeTo(System.out);              * System.out.println("-----------soapaf---------");              */
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|final
name|Set
argument_list|<
name|QName
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|handleFault
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|MessageContext
name|arg0
parameter_list|)
block|{     }
block|}
end_class

end_unit

