begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms
operator|.
name|testsuite
operator|.
name|testcases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms
operator|.
name|testsuite
operator|.
name|util
operator|.
name|JMSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms_simple
operator|.
name|JMSSimplePortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jms_simple
operator|.
name|JMSSimpleService0001
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jms
operator|.
name|EmbeddedJMSBrokerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testsuite
operator|.
name|testcase
operator|.
name|TestCaseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|uri
operator|.
name|JMSEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|uri
operator|.
name|JMSEndpointParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|SOAPJMSTestSuiteClientTest
extends|extends
name|AbstractSOAPJMSTestSuite
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"activemq.store.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
literal|"activemq.store.dir"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"activemq.store.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|put
argument_list|(
literal|"java.util.logging.config.file"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.util.logging.config.file"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|EmbeddedJMSBrokerLauncher
operator|.
name|class
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test0001
parameter_list|()
throws|throws
name|Exception
block|{
name|TestCaseType
name|testcase
init|=
name|JMSTestUtil
operator|.
name|getTestCase
argument_list|(
literal|"test0001"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|testcase
operator|.
name|getAddress
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|JMSEndpoint
name|endpoint
init|=
name|JMSEndpointParser
operator|.
name|createEndpoint
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|String
name|destinationName
init|=
name|endpoint
operator|.
name|getDestinationName
argument_list|()
decl_stmt|;
name|JmsTemplate
name|jmsTemplate
init|=
name|JMSTestUtil
operator|.
name|getJmsTemplate
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|Destination
name|dest
init|=
name|JMSTestUtil
operator|.
name|getJmsDestination
argument_list|(
name|jmsTemplate
argument_list|,
name|destinationName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|JMSSimplePortType
name|simplePort
init|=
name|getPort
argument_list|(
literal|"JMSSimpleService0001"
argument_list|,
literal|"SimplePort"
argument_list|,
name|JMSSimpleService0001
operator|.
name|class
argument_list|,
name|JMSSimplePortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|simplePort
operator|.
name|ping
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|jmsTemplate
operator|.
name|receive
argument_list|(
name|dest
argument_list|)
decl_stmt|;
try|try
block|{
name|checkJMSProperties
argument_list|(
name|message
argument_list|,
name|testcase
operator|.
name|getRequestMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|test0002
parameter_list|()
throws|throws
name|Exception
block|{
name|TestCaseType
name|testcase
init|=
name|JMSTestUtil
operator|.
name|getTestCase
argument_list|(
literal|"test0002"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|testcase
operator|.
name|getAddress
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|JMSEndpoint
name|endpoint
init|=
name|JMSEndpointParser
operator|.
name|createEndpoint
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|String
name|destinationName
init|=
name|endpoint
operator|.
name|getDestinationName
argument_list|()
decl_stmt|;
name|JmsTemplate
name|jmsTemplate
init|=
name|JMSTestUtil
operator|.
name|getJmsTemplate
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|Destination
name|dest
init|=
name|JMSTestUtil
operator|.
name|getJmsDestination
argument_list|(
name|jmsTemplate
argument_list|,
name|destinationName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|JMSSimplePortType
name|simplePort
init|=
name|getPort
argument_list|(
literal|"JMSSimpleService0001"
argument_list|,
literal|"SimplePort"
argument_list|,
name|JMSSimpleService0001
operator|.
name|class
argument_list|,
name|JMSSimplePortType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Thread
name|serviceThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|simplePort
operator|.
name|echo
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|serviceThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
name|jmsTemplate
operator|.
name|receive
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|checkJMSProperties
argument_list|(
name|message
argument_list|,
name|testcase
operator|.
name|getRequestMessage
argument_list|()
argument_list|)
expr_stmt|;
name|serviceThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

