begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|LogicalMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalMessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handlers
operator|.
name|types
operator|.
name|AddNumbers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handlers
operator|.
name|types
operator|.
name|AddNumbersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handlers
operator|.
name|types
operator|.
name|ObjectFactory
import|;
end_import

begin_comment
comment|/**  * handles addition of small numbers.  */
end_comment

begin_class
specifier|public
class|class
name|SmallNumberHandler
extends|extends
name|TestHandlerBase
implements|implements
name|LogicalHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
block|{
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"handlerResource"
argument_list|)
name|String
name|injectedString
decl_stmt|;
specifier|public
name|SmallNumberHandler
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SmallNumberHandler
parameter_list|(
name|boolean
name|serverSide
parameter_list|)
block|{
name|super
argument_list|(
name|serverSide
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getHandlerId
parameter_list|()
block|{
return|return
literal|"SmallNumberHandler"
operator|+
name|getId
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|messageContext
parameter_list|)
block|{
comment|//System.out.println("LogicalMessageHandler handleMessage called");
try|try
block|{
name|boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
comment|// get the LogicalMessage from our context
name|LogicalMessage
name|msg
init|=
name|messageContext
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|// check the payload, if its an AddNumbers request, we'll intervene
name|JAXBContext
name|jaxbContext
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|ObjectFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|payload
init|=
name|msg
operator|.
name|getPayload
argument_list|(
name|jaxbContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|payload
operator|instanceof
name|JAXBElement
condition|)
block|{
name|payload
operator|=
operator|(
operator|(
name|JAXBElement
operator|)
name|payload
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|payload
operator|instanceof
name|AddNumbers
condition|)
block|{
name|AddNumbers
name|req
init|=
operator|(
name|AddNumbers
operator|)
name|payload
decl_stmt|;
comment|// now, if the arguments are small, let's do the calculation here
name|int
name|a
init|=
name|req
operator|.
name|getArg0
argument_list|()
decl_stmt|;
name|int
name|b
init|=
name|req
operator|.
name|getArg1
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSmall
argument_list|(
name|a
argument_list|)
operator|&&
name|isSmall
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|int
name|answer
init|=
name|a
operator|+
name|b
decl_stmt|;
comment|//System.out.printf("SmallNumberHandler addNumbers(%d, %d) == %d\n", a, b, answer);
comment|// ok, we've done the calculation, so build the
comment|// response and set it as the payload of the message
name|AddNumbersResponse
name|resp
init|=
operator|new
name|AddNumbersResponse
argument_list|()
decl_stmt|;
name|resp
operator|.
name|setReturn
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setPayload
argument_list|(
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createAddNumbersResponse
argument_list|(
name|resp
argument_list|)
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
name|Source
name|src
init|=
name|msg
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setPayload
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|payload
operator|=
name|msg
operator|.
name|getPayload
argument_list|(
name|jaxbContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|payload
operator|instanceof
name|JAXBElement
condition|)
block|{
name|payload
operator|=
operator|(
operator|(
name|JAXBElement
operator|)
name|payload
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|AddNumbersResponse
name|resp2
init|=
operator|(
name|AddNumbersResponse
operator|)
name|payload
decl_stmt|;
if|if
condition|(
name|resp2
operator|==
name|resp
condition|)
block|{
throw|throw
operator|new
name|WebServiceException
argument_list|(
literal|"Shouldn't be the same object"
argument_list|)
throw|;
block|}
comment|// finally, return false, indicating that request
comment|// processing stops here and our answer will be
comment|// returned to the client
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|final
name|boolean
name|handleFault
parameter_list|(
name|LogicalMessageContext
name|messageContext
parameter_list|)
block|{
comment|//System.out.println("LogicalMessageHandler handleFault called");
comment|//System.out.println(messageContext);
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|MessageContext
name|ctx
parameter_list|)
block|{
comment|//System.out.println("LogicalHandler close called");
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Map
name|config
parameter_list|)
block|{
comment|//System.out.println("LogicalHandler init called");
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
comment|//System.out.println("LogicalHandler close called");
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|doPostConstruct
parameter_list|()
block|{
name|methodCalled
argument_list|(
literal|"doPostConstruct"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getInjectedString
parameter_list|()
block|{
return|return
name|injectedString
return|;
block|}
specifier|private
name|boolean
name|isSmall
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
operator|>
literal|0
operator|&&
name|i
operator|<=
literal|10
return|;
block|}
block|}
end_class

end_unit

