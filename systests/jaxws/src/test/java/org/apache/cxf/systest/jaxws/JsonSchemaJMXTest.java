begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagementConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world
operator|.
name|GreeterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JsonSchemaJMXTest
extends|extends
name|Assert
block|{
specifier|static
specifier|final
name|String
name|PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|JsonSchemaJMXTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MBeanServerConnection
name|mbsc
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_JMXSERVICE_URL
init|=
literal|"service:jmx:rmi:///jndi/rmi://localhost:9914/jmxrmi"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JsonSchemaJMXTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|jmxServerURL
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testJMXGetJsonSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|(
literal|"/org/apache/cxf/systest/jaxws/jmx-enable.xml"
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|Endpoint
name|ep
init|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SoapContext/SoapPort"
argument_list|,
operator|new
name|GreeterImpl
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|json
init|=
literal|""
decl_stmt|;
try|try
block|{
name|connectToMBserver
argument_list|()
expr_stmt|;
comment|//test getJSONSchema
name|json
operator|=
name|invokeEndpoint
argument_list|(
literal|"getJSONSchema"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|parseJson
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|//test getJSONSchemaForClass
name|json
operator|=
name|invokeEndpoint
argument_list|(
literal|"getJSONSchemaForClass"
argument_list|,
literal|"SayHi"
argument_list|)
expr_stmt|;
name|parseJson
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|//test getJSONSchemaForOperation
name|json
operator|=
name|invokeEndpoint
argument_list|(
literal|"getJSONSchemaForOperation"
argument_list|,
literal|"greetMe"
argument_list|)
expr_stmt|;
name|parseJson
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"invalid json for "
operator|+
name|json
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ep
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|connectToMBserver
parameter_list|()
throws|throws
name|IOException
block|{
name|jmxServerURL
operator|=
name|jmxServerURL
operator|==
literal|null
condition|?
name|DEFAULT_JMXSERVICE_URL
else|:
name|jmxServerURL
expr_stmt|;
name|JMXServiceURL
name|url
init|=
operator|new
name|JMXServiceURL
argument_list|(
name|jmxServerURL
argument_list|)
decl_stmt|;
name|JMXConnector
name|jmxc
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mbsc
operator|=
name|jmxc
operator|.
name|getMBeanServerConnection
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ObjectName
name|getEndpointObjectName
parameter_list|()
throws|throws
name|MalformedObjectNameException
throws|,
name|NullPointerException
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
literal|"{http://apache.org/hello_world/services}SOAPService"
decl_stmt|;
name|String
name|portName
init|=
literal|"SoapPort"
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|DEFAULT_DOMAIN_NAME
operator|+
literal|":type=Bus.Service.Endpoint,"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|SERVICE_NAME_PROP
operator|+
literal|"=\""
operator|+
name|serviceName
operator|+
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|PORT_NAME_PROP
operator|+
literal|"=\""
operator|+
name|portName
operator|+
literal|"\",*"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|invokeEndpoint
parameter_list|(
name|String
name|operation
parameter_list|,
name|String
name|operationPara
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectName
name|endpointName
init|=
literal|null
decl_stmt|;
name|ObjectName
name|queryEndpointName
decl_stmt|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|Object
index|[]
name|jmxPara
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|jmxSig
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operationPara
operator|!=
literal|null
condition|)
block|{
name|jmxPara
operator|=
operator|new
name|Object
index|[]
block|{
name|operationPara
block|}
expr_stmt|;
name|jmxSig
operator|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
expr_stmt|;
block|}
else|else
block|{
name|jmxPara
operator|=
operator|new
name|Object
index|[
literal|0
index|]
expr_stmt|;
name|jmxSig
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
name|queryEndpointName
operator|=
name|getEndpointObjectName
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|endpointNames
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|mbsc
operator|.
name|queryNames
argument_list|(
name|queryEndpointName
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// now get the ObjectName with the busId
name|Iterator
argument_list|<
name|ObjectName
argument_list|>
name|it
init|=
name|endpointNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// only deal with the first endpoint object which retrun from the list.
name|endpointName
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|ret
operator|=
operator|(
name|String
operator|)
name|mbsc
operator|.
name|invoke
argument_list|(
name|endpointName
argument_list|,
name|operation
argument_list|,
name|jmxPara
argument_list|,
name|jmxSig
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"invoke endpoint "
operator|+
name|endpointName
operator|+
literal|" operation "
operator|+
name|operation
operator|+
literal|" succeed!"
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|parseJson
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|Exception
block|{
name|JsonParser
name|parser
init|=
operator|new
name|JsonFactory
argument_list|()
operator|.
name|createParser
argument_list|(
name|json
argument_list|)
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//if it's an invalidate json will throw exception
comment|//which could be caught by the test
block|}
block|}
block|}
end_class

end_unit

