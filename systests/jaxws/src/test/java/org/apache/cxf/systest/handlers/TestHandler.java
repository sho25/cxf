begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|LogicalMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalMessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|PingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|types
operator|.
name|Ping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|types
operator|.
name|PingResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|types
operator|.
name|PingWithArgs
import|;
end_import

begin_class
specifier|public
class|class
name|TestHandler
parameter_list|<
name|T
extends|extends
name|LogicalMessageContext
parameter_list|>
extends|extends
name|TestHandlerBase
implements|implements
name|LogicalHandler
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|JAXBContext
name|jaxbCtx
decl_stmt|;
specifier|public
name|TestHandler
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestHandler
parameter_list|(
name|boolean
name|serverSide
parameter_list|)
block|{
name|super
argument_list|(
name|serverSide
argument_list|)
expr_stmt|;
try|try
block|{
name|jaxbCtx
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|Ping
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getHandlerId
parameter_list|()
block|{
return|return
literal|"handler"
operator|+
name|getId
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|T
name|ctx
parameter_list|)
block|{
name|methodCalled
argument_list|(
literal|"handleMessage"
argument_list|)
expr_stmt|;
name|printHandlerInfo
argument_list|(
literal|"handleMessage"
argument_list|,
name|isOutbound
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
name|boolean
name|ret
init|=
name|getHandleMessageRet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isServerSideHandler
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|verifyJAXWSProperties
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Object
name|obj
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
operator|.
name|getPayload
argument_list|(
name|jaxbCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Ping
operator|||
name|obj
operator|instanceof
name|PingResponse
condition|)
block|{
name|ret
operator|=
name|handlePingMessage
argument_list|(
name|outbound
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|PingWithArgs
condition|)
block|{
name|ret
operator|=
name|handlePingWithArgsMessage
argument_list|(
name|outbound
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|handlePingWithArgsMessage
parameter_list|(
name|boolean
name|outbound
parameter_list|,
name|T
name|ctx
parameter_list|)
block|{
name|LogicalMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Object
name|payload
init|=
name|msg
operator|.
name|getPayload
argument_list|(
name|jaxbCtx
argument_list|)
decl_stmt|;
name|addHandlerId
argument_list|(
name|ctx
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ctx
argument_list|,
name|outbound
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|payload
operator|instanceof
name|PingWithArgs
condition|)
block|{
name|String
name|arg
init|=
operator|(
operator|(
name|PingWithArgs
operator|)
name|payload
operator|)
operator|.
name|getHandlersCommand
argument_list|()
decl_stmt|;
name|StringTokenizer
name|strtok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|arg
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|hid
init|=
literal|""
decl_stmt|;
name|String
name|direction
init|=
literal|""
decl_stmt|;
name|String
name|command
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|strtok
operator|.
name|countTokens
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|hid
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|direction
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|command
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getHandlerId
argument_list|()
operator|.
name|equals
argument_list|(
name|hid
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"stop"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|outbound
operator|&&
literal|"inbound"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
name|PingResponse
name|resp
init|=
operator|new
name|PingResponse
argument_list|()
decl_stmt|;
name|resp
operator|.
name|getHandlersInfo
argument_list|()
operator|.
name|addAll
argument_list|(
name|getHandlerInfoList
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setPayload
argument_list|(
name|resp
argument_list|,
name|jaxbCtx
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outbound
operator|&&
literal|"outbound"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"throw"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|String
name|exceptionType
init|=
literal|null
decl_stmt|;
name|String
name|exceptionText
init|=
literal|"HandleMessage throws exception"
decl_stmt|;
if|if
condition|(
name|strtok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|exceptionType
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|strtok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|exceptionText
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exceptionType
operator|!=
literal|null
operator|&&
operator|!
name|outbound
operator|&&
literal|"inbound"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"RuntimeException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"ProtocolException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|exceptionType
operator|!=
literal|null
operator|&&
name|outbound
operator|&&
literal|"outbound"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"RuntimeException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"ProtocolException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|handlePingMessage
parameter_list|(
name|boolean
name|outbound
parameter_list|,
name|T
name|ctx
parameter_list|)
block|{
name|LogicalMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|addHandlerId
argument_list|(
name|msg
argument_list|,
name|ctx
argument_list|,
name|outbound
argument_list|)
expr_stmt|;
return|return
name|getHandleMessageRet
argument_list|()
return|;
block|}
specifier|private
name|void
name|addHandlerId
parameter_list|(
name|LogicalMessage
name|msg
parameter_list|,
name|T
name|ctx
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
name|Object
name|obj
init|=
name|msg
operator|.
name|getPayload
argument_list|(
name|jaxbCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|PingResponse
condition|)
block|{
name|PingResponse
name|origResp
init|=
operator|(
name|PingResponse
operator|)
name|obj
decl_stmt|;
name|PingResponse
name|newResp
init|=
operator|new
name|PingResponse
argument_list|()
decl_stmt|;
name|newResp
operator|.
name|getHandlersInfo
argument_list|()
operator|.
name|addAll
argument_list|(
name|origResp
operator|.
name|getHandlersInfo
argument_list|()
argument_list|)
expr_stmt|;
name|newResp
operator|.
name|getHandlersInfo
argument_list|()
operator|.
name|add
argument_list|(
name|getHandlerId
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setPayload
argument_list|(
name|newResp
argument_list|,
name|jaxbCtx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Ping
operator|||
name|obj
operator|instanceof
name|PingWithArgs
condition|)
block|{
name|getHandlerInfoList
argument_list|(
name|ctx
argument_list|)
operator|.
name|add
argument_list|(
name|getHandlerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|handleFault
parameter_list|(
name|T
name|ctx
parameter_list|)
block|{
name|methodCalled
argument_list|(
literal|"handleFault"
argument_list|)
expr_stmt|;
name|printHandlerInfo
argument_list|(
literal|"handleFault"
argument_list|,
name|isOutbound
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isServerSideHandler
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
literal|"handler2"
operator|.
name|equals
argument_list|(
name|getHandlerId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|DOMSource
name|source
init|=
operator|(
name|DOMSource
operator|)
name|ctx
operator|.
name|getMessage
argument_list|()
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|source
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"s"
argument_list|,
name|Soap11
operator|.
name|SOAP_NAMESPACE
argument_list|)
expr_stmt|;
name|XPathUtils
name|xu
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|String
name|exceptionText
init|=
operator|(
name|String
operator|)
name|xu
operator|.
name|getValue
argument_list|(
literal|"//s:Fault/faultstring/text()"
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|//XMLUtils.writeTo(node, System.out);
if|if
condition|(
literal|"handler2HandleFaultThrowsRunException"
operator|.
name|equals
argument_list|(
name|exceptionText
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"handler2 HandleFault throws RuntimeException"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"handler2HandleFaultThrowsSOAPFaultException"
operator|.
name|equals
argument_list|(
name|exceptionText
argument_list|)
condition|)
block|{
throw|throw
name|createSOAPFaultException
argument_list|(
literal|"handler2 HandleFault "
operator|+
literal|"throws SOAPFaultException"
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|SOAPFaultException
name|createSOAPFaultException
parameter_list|(
name|String
name|faultString
parameter_list|)
block|{
try|try
block|{
name|SOAPFault
name|fault
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createFault
argument_list|()
decl_stmt|;
name|fault
operator|.
name|setFaultString
argument_list|(
name|faultString
argument_list|)
expr_stmt|;
name|SAAJUtils
operator|.
name|setFaultCode
argument_list|(
name|fault
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/faultcode"
argument_list|,
literal|"Server"
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SOAPFaultException
argument_list|(
name|fault
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|MessageContext
name|arg0
parameter_list|)
block|{
name|methodCalled
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|methodCalled
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getHandlerId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

