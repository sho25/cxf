begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|http
operator|.
name|HTTPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|HeaderTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|XMLHeaderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|types
operator|.
name|InHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|types
operator|.
name|InHeaderResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|types
operator|.
name|InoutHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|types
operator|.
name|InoutHeaderResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|types
operator|.
name|OutHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|types
operator|.
name|OutHeaderResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|headers
operator|.
name|types
operator|.
name|SOAPHeaderData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|XMLService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|types
operator|.
name|MyComplexStructType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|mixed
operator|.
name|types
operator|.
name|SayHi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|mixed
operator|.
name|types
operator|.
name|SayHiResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|GreeterFaultImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|PingMeFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ClientServerXMLTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|REG_PORT
init|=
name|allocatePort
argument_list|(
name|ServerXMLBinding
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|WRAP_PORT
init|=
name|allocatePort
argument_list|(
name|ServerXMLBinding
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|MIX_PORT
init|=
name|allocatePort
argument_list|(
name|ServerXMLBinding
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|barePortName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_xml_http/bare"
argument_list|,
literal|"XMLPort"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|wrapServiceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_xml_http/wrapped"
argument_list|,
literal|"XMLService"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|mixedServiceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_xml_http/mixed"
argument_list|,
literal|"XMLService"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|wrapPortName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_xml_http/wrapped"
argument_list|,
literal|"XMLPort"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|mixedPortName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_xml_http/mixed"
argument_list|,
literal|"XMLPort"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|wrapFakePortName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_xml_http/wrapped"
argument_list|,
literal|"FakePort"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|ServerXMLBinding
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBareBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLService
name|service
init|=
operator|new
name|XMLService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
literal|"Hello "
decl_stmt|;
name|String
name|response2
init|=
literal|"Bonjour"
decl_stmt|;
try|try
block|{
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|barePortName
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|greeter
argument_list|,
name|REG_PORT
argument_list|)
expr_stmt|;
name|String
name|username
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response1
operator|+
name|username
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|reply
operator|=
name|greeter
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|MyComplexStructType
name|argument
init|=
operator|new
name|MyComplexStructType
argument_list|()
decl_stmt|;
name|MyComplexStructType
name|retVal
init|=
literal|null
decl_stmt|;
name|String
name|str1
init|=
literal|"this is element 1"
decl_stmt|;
name|String
name|str2
init|=
literal|"this is element 2"
decl_stmt|;
name|int
name|int1
init|=
literal|42
decl_stmt|;
name|argument
operator|.
name|setElem1
argument_list|(
name|str1
argument_list|)
expr_stmt|;
name|argument
operator|.
name|setElem2
argument_list|(
name|str2
argument_list|)
expr_stmt|;
name|argument
operator|.
name|setElem3
argument_list|(
name|int1
argument_list|)
expr_stmt|;
name|retVal
operator|=
name|greeter
operator|.
name|sendReceiveData
argument_list|(
name|argument
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|str1
argument_list|,
name|retVal
operator|.
name|getElem1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|str2
argument_list|,
name|retVal
operator|.
name|getElem2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int1
argument_list|,
name|retVal
operator|.
name|getElem3
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrapBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|XMLService
name|service
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|XMLService
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world_xml_wrapped.wsdl"
argument_list|)
argument_list|,
name|wrapServiceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello "
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|wrapPortName
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|greeter
argument_list|,
name|WRAP_PORT
argument_list|)
expr_stmt|;
name|String
name|username
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response1
operator|+
name|username
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|reply
operator|=
name|greeter
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|mixed
operator|.
name|XMLService
name|service
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|mixed
operator|.
name|XMLService
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world_xml_mixed.wsdl"
argument_list|)
argument_list|,
name|mixedServiceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello "
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|mixed
operator|.
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|mixedPortName
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|mixed
operator|.
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|greeter
argument_list|,
name|MIX_PORT
argument_list|)
expr_stmt|;
name|String
name|username
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response1
operator|+
name|username
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|SayHi
name|request
init|=
operator|new
name|SayHi
argument_list|()
decl_stmt|;
name|SayHiResponse
name|response
init|=
name|greeter
operator|.
name|sayHi1
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|response
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPort
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world_xml_wrapped.wsdl"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|url
argument_list|,
name|wrapServiceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|wrapFakePortName
argument_list|,
literal|"http://cxf.apache.org/bindings/xformat"
argument_list|,
literal|"http://localhost:"
operator|+
name|WRAP_PORT
operator|+
literal|"/XMLService/XMLPort"
argument_list|)
expr_stmt|;
name|String
name|response1
init|=
operator|new
name|String
argument_list|(
literal|"Hello "
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
operator|new
name|String
argument_list|(
literal|"Bonjour"
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|wrapPortName
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|greeter
argument_list|,
name|WRAP_PORT
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|username
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|reply
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response1
operator|+
name|username
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|reply
operator|=
name|greeter
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"no response received from service"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response2
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|bp
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|Integer
name|responseCode
init|=
operator|(
name|Integer
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|responseCode
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
name|String
name|stripSpaces
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|String
name|s2
init|=
name|s
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|s2
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|s
operator|=
name|s2
expr_stmt|;
name|s2
operator|=
name|s
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|s2
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXMLFault
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|XMLService
name|service
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|XMLService
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world_xml_wrapped.wsdl"
argument_list|)
argument_list|,
name|wrapServiceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|wrapPortName
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|updateAddressPort
argument_list|(
name|greeter
argument_list|,
name|WRAP_PORT
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|pingMe
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not catch expected PingMeFault exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PingMeFault
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"minor value"
argument_list|,
literal|1
argument_list|,
name|ex
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getMinor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"major value"
argument_list|,
literal|2
argument_list|,
name|ex
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|greeter
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|bp
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|String
name|contentType
init|=
operator|(
name|String
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml;charset=utf-8"
argument_list|,
name|stripSpaces
argument_list|(
name|contentType
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Integer
name|responseCode
init|=
operator|(
name|Integer
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|responseCode
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|Greeter
name|greeterFault
init|=
name|service
operator|.
name|getXMLFaultPort
argument_list|()
decl_stmt|;
name|updateAddressPort
argument_list|(
name|greeterFault
argument_list|,
name|REG_PORT
argument_list|)
expr_stmt|;
try|try
block|{
name|greeterFault
operator|.
name|pingMe
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not catch expected runtime exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HTTPException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"check expected message of exception"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|GreeterFaultImpl
operator|.
name|RUNTIME_EXCEPTION_MESSAGE
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXMLBindingOfSoapHeaderWSDL
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLHeaderService
name|service
init|=
operator|new
name|XMLHeaderService
argument_list|()
decl_stmt|;
name|HeaderTester
name|port
init|=
name|service
operator|.
name|getXMLPort9000
argument_list|()
decl_stmt|;
name|updateAddressPort
argument_list|(
name|port
argument_list|,
name|REG_PORT
argument_list|)
expr_stmt|;
try|try
block|{
name|verifyInHeader
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|verifyInOutHeader
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|verifyOutHeader
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
specifier|public
name|void
name|verifyInHeader
parameter_list|(
name|HeaderTester
name|proxy
parameter_list|)
throws|throws
name|Exception
block|{
name|InHeader
name|me
init|=
operator|new
name|InHeader
argument_list|()
decl_stmt|;
name|me
operator|.
name|setRequestType
argument_list|(
literal|"InHeaderRequest"
argument_list|)
expr_stmt|;
name|SOAPHeaderData
name|headerInfo
init|=
operator|new
name|SOAPHeaderData
argument_list|()
decl_stmt|;
name|headerInfo
operator|.
name|setMessage
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
name|headerInfo
operator|.
name|setOriginator
argument_list|(
literal|"originator"
argument_list|)
expr_stmt|;
name|InHeaderResponse
name|resp
init|=
name|proxy
operator|.
name|inHeader
argument_list|(
name|me
argument_list|,
name|headerInfo
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check returned response type"
argument_list|,
literal|"requestType=InHeaderRequest"
operator|+
literal|"\nheaderData.message=message"
operator|+
literal|"\nheaderData.getOriginator=originator"
argument_list|,
name|resp
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyInOutHeader
parameter_list|(
name|HeaderTester
name|proxy
parameter_list|)
throws|throws
name|Exception
block|{
name|InoutHeader
name|me
init|=
operator|new
name|InoutHeader
argument_list|()
decl_stmt|;
name|me
operator|.
name|setRequestType
argument_list|(
literal|"InoutHeaderRequest"
argument_list|)
expr_stmt|;
name|SOAPHeaderData
name|headerInfo
init|=
operator|new
name|SOAPHeaderData
argument_list|()
decl_stmt|;
name|headerInfo
operator|.
name|setMessage
argument_list|(
literal|"inoutMessage"
argument_list|)
expr_stmt|;
name|headerInfo
operator|.
name|setOriginator
argument_list|(
literal|"inoutOriginator"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
name|holder
init|=
operator|new
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
argument_list|()
decl_stmt|;
name|holder
operator|.
name|value
operator|=
name|headerInfo
expr_stmt|;
name|InoutHeaderResponse
name|resp
init|=
name|proxy
operator|.
name|inoutHeader
argument_list|(
name|me
argument_list|,
name|holder
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check return value"
argument_list|,
literal|"requestType=InoutHeaderRequest"
argument_list|,
name|resp
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check inout value"
argument_list|,
literal|"message=inoutMessage"
argument_list|,
name|holder
operator|.
name|value
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check inout value"
argument_list|,
literal|"orginator=inoutOriginator"
argument_list|,
name|holder
operator|.
name|value
operator|.
name|getOriginator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyOutHeader
parameter_list|(
name|HeaderTester
name|proxy
parameter_list|)
throws|throws
name|Exception
block|{
name|OutHeader
name|me
init|=
operator|new
name|OutHeader
argument_list|()
decl_stmt|;
name|me
operator|.
name|setRequestType
argument_list|(
literal|"OutHeaderRequest"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|OutHeaderResponse
argument_list|>
name|outHeaderHolder
init|=
operator|new
name|Holder
argument_list|<
name|OutHeaderResponse
argument_list|>
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
name|soapHeaderHolder
init|=
operator|new
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|outHeader
argument_list|(
name|me
argument_list|,
name|outHeaderHolder
argument_list|,
name|soapHeaderHolder
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|outHeaderHolder
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|soapHeaderHolder
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check out value"
argument_list|,
literal|"requestType=OutHeaderRequest"
argument_list|,
name|outHeaderHolder
operator|.
name|value
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check out value"
argument_list|,
literal|"message=outMessage"
argument_list|,
name|soapHeaderHolder
operator|.
name|value
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check out value"
argument_list|,
literal|"orginator=outOriginator"
argument_list|,
name|soapHeaderHolder
operator|.
name|value
operator|.
name|getOriginator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

