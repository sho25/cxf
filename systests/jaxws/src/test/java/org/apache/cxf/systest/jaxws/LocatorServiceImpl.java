begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * Please modify this class to meet your needs  * This class is not complete  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReferenceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|locator
operator|.
name|EndpointNotExistFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|locator
operator|.
name|LocatorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|locator
operator|.
name|types
operator|.
name|EndpointIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|locator
operator|.
name|types
operator|.
name|ListEndpointsResponse
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|locator
operator|.
name|types
operator|.
name|QueryEndpoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|locator
operator|.
name|types
operator|.
name|QueryEndpointsResponse
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|javax
operator|.
name|jws
operator|.
name|WebService
argument_list|(
name|name
operator|=
literal|"LocatorService"
argument_list|,
name|serviceName
operator|=
literal|"LocatorService"
argument_list|,
name|portName
operator|=
literal|"LocatorServicePort"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/locator"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.locator.LocatorService"
argument_list|,
name|wsdlLocation
operator|=
literal|"testutils/locator.wsdl"
argument_list|)
specifier|public
class|class
name|LocatorServiceImpl
implements|implements
name|LocatorService
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|LocatorServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|registerPeerManager
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
name|peerManager
parameter_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
argument_list|<
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
argument_list|>
name|peerManagerReference
parameter_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|nodeId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation registerPeerManager"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deregisterPeerManager
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|nodeId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation deregisterPeerManager"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerEndpoint
parameter_list|(
name|EndpointIdentity
name|endpointId
parameter_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
name|endpointReference
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation registerEndpoint"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deregisterEndpoint
parameter_list|(
name|EndpointIdentity
name|endpointId
parameter_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
name|endpointReference
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation deregisterEndpoint"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
name|lookupEndpoint
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
name|serviceQname
parameter_list|)
throws|throws
name|EndpointNotExistFault
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation lookupEndpoint"
argument_list|)
expr_stmt|;
name|W3CEndpointReferenceBuilder
name|eprBuilder
init|=
operator|new
name|W3CEndpointReferenceBuilder
argument_list|()
decl_stmt|;
name|eprBuilder
operator|.
name|address
argument_list|(
literal|"http://bar"
argument_list|)
expr_stmt|;
name|eprBuilder
operator|.
name|serviceName
argument_list|(
name|serviceQname
argument_list|)
expr_stmt|;
name|eprBuilder
operator|.
name|wsdlDocumentLocation
argument_list|(
literal|"wsdlLoc"
argument_list|)
expr_stmt|;
comment|// just in case, for backward compatibility, the builder may be asked to
comment|// create a wsdlLocation attribute with a location only
if|if
condition|(
name|serviceQname
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"2"
argument_list|)
condition|)
block|{
name|Message
name|m
init|=
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.wsa.metadata.wsdlLocationOnly"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|eprBuilder
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Endpoint
argument_list|>
name|listEndpoints
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation listEndpoints"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
specifier|public
name|QueryEndpointsResponse
name|queryEndpoints
parameter_list|(
name|QueryEndpoints
name|parameters
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation queryEndpoints"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

