begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
operator|.
name|httpget
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebParam
import|;
end_import

begin_class
specifier|public
class|class
name|MyImplementation
implements|implements
name|MyInterface
block|{
specifier|public
name|Date
name|test1
parameter_list|()
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|sdf
operator|.
name|parse
argument_list|(
literal|"1973-10-20"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|test2
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|date
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|MyEnum
name|test3
parameter_list|()
block|{
return|return
name|MyEnum
operator|.
name|A
return|;
block|}
specifier|public
name|String
name|test4
parameter_list|(
annotation|@
name|WebParam
argument_list|(
name|name
operator|=
literal|"myEnum"
argument_list|)
name|MyEnum
name|myEnum
parameter_list|)
block|{
return|return
name|myEnum
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Calendar
name|test5
parameter_list|()
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|23
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|public
name|String
name|test6
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|calendar
operator|.
name|getTime
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|test7
parameter_list|(
annotation|@
name|WebParam
argument_list|(
name|name
operator|=
literal|"d"
argument_list|)
name|Double
name|d
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"d is "
operator|+
name|d
argument_list|)
expr_stmt|;
return|return
name|d
operator|==
literal|null
condition|?
literal|"<null>"
else|:
name|d
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|test8
parameter_list|(
annotation|@
name|WebParam
argument_list|(
name|name
operator|=
literal|"d"
argument_list|)
name|double
name|d
parameter_list|)
block|{
return|return
literal|""
operator|+
name|d
return|;
block|}
block|}
end_class

end_unit

