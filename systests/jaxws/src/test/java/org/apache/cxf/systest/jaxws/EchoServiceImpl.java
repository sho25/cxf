begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|Logging
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|name
operator|=
literal|"MyEchoService"
argument_list|,
name|targetNamespace
operator|=
literal|"urn:echo"
argument_list|)
annotation|@
name|Logging
specifier|public
class|class
name|EchoServiceImpl
implements|implements
name|EchoService
block|{
specifier|public
name|String
name|echoException
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|SOAPFaultException
block|{
name|SOAPFaultException
name|ex
decl_stmt|;
try|try
block|{
name|ex
operator|=
name|wrapToSoapFault
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
return|return
name|e
operator|.
name|toString
argument_list|()
return|;
block|}
throw|throw
name|ex
throw|;
block|}
specifier|private
name|SOAPFaultException
name|wrapToSoapFault
parameter_list|(
name|Exception
name|ex
parameter_list|)
throws|throws
name|Exception
block|{
name|SOAPFactory
name|fac
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fac
operator|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|String
name|message
init|=
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|SOAPFault
name|sf
init|=
name|fac
operator|.
name|createFault
argument_list|(
name|message
argument_list|,
operator|new
name|QName
argument_list|(
name|SOAPConstants
operator|.
name|URI_NS_SOAP_1_1_ENVELOPE
argument_list|,
literal|"Server"
argument_list|)
argument_list|)
decl_stmt|;
name|sf
operator|.
name|setFaultString
argument_list|(
literal|"TestSOAPFaultException"
argument_list|)
expr_stmt|;
comment|// add detail makes CXF goes in a infinite loop
name|sf
operator|.
name|addDetail
argument_list|()
operator|.
name|addDetailEntry
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:echo"
argument_list|,
literal|"entry"
argument_list|)
argument_list|)
operator|.
name|addTextNode
argument_list|(
literal|"SOAPFaultException"
argument_list|)
expr_stmt|;
return|return
operator|new
name|SOAPFaultException
argument_list|(
name|sf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
throw|throw
name|e2
throw|;
block|}
block|}
block|}
end_class

end_unit

