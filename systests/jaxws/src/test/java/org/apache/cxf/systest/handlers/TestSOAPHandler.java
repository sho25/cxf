begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|Detail
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|DetailEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPBody
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|soap
operator|.
name|SOAPHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|soap
operator|.
name|SOAPMessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJUtils
import|;
end_import

begin_comment
comment|/**  * Describe class TestSOAPHandler here.  */
end_comment

begin_class
specifier|public
class|class
name|TestSOAPHandler
extends|extends
name|TestHandlerBase
implements|implements
name|SOAPHandler
argument_list|<
name|SOAPMessageContext
argument_list|>
block|{
annotation|@
name|Resource
name|Bus
name|bus
decl_stmt|;
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"org.apache.cxf.wsdl.WSDLManager"
argument_list|)
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
name|manager
decl_stmt|;
specifier|public
name|TestSOAPHandler
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestSOAPHandler
parameter_list|(
name|boolean
name|serverSide
parameter_list|)
block|{
name|super
argument_list|(
name|serverSide
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|initPost
parameter_list|()
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No BUS"
argument_list|)
throw|;
block|}
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No WSDL Manager"
argument_list|)
throw|;
block|}
block|}
comment|// Implementation of javax.xml.ws.handler.soap.SOAPHandler
specifier|public
specifier|final
name|Set
argument_list|<
name|QName
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getHandlerId
parameter_list|()
block|{
return|return
literal|"soapHandler"
operator|+
name|getId
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|isValidWsdlDescription
argument_list|(
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|WSDL_DESCRIPTION
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"can't find WsdlDescription throws RuntimeException"
argument_list|)
throw|;
block|}
try|try
block|{
name|methodCalled
argument_list|(
literal|"handleMessage"
argument_list|)
expr_stmt|;
name|printHandlerInfo
argument_list|(
literal|"handleMessage"
argument_list|,
name|isOutbound
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|b
init|=
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
name|boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|b
decl_stmt|;
name|SOAPMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|isServerSideHandler
argument_list|()
condition|)
block|{
if|if
condition|(
name|outbound
condition|)
block|{
name|continueProcessing
operator|=
name|getReturnValue
argument_list|(
name|outbound
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|continueProcessing
operator|=
name|getReturnValue
argument_list|(
name|outbound
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueProcessing
condition|)
block|{
name|outbound
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outbound
condition|)
block|{
try|try
block|{
comment|// append handler id to SOAP response message
name|SOAPBody
name|body
init|=
name|msg
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|Node
name|resp
init|=
name|body
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|getNodeName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"pingResponse"
argument_list|)
condition|)
block|{
name|Node
name|child
init|=
name|resp
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|resp
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|Node
name|info
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|child
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setPrefix
argument_list|(
literal|"ns4"
argument_list|)
expr_stmt|;
name|info
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|getHandlerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|.
name|appendChild
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|msg
operator|.
name|saveChanges
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DOMException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|getHandlerInfoList
argument_list|(
name|ctx
argument_list|)
operator|.
name|add
argument_list|(
name|getHandlerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|continueProcessing
return|;
block|}
specifier|public
name|boolean
name|handleFault
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|methodCalled
argument_list|(
literal|"handleFault"
argument_list|)
expr_stmt|;
name|printHandlerInfo
argument_list|(
literal|"handleFault"
argument_list|,
name|isOutbound
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isServerSideHandler
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
literal|"soapHandler4"
operator|.
name|equals
argument_list|(
name|getHandlerId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|SOAPMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|fs
init|=
name|msg
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
operator|.
name|getBody
argument_list|()
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"soapHandler4HandleFaultThrowsRunException"
operator|.
name|equals
argument_list|(
name|fs
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"soapHandler4 HandleFault throws RuntimeException"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"soapHandler4HandleFaultThrowsSOAPFaultException"
operator|.
name|equals
argument_list|(
name|fs
argument_list|)
condition|)
block|{
throw|throw
name|createSOAPFaultException
argument_list|(
literal|"soapHandler4 HandleFault throws SOAPFaultException"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|final
name|void
name|destroy
parameter_list|()
block|{
name|methodCalled
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|close
parameter_list|(
name|MessageContext
name|messageContext
parameter_list|)
block|{
name|methodCalled
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|getReturnValue
parameter_list|(
name|boolean
name|outbound
parameter_list|,
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
try|try
block|{
name|SOAPMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|SOAPBody
name|body
init|=
name|msg
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Node
name|commandNode
init|=
name|body
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|String
name|arg
init|=
name|commandNode
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|body
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|StringTokenizer
name|strtok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|arg
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|hid
init|=
literal|""
decl_stmt|;
name|String
name|direction
init|=
literal|""
decl_stmt|;
name|String
name|command
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|strtok
operator|.
name|countTokens
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|hid
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|direction
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|command
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getHandlerId
argument_list|()
operator|.
name|equals
argument_list|(
name|hid
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"stop"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|outbound
operator|&&
literal|"inbound"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
comment|// remove the incoming request body.
name|Document
name|doc
init|=
name|body
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
comment|// build the SOAP response for this message
comment|//
name|Node
name|wrapper
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|namespace
argument_list|,
literal|"pingResponse"
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|setPrefix
argument_list|(
literal|"ns4"
argument_list|)
expr_stmt|;
name|body
operator|.
name|removeChild
argument_list|(
name|body
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|appendChild
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|info
range|:
name|getHandlerInfoList
argument_list|(
name|ctx
argument_list|)
control|)
block|{
comment|// copy the previously invoked handler list into the response.
comment|// Ignore this handler's information as it will be added again later.
comment|//
if|if
condition|(
operator|!
name|info
operator|.
name|contains
argument_list|(
name|getHandlerId
argument_list|()
argument_list|)
condition|)
block|{
name|Node
name|newEl
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|namespace
argument_list|,
literal|"HandlersInfo"
argument_list|)
decl_stmt|;
name|newEl
operator|.
name|setPrefix
argument_list|(
literal|"ns4"
argument_list|)
expr_stmt|;
name|newEl
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|appendChild
argument_list|(
name|newEl
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outbound
operator|&&
literal|"outbound"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"throw"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|String
name|exceptionType
init|=
literal|null
decl_stmt|;
name|String
name|exceptionText
init|=
literal|"HandleMessage throws exception"
decl_stmt|;
if|if
condition|(
name|strtok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|exceptionType
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|strtok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|exceptionText
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exceptionType
operator|!=
literal|null
operator|&&
operator|!
name|outbound
operator|&&
literal|"inbound"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"RuntimeException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"ProtocolException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"SOAPFaultException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
name|createSOAPFaultException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"SOAPFaultExceptionWDetail"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
name|createSOAPFaultExceptionWithDetail
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|exceptionType
operator|!=
literal|null
operator|&&
name|outbound
operator|&&
literal|"outbound"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"RuntimeException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"ProtocolException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"SOAPFaultException"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
name|createSOAPFaultException
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"SOAPFaultExceptionWDetail"
operator|.
name|equals
argument_list|(
name|exceptionType
argument_list|)
condition|)
block|{
throw|throw
name|createSOAPFaultExceptionWithDetail
argument_list|(
name|exceptionText
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|SOAPFaultException
name|createSOAPFaultException
parameter_list|(
name|String
name|faultString
parameter_list|)
throws|throws
name|SOAPException
block|{
name|SOAPFault
name|fault
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createFault
argument_list|()
decl_stmt|;
name|fault
operator|.
name|setFaultString
argument_list|(
name|faultString
argument_list|)
expr_stmt|;
name|SAAJUtils
operator|.
name|setFaultCode
argument_list|(
name|fault
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/faultcode"
argument_list|,
literal|"Server"
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SOAPFaultException
argument_list|(
name|fault
argument_list|)
return|;
block|}
specifier|private
name|SOAPFaultException
name|createSOAPFaultExceptionWithDetail
parameter_list|(
name|String
name|faultString
parameter_list|)
throws|throws
name|SOAPException
block|{
name|SOAPFault
name|fault
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createFault
argument_list|()
decl_stmt|;
name|QName
name|faultName
init|=
operator|new
name|QName
argument_list|(
name|SOAPConstants
operator|.
name|URI_NS_SOAP_ENVELOPE
argument_list|,
literal|"Server"
argument_list|)
decl_stmt|;
name|SAAJUtils
operator|.
name|setFaultCode
argument_list|(
name|fault
argument_list|,
name|faultName
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultActor
argument_list|(
literal|"http://gizmos.com/orders"
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultString
argument_list|(
name|faultString
argument_list|)
expr_stmt|;
name|Detail
name|detail
init|=
name|fault
operator|.
name|addDetail
argument_list|()
decl_stmt|;
name|QName
name|entryName
init|=
operator|new
name|QName
argument_list|(
literal|"http://gizmos.com/orders/"
argument_list|,
literal|"order"
argument_list|,
literal|"PO"
argument_list|)
decl_stmt|;
name|DetailEntry
name|entry
init|=
name|detail
operator|.
name|addDetailEntry
argument_list|(
name|entryName
argument_list|)
decl_stmt|;
name|entry
operator|.
name|addTextNode
argument_list|(
literal|"Quantity element does not have a value"
argument_list|)
expr_stmt|;
name|QName
name|entryName2
init|=
operator|new
name|QName
argument_list|(
literal|"http://gizmos.com/orders/"
argument_list|,
literal|"order"
argument_list|,
literal|"PO"
argument_list|)
decl_stmt|;
name|DetailEntry
name|entry2
init|=
name|detail
operator|.
name|addDetailEntry
argument_list|(
name|entryName2
argument_list|)
decl_stmt|;
name|entry2
operator|.
name|addTextNode
argument_list|(
literal|"Incomplete address: no zip code"
argument_list|)
expr_stmt|;
return|return
operator|new
name|SOAPFaultException
argument_list|(
name|fault
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getHandlerId
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isValidWsdlDescription
parameter_list|(
name|Object
name|wsdlDescription
parameter_list|)
block|{
return|return
operator|(
name|wsdlDescription
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|wsdlDescription
operator|instanceof
name|java
operator|.
name|net
operator|.
name|URI
operator|)
operator|||
operator|(
name|wsdlDescription
operator|instanceof
name|java
operator|.
name|net
operator|.
name|URL
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

