begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|HandlerChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ServiceMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_comment
comment|//The following wsdl file is used.
end_comment

begin_comment
comment|//wsdlLocation = "/trunk/testutils/src/main/resources/wsdl/hello_world_rpc_lit.wsdl"
end_comment

begin_class
annotation|@
name|WebServiceProvider
argument_list|(
name|portName
operator|=
literal|"SoapPortProviderRPCLit3"
argument_list|,
name|serviceName
operator|=
literal|"SOAPServiceProviderRPCLit"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/hello_world_rpclit"
argument_list|,
name|wsdlLocation
operator|=
literal|"/wsdl/hello_world_rpc_lit.wsdl"
argument_list|)
annotation|@
name|ServiceMode
argument_list|(
name|value
operator|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|Mode
operator|.
name|PAYLOAD
argument_list|)
annotation|@
name|HandlerChain
argument_list|(
name|file
operator|=
literal|"./handlers_invocation.xml"
argument_list|,
name|name
operator|=
literal|"TestHandlerChain"
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractSourcePayloadProvider
implements|implements
name|SourceProvider
block|{
name|boolean
name|doneStax
decl_stmt|;
annotation|@
name|Resource
name|WebServiceContext
name|ctx
decl_stmt|;
specifier|public
name|AbstractSourcePayloadProvider
parameter_list|()
block|{     }
specifier|public
name|Source
name|invoke
parameter_list|(
name|Source
name|request
parameter_list|)
block|{
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|ctx
operator|.
name|getMessageContext
argument_list|()
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|WSDL_OPERATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|qn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No Operation Name"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|request
operator|instanceof
name|StaxSource
condition|)
block|{
name|StaxSource
name|ss
init|=
operator|(
name|StaxSource
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getXMLStreamReader
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Should not be a -1 event"
argument_list|)
throw|;
block|}
block|}
name|String
name|input
init|=
name|getSourceAsString
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|indexOf
argument_list|(
literal|"ServerLogicalHandler"
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|map
argument_list|(
name|request
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Received an exception while parsing the source"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Source
name|map
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Source
argument_list|>
name|class1
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|greetMeInputStream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/GreetMeRpcLiteralRespBody.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|DOMSource
operator|.
name|class
operator|.
name|equals
argument_list|(
name|class1
argument_list|)
condition|)
block|{
return|return
operator|new
name|DOMSource
argument_list|(
name|StaxUtils
operator|.
name|read
argument_list|(
name|greetMeInputStream
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|StaxSource
operator|.
name|class
operator|.
name|equals
argument_list|(
name|class1
argument_list|)
condition|)
block|{
if|if
condition|(
name|doneStax
condition|)
block|{
name|XMLReader
name|reader
init|=
name|XMLReaderFactory
operator|.
name|createXMLReader
argument_list|()
decl_stmt|;
return|return
operator|new
name|SAXSource
argument_list|(
name|reader
argument_list|,
operator|new
name|InputSource
argument_list|(
name|greetMeInputStream
argument_list|)
argument_list|)
return|;
block|}
name|doneStax
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|StaxSource
argument_list|(
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|greetMeInputStream
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|StreamSource
operator|.
name|class
operator|.
name|equals
argument_list|(
name|class1
argument_list|)
condition|)
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|()
decl_stmt|;
name|source
operator|.
name|setInputStream
argument_list|(
name|greetMeInputStream
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
comment|//java 6 javax.xml.transform.stax.StAXSource
name|XMLStreamReader
name|reader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|greetMeInputStream
argument_list|)
decl_stmt|;
return|return
name|class1
operator|.
name|getConstructor
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|reader
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getSourceAsString
parameter_list|(
name|Source
name|s
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|transformerFactory
operator|.
name|setFeature
argument_list|(
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Transformer
name|transformer
init|=
name|transformerFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|out
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
name|StreamResult
name|streamResult
init|=
operator|new
name|StreamResult
argument_list|()
decl_stmt|;
name|streamResult
operator|.
name|setWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|s
argument_list|,
name|streamResult
argument_list|)
expr_stmt|;
return|return
name|streamResult
operator|.
name|getWriter
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|TransformerException
name|te
parameter_list|)
block|{
if|if
condition|(
literal|"javax.xml.transform.stax.StAXSource"
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//on java6, we will get this class if "stax" is configured
comment|//for the preferred type. However, older xalans don't know about it
comment|//we'll manually do it
name|XMLStreamReader
name|r
init|=
operator|(
name|XMLStreamReader
operator|)
name|s
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getXMLStreamReader"
argument_list|)
operator|.
name|invoke
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|StaxUtils
operator|.
name|toString
argument_list|(
name|StaxUtils
operator|.
name|read
argument_list|(
name|r
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
return|;
block|}
throw|throw
name|te
throw|;
block|}
block|}
block|}
end_class

end_unit

