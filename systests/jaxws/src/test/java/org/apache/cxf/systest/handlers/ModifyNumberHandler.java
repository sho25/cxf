begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|LogicalMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalMessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handlers
operator|.
name|types
operator|.
name|AddNumbers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handlers
operator|.
name|types
operator|.
name|ObjectFactory
import|;
end_import

begin_comment
comment|/**  * handles addition of small numbers.  */
end_comment

begin_class
specifier|public
class|class
name|ModifyNumberHandler
implements|implements
name|LogicalHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
block|{
specifier|public
specifier|final
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|messageContext
parameter_list|)
block|{
comment|//System.out.println("LogicalMessageHandler handleMessage called");
try|try
block|{
comment|// get the LogicalMessage from our context
name|LogicalMessage
name|msg
init|=
name|messageContext
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|// check the payload, if its an AddNumbers request, we'll intervene
name|JAXBContext
name|jaxbContext
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|ObjectFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|payload
init|=
name|msg
operator|.
name|getPayload
argument_list|(
name|jaxbContext
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|payload
decl_stmt|;
if|if
condition|(
name|payload
operator|instanceof
name|JAXBElement
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|JAXBElement
operator|)
name|payload
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|AddNumbers
condition|)
block|{
name|AddNumbers
name|req
init|=
operator|(
name|AddNumbers
operator|)
name|value
decl_stmt|;
name|int
name|a
init|=
name|req
operator|.
name|getArg0
argument_list|()
decl_stmt|;
name|req
operator|.
name|setArg0
argument_list|(
name|a
operator|*
literal|10
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|final
name|boolean
name|handleFault
parameter_list|(
name|LogicalMessageContext
name|messageContext
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|MessageContext
name|ctx
parameter_list|)
block|{     }
block|}
end_class

end_unit

