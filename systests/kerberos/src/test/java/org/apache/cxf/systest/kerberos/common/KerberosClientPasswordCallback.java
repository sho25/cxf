begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|kerberos
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|engine
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|KerberosSecurity
import|;
end_import

begin_comment
comment|/**  * A CallbackHandler implementation for the kerberos client.  */
end_comment

begin_class
specifier|public
class|class
name|KerberosClientPasswordCallback
implements|implements
name|CallbackHandler
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callbacks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|callbacks
index|[
name|i
index|]
operator|instanceof
name|NameCallback
condition|)
block|{
name|NameCallback
name|nameCallback
init|=
operator|(
name|NameCallback
operator|)
name|callbacks
index|[
name|i
index|]
decl_stmt|;
name|nameCallback
operator|.
name|setName
argument_list|(
literal|"alice"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callbacks
index|[
name|i
index|]
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|PasswordCallback
name|passwordCallback
init|=
operator|(
name|PasswordCallback
operator|)
name|callbacks
index|[
name|i
index|]
decl_stmt|;
name|passwordCallback
operator|.
name|setPassword
argument_list|(
literal|"alice"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callbacks
index|[
name|i
index|]
operator|instanceof
name|WSPasswordCallback
condition|)
block|{
name|WSPasswordCallback
name|wsPasswordCallback
init|=
operator|(
name|WSPasswordCallback
operator|)
name|callbacks
index|[
name|i
index|]
decl_stmt|;
comment|// Get a custom (Kerberos) token directly using the WSS4J APIs
if|if
condition|(
name|wsPasswordCallback
operator|.
name|getUsage
argument_list|()
operator|==
name|WSPasswordCallback
operator|.
name|CUSTOM_TOKEN
condition|)
block|{
name|KerberosSecurity
name|kerberosSecurity
init|=
operator|new
name|KerberosSecurity
argument_list|(
name|DOMUtils
operator|.
name|getEmptyDocument
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|kerberosSecurity
operator|.
name|retrieveServiceTicket
argument_list|(
literal|"alice"
argument_list|,
name|this
argument_list|,
literal|"bob@service.ws.apache.org"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|kerberosSecurity
operator|.
name|addWSUNamespace
argument_list|()
expr_stmt|;
name|WSSConfig
name|wssConfig
init|=
name|WSSConfig
operator|.
name|getNewInstance
argument_list|()
decl_stmt|;
name|kerberosSecurity
operator|.
name|setID
argument_list|(
name|wssConfig
operator|.
name|getIdAllocator
argument_list|()
operator|.
name|createSecureId
argument_list|(
literal|"BST-"
argument_list|,
name|kerberosSecurity
argument_list|)
argument_list|)
expr_stmt|;
name|wsPasswordCallback
operator|.
name|setCustomToken
argument_list|(
name|kerberosSecurity
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

