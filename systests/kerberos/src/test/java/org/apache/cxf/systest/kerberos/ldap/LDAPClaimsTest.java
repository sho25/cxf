begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|kerberos
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ClaimsParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|LdapClaimsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|sts
operator|.
name|claims
operator|.
name|ProcessedClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateLdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ApplyLdifFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreateDS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreateIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreatePartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|AbstractLdapTestUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|FrameworkRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|CustomTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|FrameworkRunner
operator|.
name|class
argument_list|)
comment|//Define the DirectoryService
annotation|@
name|CreateDS
argument_list|(
name|name
operator|=
literal|"LDAPClaimsTest-class"
argument_list|,
name|enableAccessControl
operator|=
literal|false
argument_list|,
name|allowAnonAccess
operator|=
literal|false
argument_list|,
name|enableChangeLog
operator|=
literal|true
argument_list|,
name|partitions
operator|=
block|{
annotation|@
name|CreatePartition
argument_list|(
name|name
operator|=
literal|"example"
argument_list|,
name|suffix
operator|=
literal|"dc=example,dc=com"
argument_list|,
name|indexes
operator|=
block|{
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"objectClass"
argument_list|)
block|,
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"dc"
argument_list|)
block|,
annotation|@
name|CreateIndex
argument_list|(
name|attribute
operator|=
literal|"ou"
argument_list|)
block|}
argument_list|)
block|}
argument_list|)
annotation|@
name|CreateLdapServer
argument_list|(
name|transports
operator|=
block|{
annotation|@
name|CreateTransport
argument_list|(
name|protocol
operator|=
literal|"LDAP"
argument_list|)
block|}
argument_list|)
comment|//Inject an file containing entries
annotation|@
name|ApplyLdifFiles
argument_list|(
literal|"ldap.ldif"
argument_list|)
specifier|public
class|class
name|LDAPClaimsTest
extends|extends
name|AbstractLdapTestUnit
block|{
specifier|private
specifier|static
name|Properties
name|props
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|portUpdated
decl_stmt|;
specifier|private
name|ClassPathXmlApplicationContext
name|appContext
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|LDAPClaimsTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ldap.properties"
argument_list|)
init|)
block|{
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|updatePort
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|portUpdated
condition|)
block|{
name|String
name|basedir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
comment|// Read in ldap.xml and substitute in the correct port
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|basedir
operator|+
literal|"/src/test/resources/ldap.xml"
argument_list|)
decl_stmt|;
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"portno"
argument_list|,
literal|""
operator|+
name|super
operator|.
name|getLdapServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f2
init|=
operator|new
name|File
argument_list|(
name|basedir
operator|+
literal|"/target/test-classes/ldapport.xml"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|outputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f2
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|write
argument_list|(
name|content
argument_list|,
name|outputStream
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|portUpdated
operator|=
literal|true
expr_stmt|;
block|}
name|appContext
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"ldapport.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testRetrieveClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|LdapClaimsHandler
name|claimsHandler
init|=
operator|(
name|LdapClaimsHandler
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"testClaimsHandler"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"claimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|user
argument_list|,
literal|"Property 'claimUser' not configured"
argument_list|)
expr_stmt|;
name|ClaimCollection
name|requestedClaims
init|=
name|createRequestClaimCollection
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|expectedClaims
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
name|ClaimsParameters
name|params
init|=
operator|new
name|ClaimsParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|ProcessedClaimCollection
name|retrievedClaims
init|=
name|claimsHandler
operator|.
name|retrieveClaimValues
argument_list|(
name|requestedClaims
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|==
name|expectedClaims
operator|.
name|size
argument_list|()
argument_list|,
literal|"Retrieved number of claims ["
operator|+
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"] doesn't match with expected ["
operator|+
name|expectedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|retrievedClaims
control|)
block|{
if|if
condition|(
name|expectedClaims
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
condition|)
block|{
name|expectedClaims
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|isTrue
argument_list|(
literal|false
argument_list|,
literal|"Claim '"
operator|+
name|c
operator|.
name|getClaimType
argument_list|()
operator|+
literal|"' not requested"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testMultiUserBaseDNs
parameter_list|()
throws|throws
name|Exception
block|{
name|LdapClaimsHandler
name|claimsHandler
init|=
operator|(
name|LdapClaimsHandler
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"testClaimsHandlerMultipleUserBaseDNs"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"claimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|user
argument_list|,
literal|"Property 'claimUser' not configured"
argument_list|)
expr_stmt|;
name|String
name|otherUser
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"otherClaimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|otherUser
argument_list|,
literal|"Property 'otherClaimUser' not configured"
argument_list|)
expr_stmt|;
name|ClaimCollection
name|requestedClaims
init|=
name|createRequestClaimCollection
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|expectedClaims
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
comment|// First user
name|ClaimsParameters
name|params
init|=
operator|new
name|ClaimsParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|ProcessedClaimCollection
name|retrievedClaims
init|=
name|claimsHandler
operator|.
name|retrieveClaimValues
argument_list|(
name|requestedClaims
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|==
name|expectedClaims
operator|.
name|size
argument_list|()
argument_list|,
literal|"Retrieved number of claims ["
operator|+
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"] doesn't match with expected ["
operator|+
name|expectedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|retrievedClaims
control|)
block|{
if|if
condition|(
name|expectedClaims
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
condition|)
block|{
name|expectedClaims
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|isTrue
argument_list|(
literal|false
argument_list|,
literal|"Claim '"
operator|+
name|c
operator|.
name|getClaimType
argument_list|()
operator|+
literal|"' not requested"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Second user
name|params
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|otherUser
argument_list|)
argument_list|)
expr_stmt|;
name|retrievedClaims
operator|=
name|claimsHandler
operator|.
name|retrieveClaimValues
argument_list|(
name|requestedClaims
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|==
name|expectedClaims
operator|.
name|size
argument_list|()
argument_list|,
literal|"Retrieved number of claims ["
operator|+
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"] doesn't match with expected ["
operator|+
name|expectedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|retrievedClaims
control|)
block|{
if|if
condition|(
name|expectedClaims
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
condition|)
block|{
name|expectedClaims
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|isTrue
argument_list|(
literal|false
argument_list|,
literal|"Claim '"
operator|+
name|c
operator|.
name|getClaimType
argument_list|()
operator|+
literal|"' not requested"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
argument_list|(
name|expected
operator|=
name|STSException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRetrieveClaimsWithUnsupportedMandatoryClaimType
parameter_list|()
throws|throws
name|Exception
block|{
name|LdapClaimsHandler
name|claimsHandler
init|=
operator|(
name|LdapClaimsHandler
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"testClaimsHandler"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"claimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|user
argument_list|,
literal|"Property 'claimUser' not configured"
argument_list|)
expr_stmt|;
name|ClaimCollection
name|requestedClaims
init|=
name|createRequestClaimCollection
argument_list|()
decl_stmt|;
comment|// add unsupported but mandatory claim
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|GENDER
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|requestedClaims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|ClaimsParameters
name|params
init|=
operator|new
name|ClaimsParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|ProcessedClaimCollection
name|processedClaim
init|=
name|claimsHandler
operator|.
name|retrieveClaimValues
argument_list|(
name|requestedClaims
argument_list|,
name|params
argument_list|)
decl_stmt|;
for|for
control|(
name|Claim
name|requestedClaim
range|:
name|requestedClaims
control|)
block|{
name|URI
name|claimType
init|=
name|requestedClaim
operator|.
name|getClaimType
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|requestedClaim
operator|.
name|isOptional
argument_list|()
condition|)
block|{
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|processedClaim
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getClaimType
argument_list|()
operator|.
name|equals
argument_list|(
name|claimType
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|STSException
argument_list|(
literal|"Mandatory claim '"
operator|+
name|claim
operator|.
name|getClaimType
argument_list|()
operator|+
literal|"' not found"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testRetrieveClaimsWithUnsupportedOptionalClaimType
parameter_list|()
throws|throws
name|Exception
block|{
name|LdapClaimsHandler
name|claimsHandler
init|=
operator|(
name|LdapClaimsHandler
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"testClaimsHandler"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"claimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|user
argument_list|,
literal|"Property 'claimUser' not configured"
argument_list|)
expr_stmt|;
name|ClaimCollection
name|requestedClaims
init|=
name|createRequestClaimCollection
argument_list|()
decl_stmt|;
comment|// add unsupported but optional unsupported claim
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|GENDER
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requestedClaims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
comment|// Gender is not expected to be returned because not supported
name|List
argument_list|<
name|URI
argument_list|>
name|expectedClaims
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
name|ClaimsParameters
name|params
init|=
operator|new
name|ClaimsParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|ProcessedClaimCollection
name|retrievedClaims
init|=
name|claimsHandler
operator|.
name|retrieveClaimValues
argument_list|(
name|requestedClaims
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|==
name|expectedClaims
operator|.
name|size
argument_list|()
argument_list|,
literal|"Retrieved number of claims ["
operator|+
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"] doesn't match with expected ["
operator|+
name|expectedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|retrievedClaims
control|)
block|{
if|if
condition|(
name|expectedClaims
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
condition|)
block|{
name|expectedClaims
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|isTrue
argument_list|(
literal|false
argument_list|,
literal|"Claim '"
operator|+
name|c
operator|.
name|getClaimType
argument_list|()
operator|+
literal|"' not requested"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSupportedClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"claimsToLdapAttributeMapping"
argument_list|)
argument_list|)
decl_stmt|;
name|LdapClaimsHandler
name|cHandler
init|=
operator|new
name|LdapClaimsHandler
argument_list|()
decl_stmt|;
name|cHandler
operator|.
name|setClaimsLdapAttributeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|supportedClaims
init|=
name|cHandler
operator|.
name|getSupportedClaimTypes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
name|supportedClaims
operator|.
name|size
argument_list|()
argument_list|,
literal|"Supported claims and claims/ldap attribute mapping size different"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|claim
range|:
name|mapping
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|isTrue
argument_list|(
name|supportedClaims
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
name|claim
argument_list|)
argument_list|)
argument_list|,
literal|"Claim '"
operator|+
name|claim
operator|+
literal|"' not listed in supported list"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testRetrieveBinaryClaims
parameter_list|()
throws|throws
name|Exception
block|{
name|LdapClaimsHandler
name|claimsHandler
init|=
operator|(
name|LdapClaimsHandler
operator|)
name|appContext
operator|.
name|getBean
argument_list|(
literal|"testClaimsHandler"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"binaryClaimUser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|user
argument_list|,
literal|"Property 'binaryClaimUser' not configured"
argument_list|)
expr_stmt|;
name|ClaimCollection
name|requestedClaims
init|=
name|createRequestClaimCollection
argument_list|()
decl_stmt|;
comment|// Ask for the (binary) cert as well
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://custom/x509"
argument_list|)
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requestedClaims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|expectedClaims
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
name|expectedClaims
operator|.
name|add
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://custom/x509"
argument_list|)
argument_list|)
expr_stmt|;
name|ClaimsParameters
name|params
init|=
operator|new
name|ClaimsParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setPrincipal
argument_list|(
operator|new
name|CustomTokenPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|ProcessedClaimCollection
name|retrievedClaims
init|=
name|claimsHandler
operator|.
name|retrieveClaimValues
argument_list|(
name|requestedClaims
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|==
name|expectedClaims
operator|.
name|size
argument_list|()
argument_list|,
literal|"Retrieved number of claims ["
operator|+
name|retrievedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"] doesn't match with expected ["
operator|+
name|expectedClaims
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|boolean
name|foundCert
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ProcessedClaim
name|c
range|:
name|retrievedClaims
control|)
block|{
if|if
condition|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://custom/x509"
argument_list|)
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getClaimType
argument_list|()
argument_list|)
condition|)
block|{
name|foundCert
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|c
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|byte
index|[]
argument_list|)
expr_stmt|;
name|CertificateFactory
name|certFactory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|c
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|certFactory
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|cert
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|isTrue
argument_list|(
name|foundCert
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ClaimCollection
name|createRequestClaimCollection
parameter_list|()
block|{
name|ClaimCollection
name|claims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
name|Claim
name|claim
init|=
operator|new
name|Claim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|claim
operator|=
operator|new
name|Claim
argument_list|()
expr_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
name|claim
operator|=
operator|new
name|Claim
argument_list|()
expr_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|ClaimTypes
operator|.
name|EMAILADDRESS
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
return|return
name|claims
return|;
block|}
block|}
end_class

end_unit

