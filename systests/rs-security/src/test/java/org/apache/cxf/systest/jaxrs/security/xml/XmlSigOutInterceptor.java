begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|JAXBElementProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|ProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|CryptoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|signature
operator|.
name|XMLSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|transforms
operator|.
name|Transforms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|ElementProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|signature
operator|.
name|SignatureConstants
import|;
end_import

begin_class
specifier|public
class|class
name|XmlSigOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|XmlSigOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CRYPTO_CACHE
init|=
literal|"ws-security.crypto.cache"
decl_stmt|;
static|static
block|{
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|Init
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|createReferenceId
init|=
literal|true
decl_stmt|;
specifier|public
name|XmlSigOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCreateReferenceId
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
name|createReferenceId
operator|=
name|create
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
try|try
block|{
name|Object
name|body
init|=
name|getRequestBody
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Document
name|doc
init|=
name|getDomDocument
argument_list|(
name|body
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|createEnvelopedSignature
argument_list|(
name|message
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
operator|new
name|MessageContentsList
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|RuntimeException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|", stacktrace: "
operator|+
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// enveloping& detached sigs will be supported too
specifier|private
name|void
name|createEnvelopedSignature
parameter_list|(
name|Message
name|message
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
comment|//--- This code will be moved to a common utility class
name|Crypto
name|crypto
init|=
name|getCrypto
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|getUserName
argument_list|(
name|message
argument_list|,
name|crypto
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|password
init|=
name|getPassword
argument_list|(
name|message
argument_list|,
name|user
argument_list|,
name|WSPasswordCallback
operator|.
name|SIGNATURE
argument_list|)
decl_stmt|;
comment|//---
comment|//
comment|// prepare to sign the SAML token
name|CryptoType
name|cryptoType
init|=
operator|new
name|CryptoType
argument_list|(
name|CryptoType
operator|.
name|TYPE
operator|.
name|ALIAS
argument_list|)
decl_stmt|;
name|cryptoType
operator|.
name|setAlias
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|X509Certificate
index|[]
name|issuerCerts
init|=
name|crypto
operator|.
name|getX509Certificates
argument_list|(
name|cryptoType
argument_list|)
decl_stmt|;
if|if
condition|(
name|issuerCerts
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
literal|"No issuer certs were found to sign the document using issuer name: "
operator|+
name|user
argument_list|)
throw|;
block|}
name|String
name|sigAlgo
init|=
name|SignatureConstants
operator|.
name|ALGO_ID_SIGNATURE_RSA_SHA1
decl_stmt|;
name|String
name|pubKeyAlgo
init|=
name|issuerCerts
index|[
literal|0
index|]
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|pubKeyAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DSA"
argument_list|)
condition|)
block|{
name|sigAlgo
operator|=
name|XMLSignature
operator|.
name|ALGO_ID_SIGNATURE_DSA
expr_stmt|;
block|}
name|PrivateKey
name|privateKey
init|=
literal|null
decl_stmt|;
try|try
block|{
name|privateKey
operator|=
name|crypto
operator|.
name|getPrivateKey
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
comment|//
name|ElementProxy
operator|.
name|setDefaultPrefix
argument_list|(
name|Constants
operator|.
name|SignatureSpecNS
argument_list|,
literal|"ds"
argument_list|)
expr_stmt|;
name|String
name|referenceId
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|createReferenceId
condition|)
block|{
name|String
name|id
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|referenceId
operator|=
literal|"#"
operator|+
name|id
expr_stmt|;
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"ID"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|XMLSignature
name|sig
init|=
operator|new
name|XMLSignature
argument_list|(
name|doc
argument_list|,
literal|""
argument_list|,
name|sigAlgo
argument_list|)
decl_stmt|;
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|sig
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|Transforms
name|transforms
init|=
operator|new
name|Transforms
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|transforms
operator|.
name|addTransform
argument_list|(
name|Transforms
operator|.
name|TRANSFORM_ENVELOPED_SIGNATURE
argument_list|)
expr_stmt|;
name|transforms
operator|.
name|addTransform
argument_list|(
name|Transforms
operator|.
name|TRANSFORM_C14N_EXCL_OMIT_COMMENTS
argument_list|)
expr_stmt|;
name|sig
operator|.
name|addDocument
argument_list|(
literal|""
argument_list|,
name|transforms
argument_list|,
name|Constants
operator|.
name|ALGO_ID_DIGEST_SHA1
argument_list|,
name|referenceId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sig
operator|.
name|addKeyInfo
argument_list|(
name|issuerCerts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sig
operator|.
name|addKeyInfo
argument_list|(
name|issuerCerts
index|[
literal|0
index|]
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|sign
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|getRequestBody
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|MessageContentsList
name|objs
init|=
name|MessageContentsList
operator|.
name|getContentsList
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|objs
operator|==
literal|null
operator|||
name|objs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|objs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Document
name|getDomDocument
parameter_list|(
name|Object
name|body
parameter_list|,
name|Message
name|m
parameter_list|)
throws|throws
name|Exception
block|{
name|ProviderFactory
name|pf
init|=
name|ProviderFactory
operator|.
name|getInstance
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Object
name|providerObject
init|=
name|pf
operator|.
name|createMessageBodyWriter
argument_list|(
name|body
operator|.
name|getClass
argument_list|()
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|providerObject
operator|instanceof
name|JAXBElementProvider
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JAXBElementProvider
name|provider
init|=
operator|(
name|JAXBElementProvider
operator|)
name|providerObject
decl_stmt|;
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|m
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|provider
operator|.
name|writeTo
argument_list|(
name|body
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|Annotation
index|[]
block|{}
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
operator|(
name|MultivaluedMap
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|getDocument
argument_list|()
return|;
block|}
comment|// This code will be moved to a common utility class
specifier|private
name|String
name|getUserName
parameter_list|(
name|Message
name|message
parameter_list|,
name|Crypto
name|crypto
parameter_list|)
block|{
name|String
name|userNameKey
init|=
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
decl_stmt|;
name|String
name|user
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|userNameKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
try|try
block|{
name|user
operator|=
name|crypto
operator|.
name|getDefaultX509Identifier
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e1
argument_list|)
throw|;
block|}
block|}
return|return
name|user
return|;
block|}
specifier|private
name|String
name|getPassword
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|userName
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|CallbackHandler
name|handler
init|=
name|getCallbackHandler
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|WSPasswordCallback
index|[]
name|cb
init|=
block|{
operator|new
name|WSPasswordCallback
argument_list|(
name|userName
argument_list|,
name|type
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|handle
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|//get the password
name|String
name|password
init|=
name|cb
index|[
literal|0
index|]
operator|.
name|getPassword
argument_list|()
decl_stmt|;
return|return
name|password
operator|==
literal|null
condition|?
literal|""
else|:
name|password
return|;
block|}
specifier|private
name|CallbackHandler
name|getCallbackHandler
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
comment|//Then try to get the password from the given callback handler
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|)
decl_stmt|;
name|CallbackHandler
name|handler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|CallbackHandler
condition|)
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handler
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|handler
return|;
block|}
specifier|private
name|Crypto
name|getCrypto
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|cryptoKey
parameter_list|,
name|String
name|propKey
parameter_list|)
block|{
name|Crypto
name|crypto
init|=
operator|(
name|Crypto
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|cryptoKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
return|return
name|crypto
return|;
block|}
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|propKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|crypto
operator|=
name|getCryptoCache
argument_list|(
name|message
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
return|return
name|crypto
return|;
block|}
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Properties
condition|)
block|{
name|properties
operator|=
operator|(
name|Properties
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|ResourceManager
name|rm
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|rm
operator|.
name|resolveResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|ins
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|URL
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
try|try
block|{
name|InputStream
name|ins
init|=
operator|(
operator|(
name|URL
operator|)
name|o
operator|)
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|crypto
operator|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|getCryptoCache
argument_list|(
name|message
argument_list|)
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
return|return
name|crypto
return|;
block|}
specifier|protected
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Crypto
argument_list|>
name|getCryptoCache
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|EndpointInfo
name|info
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Crypto
argument_list|>
name|o
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|CRYPTO_CACHE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Crypto
argument_list|>
argument_list|()
expr_stmt|;
name|info
operator|.
name|setProperty
argument_list|(
name|CRYPTO_CACHE
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
block|}
block|}
end_class

end_unit

