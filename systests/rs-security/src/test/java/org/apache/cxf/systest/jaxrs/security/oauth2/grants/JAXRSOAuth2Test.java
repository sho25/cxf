begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|common
operator|.
name|CryptoLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|auth
operator|.
name|saml
operator|.
name|Saml2BearerAuthOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|OAuthClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AccessTokenGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|clientcred
operator|.
name|ClientCredentialsGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|jwt
operator|.
name|JwtBearerGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|saml
operator|.
name|Saml2BearerGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|saml
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|SAMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|saml
operator|.
name|SAMLUtils
operator|.
name|SelfSignInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuth2TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|SamlCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|AuthorizationGrantTest
operator|.
name|BookServerOAuth2Grants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusTestServerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|util
operator|.
name|DOM2Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Some tests for OAuth 2.0. The tests are run multiple times with different OAuthDataProvider implementations:  * a) PORT - EhCache  * b) JWT_PORT - EhCache with useJwtFormatForAccessTokens enabled  * c) JCACHE_PORT - JCache  * d) JWT_JCACHE_PORT - JCache with useJwtFormatForAccessTokens enabled  * e) JPA_PORT - JPA provider  * f) JWT_NON_PERSIST_JCACHE_PORT-  JCache with useJwtFormatForAccessTokens + !persistJwtEncoding  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|JAXRSOAuth2Test
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PORT_PUBLIC
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-public"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JWT_PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-jwt"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JWT_PORT_PUBLIC
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-public-jwt"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JCACHE_PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-jcache"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JCACHE_PORT_PUBLIC
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-public-jcache"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JWT_JCACHE_PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-jcache-jwt"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JWT_JCACHE_PORT_PUBLIC
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-public-jcache-jwt"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JPA_PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-jpa"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JPA_PORT_PUBLIC
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-public-jpa"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JWT_NON_PERSIST_JCACHE_PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-jcache-jwt-non-persist"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JWT_NON_PERSIST_JCACHE_PORT_PUBLIC
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-oauth2-public-jcache-jwt-non-persist"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CRYPTO_RESOURCE_PROPERTIES
init|=
literal|"org/apache/cxf/systest/jaxrs/security/alice.properties"
decl_stmt|;
specifier|final
name|String
name|port
decl_stmt|;
specifier|public
name|JAXRSOAuth2Test
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServerOAuth2
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServerOAuth2JWT
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServerOAuth2JCache
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServerOAuth2JCacheJWT
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServerOAuth2JPA
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServerOAuth2JCacheJWTNonPersist
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|PORT
argument_list|,
name|JWT_PORT
argument_list|,
name|JCACHE_PORT
argument_list|,
name|JWT_JCACHE_PORT
argument_list|,
name|JPA_PORT
argument_list|,
name|JWT_NON_PERSIST_JCACHE_PORT
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSAML2BearerGrant
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|Crypto
name|crypto
init|=
operator|new
name|CryptoLoader
argument_list|()
operator|.
name|loadCrypto
argument_list|(
name|CRYPTO_RESOURCE_PROPERTIES
argument_list|)
decl_stmt|;
name|SelfSignInfo
name|signInfo
init|=
operator|new
name|SelfSignInfo
argument_list|(
name|crypto
argument_list|,
literal|"alice"
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|audienceURI
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setAudience
argument_list|(
name|audienceURI
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertionWrapper
init|=
name|SAMLUtils
operator|.
name|createAssertion
argument_list|(
name|samlCallbackHandler
argument_list|,
name|signInfo
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|Element
name|assertionElement
init|=
name|assertionWrapper
operator|.
name|toDOM
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|String
name|assertion
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|assertionElement
argument_list|)
decl_stmt|;
name|Saml2BearerGrant
name|grant
init|=
operator|new
name|Saml2BearerGrant
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|Consumer
argument_list|(
literal|"alice"
argument_list|,
literal|"alice"
argument_list|)
argument_list|,
name|grant
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSAML2BearerAuthenticationDirect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|Crypto
name|crypto
init|=
operator|new
name|CryptoLoader
argument_list|()
operator|.
name|loadCrypto
argument_list|(
name|CRYPTO_RESOURCE_PROPERTIES
argument_list|)
decl_stmt|;
name|SelfSignInfo
name|signInfo
init|=
operator|new
name|SelfSignInfo
argument_list|(
name|crypto
argument_list|,
literal|"alice"
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setIssuer
argument_list|(
literal|"alice"
argument_list|)
expr_stmt|;
name|String
name|audienceURI
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setAudience
argument_list|(
name|audienceURI
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertionWrapper
init|=
name|SAMLUtils
operator|.
name|createAssertion
argument_list|(
name|samlCallbackHandler
argument_list|,
name|signInfo
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|Element
name|assertionElement
init|=
name|assertionWrapper
operator|.
name|toDOM
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|String
name|assertion
init|=
name|DOM2Writer
operator|.
name|nodeToString
argument_list|(
name|assertionElement
argument_list|)
decl_stmt|;
name|String
name|encodedAssertion
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
name|Constants
operator|.
name|CLIENT_AUTH_SAML2_BEARER
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|encodedAssertion
argument_list|)
expr_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testConfidentialClientIdOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|Consumer
argument_list|(
literal|"fredNoPassword"
argument_list|)
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"NotAuthorizedException exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"invalid_client"
argument_list|,
name|ex
operator|.
name|getError
argument_list|()
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfidentialClientIdAndSecret
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|Consumer
argument_list|(
literal|"fred"
argument_list|,
literal|"password"
argument_list|)
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPublicClientIdOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pubPort
init|=
name|PORT_PUBLIC
decl_stmt|;
if|if
condition|(
name|JWT_PORT
operator|.
name|equals
argument_list|(
name|port
argument_list|)
condition|)
block|{
name|pubPort
operator|=
name|JWT_PORT_PUBLIC
expr_stmt|;
block|}
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|pubPort
operator|+
literal|"/oauth2Public/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|Consumer
argument_list|(
literal|"fredPublic"
argument_list|)
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayTLSAuthenticationCustomGrant
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|JPA_PORT
operator|.
name|equals
argument_list|(
name|port
argument_list|)
condition|)
block|{
comment|// We don't run this test for the JPA provider due to:
comment|// java.sql.BatchUpdateException: data exception: string data, right truncation;
comment|// table: CLIENT_APPLICATIONCERTIFICATES column: APPLICATIONCERTIFICATES
return|return;
block|}
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicAuthClientCred
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|ClientCredentialsGrant
name|grant
init|=
operator|new
name|ClientCredentialsGrant
argument_list|()
decl_stmt|;
comment|// Pass client_id& client_secret as form properties
comment|// (instead WebClient can be initialized with username& password)
name|grant
operator|.
name|setClientId
argument_list|(
literal|"bob"
argument_list|)
expr_stmt|;
name|grant
operator|.
name|setClientSecret
argument_list|(
literal|"bobPassword"
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
name|grant
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Form based authentication is not supported"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|OAuthConstants
operator|.
name|UNAUTHORIZED_CLIENT
argument_list|,
name|ex
operator|.
name|getError
argument_list|()
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|Consumer
argument_list|(
literal|"bob"
argument_list|,
literal|"bobPassword"
argument_list|)
argument_list|,
operator|new
name|ClientCredentialsGrant
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSAML2BearerAuthenticationInterceptor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClientWithProps
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJWTBearerGrant
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
literal|"resourceOwner"
argument_list|,
literal|"alice"
argument_list|,
name|address
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JwtBearerGrant
name|grant
init|=
operator|new
name|JwtBearerGrant
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|Consumer
argument_list|(
literal|"alice"
argument_list|,
literal|"alice"
argument_list|)
argument_list|,
name|grant
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJWTBearerAuthenticationDirect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth-jwt/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
literal|"resourceOwner"
argument_list|,
literal|"alice"
argument_list|,
name|address
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
literal|"urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Some negative tests for authentication
comment|//
annotation|@
name|Test
specifier|public
name|void
name|testSAML11
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|String
name|audienceURI
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|String
name|assertion
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
name|audienceURI
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|encodedAssertion
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
name|Constants
operator|.
name|CLIENT_AUTH_SAML2_BEARER
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|encodedAssertion
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a SAML 1.1 Assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSAMLAudRestr
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|String
name|audienceURI
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token2"
decl_stmt|;
name|String
name|assertion
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
name|audienceURI
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|encodedAssertion
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
name|Constants
operator|.
name|CLIENT_AUTH_SAML2_BEARER
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|encodedAssertion
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a bad audience restriction"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSAMLBadSubjectName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|String
name|audienceURI
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
comment|// Create the SAML Assertion
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setSubjectName
argument_list|(
literal|"bob"
argument_list|)
expr_stmt|;
name|samlCallbackHandler
operator|.
name|setAudience
argument_list|(
name|audienceURI
argument_list|)
expr_stmt|;
name|SAMLCallback
name|samlCallback
init|=
operator|new
name|SAMLCallback
argument_list|()
decl_stmt|;
name|SAMLUtil
operator|.
name|doSAMLCallback
argument_list|(
name|samlCallbackHandler
argument_list|,
name|samlCallback
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|samlAssertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|samlCallback
argument_list|)
decl_stmt|;
if|if
condition|(
name|samlCallback
operator|.
name|isSignAssertion
argument_list|()
condition|)
block|{
name|samlAssertion
operator|.
name|signAssertion
argument_list|(
name|samlCallback
operator|.
name|getIssuerKeyName
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerKeyPassword
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerCrypto
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|isSendKeyValue
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getCanonicalizationAlgorithm
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|assertion
init|=
name|samlAssertion
operator|.
name|assertionToString
argument_list|()
decl_stmt|;
name|String
name|encodedAssertion
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
name|Constants
operator|.
name|CLIENT_AUTH_SAML2_BEARER
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|encodedAssertion
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a bad subject name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSAMLUnsigned
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|String
name|audienceURI
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|String
name|assertion
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
name|audienceURI
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|encodedAssertion
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
name|Constants
operator|.
name|CLIENT_AUTH_SAML2_BEARER
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|encodedAssertion
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unsigned token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSAMLHolderOfKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|String
name|audienceURI
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
comment|// Create the SAML Assertion
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
name|samlCallbackHandler
operator|.
name|setSubjectName
argument_list|(
literal|"alice"
argument_list|)
expr_stmt|;
name|samlCallbackHandler
operator|.
name|setAudience
argument_list|(
name|audienceURI
argument_list|)
expr_stmt|;
name|SAMLCallback
name|samlCallback
init|=
operator|new
name|SAMLCallback
argument_list|()
decl_stmt|;
name|SAMLUtil
operator|.
name|doSAMLCallback
argument_list|(
name|samlCallbackHandler
argument_list|,
name|samlCallback
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|samlAssertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|samlCallback
argument_list|)
decl_stmt|;
if|if
condition|(
name|samlCallback
operator|.
name|isSignAssertion
argument_list|()
condition|)
block|{
name|samlAssertion
operator|.
name|signAssertion
argument_list|(
name|samlCallback
operator|.
name|getIssuerKeyName
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerKeyPassword
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerCrypto
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|isSendKeyValue
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getCanonicalizationAlgorithm
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|assertion
init|=
name|samlAssertion
operator|.
name|assertionToString
argument_list|()
decl_stmt|;
name|String
name|encodedAssertion
init|=
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
name|Constants
operator|.
name|CLIENT_AUTH_SAML2_BEARER
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|encodedAssertion
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a bad subject confirmation method"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJWTBadSubjectName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth-jwt/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
literal|"resourceOwner"
argument_list|,
literal|"bob"
argument_list|,
name|address
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
literal|"urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a bad subject name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJWTUnsigned
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth-jwt/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
literal|"resourceOwner"
argument_list|,
literal|"alice"
argument_list|,
name|address
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
literal|"urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unsigned token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJWTNoIssuer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth-jwt/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
literal|null
argument_list|,
literal|"alice"
argument_list|,
name|address
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
literal|"urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on no issuer"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJWTNoExpiry
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth-jwt/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
literal|"resourceOwner"
argument_list|,
literal|"alice"
argument_list|,
name|address
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
literal|"urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on no expiry"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJWTBadAudienceRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth-jwt/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createWebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|OAuth2TestUtils
operator|.
name|createToken
argument_list|(
literal|"resourceOwner"
argument_list|,
literal|"alice"
argument_list|,
name|address
operator|+
literal|"/badtoken"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_TYPE
argument_list|,
literal|"urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|extraParams
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CLIENT_AUTH_ASSERTION_PARAM
argument_list|,
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|,
name|extraParams
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a bad audience restriction"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|private
name|WebClient
name|createWebClient
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
operator|new
name|JAXRSClientFactoryBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|JAXRSOAuth2Test
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|bean
operator|.
name|createWebClient
argument_list|()
decl_stmt|;
name|wc
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
return|return
name|wc
return|;
block|}
specifier|private
name|WebClient
name|createWebClientWithProps
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
operator|new
name|JAXRSClientFactoryBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|JAXRSOAuth2Test
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
literal|"org.apache.cxf.systest.jaxrs.security.saml.KeystorePasswordCallback"
argument_list|)
expr_stmt|;
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setIssuer
argument_list|(
literal|"alice"
argument_list|)
expr_stmt|;
name|String
name|audienceURI
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/oauth2-auth/token"
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setAudience
argument_list|(
name|audienceURI
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SAML_CALLBACK_HANDLER
argument_list|,
name|samlCallbackHandler
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
argument_list|,
literal|"alice"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|CRYPTO_RESOURCE_PROPERTIES
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|bean
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Saml2BearerAuthOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|bean
operator|.
name|createWebClient
argument_list|()
decl_stmt|;
name|wc
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
return|return
name|wc
return|;
block|}
specifier|private
specifier|static
class|class
name|CustomGrant
implements|implements
name|AccessTokenGrant
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4007538779198315873L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"custom_grant"
return|;
block|}
annotation|@
name|Override
specifier|public
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toMap
parameter_list|()
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|putSingle
argument_list|(
name|OAuthConstants
operator|.
name|GRANT_TYPE
argument_list|,
literal|"custom_grant"
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
comment|//
comment|// Server implementations
comment|//
specifier|public
specifier|static
class|class
name|BookServerOAuth2
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|BookServerOAuth2Grants
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"server.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|BookServerOAuth2
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|BookServerOAuth2JWT
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|BookServerOAuth2Grants
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"server-jwt.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|BookServerOAuth2JWT
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|BookServerOAuth2JCache
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|BookServerOAuth2Grants
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"server-jcache.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|BookServerOAuth2JCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|BookServerOAuth2JCacheJWT
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|BookServerOAuth2Grants
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"server-jcache-jwt.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|BookServerOAuth2JCacheJWT
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|BookServerOAuth2JPA
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|BookServerOAuth2Grants
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"server-jpa.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|BookServerOAuth2JPA
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|BookServerOAuth2JCacheJWTNonPersist
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|BookServerOAuth2Grants
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"server-jcache-jwt-non-persist.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|BookServerOAuth2JCacheJWTNonPersist
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

