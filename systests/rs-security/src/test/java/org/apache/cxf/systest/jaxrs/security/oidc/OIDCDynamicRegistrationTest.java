begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oidc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|json
operator|.
name|JsonMapObjectProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|services
operator|.
name|ClientRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|services
operator|.
name|ClientRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
specifier|public
class|class
name|OIDCDynamicRegistrationTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|OIDCDynRegistrationServer
operator|.
name|PORT
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|OIDCDynRegistrationServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testGetClientRegNotAvail
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCDynamicRegistrationTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/dynamic/register"
decl_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|JsonMapObjectProvider
argument_list|()
argument_list|)
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|r
init|=
name|wc
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|path
argument_list|(
literal|"some-client-id"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|401
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testRegisterClientNoInitialAccessToken
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCDynamicRegistrationTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/dynamic/register"
decl_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|JsonMapObjectProvider
argument_list|()
argument_list|)
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|wc
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|401
argument_list|,
name|wc
operator|.
name|post
argument_list|(
name|newClientRegistration
argument_list|()
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testRegisterClientInitialAccessTokenCodeGrant
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCDynamicRegistrationTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/dynamicWithAt/register"
decl_stmt|;
name|WebClient
name|wc
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|JsonMapObjectProvider
argument_list|()
argument_list|)
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|wc
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|ClientRegistration
name|reg
init|=
name|newClientRegistration
argument_list|()
decl_stmt|;
name|ClientRegistrationResponse
name|resp
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
literal|401
argument_list|,
name|wc
operator|.
name|post
argument_list|(
name|reg
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|authorization
argument_list|(
operator|new
name|ClientAccessToken
argument_list|(
literal|"Bearer"
argument_list|,
literal|"123456789"
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|=
name|wc
operator|.
name|post
argument_list|(
name|reg
argument_list|,
name|ClientRegistrationResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|resp
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|resp
operator|.
name|getClientSecret
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
operator|+
literal|"/"
operator|+
name|resp
operator|.
name|getClientId
argument_list|()
argument_list|,
name|resp
operator|.
name|getRegistrationClientUri
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|regAccessToken
init|=
name|resp
operator|.
name|getRegistrationAccessToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|regAccessToken
argument_list|)
expr_stmt|;
name|wc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|wc
operator|.
name|path
argument_list|(
name|resp
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|401
argument_list|,
name|wc
operator|.
name|get
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|authorization
argument_list|(
operator|new
name|ClientAccessToken
argument_list|(
literal|"Bearer"
argument_list|,
name|regAccessToken
argument_list|)
argument_list|)
expr_stmt|;
name|ClientRegistration
name|clientRegResp
init|=
name|wc
operator|.
name|get
argument_list|(
name|ClientRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clientRegResp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"web"
argument_list|,
name|clientRegResp
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dynamic_client"
argument_list|,
name|clientRegResp
operator|.
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"openid"
argument_list|,
name|clientRegResp
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"authorization_code"
argument_list|)
argument_list|,
name|clientRegResp
operator|.
name|getGrantTypes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"https://a/b/c"
argument_list|)
argument_list|,
name|clientRegResp
operator|.
name|getRedirectUris
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"https://rp/logout"
argument_list|)
argument_list|,
name|clientRegResp
operator|.
name|getListStringProperty
argument_list|(
literal|"post_logout_redirect_uris"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|wc
operator|.
name|delete
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ClientRegistration
name|newClientRegistration
parameter_list|()
block|{
name|ClientRegistration
name|reg
init|=
operator|new
name|ClientRegistration
argument_list|()
decl_stmt|;
name|reg
operator|.
name|setApplicationType
argument_list|(
literal|"web"
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setScope
argument_list|(
literal|"openid"
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setClientName
argument_list|(
literal|"dynamic_client"
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setGrantTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"authorization_code"
argument_list|)
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setRedirectUris
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"https://a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setProperty
argument_list|(
literal|"post_logout_redirect_uris"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"https://rp/logout"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|reg
return|;
block|}
block|}
end_class

end_unit

