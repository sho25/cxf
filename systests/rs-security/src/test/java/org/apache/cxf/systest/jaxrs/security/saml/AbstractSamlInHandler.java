begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|RequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|common
operator|.
name|CryptoLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|AssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|OpenSAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|validate
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|validate
operator|.
name|SamlAssertionValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|validate
operator|.
name|Validator
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSamlInHandler
implements|implements
name|RequestHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractSamlInHandler
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|WSSConfig
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Validator
name|samlValidator
init|=
operator|new
name|SamlAssertionValidator
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setValidator
parameter_list|(
name|Validator
name|validator
parameter_list|)
block|{
name|samlValidator
operator|=
name|validator
expr_stmt|;
block|}
specifier|public
name|void
name|validateToken
parameter_list|(
name|Message
name|message
parameter_list|,
name|InputStream
name|tokenStream
parameter_list|)
block|{
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|tokenStream
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Assertion can not be read as XML document"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|AssertionWrapper
name|assertion
init|=
operator|new
name|AssertionWrapper
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertion
operator|.
name|isSigned
argument_list|()
condition|)
block|{
name|RequestData
name|data
init|=
operator|new
name|RequestData
argument_list|()
decl_stmt|;
name|WSSConfig
name|cfg
init|=
name|WSSConfig
operator|.
name|getNewInstance
argument_list|()
decl_stmt|;
name|data
operator|.
name|setWssConfig
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|data
operator|.
name|setCallbackHandler
argument_list|(
name|getCallbackHandler
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|data
operator|.
name|setSigCrypto
argument_list|(
operator|new
name|CryptoLoader
argument_list|()
operator|.
name|getCrypto
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Crypto can not be loaded"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|setEnableRevocation
argument_list|(
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|ENABLE_REVOCATION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertion
operator|.
name|verifySignature
argument_list|(
name|data
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertion
operator|.
name|parseHOKSubject
argument_list|(
name|data
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Credential
name|credential
init|=
operator|new
name|Credential
argument_list|()
decl_stmt|;
name|credential
operator|.
name|setAssertion
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
if|if
condition|(
name|samlValidator
operator|!=
literal|null
condition|)
block|{
name|samlValidator
operator|.
name|validate
argument_list|(
name|credential
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|Certificate
index|[]
name|tlsCerts
init|=
name|getTLSCertificates
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkHolderOfKey
argument_list|(
name|assertion
argument_list|,
literal|null
argument_list|,
name|tlsCerts
argument_list|)
condition|)
block|{
name|throwFault
argument_list|(
literal|"Holder Of Key claim fails"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkSenderVouches
argument_list|(
name|assertion
argument_list|,
literal|null
argument_list|,
name|tlsCerts
argument_list|)
condition|)
block|{
name|throwFault
argument_list|(
literal|"Sender vouchers claim fails"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkBearer
argument_list|(
name|assertion
argument_list|,
name|tlsCerts
argument_list|)
condition|)
block|{
name|throwFault
argument_list|(
literal|"Bearer claim fails"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|getTLSCertificates
argument_list|(
name|message
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// alternatively ensure that the unsigned assertion inherits the signature
comment|// from the xml-sig envelope which this assertion must be contained in
name|throwFault
argument_list|(
literal|"Unsigned Assertion can only be validated with two-way TLS"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Assertion can not be validated"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Certificate
index|[]
name|getTLSCertificates
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|TLSSessionInfo
name|tlsInfo
init|=
name|message
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|tlsInfo
operator|!=
literal|null
condition|?
name|tlsInfo
operator|.
name|getPeerCertificates
argument_list|()
else|:
literal|null
return|;
block|}
specifier|protected
name|void
name|throwFault
parameter_list|(
name|String
name|error
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
comment|// TODO: get bundle resource message once this filter is moved
comment|// to rt/rs/security
name|LOG
operator|.
name|warning
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
literal|401
argument_list|)
operator|.
name|entity
argument_list|(
name|error
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
throw|throw
name|ex
operator|!=
literal|null
condition|?
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
name|response
argument_list|)
else|:
operator|new
name|WebApplicationException
argument_list|(
name|response
argument_list|)
throw|;
block|}
comment|// TODO: Most of this code can make it into rt/security to minimize the duplication
comment|//       between ws/security and rs/security
comment|// WSSecurityEngineResult is HashMap extension and can be used as such
comment|/**      * Check the sender-vouches requirements against the received assertion. The SAML      * Assertion and the request body must be signed by the same signature.      */
specifier|private
name|boolean
name|checkSenderVouches
parameter_list|(
name|AssertionWrapper
name|assertionWrapper
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|,
name|Certificate
index|[]
name|tlsCerts
parameter_list|)
block|{
comment|//
comment|// If we have a 2-way TLS connection, then we don't have to check that the
comment|// assertion + SOAP body are signed
comment|//
if|if
condition|(
name|tlsCerts
operator|!=
literal|null
operator|&&
name|tlsCerts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
comment|//        List<String> confirmationMethods = assertionWrapper.getConfirmationMethods();
comment|//        for (String confirmationMethod : confirmationMethods) {
comment|//            if (OpenSAMLUtil.isMethodSenderVouches(confirmationMethod)) {
comment|//                if (signedResults == null || signedResults.isEmpty()) {
comment|//                    return false;
comment|//                }
comment|//                if (!checkAssertionAndBodyAreSigned(assertionWrapper)) {
comment|//                    return false;
comment|//                }
comment|//            }
comment|//        }
comment|//        return true;
block|}
specifier|private
name|boolean
name|checkBearer
parameter_list|(
name|AssertionWrapper
name|assertionWrapper
parameter_list|,
name|Certificate
index|[]
name|tlsCerts
parameter_list|)
block|{
comment|// Check Recipient attribute. Perhaps, if STS validator is injected, then it can forward
comment|// this assertion to IDP which will confirm being Recipient
comment|// It seems if we have a signed assertion and a payload then bearer may get validated same
comment|// way as sender-vouches.
if|if
condition|(
name|tlsCerts
operator|!=
literal|null
operator|&&
name|tlsCerts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
comment|//List<String> confirmationMethods = assertionWrapper.getConfirmationMethods();
comment|//      for (String confirmationMethod : confirmationMethods) {
comment|//          if (isMethodBearer(confirmationMethod)) {
comment|//
comment|//          }
comment|//      }
block|}
comment|//private boolean isMethodBearer(String confirmMethod) {
comment|//    return confirmMethod != null&& confirmMethod.startsWith("urn:oasis:names:tc:SAML:")
comment|//&& confirmMethod.endsWith(":cm:bearer");
comment|//}
specifier|public
name|boolean
name|checkHolderOfKey
parameter_list|(
name|AssertionWrapper
name|assertionWrapper
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|,
name|Certificate
index|[]
name|tlsCerts
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|confirmationMethods
init|=
name|assertionWrapper
operator|.
name|getConfirmationMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|confirmationMethod
range|:
name|confirmationMethods
control|)
block|{
if|if
condition|(
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmationMethod
argument_list|)
condition|)
block|{
if|if
condition|(
name|tlsCerts
operator|==
literal|null
operator|&&
operator|(
name|signedResults
operator|==
literal|null
operator|||
name|signedResults
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertionWrapper
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|compareCredentials
argument_list|(
name|subjectKeyInfo
argument_list|,
name|signedResults
argument_list|,
name|tlsCerts
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Compare the credentials of the assertion to the credentials used in 2-way TLS or those      * used to verify signatures.      * Return true on a match      * @param subjectKeyInfo the SAMLKeyInfo object      * @param signedResults a list of all of the signed results      * @return true if the credentials of the assertion were used to verify a signature      */
specifier|private
name|boolean
name|compareCredentials
parameter_list|(
name|SAMLKeyInfo
name|subjectKeyInfo
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|,
name|Certificate
index|[]
name|tlsCerts
parameter_list|)
block|{
name|X509Certificate
index|[]
name|subjectCerts
init|=
name|subjectKeyInfo
operator|.
name|getCerts
argument_list|()
decl_stmt|;
name|PublicKey
name|subjectPublicKey
init|=
name|subjectKeyInfo
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|subjectSecretKey
init|=
name|subjectKeyInfo
operator|.
name|getSecret
argument_list|()
decl_stmt|;
comment|//
comment|// Try to match the TLS certs first
comment|//
if|if
condition|(
name|tlsCerts
operator|!=
literal|null
operator|&&
name|tlsCerts
operator|.
name|length
operator|>
literal|0
operator|&&
name|subjectCerts
operator|!=
literal|null
operator|&&
name|subjectCerts
operator|.
name|length
operator|>
literal|0
operator|&&
name|tlsCerts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|subjectCerts
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|tlsCerts
operator|!=
literal|null
operator|&&
name|tlsCerts
operator|.
name|length
operator|>
literal|0
operator|&&
name|subjectPublicKey
operator|!=
literal|null
operator|&&
name|tlsCerts
index|[
literal|0
index|]
operator|.
name|getPublicKey
argument_list|()
operator|.
name|equals
argument_list|(
name|subjectPublicKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//
comment|// Now try the message-level signatures
comment|//
for|for
control|(
name|WSSecurityEngineResult
name|signedResult
range|:
name|signedResults
control|)
block|{
name|X509Certificate
index|[]
name|certs
init|=
operator|(
name|X509Certificate
index|[]
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATES
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
operator|(
name|PublicKey
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PUBLIC_KEY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secretKey
init|=
operator|(
name|byte
index|[]
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
if|if
condition|(
name|certs
operator|!=
literal|null
operator|&&
name|certs
operator|.
name|length
operator|>
literal|0
operator|&&
name|subjectCerts
operator|!=
literal|null
operator|&&
name|subjectCerts
operator|.
name|length
operator|>
literal|0
operator|&&
name|certs
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|subjectCerts
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|publicKey
operator|!=
literal|null
operator|&&
name|publicKey
operator|.
name|equals
argument_list|(
name|subjectPublicKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|checkSecretKey
argument_list|(
name|secretKey
argument_list|,
name|subjectSecretKey
argument_list|,
name|signedResult
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkSecretKey
parameter_list|(
name|byte
index|[]
name|secretKey
parameter_list|,
name|byte
index|[]
name|subjectSecretKey
parameter_list|,
name|WSSecurityEngineResult
name|signedResult
parameter_list|)
block|{
if|if
condition|(
name|secretKey
operator|!=
literal|null
operator|&&
name|subjectSecretKey
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|secretKey
argument_list|,
name|subjectSecretKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|//            else {
comment|//                Principal principal =
comment|//                    (Principal)signedResult.get(WSSecurityEngineResult.TAG_PRINCIPAL);
comment|//                if (principal instanceof WSDerivedKeyTokenPrincipal) {
comment|//                    secretKey = ((WSDerivedKeyTokenPrincipal)principal).getSecret();
comment|//                    if (Arrays.equals(secretKey, subjectSecretKey)) {
comment|//                        return true;
comment|//                    }
comment|//                }
comment|//            }
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|CallbackHandler
name|getCallbackHandler
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
comment|//Then try to get the password from the given callback handler
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|)
decl_stmt|;
name|CallbackHandler
name|handler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|CallbackHandler
condition|)
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handler
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|handler
return|;
block|}
block|}
end_class

end_unit

