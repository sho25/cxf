begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|httpsignature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|httpsignature
operator|.
name|provider
operator|.
name|KeyProvider
import|;
end_import

begin_class
specifier|public
class|class
name|CustomPublicKeyProvider
implements|implements
name|KeyProvider
block|{
annotation|@
name|Override
specifier|public
name|PublicKey
name|getKey
parameter_list|(
name|String
name|keyId
parameter_list|)
block|{
if|if
condition|(
literal|"alice-key-id"
operator|.
name|equals
argument_list|(
name|keyId
argument_list|)
condition|)
block|{
name|KeyStore
name|keyStore
decl_stmt|;
try|try
block|{
name|keyStore
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"JKS"
argument_list|)
expr_stmt|;
name|keyStore
operator|.
name|load
argument_list|(
name|ClassLoaderUtils
operator|.
name|getResourceAsStream
argument_list|(
literal|"keys/alice.jks"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
literal|"password"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keyStore
operator|.
name|getCertificate
argument_list|(
literal|"alice"
argument_list|)
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
decl||
name|NoSuchAlgorithmException
decl||
name|CertificateException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"bob-key-id"
operator|.
name|equals
argument_list|(
name|keyId
argument_list|)
condition|)
block|{
name|KeyStore
name|keyStore
decl_stmt|;
try|try
block|{
name|keyStore
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"JKS"
argument_list|)
expr_stmt|;
name|keyStore
operator|.
name|load
argument_list|(
name|ClassLoaderUtils
operator|.
name|getResourceAsStream
argument_list|(
literal|"keys/bob.jks"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
literal|"password"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keyStore
operator|.
name|getCertificate
argument_list|(
literal|"bob"
argument_list|)
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
decl||
name|NoSuchAlgorithmException
decl||
name|CertificateException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

