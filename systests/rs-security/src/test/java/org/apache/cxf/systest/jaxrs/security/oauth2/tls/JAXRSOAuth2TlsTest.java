begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|tls
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|impl
operator|.
name|MetadataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|json
operator|.
name|JsonMapObjectProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|common
operator|.
name|JoseConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtClaims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|OAuthClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AccessTokenGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|services
operator|.
name|ClientRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|services
operator|.
name|ClientRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JAXRSOAuth2TlsTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|BookServerOAuth2Tls
operator|.
name|PORT
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServerOAuth2Tls
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayTLSClientIdIsSubjectDn
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|atServiceAddress
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createOAuth2WebClient
argument_list|(
name|atServiceAddress
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|protectedRsAddress
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/rs/bookstore/books/123"
decl_stmt|;
name|WebClient
name|wcRs
init|=
name|createRsWebClient
argument_list|(
name|protectedRsAddress
argument_list|,
name|at
argument_list|,
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Book
name|book
init|=
name|wcRs
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|protectedRsAddress2
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/rs2/bookstore/books/123"
decl_stmt|;
name|WebClient
name|wcRs2
init|=
name|createRsWebClient
argument_list|(
name|protectedRsAddress2
argument_list|,
name|at
argument_list|,
literal|"client.xml"
argument_list|)
decl_stmt|;
name|book
operator|=
name|wcRs2
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|unprotectedRsAddress
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/rsUnprotected/bookstore/books/123"
decl_stmt|;
name|WebClient
name|wcRsDiffClientCert
init|=
name|createRsWebClient
argument_list|(
name|unprotectedRsAddress
argument_list|,
name|at
argument_list|,
literal|"client2.xml"
argument_list|)
decl_stmt|;
comment|// Unprotected resource
name|book
operator|=
name|wcRsDiffClientCert
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Protected resource, access token was created with Morphit.jks key, RS is accessed with
comment|// Bethal.jks key, thus 401 is expected
name|wcRsDiffClientCert
operator|=
name|createRsWebClient
argument_list|(
name|protectedRsAddress
argument_list|,
name|at
argument_list|,
literal|"client2.xml"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|401
argument_list|,
name|wcRsDiffClientCert
operator|.
name|get
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|wcRsDiffClientCert
operator|=
name|createRsWebClient
argument_list|(
name|protectedRsAddress2
argument_list|,
name|at
argument_list|,
literal|"client2.xml"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|401
argument_list|,
name|wcRsDiffClientCert
operator|.
name|get
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayTLSClientIdBound
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|atServiceAddress
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createOAuth2WebClient
argument_list|(
name|atServiceAddress
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|Consumer
argument_list|(
literal|"bound"
argument_list|)
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayTLSClientIdBoundJwt
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTwoWayTLSClientIdBoundJwt
argument_list|(
literal|"boundJwt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterClientTwoWayTLSClientIdBoundDynReg
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dynRegAddress
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/oauth2Jwt/register"
decl_stmt|;
name|WebClient
name|wcDynReg
init|=
name|createDynRegWebClient
argument_list|(
name|dynRegAddress
argument_list|)
decl_stmt|;
name|wcDynReg
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|ClientRegistration
name|reg
init|=
name|newClientRegistration
argument_list|()
decl_stmt|;
name|wcDynReg
operator|.
name|authorization
argument_list|(
operator|new
name|ClientAccessToken
argument_list|(
literal|"Bearer"
argument_list|,
literal|"123456789"
argument_list|)
argument_list|)
expr_stmt|;
name|ClientRegistrationResponse
name|resp
init|=
name|wcDynReg
operator|.
name|post
argument_list|(
name|reg
argument_list|,
name|ClientRegistrationResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|doTestTwoWayTLSClientIdBoundJwt
argument_list|(
name|resp
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete the client
name|String
name|regAccessToken
init|=
name|resp
operator|.
name|getRegistrationAccessToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|regAccessToken
argument_list|)
expr_stmt|;
name|wcDynReg
operator|.
name|path
argument_list|(
name|resp
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|wcDynReg
operator|.
name|authorization
argument_list|(
operator|new
name|ClientAccessToken
argument_list|(
literal|"Bearer"
argument_list|,
name|regAccessToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|wcDynReg
operator|.
name|delete
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|regAccessToken
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestTwoWayTLSClientIdBoundJwt
parameter_list|(
name|String
name|clientId
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|atServiceAddress
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/oauth2Jwt/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createOAuth2WebClient
argument_list|(
name|atServiceAddress
argument_list|)
decl_stmt|;
name|ClientAccessToken
name|at
init|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|Consumer
argument_list|(
name|clientId
argument_list|)
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
name|JwsJwtCompactConsumer
name|c
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|at
operator|.
name|getTokenKey
argument_list|()
argument_list|)
decl_stmt|;
name|JwtClaims
name|claims
init|=
name|JwtUtils
operator|.
name|jsonToClaims
argument_list|(
name|c
operator|.
name|getDecodedJwsPayload
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cnfs
init|=
name|claims
operator|.
name|getMapProperty
argument_list|(
name|JwtConstants
operator|.
name|CLAIM_CONFIRMATION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cnfs
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cnfs
operator|.
name|get
argument_list|(
name|JoseConstants
operator|.
name|HEADER_X509_THUMBPRINT_SHA256
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|protectedRsAddress
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/rsJwt/bookstore/books/123"
decl_stmt|;
name|WebClient
name|wcRs
init|=
name|createRsWebClient
argument_list|(
name|protectedRsAddress
argument_list|,
name|at
argument_list|,
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Book
name|book
init|=
name|wcRs
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|protectedRsAddress2
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/rsJwt2/bookstore/books/123"
decl_stmt|;
name|WebClient
name|wcRs2
init|=
name|createRsWebClient
argument_list|(
name|protectedRsAddress2
argument_list|,
name|at
argument_list|,
literal|"client.xml"
argument_list|)
decl_stmt|;
name|book
operator|=
name|wcRs2
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|unprotectedRsAddress
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/rsUnprotected/bookstore/books/123"
decl_stmt|;
name|WebClient
name|wcRsDiffClientCert
init|=
name|createRsWebClient
argument_list|(
name|unprotectedRsAddress
argument_list|,
name|at
argument_list|,
literal|"client2.xml"
argument_list|)
decl_stmt|;
comment|// Unprotected resource
name|book
operator|=
name|wcRsDiffClientCert
operator|.
name|get
argument_list|(
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123L
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Protected resource, access token was created with Morphit.jks key, RS is accessed with
comment|// Bethal.jks key, thus 401 is expected
name|wcRsDiffClientCert
operator|=
name|createRsWebClient
argument_list|(
name|protectedRsAddress
argument_list|,
name|at
argument_list|,
literal|"client2.xml"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|401
argument_list|,
name|wcRsDiffClientCert
operator|.
name|get
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|wcRsDiffClientCert
operator|=
name|createRsWebClient
argument_list|(
name|protectedRsAddress2
argument_list|,
name|at
argument_list|,
literal|"client2.xml"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|401
argument_list|,
name|wcRsDiffClientCert
operator|.
name|get
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ClientRegistration
name|newClientRegistration
parameter_list|()
block|{
name|ClientRegistration
name|reg
init|=
operator|new
name|ClientRegistration
argument_list|()
decl_stmt|;
name|reg
operator|.
name|setApplicationType
argument_list|(
literal|"web"
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setScope
argument_list|(
literal|"openid"
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setClientName
argument_list|(
literal|"dynamic_client"
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setGrantTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"custom_grant"
argument_list|)
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setRedirectUris
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"https://a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setTokenEndpointAuthMethod
argument_list|(
name|OAuthConstants
operator|.
name|TOKEN_ENDPOINT_AUTH_TLS
argument_list|)
expr_stmt|;
name|reg
operator|.
name|setProperty
argument_list|(
name|OAuthConstants
operator|.
name|TLS_CLIENT_AUTH_SUBJECT_DN
argument_list|,
literal|"CN=whateverhost.com,OU=Morpit,O=ApacheTest,L=Syracuse,C=US"
argument_list|)
expr_stmt|;
return|return
name|reg
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoWayTLSClientUnbound
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/oauth2/token"
decl_stmt|;
name|WebClient
name|wc
init|=
name|createOAuth2WebClient
argument_list|(
name|address
argument_list|)
decl_stmt|;
try|try
block|{
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|wc
argument_list|,
operator|new
name|Consumer
argument_list|(
literal|"unbound"
argument_list|)
argument_list|,
operator|new
name|CustomGrant
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception_expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OAuthServiceException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"invalid_client"
argument_list|,
name|ex
operator|.
name|getError
argument_list|()
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|WebClient
name|createOAuth2WebClient
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
operator|new
name|JAXRSClientFactoryBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|JAXRSOAuth2TlsTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|bean
operator|.
name|createWebClient
argument_list|()
decl_stmt|;
name|wc
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
return|return
name|wc
return|;
block|}
specifier|private
name|WebClient
name|createDynRegWebClient
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
operator|new
name|JAXRSClientFactoryBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setProvider
argument_list|(
operator|new
name|JsonMapObjectProvider
argument_list|()
argument_list|)
expr_stmt|;
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|JAXRSOAuth2TlsTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|bean
operator|.
name|createWebClient
argument_list|()
decl_stmt|;
name|wc
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
return|return
name|wc
return|;
block|}
specifier|private
name|WebClient
name|createRsWebClient
parameter_list|(
name|String
name|address
parameter_list|,
name|ClientAccessToken
name|at
parameter_list|,
name|String
name|clientContext
parameter_list|)
block|{
name|JAXRSClientFactoryBean
name|bean
init|=
operator|new
name|JAXRSClientFactoryBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|busFile
init|=
name|JAXRSOAuth2TlsTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|clientContext
argument_list|)
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|WebClient
name|wc
init|=
name|bean
operator|.
name|createWebClient
argument_list|()
decl_stmt|;
name|wc
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
name|wc
operator|.
name|authorization
argument_list|(
name|at
argument_list|)
expr_stmt|;
return|return
name|wc
return|;
block|}
specifier|private
specifier|static
class|class
name|CustomGrant
implements|implements
name|AccessTokenGrant
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4007538779198315873L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"custom_grant"
return|;
block|}
annotation|@
name|Override
specifier|public
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toMap
parameter_list|()
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|MetadataMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|putSingle
argument_list|(
name|OAuthConstants
operator|.
name|GRANT_TYPE
argument_list|,
literal|"custom_grant"
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
block|}
end_class

end_unit

