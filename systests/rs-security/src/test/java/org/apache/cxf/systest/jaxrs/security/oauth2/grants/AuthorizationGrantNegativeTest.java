begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64UrlUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|json
operator|.
name|JSONProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwa
operator|.
name|SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsSignatureProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtClaims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthAuthorizationData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthJSONProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|SamlCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML1Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * Some (negative) tests for various authorization grants.  */
end_comment

begin_class
specifier|public
class|class
name|AuthorizationGrantNegativeTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|BookServerOAuth2GrantsNegative
operator|.
name|PORT
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|BookServerOAuth2GrantsNegative
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// SAML Authorization grants
comment|//
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSAML11
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the SAML Assertion
name|String
name|assertion
init|=
name|createToken
argument_list|(
name|address
operator|+
literal|"token"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:saml2-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
try|try
block|{
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a SAML 1.1 assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSAMLAudRestr
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the SAML Assertion
name|String
name|assertion
init|=
name|createToken
argument_list|(
name|address
operator|+
literal|"token2"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:saml2-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
try|try
block|{
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a bad audience restriction"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSAMLUnsigned
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the SAML Assertion
name|String
name|assertion
init|=
name|createToken
argument_list|(
name|address
operator|+
literal|"token"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:saml2-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
try|try
block|{
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unsigned assertion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSAMLHolderOfKey
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the SAML Assertion
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
name|samlCallbackHandler
operator|.
name|setAudience
argument_list|(
name|address
operator|+
literal|"token"
argument_list|)
expr_stmt|;
name|SAMLCallback
name|samlCallback
init|=
operator|new
name|SAMLCallback
argument_list|()
decl_stmt|;
name|SAMLUtil
operator|.
name|doSAMLCallback
argument_list|(
name|samlCallbackHandler
argument_list|,
name|samlCallback
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|samlAssertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|samlCallback
argument_list|)
decl_stmt|;
name|samlAssertion
operator|.
name|signAssertion
argument_list|(
name|samlCallback
operator|.
name|getIssuerKeyName
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerKeyPassword
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerCrypto
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|isSendKeyValue
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getCanonicalizationAlgorithm
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|assertion
init|=
name|samlAssertion
operator|.
name|assertionToString
argument_list|()
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:saml2-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
try|try
block|{
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an incorrect subject confirmation method"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testSAMLUnauthenticatedSignature
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the SAML Assertion
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
name|samlCallbackHandler
operator|.
name|setAudience
argument_list|(
name|address
operator|+
literal|"token"
argument_list|)
expr_stmt|;
name|samlCallbackHandler
operator|.
name|setIssuerKeyName
argument_list|(
literal|"smallkey"
argument_list|)
expr_stmt|;
name|samlCallbackHandler
operator|.
name|setIssuerKeyPassword
argument_list|(
literal|"security"
argument_list|)
expr_stmt|;
name|samlCallbackHandler
operator|.
name|setCryptoPropertiesFile
argument_list|(
literal|"org/apache/cxf/systest/jaxrs/security/smallkey.properties"
argument_list|)
expr_stmt|;
name|SAMLCallback
name|samlCallback
init|=
operator|new
name|SAMLCallback
argument_list|()
decl_stmt|;
name|SAMLUtil
operator|.
name|doSAMLCallback
argument_list|(
name|samlCallbackHandler
argument_list|,
name|samlCallback
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|samlAssertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|samlCallback
argument_list|)
decl_stmt|;
name|samlAssertion
operator|.
name|signAssertion
argument_list|(
name|samlCallback
operator|.
name|getIssuerKeyName
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerKeyPassword
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerCrypto
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|isSendKeyValue
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getCanonicalizationAlgorithm
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|assertion
init|=
name|samlAssertion
operator|.
name|assertionToString
argument_list|()
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:saml2-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|Base64UrlUtility
operator|.
name|encode
argument_list|(
name|assertion
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
try|try
block|{
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an incorrect subject confirmation method"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|//
comment|// JWT Authorization grants
comment|//
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testJWTUnsigned
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|createToken
argument_list|(
literal|"DoubleItSTSIssuer"
argument_list|,
literal|"consumer-id"
argument_list|,
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/token"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unsigned token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testJWTNoIssuer
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|createToken
argument_list|(
literal|null
argument_list|,
literal|"consumer-id"
argument_list|,
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/token"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on no issuer"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testJWTNoExpiry
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|createToken
argument_list|(
literal|"DoubleItSTSIssuer"
argument_list|,
literal|"consumer-id"
argument_list|,
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/token"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on no expiry"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testJWTBadAudienceRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
name|String
name|token
init|=
name|createToken
argument_list|(
literal|"DoubleItSTSIssuer"
argument_list|,
literal|"consumer-id"
argument_list|,
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/badtoken"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a bad audience restriction"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testJWTUnauthenticatedSignature
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|AuthorizationGrantNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the JWT Token
comment|// Create the JWT Token
name|JwtClaims
name|claims
init|=
operator|new
name|JwtClaims
argument_list|()
decl_stmt|;
name|claims
operator|.
name|setSubject
argument_list|(
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setIssuer
argument_list|(
literal|"DoubleItSTSIssuer"
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setIssuedAt
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|/
literal|1000L
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setExpiryTime
argument_list|(
name|cal
operator|.
name|getTimeInMillis
argument_list|()
operator|/
literal|1000L
argument_list|)
expr_stmt|;
name|String
name|audience
init|=
literal|"https://localhost:"
operator|+
name|PORT
operator|+
literal|"/services/token"
decl_stmt|;
name|claims
operator|.
name|setAudiences
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|audience
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sign the JWT Token
name|Properties
name|signingProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.keystore.type"
argument_list|,
literal|"jks"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.keystore.password"
argument_list|,
literal|"security"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.keystore.alias"
argument_list|,
literal|"smallkey"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.keystore.file"
argument_list|,
literal|"org/apache/cxf/systest/jaxrs/security/certs/smallkeysize.jks"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.key.password"
argument_list|,
literal|"security"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.signature.algorithm"
argument_list|,
literal|"RS256"
argument_list|)
expr_stmt|;
name|JwsHeaders
name|jwsHeaders
init|=
operator|new
name|JwsHeaders
argument_list|(
name|signingProperties
argument_list|)
decl_stmt|;
name|JwsJwtCompactProducer
name|jws
init|=
operator|new
name|JwsJwtCompactProducer
argument_list|(
name|jwsHeaders
argument_list|,
name|claims
argument_list|)
decl_stmt|;
name|JwsSignatureProvider
name|sigProvider
init|=
name|JwsUtils
operator|.
name|loadSignatureProvider
argument_list|(
name|signingProperties
argument_list|,
name|jwsHeaders
argument_list|)
decl_stmt|;
name|String
name|token
init|=
name|jws
operator|.
name|signWith
argument_list|(
name|sigProvider
argument_list|)
decl_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"token"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"urn:ietf:params:oauth:grant-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"assertion"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unauthenticated token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|setupProviders
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|JSONProvider
argument_list|<
name|OAuthAuthorizationData
argument_list|>
name|jsonP
init|=
operator|new
name|JSONProvider
argument_list|<
name|OAuthAuthorizationData
argument_list|>
argument_list|()
decl_stmt|;
name|jsonP
operator|.
name|setNamespaceMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"http://org.apache.cxf.rs.security.oauth"
argument_list|,
literal|"ns2"
argument_list|)
argument_list|)
expr_stmt|;
name|providers
operator|.
name|add
argument_list|(
name|jsonP
argument_list|)
expr_stmt|;
name|OAuthJSONProvider
name|oauthProvider
init|=
operator|new
name|OAuthJSONProvider
argument_list|()
decl_stmt|;
name|providers
operator|.
name|add
argument_list|(
name|oauthProvider
argument_list|)
expr_stmt|;
return|return
name|providers
return|;
block|}
specifier|private
name|String
name|createToken
parameter_list|(
name|String
name|audRestr
parameter_list|,
name|boolean
name|saml2
parameter_list|,
name|boolean
name|sign
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|SamlCallbackHandler
name|samlCallbackHandler
init|=
operator|new
name|SamlCallbackHandler
argument_list|(
name|sign
argument_list|)
decl_stmt|;
name|samlCallbackHandler
operator|.
name|setAudience
argument_list|(
name|audRestr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|saml2
condition|)
block|{
name|samlCallbackHandler
operator|.
name|setSaml2
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|samlCallbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML1Constants
operator|.
name|CONF_BEARER
argument_list|)
expr_stmt|;
block|}
name|SAMLCallback
name|samlCallback
init|=
operator|new
name|SAMLCallback
argument_list|()
decl_stmt|;
name|SAMLUtil
operator|.
name|doSAMLCallback
argument_list|(
name|samlCallbackHandler
argument_list|,
name|samlCallback
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|samlAssertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|samlCallback
argument_list|)
decl_stmt|;
if|if
condition|(
name|samlCallback
operator|.
name|isSignAssertion
argument_list|()
condition|)
block|{
name|samlAssertion
operator|.
name|signAssertion
argument_list|(
name|samlCallback
operator|.
name|getIssuerKeyName
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerKeyPassword
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getIssuerCrypto
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|isSendKeyValue
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getCanonicalizationAlgorithm
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|samlAssertion
operator|.
name|assertionToString
argument_list|()
return|;
block|}
specifier|private
name|String
name|createToken
parameter_list|(
name|String
name|issuer
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|audience
parameter_list|,
name|boolean
name|expiry
parameter_list|,
name|boolean
name|sign
parameter_list|)
block|{
comment|// Create the JWT Token
name|JwtClaims
name|claims
init|=
operator|new
name|JwtClaims
argument_list|()
decl_stmt|;
name|claims
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
if|if
condition|(
name|issuer
operator|!=
literal|null
condition|)
block|{
name|claims
operator|.
name|setIssuer
argument_list|(
name|issuer
argument_list|)
expr_stmt|;
block|}
name|claims
operator|.
name|setIssuedAt
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|/
literal|1000L
argument_list|)
expr_stmt|;
if|if
condition|(
name|expiry
condition|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setExpiryTime
argument_list|(
name|cal
operator|.
name|getTimeInMillis
argument_list|()
operator|/
literal|1000L
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|audience
operator|!=
literal|null
condition|)
block|{
name|claims
operator|.
name|setAudiences
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|audience
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sign
condition|)
block|{
comment|// Sign the JWT Token
name|Properties
name|signingProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.keystore.type"
argument_list|,
literal|"jks"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.keystore.password"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.keystore.alias"
argument_list|,
literal|"alice"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.keystore.file"
argument_list|,
literal|"org/apache/cxf/systest/jaxrs/security/certs/alice.jks"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.key.password"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|signingProperties
operator|.
name|put
argument_list|(
literal|"rs.security.signature.algorithm"
argument_list|,
literal|"RS256"
argument_list|)
expr_stmt|;
name|JwsHeaders
name|jwsHeaders
init|=
operator|new
name|JwsHeaders
argument_list|(
name|signingProperties
argument_list|)
decl_stmt|;
name|JwsJwtCompactProducer
name|jws
init|=
operator|new
name|JwsJwtCompactProducer
argument_list|(
name|jwsHeaders
argument_list|,
name|claims
argument_list|)
decl_stmt|;
name|JwsSignatureProvider
name|sigProvider
init|=
name|JwsUtils
operator|.
name|loadSignatureProvider
argument_list|(
name|signingProperties
argument_list|,
name|jwsHeaders
argument_list|)
decl_stmt|;
return|return
name|jws
operator|.
name|signWith
argument_list|(
name|sigProvider
argument_list|)
return|;
block|}
name|JwsHeaders
name|jwsHeaders
init|=
operator|new
name|JwsHeaders
argument_list|(
name|SignatureAlgorithm
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|JwsJwtCompactProducer
name|jws
init|=
operator|new
name|JwsJwtCompactProducer
argument_list|(
name|jwsHeaders
argument_list|,
name|claims
argument_list|)
decl_stmt|;
return|return
name|jws
operator|.
name|getSignedEncodedJws
argument_list|()
return|;
block|}
block|}
end_class

end_unit

