begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oidc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|JsonWebKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwk
operator|.
name|KeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuth2TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Some tests for the OIDC Keys Service  */
end_comment

begin_class
specifier|public
class|class
name|OIDCKeysServiceTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|private
specifier|static
specifier|final
name|SpringBusTestServer
name|JCACHE_SERVER
init|=
operator|new
name|SpringBusTestServer
argument_list|(
literal|"oidc-keys-jcache"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
name|launchServer
argument_list|(
name|JCACHE_SERVER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testGetRSAPublicKey
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|JCACHE_SERVER
operator|.
name|getPort
argument_list|()
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"keys/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|JsonWebKeys
name|jsonWebKeys
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|JsonWebKeys
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JsonWebKey
name|jsonWebKey
init|=
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyType
operator|.
name|RSA
argument_list|,
name|jsonWebKey
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alice"
argument_list|,
name|jsonWebKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check we don't send the private key back
name|checkPrivateKeyParametersNotPresent
argument_list|(
name|jsonWebKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testGetJWKRSAPublicKey
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|JCACHE_SERVER
operator|.
name|getPort
argument_list|()
operator|+
literal|"/services2/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"keys/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|JsonWebKeys
name|jsonWebKeys
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|JsonWebKeys
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JsonWebKey
name|jsonWebKey
init|=
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyType
operator|.
name|RSA
argument_list|,
name|jsonWebKey
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2011-04-29"
argument_list|,
name|jsonWebKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check we don't send the private key back
name|checkPrivateKeyParametersNotPresent
argument_list|(
name|jsonWebKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testGetJWKECPublicKey
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|JCACHE_SERVER
operator|.
name|getPort
argument_list|()
operator|+
literal|"/services3/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"keys/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|JsonWebKeys
name|jsonWebKeys
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|JsonWebKeys
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JsonWebKey
name|jsonWebKey
init|=
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyType
operator|.
name|EC
argument_list|,
name|jsonWebKey
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ECKey"
argument_list|,
name|jsonWebKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check we don't send the private key back
name|checkPrivateKeyParametersNotPresent
argument_list|(
name|jsonWebKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testGetJWKHMAC
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|JCACHE_SERVER
operator|.
name|getPort
argument_list|()
operator|+
literal|"/services4/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"keys/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|JsonWebKeys
name|jsonWebKeys
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|JsonWebKeys
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// We don't allow sending secret keys back from the key service by default
name|assertNull
argument_list|(
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testGetJWKHMACExplicitlyAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|JCACHE_SERVER
operator|.
name|getPort
argument_list|()
operator|+
literal|"/services5/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"keys/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|JsonWebKeys
name|jsonWebKeys
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|JsonWebKeys
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Here we explicitly allow sending back secret keys
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testGetJWKMultipleKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|JCACHE_SERVER
operator|.
name|getPort
argument_list|()
operator|+
literal|"/services6/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"keys/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|JsonWebKeys
name|jsonWebKeys
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|JsonWebKeys
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check we don't send the private key back
name|checkPrivateKeyParametersNotPresent
argument_list|(
name|jsonWebKeys
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPrivateKeyParametersNotPresent
parameter_list|(
name|JsonWebKeys
name|jsonWebKeys
parameter_list|)
block|{
for|for
control|(
name|JsonWebKey
name|jsonWebKey
range|:
name|jsonWebKeys
operator|.
name|getKeys
argument_list|()
control|)
block|{
name|assertNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"q"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"dp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"dq"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|jsonWebKey
operator|.
name|getProperty
argument_list|(
literal|"qi"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

