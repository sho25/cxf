begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSamlBase64InHandler
extends|extends
name|AbstractSamlInHandler
block|{
specifier|private
name|boolean
name|useDeflateEncoding
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|setUseDeflateEncoding
parameter_list|(
name|boolean
name|deflate
parameter_list|)
block|{
name|useDeflateEncoding
operator|=
name|deflate
expr_stmt|;
block|}
specifier|public
name|boolean
name|useDeflateEncoding
parameter_list|()
block|{
return|return
name|useDeflateEncoding
return|;
block|}
specifier|protected
name|void
name|handleToken
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|assertion
parameter_list|)
block|{
comment|// the assumption here is that saml:Assertion is directly available, however, it
comment|// may be contained inside saml:Response or saml:ArtifactResponse/saml:Response
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
name|throwFault
argument_list|(
literal|"SAML assertion is not available"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|byte
index|[]
name|deflatedToken
init|=
name|Base64Utility
operator|.
name|decode
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|useDeflateEncoding
argument_list|()
condition|?
operator|new
name|DeflateEncoderDecoder
argument_list|()
operator|.
name|inflateToken
argument_list|(
name|deflatedToken
argument_list|)
else|:
operator|new
name|ByteArrayInputStream
argument_list|(
name|deflatedToken
argument_list|)
decl_stmt|;
name|validateToken
argument_list|(
name|message
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Base64Exception
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Base64 decoding has failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataFormatException
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Encoded assertion can not be inflated"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

