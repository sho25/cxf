begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|code
operator|.
name|DefaultEHCacheCodeDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuthServiceException
import|;
end_import

begin_comment
comment|/**  * Extend the DefaultEHCacheCodeDataProvider to allow refreshing of tokens  */
end_comment

begin_class
specifier|public
class|class
name|OAuthDataProviderImpl
extends|extends
name|DefaultEHCacheCodeDataProvider
block|{
specifier|public
name|OAuthDataProviderImpl
parameter_list|()
block|{
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
literal|"consumer-id"
argument_list|,
literal|"this-is-a-secret"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|client
operator|.
name|setRedirectUris
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"http://www.blah.apache.org"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|getAllowedGrantTypes
argument_list|()
operator|.
name|add
argument_list|(
literal|"authorization_code"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getAllowedGrantTypes
argument_list|()
operator|.
name|add
argument_list|(
literal|"refresh_token"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getAllowedGrantTypes
argument_list|()
operator|.
name|add
argument_list|(
literal|"implicit"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getAllowedGrantTypes
argument_list|()
operator|.
name|add
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getAllowedGrantTypes
argument_list|()
operator|.
name|add
argument_list|(
literal|"client_credentials"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getAllowedGrantTypes
argument_list|()
operator|.
name|add
argument_list|(
literal|"urn:ietf:params:oauth:grant-type:saml2-bearer"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getAllowedGrantTypes
argument_list|()
operator|.
name|add
argument_list|(
literal|"urn:ietf:params:oauth:grant-type:jwt-bearer"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRegisteredScopes
argument_list|()
operator|.
name|add
argument_list|(
literal|"read_balance"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRegisteredScopes
argument_list|()
operator|.
name|add
argument_list|(
literal|"create_balance"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRegisteredScopes
argument_list|()
operator|.
name|add
argument_list|(
literal|"read_data"
argument_list|)
expr_stmt|;
name|this
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isRefreshTokenSupported
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|theScopes
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|convertScopeToPermissions
parameter_list|(
name|Client
name|client
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requestedScopes
parameter_list|)
block|{
if|if
condition|(
name|requestedScopes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|OAuthPermission
argument_list|>
name|permissions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|requestedScope
range|:
name|requestedScopes
control|)
block|{
if|if
condition|(
literal|"read_balance"
operator|.
name|equals
argument_list|(
name|requestedScope
argument_list|)
condition|)
block|{
name|OAuthPermission
name|permission
init|=
operator|new
name|OAuthPermission
argument_list|()
decl_stmt|;
name|permission
operator|.
name|setHttpVerbs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|partnerAddress
init|=
literal|"/partners/balance/*"
decl_stmt|;
name|uris
operator|.
name|add
argument_list|(
name|partnerAddress
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setUris
argument_list|(
name|uris
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"create_balance"
operator|.
name|equals
argument_list|(
name|requestedScope
argument_list|)
condition|)
block|{
name|OAuthPermission
name|permission
init|=
operator|new
name|OAuthPermission
argument_list|()
decl_stmt|;
name|permission
operator|.
name|setHttpVerbs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"POST"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|partnerAddress
init|=
literal|"/partners/balance/*"
decl_stmt|;
name|uris
operator|.
name|add
argument_list|(
name|partnerAddress
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setUris
argument_list|(
name|uris
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"read_data"
operator|.
name|equals
argument_list|(
name|requestedScope
argument_list|)
condition|)
block|{
name|OAuthPermission
name|permission
init|=
operator|new
name|OAuthPermission
argument_list|()
decl_stmt|;
name|permission
operator|.
name|setHttpVerbs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|partnerAddress
init|=
literal|"/partners/data/*"
decl_stmt|;
name|uris
operator|.
name|add
argument_list|(
name|partnerAddress
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setUris
argument_list|(
name|uris
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|OAuthServiceException
argument_list|(
literal|"invalid_scope"
argument_list|)
throw|;
block|}
block|}
return|return
name|permissions
return|;
block|}
block|}
end_class

end_unit

