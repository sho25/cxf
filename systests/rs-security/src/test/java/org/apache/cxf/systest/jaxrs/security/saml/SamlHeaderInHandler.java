begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|SequenceInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|SamlHeaderInHandler
extends|extends
name|AbstractSamlInHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SAML_AUTH
init|=
literal|"SAML"
decl_stmt|;
annotation|@
name|Context
specifier|private
name|HttpHeaders
name|headers
decl_stmt|;
specifier|public
name|Response
name|handleRequest
parameter_list|(
name|Message
name|message
parameter_list|,
name|ClassResourceInfo
name|resourceClass
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
operator|!
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
name|SAML_AUTH
argument_list|)
condition|)
block|{
name|throwFault
argument_list|(
literal|"Authorization header must be available and use SAML profile"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|parts
init|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|throwFault
argument_list|(
literal|"Authorization header is malformed"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|validateToken
argument_list|(
name|message
argument_list|,
name|decodeAndInflateToken
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Base64Exception
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Base64 decoding has failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataFormatException
name|ex
parameter_list|)
block|{
name|throwFault
argument_list|(
literal|"Encoded assertion can not be inflated"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|InputStream
name|decodeAndInflateToken
parameter_list|(
name|String
name|encodedToken
parameter_list|)
throws|throws
name|DataFormatException
throws|,
name|Base64Exception
block|{
name|byte
index|[]
name|deflatedToken
init|=
name|Base64Utility
operator|.
name|decode
argument_list|(
name|encodedToken
argument_list|)
decl_stmt|;
name|Inflater
name|inflater
init|=
operator|new
name|Inflater
argument_list|()
decl_stmt|;
name|inflater
operator|.
name|setInput
argument_list|(
name|deflatedToken
argument_list|)
expr_stmt|;
name|byte
index|[]
name|input
init|=
operator|new
name|byte
index|[
name|deflatedToken
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|int
name|inflatedLen
init|=
literal|0
decl_stmt|;
name|int
name|inputLen
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|inflatedToken
init|=
name|input
decl_stmt|;
while|while
condition|(
operator|!
name|inflater
operator|.
name|finished
argument_list|()
condition|)
block|{
name|inputLen
operator|=
name|inflater
operator|.
name|inflate
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inflater
operator|.
name|finished
argument_list|()
condition|)
block|{
name|inflatedToken
operator|=
operator|new
name|byte
index|[
name|input
operator|.
name|length
operator|+
name|inflatedLen
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|input
argument_list|,
literal|0
argument_list|,
name|inflatedToken
argument_list|,
name|inflatedLen
argument_list|,
name|inputLen
argument_list|)
expr_stmt|;
name|inflatedLen
operator|+=
name|inputLen
expr_stmt|;
block|}
block|}
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|input
argument_list|,
literal|0
argument_list|,
name|inputLen
argument_list|)
decl_stmt|;
if|if
condition|(
name|inflatedToken
operator|!=
name|input
condition|)
block|{
name|is
operator|=
operator|new
name|SequenceInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|inflatedToken
argument_list|,
literal|0
argument_list|,
name|inflatedLen
argument_list|)
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
return|return
name|is
return|;
block|}
block|}
end_class

end_unit

