begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oidc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ResponseProcessingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jws
operator|.
name|JwsJwtCompactProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtClaims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|jose
operator|.
name|jwt
operator|.
name|JwtToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuthAuthorizationData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|common
operator|.
name|IdToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|common
operator|.
name|UserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuth2TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|OAuth2TestUtils
operator|.
name|AuthorizationCodeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusTestServerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Some negative tests for OpenID Connect. The tests are run multiple times with different OAuthDataProvider  * implementations:  * a) JCACHE_PORT - JCache  * b) JWT_JCACHE_PORT - JCache with useJwtFormatForAccessTokens enabled  * c) JPA_PORT - JPA provider  * d) JWT_NON_PERSIST_JCACHE_PORT-  JCache with useJwtFormatForAccessTokens + !persistJwtEncoding  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|OIDCNegativeTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|JCACHE_PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-negative-oidc-jcache"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|JWT_JCACHE_PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-negative-oidc-jcache-jwt"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|JPA_PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-negative-oidc-jpa"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|JWT_NON_PERSIST_JCACHE_PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
literal|"jaxrs-negative-oidc-jcache-jwt-non-persist"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|port
decl_stmt|;
specifier|public
name|OIDCNegativeTest
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|OIDCNegativeServerJCache
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|OIDCNegativeServerJCacheJWT
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|OIDCNegativeServerJPA
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Server failed to launch"
argument_list|,
comment|// run the server in the same process
comment|// set this to false to fork
name|launchServer
argument_list|(
name|OIDCNegativeServerJCacheJWTNonPersist
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityTestUtil
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|JCACHE_PORT
argument_list|,
name|JWT_JCACHE_PORT
argument_list|,
name|JPA_PORT
argument_list|,
name|JWT_NON_PERSIST_JCACHE_PORT
argument_list|)
return|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testImplicitFlowPromptNone
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Save the Cookie for the second request...
name|WebClient
operator|.
name|getConfig
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"redirect_uri"
argument_list|,
literal|"http://www.blah.apache.org"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"scope"
argument_list|,
literal|"openid"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"response_type"
argument_list|,
literal|"id_token"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"nonce"
argument_list|,
literal|"1234565635"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"prompt"
argument_list|,
literal|"none login"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"authorize-implicit/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|OAuthAuthorizationData
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a bad prompt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
specifier|public
name|void
name|testImplicitFlowMaxAge
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Save the Cookie for the second request...
name|WebClient
operator|.
name|getConfig
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"redirect_uri"
argument_list|,
literal|"http://www.blah.apache.org"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"scope"
argument_list|,
literal|"openid"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"response_type"
argument_list|,
literal|"id_token"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"nonce"
argument_list|,
literal|"1234565635"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"max_age"
argument_list|,
literal|"300"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"authorize-implicit/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|OAuthAuthorizationData
name|authzData
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|OAuthAuthorizationData
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Now call "decision" to get the access token
name|client
operator|.
name|path
argument_list|(
literal|"decision"
argument_list|)
expr_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"session_authenticity_token"
argument_list|,
name|authzData
operator|.
name|getAuthenticityToken
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
name|authzData
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"redirect_uri"
argument_list|,
name|authzData
operator|.
name|getRedirectUri
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"scope"
argument_list|,
name|authzData
operator|.
name|getProposedScope
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authzData
operator|.
name|getResponseType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|param
argument_list|(
literal|"response_type"
argument_list|,
name|authzData
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|authzData
operator|.
name|getNonce
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|param
argument_list|(
literal|"nonce"
argument_list|,
name|authzData
operator|.
name|getNonce
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|form
operator|.
name|param
argument_list|(
literal|"oauthDecision"
argument_list|,
literal|"allow"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
comment|// Check IdToken
name|String
name|idToken
init|=
name|OAuth2TestUtils
operator|.
name|getSubstring
argument_list|(
name|location
argument_list|,
literal|"id_token"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|idToken
argument_list|)
expr_stmt|;
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|idToken
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getClaim
argument_list|(
name|IdToken
operator|.
name|AUTH_TIME_CLAIM
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testImplicitFlowNoNonce
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Save the Cookie for the second request...
name|WebClient
operator|.
name|getConfig
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"redirect_uri"
argument_list|,
literal|"http://www.blah.apache.org"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"scope"
argument_list|,
literal|"openid"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"response_type"
argument_list|,
literal|"id_token"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"authorize-implicit/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|response
operator|.
name|readEntity
argument_list|(
name|OAuthAuthorizationData
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on no nonce"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// Add a nonce and it should succeed
name|client
operator|.
name|query
argument_list|(
literal|"nonce"
argument_list|,
literal|"1234565635"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|()
expr_stmt|;
name|response
operator|.
name|readEntity
argument_list|(
name|OAuthAuthorizationData
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testImplicitFlowNoATHash
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCFlowTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Save the Cookie for the second request...
name|WebClient
operator|.
name|getConfig
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// Get Access Token
name|client
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"redirect_uri"
argument_list|,
literal|"http://www.blah.apache.org"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"scope"
argument_list|,
literal|"openid"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"response_type"
argument_list|,
literal|"id_token"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"nonce"
argument_list|,
literal|"1234565635"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
literal|"max_age"
argument_list|,
literal|"300"
argument_list|)
expr_stmt|;
name|client
operator|.
name|path
argument_list|(
literal|"authorize-implicit/"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|()
decl_stmt|;
name|OAuthAuthorizationData
name|authzData
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|OAuthAuthorizationData
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Now call "decision" to get the access token
name|client
operator|.
name|path
argument_list|(
literal|"decision"
argument_list|)
expr_stmt|;
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"session_authenticity_token"
argument_list|,
name|authzData
operator|.
name|getAuthenticityToken
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
name|authzData
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"redirect_uri"
argument_list|,
name|authzData
operator|.
name|getRedirectUri
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"scope"
argument_list|,
name|authzData
operator|.
name|getProposedScope
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authzData
operator|.
name|getResponseType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|param
argument_list|(
literal|"response_type"
argument_list|,
name|authzData
operator|.
name|getResponseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|authzData
operator|.
name|getNonce
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|param
argument_list|(
literal|"nonce"
argument_list|,
name|authzData
operator|.
name|getNonce
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|form
operator|.
name|param
argument_list|(
literal|"oauthDecision"
argument_list|,
literal|"allow"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
comment|// Check IdToken
name|String
name|idToken
init|=
name|OAuth2TestUtils
operator|.
name|getSubstring
argument_list|(
name|location
argument_list|,
literal|"id_token"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|idToken
argument_list|)
expr_stmt|;
name|JwsJwtCompactConsumer
name|jwtConsumer
init|=
operator|new
name|JwsJwtCompactConsumer
argument_list|(
name|idToken
argument_list|)
decl_stmt|;
name|JwtToken
name|jwt
init|=
name|jwtConsumer
operator|.
name|getJwtToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|jwt
operator|.
name|getClaims
argument_list|()
operator|.
name|getClaim
argument_list|(
name|IdToken
operator|.
name|ACCESS_TOKEN_HASH_CLAIM
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testJWTRequestNonmatchingResponseType
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/unsignedjwtservices/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Save the Cookie for the second request...
name|WebClient
operator|.
name|getConfig
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|JwtClaims
name|claims
init|=
operator|new
name|JwtClaims
argument_list|()
decl_stmt|;
name|claims
operator|.
name|setIssuer
argument_list|(
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setIssuedAt
argument_list|(
name|Instant
operator|.
name|now
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setAudiences
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/unsignedjwtservices/"
argument_list|)
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setProperty
argument_list|(
literal|"response_type"
argument_list|,
literal|"token"
argument_list|)
expr_stmt|;
name|JwsHeaders
name|headers
init|=
operator|new
name|JwsHeaders
argument_list|()
decl_stmt|;
name|headers
operator|.
name|setAlgorithm
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
name|JwtToken
name|token
init|=
operator|new
name|JwtToken
argument_list|(
name|headers
argument_list|,
name|claims
argument_list|)
decl_stmt|;
name|JwsJwtCompactProducer
name|jws
init|=
operator|new
name|JwsJwtCompactProducer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|String
name|request
init|=
name|jws
operator|.
name|getSignedEncodedJws
argument_list|()
decl_stmt|;
name|AuthorizationCodeParameters
name|parameters
init|=
operator|new
name|AuthorizationCodeParameters
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|setConsumerId
argument_list|(
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setScope
argument_list|(
literal|"openid"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setResponseType
argument_list|(
literal|"code"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setPath
argument_list|(
literal|"authorize/"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Get Authorization Code
try|try
block|{
name|OAuth2TestUtils
operator|.
name|getLocation
argument_list|(
name|client
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a non-matching response_type"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResponseProcessingException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testJWTRequestNonmatchingClientId
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|OIDCNegativeTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/unsignedjwtservices/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Save the Cookie for the second request...
name|WebClient
operator|.
name|getConfig
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|JwtClaims
name|claims
init|=
operator|new
name|JwtClaims
argument_list|()
decl_stmt|;
name|claims
operator|.
name|setIssuer
argument_list|(
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setIssuedAt
argument_list|(
name|Instant
operator|.
name|now
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setAudiences
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/unsignedjwtservices/"
argument_list|)
argument_list|)
expr_stmt|;
name|claims
operator|.
name|setProperty
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id2"
argument_list|)
expr_stmt|;
name|JwsHeaders
name|headers
init|=
operator|new
name|JwsHeaders
argument_list|()
decl_stmt|;
name|headers
operator|.
name|setAlgorithm
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
name|JwtToken
name|token
init|=
operator|new
name|JwtToken
argument_list|(
name|headers
argument_list|,
name|claims
argument_list|)
decl_stmt|;
name|JwsJwtCompactProducer
name|jws
init|=
operator|new
name|JwsJwtCompactProducer
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|String
name|request
init|=
name|jws
operator|.
name|getSignedEncodedJws
argument_list|()
decl_stmt|;
name|AuthorizationCodeParameters
name|parameters
init|=
operator|new
name|AuthorizationCodeParameters
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|setConsumerId
argument_list|(
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setScope
argument_list|(
literal|"openid"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setResponseType
argument_list|(
literal|"code"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setPath
argument_list|(
literal|"authorize/"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Get Authorization Code
try|try
block|{
name|OAuth2TestUtils
operator|.
name|getLocation
argument_list|(
name|client
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a non-matching client id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResponseProcessingException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testUserInfoRefreshToken
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|busFile
init|=
name|UserInfoTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"client.xml"
argument_list|)
decl_stmt|;
name|String
name|address
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/services/"
decl_stmt|;
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"alice"
argument_list|,
literal|"security"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Save the Cookie for the second request...
name|WebClient
operator|.
name|getConfig
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// Get Authorization Code
name|String
name|code
init|=
name|OAuth2TestUtils
operator|.
name|getAuthorizationCode
argument_list|(
name|client
argument_list|,
literal|"openid"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|code
argument_list|)
expr_stmt|;
comment|// Now get the access token
name|client
operator|=
name|WebClient
operator|.
name|create
argument_list|(
name|address
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
literal|"consumer-id"
argument_list|,
literal|"this-is-a-secret"
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Save the Cookie for the second request...
name|WebClient
operator|.
name|getConfig
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MAINTAIN_SESSION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|ClientAccessToken
name|accessToken
init|=
name|OAuth2TestUtils
operator|.
name|getAccessTokenWithAuthorizationCode
argument_list|(
name|client
argument_list|,
name|code
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|accessToken
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|oldAccessToken
init|=
name|accessToken
operator|.
name|getTokenKey
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|accessToken
operator|.
name|getApprovedScope
argument_list|()
operator|.
name|contains
argument_list|(
literal|"openid"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|idToken
init|=
name|accessToken
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"id_token"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|idToken
argument_list|)
expr_stmt|;
comment|// Refresh the access token
name|client
operator|.
name|type
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|Form
name|form
init|=
operator|new
name|Form
argument_list|()
decl_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"grant_type"
argument_list|,
literal|"refresh_token"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"refresh_token"
argument_list|,
name|accessToken
operator|.
name|getRefreshToken
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"client_id"
argument_list|,
literal|"consumer-id"
argument_list|)
expr_stmt|;
name|form
operator|.
name|param
argument_list|(
literal|"scope"
argument_list|,
literal|"openid"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|form
argument_list|)
decl_stmt|;
name|accessToken
operator|=
name|response
operator|.
name|readEntity
argument_list|(
name|ClientAccessToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|accessToken
operator|.
name|getTokenKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|accessToken
operator|.
name|getRefreshToken
argument_list|()
argument_list|)
expr_stmt|;
name|accessToken
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"id_token"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|idToken
argument_list|)
expr_stmt|;
name|String
name|newAccessToken
init|=
name|accessToken
operator|.
name|getTokenKey
argument_list|()
decl_stmt|;
comment|// Now test the UserInfoService.
comment|// The old Access Token should fail
name|String
name|userInfoAddress
init|=
literal|"https://localhost:"
operator|+
name|port
operator|+
literal|"/ui/plain/userinfo"
decl_stmt|;
name|WebClient
name|userInfoClient
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|userInfoAddress
argument_list|,
name|OAuth2TestUtils
operator|.
name|setupProviders
argument_list|()
argument_list|,
name|busFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|userInfoClient
operator|.
name|accept
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|userInfoClient
operator|.
name|header
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Bearer "
operator|+
name|oldAccessToken
argument_list|)
expr_stmt|;
name|Response
name|serviceResponse
init|=
name|userInfoClient
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|serviceResponse
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|401
argument_list|)
expr_stmt|;
comment|// The refreshed Access Token should work
name|userInfoClient
operator|.
name|replaceHeader
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Bearer "
operator|+
name|newAccessToken
argument_list|)
expr_stmt|;
name|serviceResponse
operator|=
name|userInfoClient
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|serviceResponse
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|UserInfo
name|userInfo
init|=
name|serviceResponse
operator|.
name|readEntity
argument_list|(
name|UserInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|userInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alice"
argument_list|,
name|userInfo
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"consumer-id"
argument_list|,
name|userInfo
operator|.
name|getAudience
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Server implementations
comment|//
specifier|public
specifier|static
class|class
name|OIDCNegativeServerJCache
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|OIDCNegativeServerJCache
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"oidc-negative-server-jcache.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|OIDCNegativeServerJCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|OIDCNegativeServerJCacheJWT
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|OIDCNegativeServerJCacheJWT
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"oidc-negative-server-jcache-jwt.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|OIDCNegativeServerJCacheJWT
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|OIDCNegativeServerJPA
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|OIDCNegativeServerJPA
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"oidc-negative-server-jpa.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|OIDCNegativeServerJPA
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|OIDCNegativeServerJCacheJWTNonPersist
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|private
specifier|static
specifier|final
name|URL
name|SERVER_CONFIG_FILE
init|=
name|OIDCNegativeServerJCacheJWTNonPersist
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"oidc-negative-server-jcache-jwt-non-persist.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|Bus
name|springBus
init|=
name|bf
operator|.
name|createBus
argument_list|(
name|SERVER_CONFIG_FILE
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
name|setBus
argument_list|(
name|springBus
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|OIDCNegativeServerJCacheJWTNonPersist
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

