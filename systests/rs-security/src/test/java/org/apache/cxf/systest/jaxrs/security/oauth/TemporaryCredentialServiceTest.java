begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|security
operator|.
name|oauth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuth
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuthException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuthMessage
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|ParameterStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TemporaryCredentialServiceTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TEMPORARY_CREDENTIALS_URL
init|=
literal|"/a/oauth/initiate"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HOST
init|=
literal|"http://localhost:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|TemporaryCredentialServiceTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|OAuthServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testGetTemporaryCredentialsURIQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_CALLBACK
argument_list|,
name|OAuthTestUtils
operator|.
name|CALLBACK
argument_list|)
expr_stmt|;
comment|//check all parameter transmissions
for|for
control|(
name|ParameterStyle
name|style
range|:
name|ParameterStyle
operator|.
name|values
argument_list|()
control|)
block|{
comment|//for all signing methods
for|for
control|(
name|String
name|signMethod
range|:
name|OAuthTestUtils
operator|.
name|SIGN_METHOD
control|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Preparing request with parameter style: {0} and signature method: {1}"
argument_list|,
operator|new
name|String
index|[]
block|{
name|style
operator|.
name|toString
argument_list|()
block|,
name|signMethod
block|}
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_SIGNATURE_METHOD
argument_list|,
name|signMethod
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_NONCE
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_TIMESTAMP
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_CONSUMER_KEY
argument_list|,
name|OAuthTestUtils
operator|.
name|CLIENT_ID
argument_list|)
expr_stmt|;
name|OAuthMessage
name|message
init|=
name|invokeRequestToken
argument_list|(
name|parameters
argument_list|,
name|style
argument_list|,
name|OAuthServer
operator|.
name|PORT
argument_list|)
decl_stmt|;
comment|//test response ok
name|boolean
name|isFormEncoded
init|=
name|OAuth
operator|.
name|isFormEncoded
argument_list|(
name|message
operator|.
name|getBodyType
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isFormEncoded
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OAuth
operator|.
name|Parameter
argument_list|>
name|responseParams
init|=
name|OAuthTestUtils
operator|.
name|getResponseParams
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|String
name|wwwHeader
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|WWW_AUTHENTICATE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|wwwHeader
argument_list|)
expr_stmt|;
name|String
name|callbacConf
init|=
name|OAuthTestUtils
operator|.
name|findOAuthParameter
argument_list|(
name|responseParams
argument_list|,
name|OAuth
operator|.
name|OAUTH_CALLBACK_CONFIRMED
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|callbacConf
argument_list|)
expr_stmt|;
name|String
name|oauthToken
init|=
name|OAuthTestUtils
operator|.
name|findOAuthParameter
argument_list|(
name|responseParams
argument_list|,
name|OAuth
operator|.
name|OAUTH_TOKEN
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|oauthToken
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tokenSecret
init|=
name|OAuthTestUtils
operator|.
name|findOAuthParameter
argument_list|(
name|responseParams
argument_list|,
name|OAuth
operator|.
name|OAUTH_TOKEN_SECRET
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tokenSecret
argument_list|)
argument_list|)
expr_stmt|;
comment|//test wrong client id
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_CONSUMER_KEY
argument_list|,
literal|"wrong"
argument_list|)
expr_stmt|;
name|message
operator|=
name|invokeRequestToken
argument_list|(
name|parameters
argument_list|,
name|style
argument_list|,
name|OAuthServer
operator|.
name|PORT
argument_list|)
expr_stmt|;
name|wwwHeader
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|WWW_AUTHENTICATE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OAuth
operator|.
name|Parameter
argument_list|>
name|list
init|=
name|OAuthMessage
operator|.
name|decodeAuthorization
argument_list|(
name|wwwHeader
argument_list|)
decl_stmt|;
name|String
name|oauthProblem
init|=
name|OAuthTestUtils
operator|.
name|findOAuthParameter
argument_list|(
name|list
argument_list|,
literal|"oauth_problem"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OAuth
operator|.
name|Problems
operator|.
name|CONSUMER_KEY_UNKNOWN
argument_list|,
name|oauthProblem
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|OAuthMessage
name|invokeRequestToken
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|,
name|ParameterStyle
name|style
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|OAuthException
block|{
name|OAuthMessage
name|message
decl_stmt|;
name|String
name|uri
init|=
name|HOST
operator|+
name|port
operator|+
name|TEMPORARY_CREDENTIALS_URL
decl_stmt|;
name|message
operator|=
name|OAuthTestUtils
operator|.
name|access
argument_list|(
name|uri
argument_list|,
name|OAuthMessage
operator|.
name|POST
argument_list|,
name|parameters
argument_list|,
name|style
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

