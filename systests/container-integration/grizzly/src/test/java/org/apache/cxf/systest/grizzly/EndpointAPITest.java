begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|grizzly
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|MTOMFeature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|spi
operator|.
name|http
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jvnet
operator|.
name|jax_ws_commons
operator|.
name|transport
operator|.
name|grizzly_httpspi
operator|.
name|GrizzlyHttpContextFactory
import|;
end_import

begin_class
specifier|public
class|class
name|EndpointAPITest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
name|int
name|counter
decl_stmt|;
specifier|private
specifier|static
name|int
name|currentPort
decl_stmt|;
specifier|private
name|com
operator|.
name|sun
operator|.
name|grizzly
operator|.
name|http
operator|.
name|embed
operator|.
name|GrizzlyWebServer
name|server
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|currentPort
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|EndpointAPITest
operator|.
name|class
argument_list|,
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|com
operator|.
name|sun
operator|.
name|grizzly
operator|.
name|http
operator|.
name|embed
operator|.
name|GrizzlyWebServer
argument_list|(
name|currentPort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contextPath
init|=
literal|"/ctxt"
decl_stmt|;
name|String
name|path
init|=
literal|"/echo"
decl_stmt|;
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|currentPort
operator|+
name|contextPath
operator|+
name|path
decl_stmt|;
name|HttpContext
name|context
init|=
name|GrizzlyHttpContextFactory
operator|.
name|createHttpContext
argument_list|(
name|server
argument_list|,
name|contextPath
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|Endpoint
operator|.
name|create
argument_list|(
operator|new
name|EndpointBean
argument_list|()
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|publish
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Use grizzly HTTP context for publishing
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|invokeEndpoint
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplePublishSameAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|contextPath
init|=
literal|"/ctxt"
decl_stmt|;
name|String
name|path
init|=
literal|"/echo"
decl_stmt|;
comment|//need to use the same HttpContext, otherwise Grizzly get confused
name|HttpContext
name|ctx
init|=
name|GrizzlyHttpContextFactory
operator|.
name|createHttpContext
argument_list|(
name|server
argument_list|,
name|contextPath
argument_list|,
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|String
name|address
init|=
literal|"http://localhost:"
operator|+
name|currentPort
operator|+
name|contextPath
operator|+
name|path
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|Endpoint
operator|.
name|create
argument_list|(
operator|new
name|EndpointBean
argument_list|()
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|publish
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
comment|// Use grizzly HTTP context for publishing
name|invokeEndpoint
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleEndpointsSameContext
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|contextPath
init|=
literal|"/ctxt"
decl_stmt|;
name|String
name|path
init|=
literal|"/echo"
decl_stmt|;
name|int
name|k
init|=
literal|3
decl_stmt|;
name|Endpoint
index|[]
name|endpoints
init|=
operator|new
name|Endpoint
index|[
name|k
index|]
decl_stmt|;
name|HttpContext
index|[]
name|contexts
init|=
operator|new
name|HttpContext
index|[
name|k
index|]
decl_stmt|;
name|String
index|[]
name|addresses
init|=
operator|new
name|String
index|[
name|k
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|addresses
index|[
name|i
index|]
operator|=
literal|"http://localhost:"
operator|+
name|currentPort
operator|+
name|contextPath
operator|+
name|path
operator|+
name|i
expr_stmt|;
name|contexts
index|[
name|i
index|]
operator|=
name|GrizzlyHttpContextFactory
operator|.
name|createHttpContext
argument_list|(
name|server
argument_list|,
name|contextPath
argument_list|,
name|path
operator|+
name|i
argument_list|)
expr_stmt|;
name|endpoints
index|[
name|i
index|]
operator|=
name|Endpoint
operator|.
name|create
argument_list|(
operator|new
name|EndpointBean
argument_list|()
argument_list|)
expr_stmt|;
name|endpoints
index|[
name|i
index|]
operator|.
name|publish
argument_list|(
name|contexts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|invokeEndpoint
argument_list|(
name|addresses
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|endpoints
index|[
name|i
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleEndpointsDifferentContexts
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|contextPath
init|=
literal|"/ctxt"
decl_stmt|;
name|String
name|path
init|=
literal|"/echo"
decl_stmt|;
name|int
name|k
init|=
literal|3
decl_stmt|;
name|Endpoint
index|[]
name|endpoints
init|=
operator|new
name|Endpoint
index|[
name|k
index|]
decl_stmt|;
name|HttpContext
index|[]
name|contexts
init|=
operator|new
name|HttpContext
index|[
name|k
index|]
decl_stmt|;
name|String
index|[]
name|addresses
init|=
operator|new
name|String
index|[
name|k
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|addresses
index|[
name|i
index|]
operator|=
literal|"http://localhost:"
operator|+
name|currentPort
operator|+
name|contextPath
operator|+
name|i
operator|+
name|path
expr_stmt|;
name|contexts
index|[
name|i
index|]
operator|=
name|GrizzlyHttpContextFactory
operator|.
name|createHttpContext
argument_list|(
name|server
argument_list|,
name|contextPath
operator|+
name|i
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|endpoints
index|[
name|i
index|]
operator|=
name|Endpoint
operator|.
name|create
argument_list|(
operator|new
name|EndpointBean
argument_list|()
argument_list|)
expr_stmt|;
name|endpoints
index|[
name|i
index|]
operator|.
name|publish
argument_list|(
name|contexts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|invokeEndpoint
argument_list|(
name|addresses
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|endpoints
index|[
name|i
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|invokeEndpoint
parameter_list|(
name|String
name|publishURL
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|wsdlURL
init|=
operator|new
name|URL
argument_list|(
name|publishURL
operator|+
literal|"?wsdl"
argument_list|)
decl_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
literal|"http://org.apache.cxf/jaxws/endpoint/"
argument_list|,
literal|"EndpointService"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|wsdlURL
argument_list|,
name|qname
argument_list|)
decl_stmt|;
name|checkBasicInvocations
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|checkMTOMInvocation
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkBasicInvocations
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|EndpointInterface
name|port
init|=
operator|(
name|EndpointInterface
operator|)
name|service
operator|.
name|getPort
argument_list|(
name|EndpointInterface
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|helloWorld
init|=
literal|"Hello world!"
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|port
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|retObj
init|=
name|port
operator|.
name|echo
argument_list|(
name|helloWorld
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|helloWorld
argument_list|,
name|retObj
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|port
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|port
operator|.
name|echo
argument_list|(
name|helloWorld
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|port
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|port
operator|.
name|getException
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Ooops"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkMTOMInvocation
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|DataSource
name|ds
init|=
operator|new
name|DataSource
argument_list|()
block|{
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"text/plain"
return|;
block|}
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"some string"
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"none"
return|;
block|}
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|EndpointInterface
name|port
init|=
operator|(
name|EndpointInterface
operator|)
name|service
operator|.
name|getPort
argument_list|(
name|EndpointInterface
operator|.
name|class
argument_list|,
operator|new
name|MTOMFeature
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|DataHandler
name|dh
init|=
operator|new
name|DataHandler
argument_list|(
name|ds
argument_list|)
decl_stmt|;
name|DHResponse
name|response
init|=
name|port
operator|.
name|echoDataHandler
argument_list|(
operator|new
name|DHRequest
argument_list|(
name|dh
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Object
name|content
init|=
name|response
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server data"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|String
name|contentType
init|=
name|response
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

