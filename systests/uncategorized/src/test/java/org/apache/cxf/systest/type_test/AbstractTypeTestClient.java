begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|type_test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|doc
operator|.
name|TypeTestPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|rpc
operator|.
name|SOAPService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|AnyURIEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ColourEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DecimalEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|NMTokenEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|NumberEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|StringEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTypeTestClient
extends|extends
name|AbstractBusClientServerTestBase
implements|implements
name|TypeTestTester
block|{
specifier|protected
specifier|static
name|TypeTestPortType
name|docClient
decl_stmt|;
specifier|protected
specifier|static
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|xml
operator|.
name|TypeTestPortType
name|xmlClient
decl_stmt|;
specifier|protected
specifier|static
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|rpc
operator|.
name|TypeTestPortType
name|rpcClient
decl_stmt|;
specifier|protected
specifier|static
name|boolean
name|testDocLiteral
decl_stmt|;
specifier|protected
specifier|static
name|boolean
name|testXMLBinding
decl_stmt|;
specifier|protected
name|boolean
name|perfTestOnly
decl_stmt|;
specifier|public
name|void
name|setPerformanceTestOnly
parameter_list|()
block|{
name|perfTestOnly
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|shouldRunTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|//the validator in ibm doesn't like this type.
return|return
operator|!
operator|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
operator|&&
literal|"GMonth"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|initClient
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|,
name|QName
name|serviceName
parameter_list|,
name|QName
name|portName
parameter_list|,
name|String
name|wsdlPath
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|wsdlLocation
init|=
name|clz
operator|.
name|getResource
argument_list|(
name|wsdlPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not load wsdl "
operator|+
name|wsdlPath
argument_list|,
name|wsdlLocation
argument_list|)
expr_stmt|;
name|testDocLiteral
operator|=
name|wsdlPath
operator|.
name|contains
argument_list|(
literal|"doclit"
argument_list|)
operator|||
name|wsdlPath
operator|.
name|contains
argument_list|(
literal|"-corba"
argument_list|)
expr_stmt|;
name|testXMLBinding
operator|=
name|wsdlPath
operator|.
name|contains
argument_list|(
literal|"_xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|xml
operator|.
name|XMLService
name|xmlService
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|xml
operator|.
name|XMLService
argument_list|(
name|wsdlLocation
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|xmlClient
operator|=
name|xmlService
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|xml
operator|.
name|TypeTestPortType
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not create xmlClient"
argument_list|,
name|xmlClient
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|doc
operator|.
name|SOAPService
name|docService
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|doc
operator|.
name|SOAPService
argument_list|(
name|wsdlLocation
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|docClient
operator|=
name|docService
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|doc
operator|.
name|TypeTestPortType
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not create docClient"
argument_list|,
name|docClient
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SOAPService
name|rpcService
init|=
operator|new
name|SOAPService
argument_list|(
name|wsdlLocation
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|rpcClient
operator|=
name|rpcService
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|rpc
operator|.
name|TypeTestPortType
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not create rpcClient"
argument_list|,
name|rpcClient
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|equalsDate
parameter_list|(
name|XMLGregorianCalendar
name|orig
parameter_list|,
name|XMLGregorianCalendar
name|actual
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|orig
operator|.
name|getYear
argument_list|()
operator|==
name|actual
operator|.
name|getYear
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getMonth
argument_list|()
operator|==
name|actual
operator|.
name|getMonth
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getDay
argument_list|()
operator|==
name|actual
operator|.
name|getDay
argument_list|()
operator|)
operator|&&
operator|(
name|actual
operator|.
name|getHour
argument_list|()
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
operator|&&
operator|(
name|actual
operator|.
name|getMinute
argument_list|()
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
operator|&&
operator|(
name|actual
operator|.
name|getSecond
argument_list|()
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
operator|&&
operator|(
name|actual
operator|.
name|getMillisecond
argument_list|()
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
condition|)
block|{
name|result
operator|=
name|orig
operator|.
name|getTimezone
argument_list|()
operator|==
name|actual
operator|.
name|getTimezone
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|boolean
name|equalsTime
parameter_list|(
name|XMLGregorianCalendar
name|orig
parameter_list|,
name|XMLGregorianCalendar
name|actual
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|orig
operator|.
name|getHour
argument_list|()
operator|==
name|actual
operator|.
name|getHour
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getMinute
argument_list|()
operator|==
name|actual
operator|.
name|getMinute
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getSecond
argument_list|()
operator|==
name|actual
operator|.
name|getSecond
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getMillisecond
argument_list|()
operator|==
name|actual
operator|.
name|getMillisecond
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getTimezone
argument_list|()
operator|==
name|actual
operator|.
name|getTimezone
argument_list|()
operator|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|boolean
name|equalsDateTime
parameter_list|(
name|XMLGregorianCalendar
name|orig
parameter_list|,
name|XMLGregorianCalendar
name|actual
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|orig
operator|.
name|getYear
argument_list|()
operator|==
name|actual
operator|.
name|getYear
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getMonth
argument_list|()
operator|==
name|actual
operator|.
name|getMonth
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getDay
argument_list|()
operator|==
name|actual
operator|.
name|getDay
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getHour
argument_list|()
operator|==
name|actual
operator|.
name|getHour
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getMinute
argument_list|()
operator|==
name|actual
operator|.
name|getMinute
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getSecond
argument_list|()
operator|==
name|actual
operator|.
name|getSecond
argument_list|()
operator|)
operator|&&
operator|(
name|orig
operator|.
name|getMillisecond
argument_list|()
operator|==
name|actual
operator|.
name|getMillisecond
argument_list|()
operator|)
condition|)
block|{
name|result
operator|=
name|orig
operator|.
name|getTimezone
argument_list|()
operator|==
name|actual
operator|.
name|getTimezone
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVoid
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Void"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|docClient
operator|.
name|testVoid
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|xmlClient
operator|.
name|testVoid
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|testVoid
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneway
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Oneway"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|x
init|=
literal|"hello"
decl_stmt|;
name|String
name|y
init|=
literal|"oneway"
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|docClient
operator|.
name|testOneway
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|xmlClient
operator|.
name|testOneway
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|testOneway
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByte
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Byte"
argument_list|)
condition|)
block|{
return|return;
block|}
name|byte
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|0
block|,
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
literal|0
block|}
block|,
block|{
name|Byte
operator|.
name|MIN_VALUE
block|,
name|Byte
operator|.
name|MAX_VALUE
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Byte
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Byte
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Byte
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Byte
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Byte
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Byte
argument_list|>
argument_list|()
decl_stmt|;
name|byte
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testByte
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testByte
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testByte
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testByte(): Incorrect value for inout param"
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testByte(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testByte(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShort
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Short"
argument_list|)
condition|)
block|{
return|return;
block|}
name|short
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|0
block|,
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
literal|0
block|}
block|,
block|{
name|Short
operator|.
name|MIN_VALUE
block|,
name|Short
operator|.
name|MAX_VALUE
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|short
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Short
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Short
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Short
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Short
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Short
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Short
argument_list|>
argument_list|()
decl_stmt|;
name|short
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testShort
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testShort
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testShort
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testShort(): Incorrect value for inout param"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testShort(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testShort(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsignedShort
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"UnsignedShort"
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|1
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
name|Short
operator|.
name|MAX_VALUE
operator|*
literal|2
operator|+
literal|1
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Integer
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Integer
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Integer
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testUnsignedShort
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testUnsignedShort
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testUnsignedShort
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testUnsignedShort(): Incorrect value for inout param"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnsignedShort(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnsignedShort(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInt
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Int"
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|5
block|,
literal|10
block|}
block|,
block|{
operator|-
literal|10
block|,
literal|50
block|}
block|,
block|{
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Integer
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Integer
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Integer
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testInt
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testInt
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testInt
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testInt(): Incorrect value for inout param"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testInt(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testInt(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsignedInt
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"UnsignedInt"
argument_list|)
condition|)
block|{
return|return;
block|}
name|long
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|0
block|,
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|*
literal|2
operator|+
literal|1
block|}
block|,
block|{
literal|11
block|,
literal|20
block|}
block|,
block|{
literal|1
block|,
literal|0
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|long
name|yOrig
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Long
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Long
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Long
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testUnsignedInt
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testUnsignedInt
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testUnsignedInt
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testUnsignedInt(): Incorrect value for inout param"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnsignedInt(): Incorrect value for out param"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|yOrig
argument_list|)
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnsignedInt(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLong
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Long"
argument_list|)
condition|)
block|{
return|return;
block|}
name|long
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|0
block|,
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
literal|0
block|}
block|,
block|{
name|Long
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Long
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Long
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Long
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Long
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Long
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testLong
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testLong
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testLong
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testLong(): Incorrect value for inout param"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testLong(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testLong(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsignedLong
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"UnsignedLong"
argument_list|)
condition|)
block|{
return|return;
block|}
name|BigInteger
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
operator|new
name|BigInteger
argument_list|(
literal|"0"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"1"
argument_list|)
block|}
block|,
block|{
operator|new
name|BigInteger
argument_list|(
literal|"1"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"0"
argument_list|)
block|}
block|,
block|{
operator|new
name|BigInteger
argument_list|(
literal|"0"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|()
decl_stmt|;
name|BigInteger
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testUnsignedLong
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testUnsignedLong
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testUnsignedLong
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testUnsignedLong(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnsignedLong(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnsignedLong(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|float
index|[]
index|[]
name|getTestFloatData
parameter_list|()
block|{
return|return
operator|new
name|float
index|[]
index|[]
block|{
block|{
literal|0.0f
block|,
literal|1.0f
block|}
block|,
block|{
operator|-
literal|1.0f
block|,
operator|(
name|float
operator|)
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|PI
block|}
block|,
block|{
operator|-
literal|100.0f
block|,
literal|100.0f
block|}
block|,
block|{
name|Float
operator|.
name|NEGATIVE_INFINITY
block|,
name|Float
operator|.
name|POSITIVE_INFINITY
block|}
block|, }
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloat
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Float"
argument_list|)
condition|)
block|{
return|return;
block|}
name|float
name|delta
init|=
literal|0.0f
decl_stmt|;
name|float
name|valueSets
index|[]
index|[]
init|=
name|getTestFloatData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|float
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Float
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Float
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Float
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Float
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Float
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|float
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testFloat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testFloat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testFloat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
name|i
operator|+
literal|": testFloat(): Wrong value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|": testFloat(): Wrong value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|": testFloat(): Wrong return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
name|float
name|x
init|=
name|Float
operator|.
name|NaN
decl_stmt|;
name|Holder
argument_list|<
name|Float
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Float
argument_list|>
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Float
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Float
argument_list|>
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Float
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|float
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testFloat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testFloat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testFloat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testFloat(): Incorrect value for inout param"
argument_list|,
name|Float
operator|.
name|isNaN
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testFloat(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testFloat(): Incorrect return value"
argument_list|,
name|Float
operator|.
name|isNaN
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|double
index|[]
index|[]
name|getTestDoubleData
parameter_list|()
block|{
return|return
operator|new
name|double
index|[]
index|[]
block|{
block|{
literal|0.0f
block|,
literal|1.0f
block|}
block|,
block|{
operator|-
literal|1
block|,
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|PI
block|}
block|,
block|{
operator|-
literal|100.0
block|,
literal|100.0
block|}
block|,
block|{
name|Double
operator|.
name|NEGATIVE_INFINITY
block|,
name|Double
operator|.
name|POSITIVE_INFINITY
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Double"
argument_list|)
condition|)
block|{
return|return;
block|}
name|double
name|delta
init|=
literal|0.0d
decl_stmt|;
name|double
name|valueSets
index|[]
index|[]
init|=
name|getTestDoubleData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Double
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Double
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Double
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Double
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Double
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDouble
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDouble
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDouble
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testDouble(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDouble(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDouble(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|x
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
name|Holder
argument_list|<
name|Double
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Double
argument_list|>
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Double
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Double
argument_list|>
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Double
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDouble
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDouble
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDouble
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDouble(): Incorrect value for inout param"
argument_list|,
name|Double
operator|.
name|isNaN
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDouble(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDouble(): Incorrect return value"
argument_list|,
name|Double
operator|.
name|isNaN
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsignedByte
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"UnsignedByte"
argument_list|)
condition|)
block|{
return|return;
block|}
name|short
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|1
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
name|Byte
operator|.
name|MAX_VALUE
operator|*
literal|2
operator|+
literal|1
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|short
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Short
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Short
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Short
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Short
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Short
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Short
argument_list|>
argument_list|()
decl_stmt|;
name|short
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testUnsignedByte
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testUnsignedByte
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testUnsignedByte
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testUnsignedByte(): Incorrect value for inout param"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnsignedByte(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnsignedByte(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBoolean
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Boolean"
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|true
block|,
literal|false
block|}
block|,
block|{
literal|true
block|,
literal|true
block|}
block|,
block|{
literal|false
block|,
literal|true
block|}
block|,
block|{
literal|false
block|,
literal|false
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|Boolean
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Boolean
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Boolean
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testBoolean
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testBoolean
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testBoolean
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testBoolean(): Incorrect value for inout param"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testBoolean(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testBoolean(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testString
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|bufferSize
init|=
literal|1000
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|bufferSize
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer2
init|=
operator|new
name|StringBuilder
argument_list|(
name|bufferSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|bufferSize
condition|;
name|x
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
operator|(
name|x
operator|%
literal|26
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|buffer2
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
operator|(
name|x
operator|%
literal|26
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|"hello"
block|,
literal|"world"
block|}
block|,
block|{
literal|"is pi> 3 ?"
block|,
literal|" is pi< 4\\\""
block|}
block|,
block|{
literal|"<illegal_tag/>"
block|,
literal|""
block|}
block|,
block|{
name|buffer
operator|.
name|toString
argument_list|()
block|,
name|buffer2
operator|.
name|toString
argument_list|()
block|}
block|,
block|{
literal|"jon&marry"
block|,
literal|"marry&john"
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testString
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testString
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testString
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testString(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testString(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testString(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringI18N
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StringI18N"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|"hello"
block|,
name|I18NStrings
operator|.
name|CHINESE_COMPLEX_STRING
block|}
block|,
block|{
literal|"hello"
block|,
name|I18NStrings
operator|.
name|JAP_SIMPLE_STRING
block|}
block|, }
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testString
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testString
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testString
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testStringI18N(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStringI18N(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStringI18N(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQName
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"QName"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|"NoNamespaceService"
block|,
literal|""
block|}
block|,
block|{
literal|"HelloWorldService"
block|,
literal|"http://www.iona.com/services"
block|}
block|,
block|{
name|I18NStrings
operator|.
name|JAP_SIMPLE_STRING
block|,
literal|"http://www.iona.com/iona"
block|}
block|,
block|{
literal|"MyService"
block|,
literal|"http://www.iona.com/iona"
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|x
init|=
operator|new
name|QName
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|QName
name|yOrig
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.iona.com/inoutqname"
argument_list|,
literal|"InOutQName"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|QName
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|QName
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|QName
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|QName
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testQName
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testQName
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testQName
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testQName(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testQName(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testQName(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Revisit When client Fault is ready. Comment should be removed
annotation|@
name|Test
specifier|public
name|void
name|testDate
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Date"
argument_list|)
condition|)
block|{
return|return;
block|}
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
name|datatypeFactory
init|=
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|x
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|()
decl_stmt|;
name|x
operator|.
name|setYear
argument_list|(
literal|1975
argument_list|)
expr_stmt|;
name|x
operator|.
name|setMonth
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|x
operator|.
name|setDay
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|XMLGregorianCalendar
name|yOrig
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setYear
argument_list|(
literal|2004
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setMonth
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setDay
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDate(): Incorrect value for inout param "
operator|+
name|x
operator|+
literal|" != "
operator|+
name|y
operator|.
name|value
argument_list|,
name|equalsDate
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDate(): Incorrect value for out param"
argument_list|,
name|equalsDate
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDate(): Incorrect return value"
argument_list|,
name|equalsDate
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|x
operator|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|()
expr_stmt|;
name|yOrig
operator|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|()
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Expected to catch WebServiceException when calling"
operator|+
literal|" testDate() with uninitialized parameters."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateTime
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DateTime"
argument_list|)
condition|)
block|{
return|return;
block|}
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
name|datatypeFactory
init|=
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|x
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|()
decl_stmt|;
name|x
operator|.
name|setYear
argument_list|(
literal|1975
argument_list|)
expr_stmt|;
name|x
operator|.
name|setMonth
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|x
operator|.
name|setDay
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|x
operator|.
name|setHour
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|x
operator|.
name|setMinute
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|x
operator|.
name|setSecond
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|XMLGregorianCalendar
name|yOrig
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setYear
argument_list|(
literal|2005
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setMonth
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setDay
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setHour
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setMinute
argument_list|(
literal|59
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setSecond
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDateTime
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDateTime
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDateTime
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDateTime(): Incorrect value for inout param"
argument_list|,
name|equalsDateTime
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDateTime(): Incorrect value for out param"
argument_list|,
name|equalsDateTime
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDateTime(): Incorrect return value"
argument_list|,
name|equalsDateTime
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTime
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Time"
argument_list|)
condition|)
block|{
return|return;
block|}
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
name|datatypeFactory
init|=
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|x
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|()
decl_stmt|;
name|x
operator|.
name|setHour
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|x
operator|.
name|setMinute
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|x
operator|.
name|setSecond
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|XMLGregorianCalendar
name|yOrig
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setHour
argument_list|(
literal|22
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setMinute
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setSecond
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setMillisecond
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testTime
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testTime
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testTime
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testTime(): Incorrect value for inout param"
argument_list|,
name|equalsTime
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testTime(): Incorrect value for out param"
argument_list|,
name|equalsTime
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testTime(): Incorrect return value"
argument_list|,
name|equalsTime
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGYear
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"GYear"
argument_list|)
condition|)
block|{
return|return;
block|}
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
name|datatypeFactory
init|=
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|x
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"2004"
argument_list|)
decl_stmt|;
name|XMLGregorianCalendar
name|yOrig
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"2003+05:00"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testGYear
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testGYear
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testGYear
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testGYear(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGYear(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGYear(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGYearMonth
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"GYearMonth"
argument_list|)
condition|)
block|{
return|return;
block|}
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
name|datatypeFactory
init|=
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|x
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"2004-08"
argument_list|)
decl_stmt|;
name|XMLGregorianCalendar
name|yOrig
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"2003-12+05:00"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testGYearMonth
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testGYearMonth
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testGYearMonth
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testGYearMonth(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGYearMonth(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGYearMonth(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGMonth
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"GMonth"
argument_list|)
condition|)
block|{
return|return;
block|}
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
name|datatypeFactory
init|=
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|x
decl_stmt|;
name|XMLGregorianCalendar
name|yOrig
decl_stmt|;
try|try
block|{
name|x
operator|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"--08"
argument_list|)
expr_stmt|;
name|yOrig
operator|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"--12+05:00"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// broken XMLGregorianCalendar impl
name|x
operator|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"--08--"
argument_list|)
expr_stmt|;
name|yOrig
operator|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"--12--+05:00"
argument_list|)
expr_stmt|;
block|}
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testGMonth
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testGMonth
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testGMonth
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testGMonth(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGMonth(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGMonth(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGMonthDay
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"GMonthDay"
argument_list|)
condition|)
block|{
return|return;
block|}
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
name|datatypeFactory
init|=
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|x
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"--08-21"
argument_list|)
decl_stmt|;
name|XMLGregorianCalendar
name|yOrig
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"--12-05+05:00"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testGMonthDay
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testGMonthDay
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testGMonthDay
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testGMonthDay(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGMonthDay(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGMonthDay(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGDay
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"GDay"
argument_list|)
condition|)
block|{
return|return;
block|}
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
name|datatypeFactory
init|=
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|x
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"---21"
argument_list|)
decl_stmt|;
name|XMLGregorianCalendar
name|yOrig
init|=
name|datatypeFactory
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|"---05+05:00"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|XMLGregorianCalendar
argument_list|>
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testGDay
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testGDay
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testGDay
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testGDay(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGDay(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGDay(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDuration
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Duration"
argument_list|)
condition|)
block|{
return|return;
block|}
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
name|datatypeFactory
init|=
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Duration
name|x
init|=
name|datatypeFactory
operator|.
name|newDuration
argument_list|(
literal|"P1Y35DT60M60.500S"
argument_list|)
decl_stmt|;
name|Duration
name|yOrig
init|=
name|datatypeFactory
operator|.
name|newDuration
argument_list|(
literal|"-P2MT24H60S"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Duration
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Duration
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Duration
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Duration
argument_list|>
argument_list|()
decl_stmt|;
name|Duration
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDuration
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDuration
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDuration
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testDuration(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDuration(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDuration(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNormalizedString
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NormalizedString"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|x
init|=
literal|"  normalized string "
decl_stmt|;
name|String
name|yOrig
init|=
literal|"  another normalized  string "
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNormalizedString
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNormalizedString
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNormalizedString
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testNormalizedString(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNormalizedString(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNormalizedString(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToken
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Token"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|x
init|=
literal|"token"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"another token"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testToken
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testToken
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testToken
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testToken(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testToken(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testToken(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLanguage
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Language"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|x
init|=
literal|"abc"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"abc-def"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testLanguage
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testLanguage
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testLanguage
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testLanguage(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testLanguage(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testLanguage(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNMTOKEN
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NMTOKEN"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|x
init|=
literal|"123:abc"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"abc.-_:"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNMTOKEN
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNMTOKEN
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNMTOKEN
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testNMTOKEN(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNMTOKEN(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNMTOKEN(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNMTOKENS
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NMTOKENS"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// The jaxb ri code generation produces different method
comment|// signatures for the NMTOKENS type between using rpc literal
comment|// and doc literal styles.
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|x
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123:abc"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|yOrig
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc.-_:"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|testXMLBinding
condition|?
name|xmlClient
operator|.
name|testNMTOKENS
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|docClient
operator|.
name|testNMTOKENS
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testNMTOKENS(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNMTOKENS(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNMTOKENS(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|x
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|x
index|[
literal|0
index|]
operator|=
literal|"123:abc"
expr_stmt|;
name|String
index|[]
name|yOrig
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|yOrig
index|[
literal|0
index|]
operator|=
literal|"abc.-_:"
expr_stmt|;
name|yOrig
index|[
literal|1
index|]
operator|=
literal|"a"
expr_stmt|;
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|ret
init|=
name|rpcClient
operator|.
name|testNMTOKENS
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testNMTOKENS(): Incorrect value for inout param"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNMTOKENS(): Incorrect value for out param"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNMTOKENS(): Incorrect return value"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testName
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Name"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|x
init|=
literal|"abc:123"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"abc.-_"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testName
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testName
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testName
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testName(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testName(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testName(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNCName
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NCName"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|x
init|=
literal|"abc-123"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"abc.-"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNCName
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNCName
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNCName
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"testNCName(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNCName(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNCName(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimal
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Decimal"
argument_list|)
condition|)
block|{
return|return;
block|}
name|BigDecimal
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"-1234567890.000000"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"1234567890.000000"
argument_list|)
block|}
block|,
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|*
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|+
literal|".000000"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|*
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|+
literal|".000000"
argument_list|)
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|BigDecimal
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|BigDecimal
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigDecimal
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|BigDecimal
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigDecimal
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|BigDecimal
argument_list|>
argument_list|()
decl_stmt|;
name|BigDecimal
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDecimal
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDecimal
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDecimal
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testDecimal(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDecimal(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDecimal(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInteger
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Integer"
argument_list|)
condition|)
block|{
return|return;
block|}
name|BigInteger
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
operator|new
name|BigInteger
argument_list|(
literal|"-1234567890"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"1234567890"
argument_list|)
block|}
block|,
block|{
operator|new
name|BigInteger
argument_list|(
literal|"-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|()
decl_stmt|;
name|BigInteger
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testInteger(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testInteger(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testInteger(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositiveInteger
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"PositiveInteger"
argument_list|)
condition|)
block|{
return|return;
block|}
name|BigInteger
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
operator|new
name|BigInteger
argument_list|(
literal|"1"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"1234567890"
argument_list|)
block|}
block|,
block|{
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|()
decl_stmt|;
name|BigInteger
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testPositiveInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testPositiveInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testPositiveInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testPositiveInteger(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testPositiveInteger(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testPositiveInteger(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonPositiveInteger
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NonPositiveInteger"
argument_list|)
condition|)
block|{
return|return;
block|}
name|BigInteger
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
operator|new
name|BigInteger
argument_list|(
literal|"0"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"-1234567890"
argument_list|)
block|}
block|,
block|{
operator|new
name|BigInteger
argument_list|(
literal|"-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|*
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|*
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|()
decl_stmt|;
name|BigInteger
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNonPositiveInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNonPositiveInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNonPositiveInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testNonPositiveInteger(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNonPositiveInteger(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNonPositiveInteger(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegativeInteger
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NegativeInteger"
argument_list|)
condition|)
block|{
return|return;
block|}
name|BigInteger
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
operator|new
name|BigInteger
argument_list|(
literal|"-1"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"-1234567890"
argument_list|)
block|}
block|,
block|{
operator|new
name|BigInteger
argument_list|(
literal|"-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|*
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|*
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|()
decl_stmt|;
name|BigInteger
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNegativeInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNegativeInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNegativeInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testNegativeInteger(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNegativeInteger(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNegativeInteger(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonNegativeInteger
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NonNegativeInteger"
argument_list|)
condition|)
block|{
return|return;
block|}
name|BigInteger
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
operator|new
name|BigInteger
argument_list|(
literal|"0"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"1234567890"
argument_list|)
block|}
block|,
block|{
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|yOrig
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BigInteger
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|BigInteger
argument_list|>
argument_list|()
decl_stmt|;
name|BigInteger
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNonNegativeInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNonNegativeInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNonNegativeInteger
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testNonNegativeInteger(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNonNegativeInteger(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNonNegativeInteger(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHexBinary
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"HexBinary"
argument_list|)
condition|)
block|{
return|return;
block|}
name|byte
index|[]
name|x
init|=
literal|"hello"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
literal|"goodbye"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|yOriginal
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
literal|"goodbye"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testHexBinary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testHexBinary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testHexBinary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testHexBinary(): Incorrect value for inout param"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHexBinary(): Incorrect value for out param"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|yOriginal
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHexBinary(): Incorrect return value"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBase64Binary
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Base64Binary"
argument_list|)
condition|)
block|{
return|return;
block|}
name|byte
index|[]
name|x
init|=
literal|"hello"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
literal|"goodbye"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|yOriginal
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
literal|"goodbye"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testBase64Binary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testBase64Binary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testBase64Binary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testBase64Binary(): Incorrect value for inout param"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testBase64Binary(): Incorrect value for out param"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|yOriginal
operator|.
name|value
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testBase64Binary(): Incorrect return value"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test uninitialized holder value
try|try
block|{
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|docClient
operator|.
name|testBase64Binary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|xmlClient
operator|.
name|testBase64Binary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|testBase64Binary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Uninitialized Holder for inout parameter should have thrown an error."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore expected //failure.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnyURI
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"AnyURI"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|valueSets
index|[]
index|[]
init|=
block|{
block|{
literal|"file:///root%20%20/-;?&+"
block|,
literal|"file:///w:/test!artix~java*"
block|}
block|,
block|{
literal|"http://iona.com/"
block|,
literal|"file:///z:/mail_iona=com,\'xmlbus\'"
block|}
block|,
block|{
literal|"mailto:windows@systems"
block|,
literal|"file:///"
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|x
init|=
operator|new
name|String
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|yOrig
init|=
operator|new
name|String
argument_list|(
name|valueSets
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testAnyURI
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testAnyURI
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testAnyURI
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testAnyURI(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testAnyURI(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testAnyURI(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColourEnum
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ColourEnum"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|xx
init|=
block|{
literal|"RED"
block|,
literal|"GREEN"
block|,
literal|"BLUE"
block|}
decl_stmt|;
name|String
index|[]
name|yy
init|=
block|{
literal|"GREEN"
block|,
literal|"BLUE"
block|,
literal|"RED"
block|}
decl_stmt|;
name|Holder
argument_list|<
name|ColourEnum
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|ColourEnum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|ColourEnum
name|x
init|=
name|ColourEnum
operator|.
name|fromValue
argument_list|(
name|xx
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|ColourEnum
name|yOrig
init|=
name|ColourEnum
operator|.
name|fromValue
argument_list|(
name|yy
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ColourEnum
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|ColourEnum
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|ColourEnum
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testColourEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testColourEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testColourEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testColourEnum(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testColourEnum(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testColourEnum(): Incorrect return value"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|ret
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNumberEnum
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NumberEnum"
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
index|[]
name|xx
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|int
index|[]
name|yy
init|=
block|{
literal|3
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|Holder
argument_list|<
name|NumberEnum
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|NumberEnum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NumberEnum
name|x
init|=
name|NumberEnum
operator|.
name|fromValue
argument_list|(
name|xx
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|NumberEnum
name|yOrig
init|=
name|NumberEnum
operator|.
name|fromValue
argument_list|(
name|yy
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|NumberEnum
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|NumberEnum
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|NumberEnum
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNumberEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNumberEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNumberEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testNumberEnum(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNumberEnum(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNumberEnum(): Incorrect return value"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|ret
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringEnum
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StringEnum"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|xx
init|=
block|{
literal|"a b c"
block|,
literal|"d e f"
block|,
literal|"g h i"
block|}
decl_stmt|;
name|String
index|[]
name|yy
init|=
block|{
literal|"g h i"
block|,
literal|"a b c"
block|,
literal|"d e f"
block|}
decl_stmt|;
name|Holder
argument_list|<
name|StringEnum
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|StringEnum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|StringEnum
name|x
init|=
name|StringEnum
operator|.
name|fromValue
argument_list|(
name|xx
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|StringEnum
name|yOrig
init|=
name|StringEnum
operator|.
name|fromValue
argument_list|(
name|yy
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StringEnum
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|StringEnum
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|StringEnum
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStringEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStringEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStringEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testStringEnum(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStringEnum(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStringEnum(): Incorrect return value"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|ret
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalEnum
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DecimalEnum"
argument_list|)
condition|)
block|{
return|return;
block|}
name|BigDecimal
index|[]
name|xx
init|=
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"-10.34"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"11.22"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"14.55"
argument_list|)
block|}
decl_stmt|;
name|BigDecimal
index|[]
name|yy
init|=
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"14.55"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"-10.34"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"11.22"
argument_list|)
block|}
decl_stmt|;
name|Holder
argument_list|<
name|DecimalEnum
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|DecimalEnum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|DecimalEnum
name|x
init|=
name|DecimalEnum
operator|.
name|fromValue
argument_list|(
name|xx
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|DecimalEnum
name|yOrig
init|=
name|DecimalEnum
operator|.
name|fromValue
argument_list|(
name|yy
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DecimalEnum
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|DecimalEnum
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|DecimalEnum
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDecimalEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDecimalEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDecimalEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testDecimalEnum(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDecimalEnum(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDecimalEnum(): Incorrect return value"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|ret
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNMTokenEnum
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NMTokenEnum"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|xx
init|=
block|{
literal|"hello"
block|,
literal|"there"
block|}
decl_stmt|;
name|String
index|[]
name|yy
init|=
block|{
literal|"there"
block|,
literal|"hello"
block|}
decl_stmt|;
name|Holder
argument_list|<
name|NMTokenEnum
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|NMTokenEnum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|NMTokenEnum
name|x
init|=
name|NMTokenEnum
operator|.
name|fromValue
argument_list|(
name|xx
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|NMTokenEnum
name|yOrig
init|=
name|NMTokenEnum
operator|.
name|fromValue
argument_list|(
name|yy
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|NMTokenEnum
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|NMTokenEnum
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|NMTokenEnum
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNMTokenEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNMTokenEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNMTokenEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testNMTokenEnum(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNMTokenEnum(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNMTokenEnum(): Incorrect return value"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|ret
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnyURIEnum
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"AnyURIEnum"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|xx
init|=
block|{
literal|"http://www.iona.com"
block|,
literal|"http://www.google.com"
block|}
decl_stmt|;
name|String
index|[]
name|yy
init|=
block|{
literal|"http://www.google.com"
block|,
literal|"http://www.iona.com"
block|}
decl_stmt|;
name|Holder
argument_list|<
name|AnyURIEnum
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|AnyURIEnum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|AnyURIEnum
name|x
init|=
name|AnyURIEnum
operator|.
name|fromValue
argument_list|(
name|xx
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|AnyURIEnum
name|yOrig
init|=
name|AnyURIEnum
operator|.
name|fromValue
argument_list|(
name|yy
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|AnyURIEnum
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|AnyURIEnum
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|AnyURIEnum
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testAnyURIEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testAnyURIEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testAnyURIEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testAnyURIEnum(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testAnyURIEnum(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|value
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testAnyURIEnum(): Incorrect return value"
argument_list|,
name|x
operator|.
name|value
argument_list|()
argument_list|,
name|ret
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRestriction
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleRestriction"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, maxLength=10
name|String
name|x
init|=
literal|"string_x"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"string_y"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testSimpleRestriction(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
comment|// Enabled schema validation for doc literal tests
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
comment|// abnormal case
name|x
operator|=
literal|"string_xxxxx"
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"x parameter maxLength=10 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
comment|// abnormal case
name|x
operator|=
literal|"string_x"
expr_stmt|;
name|yOrig
operator|=
literal|"string_yyyyyy"
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testSimpleRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testSimpleRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"y parameter maxLength=10 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleRestriction2"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, minLength=5
name|String
name|x
init|=
literal|"str_x"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"string_yyy"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testSimpleRestriction2(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction2(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction2(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
comment|// Schema validation is enabled for doc-literal
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
comment|// abnormal case
name|x
operator|=
literal|"str"
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testSimpleRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testSimpleRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRestriction3
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleRestriction3"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, maxLength=10&& minLength=5
name|String
name|x
init|=
literal|"str_x"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"string_yyy"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testSimpleRestriction3(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction3(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction3(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
comment|// Schema validation is enabled for doc-literal
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
comment|// abnormal case
name|x
operator|=
literal|"str"
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"x parameter maxLength=10&& minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
comment|// abnormal case
name|x
operator|=
literal|"string_x"
expr_stmt|;
name|yOrig
operator|=
literal|"string_yyyyyy"
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testSimpleRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testSimpleRestriction3
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"y parameter maxLength=10&& minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRestriction4
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleRestriction4"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, length=1
name|String
name|x
init|=
literal|"x"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"y"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testSimpleRestriction4(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction4(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction4(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
comment|// Schema validation is enabled for doc-literal
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
comment|// abnormal case
name|x
operator|=
literal|"str"
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testSimpleRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testSimpleRestriction4
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"x parameter minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRestriction5
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleRestriction5"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, maxLength=10 for SimpleRestrction
comment|//&& minLength=5 for SimpleRestriction5
name|String
name|x
init|=
literal|"str_x"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"string_yyy"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testSimpleRestriction5(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction5(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction5(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
comment|// Schema validation is enabled for doc-literal
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
comment|// abnormal case
name|x
operator|=
literal|"str"
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=10&& minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
comment|// abnormal case
name|x
operator|=
literal|"string_x"
expr_stmt|;
name|yOrig
operator|=
literal|"string_yyyyyy"
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testSimpleRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testSimpleRestriction5
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=10&& minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRestriction6
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleRestriction6"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|x
init|=
literal|"str_x"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"y"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleRestriction6
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleRestriction6
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleRestriction6
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testSimpleRestriction6(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction6(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleRestriction6(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
comment|// Schema validation is enabled for doc-literal
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
comment|// abnormal case
name|x
operator|=
literal|"string_x"
expr_stmt|;
name|yOrig
operator|=
literal|"string_y"
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testSimpleRestriction6
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testSimpleRestriction6
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=10&& minLength=5 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHexBinaryRestriction
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"HexBinaryRestriction"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// normal case, maxLength=10&& minLength=1
name|byte
index|[]
name|x
init|=
literal|"x"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|yOrig
init|=
literal|"string_yyy"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testHexBinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testHexBinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testHexBinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testHexBinaryRestriction(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHexBinaryRestriction(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHexBinaryRestriction(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Schema validation is enabled for doc-literal
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
comment|// abnormal case
name|x
operator|=
literal|""
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|docClient
operator|.
name|testHexBinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=10&& minLength=1 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
comment|// abnormal case
name|x
operator|=
literal|"string_x"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|yOrig
operator|=
literal|"string_yyyyyy"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testHexBinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testHexBinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"maxLength=10&& minLength=1 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|byte
index|[]
name|x
parameter_list|,
name|byte
index|[]
name|y
parameter_list|)
block|{
name|String
name|xx
init|=
name|IOUtils
operator|.
name|newStringFromBytes
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|String
name|yy
init|=
name|IOUtils
operator|.
name|newStringFromBytes
argument_list|(
name|y
argument_list|)
decl_stmt|;
return|return
name|xx
operator|.
name|equals
argument_list|(
name|yy
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBase64BinaryRestriction
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Base64BinaryRestriction"
argument_list|)
condition|)
block|{
return|return;
block|}
name|byte
index|[]
name|x
init|=
literal|"string_xxx"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|yOrig
init|=
literal|"string_yyy"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testBase64BinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testBase64BinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testBase64BinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testBase64BinaryRestriction(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testBase64BinaryRestriction(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testBase64BinaryRestriction(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Schema validation is enabled for doc-literal
if|if
condition|(
name|testDocLiteral
condition|)
block|{
comment|// abnormal case
name|x
operator|=
literal|"string_xxxxx"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|docClient
operator|.
name|testBase64BinaryRestriction
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"length=10 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleListRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleListRestriction2"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|x
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"I"
argument_list|,
literal|"am"
argument_list|,
literal|"SimpleList"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|yOrig
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Does"
argument_list|,
literal|"SimpleList"
argument_list|,
literal|"Work"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testSimpleListRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testSimpleListRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStringList(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStringList(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStringList(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|x
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testSimpleListRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testSimpleListRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"length=10 restriction is violated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
else|else
block|{
name|String
index|[]
name|x
init|=
block|{
literal|"I"
block|,
literal|"am"
block|,
literal|"SimpleList"
block|}
decl_stmt|;
name|String
index|[]
name|yOrig
init|=
block|{
literal|"Does"
block|,
literal|"SimpleList"
block|,
literal|"Work"
block|}
decl_stmt|;
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// normal case, maxLength=10&& minLength=1
name|String
index|[]
name|ret
init|=
name|rpcClient
operator|.
name|testSimpleListRestriction2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|y
operator|.
name|value
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|value
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"testStringList(): Incorrect value for inout param"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|y
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStringList(): Incorrect value for out param"
argument_list|,
name|yOrig
index|[
name|i
index|]
argument_list|,
name|z
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStringList(): Incorrect return value"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|ret
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringList
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StringList"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|x
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"I"
argument_list|,
literal|"am"
argument_list|,
literal|"SimpleList"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|yOrig
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Does"
argument_list|,
literal|"SimpleList"
argument_list|,
literal|"Work"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testStringList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testStringList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStringList(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStringList(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStringList(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testDocLiteral
condition|)
block|{
try|try
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStringList
argument_list|(
literal|null
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unmarshalling"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
index|[]
name|x
init|=
block|{
literal|"I"
block|,
literal|"am"
block|,
literal|"SimpleList"
block|}
decl_stmt|;
name|String
index|[]
name|yOrig
init|=
block|{
literal|"Does"
block|,
literal|"SimpleList"
block|,
literal|"Work"
block|}
decl_stmt|;
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|ret
init|=
name|rpcClient
operator|.
name|testStringList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|y
operator|.
name|value
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|value
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"testStringList(): Incorrect value for inout param"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|y
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStringList(): Incorrect value for out param"
argument_list|,
name|yOrig
index|[
name|i
index|]
argument_list|,
name|z
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStringList(): Incorrect return value"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|ret
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNumberList
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NumberList"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|x
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|yOrig
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ret
init|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testNumberList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testNumberList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testNumberList(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNumberList(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNumberList(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Integer
index|[]
name|x
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|Integer
index|[]
name|yOrig
init|=
block|{
literal|10
block|,
literal|100
block|,
literal|1000
block|}
decl_stmt|;
name|Holder
argument_list|<
name|Integer
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|Integer
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Integer
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|Integer
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Integer
index|[]
name|ret
init|=
name|rpcClient
operator|.
name|testNumberList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|y
operator|.
name|value
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|value
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"testNumberList(): Incorrect value for inout param"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|y
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNumberList(): Incorrect value for out param"
argument_list|,
name|yOrig
index|[
name|i
index|]
argument_list|,
name|z
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testNumberList(): Incorrect return value"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|ret
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQNameList
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"QNameList"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|x
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname1"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname2"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname3"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QName
argument_list|>
name|yOrig
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname4"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname5"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname6"
argument_list|)
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|QName
argument_list|>
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|QName
argument_list|>
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|QName
argument_list|>
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|QName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QName
argument_list|>
name|ret
init|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testQNameList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testQNameList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testQNameList(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testQNameList(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testQNameList(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QName
index|[]
name|x
init|=
block|{
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname1"
argument_list|)
block|,
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname2"
argument_list|)
block|,
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname3"
argument_list|)
block|}
decl_stmt|;
name|QName
index|[]
name|yOrig
init|=
block|{
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname4"
argument_list|)
block|,
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname5"
argument_list|)
block|,
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"testqname6"
argument_list|)
block|}
decl_stmt|;
name|Holder
argument_list|<
name|QName
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|QName
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|QName
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|QName
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|QName
index|[]
name|ret
init|=
name|rpcClient
operator|.
name|testQNameList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|y
operator|.
name|value
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|value
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"testQNameList(): Incorrect value for inout param"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|y
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testQNameList(): Incorrect value for out param"
argument_list|,
name|yOrig
index|[
name|i
index|]
argument_list|,
name|z
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testQNameList(): Incorrect return value"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|ret
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleUnionList
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleUnionList"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|x
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"5"
argument_list|,
literal|"-7"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|yOrig
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-9"
argument_list|,
literal|"7"
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testSimpleUnionList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testSimpleUnionList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testSimpleUnionList(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSimpleUnionList(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSimpleUnionList(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
index|[]
name|x
init|=
block|{
literal|"5"
block|,
literal|"-7"
block|}
decl_stmt|;
name|String
index|[]
name|yOrig
init|=
block|{
literal|"-9"
block|,
literal|"7"
block|}
decl_stmt|;
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|ret
init|=
name|rpcClient
operator|.
name|testSimpleUnionList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|y
operator|.
name|value
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|value
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"testSimpleUnionList(): Incorrect value for inout param"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|y
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleUnionList(): Incorrect value for out param"
argument_list|,
name|yOrig
index|[
name|i
index|]
argument_list|,
name|z
operator|.
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSimpleUnionList(): Incorrect return value"
argument_list|,
name|x
index|[
name|i
index|]
argument_list|,
name|ret
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

