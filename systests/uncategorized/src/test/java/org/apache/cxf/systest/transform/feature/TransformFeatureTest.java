begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|transform
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|transform
operator|.
name|XSLTInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|transform
operator|.
name|XSLTOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TransformFeatureTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PORT
init|=
name|EchoServer
operator|.
name|PORT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|PORT_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/echo"
argument_list|,
literal|"EchoPort"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/echo"
argument_list|,
literal|"EchoService"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XSLT_REQUEST_PATH
init|=
literal|"request.xsl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XSLT_RESPONSE_PATH
init|=
literal|"response.xsl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRANSFORMED_CONSTANT
init|=
literal|"TRANSFORMED"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|EchoServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientOutTransformation
parameter_list|()
block|{
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|SERVICE_NAME
argument_list|)
decl_stmt|;
name|String
name|endpoint
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/EchoContext/EchoPort"
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|PORT_NAME
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|Echo
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|PORT_NAME
argument_list|,
name|Echo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|XSLTOutInterceptor
name|outInterceptor
init|=
operator|new
name|XSLTOutInterceptor
argument_list|(
name|XSLT_REQUEST_PATH
argument_list|)
decl_stmt|;
name|client
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|outInterceptor
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|port
operator|.
name|echo
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Request was not transformed"
argument_list|,
name|response
operator|.
name|contains
argument_list|(
name|TRANSFORMED_CONSTANT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientOutTransformationOnNonExistingEndpoint
parameter_list|()
block|{
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|SERVICE_NAME
argument_list|)
decl_stmt|;
name|String
name|endpoint
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/NonExistent"
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|PORT_NAME
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|Echo
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|PORT_NAME
argument_list|,
name|Echo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|XSLTOutInterceptor
name|outInterceptor
init|=
operator|new
name|XSLTOutInterceptor
argument_list|(
name|XSLT_REQUEST_PATH
argument_list|)
decl_stmt|;
name|client
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|outInterceptor
argument_list|)
expr_stmt|;
try|try
block|{
name|port
operator|.
name|echo
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"404 Not found was expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|exceptionMessage
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|exceptionMessage
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"404: not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientInTransformation
parameter_list|()
block|{
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|SERVICE_NAME
argument_list|)
decl_stmt|;
name|String
name|endpoint
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/EchoContext/EchoPort"
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|PORT_NAME
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|Echo
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
name|PORT_NAME
argument_list|,
name|Echo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|XSLTInInterceptor
name|inInterceptor
init|=
operator|new
name|XSLTInInterceptor
argument_list|(
name|XSLT_RESPONSE_PATH
argument_list|)
decl_stmt|;
name|client
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|inInterceptor
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|port
operator|.
name|echo
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|contains
argument_list|(
name|TRANSFORMED_CONSTANT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

