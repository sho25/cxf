begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|type_substitution
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_substitution
operator|.
name|Car
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_substitution
operator|.
name|CarDealer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_substitution
operator|.
name|CarDealerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_substitution
operator|.
name|Porsche
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TypeSubClientServerTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|Server
operator|.
name|PORT
decl_stmt|;
specifier|private
specifier|final
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/type_substitution/"
argument_list|,
literal|"CarDealerService"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|CarDealer
name|dealer
init|=
name|getCardealer
argument_list|()
decl_stmt|;
comment|/**          * CarDealer.getSedans() returns List<Car>          * Car is abstract class. The code below shows          * that the client is expecting a Porsche which extends          * Car.          *          * It shows a doc wrapper style operation.         */
name|List
argument_list|<
name|Car
argument_list|>
name|cars
init|=
name|dealer
operator|.
name|getSedans
argument_list|(
literal|"porsche"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cars
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Porsche
name|car
init|=
operator|(
name|Porsche
operator|)
name|cars
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|car
argument_list|)
expr_stmt|;
if|if
condition|(
name|car
operator|!=
literal|null
operator|&&
literal|"Porsche"
operator|.
name|equals
argument_list|(
name|car
operator|.
name|getMake
argument_list|()
argument_list|)
operator|&&
literal|"Boxster"
operator|.
name|equals
argument_list|(
name|car
operator|.
name|getModel
argument_list|()
argument_list|)
operator|&&
literal|"1998"
operator|.
name|equals
argument_list|(
name|car
operator|.
name|getYear
argument_list|()
argument_list|)
operator|&&
literal|"white"
operator|.
name|equals
argument_list|(
name|car
operator|.
name|getColor
argument_list|()
argument_list|)
condition|)
block|{
comment|// get the right car
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Get the wrong car!"
argument_list|)
expr_stmt|;
block|}
comment|/**          * CarDealer.tradeIn(Car) takes an abstract class Car and returns the same.          * We will send a sub-class instead and expect to get the same.          *          */
name|Porsche
name|oldCar
init|=
operator|new
name|Porsche
argument_list|()
decl_stmt|;
name|oldCar
operator|.
name|setMake
argument_list|(
literal|"Porsche"
argument_list|)
expr_stmt|;
name|oldCar
operator|.
name|setColor
argument_list|(
literal|"white"
argument_list|)
expr_stmt|;
name|oldCar
operator|.
name|setModel
argument_list|(
literal|"GT2000"
argument_list|)
expr_stmt|;
name|oldCar
operator|.
name|setYear
argument_list|(
literal|"2000"
argument_list|)
expr_stmt|;
name|Porsche
name|newCar
init|=
operator|(
name|Porsche
operator|)
name|dealer
operator|.
name|tradeIn
argument_list|(
name|oldCar
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newCar
argument_list|)
expr_stmt|;
if|if
condition|(
name|newCar
operator|!=
literal|null
operator|&&
literal|"Porsche"
operator|.
name|equals
argument_list|(
name|newCar
operator|.
name|getMake
argument_list|()
argument_list|)
operator|&&
literal|"911GT3"
operator|.
name|equals
argument_list|(
name|newCar
operator|.
name|getModel
argument_list|()
argument_list|)
operator|&&
literal|"2007"
operator|.
name|equals
argument_list|(
name|newCar
operator|.
name|getYear
argument_list|()
argument_list|)
operator|&&
literal|"black"
operator|.
name|equals
argument_list|(
name|newCar
operator|.
name|getColor
argument_list|()
argument_list|)
condition|)
block|{
comment|// get the right car
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Get the wrong car!"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|CarDealer
name|getCardealer
parameter_list|()
throws|throws
name|NumberFormatException
throws|,
name|MalformedURLException
block|{
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/cardealer.wsdl"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"WSDL is null"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|CarDealerService
name|service
init|=
operator|new
name|CarDealerService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Service is null "
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|CarDealer
name|dealer
init|=
name|service
operator|.
name|getCarDealerPort
argument_list|()
decl_stmt|;
name|updateAddressPort
argument_list|(
name|dealer
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
return|return
name|dealer
return|;
block|}
block|}
end_class

end_unit

