begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|type_test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedChoiceBaseArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedChoiceBaseChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedChoiceBaseStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedEmptyBaseEmptyAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedEmptyBaseEmptyChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedNoContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedStructBaseChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedStructBaseEmpty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedStructBaseStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|RestrictedChoiceBaseChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|SimpleChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|SimpleStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|UnboundedArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ChoiceOfChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ChoiceOfSeq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ChoiceWithAnyAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ChoiceWithBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ChoiceWithGroupChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ChoiceWithGroupSeq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ChoiceWithGroups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ComplexTypeWithAttributeGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ComplexTypeWithAttributeGroup1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ComplexTypeWithAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ExtBase64Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|GroupDirectlyInComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|IDTypeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|MultipleOccursSequenceInSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|SequenceWithGroupChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|SequenceWithGroupSeq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|SequenceWithGroups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|SequenceWithOccuringGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|StructWithAny
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|StructWithAnyArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|StructWithAnyAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|StructWithBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|OccuringChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|OccuringChoice1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|OccuringChoice2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|OccuringStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|OccuringStruct1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|OccuringStruct2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTypeTestClient3
extends|extends
name|AbstractTypeTestClient2
block|{
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceOfChoice
name|x
parameter_list|,
name|ChoiceOfChoice
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarFloat
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarOtherInt
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceOfChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceOfChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ChoiceOfChoice
name|x
init|=
operator|new
name|ChoiceOfChoice
argument_list|()
decl_stmt|;
name|ChoiceOfChoice
name|yOrig
init|=
operator|new
name|ChoiceOfChoice
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"y456"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceOfChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceOfChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceOfChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceOfChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceOfChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceOfChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceOfChoice(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceOfChoice(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceOfChoice(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceOfSeq
name|x
parameter_list|,
name|ChoiceOfSeq
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|&&
name|x
operator|.
name|getVarFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarOtherInt
argument_list|()
argument_list|)
operator|&&
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceOfSeq
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceOfSeq"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ChoiceOfSeq
name|x
init|=
operator|new
name|ChoiceOfSeq
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|ChoiceOfSeq
name|yOrig
init|=
operator|new
name|ChoiceOfSeq
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarOtherInt
argument_list|(
literal|456
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"y456"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceOfSeq
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceOfSeq
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceOfSeq
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceOfSeq
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceOfSeq
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceOfSeq
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceOfSeq(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceOfSeq(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceOfSeq(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|DerivedStructBaseStruct
name|x
parameter_list|,
name|DerivedStructBaseStruct
name|y
parameter_list|)
block|{
return|return
name|equals
argument_list|(
operator|(
name|SimpleStruct
operator|)
name|x
argument_list|,
operator|(
name|SimpleStruct
operator|)
name|y
argument_list|)
operator|&&
operator|(
name|x
operator|.
name|getVarFloatExt
argument_list|()
operator|==
name|y
operator|.
name|getVarFloatExt
argument_list|()
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarStringExt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarStringExt
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|x
operator|.
name|getAttrString1
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrString1
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|x
operator|.
name|getAttrString2
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrString2
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDerivedStructBaseStruct
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DerivedStructBaseStruct"
argument_list|)
condition|)
block|{
return|return;
block|}
name|DerivedStructBaseStruct
name|x
init|=
operator|new
name|DerivedStructBaseStruct
argument_list|()
decl_stmt|;
comment|//Base
name|x
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"BaseStruct-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarAttrString
argument_list|(
literal|"BaseStructAttr-x"
argument_list|)
expr_stmt|;
comment|//Derived
name|x
operator|.
name|setVarFloatExt
argument_list|(
operator|-
literal|3.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedStruct-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrString1
argument_list|(
literal|"DerivedAttr1-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrString2
argument_list|(
literal|"DerivedAttr2-x"
argument_list|)
expr_stmt|;
name|DerivedStructBaseStruct
name|yOrig
init|=
operator|new
name|DerivedStructBaseStruct
argument_list|()
decl_stmt|;
comment|//Base
name|yOrig
operator|.
name|setVarFloat
argument_list|(
operator|-
literal|9.14f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"BaseStruct-y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarAttrString
argument_list|(
literal|"BaseStructAttr-y"
argument_list|)
expr_stmt|;
comment|//Derived
name|yOrig
operator|.
name|setVarFloatExt
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedStruct-y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrString1
argument_list|(
literal|"DerivedAttr1-y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrString2
argument_list|(
literal|"DerivedAttr2-y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|DerivedStructBaseStruct
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DerivedStructBaseStruct
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|DerivedStructBaseStruct
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDerivedStructBaseStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDerivedStructBaseStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDerivedStructBaseStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDerivedStructBaseStruct(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedStructBaseStruct(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedStructBaseStruct(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|DerivedStructBaseChoice
name|x
parameter_list|,
name|DerivedStructBaseChoice
name|y
parameter_list|)
block|{
return|return
name|equals
argument_list|(
operator|(
name|SimpleChoice
operator|)
name|x
argument_list|,
operator|(
name|SimpleChoice
operator|)
name|y
argument_list|)
operator|&&
operator|(
name|Float
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getVarFloatExt
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloatExt
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarStringExt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarStringExt
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|x
operator|.
name|getAttrString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrString
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDerivedStructBaseChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DerivedStructBaseChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|DerivedStructBaseChoice
name|x
init|=
operator|new
name|DerivedStructBaseChoice
argument_list|()
decl_stmt|;
comment|//Base
name|x
operator|.
name|setVarString
argument_list|(
literal|"BaseChoice-x"
argument_list|)
expr_stmt|;
comment|//Derived
name|x
operator|.
name|setVarFloatExt
argument_list|(
operator|-
literal|3.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedStruct-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-x"
argument_list|)
expr_stmt|;
name|DerivedStructBaseChoice
name|yOrig
init|=
operator|new
name|DerivedStructBaseChoice
argument_list|()
decl_stmt|;
comment|//Base
name|yOrig
operator|.
name|setVarFloat
argument_list|(
operator|-
literal|9.14f
argument_list|)
expr_stmt|;
comment|//Derived
name|yOrig
operator|.
name|setVarFloatExt
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedStruct-y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|DerivedStructBaseChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DerivedStructBaseChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|DerivedStructBaseChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDerivedStructBaseChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDerivedStructBaseChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDerivedStructBaseChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDerivedStructBaseChoice(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedStructBaseChoice(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedStructBaseChoice(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|DerivedChoiceBaseStruct
name|x
parameter_list|,
name|DerivedChoiceBaseStruct
name|y
parameter_list|)
block|{
name|boolean
name|isEquals
init|=
name|x
operator|.
name|getAttrString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getVarStringExt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarStringExt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|isEquals
operator|&=
name|x
operator|.
name|getVarStringExt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarStringExt
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isEquals
operator|&=
name|x
operator|.
name|getVarFloatExt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarFloatExt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarFloatExt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloatExt
argument_list|()
argument_list|)
operator|==
literal|0
expr_stmt|;
block|}
return|return
name|isEquals
operator|&&
name|equals
argument_list|(
operator|(
name|SimpleStruct
operator|)
name|x
argument_list|,
operator|(
name|SimpleStruct
operator|)
name|y
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDerivedChoiceBaseStruct
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DerivedChoiceBaseStruct"
argument_list|)
condition|)
block|{
return|return;
block|}
name|DerivedChoiceBaseStruct
name|x
init|=
operator|new
name|DerivedChoiceBaseStruct
argument_list|()
decl_stmt|;
comment|//Base
name|x
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"BaseStruct-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarAttrString
argument_list|(
literal|"BaseStructAttr-x"
argument_list|)
expr_stmt|;
comment|//Derived
name|x
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedChoice-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-x"
argument_list|)
expr_stmt|;
name|DerivedChoiceBaseStruct
name|yOrig
init|=
operator|new
name|DerivedChoiceBaseStruct
argument_list|()
decl_stmt|;
comment|// Base
name|yOrig
operator|.
name|setVarFloat
argument_list|(
operator|-
literal|9.14f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"BaseStruct-y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarAttrString
argument_list|(
literal|"BaseStructAttr-y"
argument_list|)
expr_stmt|;
comment|// Derived
name|yOrig
operator|.
name|setVarFloatExt
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|DerivedChoiceBaseStruct
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DerivedChoiceBaseStruct
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|DerivedChoiceBaseStruct
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDerivedChoiceBaseStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDerivedChoiceBaseStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDerivedChoiceBaseStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDerivedChoiceBaseStruct(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedChoiceBaseStruct(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedChoiceBaseStruct(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.DerivedChoiceBaseArray
specifier|protected
name|boolean
name|equals
parameter_list|(
name|DerivedChoiceBaseArray
name|x
parameter_list|,
name|DerivedChoiceBaseArray
name|y
parameter_list|)
block|{
name|boolean
name|isEquals
init|=
name|x
operator|.
name|getAttrStringExt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrStringExt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getVarFloatExt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarFloatExt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|isEquals
operator|&=
name|x
operator|.
name|getVarFloatExt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloatExt
argument_list|()
argument_list|)
operator|==
literal|0
expr_stmt|;
block|}
else|else
block|{
name|isEquals
operator|&=
name|x
operator|.
name|getVarStringExt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarStringExt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarStringExt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarStringExt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|isEquals
operator|&&
name|equals
argument_list|(
operator|(
name|UnboundedArray
operator|)
name|x
argument_list|,
operator|(
name|UnboundedArray
operator|)
name|y
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDerivedChoiceBaseArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DerivedChoiceBaseArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|DerivedChoiceBaseArray
name|x
init|=
operator|new
name|DerivedChoiceBaseArray
argument_list|()
decl_stmt|;
comment|//Base
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"AAA"
argument_list|,
literal|"BBB"
argument_list|,
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Derived
name|x
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedChoice-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrStringExt
argument_list|(
literal|"DerivedAttr-x"
argument_list|)
expr_stmt|;
name|DerivedChoiceBaseArray
name|yOrig
init|=
operator|new
name|DerivedChoiceBaseArray
argument_list|()
decl_stmt|;
comment|//Base
name|yOrig
operator|.
name|getItem
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"XXX"
argument_list|,
literal|"YYY"
argument_list|,
literal|"ZZZ"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Derived
name|yOrig
operator|.
name|setVarFloatExt
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrStringExt
argument_list|(
literal|"DerivedAttr-y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|DerivedChoiceBaseArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DerivedChoiceBaseArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|DerivedChoiceBaseArray
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDerivedChoiceBaseArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDerivedChoiceBaseArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDerivedChoiceBaseArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDerivedChoiceBaseArray(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedChoiceBaseArray(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedChoiceBaseArray(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.DerivedChoiceBaseChoice
specifier|protected
name|boolean
name|equals
parameter_list|(
name|DerivedChoiceBaseChoice
name|x
parameter_list|,
name|DerivedChoiceBaseChoice
name|y
parameter_list|)
block|{
name|boolean
name|isEquals
init|=
name|x
operator|.
name|getAttrString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getVarStringExt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarStringExt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|isEquals
operator|&=
name|x
operator|.
name|getVarStringExt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarStringExt
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isEquals
operator|&=
name|x
operator|.
name|getVarFloatExt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarFloatExt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarFloatExt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloatExt
argument_list|()
argument_list|)
operator|==
literal|0
expr_stmt|;
block|}
return|return
name|isEquals
operator|&&
name|equals
argument_list|(
operator|(
name|SimpleChoice
operator|)
name|x
argument_list|,
operator|(
name|SimpleChoice
operator|)
name|y
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDerivedChoiceBaseChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DerivedChoiceBaseChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|DerivedChoiceBaseChoice
name|x
init|=
operator|new
name|DerivedChoiceBaseChoice
argument_list|()
decl_stmt|;
comment|//Base
name|x
operator|.
name|setVarString
argument_list|(
literal|"BaseChoice-x"
argument_list|)
expr_stmt|;
comment|//Derived
name|x
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedChoice-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-x"
argument_list|)
expr_stmt|;
name|DerivedChoiceBaseChoice
name|yOrig
init|=
operator|new
name|DerivedChoiceBaseChoice
argument_list|()
decl_stmt|;
comment|//Base
name|yOrig
operator|.
name|setVarFloat
argument_list|(
operator|-
literal|9.14f
argument_list|)
expr_stmt|;
comment|//Derived
name|yOrig
operator|.
name|setVarFloatExt
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|DerivedChoiceBaseChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DerivedChoiceBaseChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|DerivedChoiceBaseChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDerivedChoiceBaseChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDerivedChoiceBaseChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDerivedChoiceBaseChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDerivedChoiceBaseChoice(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedChoiceBaseChoice(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedChoiceBaseChoice(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.DerivedNoContent
specifier|protected
name|boolean
name|equals
parameter_list|(
name|DerivedNoContent
name|x
parameter_list|,
name|DerivedNoContent
name|y
parameter_list|)
block|{
return|return
name|equals
argument_list|(
operator|(
name|SimpleStruct
operator|)
name|x
argument_list|,
operator|(
name|SimpleStruct
operator|)
name|y
argument_list|)
operator|&&
name|x
operator|.
name|getVarAttrString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarAttrString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDerivedNoContent
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DerivedNoContent"
argument_list|)
condition|)
block|{
return|return;
block|}
name|DerivedNoContent
name|x
init|=
operator|new
name|DerivedNoContent
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"BaseStruct-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarAttrString
argument_list|(
literal|"BaseStructAttr-x"
argument_list|)
expr_stmt|;
name|DerivedNoContent
name|yOrig
init|=
operator|new
name|DerivedNoContent
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"13"
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"BaseStruct-y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarAttrString
argument_list|(
literal|"BaseStructAttr-y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|DerivedNoContent
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DerivedNoContent
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|DerivedNoContent
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDerivedNoContent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDerivedNoContent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDerivedNoContent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDerivedNoContent(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedNoContent(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedNoContent(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.DerivedStructBaseEmpty
specifier|protected
name|boolean
name|equals
parameter_list|(
name|DerivedStructBaseEmpty
name|x
parameter_list|,
name|DerivedStructBaseEmpty
name|y
parameter_list|)
block|{
return|return
operator|(
name|x
operator|.
name|getVarFloatExt
argument_list|()
operator|==
name|y
operator|.
name|getVarFloatExt
argument_list|()
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarStringExt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarStringExt
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|x
operator|.
name|getAttrString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrString
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDerivedStructBaseEmpty
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DerivedStructBaseEmpty"
argument_list|)
condition|)
block|{
return|return;
block|}
name|DerivedStructBaseEmpty
name|x
init|=
operator|new
name|DerivedStructBaseEmpty
argument_list|()
decl_stmt|;
comment|//Derived
name|x
operator|.
name|setVarFloatExt
argument_list|(
operator|-
literal|3.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedStruct-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-x"
argument_list|)
expr_stmt|;
name|DerivedStructBaseEmpty
name|yOrig
init|=
operator|new
name|DerivedStructBaseEmpty
argument_list|()
decl_stmt|;
comment|//Derived
name|yOrig
operator|.
name|setVarFloatExt
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedStruct-y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|DerivedStructBaseEmpty
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DerivedStructBaseEmpty
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|DerivedStructBaseEmpty
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDerivedStructBaseEmpty
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDerivedStructBaseEmpty
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDerivedStructBaseEmpty
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testDerivedStructBaseEmpty(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedStructBaseEmpty(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testDerivedStructBaseEmpty(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.DerivedEmptyBaseEmptyAll
annotation|@
name|Test
specifier|public
name|void
name|testDerivedEmptyBaseEmptyAll
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DerivedEmptyBaseEmptyAll"
argument_list|)
condition|)
block|{
return|return;
block|}
name|DerivedEmptyBaseEmptyAll
name|x
init|=
operator|new
name|DerivedEmptyBaseEmptyAll
argument_list|()
decl_stmt|;
name|DerivedEmptyBaseEmptyAll
name|yOrig
init|=
operator|new
name|DerivedEmptyBaseEmptyAll
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|DerivedEmptyBaseEmptyAll
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DerivedEmptyBaseEmptyAll
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|DerivedEmptyBaseEmptyAll
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDerivedEmptyBaseEmptyAll
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDerivedEmptyBaseEmptyAll
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDerivedEmptyBaseEmptyAll
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
comment|// not much to check
name|assertNotNull
argument_list|(
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|y
operator|.
name|value
operator|instanceof
name|DerivedEmptyBaseEmptyAll
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|value
operator|instanceof
name|DerivedEmptyBaseEmptyAll
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|instanceof
name|DerivedEmptyBaseEmptyAll
argument_list|)
expr_stmt|;
block|}
comment|//org.apache.type_test.types1.DerivedEmptyBaseEmptyChoice
annotation|@
name|Test
specifier|public
name|void
name|testDerivedEmptyBaseEmptyChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"DerivedEmptyBaseEmptyChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|DerivedEmptyBaseEmptyChoice
name|x
init|=
operator|new
name|DerivedEmptyBaseEmptyChoice
argument_list|()
decl_stmt|;
name|DerivedEmptyBaseEmptyChoice
name|yOrig
init|=
operator|new
name|DerivedEmptyBaseEmptyChoice
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|DerivedEmptyBaseEmptyChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|DerivedEmptyBaseEmptyChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|DerivedEmptyBaseEmptyChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDerivedEmptyBaseEmptyChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDerivedEmptyBaseEmptyChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDerivedEmptyBaseEmptyChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
comment|// not much to check
name|assertNotNull
argument_list|(
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|y
operator|.
name|value
operator|instanceof
name|DerivedEmptyBaseEmptyChoice
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|value
operator|instanceof
name|DerivedEmptyBaseEmptyChoice
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|instanceof
name|DerivedEmptyBaseEmptyChoice
argument_list|)
expr_stmt|;
block|}
comment|//org.apache.type_test.types1.RestrictedChoiceBaseChoice
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RestrictedChoiceBaseChoice
name|x
parameter_list|,
name|RestrictedChoiceBaseChoice
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRestrictedChoiceBaseChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"RestrictedChoiceBaseChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|RestrictedChoiceBaseChoice
name|x
init|=
operator|new
name|RestrictedChoiceBaseChoice
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|RestrictedChoiceBaseChoice
name|yOrig
init|=
operator|new
name|RestrictedChoiceBaseChoice
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
operator|-
literal|9.14f
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|RestrictedChoiceBaseChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|RestrictedChoiceBaseChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|RestrictedChoiceBaseChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testRestrictedChoiceBaseChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testRestrictedChoiceBaseChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testRestrictedChoiceBaseChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testRestrictedChoiceBaseChoice(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRestrictedChoiceBaseChoice(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRestrictedChoiceBaseChoice(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ComplexTypeWithAttributeGroup
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ComplexTypeWithAttributeGroup
name|x
parameter_list|,
name|ComplexTypeWithAttributeGroup
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getAttrInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getAttrInt
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
name|x
operator|.
name|getAttrString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexTypeWithAttributeGroup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ComplexTypeWithAttributeGroup"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ComplexTypeWithAttributeGroup
name|x
init|=
operator|new
name|ComplexTypeWithAttributeGroup
argument_list|()
decl_stmt|;
name|x
operator|.
name|setAttrInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrString
argument_list|(
literal|"x123"
argument_list|)
expr_stmt|;
name|ComplexTypeWithAttributeGroup
name|yOrig
init|=
operator|new
name|ComplexTypeWithAttributeGroup
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setAttrInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrString
argument_list|(
literal|"x456"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ComplexTypeWithAttributeGroup
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ComplexTypeWithAttributeGroup
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ComplexTypeWithAttributeGroup
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testComplexTypeWithAttributeGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testComplexTypeWithAttributeGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testComplexTypeWithAttributeGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testComplexTypeWithAttributeGroup(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testComplexTypeWithAttributeGroup(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testComplexTypeWithAttributeGroup(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ComplexTypeWithAttributeGroup1
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ComplexTypeWithAttributeGroup1
name|x
parameter_list|,
name|ComplexTypeWithAttributeGroup1
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getAttrInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getAttrInt
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
name|x
operator|.
name|getAttrFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getAttrFloat
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
name|x
operator|.
name|getAttrString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexTypeWithAttributeGroup1
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ComplexTypeWithAttributeGroup1"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ComplexTypeWithAttributeGroup1
name|x
init|=
operator|new
name|ComplexTypeWithAttributeGroup1
argument_list|()
decl_stmt|;
name|x
operator|.
name|setAttrInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrString
argument_list|(
literal|"x123"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrFloat
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|3.14f
argument_list|)
argument_list|)
expr_stmt|;
name|ComplexTypeWithAttributeGroup1
name|yOrig
init|=
operator|new
name|ComplexTypeWithAttributeGroup1
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setAttrInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrString
argument_list|(
literal|"x456"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrFloat
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|6.28f
argument_list|)
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ComplexTypeWithAttributeGroup1
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ComplexTypeWithAttributeGroup1
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ComplexTypeWithAttributeGroup1
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testComplexTypeWithAttributeGroup1
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testComplexTypeWithAttributeGroup1
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testComplexTypeWithAttributeGroup1
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testComplexTypeWithAttributeGroup1(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testComplexTypeWithAttributeGroup1(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testComplexTypeWithAttributeGroup1(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.SequenceWithGroupSeq
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SequenceWithGroupSeq
name|x
parameter_list|,
name|SequenceWithGroupSeq
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|&&
name|Float
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getVarFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|&&
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|==
name|y
operator|.
name|getVarOtherInt
argument_list|()
operator|&&
name|Float
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getVarOtherFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarOtherFloat
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarOtherString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceWithGroupSeq
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SequenceWithGroupSeq"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SequenceWithGroupSeq
name|x
init|=
operator|new
name|SequenceWithGroupSeq
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarOtherInt
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarOtherString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarOtherFloat
argument_list|(
literal|10.1f
argument_list|)
expr_stmt|;
name|SequenceWithGroupSeq
name|yOrig
init|=
operator|new
name|SequenceWithGroupSeq
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
literal|10.1f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarOtherInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarOtherString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarOtherFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SequenceWithGroupSeq
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SequenceWithGroupSeq
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SequenceWithGroupSeq
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSequenceWithGroupSeq
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSequenceWithGroupSeq
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSequenceWithGroupSeq
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testSequenceWithGroupSeq(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSequenceWithGroupSeq(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSequenceWithGroupSeq(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.SequenceWithGroupChoice
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SequenceWithGroupChoice
name|x
parameter_list|,
name|SequenceWithGroupChoice
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherInt
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherFloat
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherString
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarOtherString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceWithGroupChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SequenceWithGroupChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SequenceWithGroupChoice
name|x
init|=
operator|new
name|SequenceWithGroupChoice
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarOtherString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|SequenceWithGroupChoice
name|yOrig
init|=
operator|new
name|SequenceWithGroupChoice
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarOtherFloat
argument_list|(
literal|2.2f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SequenceWithGroupChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SequenceWithGroupChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SequenceWithGroupChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSequenceWithGroupChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSequenceWithGroupChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSequenceWithGroupChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testSequenceWithGroupChoice(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSequenceWithGroupChoice(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSequenceWithGroupChoice(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.SequenceWithGroups
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SequenceWithGroups
name|x
parameter_list|,
name|SequenceWithGroups
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherInt
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherFloat
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherString
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarOtherString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|&&
name|Float
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getVarFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceWithGroups
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SequenceWithGroups"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SequenceWithGroups
name|x
init|=
operator|new
name|SequenceWithGroups
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarOtherFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|SequenceWithGroups
name|yOrig
init|=
operator|new
name|SequenceWithGroups
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
literal|10.1f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarOtherString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SequenceWithGroups
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SequenceWithGroups
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SequenceWithGroups
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSequenceWithGroups
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSequenceWithGroups
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSequenceWithGroups
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testSequenceWithGroups(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSequenceWithGroups(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSequenceWithGroups(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.SequenceWithOccuringGroup
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SequenceWithOccuringGroup
name|x
parameter_list|,
name|SequenceWithOccuringGroup
name|y
parameter_list|)
block|{
return|return
name|equalsFloatIntStringList
argument_list|(
name|x
operator|.
name|getBatchElementsSeq
argument_list|()
argument_list|,
name|y
operator|.
name|getBatchElementsSeq
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceWithOccuringGroup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SequenceWithOccuringGroup"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SequenceWithOccuringGroup
name|x
init|=
operator|new
name|SequenceWithOccuringGroup
argument_list|()
decl_stmt|;
name|x
operator|.
name|getBatchElementsSeq
argument_list|()
operator|.
name|add
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|x
operator|.
name|getBatchElementsSeq
argument_list|()
operator|.
name|add
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|x
operator|.
name|getBatchElementsSeq
argument_list|()
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|SequenceWithOccuringGroup
name|yOrig
init|=
operator|new
name|SequenceWithOccuringGroup
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|getBatchElementsSeq
argument_list|()
operator|.
name|add
argument_list|(
literal|2.2f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getBatchElementsSeq
argument_list|()
operator|.
name|add
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getBatchElementsSeq
argument_list|()
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SequenceWithOccuringGroup
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SequenceWithOccuringGroup
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SequenceWithOccuringGroup
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSequenceWithOccuringGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSequenceWithOccuringGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSequenceWithOccuringGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testGroupDirectlyInComplexType(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupDirectlyInComplexType(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupDirectlyInComplexType(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.GroupDirectlyInComplexType
specifier|protected
name|boolean
name|equals
parameter_list|(
name|GroupDirectlyInComplexType
name|x
parameter_list|,
name|GroupDirectlyInComplexType
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|&&
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|&&
name|Float
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getVarFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
name|x
operator|.
name|getAttr1
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttr1
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupDirectlyInComplexType
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"GroupDirectlyInComplexType"
argument_list|)
condition|)
block|{
return|return;
block|}
name|GroupDirectlyInComplexType
name|x
init|=
operator|new
name|GroupDirectlyInComplexType
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttr1
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|GroupDirectlyInComplexType
name|yOrig
init|=
operator|new
name|GroupDirectlyInComplexType
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
literal|10.1f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttr1
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|GroupDirectlyInComplexType
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|GroupDirectlyInComplexType
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|GroupDirectlyInComplexType
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testGroupDirectlyInComplexType
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testGroupDirectlyInComplexType
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testGroupDirectlyInComplexType
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testGroupDirectlyInComplexType(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupDirectlyInComplexType(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testGroupDirectlyInComplexType(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ComplexTypeWithAttributes
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ComplexTypeWithAttributes
name|x
parameter_list|,
name|ComplexTypeWithAttributes
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getAttrInt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrInt
argument_list|()
argument_list|)
operator|&&
name|x
operator|.
name|getAttrString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexTypeWithAttributes
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ComplexTypeWithAttributes"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ComplexTypeWithAttributes
name|x
init|=
operator|new
name|ComplexTypeWithAttributes
argument_list|()
decl_stmt|;
name|x
operator|.
name|setAttrInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrString
argument_list|(
literal|"x123"
argument_list|)
expr_stmt|;
name|ComplexTypeWithAttributes
name|yOrig
init|=
operator|new
name|ComplexTypeWithAttributes
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setAttrInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrString
argument_list|(
literal|"x456"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ComplexTypeWithAttributes
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ComplexTypeWithAttributes
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ComplexTypeWithAttributes
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testComplexTypeWithAttributes
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testComplexTypeWithAttributes
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testComplexTypeWithAttributes
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testComplexTypeWithAttributes(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testComplexTypeWithAttributes(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testComplexTypeWithAttributes(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.StructWithAny
specifier|public
name|void
name|assertEqualsStructWithAny
parameter_list|(
name|StructWithAny
name|a
parameter_list|,
name|StructWithAny
name|b
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"StructWithAny names don't match"
argument_list|,
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"StructWithAny addresses don't match"
argument_list|,
name|a
operator|.
name|getAddress
argument_list|()
argument_list|,
name|b
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getAny
argument_list|()
argument_list|,
name|b
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertEquals
parameter_list|(
name|Element
name|elA
parameter_list|,
name|Element
name|elB
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|elA
operator|instanceof
name|SOAPElement
operator|&&
name|elB
operator|instanceof
name|SOAPElement
condition|)
block|{
name|SOAPElement
name|soapA
init|=
operator|(
name|SOAPElement
operator|)
name|elA
decl_stmt|;
name|SOAPElement
name|soapB
init|=
operator|(
name|SOAPElement
operator|)
name|elB
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"StructWithAny soap element names don't match"
argument_list|,
name|soapA
operator|.
name|getElementName
argument_list|()
argument_list|,
name|soapB
operator|.
name|getElementName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"StructWithAny soap element text nodes don't match"
argument_list|,
name|soapA
operator|.
name|getValue
argument_list|()
argument_list|,
name|soapB
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|itExp
init|=
name|soapA
operator|.
name|getChildElements
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|itGen
init|=
name|soapB
operator|.
name|getChildElements
argument_list|()
decl_stmt|;
while|while
condition|(
name|itExp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|itGen
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Incorrect number of child elements inside any"
argument_list|)
expr_stmt|;
block|}
name|Object
name|objA
init|=
name|itExp
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|objB
init|=
name|itGen
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|objA
operator|instanceof
name|SOAPElement
condition|)
block|{
if|if
condition|(
name|objB
operator|instanceof
name|SOAPElement
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
name|SOAPElement
operator|)
name|objA
argument_list|,
operator|(
name|SOAPElement
operator|)
name|objB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"No matching soap element."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithAny
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithAny"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithAny
name|swa
init|=
operator|new
name|StructWithAny
argument_list|()
decl_stmt|;
name|swa
operator|.
name|setName
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|setAddress
argument_list|(
literal|"Some Address"
argument_list|)
expr_stmt|;
name|StructWithAny
name|yOrig
init|=
operator|new
name|StructWithAny
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setName
argument_list|(
literal|"Name2"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAddress
argument_list|(
literal|"Some Other Address"
argument_list|)
expr_stmt|;
name|SOAPFactory
name|factory
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SOAPElement
name|x
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"hello"
argument_list|,
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
expr_stmt|;
name|x
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node"
argument_list|)
expr_stmt|;
name|SOAPElement
name|x2
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"hello2"
argument_list|,
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
decl_stmt|;
name|x2
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
expr_stmt|;
name|x2
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node for the second struct"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|setAny
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAny
argument_list|(
name|x2
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAny
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAny
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithAny
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEqualsStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAny
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAny
argument_list|(
name|swa
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithAnyXsi
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithAnyXsi"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithAny
name|swa
init|=
operator|new
name|StructWithAny
argument_list|()
decl_stmt|;
name|swa
operator|.
name|setName
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|setAddress
argument_list|(
literal|"Some Address"
argument_list|)
expr_stmt|;
name|StructWithAny
name|yOrig
init|=
operator|new
name|StructWithAny
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setName
argument_list|(
literal|"Name2"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAddress
argument_list|(
literal|"Some Other Address"
argument_list|)
expr_stmt|;
name|SOAPFactory
name|sf
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Name
name|elementName
init|=
name|sf
operator|.
name|createName
argument_list|(
literal|"UKAddress"
argument_list|,
literal|""
argument_list|,
literal|"http://apache.org/type_test"
argument_list|)
decl_stmt|;
name|Name
name|xsiAttrName
init|=
name|sf
operator|.
name|createName
argument_list|(
literal|"type"
argument_list|,
literal|"xsi"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema-instance"
argument_list|)
decl_stmt|;
name|SOAPElement
name|x
init|=
name|sf
operator|.
name|createElement
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
name|x
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test"
argument_list|)
expr_stmt|;
name|x
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"xsi"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema-instance"
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
name|xsiAttrName
argument_list|,
literal|"tns:UKAddressType11"
argument_list|)
expr_stmt|;
name|x
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node for the first struct"
argument_list|)
expr_stmt|;
name|Name
name|elementName2
init|=
name|sf
operator|.
name|createName
argument_list|(
literal|"UKAddress"
argument_list|,
literal|""
argument_list|,
literal|"http://apache.org/type_test"
argument_list|)
decl_stmt|;
name|Name
name|xsiAttrName2
init|=
name|sf
operator|.
name|createName
argument_list|(
literal|"type"
argument_list|,
literal|"xsi"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema-instance"
argument_list|)
decl_stmt|;
name|SOAPElement
name|x2
init|=
name|sf
operator|.
name|createElement
argument_list|(
name|elementName2
argument_list|)
decl_stmt|;
name|x2
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test"
argument_list|)
expr_stmt|;
name|x2
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"xsi"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema-instance"
argument_list|)
expr_stmt|;
name|x2
operator|.
name|addAttribute
argument_list|(
name|xsiAttrName2
argument_list|,
literal|"tns:UKAddressType22"
argument_list|)
expr_stmt|;
name|x2
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node for the second struct"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|setAny
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAny
argument_list|(
name|x2
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAny
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAny
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithAny
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEqualsStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAny
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAny
argument_list|(
name|swa
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
comment|// StructWithInvalidAny
annotation|@
name|Test
specifier|public
name|void
name|testStructWithInvalidAny
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithInvalidAny"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithAny
name|swa
init|=
operator|new
name|StructWithAny
argument_list|()
decl_stmt|;
name|swa
operator|.
name|setName
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|setAddress
argument_list|(
literal|"Some Address"
argument_list|)
expr_stmt|;
name|StructWithAny
name|yOrig
init|=
operator|new
name|StructWithAny
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setName
argument_list|(
literal|"Name2"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAddress
argument_list|(
literal|"Some Other Address"
argument_list|)
expr_stmt|;
name|SOAPFactory
name|factory
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SOAPElement
name|x
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"hello"
argument_list|,
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node"
argument_list|)
expr_stmt|;
name|SOAPElement
name|x2
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"hello2"
argument_list|,
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
decl_stmt|;
name|x2
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node for the second struct"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|setAny
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAny
argument_list|(
name|x2
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAny
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAny
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|docClient
operator|.
name|testStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|xmlClient
operator|.
name|testStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|testStructWithAny
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
comment|//fail("testStructWithInvalidAny(): Did not catch expected exception.");
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testStructWithInvalidAny(): caught expected exception - woot."
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.StructWithAnyArray
specifier|public
name|void
name|assertEqualsStructWithAnyArray
parameter_list|(
name|StructWithAnyArray
name|a
parameter_list|,
name|StructWithAnyArray
name|b
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"StructWithAny names don't match"
argument_list|,
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"StructWithAny addresses don't match"
argument_list|,
name|a
operator|.
name|getAddress
argument_list|()
argument_list|,
name|b
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|ae
init|=
name|a
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|be
init|=
name|b
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"StructWithAny soap element lengths don't match"
argument_list|,
name|ae
operator|.
name|size
argument_list|()
argument_list|,
name|be
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ae
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|ae
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|be
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithAnyArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithAnyArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithAnyArray
name|swa
init|=
operator|new
name|StructWithAnyArray
argument_list|()
decl_stmt|;
name|swa
operator|.
name|setName
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|setAddress
argument_list|(
literal|"Some Address"
argument_list|)
expr_stmt|;
name|StructWithAnyArray
name|yOrig
init|=
operator|new
name|StructWithAnyArray
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setName
argument_list|(
literal|"Name2"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAddress
argument_list|(
literal|"Some Other Address"
argument_list|)
expr_stmt|;
name|SOAPFactory
name|factory
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SOAPElement
name|x
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"hello"
argument_list|,
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
expr_stmt|;
name|x
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node"
argument_list|)
expr_stmt|;
name|SOAPElement
name|x2
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"hello2"
argument_list|,
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
decl_stmt|;
name|x2
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
expr_stmt|;
name|x2
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node for the second struct"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|x2
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAnyArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAnyArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithAnyArray
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithAnyArray
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithAnyArray
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithAnyArray
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEqualsStructWithAnyArray
argument_list|(
name|swa
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyArray
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyArray
argument_list|(
name|swa
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
comment|// StructWithInvalidAnyArray
annotation|@
name|Test
specifier|public
name|void
name|testStructWithInvalidAnyArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithInvalidAnyArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithAnyArray
name|swa
init|=
operator|new
name|StructWithAnyArray
argument_list|()
decl_stmt|;
name|swa
operator|.
name|setName
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|setAddress
argument_list|(
literal|"Some Address"
argument_list|)
expr_stmt|;
name|StructWithAnyArray
name|yOrig
init|=
operator|new
name|StructWithAnyArray
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setName
argument_list|(
literal|"Name2"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAddress
argument_list|(
literal|"Some Other Address"
argument_list|)
expr_stmt|;
name|SOAPFactory
name|factory
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SOAPElement
name|x
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"hello"
argument_list|,
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node"
argument_list|)
expr_stmt|;
name|SOAPElement
name|x2
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"hello2"
argument_list|,
literal|"foo"
argument_list|,
literal|"http://some.url.com"
argument_list|)
decl_stmt|;
name|x2
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node for the second struct"
argument_list|)
expr_stmt|;
name|swa
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|x2
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAnyArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAnyArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|docClient
operator|.
name|testStructWithAnyArray
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|xmlClient
operator|.
name|testStructWithAnyArray
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|testStructWithAnyArray
argument_list|(
name|swa
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
comment|//fail("testStructWithInvalidAnyArray(): Did not catch expected exception.");
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Expected
name|fail
argument_list|(
literal|"testStructWithInvalidAnyArray(): caught expected exception - woot."
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.IDTypeAttribute
specifier|protected
name|boolean
name|equalsIDTypeAttribute
parameter_list|(
name|IDTypeAttribute
name|x
parameter_list|,
name|IDTypeAttribute
name|y
parameter_list|)
block|{
return|return
name|equalsNilable
argument_list|(
name|x
operator|.
name|getId
argument_list|()
argument_list|,
name|y
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIDTypeAttribute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"IDTypeAttribute"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// n.b. to be valid elements with an ID in the response message
comment|// must have a unique ID, so this test does not return x as the
comment|// return value (like the other tests).
name|IDTypeAttribute
name|x
init|=
operator|new
name|IDTypeAttribute
argument_list|()
decl_stmt|;
name|x
operator|.
name|setId
argument_list|(
literal|"x123"
argument_list|)
expr_stmt|;
name|IDTypeAttribute
name|yOrig
init|=
operator|new
name|IDTypeAttribute
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setId
argument_list|(
literal|"x456"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|IDTypeAttribute
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|IDTypeAttribute
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
comment|//IDTypeAttribute ret;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
comment|/*ret =*/
name|docClient
operator|.
name|testIDTypeAttribute
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
comment|/*ret =*/
name|xmlClient
operator|.
name|testIDTypeAttribute
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*ret =*/
name|rpcClient
operator|.
name|testIDTypeAttribute
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testIDTypeAttribute(): Incorrect value for inout param"
argument_list|,
name|equalsIDTypeAttribute
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testIDTypeAttribute(): Incorrect value for out param"
argument_list|,
name|equalsIDTypeAttribute
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.MultipleOccursSequenceInSequence
specifier|protected
name|boolean
name|equals
parameter_list|(
name|MultipleOccursSequenceInSequence
name|x
parameter_list|,
name|MultipleOccursSequenceInSequence
name|y
parameter_list|)
block|{
name|int
name|size
init|=
name|x
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|y
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleOccursSequenceInSequence
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"MultipleOccursSequenceInSequence"
argument_list|)
condition|)
block|{
return|return;
block|}
name|MultipleOccursSequenceInSequence
name|x
init|=
operator|new
name|MultipleOccursSequenceInSequence
argument_list|()
decl_stmt|;
name|x
operator|.
name|getValue
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|MultipleOccursSequenceInSequence
name|yOriginal
init|=
operator|new
name|MultipleOccursSequenceInSequence
argument_list|()
decl_stmt|;
name|yOriginal
operator|.
name|getValue
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"3200"
argument_list|)
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|MultipleOccursSequenceInSequence
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|MultipleOccursSequenceInSequence
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|MultipleOccursSequenceInSequence
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testMultipleOccursSequenceInSequence
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testMultipleOccursSequenceInSequence
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testMultipleOccursSequenceInSequence
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testMultipleOccursSequenceInSequence(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testMultipleOccursSequenceInSequence(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testMultipleOccursSequenceInSequence(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.StructWithBinary;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|StructWithBinary
name|x
parameter_list|,
name|StructWithBinary
name|y
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getBase64
argument_list|()
argument_list|,
name|y
operator|.
name|getBase64
argument_list|()
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getHex
argument_list|()
argument_list|,
name|y
operator|.
name|getHex
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithBinary
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithBinary"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithBinary
name|x
init|=
operator|new
name|StructWithBinary
argument_list|()
decl_stmt|;
name|x
operator|.
name|setBase64
argument_list|(
literal|"base64Binary_x"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setHex
argument_list|(
literal|"hexBinary_x"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|StructWithBinary
name|yOriginal
init|=
operator|new
name|StructWithBinary
argument_list|()
decl_stmt|;
name|yOriginal
operator|.
name|setBase64
argument_list|(
literal|"base64Binary_y"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|yOriginal
operator|.
name|setHex
argument_list|(
literal|"hexBinary_y"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithBinary
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithBinary
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithBinary
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithBinary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithBinary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithBinary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStructWithBinary(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithBinary(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithBinary(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ChoiceWithBinary;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceWithBinary
name|x
parameter_list|,
name|ChoiceWithBinary
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getBase64
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getBase64
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getBase64
argument_list|()
argument_list|,
name|y
operator|.
name|getBase64
argument_list|()
argument_list|)
return|;
block|}
return|return
name|x
operator|.
name|getHex
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getHex
argument_list|()
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getHex
argument_list|()
argument_list|,
name|y
operator|.
name|getHex
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceWithBinary
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceWithBinary"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ChoiceWithBinary
name|x
init|=
operator|new
name|ChoiceWithBinary
argument_list|()
decl_stmt|;
name|x
operator|.
name|setBase64
argument_list|(
literal|"base64Binary_x"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ChoiceWithBinary
name|yOriginal
init|=
operator|new
name|ChoiceWithBinary
argument_list|()
decl_stmt|;
name|yOriginal
operator|.
name|setHex
argument_list|(
literal|"hexBinary_y"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceWithBinary
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceWithBinary
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceWithBinary
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceWithBinary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceWithBinary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceWithBinary
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceWithBinary(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithBinary(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithBinary(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ChoiceWithGroupChoice;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceWithGroupChoice
name|x
parameter_list|,
name|ChoiceWithGroupChoice
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherFloat
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherInt
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherString
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarOtherString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceWithGroupChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceWithGroupChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ChoiceWithGroupChoice
name|x
init|=
operator|new
name|ChoiceWithGroupChoice
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|ChoiceWithGroupChoice
name|yOrig
init|=
operator|new
name|ChoiceWithGroupChoice
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarOtherString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceWithGroupChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceWithGroupChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceWithGroupChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceWithGroupChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceWithGroupChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceWithGroupChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceWithGroupChoice(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithGroupChoice(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithGroupChoice(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ChoiceWithGroupSeq;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceWithGroupSeq
name|x
parameter_list|,
name|ChoiceWithGroupSeq
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherInt
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherFloat
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarOtherString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceWithGroupSeq
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceWithGroupSeq"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ChoiceWithGroupSeq
name|x
init|=
operator|new
name|ChoiceWithGroupSeq
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|ChoiceWithGroupSeq
name|yOrig
init|=
operator|new
name|ChoiceWithGroupSeq
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarOtherInt
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarOtherString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarOtherFloat
argument_list|(
literal|10.1f
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceWithGroupSeq
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceWithGroupSeq
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceWithGroupSeq
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceWithGroupSeq
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceWithGroupSeq
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceWithGroupSeq
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceWithGroupSeq(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithGroupSeq(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithGroupSeq(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ChoiceWithGroups;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceWithGroups
name|x
parameter_list|,
name|ChoiceWithGroups
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|&&
name|x
operator|.
name|getVarFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarOtherFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherFloat
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarOtherInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarOtherInt
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarOtherString
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarOtherString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarOtherString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceWithGroups
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceWithGroups"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ChoiceWithGroups
name|x
init|=
operator|new
name|ChoiceWithGroups
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|ChoiceWithGroups
name|yOrig
init|=
operator|new
name|ChoiceWithGroups
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarOtherString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceWithGroups
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceWithGroups
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceWithGroups
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceWithGroups
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceWithGroups
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceWithGroups
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceWithGroups(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithGroups(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithGroups(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ExtBase64Binary;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ExtBase64Binary
name|x
parameter_list|,
name|ExtBase64Binary
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getId
argument_list|()
operator|==
name|y
operator|.
name|getId
argument_list|()
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtBase64Binary
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ExtBase64Binary"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ExtBase64Binary
name|x1
init|=
operator|new
name|ExtBase64Binary
argument_list|()
decl_stmt|;
name|x1
operator|.
name|setValue
argument_list|(
literal|"base64a"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|x1
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ExtBase64Binary
name|y1
init|=
operator|new
name|ExtBase64Binary
argument_list|()
decl_stmt|;
name|y1
operator|.
name|setValue
argument_list|(
literal|"base64b"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|y1
operator|.
name|setId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ExtBase64Binary
argument_list|>
name|y1Holder
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|y1
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ExtBase64Binary
argument_list|>
name|z1
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ExtBase64Binary
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testExtBase64Binary
argument_list|(
name|x1
argument_list|,
name|y1Holder
argument_list|,
name|z1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testExtBase64Binary
argument_list|(
name|x1
argument_list|,
name|y1Holder
argument_list|,
name|z1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testExtBase64Binary
argument_list|(
name|x1
argument_list|,
name|y1Holder
argument_list|,
name|z1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testExtBase64Binary(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x1
argument_list|,
name|y1Holder
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testExtBase64Binary(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|y1
argument_list|,
name|z1
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testExtBase64Binary(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x1
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.StructWithAnyAttribute;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|StructWithAnyAttribute
name|x
parameter_list|,
name|StructWithAnyAttribute
name|y
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
name|y
operator|.
name|getVarInt
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|equalsNilable
argument_list|(
name|x
operator|.
name|getAtString
argument_list|()
argument_list|,
name|y
operator|.
name|getAtString
argument_list|()
argument_list|)
operator|||
operator|!
name|equalsNilable
argument_list|(
name|x
operator|.
name|getAtInt
argument_list|()
argument_list|,
name|y
operator|.
name|getAtInt
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|equalsQNameStringPairs
argument_list|(
name|x
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|y
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|equalsQNameStringPairs
parameter_list|(
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|x
parameter_list|,
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|y
parameter_list|)
block|{
if|if
condition|(
operator|(
name|x
operator|==
literal|null
operator|&&
name|y
operator|!=
literal|null
operator|)
operator|||
operator|(
name|x
operator|!=
literal|null
operator|&&
name|y
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|x
operator|.
name|isEmpty
argument_list|()
operator|&&
name|y
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|x
operator|.
name|size
argument_list|()
operator|!=
name|y
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
argument_list|<
name|QName
argument_list|>
name|itx
init|=
name|x
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itx
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QName
name|attName
init|=
name|itx
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|attName
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|attValue
init|=
name|y
operator|.
name|get
argument_list|(
name|attName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attValue
operator|==
literal|null
operator|||
operator|!
name|attValue
operator|.
name|equals
argument_list|(
name|x
operator|.
name|get
argument_list|(
name|attName
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithAnyAttribute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithAnyAttribute"
argument_list|)
condition|)
block|{
return|return;
block|}
name|QName
name|xAt1Name
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"at_one"
argument_list|)
decl_stmt|;
name|QName
name|xAt2Name
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"at_two"
argument_list|)
decl_stmt|;
name|QName
name|yAt3Name
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/type_test"
argument_list|,
literal|"at_thr"
argument_list|)
decl_stmt|;
name|QName
name|yAt4Name
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/type_test"
argument_list|,
literal|"at_fou"
argument_list|)
decl_stmt|;
name|StructWithAnyAttribute
name|x
init|=
operator|new
name|StructWithAnyAttribute
argument_list|()
decl_stmt|;
name|StructWithAnyAttribute
name|y
init|=
operator|new
name|StructWithAnyAttribute
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAtString
argument_list|(
literal|"hello attribute"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAtInt
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|y
operator|.
name|setVarString
argument_list|(
literal|"there"
argument_list|)
expr_stmt|;
name|y
operator|.
name|setVarInt
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
name|y
operator|.
name|setAtString
argument_list|(
literal|"there attribute"
argument_list|)
expr_stmt|;
name|y
operator|.
name|setAtInt
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2002
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|xAttrMap
init|=
name|x
operator|.
name|getOtherAttributes
argument_list|()
decl_stmt|;
name|xAttrMap
operator|.
name|put
argument_list|(
name|xAt1Name
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|xAttrMap
operator|.
name|put
argument_list|(
name|xAt2Name
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|yAttrMap
init|=
name|y
operator|.
name|getOtherAttributes
argument_list|()
decl_stmt|;
name|yAttrMap
operator|.
name|put
argument_list|(
name|yAt3Name
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|yAttrMap
operator|.
name|put
argument_list|(
name|yAt4Name
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAnyAttribute
argument_list|>
name|yh
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAnyAttribute
argument_list|>
name|zh
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithAnyAttribute
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithAnyAttribute
argument_list|(
name|x
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithAnyAttribute
argument_list|(
name|x
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithAnyAttribute
argument_list|(
name|x
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStructWithAnyAttribute(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|yh
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithAnyAttribute(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|y
argument_list|,
name|zh
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithAnyAttribute(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ChoiceWithAnyAttribute;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceWithAnyAttribute
name|x
parameter_list|,
name|ChoiceWithAnyAttribute
name|y
parameter_list|)
block|{
name|String
name|xString
init|=
name|x
operator|.
name|getVarString
argument_list|()
decl_stmt|;
name|String
name|yString
init|=
name|y
operator|.
name|getVarString
argument_list|()
decl_stmt|;
name|Integer
name|xInt
init|=
name|x
operator|.
name|getVarInt
argument_list|()
decl_stmt|;
name|Integer
name|yInt
init|=
name|y
operator|.
name|getVarInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|xString
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|yString
operator|==
literal|null
operator|||
operator|!
name|xString
operator|.
name|equals
argument_list|(
name|yString
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|xString
operator|+
literal|" != "
operator|+
name|yString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|xInt
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|yInt
operator|==
literal|null
operator|||
operator|!
operator|(
name|xInt
operator|.
name|equals
argument_list|(
name|yInt
argument_list|)
operator|)
condition|)
block|{
name|fail
argument_list|(
name|xInt
operator|+
literal|" != "
operator|+
name|yInt
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"null choice"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|equalsNilable
argument_list|(
name|x
operator|.
name|getAtString
argument_list|()
argument_list|,
name|y
operator|.
name|getAtString
argument_list|()
argument_list|)
operator|||
operator|!
name|equalsNilable
argument_list|(
name|x
operator|.
name|getAtInt
argument_list|()
argument_list|,
name|y
operator|.
name|getAtInt
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"grrr"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|equalsQNameStringPairs
argument_list|(
name|x
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|y
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceWithAnyAttribute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceWithAnyAttribute"
argument_list|)
condition|)
block|{
return|return;
block|}
name|QName
name|xAt1Name
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"at_one"
argument_list|)
decl_stmt|;
name|QName
name|xAt2Name
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.iona.com/type_test"
argument_list|,
literal|"at_two"
argument_list|)
decl_stmt|;
name|QName
name|yAt3Name
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/type_test"
argument_list|,
literal|"at_thr"
argument_list|)
decl_stmt|;
name|QName
name|yAt4Name
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/type_test"
argument_list|,
literal|"at_fou"
argument_list|)
decl_stmt|;
name|ChoiceWithAnyAttribute
name|x
init|=
operator|new
name|ChoiceWithAnyAttribute
argument_list|()
decl_stmt|;
name|ChoiceWithAnyAttribute
name|y
init|=
operator|new
name|ChoiceWithAnyAttribute
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAtString
argument_list|(
literal|"hello attribute"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAtInt
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|y
operator|.
name|setVarInt
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
name|y
operator|.
name|setAtString
argument_list|(
literal|"there attribute"
argument_list|)
expr_stmt|;
name|y
operator|.
name|setAtInt
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2002
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|xAttrMap
init|=
name|x
operator|.
name|getOtherAttributes
argument_list|()
decl_stmt|;
name|xAttrMap
operator|.
name|put
argument_list|(
name|xAt1Name
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|xAttrMap
operator|.
name|put
argument_list|(
name|xAt2Name
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|yAttrMap
init|=
name|y
operator|.
name|getOtherAttributes
argument_list|()
decl_stmt|;
name|yAttrMap
operator|.
name|put
argument_list|(
name|yAt3Name
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|yAttrMap
operator|.
name|put
argument_list|(
name|yAt4Name
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceWithAnyAttribute
argument_list|>
name|yh
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceWithAnyAttribute
argument_list|>
name|zh
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceWithAnyAttribute
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceWithAnyAttribute
argument_list|(
name|x
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceWithAnyAttribute
argument_list|(
name|x
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceWithAnyAttribute
argument_list|(
name|x
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceWithAnyAttribute(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|yh
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithAnyAttribute(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|y
argument_list|,
name|zh
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithAnyAttribute(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.OccuringStruct;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|OccuringStruct
name|x
parameter_list|,
name|OccuringStruct
name|y
parameter_list|)
block|{
if|if
condition|(
operator|!
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarAttrib
argument_list|()
argument_list|,
name|y
operator|.
name|getVarAttrib
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|equalsFloatIntStringList
argument_list|(
name|x
operator|.
name|getVarFloatAndVarIntAndVarString
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloatAndVarIntAndVarString
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|equalsFloatIntStringList
parameter_list|(
name|List
argument_list|<
name|Serializable
argument_list|>
name|xList
parameter_list|,
name|List
argument_list|<
name|Serializable
argument_list|>
name|yList
parameter_list|)
block|{
name|int
name|size
init|=
name|xList
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|yList
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Float
operator|&&
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Float
condition|)
block|{
name|Float
name|fx
init|=
operator|(
name|Float
operator|)
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Float
name|fy
init|=
operator|(
name|Float
operator|)
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fx
operator|.
name|compareTo
argument_list|(
name|fy
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Integer
operator|&&
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Integer
condition|)
block|{
name|Integer
name|ix
init|=
operator|(
name|Integer
operator|)
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|iy
init|=
operator|(
name|Integer
operator|)
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|iy
operator|.
name|compareTo
argument_list|(
name|ix
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|String
operator|&&
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|String
condition|)
block|{
name|String
name|sx
init|=
operator|(
name|String
operator|)
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|sy
init|=
operator|(
name|String
operator|)
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sx
operator|.
name|equals
argument_list|(
name|sy
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOccuringStruct
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"OccuringStruct"
argument_list|)
condition|)
block|{
return|return;
block|}
name|OccuringStruct
name|x
init|=
operator|new
name|OccuringStruct
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|theList
init|=
name|x
operator|.
name|getVarFloatAndVarIntAndVarString
argument_list|()
decl_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|1.14f
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|11.14f
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarAttrib
argument_list|(
literal|"x_attr"
argument_list|)
expr_stmt|;
name|OccuringStruct
name|yOriginal
init|=
operator|new
name|OccuringStruct
argument_list|()
decl_stmt|;
name|theList
operator|=
name|yOriginal
operator|.
name|getVarFloatAndVarIntAndVarString
argument_list|()
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|yOriginal
operator|.
name|setVarAttrib
argument_list|(
literal|"y_attr"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|OccuringStruct
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|OccuringStruct
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|OccuringStruct
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testOccuringStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testOccuringStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testOccuringStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testOccuringStruct(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringStruct(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringStruct(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.OccuringStruct1;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|OccuringStruct1
name|x
parameter_list|,
name|OccuringStruct1
name|y
parameter_list|)
block|{
return|return
name|equalsFloatIntStringList
argument_list|(
name|x
operator|.
name|getVarFloatAndVarIntAndVarString
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloatAndVarIntAndVarString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOccuringStruct1
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"OccuringStruct1"
argument_list|)
condition|)
block|{
return|return;
block|}
name|OccuringStruct1
name|x
init|=
operator|new
name|OccuringStruct1
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|theList
init|=
name|x
operator|.
name|getVarFloatAndVarIntAndVarString
argument_list|()
decl_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"xX"
argument_list|)
expr_stmt|;
name|OccuringStruct1
name|yOriginal
init|=
operator|new
name|OccuringStruct1
argument_list|()
decl_stmt|;
name|theList
operator|=
name|yOriginal
operator|.
name|getVarFloatAndVarIntAndVarString
argument_list|()
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|11.11f
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|22
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"yY"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|OccuringStruct1
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|OccuringStruct1
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|OccuringStruct1
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testOccuringStruct1
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testOccuringStruct1
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testOccuringStruct1
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testOccuringStruct1(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringStruct1(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringStruct1(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.OccuringStruct2;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|OccuringStruct2
name|x
parameter_list|,
name|OccuringStruct2
name|y
parameter_list|)
block|{
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getVarFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|Serializable
argument_list|>
name|xList
init|=
name|x
operator|.
name|getVarIntAndVarString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|yList
init|=
name|y
operator|.
name|getVarIntAndVarString
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|xList
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|yList
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Integer
operator|&&
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Integer
condition|)
block|{
name|Integer
name|ix
init|=
operator|(
name|Integer
operator|)
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|iy
init|=
operator|(
name|Integer
operator|)
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|iy
operator|.
name|compareTo
argument_list|(
name|ix
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|String
operator|&&
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|String
condition|)
block|{
name|String
name|sx
init|=
operator|(
name|String
operator|)
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|sy
init|=
operator|(
name|String
operator|)
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sx
operator|.
name|equals
argument_list|(
name|sy
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOccuringStruct2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"OccuringStruct2"
argument_list|)
condition|)
block|{
return|return;
block|}
name|OccuringStruct2
name|x
init|=
operator|new
name|OccuringStruct2
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|1.14f
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|theList
init|=
name|x
operator|.
name|getVarIntAndVarString
argument_list|()
decl_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|OccuringStruct2
name|yOriginal
init|=
operator|new
name|OccuringStruct2
argument_list|()
decl_stmt|;
name|yOriginal
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|theList
operator|=
name|yOriginal
operator|.
name|getVarIntAndVarString
argument_list|()
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"the answer"
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"hammer"
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"anvil"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|OccuringStruct2
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|OccuringStruct2
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|OccuringStruct2
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testOccuringStruct2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testOccuringStruct2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testOccuringStruct2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testOccuringStruct2(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringStruct2(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringStruct2(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.OccuringChoice;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|OccuringChoice
name|x
parameter_list|,
name|OccuringChoice
name|y
parameter_list|)
block|{
if|if
condition|(
operator|!
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarAttrib
argument_list|()
argument_list|,
name|y
operator|.
name|getVarAttrib
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|equalsFloatIntStringList
argument_list|(
name|x
operator|.
name|getVarFloatOrVarIntOrVarString
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloatOrVarIntOrVarString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOccuringChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"OccuringChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|OccuringChoice
name|x
init|=
operator|new
name|OccuringChoice
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|theList
init|=
name|x
operator|.
name|getVarFloatOrVarIntOrVarString
argument_list|()
decl_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|1.14f
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|11.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarAttrib
argument_list|(
literal|"x_attr"
argument_list|)
expr_stmt|;
name|OccuringChoice
name|yOriginal
init|=
operator|new
name|OccuringChoice
argument_list|()
decl_stmt|;
name|theList
operator|=
name|yOriginal
operator|.
name|getVarFloatOrVarIntOrVarString
argument_list|()
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|yOriginal
operator|.
name|setVarAttrib
argument_list|(
literal|"y_attr"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|OccuringChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|OccuringChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|OccuringChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testOccuringChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testOccuringChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testOccuringChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testOccuringChoice(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|theList
operator|.
name|add
argument_list|(
literal|52
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|4.14f
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testOccuringChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testOccuringChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testOccuringChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testOccuringChoice(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.OccuringChoice1;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|boolean
name|equals
parameter_list|(
name|OccuringChoice1
name|x
parameter_list|,
name|OccuringChoice1
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|Comparable
argument_list|>
name|xList
init|=
name|x
operator|.
name|getVarFloatOrVarInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Comparable
argument_list|>
name|yList
init|=
name|y
operator|.
name|getVarFloatOrVarInt
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|xList
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|yList
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Integer
operator|&&
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Integer
condition|)
block|{
name|Integer
name|xi
init|=
operator|(
name|Integer
operator|)
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|yi
init|=
operator|(
name|Integer
operator|)
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|xi
operator|.
name|compareTo
argument_list|(
name|yi
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Float
operator|&&
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Float
condition|)
block|{
name|Float
name|xf
init|=
operator|(
name|Float
operator|)
name|xList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Float
name|yf
init|=
operator|(
name|Float
operator|)
name|yList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|xf
operator|.
name|compareTo
argument_list|(
name|yf
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOccuringChoice1
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"OccuringChoice1"
argument_list|)
condition|)
block|{
return|return;
block|}
name|OccuringChoice1
name|x
init|=
operator|new
name|OccuringChoice1
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
argument_list|<
name|Comparable
argument_list|>
name|theList
init|=
name|x
operator|.
name|getVarFloatOrVarInt
argument_list|()
decl_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|1.14f
argument_list|)
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|theList
operator|.
name|add
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|11.14f
argument_list|)
argument_list|)
expr_stmt|;
comment|// leave y empty
name|OccuringChoice1
name|yOriginal
init|=
operator|new
name|OccuringChoice1
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|OccuringChoice1
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|OccuringChoice1
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|OccuringChoice1
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testOccuringChoice1
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testOccuringChoice1
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testOccuringChoice1
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testOccuringChoice1(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice1(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice1(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.OccuringChoice2;
specifier|protected
name|boolean
name|equals
parameter_list|(
name|OccuringChoice2
name|x
parameter_list|,
name|OccuringChoice2
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
operator|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
name|y
operator|.
name|getVarInt
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOccuringChoice2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"OccuringChoice2"
argument_list|)
condition|)
block|{
return|return;
block|}
name|OccuringChoice2
name|x
init|=
operator|new
name|OccuringChoice2
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|OccuringChoice2
name|yOriginal
init|=
operator|new
name|OccuringChoice2
argument_list|()
decl_stmt|;
name|yOriginal
operator|.
name|setVarString
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|OccuringChoice2
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|OccuringChoice2
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|OccuringChoice2
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testOccuringChoice2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testOccuringChoice2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testOccuringChoice2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testOccuringChoice2(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice2(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice2(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|x
operator|=
operator|new
name|OccuringChoice2
argument_list|()
expr_stmt|;
name|yOriginal
operator|=
operator|new
name|OccuringChoice2
argument_list|()
expr_stmt|;
name|yOriginal
operator|.
name|setVarString
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testOccuringChoice2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testOccuringChoice2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testOccuringChoice2
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testOccuringChoice2(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice2(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOriginal
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testOccuringChoice2(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnonEnumList
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"AnonEnumList"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|testDocLiteral
operator|||
name|testXMLBinding
condition|)
block|{
name|List
argument_list|<
name|Short
argument_list|>
name|x
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
operator|(
name|short
operator|)
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Short
argument_list|>
name|yOrig
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|short
operator|)
literal|1000
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|Short
argument_list|>
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|List
argument_list|<
name|Short
argument_list|>
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Short
argument_list|>
name|ret
init|=
name|testDocLiteral
condition|?
name|docClient
operator|.
name|testAnonEnumList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
else|:
name|xmlClient
operator|.
name|testAnonEnumList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testAnonEnumList(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testAnonEnumList(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|equals
argument_list|(
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testAnonEnumList(): Incorrect return value"
argument_list|,
name|x
operator|.
name|equals
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Short
index|[]
name|x
init|=
block|{
operator|(
name|short
operator|)
literal|10
block|,
operator|(
name|short
operator|)
literal|100
block|}
decl_stmt|;
name|Short
index|[]
name|yOrig
init|=
block|{
operator|(
name|short
operator|)
literal|1000
block|,
operator|(
name|short
operator|)
literal|10
block|}
decl_stmt|;
name|Holder
argument_list|<
name|Short
index|[]
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Short
index|[]
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|Short
index|[]
name|ret
init|=
name|rpcClient
operator|.
name|testAnonEnumList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|y
operator|.
name|value
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|value
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testAnonEnumList(): Incorrect value for inout param"
argument_list|,
name|x
index|[
name|i
index|]
operator|.
name|shortValue
argument_list|()
argument_list|,
name|y
operator|.
name|value
index|[
name|i
index|]
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testAnonEnumList(): Incorrect value for out param"
argument_list|,
name|yOrig
index|[
name|i
index|]
operator|.
name|shortValue
argument_list|()
argument_list|,
name|z
operator|.
name|value
index|[
name|i
index|]
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testAnonEnumList(): Incorrect return value"
argument_list|,
name|x
index|[
name|i
index|]
operator|.
name|shortValue
argument_list|()
argument_list|,
name|ret
index|[
name|i
index|]
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnionWithAnonEnum
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"UnionWithAnonEnum"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|x
init|=
literal|"5"
decl_stmt|;
name|String
name|yOrig
init|=
literal|"n/a"
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testUnionWithAnonEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testUnionWithAnonEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testUnionWithAnonEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testUnionWithAnonEnum(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testUnionWithAnonEnum(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testUnionWithAnonEnum(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

