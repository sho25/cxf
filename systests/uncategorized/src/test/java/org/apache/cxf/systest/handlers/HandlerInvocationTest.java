begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|Detail
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPBody
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPEnvelope
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Dispatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|LogicalMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|HandlerResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|LogicalMessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|PortInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|soap
operator|.
name|SOAPMessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|HandlerTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|HandlerTestService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|PingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|types
operator|.
name|PingOneWay
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|handler_test
operator|.
name|types
operator|.
name|PingResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|HandlerInvocationTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|private
specifier|final
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/handler_test"
argument_list|,
literal|"HandlerTestService"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/handler_test"
argument_list|,
literal|"SoapPort"
argument_list|)
decl_stmt|;
specifier|private
name|URL
name|wsdl
decl_stmt|;
specifier|private
name|HandlerTestService
name|service
decl_stmt|;
specifier|private
name|HandlerTest
name|handlerTest
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|BusException
block|{
try|try
block|{
name|super
operator|.
name|createBus
argument_list|()
expr_stmt|;
name|wsdl
operator|=
name|HandlerInvocationTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/wsdl/handler_test.wsdl"
argument_list|)
expr_stmt|;
name|service
operator|=
operator|new
name|HandlerTestService
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
name|handlerTest
operator|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HandlerTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddHandlerThroughHandlerResolverClientSide
parameter_list|()
block|{
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|MyHandlerResolver
name|myHandlerResolver
init|=
operator|new
name|MyHandlerResolver
argument_list|(
name|handler1
argument_list|,
name|handler2
argument_list|)
decl_stmt|;
name|service
operator|.
name|setHandlerResolver
argument_list|(
name|myHandlerResolver
argument_list|)
expr_stmt|;
name|HandlerTest
name|handlerTestNew
init|=
name|service
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HandlerTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|handlerTestNew
operator|.
name|pingOneWay
argument_list|()
expr_stmt|;
name|String
name|bindingID
init|=
name|myHandlerResolver
operator|.
name|bindingID
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://schemas.xmlsoap.org/wsdl/soap/http"
argument_list|,
name|bindingID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddingUnusedHandlersThroughConfigFile
parameter_list|()
block|{
name|HandlerTestServiceWithAnnotation
name|service1
init|=
operator|new
name|HandlerTestServiceWithAnnotation
argument_list|(
name|wsdl
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|HandlerTest
name|handlerTest1
init|=
name|service1
operator|.
name|getPort
argument_list|(
name|portName
argument_list|,
name|HandlerTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingProvider
name|bp1
init|=
operator|(
name|BindingProvider
operator|)
name|handlerTest1
decl_stmt|;
name|Binding
name|binding1
init|=
name|bp1
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Handler
argument_list|>
name|port1HandlerChain
init|=
name|binding1
operator|.
name|getHandlerChain
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|port1HandlerChain
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerOneWay
parameter_list|()
block|{
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|)
expr_stmt|;
name|handlerTest
operator|.
name|pingOneWay
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerTwoWay
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|)
expr_stmt|;
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageReturnTrueClient
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
name|LogicalMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Source
name|source
init|=
name|msg
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler2
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|,
name|soapHandler2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resp
init|=
name|handlerTest
operator|.
name|ping
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handle message was not invoked"
argument_list|,
literal|2
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handle message was not invoked"
argument_list|,
literal|2
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handle message was not invoked"
argument_list|,
literal|2
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handle message was not invoked"
argument_list|,
literal|2
argument_list|,
name|soapHandler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|soapHandler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|soapHandler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|soapHandler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|soapHandler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
comment|// the server has encoded into the response the order in
comment|// which the handlers have been invoked, parse it and make
comment|// sure everything is ok expected order for inbound interceptors
name|String
index|[]
name|handlerNames
init|=
block|{
literal|"soapHandler4"
block|,
literal|"soapHandler3"
block|,
literal|"handler2"
block|,
literal|"handler1"
block|,
literal|"servant"
block|,
literal|"handler1"
block|,
literal|"handler2"
block|,
literal|"soapHandler3"
block|,
literal|"soapHandler4"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|handlerNames
operator|.
name|length
argument_list|,
name|resp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|resp
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|expected
range|:
name|handlerNames
control|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleMessageReturnFalseClientOutBound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|clientHandlerMessage
init|=
literal|"handler2 client side"
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
name|LogicalMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"logical message is null"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|JAXBContext
name|jaxbCtx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|PingOneWay
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|PingResponse
name|resp
init|=
operator|new
name|PingResponse
argument_list|()
decl_stmt|;
name|resp
operator|.
name|getHandlersInfo
argument_list|()
operator|.
name|add
argument_list|(
name|clientHandlerMessage
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setPayload
argument_list|(
name|resp
argument_list|,
name|jaxbCtx
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler3
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|handler3
argument_list|,
name|soapHandler1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resp
init|=
name|handlerTest
operator|.
name|ping
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|clientHandlerMessage
argument_list|,
name|resp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the first handler must be invoked twice"
argument_list|,
literal|2
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the second handler must be invoked once only on outbound"
argument_list|,
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the third handler must not be invoked"
argument_list|,
literal|0
argument_list|,
name|handler3
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the last handler must not be invoked"
argument_list|,
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
comment|//outbound MEP processing ceased, the message direction was changed to inbound, essentially this is
comment|//only one MEP. So close is called only once at the end of inbound MEP, and the close order is
comment|//reversed to the outbound handler invoking order.
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|0
argument_list|,
name|handler3
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleMessageReturnFalseClientInBound
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler3
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|handler3
argument_list|,
name|soapHandler1
argument_list|)
expr_stmt|;
name|handlerTest
operator|.
name|ping
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler3
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler3
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|soapHandler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler3
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler3
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageReturnFalseClientOutbound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|clientHandlerMessage
init|=
literal|"client side"
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
name|LogicalMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"logical message is null"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|JAXBContext
name|jaxbCtx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|PingOneWay
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|PingResponse
name|resp
init|=
operator|new
name|PingResponse
argument_list|()
decl_stmt|;
name|resp
operator|.
name|getHandlersInfo
argument_list|()
operator|.
name|add
argument_list|(
name|clientHandlerMessage
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setPayload
argument_list|(
name|resp
argument_list|,
name|jaxbCtx
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler2
init|=
operator|new
name|TestSOAPHandler
argument_list|<
name|SOAPMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|,
name|soapHandler2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resp
init|=
name|handlerTest
operator|.
name|ping
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|clientHandlerMessage
argument_list|,
name|resp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|soapHandler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|soapHandler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|soapHandler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|soapHandler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageReturnFalseClientInbound
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler2
init|=
operator|new
name|TestSOAPHandler
argument_list|<
name|SOAPMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|,
name|soapHandler2
argument_list|)
expr_stmt|;
name|handlerTest
operator|.
name|ping
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|soapHandler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|soapHandler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|soapHandler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|soapHandler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|soapHandler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleMessageReturnsFalseServerInbound
parameter_list|()
throws|throws
name|PingException
block|{
name|String
index|[]
name|expectedHandlers
init|=
block|{
literal|"soapHandler4"
block|,
literal|"soapHandler3"
block|,
literal|"handler2"
block|,
literal|"soapHandler3"
block|,
literal|"soapHandler4"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resp
init|=
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"handler2 inbound stop"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedHandlers
operator|.
name|length
argument_list|,
name|resp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|expected
range|:
name|expectedHandlers
control|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|resp
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageReturnsFalseServerInbound
parameter_list|()
throws|throws
name|PingException
block|{
name|String
index|[]
name|expectedHandlers
init|=
block|{
literal|"soapHandler4"
block|,
literal|"soapHandler3"
block|,
literal|"soapHandler4"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resp
init|=
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 inbound stop"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedHandlers
operator|.
name|length
argument_list|,
name|resp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|expected
range|:
name|expectedHandlers
control|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|resp
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageReturnsFalseServerOutbound
parameter_list|()
throws|throws
name|PingException
block|{
name|String
index|[]
name|expectedHandlers
init|=
block|{
literal|"soapHandler3 outbound stop"
block|,
literal|"soapHandler4"
block|,
literal|"soapHandler3"
block|,
literal|"handler2"
block|,
literal|"handler1"
block|,
literal|"handler1"
block|,
literal|"handler2"
block|,
literal|"soapHandler3"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resp
init|=
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 outbound stop"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedHandlers
operator|.
name|length
argument_list|,
name|resp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|expected
range|:
name|expectedHandlers
control|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|resp
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleMessageThrowsProtocolExceptionClientOutbound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|clientHandlerMessage
init|=
literal|"handler1 client side"
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|clientHandlerMessage
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|)
expr_stmt|;
try|try
block|{
name|handlerTest
operator|.
name|ping
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|clientHandlerMessage
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleMessageThrowsProtocolExceptionClientInbound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|clientHandlerMessage
init|=
literal|"handler1 client side"
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|clientHandlerMessage
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|)
expr_stmt|;
try|try
block|{
name|handlerTest
operator|.
name|ping
argument_list|()
expr_stmt|;
comment|//fail("did not get expected exception");
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|clientHandlerMessage
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleMessageThrowsRuntimeExceptionClientOutbound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|clientHandlerMessage
init|=
literal|"handler1 client side"
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|clientHandlerMessage
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|)
expr_stmt|;
try|try
block|{
name|handlerTest
operator|.
name|ping
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|clientHandlerMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleMessageThrowsRuntimeExceptionClientInbound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|clientHandlerMessage
init|=
literal|"handler1 client side"
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|clientHandlerMessage
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|)
expr_stmt|;
try|try
block|{
name|handlerTest
operator|.
name|ping
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|clientHandlerMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageThrowsProtocolExceptionClientOutbound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|clientHandlerMessage
init|=
literal|"handler1 client side"
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|<
name|SOAPMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|clientHandlerMessage
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler2
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|,
name|soapHandler2
argument_list|)
expr_stmt|;
try|try
block|{
name|handlerTest
operator|.
name|ping
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|clientHandlerMessage
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageThrowsProtocolExceptionClientInbound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|clientHandlerMessage
init|=
literal|"handler1 client side"
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|<
name|SOAPMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
name|clientHandlerMessage
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler2
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|,
name|soapHandler2
argument_list|)
expr_stmt|;
try|try
block|{
name|handlerTest
operator|.
name|ping
argument_list|()
expr_stmt|;
comment|//fail("did not get expected exception");
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|clientHandlerMessage
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|soapHandler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageThrowsRuntimeExceptionClientOutbound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|clientHandlerMessage
init|=
literal|"handler1 client side"
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|<
name|SOAPMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|clientHandlerMessage
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler2
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|,
name|soapHandler2
argument_list|)
expr_stmt|;
try|try
block|{
name|handlerTest
operator|.
name|ping
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|clientHandlerMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|soapHandler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageThrowsRuntimeExceptionServerInbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 inbound throw RuntimeException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HandleMessage throws exception"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageThrowsRuntimeExceptionServerOutbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 outbound throw RuntimeException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HandleMessage throws exception"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageThrowsProtocolExceptionServerInbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 inbound throw ProtocolException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected WebServiceException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HandleMessage throws exception"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageThrowsSOAPFaultExceptionServerInbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 inbound throw SOAPFaultExceptionWDetail"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected SOAPFaultException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HandleMessage throws exception"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|SOAPFault
name|fault
init|=
name|e
operator|.
name|getFault
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|fault
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|QName
argument_list|(
name|SOAPConstants
operator|.
name|URI_NS_SOAP_ENVELOPE
argument_list|,
literal|"Server"
argument_list|)
argument_list|,
name|fault
operator|.
name|getFaultCodeAsQName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://gizmos.com/orders"
argument_list|,
name|fault
operator|.
name|getFaultActor
argument_list|()
argument_list|)
expr_stmt|;
name|Detail
name|detail
init|=
name|fault
operator|.
name|getDetail
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|detail
argument_list|)
expr_stmt|;
name|QName
name|nn
init|=
operator|new
name|QName
argument_list|(
literal|"http://gizmos.com/orders/"
argument_list|,
literal|"order"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Element
argument_list|>
name|it
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|detail
operator|.
name|getChildElements
argument_list|(
name|nn
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|el
operator|.
name|normalize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Quantity element does not have a value"
argument_list|,
name|el
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|el
operator|.
name|normalize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incomplete address: no zip code"
argument_list|,
name|el
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*-------------------------------------------------------     * This is the expected order     *-------------------------------------------------------     * soapHandler3.handleMessage().doInbound()     * soapHandler4.handleMessage().doInbound()     * soapHandler4 Throwing an inbound ProtocolException     * soapHandler3.handleFault()     * soapHandler3 Throwing an outbound RuntimeException     * soapHandler4.close()     * soapHandler3.close()     */
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleFaultThrowsRuntimeExceptionServerOutbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 inbound throw ProtocolException "
operator|+
literal|"soapHandler4HandleFaultThrowsRunException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected WebServiceException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"soapHandler4 HandleFault throws RuntimeException"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleFaultThrowsSOAPFaultExceptionServerOutbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 inbound throw ProtocolException "
operator|+
literal|"soapHandler4HandleFaultThrowsSOAPFaultException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected SOAPFaultException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"soapHandler4 HandleFault throws SOAPFaultException"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSOAPHandlerHandleMessageThrowsProtocolExceptionServerOutbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 outbound throw ProtocolException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected WebServiceException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HandleMessage throws exception"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerSOAPInboundHandlerThrowsSOAPFaultToClientHandlers
parameter_list|()
throws|throws
name|Exception
block|{
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleFault
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleFault
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
name|LogicalMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Source
name|source
init|=
name|msg
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler2
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleFault
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleFault
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
try|try
block|{
name|SOAPMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|,
name|soapHandler2
argument_list|)
expr_stmt|;
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"soapHandler3 inbound throw SOAPFaultException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected SOAPFaultException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
comment|/*            ByteArrayOutputStream baos = new ByteArrayOutputStream();             PrintStream ps = new PrintStream(baos, true);             e.printStackTrace(ps);             assertTrue("Did not get expected exception message",  baos.toString()                 .indexOf("HandleMessage throws exception")> -1);             assertTrue("Did not get expected javax.xml.ws.soap.SOAPFaultException", baos.toString()                 .indexOf("javax.xml.ws.soap.SOAPFaultException")> -1);*/
block|}
comment|/*        assertEquals("handle message was not invoked", 1, handler1.getHandleMessageInvoked());         assertEquals("handle message was not invoked", 1, handler2.getHandleMessageInvoked());         assertEquals("handle message was not invoked", 1, soapHandler1.getHandleMessageInvoked());         assertEquals("handle message was not invoked", 1, soapHandler2.getHandleMessageInvoked());                  assertEquals("handle message was not invoked", 1, handler1.getHandleFaultInvoked());         assertEquals("handle message was not invoked", 1, handler2.getHandleFaultInvoked());         assertEquals("handle message was not invoked", 1, soapHandler1.getHandleFaultInvoked());         assertEquals("handle message was not invoked", 1, soapHandler2.getHandleFaultInvoked());                         assertEquals("close must be called", 1, handler1.getCloseInvoked());         assertEquals("close must be called", 1, handler2.getCloseInvoked());         assertEquals("close must be called", 1, soapHandler1.getCloseInvoked());         assertEquals("close must be called", 1, soapHandler2.getCloseInvoked());                  assertTrue(soapHandler2.getInvokeOrderOfClose()< soapHandler1.getInvokeOrderOfClose());            assertTrue(soapHandler1.getInvokeOrderOfClose()< handler2.getInvokeOrderOfClose());                   assertTrue(handler2.getInvokeOrderOfClose()< handler1.getInvokeOrderOfClose());  */
block|}
comment|/*-------------------------------------------------------     * This is the expected order     *-------------------------------------------------------     * soapHandler4.handleMessage().doInbound()     * soapHandler3.handleMessage().doInbound()     * handler2.handleMessage().doInbound()     * handler1.handleMessage().doInbound()     * servant throws RuntimeException     * handler1.handleFault()     * handler2.handleFault()     * soapHandler3.handleFault()     * soapHandler4.handleFault()     * handler1.close()     * handler2.close()     * soapHandler3.close()     * soapHandler4.close()     * */
annotation|@
name|Test
specifier|public
name|void
name|testServerEndpointRemoteRuntimeException
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"servant throw WebServiceException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected WebServiceException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|e
parameter_list|)
block|{
comment|/*            e.printStackTrace();             ByteArrayOutputStream baos = new ByteArrayOutputStream();             PrintStream ps = new PrintStream(baos, true);             e.printStackTrace(ps);             assertTrue("Did not get expected exception message",  baos.toString()                 .indexOf("RemoteException with nested RuntimeException")> -1);*/
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerEndpointRemoteFault
parameter_list|()
throws|throws
name|PingException
block|{
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleFault
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleFault
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
name|LogicalMessage
name|msg
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|payload
init|=
name|convertDOMToString
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|payload
operator|.
name|indexOf
argument_list|(
literal|"<faultstring>"
operator|+
literal|"servant throws SOAPFaultException"
operator|+
literal|"</faultstring>"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|convertDOMToString
parameter_list|(
name|Source
name|s
parameter_list|)
throws|throws
name|TransformerException
block|{
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|streamResult
init|=
operator|new
name|StreamResult
argument_list|(
name|stringWriter
argument_list|)
decl_stmt|;
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|transformerFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
literal|"{http://xml.apache.org/xslt}indent-amount"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|s
argument_list|,
name|streamResult
argument_list|)
expr_stmt|;
return|return
name|stringWriter
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler2
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleFault
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleFault
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|Boolean
name|outbound
init|=
operator|(
name|Boolean
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|MESSAGE_OUTBOUND_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
name|SOAPEnvelope
name|env
init|=
name|ctx
operator|.
name|getMessage
argument_list|()
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected SOAPFault in SAAJ model"
argument_list|,
name|env
operator|.
name|getBody
argument_list|()
operator|.
name|hasFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|,
name|soapHandler2
argument_list|)
expr_stmt|;
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"servant throw SOAPFaultException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|sfe
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler2
operator|.
name|getHandleFaultInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soapHandler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler2
operator|.
name|getInvokeOrderOfClose
argument_list|()
operator|<
name|handler1
operator|.
name|getInvokeOrderOfClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*-------------------------------------------------------      * This is the expected order      *-------------------------------------------------------      * soapHandler3.handleMessage().doInbound()      * soapHandler4.handleMessage().doInbound()      * handler2.handleMessage().doInbound()      * handler1.handleMessage().doInbound()      * handler1 Throwing an inbound ProtocolException      * handler2.handleFault()      * handler2 Throwing an outbound RuntimeException      * handler1.close()      * handler1.close()      * soapHandler4.close()      * soapHandler3.close()      */
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleFaultThrowsRuntimeExceptionServerOutbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"handler1 inbound throw ProtocolException "
operator|+
literal|"handler2HandleFaultThrowsRunException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected WebServiceException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|e
parameter_list|)
block|{
comment|/*            e.printStackTrace();             ByteArrayOutputStream baos = new ByteArrayOutputStream();             PrintStream ps = new PrintStream(baos, true);             e.printStackTrace(ps);             assertTrue("Did not get expected exception message", baos.toString()                 .indexOf("handler2 HandleFault throws RuntimeException")> -1);             assertTrue("Did not get expected javax.xml.ws.soap.SOAPFaultException", baos.toString()                 .indexOf("javax.xml.ws.soap.SOAPFaultException")> -1);*/
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleFaultThrowsSOAPFaultExceptionServerOutbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"handler1 inbound throw ProtocolException "
operator|+
literal|"handler2HandleFaultThrowsSOAPFaultException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected SOAPFaultException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|e
parameter_list|)
block|{
comment|/*            e.printStackTrace();             ByteArrayOutputStream baos = new ByteArrayOutputStream();             PrintStream ps = new PrintStream(baos, true);             e.printStackTrace(ps);             assertTrue("Did not get expected exception message", baos.toString()                 .indexOf("handler2 HandleFault throws SOAPFaultException")> -1);             assertTrue("Did not get expected javax.xml.ws.soap.SOAPFaultException", baos.toString()                 .indexOf("javax.xml.ws.soap.SOAPFaultException")> -1);*/
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogicalHandlerHandleMessageThrowsProtocolExceptionServerInbound
parameter_list|()
throws|throws
name|PingException
block|{
try|try
block|{
name|handlerTest
operator|.
name|pingWithArgs
argument_list|(
literal|"handler2 inbound throw ProtocolException"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"HandleMessage throws exception"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDescription
parameter_list|()
throws|throws
name|PingException
block|{
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|LogicalMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wsdl description not found or invalid"
argument_list|,
name|isValidWsdlDescription
argument_list|(
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|WSDL_DESCRIPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|TestSOAPHandler
name|soapHandler
init|=
operator|new
name|TestSOAPHandler
argument_list|<
name|SOAPMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
block|{
specifier|public
name|boolean
name|handleMessage
parameter_list|(
name|SOAPMessageContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wsdl description not found or invalid"
argument_list|,
name|isValidWsdlDescription
argument_list|(
name|ctx
operator|.
name|get
argument_list|(
name|MessageContext
operator|.
name|WSDL_DESCRIPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|handlerTest
argument_list|,
name|handler
argument_list|,
name|soapHandler
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resp
init|=
name|handlerTest
operator|.
name|ping
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handler was not invoked"
argument_list|,
literal|2
argument_list|,
name|handler
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handle message was not invoked"
argument_list|,
literal|2
argument_list|,
name|soapHandler
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"close must be  called"
argument_list|,
name|handler
operator|.
name|isCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"close must be  called"
argument_list|,
name|soapHandler
operator|.
name|isCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlersInvokedForDispatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Dispatch
argument_list|<
name|SOAPMessage
argument_list|>
name|disp
init|=
name|service
operator|.
name|createDispatch
argument_list|(
name|portName
argument_list|,
name|SOAPMessage
operator|.
name|class
argument_list|,
name|Service
operator|.
name|Mode
operator|.
name|MESSAGE
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler1
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
name|handler2
init|=
operator|new
name|TestHandler
argument_list|<
name|LogicalMessageContext
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler1
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TestSOAPHandler
name|soapHandler2
init|=
operator|new
name|TestSOAPHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|addHandlersToChain
argument_list|(
operator|(
name|BindingProvider
operator|)
name|disp
argument_list|,
name|handler1
argument_list|,
name|handler2
argument_list|,
name|soapHandler1
argument_list|,
name|soapHandler2
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"PingReq.xml"
argument_list|)
decl_stmt|;
name|SOAPMessage
name|outMsg
init|=
name|MessageFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createMessage
argument_list|(
literal|null
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|SOAPMessage
name|inMsg
init|=
name|disp
operator|.
name|invoke
argument_list|(
name|outMsg
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inMsg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handle message was not invoked"
argument_list|,
literal|2
argument_list|,
name|handler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handle message was not invoked"
argument_list|,
literal|2
argument_list|,
name|handler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handle message was not invoked"
argument_list|,
literal|2
argument_list|,
name|soapHandler1
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"handle message was not invoked"
argument_list|,
literal|2
argument_list|,
name|soapHandler2
operator|.
name|getHandleMessageInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|handler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|soapHandler1
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close must be called"
argument_list|,
literal|1
argument_list|,
name|soapHandler2
operator|.
name|getCloseInvoked
argument_list|()
argument_list|)
expr_stmt|;
comment|// the server has encoded into the response the order in
comment|// which the handlers have been invoked, parse it and make
comment|// sure everything is ok
comment|// expected order for inbound interceptors
name|String
index|[]
name|handlerNames
init|=
block|{
literal|"soapHandler4"
block|,
literal|"soapHandler3"
block|,
literal|"handler2"
block|,
literal|"handler1"
block|,
literal|"servant"
block|,
literal|"handler1"
block|,
literal|"handler2"
block|,
literal|"soapHandler3"
block|,
literal|"soapHandler4"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resp
init|=
name|getHandlerNames
argument_list|(
name|inMsg
operator|.
name|getSOAPBody
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|handlerNames
operator|.
name|length
argument_list|,
name|resp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|resp
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|expected
range|:
name|handlerNames
control|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|addHandlersToChain
parameter_list|(
name|BindingProvider
name|bp
parameter_list|,
name|Handler
modifier|...
name|handlers
parameter_list|)
block|{
name|List
argument_list|<
name|Handler
argument_list|>
name|handlerChain
init|=
name|bp
operator|.
name|getBinding
argument_list|()
operator|.
name|getHandlerChain
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|handlerChain
argument_list|)
expr_stmt|;
for|for
control|(
name|Handler
name|h
range|:
name|handlers
control|)
block|{
name|handlerChain
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|getHandlerNames
parameter_list|(
name|SOAPBody
name|soapBody
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|elNode
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|soapBody
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
literal|null
decl_stmt|;
name|JAXBContext
name|jaxbCtx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|PingResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|um
init|=
name|jaxbCtx
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|obj
init|=
name|um
operator|.
name|unmarshal
argument_list|(
name|elNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|PingResponse
condition|)
block|{
name|PingResponse
name|pr
init|=
name|PingResponse
operator|.
name|class
operator|.
name|cast
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|stringList
operator|=
name|pr
operator|.
name|getHandlersInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|stringList
return|;
block|}
specifier|public
class|class
name|MyHandlerResolver
implements|implements
name|HandlerResolver
block|{
name|List
argument_list|<
name|Handler
argument_list|>
name|chain
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|bindingID
decl_stmt|;
specifier|public
name|MyHandlerResolver
parameter_list|(
name|Handler
modifier|...
name|handlers
parameter_list|)
block|{
for|for
control|(
name|Handler
name|h
range|:
name|handlers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Handler
argument_list|>
name|getHandlerChain
parameter_list|(
name|PortInfo
name|portInfo
parameter_list|)
block|{
name|bindingID
operator|=
name|portInfo
operator|.
name|getBindingID
argument_list|()
expr_stmt|;
return|return
name|chain
return|;
block|}
block|}
specifier|private
name|boolean
name|isValidWsdlDescription
parameter_list|(
name|Object
name|wsdlDescription
parameter_list|)
block|{
return|return
operator|(
name|wsdlDescription
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|wsdlDescription
operator|instanceof
name|java
operator|.
name|net
operator|.
name|URI
operator|)
operator|||
operator|(
name|wsdlDescription
operator|instanceof
name|java
operator|.
name|net
operator|.
name|URL
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

