begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServiceContractResolver
import|;
end_import

begin_class
specifier|public
class|class
name|JarServiceContractResolver
implements|implements
name|ServiceContractResolver
block|{
specifier|private
name|URI
name|uri
decl_stmt|;
specifier|public
name|URI
name|getContractLocation
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
name|URI
name|ns
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ns
operator|=
operator|new
name|URI
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e2
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|hostStrings
init|=
name|ns
operator|.
name|getHost
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
index|[]
name|pathStrings
init|=
name|ns
operator|.
name|getPath
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\/"
argument_list|)
decl_stmt|;
name|String
name|local
init|=
name|qname
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|StringBuffer
name|path
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|hostStrings
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|path
operator|.
name|append
argument_list|(
name|hostStrings
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pathStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|.
name|append
argument_list|(
name|pathStrings
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|append
argument_list|(
name|local
argument_list|)
operator|.
name|append
argument_list|(
literal|".wsdl"
argument_list|)
expr_stmt|;
try|try
block|{
name|URL
name|jarURL
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl_systest/hello_world_resolver.jar"
argument_list|)
decl_stmt|;
name|JarFile
name|jar
init|=
operator|new
name|JarFile
argument_list|(
operator|new
name|File
argument_list|(
name|jarURL
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JarEntry
name|jarEntry
init|=
name|jar
operator|.
name|getJarEntry
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|uri
operator|=
operator|new
name|URI
argument_list|(
literal|"jar:"
operator|+
name|jarURL
operator|+
literal|"!/"
operator|+
name|jarEntry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jar
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|uri
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

