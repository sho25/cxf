begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|type_test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|AnonymousStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|BoundedArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ChoiceArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ColourEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|CompoundArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|DerivedStructBaseEmpty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|EmptyAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|EmptyChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|EmptyStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ExtColourEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ExtendsSimpleContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|ExtendsSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|FixedArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|NestedArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|NestedStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|RecursiveStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|RecursiveStructArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|RecursiveUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|RecursiveUnionData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|SimpleAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|SimpleChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|SimpleContent1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|SimpleContent2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|SimpleContent3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|SimpleStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|StructWithList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|StructWithNillables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|StructWithOptionals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|StructWithUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|UnboundedArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types1
operator|.
name|UnionSimpleContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|ExtBase64Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|ChoiceWithSubstitutionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|ChoiceWithSubstitutionGroupAbstract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|ChoiceWithSubstitutionGroupNil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|RecElNextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|RecElType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|RecInnerNextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|RecInnerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|RecMostInnerNextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|RecMostInnerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|RecOuterNextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|RecOuterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|SgBaseTypeA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|SgDerivedTypeB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|SgDerivedTypeC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|StructWithMultipleSubstitutionGroups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|StructWithSubstitutionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|StructWithSubstitutionGroupAbstract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types3
operator|.
name|StructWithSubstitutionGroupNil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTypeTestClient2
extends|extends
name|AbstractTypeTestClient
block|{
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|boolean
name|equalsNilable
parameter_list|(
name|T
name|x
parameter_list|,
name|T
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
return|return
name|y
operator|==
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|y
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|x
operator|.
name|equals
argument_list|(
name|y
argument_list|)
return|;
block|}
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|boolean
name|notNull
parameter_list|(
name|T
name|x
parameter_list|,
name|T
name|y
parameter_list|)
block|{
return|return
name|x
operator|!=
literal|null
operator|&&
name|y
operator|!=
literal|null
return|;
block|}
comment|//org.apache.type_test.types1.EmptyStruct
annotation|@
name|Test
specifier|public
name|void
name|testEmptyStruct
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"EmptyStruct"
argument_list|)
condition|)
block|{
return|return;
block|}
name|EmptyStruct
name|x
init|=
operator|new
name|EmptyStruct
argument_list|()
decl_stmt|;
name|EmptyStruct
name|yOrig
init|=
operator|new
name|EmptyStruct
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|EmptyStruct
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|EmptyStruct
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|EmptyStruct
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testEmptyStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testEmptyStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testEmptyStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testEmptyStruct(): Null value for inout param"
argument_list|,
name|notNull
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testEmptyStruct(): Null value for out param"
argument_list|,
name|notNull
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testEmptyStruct(): Null return value"
argument_list|,
name|notNull
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Test With Derived Instance
name|DerivedStructBaseEmpty
name|derivedX
init|=
operator|new
name|DerivedStructBaseEmpty
argument_list|()
decl_stmt|;
name|derivedX
operator|.
name|setVarFloatExt
argument_list|(
operator|-
literal|3.14f
argument_list|)
expr_stmt|;
name|derivedX
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedStruct-x"
argument_list|)
expr_stmt|;
name|derivedX
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-x"
argument_list|)
expr_stmt|;
name|DerivedStructBaseEmpty
name|derivedY
init|=
operator|new
name|DerivedStructBaseEmpty
argument_list|()
decl_stmt|;
name|derivedY
operator|.
name|setVarFloatExt
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|derivedY
operator|.
name|setVarStringExt
argument_list|(
literal|"DerivedStruct-y"
argument_list|)
expr_stmt|;
name|derivedY
operator|.
name|setAttrString
argument_list|(
literal|"DerivedAttr-y"
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|derivedY
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testEmptyStruct
argument_list|(
name|derivedX
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testEmptyStruct
argument_list|(
name|derivedX
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testEmptyStruct
argument_list|(
name|derivedX
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testEmptyStruct(): Null value for inout param"
argument_list|,
name|notNull
argument_list|(
name|derivedX
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testEmptyStruct(): Null value for out param"
argument_list|,
name|notNull
argument_list|(
name|derivedY
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testEmptyStruct(): Null return value"
argument_list|,
name|notNull
argument_list|(
name|derivedX
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.SimpleStruct
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SimpleStruct
name|x
parameter_list|,
name|SimpleStruct
name|y
parameter_list|)
block|{
return|return
operator|(
name|Double
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getVarFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarAttrString
argument_list|()
argument_list|,
name|y
operator|.
name|getVarAttrString
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleStruct
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleStruct"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SimpleStruct
name|x
init|=
operator|new
name|SimpleStruct
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"Hello There"
argument_list|)
expr_stmt|;
name|SimpleStruct
name|yOrig
init|=
operator|new
name|SimpleStruct
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"13"
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"Cheerio"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SimpleStruct
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SimpleStruct
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleStruct
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testSimpleStruct(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSimpleStruct(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSimpleStruct(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.StructWithNillables
specifier|protected
name|boolean
name|equals
parameter_list|(
name|StructWithNillables
name|x
parameter_list|,
name|StructWithNillables
name|y
parameter_list|)
block|{
return|return
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|&&
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarInt
argument_list|()
argument_list|,
name|x
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|&&
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarString
argument_list|()
argument_list|,
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|&&
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarStruct
argument_list|()
argument_list|,
name|y
operator|.
name|getVarStruct
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithNillables
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithNillables"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithNillables
name|x
init|=
operator|new
name|StructWithNillables
argument_list|()
decl_stmt|;
name|StructWithNillables
name|yOrig
init|=
operator|new
name|StructWithNillables
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|1.414f
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"Cheerio"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithNillables
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithNillables
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithNillables
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithNillables
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithNillables
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithNillables
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStructWithNillables(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithNillables(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithNillables(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.AnonymousStruct
comment|//generated code flattens nested struct into top-level class.
specifier|protected
name|boolean
name|equals
parameter_list|(
name|AnonymousStruct
name|x
parameter_list|,
name|AnonymousStruct
name|y
parameter_list|)
block|{
return|return
operator|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|==
name|y
operator|.
name|getVarFloat
argument_list|()
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnonymousStruct
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"AnonymousStruct"
argument_list|)
condition|)
block|{
return|return;
block|}
name|AnonymousStruct
name|x
init|=
operator|new
name|AnonymousStruct
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|AnonymousStruct
name|yOrig
init|=
operator|new
name|AnonymousStruct
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
literal|10.1f
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|AnonymousStruct
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|AnonymousStruct
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|AnonymousStruct
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testAnonymousStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testAnonymousStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testAnonymousStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testAnonymousStruct(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testAnonymousStruct(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testAnonymousStruct(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.NestedStruct
specifier|protected
name|boolean
name|equals
parameter_list|(
name|NestedStruct
name|x
parameter_list|,
name|NestedStruct
name|y
parameter_list|)
block|{
return|return
operator|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|)
operator|&&
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarEmptyStruct
argument_list|()
argument_list|,
name|y
operator|.
name|getVarEmptyStruct
argument_list|()
argument_list|)
operator|&&
name|equalsNilableStruct
argument_list|(
name|x
operator|.
name|getVarStruct
argument_list|()
argument_list|,
name|y
operator|.
name|getVarStruct
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|equalsNilable
parameter_list|(
name|EmptyStruct
name|x
parameter_list|,
name|EmptyStruct
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
return|return
name|y
operator|==
literal|null
return|;
block|}
return|return
name|y
operator|!=
literal|null
return|;
block|}
specifier|protected
name|boolean
name|equalsNilableStruct
parameter_list|(
name|SimpleStruct
name|x
parameter_list|,
name|SimpleStruct
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
return|return
name|y
operator|==
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|y
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|equals
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedStruct
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NestedStruct"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SimpleStruct
name|xs
init|=
operator|new
name|SimpleStruct
argument_list|()
decl_stmt|;
name|xs
operator|.
name|setVarFloat
argument_list|(
literal|30.14
argument_list|)
expr_stmt|;
name|xs
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"420"
argument_list|)
argument_list|)
expr_stmt|;
name|xs
operator|.
name|setVarString
argument_list|(
literal|"NESTED Hello There"
argument_list|)
expr_stmt|;
name|NestedStruct
name|x
init|=
operator|new
name|NestedStruct
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"3.14"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"Hello There"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarEmptyStruct
argument_list|(
operator|new
name|EmptyStruct
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarStruct
argument_list|(
name|xs
argument_list|)
expr_stmt|;
name|SimpleStruct
name|ys
init|=
operator|new
name|SimpleStruct
argument_list|()
decl_stmt|;
name|ys
operator|.
name|setVarFloat
argument_list|(
literal|10.414
argument_list|)
expr_stmt|;
name|ys
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"130"
argument_list|)
argument_list|)
expr_stmt|;
name|ys
operator|.
name|setVarString
argument_list|(
literal|"NESTED Cheerio"
argument_list|)
expr_stmt|;
name|NestedStruct
name|yOrig
init|=
operator|new
name|NestedStruct
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"1.414"
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"Cheerio"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarEmptyStruct
argument_list|(
operator|new
name|EmptyStruct
argument_list|()
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarStruct
argument_list|(
name|ys
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|NestedStruct
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|NestedStruct
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|NestedStruct
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNestedStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNestedStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNestedStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testNestedStruct(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNestedStruct(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testNestedStruct(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.FixedArray
annotation|@
name|Test
specifier|public
name|void
name|testFixedArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"FixedArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|FixedArray
name|x
init|=
operator|new
name|FixedArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|x
operator|.
name|getItem
argument_list|()
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|FixedArray
name|yOrig
init|=
operator|new
name|FixedArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|yOrig
operator|.
name|getItem
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|FixedArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|FixedArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|FixedArray
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testFixedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testFixedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testFixedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testFixedArray(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|y
operator|.
name|value
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testFixedArray(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|z
operator|.
name|value
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testFixedArray(): Incorrect return value"
argument_list|,
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ret
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//org.apache.type_test.types1.BoundedArray
annotation|@
name|Test
specifier|public
name|void
name|testBoundedArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"BoundedArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|BoundedArray
name|x
init|=
operator|new
name|BoundedArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|x
operator|.
name|getItem
argument_list|()
argument_list|,
operator|-
literal|100.00f
argument_list|,
literal|0f
argument_list|,
literal|100.00f
argument_list|)
expr_stmt|;
name|BoundedArray
name|yOrig
init|=
operator|new
name|BoundedArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|yOrig
operator|.
name|getItem
argument_list|()
argument_list|,
operator|-
literal|1f
argument_list|,
literal|0f
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|BoundedArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|BoundedArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|BoundedArray
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testBoundedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testBoundedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testBoundedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|float
name|delta
init|=
literal|0.0f
decl_stmt|;
name|int
name|xSize
init|=
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|ySize
init|=
name|y
operator|.
name|value
operator|.
name|getItem
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|zSize
init|=
name|z
operator|.
name|value
operator|.
name|getItem
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|retSize
init|=
name|ret
operator|.
name|getItem
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testBoundedArray() array size incorrect"
argument_list|,
name|xSize
operator|==
name|ySize
operator|&&
name|ySize
operator|==
name|zSize
operator|&&
name|zSize
operator|==
name|retSize
operator|&&
name|xSize
operator|==
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xSize
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testBoundedArray(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|y
operator|.
name|value
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testBoundedArray(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|z
operator|.
name|value
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testBoundedArray(): Incorrect return value"
argument_list|,
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ret
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//org.apache.type_test.types1.UnboundedArray
specifier|protected
name|boolean
name|equals
parameter_list|(
name|UnboundedArray
name|x
parameter_list|,
name|UnboundedArray
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|xx
init|=
name|x
operator|.
name|getItem
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|yy
init|=
name|y
operator|.
name|getItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|xx
operator|.
name|size
argument_list|()
operator|!=
name|yy
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|xx
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|yy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnboundedArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"UnboundedArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|UnboundedArray
name|x
init|=
operator|new
name|UnboundedArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|x
operator|.
name|getItem
argument_list|()
argument_list|,
literal|"AAA"
argument_list|,
literal|"BBB"
argument_list|,
literal|"CCC"
argument_list|)
expr_stmt|;
name|UnboundedArray
name|yOrig
init|=
operator|new
name|UnboundedArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|yOrig
operator|.
name|getItem
argument_list|()
argument_list|,
literal|"XXX"
argument_list|,
literal|"YYY"
argument_list|,
literal|"ZZZ"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|UnboundedArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|UnboundedArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|UnboundedArray
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testUnboundedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testUnboundedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testUnboundedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"testUnboundedArray(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUnboundedArray(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testUnboundedArray(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//org.apache.type_test.types1.CompoundArray
specifier|protected
name|boolean
name|equals
parameter_list|(
name|CompoundArray
name|x
parameter_list|,
name|CompoundArray
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getArray1
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getArray1
argument_list|()
argument_list|)
operator|&&
name|x
operator|.
name|getArray2
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getArray2
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompoundArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"CompoundArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|CompoundArray
name|x
init|=
operator|new
name|CompoundArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|x
operator|.
name|getArray1
argument_list|()
argument_list|,
literal|"AAA"
argument_list|,
literal|"BBB"
argument_list|,
literal|"CCC"
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|x
operator|.
name|getArray2
argument_list|()
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
expr_stmt|;
name|CompoundArray
name|yOrig
init|=
operator|new
name|CompoundArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|yOrig
operator|.
name|getArray1
argument_list|()
argument_list|,
literal|"XXX"
argument_list|,
literal|"YYY"
argument_list|,
literal|"ZZZ"
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|yOrig
operator|.
name|getArray2
argument_list|()
argument_list|,
literal|"xxx"
argument_list|,
literal|"yyy"
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|CompoundArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|CompoundArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|CompoundArray
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testCompoundArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testCompoundArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testCompoundArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testCompoundArray(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCompoundArray(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCompoundArray(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.NestedArray
annotation|@
name|Test
specifier|public
name|void
name|testNestedArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"NestedArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
index|[]
index|[]
name|xs
init|=
block|{
block|{
literal|"AAA"
block|,
literal|"BBB"
block|,
literal|"CCC"
block|}
block|,
block|{
literal|"aaa"
block|,
literal|"bbb"
block|,
literal|"ccc"
block|}
block|,
block|{
literal|"a_a_a"
block|,
literal|"b_b_b"
block|,
literal|"c_c_c"
block|}
block|}
decl_stmt|;
name|String
index|[]
index|[]
name|ys
init|=
block|{
block|{
literal|"XXX"
block|,
literal|"YYY"
block|,
literal|"ZZZ"
block|}
block|,
block|{
literal|"xxx"
block|,
literal|"yyy"
block|,
literal|"zzz"
block|}
block|,
block|{
literal|"x_x_x"
block|,
literal|"y_y_y"
block|,
literal|"z_z_z"
block|}
block|}
decl_stmt|;
name|NestedArray
name|x
init|=
operator|new
name|NestedArray
argument_list|()
decl_stmt|;
name|NestedArray
name|yOrig
init|=
operator|new
name|NestedArray
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UnboundedArray
argument_list|>
name|xList
init|=
name|x
operator|.
name|getSubarray
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UnboundedArray
argument_list|>
name|yList
init|=
name|yOrig
operator|.
name|getSubarray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|UnboundedArray
name|xx
init|=
operator|new
name|UnboundedArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|xx
operator|.
name|getItem
argument_list|()
argument_list|,
name|xs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|xList
operator|.
name|add
argument_list|(
name|xx
argument_list|)
expr_stmt|;
name|UnboundedArray
name|yy
init|=
operator|new
name|UnboundedArray
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|yy
operator|.
name|getItem
argument_list|()
argument_list|,
name|ys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|yList
operator|.
name|add
argument_list|(
name|yy
argument_list|)
expr_stmt|;
block|}
name|Holder
argument_list|<
name|NestedArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|NestedArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|NestedArray
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testNestedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testNestedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testNestedArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testNestedArray(): Incorrect value for inout param"
argument_list|,
name|x
operator|.
name|getSubarray
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|y
operator|.
name|value
operator|.
name|getSubarray
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testNestedArray(): Incorrect value for out param"
argument_list|,
name|yOrig
operator|.
name|getSubarray
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|z
operator|.
name|value
operator|.
name|getSubarray
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testNestedArray(): Incorrect return value"
argument_list|,
name|x
operator|.
name|getSubarray
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|ret
operator|.
name|getSubarray
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getItem
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//org.apache.type_test.types1.StructWithList
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|String
name|msg
parameter_list|,
name|StructWithList
name|x
parameter_list|,
name|StructWithList
name|y
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xVar
init|=
name|x
operator|.
name|getVarList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|yVar
init|=
name|y
operator|.
name|getVarList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|xVar
operator|.
name|size
argument_list|()
operator|==
name|yVar
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xVar
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|xVar
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|yVar
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|xAttr
init|=
name|x
operator|.
name|getAttribList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|yAttr
init|=
name|y
operator|.
name|getAttribList
argument_list|()
decl_stmt|;
if|if
condition|(
name|xAttr
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|msg
argument_list|,
name|yAttr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|xAttr
operator|.
name|size
argument_list|()
operator|==
name|yAttr
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xAttr
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|xAttr
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|yAttr
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithList
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithList"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithList
name|x
init|=
operator|new
name|StructWithList
argument_list|()
decl_stmt|;
name|x
operator|.
name|getVarList
argument_list|()
operator|.
name|add
argument_list|(
literal|"I"
argument_list|)
expr_stmt|;
name|x
operator|.
name|getVarList
argument_list|()
operator|.
name|add
argument_list|(
literal|"am"
argument_list|)
expr_stmt|;
name|x
operator|.
name|getVarList
argument_list|()
operator|.
name|add
argument_list|(
literal|"StructWithList"
argument_list|)
expr_stmt|;
name|StructWithList
name|yOrig
init|=
operator|new
name|StructWithList
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|getVarList
argument_list|()
operator|.
name|add
argument_list|(
literal|"Does"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getVarList
argument_list|()
operator|.
name|add
argument_list|(
literal|"StructWithList"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getVarList
argument_list|()
operator|.
name|add
argument_list|(
literal|"work"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithList
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithList
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithList
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testStructWithList(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithList(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithList(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|getAttribList
argument_list|()
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|x
operator|.
name|getAttribList
argument_list|()
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|x
operator|.
name|getAttribList
argument_list|()
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|y
operator|.
name|value
operator|=
name|yOrig
expr_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testStructWithList(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithList(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithList(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
name|yOrig
operator|.
name|getAttribList
argument_list|()
operator|.
name|add
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getAttribList
argument_list|()
operator|.
name|add
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getAttribList
argument_list|()
operator|.
name|add
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|y
operator|.
name|value
operator|=
name|yOrig
expr_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithList
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testStructWithList(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithList(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithList(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.StructWithUnion
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|String
name|msg
parameter_list|,
name|StructWithUnion
name|x
parameter_list|,
name|StructWithUnion
name|y
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getVarUnion
argument_list|()
argument_list|,
name|y
operator|.
name|getVarUnion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getAttribUnion
argument_list|()
argument_list|,
name|y
operator|.
name|getAttribUnion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithUnion
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithUnion"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithUnion
name|x
init|=
operator|new
name|StructWithUnion
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarUnion
argument_list|(
literal|"999"
argument_list|)
expr_stmt|;
name|StructWithUnion
name|yOrig
init|=
operator|new
name|StructWithUnion
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarUnion
argument_list|(
literal|"-999"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithUnion
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithUnion
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithUnion
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testStructWithUnion(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithUnion(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithUnion(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|setAttribUnion
argument_list|(
literal|"99"
argument_list|)
expr_stmt|;
name|y
operator|.
name|value
operator|=
name|yOrig
expr_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testStructWithUnion(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithUnion(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithUnion(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
name|yOrig
operator|.
name|setAttribUnion
argument_list|(
literal|"-99"
argument_list|)
expr_stmt|;
name|y
operator|.
name|value
operator|=
name|yOrig
expr_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testStructWithUnion(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithUnion(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testStructWithUnion(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.EmptyChoice
annotation|@
name|Test
specifier|public
name|void
name|testEmptyChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"EmptyChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|EmptyChoice
name|x
init|=
operator|new
name|EmptyChoice
argument_list|()
decl_stmt|;
name|EmptyChoice
name|yOrig
init|=
operator|new
name|EmptyChoice
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|EmptyChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|EmptyChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|EmptyChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testEmptyChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testEmptyChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testEmptyChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testEmptyChoice(): Null value for inout param"
argument_list|,
name|notNull
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testEmptyChoice(): Null value for out param"
argument_list|,
name|notNull
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testEmptyChoice(): Null return value"
argument_list|,
name|notNull
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.SimpleChoice
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SimpleChoice
name|x
parameter_list|,
name|SimpleChoice
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarFloat
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarFloat
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleChoice
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleChoice"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SimpleChoice
name|x
init|=
operator|new
name|SimpleChoice
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
operator|-
literal|3.14f
argument_list|)
expr_stmt|;
name|SimpleChoice
name|yOrig
init|=
operator|new
name|SimpleChoice
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"Cheerio"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SimpleChoice
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SimpleChoice
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleChoice
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleChoice
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testSimpleChoice(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSimpleChoice(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSimpleChoice(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.EmptyAll
annotation|@
name|Test
specifier|public
name|void
name|testEmptyAll
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"EmptyAll"
argument_list|)
condition|)
block|{
return|return;
block|}
name|EmptyAll
name|x
init|=
operator|new
name|EmptyAll
argument_list|()
decl_stmt|;
name|EmptyAll
name|yOrig
init|=
operator|new
name|EmptyAll
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|EmptyAll
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|EmptyAll
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|EmptyAll
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testEmptyAll
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testEmptyAll
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testEmptyAll
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testEmptyAll(): Null value for inout param"
argument_list|,
name|notNull
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testEmptyAll(): Null value for out param"
argument_list|,
name|notNull
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testEmptyAll(): Null return value"
argument_list|,
name|notNull
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.SimpleAll
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SimpleAll
name|x
parameter_list|,
name|SimpleAll
name|y
parameter_list|)
block|{
return|return
operator|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|==
name|y
operator|.
name|getVarFloat
argument_list|()
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarAttrString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarAttrString
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleAll
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleAll"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SimpleAll
name|x
init|=
operator|new
name|SimpleAll
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"Hello There"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarAttrString
argument_list|(
literal|"Attr-x"
argument_list|)
expr_stmt|;
name|SimpleAll
name|yOrig
init|=
operator|new
name|SimpleAll
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
operator|-
literal|9.14f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"Cheerio"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarAttrString
argument_list|(
literal|"Attr-y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SimpleAll
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SimpleAll
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleAll
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleAll
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleAll
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleAll
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testSimpleAll(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSimpleAll(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testSimpleAll(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.StructWithOptionals
specifier|protected
name|boolean
name|equals
parameter_list|(
name|StructWithOptionals
name|x
parameter_list|,
name|StructWithOptionals
name|y
parameter_list|)
block|{
return|return
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|&&
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarInt
argument_list|()
argument_list|,
name|x
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|&&
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarString
argument_list|()
argument_list|,
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|&&
name|equalsNilable
argument_list|(
name|x
operator|.
name|getVarStruct
argument_list|()
argument_list|,
name|y
operator|.
name|getVarStruct
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithOptionals
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithOptionals"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithOptionals
name|x
init|=
operator|new
name|StructWithOptionals
argument_list|()
decl_stmt|;
name|StructWithOptionals
name|yOrig
init|=
operator|new
name|StructWithOptionals
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|1.414f
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"Cheerio"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithOptionals
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithOptionals
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithOptionals
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithOptionals
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithOptionals
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithOptionals
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStructWithOptionals(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithOptionals(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithOptionals(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.RecursiveStruct
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecursiveStruct
name|x
parameter_list|,
name|RecursiveStruct
name|y
parameter_list|)
block|{
return|return
operator|(
name|x
operator|.
name|getVarFloat
argument_list|()
operator|==
name|y
operator|.
name|getVarFloat
argument_list|()
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|)
operator|&&
operator|(
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
operator|)
operator|&&
name|equals
argument_list|(
name|x
operator|.
name|getVarStructArray
argument_list|()
argument_list|,
name|y
operator|.
name|getVarStructArray
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursiveStruct
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"RecursiveStruct"
argument_list|)
condition|)
block|{
return|return;
block|}
name|RecursiveStruct
name|xtmp
init|=
operator|new
name|RecursiveStruct
argument_list|()
decl_stmt|;
name|xtmp
operator|.
name|setVarFloat
argument_list|(
literal|0.14f
argument_list|)
expr_stmt|;
name|xtmp
operator|.
name|setVarInt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|xtmp
operator|.
name|setVarString
argument_list|(
literal|"tmp-x"
argument_list|)
expr_stmt|;
name|xtmp
operator|.
name|setVarStructArray
argument_list|(
operator|new
name|RecursiveStructArray
argument_list|()
argument_list|)
expr_stmt|;
name|RecursiveStruct
name|ytmp
init|=
operator|new
name|RecursiveStruct
argument_list|()
decl_stmt|;
name|ytmp
operator|.
name|setVarFloat
argument_list|(
literal|0.414f
argument_list|)
expr_stmt|;
name|ytmp
operator|.
name|setVarInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ytmp
operator|.
name|setVarString
argument_list|(
literal|"tmp-y"
argument_list|)
expr_stmt|;
name|ytmp
operator|.
name|setVarStructArray
argument_list|(
operator|new
name|RecursiveStructArray
argument_list|()
argument_list|)
expr_stmt|;
name|RecursiveStructArray
name|arr
init|=
operator|new
name|RecursiveStructArray
argument_list|()
decl_stmt|;
name|arr
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|xtmp
argument_list|)
expr_stmt|;
name|arr
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|ytmp
argument_list|)
expr_stmt|;
name|RecursiveStruct
name|x
init|=
operator|new
name|RecursiveStruct
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"RecStruct-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarStructArray
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|RecursiveStruct
name|yOrig
init|=
operator|new
name|RecursiveStruct
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
literal|1.414f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"RecStruct-y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarStructArray
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|RecursiveStruct
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|RecursiveStruct
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|RecursiveStruct
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testRecursiveStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testRecursiveStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testRecursiveStruct
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testRecursiveStruct(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecursiveStruct(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecursiveStruct(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.RecursiveStructArray
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecursiveStructArray
name|x
parameter_list|,
name|RecursiveStructArray
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|RecursiveStruct
argument_list|>
name|xx
init|=
name|x
operator|.
name|getItem
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecursiveStruct
argument_list|>
name|yy
init|=
name|y
operator|.
name|getItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|xx
operator|.
name|isEmpty
argument_list|()
operator|&&
name|yy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|xx
operator|.
name|size
argument_list|()
operator|!=
name|yy
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|xx
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|yy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursiveStructArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"RecursiveStructArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|RecursiveStruct
name|xtmp
init|=
operator|new
name|RecursiveStruct
argument_list|()
decl_stmt|;
name|xtmp
operator|.
name|setVarFloat
argument_list|(
literal|0.14f
argument_list|)
expr_stmt|;
name|xtmp
operator|.
name|setVarInt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|xtmp
operator|.
name|setVarString
argument_list|(
literal|"tmp-x"
argument_list|)
expr_stmt|;
name|xtmp
operator|.
name|setVarStructArray
argument_list|(
operator|new
name|RecursiveStructArray
argument_list|()
argument_list|)
expr_stmt|;
name|RecursiveStruct
name|ytmp
init|=
operator|new
name|RecursiveStruct
argument_list|()
decl_stmt|;
name|ytmp
operator|.
name|setVarFloat
argument_list|(
literal|0.414f
argument_list|)
expr_stmt|;
name|ytmp
operator|.
name|setVarInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ytmp
operator|.
name|setVarString
argument_list|(
literal|"tmp-y"
argument_list|)
expr_stmt|;
name|ytmp
operator|.
name|setVarStructArray
argument_list|(
operator|new
name|RecursiveStructArray
argument_list|()
argument_list|)
expr_stmt|;
name|RecursiveStructArray
name|x
init|=
operator|new
name|RecursiveStructArray
argument_list|()
decl_stmt|;
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|xtmp
argument_list|)
expr_stmt|;
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|ytmp
argument_list|)
expr_stmt|;
name|RecursiveStructArray
name|yOrig
init|=
operator|new
name|RecursiveStructArray
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|ytmp
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|xtmp
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|RecursiveStructArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|RecursiveStructArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|RecursiveStructArray
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testRecursiveStructArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testRecursiveStructArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testRecursiveStructArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testRecursiveStructArray(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecursiveStructArray(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecursiveStructArray(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.RecursiveUnionData
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecursiveUnion
name|x
parameter_list|,
name|RecursiveUnion
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarString
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarChoice
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarChoice
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|equals
argument_list|(
name|x
operator|.
name|getVarChoice
argument_list|()
argument_list|,
name|y
operator|.
name|getVarChoice
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursiveUnion
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"RecursiveUnion"
argument_list|)
condition|)
block|{
return|return;
block|}
name|RecursiveUnion
name|tmp1
init|=
operator|new
name|RecursiveUnion
argument_list|()
decl_stmt|;
name|tmp1
operator|.
name|setVarString
argument_list|(
literal|"RecusiveUnion-1"
argument_list|)
expr_stmt|;
name|RecursiveUnion
name|tmp2
init|=
operator|new
name|RecursiveUnion
argument_list|()
decl_stmt|;
name|tmp2
operator|.
name|setVarString
argument_list|(
literal|"RecusiveUnion-2"
argument_list|)
expr_stmt|;
name|RecursiveUnionData
name|xData
init|=
operator|new
name|RecursiveUnionData
argument_list|()
decl_stmt|;
name|ChoiceArray
name|xChoice
init|=
operator|new
name|ChoiceArray
argument_list|()
decl_stmt|;
name|xChoice
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp1
argument_list|)
expr_stmt|;
name|xChoice
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp2
argument_list|)
expr_stmt|;
name|xData
operator|.
name|setVarInt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|xData
operator|.
name|setVarChoiceArray
argument_list|(
name|xChoice
argument_list|)
expr_stmt|;
name|RecursiveUnion
name|x
init|=
operator|new
name|RecursiveUnion
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarChoice
argument_list|(
name|xData
argument_list|)
expr_stmt|;
name|RecursiveUnionData
name|yData
init|=
operator|new
name|RecursiveUnionData
argument_list|()
decl_stmt|;
name|ChoiceArray
name|yChoice
init|=
operator|new
name|ChoiceArray
argument_list|()
decl_stmt|;
name|yChoice
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp1
argument_list|)
expr_stmt|;
name|yChoice
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp2
argument_list|)
expr_stmt|;
name|yData
operator|.
name|setVarInt
argument_list|(
operator|-
literal|5
argument_list|)
expr_stmt|;
name|yData
operator|.
name|setVarChoiceArray
argument_list|(
name|yChoice
argument_list|)
expr_stmt|;
name|RecursiveUnion
name|yOrig
init|=
operator|new
name|RecursiveUnion
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarChoice
argument_list|(
name|yData
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|RecursiveUnion
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|RecursiveUnion
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|RecursiveUnion
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testRecursiveUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testRecursiveUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testRecursiveUnion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testRecursiveUnion(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecursiveUnion(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecursiveUnion(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.RecursiveUnionData
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecursiveUnionData
name|x
parameter_list|,
name|RecursiveUnionData
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|&&
name|equals
argument_list|(
name|x
operator|.
name|getVarChoiceArray
argument_list|()
argument_list|,
name|y
operator|.
name|getVarChoiceArray
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursiveUnionData
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"RecursiveUnionData"
argument_list|)
condition|)
block|{
return|return;
block|}
name|RecursiveUnion
name|tmp1
init|=
operator|new
name|RecursiveUnion
argument_list|()
decl_stmt|;
name|tmp1
operator|.
name|setVarString
argument_list|(
literal|"RecusiveUnion-1"
argument_list|)
expr_stmt|;
name|RecursiveUnion
name|tmp2
init|=
operator|new
name|RecursiveUnion
argument_list|()
decl_stmt|;
name|tmp2
operator|.
name|setVarString
argument_list|(
literal|"RecusiveUnion-2"
argument_list|)
expr_stmt|;
name|RecursiveUnionData
name|x
init|=
operator|new
name|RecursiveUnionData
argument_list|()
decl_stmt|;
name|ChoiceArray
name|xChoice
init|=
operator|new
name|ChoiceArray
argument_list|()
decl_stmt|;
name|xChoice
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp1
argument_list|)
expr_stmt|;
name|xChoice
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp2
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarChoiceArray
argument_list|(
name|xChoice
argument_list|)
expr_stmt|;
name|RecursiveUnionData
name|yOrig
init|=
operator|new
name|RecursiveUnionData
argument_list|()
decl_stmt|;
name|ChoiceArray
name|yOrigchoice
init|=
operator|new
name|ChoiceArray
argument_list|()
decl_stmt|;
name|xChoice
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp1
argument_list|)
expr_stmt|;
name|xChoice
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp2
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
operator|-
literal|5
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarChoiceArray
argument_list|(
name|yOrigchoice
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|RecursiveUnionData
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|RecursiveUnionData
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|RecursiveUnionData
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testRecursiveUnionData
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testRecursiveUnionData
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testRecursiveUnionData
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testRecursiveUnionData(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecursiveUnionData(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecursiveUnionData(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.ChoiceArray
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceArray
name|x
parameter_list|,
name|ChoiceArray
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|RecursiveUnion
argument_list|>
name|xx
init|=
name|x
operator|.
name|getItem
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecursiveUnion
argument_list|>
name|yy
init|=
name|y
operator|.
name|getItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|xx
operator|.
name|isEmpty
argument_list|()
operator|&&
name|yy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|xx
operator|.
name|size
argument_list|()
operator|!=
name|yy
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|xx
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|yy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceArray"
argument_list|)
condition|)
block|{
return|return;
block|}
name|RecursiveUnion
name|tmp1
init|=
operator|new
name|RecursiveUnion
argument_list|()
decl_stmt|;
name|tmp1
operator|.
name|setVarString
argument_list|(
literal|"RecusiveUnion-1"
argument_list|)
expr_stmt|;
name|RecursiveUnion
name|tmp2
init|=
operator|new
name|RecursiveUnion
argument_list|()
decl_stmt|;
name|tmp2
operator|.
name|setVarString
argument_list|(
literal|"RecusiveUnion-2"
argument_list|)
expr_stmt|;
name|ChoiceArray
name|x
init|=
operator|new
name|ChoiceArray
argument_list|()
decl_stmt|;
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp1
argument_list|)
expr_stmt|;
name|x
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp2
argument_list|)
expr_stmt|;
name|ChoiceArray
name|yOrig
init|=
operator|new
name|ChoiceArray
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp2
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|tmp1
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceArray
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceArray
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceArray
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceArray
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceArray(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceArray(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceArray(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types2.ExtendsSimpleType
annotation|@
name|Test
specifier|public
name|void
name|testExtendsSimpleType
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ExtendsSimpleType"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ExtendsSimpleType
name|x
init|=
operator|new
name|ExtendsSimpleType
argument_list|()
decl_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ExtendsSimpleType
name|yOriginal
init|=
operator|new
name|ExtendsSimpleType
argument_list|()
decl_stmt|;
name|yOriginal
operator|.
name|setValue
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ExtendsSimpleType
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ExtendsSimpleType
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ExtendsSimpleType
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testExtendsSimpleType
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testExtendsSimpleType
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testExtendsSimpleType
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|yOriginal
operator|.
name|getValue
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|ret
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.ExtendsSimpleContent
annotation|@
name|Test
specifier|public
name|void
name|testExtendsSimpleContent
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ExtendsSimpleContent"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ExtendsSimpleContent
name|x
init|=
operator|new
name|ExtendsSimpleContent
argument_list|()
decl_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ExtendsSimpleContent
name|yOriginal
init|=
operator|new
name|ExtendsSimpleContent
argument_list|()
decl_stmt|;
name|yOriginal
operator|.
name|setValue
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ExtendsSimpleContent
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOriginal
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ExtendsSimpleContent
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ExtendsSimpleContent
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testExtendsSimpleContent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testExtendsSimpleContent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testExtendsSimpleContent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|yOriginal
operator|.
name|getValue
argument_list|()
argument_list|,
name|z
operator|.
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|ret
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types1.Document
specifier|protected
name|void
name|equals
parameter_list|(
name|String
name|msg
parameter_list|,
name|Document
name|x
parameter_list|,
name|Document
name|y
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getID
argument_list|()
argument_list|,
name|y
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocument
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"Document"
argument_list|)
condition|)
block|{
return|return;
block|}
name|Document
name|x
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"content-x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setID
argument_list|(
literal|"Hello There"
argument_list|)
expr_stmt|;
name|Document
name|yOrig
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setID
argument_list|(
literal|"Cheerio"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"content-y"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|Document
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|Document
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|Document
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDocument
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDocument
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDocument
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|equals
argument_list|(
literal|"testDocument(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testDocument(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testDocument(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
name|x
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|yOrig
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"content-x"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"content-y"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setID
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setID
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|Holder
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testDocument
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testDocument
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testDocument
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|equals
argument_list|(
literal|"testDocument(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testDocument(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testDocument(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|y
operator|.
name|value
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ret
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// org.apache.type_test.types1.ExtColourEnum
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ExtColourEnum
name|x
parameter_list|,
name|ExtColourEnum
name|y
parameter_list|)
block|{
return|return
operator|(
name|x
operator|.
name|getAttrib1
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrib1
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|x
operator|.
name|getAttrib2
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getAttrib2
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|x
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtColourEnum
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ExtColourEnum"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ExtColourEnum
name|x
init|=
operator|new
name|ExtColourEnum
argument_list|()
decl_stmt|;
name|x
operator|.
name|setAttrib1
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAttrib2
argument_list|(
literal|"Ax"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setValue
argument_list|(
name|ColourEnum
operator|.
name|fromValue
argument_list|(
literal|"RED"
argument_list|)
argument_list|)
expr_stmt|;
name|ExtColourEnum
name|yOrig
init|=
operator|new
name|ExtColourEnum
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setAttrib1
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAttrib2
argument_list|(
literal|"Ay"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
name|ColourEnum
operator|.
name|fromValue
argument_list|(
literal|"GREEN"
argument_list|)
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ExtColourEnum
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ExtColourEnum
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ExtColourEnum
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testExtColourEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testExtColourEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testExtColourEnum
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testExtColourEnum(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testExtColourEnum(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testExtColourEnum(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ExtBase64Binary
name|x
parameter_list|,
name|ExtBase64Binary
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getId
argument_list|()
operator|==
name|y
operator|.
name|getId
argument_list|()
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtBase64Binary
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ExtBase64Binary"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ExtBase64Binary
name|x1
init|=
operator|new
name|ExtBase64Binary
argument_list|()
decl_stmt|;
name|x1
operator|.
name|setValue
argument_list|(
literal|"base64a"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|x1
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ExtBase64Binary
name|y1
init|=
operator|new
name|ExtBase64Binary
argument_list|()
decl_stmt|;
name|y1
operator|.
name|setValue
argument_list|(
literal|"base64b"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|y1
operator|.
name|setId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ExtBase64Binary
argument_list|>
name|y1Holder
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|y1
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ExtBase64Binary
argument_list|>
name|z1
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ExtBase64Binary
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testExtBase64Binary
argument_list|(
name|x1
argument_list|,
name|y1Holder
argument_list|,
name|z1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testExtBase64Binary
argument_list|(
name|x1
argument_list|,
name|y1Holder
argument_list|,
name|z1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testExtBase64Binary
argument_list|(
name|x1
argument_list|,
name|y1Holder
argument_list|,
name|z1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testExtBase64Binary(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x1
argument_list|,
name|y1Holder
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testExtBase64Binary(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|y1
argument_list|,
name|z1
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testExtBase64Binary(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x1
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.StructWithSubstitutionGroup
specifier|protected
name|boolean
name|equals
parameter_list|(
name|StructWithSubstitutionGroup
name|x
parameter_list|,
name|StructWithSubstitutionGroup
name|y
parameter_list|)
block|{
if|if
condition|(
operator|!
name|x
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
operator|&&
operator|!
name|y
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
name|SgBaseTypeA
name|xTypeA
init|=
name|x
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SgBaseTypeA
name|yTypeA
init|=
name|y
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|equals
argument_list|(
name|xTypeA
argument_list|,
name|yTypeA
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithSubstitutionGroup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithSubstitutionGroup"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SgBaseTypeA
name|baseA
init|=
operator|new
name|SgBaseTypeA
argument_list|()
decl_stmt|;
name|baseA
operator|.
name|setVarInt
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|SgDerivedTypeB
name|derivedB
init|=
operator|new
name|SgDerivedTypeB
argument_list|()
decl_stmt|;
name|derivedB
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|derivedB
operator|.
name|setVarString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|StructWithSubstitutionGroup
name|x
init|=
operator|new
name|StructWithSubstitutionGroup
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|elementA
init|=
name|objectFactory
operator|.
name|createSg01BaseElementA
argument_list|(
name|baseA
argument_list|)
decl_stmt|;
name|x
operator|.
name|setSg01BaseElementA
argument_list|(
name|elementA
argument_list|)
expr_stmt|;
name|StructWithSubstitutionGroup
name|yOrig
init|=
operator|new
name|StructWithSubstitutionGroup
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|elementB
init|=
name|objectFactory
operator|.
name|createSg01DerivedElementB
argument_list|(
name|derivedB
argument_list|)
decl_stmt|;
name|yOrig
operator|.
name|setSg01BaseElementA
argument_list|(
name|elementB
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithSubstitutionGroup
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithSubstitutionGroup
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithSubstitutionGroup
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithSubstitutionGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithSubstitutionGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithSubstitutionGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStructWithSubstitutionGroup(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithSubstitutionGroup(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithSubstitutionGroup(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.StructWithSubstitutionGroupAbstract
specifier|protected
name|boolean
name|equals
parameter_list|(
name|StructWithSubstitutionGroupAbstract
name|x
parameter_list|,
name|StructWithSubstitutionGroupAbstract
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getSg03AbstractBaseElementA
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getSg03AbstractBaseElementA
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SgBaseTypeA
name|xTypeA
init|=
name|x
operator|.
name|getSg03AbstractBaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SgBaseTypeA
name|yTypeA
init|=
name|y
operator|.
name|getSg03AbstractBaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|equals
argument_list|(
name|xTypeA
argument_list|,
name|yTypeA
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithSubstitutionGroupAbstract
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithSubstitutionGroupAbstract"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SgDerivedTypeB
name|derivedB
init|=
operator|new
name|SgDerivedTypeB
argument_list|()
decl_stmt|;
name|derivedB
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|derivedB
operator|.
name|setVarString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|SgDerivedTypeB
argument_list|>
name|elementB
init|=
name|objectFactory
operator|.
name|createSg03DerivedElementB
argument_list|(
name|derivedB
argument_list|)
decl_stmt|;
name|SgDerivedTypeC
name|derivedC
init|=
operator|new
name|SgDerivedTypeC
argument_list|()
decl_stmt|;
name|derivedC
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|derivedC
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|SgDerivedTypeC
argument_list|>
name|elementC
init|=
name|objectFactory
operator|.
name|createSg03DerivedElementC
argument_list|(
name|derivedC
argument_list|)
decl_stmt|;
name|StructWithSubstitutionGroupAbstract
name|x
init|=
operator|new
name|StructWithSubstitutionGroupAbstract
argument_list|()
decl_stmt|;
name|x
operator|.
name|setSg03AbstractBaseElementA
argument_list|(
name|elementC
argument_list|)
expr_stmt|;
name|StructWithSubstitutionGroupAbstract
name|yOrig
init|=
operator|new
name|StructWithSubstitutionGroupAbstract
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setSg03AbstractBaseElementA
argument_list|(
name|elementB
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithSubstitutionGroupAbstract
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithSubstitutionGroupAbstract
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithSubstitutionGroupAbstract
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithSubstitutionGroupAbstract
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithSubstitutionGroupAbstract
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithSubstitutionGroupAbstract
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStructWithSubstitutionGroupAbstract(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithSubstitutionGroupAbstract(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithSubstitutionGroupAbstract(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.StructWithSubstitutionGroupNil
specifier|protected
name|boolean
name|equals
parameter_list|(
name|StructWithSubstitutionGroupNil
name|x
parameter_list|,
name|StructWithSubstitutionGroupNil
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
name|y
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|y
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|SgBaseTypeA
name|xTypeA
init|=
name|x
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SgBaseTypeA
name|yTypeA
init|=
name|y
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|equals
argument_list|(
name|xTypeA
argument_list|,
name|yTypeA
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithSubstitutionGroupNil
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithSubstitutionGroupNil"
argument_list|)
condition|)
block|{
return|return;
block|}
name|StructWithSubstitutionGroupNil
name|x
init|=
operator|new
name|StructWithSubstitutionGroupNil
argument_list|()
decl_stmt|;
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|element
init|=
name|objectFactory
operator|.
name|createSg04NillableBaseElementA
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|x
operator|.
name|setSg04NillableBaseElementA
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|StructWithSubstitutionGroupNil
name|yOrig
init|=
operator|new
name|StructWithSubstitutionGroupNil
argument_list|()
decl_stmt|;
name|element
operator|=
name|objectFactory
operator|.
name|createSg04NillableBaseElementA
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setSg04NillableBaseElementA
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithSubstitutionGroupNil
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithSubstitutionGroupNil
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithSubstitutionGroupNil
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithSubstitutionGroupNil
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithSubstitutionGroupNil
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithSubstitutionGroupNil
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStructWithSubstitutionGroupNil(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithSubstitutionGroupNil(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithSubstitutionGroupNil(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.StructWithMultipleSubstitutionGroups
specifier|protected
name|boolean
name|equals
parameter_list|(
name|StructWithMultipleSubstitutionGroups
name|x
parameter_list|,
name|StructWithMultipleSubstitutionGroups
name|y
parameter_list|)
block|{
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getVarFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|y
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|y
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|SgBaseTypeA
name|xTypeA
init|=
name|x
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SgBaseTypeA
name|yTypeA
init|=
name|y
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|equals
argument_list|(
name|xTypeA
argument_list|,
name|yTypeA
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|x
operator|.
name|getSg02BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|y
operator|.
name|getSg02BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|y
operator|.
name|getSg02BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|SgBaseTypeA
name|xTypeA
init|=
name|x
operator|.
name|getSg02BaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SgBaseTypeA
name|yTypeA
init|=
name|y
operator|.
name|getSg02BaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|equals
argument_list|(
name|xTypeA
argument_list|,
name|yTypeA
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithMultipleSubstitutionGroups
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"StructWithMultipleSubstitutionGroups"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SgBaseTypeA
name|baseA
init|=
operator|new
name|SgBaseTypeA
argument_list|()
decl_stmt|;
name|baseA
operator|.
name|setVarInt
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|SgDerivedTypeB
name|derivedB
init|=
operator|new
name|SgDerivedTypeB
argument_list|()
decl_stmt|;
name|derivedB
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|derivedB
operator|.
name|setVarString
argument_list|(
literal|"y-SgDerivedTypeB"
argument_list|)
expr_stmt|;
name|SgDerivedTypeC
name|derivedC
init|=
operator|new
name|SgDerivedTypeC
argument_list|()
decl_stmt|;
name|derivedC
operator|.
name|setVarInt
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|derivedC
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|x1
init|=
name|objectFactory
operator|.
name|createSg01DerivedElementB
argument_list|(
name|derivedB
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|x2
init|=
name|objectFactory
operator|.
name|createSg02BaseElementA
argument_list|(
name|baseA
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|y1
init|=
name|objectFactory
operator|.
name|createSg01DerivedElementB
argument_list|(
name|derivedB
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|y2
init|=
name|objectFactory
operator|.
name|createSg02DerivedElementC
argument_list|(
name|derivedC
argument_list|)
decl_stmt|;
name|StructWithMultipleSubstitutionGroups
name|x
init|=
operator|new
name|StructWithMultipleSubstitutionGroups
argument_list|()
decl_stmt|;
name|x
operator|.
name|setVarFloat
argument_list|(
literal|111.1f
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarString
argument_list|(
literal|"x-varString"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setSg01BaseElementA
argument_list|(
name|x1
argument_list|)
expr_stmt|;
name|x
operator|.
name|setSg02BaseElementA
argument_list|(
name|x2
argument_list|)
expr_stmt|;
name|StructWithMultipleSubstitutionGroups
name|yOrig
init|=
operator|new
name|StructWithMultipleSubstitutionGroups
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setVarFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarInt
argument_list|(
name|BigInteger
operator|.
name|TEN
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setVarString
argument_list|(
literal|"y-varString"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setSg01BaseElementA
argument_list|(
name|y1
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setSg02BaseElementA
argument_list|(
name|y2
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithMultipleSubstitutionGroups
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithMultipleSubstitutionGroups
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|StructWithMultipleSubstitutionGroups
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testStructWithMultipleSubstitutionGroups
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testStructWithMultipleSubstitutionGroups
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testStructWithMultipleSubstitutionGroups
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testStructWithMultipleSubstitutionGroups(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithMultipleSubstitutionGroups(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testStructWithMultipleSubstitutionGroups(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.ChoiceWithSubstitutionGroupAbstract
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceWithSubstitutionGroupAbstract
name|x
parameter_list|,
name|ChoiceWithSubstitutionGroupAbstract
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|x
operator|.
name|getSg03AbstractBaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
operator|&&
operator|!
name|y
operator|.
name|getSg03AbstractBaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
name|SgBaseTypeA
name|xTypeA
init|=
name|x
operator|.
name|getSg03AbstractBaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SgBaseTypeA
name|yTypeA
init|=
name|y
operator|.
name|getSg03AbstractBaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|equals
argument_list|(
name|xTypeA
argument_list|,
name|yTypeA
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceWithSubstitutionGroupAbstract
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceWithSubstitutionGroupAbstract"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SgDerivedTypeB
name|derivedB
init|=
operator|new
name|SgDerivedTypeB
argument_list|()
decl_stmt|;
name|derivedB
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|derivedB
operator|.
name|setVarString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|SgDerivedTypeC
name|derivedC
init|=
operator|new
name|SgDerivedTypeC
argument_list|()
decl_stmt|;
name|derivedC
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|derivedC
operator|.
name|setVarFloat
argument_list|(
literal|3.14f
argument_list|)
expr_stmt|;
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|elementB
init|=
name|objectFactory
operator|.
name|createSg03DerivedElementB
argument_list|(
name|derivedB
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|elementC
init|=
name|objectFactory
operator|.
name|createSg03DerivedElementC
argument_list|(
name|derivedC
argument_list|)
decl_stmt|;
name|ChoiceWithSubstitutionGroupAbstract
name|x
init|=
operator|new
name|ChoiceWithSubstitutionGroupAbstract
argument_list|()
decl_stmt|;
name|x
operator|.
name|setSg03AbstractBaseElementA
argument_list|(
name|elementC
argument_list|)
expr_stmt|;
name|ChoiceWithSubstitutionGroupAbstract
name|yOrig
init|=
operator|new
name|ChoiceWithSubstitutionGroupAbstract
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setSg03AbstractBaseElementA
argument_list|(
name|elementB
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceWithSubstitutionGroupAbstract
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceWithSubstitutionGroupAbstract
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceWithSubstitutionGroupAbstract
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceWithSubstitutionGroupAbstract
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceWithSubstitutionGroupAbstract
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceWithSubstitutionGroupAbstract
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceWithSubstitutionGroupAbstract(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithSubstitutionGroupAbstract(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithSubstitutionGroupAbstract(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.ChoiceWithSubstitutionGroupNil
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceWithSubstitutionGroupNil
name|x
parameter_list|,
name|ChoiceWithSubstitutionGroupNil
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|y
operator|.
name|getVarInt
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// x null, y non-null
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
name|y
operator|.
name|getVarInt
argument_list|()
operator|.
name|isNil
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|y
operator|.
name|getVarInt
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|y
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|y
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// x null, y non-null
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
name|y
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|y
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SgBaseTypeA
name|xTypeA
init|=
name|x
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SgBaseTypeA
name|yTypeA
init|=
name|y
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|equals
argument_list|(
name|xTypeA
argument_list|,
name|yTypeA
argument_list|)
return|;
block|}
block|}
return|return
name|y
operator|.
name|getSg04NillableBaseElementA
argument_list|()
operator|==
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceWithSubstitutionGroupNil
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceWithSubstitutionGroupNil"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|ChoiceWithSubstitutionGroupNil
name|x
init|=
operator|new
name|ChoiceWithSubstitutionGroupNil
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|BigInteger
argument_list|>
name|varInt
init|=
name|objectFactory
operator|.
name|createChoiceWithSubstitutionGroupNilVarInt
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
name|varInt
argument_list|)
expr_stmt|;
name|ChoiceWithSubstitutionGroupNil
name|yOrig
init|=
operator|new
name|ChoiceWithSubstitutionGroupNil
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|elementA
init|=
name|objectFactory
operator|.
name|createSg04NillableBaseElementA
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|yOrig
operator|.
name|setSg04NillableBaseElementA
argument_list|(
name|elementA
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceWithSubstitutionGroupNil
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceWithSubstitutionGroupNil
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|ChoiceWithSubstitutionGroupNil
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceWithSubstitutionGroupNil
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceWithSubstitutionGroupNil
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceWithSubstitutionGroupNil
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceWithSubstitutionGroupNil(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithSubstitutionGroupNil(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithSubstitutionGroupNil(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.ChoiceWithSubstitutionGroup
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SgBaseTypeA
name|x
parameter_list|,
name|SgBaseTypeA
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
return|return
name|y
operator|==
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|y
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|x
operator|instanceof
name|SgDerivedTypeC
condition|)
block|{
if|if
condition|(
name|y
operator|instanceof
name|SgDerivedTypeC
condition|)
block|{
name|SgDerivedTypeC
name|xTypeC
init|=
operator|(
name|SgDerivedTypeC
operator|)
name|x
decl_stmt|;
name|SgDerivedTypeC
name|yTypeC
init|=
operator|(
name|SgDerivedTypeC
operator|)
name|y
decl_stmt|;
return|return
name|equals
argument_list|(
name|xTypeC
argument_list|,
name|yTypeC
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|x
operator|instanceof
name|SgDerivedTypeB
condition|)
block|{
if|if
condition|(
name|y
operator|instanceof
name|SgDerivedTypeB
condition|)
block|{
name|SgDerivedTypeB
name|xTypeB
init|=
operator|(
name|SgDerivedTypeB
operator|)
name|x
decl_stmt|;
name|SgDerivedTypeB
name|yTypeB
init|=
operator|(
name|SgDerivedTypeB
operator|)
name|y
decl_stmt|;
return|return
name|equals
argument_list|(
name|xTypeB
argument_list|,
name|yTypeB
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SgDerivedTypeB
name|x
parameter_list|,
name|SgDerivedTypeB
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getVarString
argument_list|()
operator|.
name|equals
argument_list|(
name|y
operator|.
name|getVarString
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|SgDerivedTypeC
name|x
parameter_list|,
name|SgDerivedTypeC
name|y
parameter_list|)
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getVarFloat
argument_list|()
argument_list|,
name|y
operator|.
name|getVarFloat
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|ChoiceWithSubstitutionGroup
name|x
parameter_list|,
name|ChoiceWithSubstitutionGroup
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|y
operator|.
name|getVarInt
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getVarInt
argument_list|()
operator|.
name|compareTo
argument_list|(
name|y
operator|.
name|getVarInt
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|x
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
operator|&&
operator|!
name|y
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|isNil
argument_list|()
condition|)
block|{
name|SgBaseTypeA
name|xTypeA
init|=
name|x
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SgBaseTypeA
name|yTypeA
init|=
name|y
operator|.
name|getSg01BaseElementA
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|equals
argument_list|(
name|xTypeA
argument_list|,
name|yTypeA
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoiceWithSubstitutionGroup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"ChoiceWithSubstitutionGroup"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SgBaseTypeA
name|baseA
init|=
operator|new
name|SgBaseTypeA
argument_list|()
decl_stmt|;
name|baseA
operator|.
name|setVarInt
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|elementA
init|=
name|objectFactory
operator|.
name|createSg01BaseElementA
argument_list|(
name|baseA
argument_list|)
decl_stmt|;
name|SgDerivedTypeB
name|derivedB
init|=
operator|new
name|SgDerivedTypeB
argument_list|()
decl_stmt|;
name|derivedB
operator|.
name|setVarInt
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|derivedB
operator|.
name|setVarString
argument_list|(
literal|"SgDerivedTypeB"
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|?
extends|extends
name|SgBaseTypeA
argument_list|>
name|elementB
init|=
name|objectFactory
operator|.
name|createSg01DerivedElementB
argument_list|(
name|derivedB
argument_list|)
decl_stmt|;
name|ChoiceWithSubstitutionGroup
name|x
init|=
operator|new
name|ChoiceWithSubstitutionGroup
argument_list|()
decl_stmt|;
name|x
operator|.
name|setSg01BaseElementA
argument_list|(
name|elementA
argument_list|)
expr_stmt|;
name|ChoiceWithSubstitutionGroup
name|yOrig
init|=
operator|new
name|ChoiceWithSubstitutionGroup
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setSg01BaseElementA
argument_list|(
name|elementB
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|ChoiceWithSubstitutionGroup
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|ChoiceWithSubstitutionGroup
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"yoo: "
argument_list|,
name|equals
argument_list|(
name|y
operator|.
name|value
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|ChoiceWithSubstitutionGroup
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testChoiceWithSubstitutionGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testChoiceWithSubstitutionGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testChoiceWithSubstitutionGroup
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testChoiceWithSubstitutionGroup(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithSubstitutionGroup(): Incorrect value for out param"
argument_list|,
name|equals
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testChoiceWithSubstitutionGroup(): Incorrect return value"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.RecElNextType
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecElNextType
name|x
parameter_list|,
name|RecElNextType
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|RecElType
argument_list|>
name|xx
init|=
name|x
operator|.
name|getRecEl
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecElType
argument_list|>
name|yy
init|=
name|y
operator|.
name|getRecEl
argument_list|()
decl_stmt|;
if|if
condition|(
name|xx
operator|.
name|size
argument_list|()
operator|!=
name|yy
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|xx
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|yy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecElType
name|x
parameter_list|,
name|RecElType
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|&&
name|equals
argument_list|(
name|x
operator|.
name|getRecElNext
argument_list|()
argument_list|,
name|y
operator|.
name|getRecElNext
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecElType
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"RecElType"
argument_list|)
condition|)
block|{
return|return;
block|}
name|RecElType
name|x
init|=
operator|new
name|RecElType
argument_list|()
decl_stmt|;
name|RecElType
name|y
init|=
operator|new
name|RecElType
argument_list|()
decl_stmt|;
name|RecElNextType
name|xn
init|=
operator|new
name|RecElNextType
argument_list|()
decl_stmt|;
name|RecElNextType
name|yn
init|=
operator|new
name|RecElNextType
argument_list|()
decl_stmt|;
name|y
operator|.
name|setVarInt
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|y
operator|.
name|setRecElNext
argument_list|(
name|yn
argument_list|)
expr_stmt|;
name|xn
operator|.
name|getRecEl
argument_list|()
operator|.
name|add
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|x
operator|.
name|setVarInt
argument_list|(
literal|456
argument_list|)
expr_stmt|;
name|x
operator|.
name|setRecElNext
argument_list|(
name|xn
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|RecElType
argument_list|>
name|yh
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|RecElType
argument_list|>
name|zh
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|RecElType
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testRecElType
argument_list|(
name|x
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testRecElType
argument_list|(
name|x
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testRecElType
argument_list|(
name|x
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testRecElType(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|x
argument_list|,
name|yh
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecElType(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|y
argument_list|,
name|zh
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecElType(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//org.apache.type_test.types3.RecOuterType
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecMostInnerType
name|x
parameter_list|,
name|RecMostInnerType
name|y
parameter_list|)
block|{
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|&&
name|equals
argument_list|(
name|x
operator|.
name|getRecMostInnerNext
argument_list|()
argument_list|,
name|y
operator|.
name|getRecMostInnerNext
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecMostInnerNextType
name|x
parameter_list|,
name|RecMostInnerNextType
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|RecMostInnerType
argument_list|>
name|xx
init|=
name|x
operator|.
name|getRecMostInner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecMostInnerType
argument_list|>
name|yy
init|=
name|y
operator|.
name|getRecMostInner
argument_list|()
decl_stmt|;
if|if
condition|(
name|xx
operator|.
name|size
argument_list|()
operator|!=
name|yy
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|xx
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|yy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecInnerType
name|x
parameter_list|,
name|RecInnerType
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|RecMostInnerType
argument_list|>
name|mitx
init|=
name|x
operator|.
name|getRecMostInner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecMostInnerType
argument_list|>
name|mity
init|=
name|y
operator|.
name|getRecMostInner
argument_list|()
decl_stmt|;
if|if
condition|(
name|mitx
operator|.
name|size
argument_list|()
operator|!=
name|mity
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mitx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|mitx
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|mity
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|&&
name|equals
argument_list|(
name|x
operator|.
name|getRecInnerNext
argument_list|()
argument_list|,
name|y
operator|.
name|getRecInnerNext
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecInnerNextType
name|x
parameter_list|,
name|RecInnerNextType
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|RecInnerType
argument_list|>
name|xx
init|=
name|x
operator|.
name|getRecInner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecInnerType
argument_list|>
name|yy
init|=
name|y
operator|.
name|getRecInner
argument_list|()
decl_stmt|;
if|if
condition|(
name|xx
operator|.
name|size
argument_list|()
operator|!=
name|yy
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|xx
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|yy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecOuterNextType
name|x
parameter_list|,
name|RecOuterNextType
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|RecOuterType
argument_list|>
name|xx
init|=
name|x
operator|.
name|getRecOuter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecOuterType
argument_list|>
name|yy
init|=
name|y
operator|.
name|getRecOuter
argument_list|()
decl_stmt|;
if|if
condition|(
name|xx
operator|.
name|size
argument_list|()
operator|!=
name|yy
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|xx
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|yy
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|equals
parameter_list|(
name|RecOuterType
name|x
parameter_list|,
name|RecOuterType
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|RecMostInnerType
argument_list|>
name|mitx
init|=
name|x
operator|.
name|getRecMostInner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecMostInnerType
argument_list|>
name|mity
init|=
name|y
operator|.
name|getRecMostInner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecInnerType
argument_list|>
name|itx
init|=
name|x
operator|.
name|getRecInner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecInnerType
argument_list|>
name|ity
init|=
name|y
operator|.
name|getRecInner
argument_list|()
decl_stmt|;
if|if
condition|(
name|mitx
operator|.
name|size
argument_list|()
operator|!=
name|mity
operator|.
name|size
argument_list|()
operator|||
name|itx
operator|.
name|size
argument_list|()
operator|!=
name|ity
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mitx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|mitx
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|mity
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itx
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|itx
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ity
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|x
operator|.
name|getVarInt
argument_list|()
operator|==
name|y
operator|.
name|getVarInt
argument_list|()
operator|&&
name|equals
argument_list|(
name|x
operator|.
name|getRecOuterNext
argument_list|()
argument_list|,
name|y
operator|.
name|getRecOuterNext
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecOuterType
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"RecOuterType"
argument_list|)
condition|)
block|{
return|return;
block|}
name|RecMostInnerType
name|mitx
init|=
operator|new
name|RecMostInnerType
argument_list|()
decl_stmt|;
name|RecMostInnerType
name|mity
init|=
operator|new
name|RecMostInnerType
argument_list|()
decl_stmt|;
name|RecMostInnerNextType
name|mitxNext
init|=
operator|new
name|RecMostInnerNextType
argument_list|()
decl_stmt|;
name|RecMostInnerNextType
name|mityNext
init|=
operator|new
name|RecMostInnerNextType
argument_list|()
decl_stmt|;
name|mitx
operator|.
name|setRecMostInnerNext
argument_list|(
name|mitxNext
argument_list|)
expr_stmt|;
name|mity
operator|.
name|setRecMostInnerNext
argument_list|(
name|mityNext
argument_list|)
expr_stmt|;
name|RecInnerType
name|itx
init|=
operator|new
name|RecInnerType
argument_list|()
decl_stmt|;
name|RecInnerType
name|ity
init|=
operator|new
name|RecInnerType
argument_list|()
decl_stmt|;
name|RecInnerNextType
name|itxNext
init|=
operator|new
name|RecInnerNextType
argument_list|()
decl_stmt|;
name|RecInnerNextType
name|ityNext
init|=
operator|new
name|RecInnerNextType
argument_list|()
decl_stmt|;
name|itx
operator|.
name|setRecInnerNext
argument_list|(
name|itxNext
argument_list|)
expr_stmt|;
name|ity
operator|.
name|setRecInnerNext
argument_list|(
name|ityNext
argument_list|)
expr_stmt|;
name|RecOuterType
name|otx
init|=
operator|new
name|RecOuterType
argument_list|()
decl_stmt|;
name|RecOuterType
name|oty
init|=
operator|new
name|RecOuterType
argument_list|()
decl_stmt|;
name|RecOuterNextType
name|otxNext
init|=
operator|new
name|RecOuterNextType
argument_list|()
decl_stmt|;
name|RecOuterNextType
name|otyNext
init|=
operator|new
name|RecOuterNextType
argument_list|()
decl_stmt|;
name|otx
operator|.
name|setRecOuterNext
argument_list|(
name|otxNext
argument_list|)
expr_stmt|;
name|oty
operator|.
name|setRecOuterNext
argument_list|(
name|otyNext
argument_list|)
expr_stmt|;
name|mitx
operator|.
name|setVarInt
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|mity
operator|.
name|setVarInt
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|mitxNext
operator|.
name|getRecMostInner
argument_list|()
operator|.
name|add
argument_list|(
name|mity
argument_list|)
expr_stmt|;
name|itx
operator|.
name|setVarInt
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|ity
operator|.
name|setVarInt
argument_list|(
literal|22
argument_list|)
expr_stmt|;
name|itxNext
operator|.
name|getRecInner
argument_list|()
operator|.
name|add
argument_list|(
name|ity
argument_list|)
expr_stmt|;
name|itx
operator|.
name|getRecMostInner
argument_list|()
operator|.
name|add
argument_list|(
name|mitx
argument_list|)
expr_stmt|;
name|otx
operator|.
name|setVarInt
argument_list|(
literal|31
argument_list|)
expr_stmt|;
name|oty
operator|.
name|setVarInt
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|otxNext
operator|.
name|getRecOuter
argument_list|()
operator|.
name|add
argument_list|(
name|oty
argument_list|)
expr_stmt|;
name|otx
operator|.
name|getRecInner
argument_list|()
operator|.
name|add
argument_list|(
name|itx
argument_list|)
expr_stmt|;
name|otx
operator|.
name|getRecMostInner
argument_list|()
operator|.
name|add
argument_list|(
name|mitx
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|RecOuterType
argument_list|>
name|yh
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|oty
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|RecOuterType
argument_list|>
name|zh
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|RecOuterType
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testRecOuterType
argument_list|(
name|otx
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testRecOuterType
argument_list|(
name|otx
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testRecOuterType
argument_list|(
name|otx
argument_list|,
name|yh
argument_list|,
name|zh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertTrue
argument_list|(
literal|"testRecOuterType(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|otx
argument_list|,
name|yh
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecOuterType(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|oty
argument_list|,
name|zh
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRecOuterType(): Incorrect value for inout param"
argument_list|,
name|equals
argument_list|(
name|ret
argument_list|,
name|otx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|equals
parameter_list|(
name|String
name|msg
parameter_list|,
name|SimpleContent1
name|x
parameter_list|,
name|SimpleContent1
name|y
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getAttrib1A
argument_list|()
argument_list|,
name|y
operator|.
name|getAttrib1A
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getAttrib1B
argument_list|()
argument_list|,
name|y
operator|.
name|getAttrib1B
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleContent1
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleContent1"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SimpleContent1
name|x1
init|=
operator|new
name|SimpleContent1
argument_list|()
decl_stmt|;
name|x1
operator|.
name|setValue
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|x1
operator|.
name|setAttrib1A
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|x1
operator|.
name|setAttrib1B
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleContent1
name|y1
init|=
operator|new
name|SimpleContent1
argument_list|()
decl_stmt|;
name|y1
operator|.
name|setValue
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|y1
operator|.
name|setAttrib1A
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|y1
operator|.
name|setAttrib1B
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SimpleContent1
argument_list|>
name|y1Holder
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|y1
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SimpleContent1
argument_list|>
name|z1
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleContent1
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleContent1
argument_list|(
name|x1
argument_list|,
name|y1Holder
argument_list|,
name|z1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleContent1
argument_list|(
name|x1
argument_list|,
name|y1Holder
argument_list|,
name|z1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleContent1
argument_list|(
name|x1
argument_list|,
name|y1Holder
argument_list|,
name|z1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|equals
argument_list|(
literal|"testSimpleContent1(): Incorrect value for inout param"
argument_list|,
name|x1
argument_list|,
name|y1Holder
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testSimpleContent1(): Incorrect value for out param"
argument_list|,
name|y1
argument_list|,
name|z1
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testSimpleContent1(): Incorrect return value"
argument_list|,
name|x1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|equals
parameter_list|(
name|String
name|msg
parameter_list|,
name|SimpleContent2
name|x
parameter_list|,
name|SimpleContent2
name|y
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getAttrib2A
argument_list|()
argument_list|,
name|y
operator|.
name|getAttrib2A
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getAttrib2B
argument_list|()
argument_list|,
name|y
operator|.
name|getAttrib2B
argument_list|()
argument_list|)
expr_stmt|;
name|equals
argument_list|(
name|msg
argument_list|,
operator|(
name|SimpleContent1
operator|)
name|x
argument_list|,
operator|(
name|SimpleContent1
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleContent2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleContent2"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SimpleContent2
name|x2
init|=
operator|new
name|SimpleContent2
argument_list|()
decl_stmt|;
name|x2
operator|.
name|setValue
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|x2
operator|.
name|setAttrib1A
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|x2
operator|.
name|setAttrib1B
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|x2
operator|.
name|setAttrib2A
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|x2
operator|.
name|setAttrib2B
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleContent2
name|y2
init|=
operator|new
name|SimpleContent2
argument_list|()
decl_stmt|;
name|y2
operator|.
name|setValue
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|y2
operator|.
name|setAttrib1A
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|y2
operator|.
name|setAttrib1B
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|y2
operator|.
name|setAttrib2A
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|y2
operator|.
name|setAttrib2B
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SimpleContent2
argument_list|>
name|y2Holder
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|y2
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SimpleContent2
argument_list|>
name|z2
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleContent2
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleContent2
argument_list|(
name|x2
argument_list|,
name|y2Holder
argument_list|,
name|z2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleContent2
argument_list|(
name|x2
argument_list|,
name|y2Holder
argument_list|,
name|z2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleContent2
argument_list|(
name|x2
argument_list|,
name|y2Holder
argument_list|,
name|z2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|equals
argument_list|(
literal|"testSimpleContent2(): Incorrect value for inout param"
argument_list|,
name|x2
argument_list|,
name|y2Holder
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testSimpleContent2(): Incorrect value for out param"
argument_list|,
name|y2
argument_list|,
name|z2
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testSimpleContent2(): Incorrect return value"
argument_list|,
name|x2
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|equals
parameter_list|(
name|String
name|msg
parameter_list|,
name|SimpleContent3
name|x
parameter_list|,
name|SimpleContent3
name|y
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getAttrib3A
argument_list|()
argument_list|,
name|y
operator|.
name|getAttrib3A
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|isAttrib3B
argument_list|()
argument_list|,
name|y
operator|.
name|isAttrib3B
argument_list|()
argument_list|)
expr_stmt|;
name|equals
argument_list|(
name|msg
argument_list|,
operator|(
name|SimpleContent2
operator|)
name|x
argument_list|,
operator|(
name|SimpleContent2
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleContent3
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"SimpleContent3"
argument_list|)
condition|)
block|{
return|return;
block|}
name|SimpleContent3
name|x3
init|=
operator|new
name|SimpleContent3
argument_list|()
decl_stmt|;
name|x3
operator|.
name|setValue
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|x3
operator|.
name|setAttrib1A
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|x3
operator|.
name|setAttrib1B
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|x3
operator|.
name|setAttrib2A
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|x3
operator|.
name|setAttrib2B
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|x3
operator|.
name|setAttrib3A
argument_list|(
literal|"xxx"
argument_list|)
expr_stmt|;
name|x3
operator|.
name|setAttrib3B
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|SimpleContent3
name|y3
init|=
operator|new
name|SimpleContent3
argument_list|()
decl_stmt|;
name|y3
operator|.
name|setValue
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|y3
operator|.
name|setAttrib1A
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|y3
operator|.
name|setAttrib1B
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|y3
operator|.
name|setAttrib2A
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|y3
operator|.
name|setAttrib2B
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|y3
operator|.
name|setAttrib3A
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|y3
operator|.
name|setAttrib3B
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SimpleContent3
argument_list|>
name|y3Holder
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|y3
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SimpleContent3
argument_list|>
name|z3
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleContent3
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testSimpleContent3
argument_list|(
name|x3
argument_list|,
name|y3Holder
argument_list|,
name|z3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testSimpleContent3
argument_list|(
name|x3
argument_list|,
name|y3Holder
argument_list|,
name|z3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testSimpleContent3
argument_list|(
name|x3
argument_list|,
name|y3Holder
argument_list|,
name|z3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|equals
argument_list|(
literal|"testSimpleContent3(): Incorrect value for inout param"
argument_list|,
name|x3
argument_list|,
name|y3Holder
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testSimpleContent3(): Incorrect value for out param"
argument_list|,
name|y3
argument_list|,
name|z3
operator|.
name|value
argument_list|)
expr_stmt|;
name|equals
argument_list|(
literal|"testSimpleContent3(): Incorrect return value"
argument_list|,
name|x3
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|String
name|msg
parameter_list|,
name|UnionSimpleContent
name|x
parameter_list|,
name|UnionSimpleContent
name|y
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|y
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnionSimpleContent
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRunTest
argument_list|(
literal|"UnionSimpleContent"
argument_list|)
condition|)
block|{
return|return;
block|}
name|UnionSimpleContent
name|x
init|=
operator|new
name|UnionSimpleContent
argument_list|()
decl_stmt|;
name|x
operator|.
name|setValue
argument_list|(
literal|"5"
argument_list|)
expr_stmt|;
name|UnionSimpleContent
name|yOrig
init|=
operator|new
name|UnionSimpleContent
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setValue
argument_list|(
literal|"-7"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|UnionSimpleContent
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|UnionSimpleContent
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|UnionSimpleContent
name|ret
decl_stmt|;
if|if
condition|(
name|testDocLiteral
condition|)
block|{
name|ret
operator|=
name|docClient
operator|.
name|testUnionSimpleContent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testXMLBinding
condition|)
block|{
name|ret
operator|=
name|xmlClient
operator|.
name|testUnionSimpleContent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rpcClient
operator|.
name|testUnionSimpleContent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testUnionSimpleContent(): Incorrect value for inout param"
argument_list|,
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnionSimpleContent(): Incorrect value for out param"
argument_list|,
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testUnionSimpleContent(): Incorrect return value"
argument_list|,
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

