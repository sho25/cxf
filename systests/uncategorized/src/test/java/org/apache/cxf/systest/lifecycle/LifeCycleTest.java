begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|lifecycle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerLifeCycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|ControlImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|addressing
operator|.
name|GreeterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|WSAddressingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|LifeCycleTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|int
name|RECURSIVE_LIMIT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ADDRESSES
init|=
block|{
literal|"http://localhost:9056/SoapContext/SoapPort"
block|,
literal|"http://localhost:9057/SoapContext/SoapPort"
block|,
literal|"http://localhost:9058/SoapContext/SoapPort"
block|,
literal|"http://localhost:9059/SoapContext/SoapPort"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG
init|=
literal|"org/apache/cxf/systest/lifecycle/cxf.xml"
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|ServerLifeCycleManager
name|manager
decl_stmt|;
specifier|private
name|int
name|recursiveCount
decl_stmt|;
specifier|private
name|Endpoint
index|[]
name|recursiveEndpoints
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|startNotificationMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|stopNotificationMap
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|bus
operator|=
name|bf
operator|.
name|createBus
argument_list|(
name|CONFIG
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|manager
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerLifeCycleManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|recursiveCount
operator|=
literal|0
expr_stmt|;
name|recursiveEndpoints
operator|=
operator|new
name|Endpoint
index|[
name|RECURSIVE_LIMIT
index|]
expr_stmt|;
name|startNotificationMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|stopNotificationMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursive
parameter_list|()
block|{
name|assertNotNull
argument_list|(
literal|"unexpected non-null ServerLifeCycleManager"
argument_list|,
name|manager
argument_list|)
expr_stmt|;
name|manager
operator|.
name|registerListener
argument_list|(
operator|new
name|ServerLifeCycleListener
argument_list|()
block|{
specifier|public
name|void
name|startServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|String
name|address
init|=
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|verifyNotification
argument_list|(
name|startNotificationMap
argument_list|,
name|address
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|updateMap
argument_list|(
name|startNotificationMap
argument_list|,
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursiveCount
operator|<
name|RECURSIVE_LIMIT
condition|)
block|{
name|recursiveEndpoints
index|[
name|recursiveCount
operator|++
index|]
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
name|ADDRESSES
index|[
name|recursiveCount
index|]
argument_list|,
operator|new
name|GreeterImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stopServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|String
name|address
init|=
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|verifyNotification
argument_list|(
name|stopNotificationMap
argument_list|,
name|address
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|updateMap
argument_list|(
name|stopNotificationMap
argument_list|,
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursiveCount
operator|>
literal|0
condition|)
block|{
name|recursiveEndpoints
index|[
operator|--
name|recursiveCount
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Endpoint
operator|.
name|publish
argument_list|(
name|ADDRESSES
index|[
literal|0
index|]
argument_list|,
operator|new
name|GreeterImpl
argument_list|()
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ADDRESSES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|verifyNotification
argument_list|(
name|startNotificationMap
argument_list|,
name|ADDRESSES
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyNotification
argument_list|(
name|stopNotificationMap
argument_list|,
name|ADDRESSES
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetActiveFeatures
parameter_list|()
block|{
name|assertNotNull
argument_list|(
literal|"unexpected non-null ServerLifeCycleManager"
argument_list|,
name|manager
argument_list|)
expr_stmt|;
name|manager
operator|.
name|registerListener
argument_list|(
operator|new
name|ServerLifeCycleListener
argument_list|()
block|{
specifier|public
name|void
name|startServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
name|endpoint
init|=
name|server
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|updateMap
argument_list|(
name|startNotificationMap
argument_list|,
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|portName
init|=
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"SoapPort"
operator|.
name|equals
argument_list|(
name|portName
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|active
init|=
name|endpoint
operator|.
name|getActiveFeatures
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|active
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|active
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|WSAddressingFeature
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|active
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|AbstractFeature
operator|.
name|getActive
argument_list|(
name|active
argument_list|,
name|WSAddressingFeature
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|active
init|=
name|endpoint
operator|.
name|getActiveFeatures
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|active
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|AbstractFeature
operator|.
name|getActive
argument_list|(
name|active
argument_list|,
name|WSAddressingFeature
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stopServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|updateMap
argument_list|(
name|stopNotificationMap
argument_list|,
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Endpoint
name|greeter
init|=
name|Endpoint
operator|.
name|publish
argument_list|(
name|ADDRESSES
index|[
literal|0
index|]
argument_list|,
operator|new
name|GreeterImpl
argument_list|()
argument_list|)
decl_stmt|;
name|Endpoint
name|control
init|=
name|Endpoint
operator|.
name|publish
argument_list|(
name|ADDRESSES
index|[
literal|1
index|]
argument_list|,
operator|new
name|ControlImpl
argument_list|()
argument_list|)
decl_stmt|;
name|greeter
operator|.
name|stop
argument_list|()
expr_stmt|;
name|control
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|verifyNotification
argument_list|(
name|startNotificationMap
argument_list|,
name|ADDRESSES
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyNotification
argument_list|(
name|stopNotificationMap
argument_list|,
name|ADDRESSES
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyNotification
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|notificationMap
parameter_list|,
name|String
name|address
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
synchronized|synchronized
init|(
name|notificationMap
init|)
block|{
name|Integer
name|count
init|=
name|notificationMap
operator|.
name|get
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
literal|"unexpected prior notification for: "
operator|+
name|address
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"unexpected prior notification for: "
operator|+
name|address
argument_list|,
name|expected
argument_list|,
name|count
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|notificationMap
parameter_list|,
name|String
name|address
parameter_list|)
block|{
synchronized|synchronized
init|(
name|notificationMap
init|)
block|{
name|Integer
name|count
init|=
name|notificationMap
operator|.
name|get
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|notificationMap
operator|.
name|put
argument_list|(
name|address
argument_list|,
operator|new
name|Integer
argument_list|(
name|count
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|notificationMap
operator|.
name|put
argument_list|(
name|address
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

