begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|factory_pattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|wsaddressing
operator|.
name|W3CEndpointReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|factory_pattern
operator|.
name|IsEvenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|factory_pattern
operator|.
name|Number
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|factory_pattern
operator|.
name|NumberFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|factory_pattern
operator|.
name|NumberFactoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|factory_pattern
operator|.
name|NumberService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|ServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|ServiceDelegateAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusTestServerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/*  * exercise with multiplexWithAddress config rather than ws-a headers  */
end_comment

begin_class
specifier|public
class|class
name|MultiplexHttpAddressClientServerTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|static
specifier|final
name|String
name|FACTORY_ADDRESS
init|=
name|NumberFactoryImpl
operator|.
name|FACTORY_ADDRESS
decl_stmt|;
specifier|public
specifier|static
class|class
name|Server
extends|extends
name|AbstractBusTestServerBase
block|{
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|Object
name|implementor
init|=
operator|new
name|HttpNumberFactoryImpl
argument_list|()
decl_stmt|;
name|Endpoint
operator|.
name|publish
argument_list|(
name|NumberFactoryImpl
operator|.
name|FACTORY_ADDRESS
argument_list|,
name|implementor
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Server
name|s
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
name|s
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"done!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no need for ws-a, just enable multiplexWithAddress on server
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"cxf.config.file"
argument_list|,
literal|"org/apache/cxf/systest/factory_pattern/cxf.xml"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithGetPortExtensionHttp
parameter_list|()
throws|throws
name|Exception
block|{
name|NumberFactoryService
name|service
init|=
operator|new
name|NumberFactoryService
argument_list|()
decl_stmt|;
name|NumberFactory
name|factory
init|=
name|service
operator|.
name|getNumberFactoryPort
argument_list|()
decl_stmt|;
name|updateAddressPort
argument_list|(
name|factory
argument_list|,
name|NumberFactoryImpl
operator|.
name|PORT
argument_list|)
expr_stmt|;
name|NumberService
name|numService
init|=
operator|new
name|NumberService
argument_list|()
decl_stmt|;
name|ServiceImpl
name|serviceImpl
init|=
name|ServiceDelegateAccessor
operator|.
name|get
argument_list|(
name|numService
argument_list|)
decl_stmt|;
name|W3CEndpointReference
name|numberTwoRef
init|=
name|factory
operator|.
name|create
argument_list|(
literal|"20"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"reference"
argument_list|,
name|numberTwoRef
argument_list|)
expr_stmt|;
name|Number
name|num
init|=
name|serviceImpl
operator|.
name|getPort
argument_list|(
name|numberTwoRef
argument_list|,
name|Number
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"20 is even"
argument_list|,
name|num
operator|.
name|isEven
argument_list|()
operator|.
name|isEven
argument_list|()
argument_list|)
expr_stmt|;
name|W3CEndpointReference
name|numberTwentyThreeRef
init|=
name|factory
operator|.
name|create
argument_list|(
literal|"23"
argument_list|)
decl_stmt|;
name|num
operator|=
name|serviceImpl
operator|.
name|getPort
argument_list|(
name|numberTwentyThreeRef
argument_list|,
name|Number
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"23 is not even"
argument_list|,
operator|!
name|num
operator|.
name|isEven
argument_list|()
operator|.
name|isEven
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithManualMultiplexEprCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|numService
init|=
name|Service
operator|.
name|create
argument_list|(
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVICE_QNAME
argument_list|)
decl_stmt|;
name|Number
name|num
init|=
name|numService
operator|.
name|getPort
argument_list|(
name|Number
operator|.
name|class
argument_list|)
decl_stmt|;
name|InvocationHandler
name|handler
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|num
argument_list|)
decl_stmt|;
name|BindingProvider
name|bp
init|=
operator|(
name|BindingProvider
operator|)
name|handler
decl_stmt|;
name|bp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
operator|+
literal|"103"
argument_list|)
expr_stmt|;
name|IsEvenResponse
name|numResp
init|=
name|num
operator|.
name|isEven
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"103 is not even"
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|numResp
operator|.
name|isEven
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithGetWsdlOnServant
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|firstChar
init|=
operator|new
name|URL
argument_list|(
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
operator|+
literal|"?wsdl"
argument_list|)
operator|.
name|openStream
argument_list|()
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"firstChar :"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|firstChar
argument_list|)
argument_list|,
name|firstChar
operator|==
literal|'<'
argument_list|)
expr_stmt|;
name|firstChar
operator|=
operator|new
name|URL
argument_list|(
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
operator|+
literal|"103?wsdl"
argument_list|)
operator|.
name|openStream
argument_list|()
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"firstChar :"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|firstChar
argument_list|)
argument_list|,
name|firstChar
operator|==
literal|'<'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSoapAddressLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Should have received the soap:address location "
operator|+
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
argument_list|,
name|checkSoapAddressLocation
argument_list|(
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have received the soap:address location "
operator|+
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
operator|+
literal|"20"
argument_list|,
name|checkSoapAddressLocation
argument_list|(
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
operator|+
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have received the soap:address location "
operator|+
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
operator|+
literal|"22"
argument_list|,
name|checkSoapAddressLocation
argument_list|(
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
operator|+
literal|"22"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have received the soap:address location "
operator|+
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
operator|+
literal|"20"
argument_list|,
name|checkSoapAddressLocation
argument_list|(
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
operator|+
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have received the soap:address location "
operator|+
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
argument_list|,
name|checkSoapAddressLocation
argument_list|(
name|NumberFactoryImpl
operator|.
name|NUMBER_SERVANT_ADDRESS_ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkSoapAddressLocation
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|address
operator|+
literal|"?wsdl"
argument_list|)
decl_stmt|;
name|URLConnection
name|urlConn
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|urlConn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|br
operator|.
name|ready
argument_list|()
condition|)
block|{
name|String
name|str
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|contains
argument_list|(
literal|"soap:address"
argument_list|)
operator|&&
name|str
operator|.
name|contains
argument_list|(
literal|"location="
operator|+
literal|"\""
operator|+
name|address
operator|+
literal|"\""
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

