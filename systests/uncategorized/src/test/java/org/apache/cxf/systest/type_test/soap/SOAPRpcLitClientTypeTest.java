begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|type_test
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|type_test
operator|.
name|AbstractTypeTestClient5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|StructWithAnyArrayLax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|type_test
operator|.
name|types2
operator|.
name|StructWithAnyStrict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SOAPRpcLitClientTypeTest
extends|extends
name|AbstractTypeTestClient5
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|WSDL_PATH
init|=
literal|"/wsdl/type_test/type_test_rpclit_soap.wsdl"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/type_test/rpc"
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|QName
name|PORT_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/type_test/rpc"
argument_list|,
literal|"SOAPPort"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|ok
init|=
name|launchServer
argument_list|(
name|SOAPRpcLitServerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed to launch server"
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|initClient
argument_list|(
name|AbstractTypeTestClient5
operator|.
name|class
argument_list|,
name|SERVICE_NAME
argument_list|,
name|PORT_NAME
argument_list|,
name|WSDL_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithAnyStrict
parameter_list|()
throws|throws
name|Exception
block|{
name|SOAPFactory
name|factory
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SOAPElement
name|elem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"StringElementQualified"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|elem
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node"
argument_list|)
expr_stmt|;
name|StructWithAnyStrict
name|x
init|=
operator|new
name|StructWithAnyStrict
argument_list|()
decl_stmt|;
name|x
operator|.
name|setName
argument_list|(
literal|"Name x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAddress
argument_list|(
literal|"Some Address x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAny
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|elem
operator|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"StringElementQualified"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the second node"
argument_list|)
expr_stmt|;
name|StructWithAnyStrict
name|yOrig
init|=
operator|new
name|StructWithAnyStrict
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setName
argument_list|(
literal|"Name y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAddress
argument_list|(
literal|"Some Address y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAny
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAnyStrict
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|StructWithAnyStrict
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAnyStrict
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|StructWithAnyStrict
argument_list|>
argument_list|()
decl_stmt|;
name|StructWithAnyStrict
name|ret
init|=
name|rpcClient
operator|.
name|testStructWithAnyStrict
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEqualsStructWithAnyStrict
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyStrict
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyStrict
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithAnyStrictComplex
parameter_list|()
throws|throws
name|Exception
block|{
name|SOAPFactory
name|factory
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SOAPElement
name|elem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"AnonTypeElementQualified"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|elem
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|SOAPElement
name|floatElem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"varFloat"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|floatElem
operator|.
name|addTextNode
argument_list|(
literal|"12.5"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addChildElement
argument_list|(
name|floatElem
argument_list|)
expr_stmt|;
name|SOAPElement
name|intElem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"varInt"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|intElem
operator|.
name|addTextNode
argument_list|(
literal|"34"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addChildElement
argument_list|(
name|intElem
argument_list|)
expr_stmt|;
name|SOAPElement
name|stringElem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"varString"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|stringElem
operator|.
name|addTextNode
argument_list|(
literal|"test string within any"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addChildElement
argument_list|(
name|stringElem
argument_list|)
expr_stmt|;
name|StructWithAnyStrict
name|x
init|=
operator|new
name|StructWithAnyStrict
argument_list|()
decl_stmt|;
name|x
operator|.
name|setName
argument_list|(
literal|"Name x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAddress
argument_list|(
literal|"Some Address x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAny
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|elem
operator|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"AnonTypeElementQualified"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|floatElem
operator|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"varFloat"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|floatElem
operator|.
name|addTextNode
argument_list|(
literal|"12.76"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addChildElement
argument_list|(
name|floatElem
argument_list|)
expr_stmt|;
name|intElem
operator|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"varInt"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|intElem
operator|.
name|addTextNode
argument_list|(
literal|"56"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addChildElement
argument_list|(
name|intElem
argument_list|)
expr_stmt|;
name|stringElem
operator|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"varString"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|stringElem
operator|.
name|addTextNode
argument_list|(
literal|"test string"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addChildElement
argument_list|(
name|stringElem
argument_list|)
expr_stmt|;
name|StructWithAnyStrict
name|yOrig
init|=
operator|new
name|StructWithAnyStrict
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setName
argument_list|(
literal|"Name y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAddress
argument_list|(
literal|"Some Address y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAny
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAnyStrict
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|StructWithAnyStrict
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAnyStrict
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|StructWithAnyStrict
argument_list|>
argument_list|()
decl_stmt|;
name|StructWithAnyStrict
name|ret
init|=
name|rpcClient
operator|.
name|testStructWithAnyStrict
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEqualsStructWithAnyStrict
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyStrict
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyStrict
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithAnyArrayLax
parameter_list|()
throws|throws
name|Exception
block|{
name|SOAPFactory
name|factory
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SOAPElement
name|elem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"StringElementQualified"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|elem
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node"
argument_list|)
expr_stmt|;
name|StructWithAnyArrayLax
name|x
init|=
operator|new
name|StructWithAnyArrayLax
argument_list|()
decl_stmt|;
name|x
operator|.
name|setName
argument_list|(
literal|"Name x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAddress
argument_list|(
literal|"Some Address x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|elem
operator|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"StringElementQualified"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addTextNode
argument_list|(
literal|"This is the text of the node for the second struct"
argument_list|)
expr_stmt|;
name|StructWithAnyArrayLax
name|yOrig
init|=
operator|new
name|StructWithAnyArrayLax
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setName
argument_list|(
literal|"Name y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAddress
argument_list|(
literal|"Some Other Address y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAnyArrayLax
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|StructWithAnyArrayLax
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAnyArrayLax
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|StructWithAnyArrayLax
argument_list|>
argument_list|()
decl_stmt|;
name|StructWithAnyArrayLax
name|ret
init|=
name|rpcClient
operator|.
name|testStructWithAnyArrayLax
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEqualsStructWithAnyArrayLax
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyArrayLax
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyArrayLax
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructWithAnyArrayLaxComplex
parameter_list|()
throws|throws
name|Exception
block|{
name|SOAPFactory
name|factory
init|=
name|SOAPFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SOAPElement
name|elem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"AnonTypeElementQualified"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|elem
operator|.
name|addNamespaceDeclaration
argument_list|(
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
expr_stmt|;
name|SOAPElement
name|floatElem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"varFloat"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|floatElem
operator|.
name|addTextNode
argument_list|(
literal|"12.76"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addChildElement
argument_list|(
name|floatElem
argument_list|)
expr_stmt|;
name|SOAPElement
name|intElem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"varInt"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|intElem
operator|.
name|addTextNode
argument_list|(
literal|"56"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addChildElement
argument_list|(
name|intElem
argument_list|)
expr_stmt|;
name|SOAPElement
name|stringElem
init|=
name|factory
operator|.
name|createElement
argument_list|(
literal|"varString"
argument_list|,
literal|"tns"
argument_list|,
literal|"http://apache.org/type_test/types1"
argument_list|)
decl_stmt|;
name|stringElem
operator|.
name|addTextNode
argument_list|(
literal|"test string"
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addChildElement
argument_list|(
name|stringElem
argument_list|)
expr_stmt|;
name|StructWithAnyArrayLax
name|x
init|=
operator|new
name|StructWithAnyArrayLax
argument_list|()
decl_stmt|;
name|x
operator|.
name|setName
argument_list|(
literal|"Name x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|setAddress
argument_list|(
literal|"Some Address x"
argument_list|)
expr_stmt|;
name|x
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|StructWithAnyArrayLax
name|yOrig
init|=
operator|new
name|StructWithAnyArrayLax
argument_list|()
decl_stmt|;
name|yOrig
operator|.
name|setName
argument_list|(
literal|"Name y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|setAddress
argument_list|(
literal|"Some Other Address y"
argument_list|)
expr_stmt|;
name|yOrig
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|StructWithAnyArrayLax
argument_list|>
name|y
init|=
operator|new
name|Holder
argument_list|<
name|StructWithAnyArrayLax
argument_list|>
argument_list|(
name|yOrig
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|StructWithAnyArrayLax
argument_list|>
name|z
init|=
operator|new
name|Holder
argument_list|<
name|StructWithAnyArrayLax
argument_list|>
argument_list|()
decl_stmt|;
name|StructWithAnyArrayLax
name|ret
init|=
name|rpcClient
operator|.
name|testStructWithAnyArrayLax
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perfTestOnly
condition|)
block|{
name|assertEqualsStructWithAnyArrayLax
argument_list|(
name|x
argument_list|,
name|y
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyArrayLax
argument_list|(
name|yOrig
argument_list|,
name|z
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEqualsStructWithAnyArrayLax
argument_list|(
name|x
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertEqualsStructWithAnyStrict
parameter_list|(
name|StructWithAnyStrict
name|a
parameter_list|,
name|StructWithAnyStrict
name|b
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"StructWithAnyStrict names don't match"
argument_list|,
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"StructWithAnyStrict addresses don't match"
argument_list|,
name|a
operator|.
name|getAddress
argument_list|()
argument_list|,
name|b
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getAny
argument_list|()
operator|instanceof
name|SOAPElement
operator|&&
name|b
operator|.
name|getAny
argument_list|()
operator|instanceof
name|SOAPElement
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
name|SOAPElement
operator|)
name|a
operator|.
name|getAny
argument_list|()
argument_list|,
operator|(
name|SOAPElement
operator|)
name|b
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertEqualsStructWithAnyArrayLax
parameter_list|(
name|StructWithAnyArrayLax
name|a
parameter_list|,
name|StructWithAnyArrayLax
name|b
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"StructWithAnyArrayLax names don't match"
argument_list|,
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"StructWithAnyArrayLax addresses don't match"
argument_list|,
name|a
operator|.
name|getAddress
argument_list|()
argument_list|,
name|b
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ae
init|=
name|a
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|be
init|=
name|b
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"StructWithAnyArrayLax soap element lengths don't match"
argument_list|,
name|ae
operator|.
name|size
argument_list|()
argument_list|,
name|be
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ae
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ae
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SOAPElement
operator|&&
name|be
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SOAPElement
condition|)
block|{
name|assertEquals
argument_list|(
name|ae
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|be
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

