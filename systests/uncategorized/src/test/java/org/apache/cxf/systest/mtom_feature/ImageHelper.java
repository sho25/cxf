begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|mtom_feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|MediaTracker
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|stream
operator|.
name|ImageOutputStream
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ImageHelper
block|{
specifier|private
name|ImageHelper
parameter_list|()
block|{
comment|// empty
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getImageBytes
parameter_list|(
name|Image
name|image
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|BufferedImage
name|bufImage
init|=
name|convertToBufferedImage
argument_list|(
name|image
argument_list|)
decl_stmt|;
name|ImageWriter
name|writer
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|ImageWriter
argument_list|>
name|i
init|=
name|ImageIO
operator|.
name|getImageWritersByMIMEType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writer
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|ImageOutputStream
name|stream
init|=
literal|null
decl_stmt|;
name|stream
operator|=
name|ImageIO
operator|.
name|createImageOutputStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setOutput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|bufImage
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|BufferedImage
name|convertToBufferedImage
parameter_list|(
name|Image
name|image
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|image
operator|instanceof
name|BufferedImage
condition|)
block|{
return|return
operator|(
name|BufferedImage
operator|)
name|image
return|;
block|}
comment|/*not sure how this is used*/
name|MediaTracker
name|tracker
init|=
operator|new
name|MediaTracker
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|addImage
argument_list|(
name|image
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|tracker
operator|.
name|waitForAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|BufferedImage
name|bufImage
init|=
operator|new
name|BufferedImage
argument_list|(
name|image
operator|.
name|getWidth
argument_list|(
literal|null
argument_list|)
argument_list|,
name|image
operator|.
name|getHeight
argument_list|(
literal|null
argument_list|)
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|)
decl_stmt|;
name|Graphics
name|g
init|=
name|bufImage
operator|.
name|createGraphics
argument_list|()
decl_stmt|;
name|g
operator|.
name|drawImage
argument_list|(
name|image
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|bufImage
return|;
block|}
block|}
end_class

end_unit

