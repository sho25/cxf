begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|clustering
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Tests failover within a static cluster.  */
end_comment

begin_class
specifier|public
class|class
name|CircuitBreakerFailoverTest
extends|extends
name|FailoverTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FAILOVER_CONFIG
init|=
literal|"org/apache/cxf/systest/clustering/circuit_breaker_failover.xml"
decl_stmt|;
specifier|protected
name|String
name|getConfig
parameter_list|()
block|{
return|return
name|FAILOVER_CONFIG
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithNoAlternativeEndpoints
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Greeter
name|g
init|=
name|getGreeter
argument_list|(
name|REPLICA_E
argument_list|)
decl_stmt|;
try|try
block|{
name|g
operator|.
name|greetMe
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting communication exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Could not send Message."
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|g
operator|.
name|greetMe
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting no alternative endpoints exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"None of alternative addresses are available at the moment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithAlternativeEnpdpoints
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Greeter
name|g
init|=
name|getGreeter
argument_list|(
name|REPLICA_A
argument_list|)
decl_stmt|;
name|startTarget
argument_list|(
name|REPLICA_E
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|response
init|=
name|g
operator|.
name|greetMe
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected non-null response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopTarget
argument_list|(
name|REPLICA_E
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|g
operator|.
name|greetMe
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting no alternative endpoints exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Could not send Message."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

