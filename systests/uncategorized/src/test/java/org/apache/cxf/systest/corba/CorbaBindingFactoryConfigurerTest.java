begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|corba
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|BindingFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaBindingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|OrbConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaBindingFactoryConfigurerTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
name|CorbaBindingFactoryConfigurerTest
parameter_list|()
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testOrbConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|URL
name|cxfConfig
init|=
literal|null
decl_stmt|;
name|cxfConfig
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
literal|"corba_binding_factory_configurer.xml"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|=
name|bf
operator|.
name|createBus
argument_list|(
name|cxfConfig
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|BindingFactoryManager
name|bfm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|BindingFactoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|CorbaBindingFactory
name|factory
init|=
operator|(
name|CorbaBindingFactory
operator|)
name|bfm
operator|.
name|getBindingFactory
argument_list|(
literal|"http://cxf.apache.org/bindings/corba"
argument_list|)
decl_stmt|;
name|OrbConfig
name|orbConfig
init|=
operator|(
name|OrbConfig
operator|)
name|factory
operator|.
name|getOrbConfig
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"CorbaBindingFactoryConfigurer is null"
argument_list|,
name|orbConfig
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|orbConfig
operator|.
name|getOrbProperties
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"probs is null"
argument_list|,
name|props
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"prob1 is not equal to value1"
argument_list|,
literal|"value1"
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
literal|"prop1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"prob2 is not equal to value2"
argument_list|,
literal|"value2"
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
literal|"prop2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ORBClass is not equal to MyORBImpl"
argument_list|,
literal|"com.orbimplco.MyORBImpl"
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
literal|"org.omg.CORBA.ORBClass"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ORBSingletonClass is not equal to MyORBSingleton"
argument_list|,
literal|"com.orbimplco.MyORBSingleton"
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
literal|"org.omg.CORBA.ORBSingletonClass"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|orbArgs
init|=
name|orbConfig
operator|.
name|getOrbArgs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"orbArgs is null"
argument_list|,
name|orbArgs
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|domainNameId
init|=
name|orbArgs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"domainNameId is not equal to -ORBdomain_name"
argument_list|,
literal|"-ORBdomain_name"
operator|.
name|equals
argument_list|(
name|domainNameId
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|domainNameValue
init|=
name|orbArgs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"domainNameValue is not equal to test-domain"
argument_list|,
literal|"test-domain"
operator|.
name|equals
argument_list|(
name|domainNameValue
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|configDomainsDirId
init|=
name|orbArgs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"configDomainsDirId is not equal to -ORBconfig_domains_dir"
argument_list|,
literal|"-ORBconfig_domains_dir"
operator|.
name|equals
argument_list|(
name|configDomainsDirId
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|configDomainsDirValue
init|=
name|orbArgs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"configDomainsDirValue is not equal to src/test/resources"
argument_list|,
literal|"src/test/resources"
operator|.
name|equals
argument_list|(
name|configDomainsDirValue
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|orbNameId
init|=
name|orbArgs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"orbNameId is not equal to -ORBname"
argument_list|,
literal|"-ORBname"
operator|.
name|equals
argument_list|(
name|orbNameId
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|orbNameValue
init|=
name|orbArgs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"orbNameValue is not equal to test"
argument_list|,
literal|"test"
operator|.
name|equals
argument_list|(
name|orbNameValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

