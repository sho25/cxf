begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Dispatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ServiceMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|LoggingInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|LoggingOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policytest
operator|.
name|doubleit
operator|.
name|DoubleItFault_Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policytest
operator|.
name|doubleit
operator|.
name|DoubleItPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policytest
operator|.
name|doubleit
operator|.
name|DoubleItService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SecurityPolicyTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|allocatePort
argument_list|(
name|SecurityPolicyTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SSL_PORT
init|=
name|allocatePort
argument_list|(
name|SecurityPolicyTest
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SecPolTest"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_HTTPS_ADDRESS
init|=
literal|"https://localhost:"
operator|+
name|SSL_PORT
operator|+
literal|"/SecPolTest"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_ENCSIGN_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SecPolTestEncryptThenSign"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_SIGNENC_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SecPolTestSignThenEncrypt"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_SIGNENC_PROVIDER_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SecPolTestSignThenEncryptProvider"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_SIGN_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SecPolTestSign"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_XPATH_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SecPolTestXPath"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_SIGNONLY_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SecPolTestSignedOnly"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_CXF3041_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SecPolTestCXF3041"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_CXF3042_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SecPolTestCXF3042"
decl_stmt|;
specifier|public
specifier|static
class|class
name|ServerPasswordCallback
implements|implements
name|CallbackHandler
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
name|WSPasswordCallback
name|pc
init|=
operator|(
name|WSPasswordCallback
operator|)
name|callbacks
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|pc
operator|.
name|getIdentifier
argument_list|()
operator|.
name|equals
argument_list|(
literal|"bob"
argument_list|)
condition|)
block|{
comment|// set the password on the callback. This will be compared to the
comment|// password which was sent from the client.
name|pc
operator|.
name|setPassword
argument_list|(
literal|"pwd"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|DoubleItService
name|service
init|=
operator|new
name|DoubleItService
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|createStaticBus
argument_list|(
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"https_config.xml"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getStaticBus
argument_list|()
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|EndpointImpl
name|ep
init|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_HTTPS_ADDRESS
argument_list|,
operator|new
name|DoubleItImplHttps
argument_list|()
argument_list|)
decl_stmt|;
name|ep
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|ServerPasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_ADDRESS
argument_list|,
operator|new
name|DoubleItImpl
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_ENCSIGN_ADDRESS
argument_list|,
operator|new
name|DoubleItImplEncryptThenSign
argument_list|()
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|ep
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_SIGNENC_ADDRESS
argument_list|,
operator|new
name|DoubleItImplSignThenEncrypt
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|=
name|ep
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_SIGN_ADDRESS
argument_list|,
operator|new
name|DoubleItImplSign
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|=
name|ep
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_XPATH_ADDRESS
argument_list|,
operator|new
name|DoubleItImplXPath
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|=
name|ep
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_SIGNENC_PROVIDER_ADDRESS
argument_list|,
operator|new
name|DoubleItProvider
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|=
name|ep
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_SIGNONLY_ADDRESS
argument_list|,
operator|new
name|DoubleItImplSignOnly
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|=
name|ep
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_CXF3041_ADDRESS
argument_list|,
operator|new
name|DoubleItImplCXF3041
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|=
name|ep
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|(
name|EndpointImpl
operator|)
name|Endpoint
operator|.
name|publish
argument_list|(
name|POLICY_CXF3042_ADDRESS
argument_list|,
operator|new
name|DoubleItImplCXF3042
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|=
name|ep
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|SecurityPolicyTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|DoubleItPortType
name|pt
decl_stmt|;
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortXPath
argument_list|()
expr_stmt|;
name|updateAddressPort
argument_list|(
name|pt
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortEncryptThenSign
argument_list|()
expr_stmt|;
name|updateAddressPort
argument_list|(
name|pt
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortSign
argument_list|()
expr_stmt|;
name|updateAddressPort
argument_list|(
name|pt
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortSignThenEncrypt
argument_list|()
expr_stmt|;
name|updateAddressPort
argument_list|(
name|pt
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|POLICY_SIGNENC_PROVIDER_ADDRESS
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortHttps
argument_list|()
expr_stmt|;
name|updateAddressPort
argument_list|(
name|pt
argument_list|,
name|SSL_PORT
argument_list|)
expr_stmt|;
try|try
block|{
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|msg
operator|.
name|contains
argument_list|(
literal|"sername"
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|USERNAME
argument_list|,
literal|"bob"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
argument_list|,
literal|"bob"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|PASSWORD
argument_list|,
literal|"pwd"
argument_list|)
expr_stmt|;
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortHttp
argument_list|()
expr_stmt|;
name|updateAddressPort
argument_list|(
name|pt
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"https policy should have triggered"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|msg
operator|.
name|contains
argument_list|(
literal|"HttpsToken"
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedOnlyWithUnsignedMessage
parameter_list|()
throws|throws
name|Exception
block|{
comment|//CXF-2244
name|DoubleItPortType
name|pt
decl_stmt|;
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortSignedOnly
argument_list|()
expr_stmt|;
name|updateAddressPort
argument_list|(
name|pt
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
argument_list|)
expr_stmt|;
comment|//This should work as it should be properly signed.
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StringWriter
name|swriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|swriter
argument_list|)
decl_stmt|;
try|try
block|{
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|pt
argument_list|)
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingInInterceptor
argument_list|(
literal|"CheckFaultLogging"
argument_list|,
name|writer
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have resulted in a DoubleItFault_Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoubleItFault_Exception
name|ex
parameter_list|)
block|{
comment|//expected
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|s
init|=
name|swriter
operator|.
name|toString
argument_list|()
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"Payload: "
argument_list|)
operator|+
literal|9
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|"Envelope>"
argument_list|)
operator|+
literal|9
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Content wasn't encrypted!"
argument_list|,
operator|!
name|s
operator|.
name|contains
argument_list|(
literal|"I don't like that."
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Document
name|d
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|nd
init|=
name|d
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
operator|&&
operator|!
literal|"Body"
operator|.
name|equals
argument_list|(
name|nd
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nd
operator|==
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Attr
name|val
init|=
operator|(
operator|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
operator|)
name|nd
operator|)
operator|.
name|getAttributeNodeNS
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|,
literal|"Id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No wsu:Id, thus, not signed"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|//Try sending a message with the "TimestampOnly" policy into affect to the
comment|//service running the "signed only" policy.  This SHOULD fail as the
comment|//body is then not signed.
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortTimestampOnly
argument_list|()
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|POLICY_SIGNONLY_ADDRESS
argument_list|)
expr_stmt|;
try|try
block|{
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have had a security/policy exception as the body wasn't signed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"policy alternatives"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDispatchClient
parameter_list|()
throws|throws
name|Exception
block|{
name|Dispatch
argument_list|<
name|Source
argument_list|>
name|disp
init|=
name|service
operator|.
name|createDispatch
argument_list|(
name|DoubleItService
operator|.
name|DoubleItPortEncryptThenSign
argument_list|,
name|Source
operator|.
name|class
argument_list|,
name|Mode
operator|.
name|PAYLOAD
argument_list|)
decl_stmt|;
name|disp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
name|disp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|disp
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|updateAddressPort
argument_list|(
name|disp
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
name|String
name|req
init|=
literal|"<ns2:DoubleIt xmlns:ns2=\"http://cxf.apache.org/policytest/DoubleIt\">"
operator|+
literal|"<numberToDouble>25</numberToDouble></ns2:DoubleIt>"
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|req
argument_list|)
argument_list|)
decl_stmt|;
name|source
operator|=
name|disp
operator|.
name|invoke
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|Node
name|nd
init|=
name|XMLUtils
operator|.
name|fromSource
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|instanceof
name|Document
condition|)
block|{
name|nd
operator|=
operator|(
operator|(
name|Document
operator|)
name|nd
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"ns2"
argument_list|,
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|)
expr_stmt|;
name|XPathUtils
name|xp
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|xp
operator|.
name|getValue
argument_list|(
literal|"//ns2:DoubleItResponse/doubledNumber"
argument_list|,
name|nd
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|XMLUtils
operator|.
name|toString
argument_list|(
name|nd
argument_list|)
argument_list|,
literal|"50"
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|AbstractDoubleItImpl
implements|implements
name|DoubleItPortType
block|{
comment|/** {@inheritDoc}*/
specifier|public
name|BigInteger
name|doubleIt
parameter_list|(
name|BigInteger
name|numberToDouble
parameter_list|)
throws|throws
name|DoubleItFault_Exception
block|{
if|if
condition|(
name|numberToDouble
operator|.
name|equals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|100
argument_list|)
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policytest
operator|.
name|doubleit
operator|.
name|DoubleItFault
name|f
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policytest
operator|.
name|doubleit
operator|.
name|DoubleItFault
argument_list|()
decl_stmt|;
name|f
operator|.
name|setReason
argument_list|(
literal|"Number is -100.  I don't like that."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoubleItFault_Exception
argument_list|(
literal|"DoubleItException."
argument_list|,
name|f
argument_list|)
throw|;
block|}
return|return
name|numberToDouble
operator|.
name|multiply
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"2"
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortHttp"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.policytest.doubleit.DoubleItPortType"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItImpl
extends|extends
name|AbstractDoubleItImpl
block|{     }
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortHttps"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.policytest.doubleit.DoubleItPortType"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItImplHttps
extends|extends
name|AbstractDoubleItImpl
block|{     }
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortEncryptThenSign"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.policytest.doubleit.DoubleItPortType"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItImplEncryptThenSign
extends|extends
name|AbstractDoubleItImpl
block|{     }
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortSignThenEncrypt"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.policytest.doubleit.DoubleItPortType"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItImplSignThenEncrypt
extends|extends
name|AbstractDoubleItImpl
block|{     }
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortSign"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.policytest.doubleit.DoubleItPortType"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItImplSign
extends|extends
name|AbstractDoubleItImpl
block|{     }
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortXPath"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.policytest.doubleit.DoubleItPortType"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItImplXPath
extends|extends
name|AbstractDoubleItImpl
block|{     }
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortSignedOnly"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.policytest.doubleit.DoubleItPortType"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItImplSignOnly
extends|extends
name|AbstractDoubleItImpl
block|{     }
annotation|@
name|WebServiceProvider
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortSignThenEncrypt"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
annotation|@
name|ServiceMode
argument_list|(
name|value
operator|=
name|Mode
operator|.
name|PAYLOAD
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItProvider
implements|implements
name|Provider
argument_list|<
name|Source
argument_list|>
block|{
specifier|public
name|Source
name|invoke
parameter_list|(
name|Source
name|obj
parameter_list|)
block|{
comment|//CHECK the incoming
name|Node
name|el
decl_stmt|;
try|try
block|{
name|el
operator|=
name|XMLUtils
operator|.
name|fromSource
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|el
operator|instanceof
name|Document
condition|)
block|{
name|el
operator|=
operator|(
operator|(
name|Document
operator|)
name|el
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"ns2"
argument_list|,
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|)
expr_stmt|;
name|XPathUtils
name|xp
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|String
name|o
init|=
operator|(
name|String
operator|)
name|xp
operator|.
name|getValue
argument_list|(
literal|"//ns2:DoubleIt/numberToDouble"
argument_list|,
name|el
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|String
name|req
init|=
literal|"<ns2:DoubleItResponse xmlns:ns2=\"http://cxf.apache.org/policytest/DoubleIt\">"
operator|+
literal|"<doubledNumber>"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|*
literal|2
argument_list|)
operator|+
literal|"</doubledNumber></ns2:DoubleItResponse>"
decl_stmt|;
return|return
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|req
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortCXF3041"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.policytest.doubleit.DoubleItPortType"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItImplCXF3041
extends|extends
name|AbstractDoubleItImpl
block|{     }
annotation|@
name|WebService
argument_list|(
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/policytest/DoubleIt"
argument_list|,
name|portName
operator|=
literal|"DoubleItPortCXF3042"
argument_list|,
name|serviceName
operator|=
literal|"DoubleItService"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.policytest.doubleit.DoubleItPortType"
argument_list|,
name|wsdlLocation
operator|=
literal|"classpath:/wsdl_systest_wsspec/DoubleIt.wsdl"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleItImplCXF3042
extends|extends
name|AbstractDoubleItImpl
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testCXF3041
parameter_list|()
throws|throws
name|Exception
block|{
name|DoubleItPortType
name|pt
decl_stmt|;
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortCXF3041
argument_list|()
expr_stmt|;
name|updateAddressPort
argument_list|(
name|pt
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"bob.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCXF3042
parameter_list|()
throws|throws
name|Exception
block|{
name|DoubleItPortType
name|pt
decl_stmt|;
name|pt
operator|=
name|service
operator|.
name|getDoubleItPortCXF3042
argument_list|()
expr_stmt|;
name|updateAddressPort
argument_list|(
name|pt
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
operator|new
name|KeystorePasswordCallback
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|pt
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"alice.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|pt
operator|.
name|doubleIt
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

