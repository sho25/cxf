begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Dispatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|Control
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|ControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|GreeterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|DispatchImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|util
operator|.
name|ConnectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|util
operator|.
name|InMessageRecorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|util
operator|.
name|MessageFlow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|util
operator|.
name|MessageRecorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|ws
operator|.
name|util
operator|.
name|OutMessageRecorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
operator|.
name|TestUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|AbstractBusClientServerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|Names200408
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RM10Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the addition of WS-RM properties to application messages and the  * exchange of WS-RM protocol messages.  */
end_comment

begin_class
specifier|public
class|class
name|SequenceTest
extends|extends
name|AbstractBusClientServerTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|Server
operator|.
name|PORT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|SequenceTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|GREETMEONEWAY_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/greeter_control"
argument_list|,
literal|"greetMeOneWay"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GREETMEONEWAY_ACTION
init|=
literal|"http://cxf.apache.org/greeter_control/Greeter/greetMeOneWayRequest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|GREETME_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/greeter_control"
argument_list|,
literal|"greetMe"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GREETME_ACTION
init|=
literal|"http://cxf.apache.org/greeter_control/Greeter/greetMeRequest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GREETME_RESPONSE_ACTION
init|=
literal|"http://cxf.apache.org/greeter_control/Greeter/greetMeResponse"
decl_stmt|;
specifier|private
specifier|static
name|String
name|decoupledEndpoint
decl_stmt|;
specifier|private
specifier|static
name|int
name|decoupledCount
init|=
literal|1
decl_stmt|;
specifier|private
name|Bus
name|controlBus
decl_stmt|;
specifier|private
name|Control
name|control
decl_stmt|;
specifier|private
name|Bus
name|greeterBus
decl_stmt|;
specifier|private
name|Greeter
name|greeter
decl_stmt|;
specifier|private
name|OutMessageRecorder
name|outRecorder
decl_stmt|;
specifier|private
name|InMessageRecorder
name|inRecorder
decl_stmt|;
specifier|private
name|Dispatch
argument_list|<
name|DOMSource
argument_list|>
name|dispatch
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServers
parameter_list|()
throws|throws
name|Exception
block|{
name|TestUtilities
operator|.
name|setKeepAliveSystemProperty
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"server did not launch correctly"
argument_list|,
name|launchServer
argument_list|(
name|Server
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|TestUtilities
operator|.
name|recoverKeepAliveSystemProperty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|stopClient
argument_list|()
expr_stmt|;
name|stopControl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// --- tests ---
annotation|@
name|Test
specifier|public
name|void
name|testOnewayAnonymousAcks
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors.xml"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.util.logging.ConsoleHandler.level"
argument_list|,
literal|"FINE"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"once"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"twice"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"thrice"
argument_list|)
expr_stmt|;
name|verifyOnewayAnonymousAcks
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnewayAnonymousAcksProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors_provider.xml"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"once"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"twice"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"thrice"
argument_list|)
expr_stmt|;
name|verifyOnewayAnonymousAcks
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnewayAnonymousAcksDispatch
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors.xml"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|WSDL_OPERATION
argument_list|,
name|GREETMEONEWAY_NAME
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|invokeOneWay
argument_list|(
name|getDOMRequest
argument_list|(
literal|"One"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|invokeOneWay
argument_list|(
name|getDOMRequest
argument_list|(
literal|"Two"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|invokeOneWay
argument_list|(
name|getDOMRequest
argument_list|(
literal|"Three"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOnewayAnonymousAcks
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnewayAnonymousAcksDispatchProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors_provider.xml"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|WSDL_OPERATION
argument_list|,
name|GREETMEONEWAY_NAME
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|invokeOneWay
argument_list|(
name|getDOMRequest
argument_list|(
literal|"One"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|invokeOneWay
argument_list|(
name|getDOMRequest
argument_list|(
literal|"Two"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|invokeOneWay
argument_list|(
name|getDOMRequest
argument_list|(
literal|"Three"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOnewayAnonymousAcks
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyOnewayAnonymousAcks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// three application messages plus createSequence
name|awaitMessages
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// createSequenceResponse plus 3 partial responses
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnewayDeferredAnonymousAcks
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/deferred.xml"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"once"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"twice"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"thrice"
argument_list|)
expr_stmt|;
name|awaitMessages
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
comment|// three application messages plus createSequence
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// createSequenceResponse message plus 3 partial responses, only the
comment|// last one should include a sequence acknowledgment
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
literal|null
block|,
literal|null
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnewayDeferredNonAnonymousAcks
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/deferred.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"once"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"twice"
argument_list|)
expr_stmt|;
comment|// CreateSequence plus two greetMeOneWay requests
name|awaitMessages
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// CreateSequenceResponse plus three partial responses, no
comment|// acknowledgments included
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[
literal|4
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[
literal|4
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActionsIgnoringPartialResponses
argument_list|(
name|expectedActions
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purge
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
comment|// a standalone acknowledgement should have been sent from the server
comment|// side by now
name|awaitMessages
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mf
operator|.
name|reset
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/*    @Test     public void testOnewayAnonymousAcksSequenceLength1() throws Exception {         init("org/apache/cxf/systest/ws/rm/seqlength1.xml");          greeter.greetMeOneWay("once");         greeter.greetMeOneWay("twice");          // two application messages plus two createSequence plus two         // terminateSequence          awaitMessages(6, 6);                  MessageFlow mf = new MessageFlow(outRecorder.getOutboundMessages(),             inRecorder.getInboundMessages(), Names200408.WSA_NAMESPACE_NAME, RM10Constants.NAMESPACE_URI);                  mf.verifyMessages(6, true);         String[] expectedActions = new String[] {RM10Constants.CREATE_SEQUENCE_RESPONSE_ACTION,                                                   GREETMEONEWAY_ACTION,                                                  RM10Constants.TERMINATE_SEQUENCE_ACTION,                                                  RM10Constants.CREATE_SEQUENCE_RESPONSE_ACTION,                                                   GREETMEONEWAY_ACTION,                                                  RM10Constants.TERMINATE_SEQUENCE_ACTION};         mf.verifyActions(expectedActions, true);         mf.verifyMessageNumbers(new String[] {null, "1", null, null, "1", null}, true);         mf.verifyLastMessage(new boolean[] {false, true, false, false, true, false}, true);          // createSequenceResponse message plus partial responses to         // greetMeOneWay and terminateSequence ||: 2          mf.verifyMessages(6, false);          expectedActions = new String[] {RM10Constants.CREATE_SEQUENCE_RESPONSE_ACTION,                                          RM10Constants.SEQUENCE_ACKNOWLEDGMENT_ACTION, null,                                         RM10Constants.CREATE_SEQUENCE_RESPONSE_ACTION,                                          RM10Constants.SEQUENCE_ACKNOWLEDGMENT_ACTION, null};         mf.verifyActions(expectedActions, false);         mf.verifyMessageNumbers(new String[] {null, null, null, null, null, null}, false);         mf.verifyLastMessage(new boolean[] {false, false, false, false, false, false}, false);         mf.verifyAcknowledgements(new boolean[] {false, true, false, false, true, false}, false);     }   */
annotation|@
name|Test
specifier|public
name|void
name|testOnewayAnonymousAcksSuppressed
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnewayAnonymousAcksSuppressed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnewayAnonymousAcksSuppressedAsyncExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnewayAnonymousAcksSuppressed
argument_list|(
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testOnewayAnonymousAcksSuppressed
parameter_list|(
name|Executor
name|executor
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/suppressed.xml"
argument_list|,
literal|false
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"once"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"twice"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"thrice"
argument_list|)
expr_stmt|;
comment|// three application messages plus createSequence
name|awaitMessages
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// createSequenceResponse plus 3 partial responses, none of which
comment|// contain an acknowledgment
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|3
argument_list|,
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purge
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// allow resends to kick in
comment|// await multiple of 3 resends to avoid shutting down server
comment|// in the course of retransmission - this is harmless but pollutes test output
name|awaitMessages
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|7500
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwowayNonAnonymous
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ONE"
argument_list|,
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TWO"
argument_list|,
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"THREE"
argument_list|,
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyTwowayNonAnonymous
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwowayNonAnonymousProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors_provider.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ONE"
argument_list|,
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TWO"
argument_list|,
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"THREE"
argument_list|,
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyTwowayNonAnonymous
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwowayNonAnonymousDispatch
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors.xml"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|WSDL_OPERATION
argument_list|,
name|GREETME_NAME
argument_list|)
expr_stmt|;
name|verifyDOMResponse
argument_list|(
name|dispatch
operator|.
name|invoke
argument_list|(
name|getDOMRequest
argument_list|(
literal|"One"
argument_list|)
argument_list|)
argument_list|,
literal|"ONE"
argument_list|)
expr_stmt|;
name|verifyDOMResponse
argument_list|(
name|dispatch
operator|.
name|invoke
argument_list|(
name|getDOMRequest
argument_list|(
literal|"Two"
argument_list|)
argument_list|)
argument_list|,
literal|"TWO"
argument_list|)
expr_stmt|;
name|verifyDOMResponse
argument_list|(
name|dispatch
operator|.
name|invoke
argument_list|(
name|getDOMRequest
argument_list|(
literal|"Three"
argument_list|)
argument_list|)
argument_list|,
literal|"THREE"
argument_list|)
expr_stmt|;
name|verifyTwowayNonAnonymous
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwowayNonAnonymousDispatchProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors_provider.xml"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|WSDL_OPERATION
argument_list|,
name|GREETME_NAME
argument_list|)
expr_stmt|;
name|verifyDOMResponse
argument_list|(
name|dispatch
operator|.
name|invoke
argument_list|(
name|getDOMRequest
argument_list|(
literal|"One"
argument_list|)
argument_list|)
argument_list|,
literal|"ONE"
argument_list|)
expr_stmt|;
name|verifyDOMResponse
argument_list|(
name|dispatch
operator|.
name|invoke
argument_list|(
name|getDOMRequest
argument_list|(
literal|"Two"
argument_list|)
argument_list|)
argument_list|,
literal|"TWO"
argument_list|)
expr_stmt|;
name|verifyDOMResponse
argument_list|(
name|dispatch
operator|.
name|invoke
argument_list|(
name|getDOMRequest
argument_list|(
literal|"Three"
argument_list|)
argument_list|)
argument_list|,
literal|"THREE"
argument_list|)
expr_stmt|;
name|verifyTwowayNonAnonymous
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyTwowayNonAnonymous
parameter_list|()
throws|throws
name|Exception
block|{
comment|// CreateSequence and three greetMe messages
comment|// TODO there should be partial responses to the decoupled responses!
name|awaitMessages
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETME_ACTION
block|,
name|GREETME_ACTION
block|,
name|GREETME_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// createSequenceResponse plus 3 greetMeResponse messages plus
comment|// one partial response for each of the four messages
comment|// the first partial response should no include an acknowledgement, the other three should
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|8
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|4
argument_list|,
operator|new
name|boolean
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|4
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// the same as above but using endpoint specific interceptor configuration
annotation|@
name|Test
specifier|public
name|void
name|testTwowayNonAnonymousEndpointSpecific
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/twoway-endpoint-specific.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"three"
argument_list|)
expr_stmt|;
comment|// CreateSequence and three greetMe messages
comment|// TODO there should be partial responses to the decoupled responses!
name|awaitMessages
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETME_ACTION
block|,
name|GREETME_ACTION
block|,
name|GREETME_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// createSequenceResponse plus 3 greetMeResponse messages plus
comment|// one partial response for each of the four messages
comment|// the first partial response should no include an acknowledgement, the other three should
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|8
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|4
argument_list|,
operator|new
name|boolean
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|4
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwowayNonAnonymousDeferred
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/deferred.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
comment|// CreateSequence and three greetMe messages, no acknowledgments
comment|// included
name|awaitMessages
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETME_ACTION
block|,
name|GREETME_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// CreateSequenceResponse plus 2 greetMeResponse messages plus
comment|// one partial response for each of the three messages no acknowledgments
comment|// included
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|6
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|6
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[
literal|6
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purge
argument_list|()
expr_stmt|;
comment|// one standalone acknowledgement should have been sent from the client and one
comment|// should have been received from the server
name|awaitMessages
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mf
operator|.
name|reset
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// A maximum sequence length of 2 is configured for the client only (server allows 10).
comment|// However, as we use the defaults regarding the including and acceptance
comment|// for inbound sequence offers and correlate offered sequences that are
comment|// included in a CreateSequence request and accepted with those that are
comment|// created on behalf of such a request, the server also tries terminate its
comment|// sequences. Note that as part of the sequence termination exchange a
comment|// standalone sequence acknowledgment needs to be sent regardless of whether
comment|// or nor acknowledgments are delivered steadily with every response.
comment|/*    @Test     public void testTwowayNonAnonymousMaximumSequenceLength2() throws Exception {         init("org/apache/cxf/systest/ws/rm/seqlength10.xml", true);                  RMManager manager = greeterBus.getExtension(RMManager.class);         assertEquals("Unexpected maximum sequence length.", 10,              manager.getSourcePolicy().getSequenceTerminationPolicy().getMaxLength());         manager.getSourcePolicy().getSequenceTerminationPolicy().setMaxLength(2);                  greeter.greetMe("one");         greeter.greetMe("two");         greeter.greetMe("three");          awaitMessages(7, 13, 5000);         MessageFlow mf = new MessageFlow(outRecorder.getOutboundMessages(),             inRecorder.getInboundMessages(), Names200408.WSA_NAMESPACE_NAME, RM10Constants.NAMESPACE_URI);                  mf.verifyMessages(7, true);         String[] expectedActions = new String[] {RM10Constants.CREATE_SEQUENCE_ACTION,                                                  GREETME_ACTION,                                                  GREETME_ACTION,                                                   RM10Constants.TERMINATE_SEQUENCE_ACTION,                                                  RM10Constants.SEQUENCE_ACKNOWLEDGMENT_ACTION,                                                  RM10Constants.CREATE_SEQUENCE_RESPONSE_ACTION,                                                  GREETME_ACTION};         mf.verifyActions(expectedActions, true);         mf.verifyMessageNumbers(new String[] {null, "1", "2", null, null, null, "1"}, true);         mf.verifyLastMessage(new boolean[] {false, false, true, false, false, false, false}, true);         mf.verifyAcknowledgements(new boolean[] {false, false, true, false, true, false, false}, true);          // 7 partial responses plus 2 full responses to CreateSequence requests         // plus 3 full responses to greetMe requests plus server originiated         // TerminateSequence request          mf.verifyMessages(13, false);          mf.verifyPartialResponses(7);          mf.purgePartialResponses();          expectedActions = new String[] {RM10Constants.CREATE_SEQUENCE_RESPONSE_ACTION,                                         GREETME_RESPONSE_ACTION,                                         GREETME_RESPONSE_ACTION,                                          RM10Constants.TERMINATE_SEQUENCE_ACTION,                                         RM10Constants.CREATE_SEQUENCE_RESPONSE_ACTION,                                          GREETME_RESPONSE_ACTION};         mf.verifyActions(expectedActions, false);         mf.verifyMessageNumbers(new String[] {null, "1", "2", null, null, "1"}, false);         boolean[] expected = new boolean[6];         expected[2] = true;         mf.verifyLastMessage(expected, false);         expected[1] = true;         expected[5] = true;         mf.verifyAcknowledgements(expected, false);     }   */
annotation|@
name|Test
specifier|public
name|void
name|testTwowayAtMostOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTwowayNoDuplicates
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/atmostonce.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwowayExactlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTwowayNoDuplicates
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/exactlyonce.xml"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestTwowayNoDuplicates
parameter_list|(
name|String
name|cfg
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
class|class
name|MessageNumberInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|MessageNumberInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|USER_LOGICAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|RMProperties
name|rmps
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|m
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rmps
operator|&&
literal|null
operator|!=
name|rmps
operator|.
name|getSequence
argument_list|()
condition|)
block|{
name|rmps
operator|.
name|getSequence
argument_list|()
operator|.
name|setMessageNumber
argument_list|(
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|greeterBus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MessageNumberInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|RMManager
name|manager
init|=
name|greeterBus
operator|.
name|getExtension
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|getRMAssertion
argument_list|()
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|Long
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected fault."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|ex
parameter_list|)
block|{
name|SoapFault
name|sf
init|=
operator|(
name|SoapFault
operator|)
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected fault code."
argument_list|,
name|Soap11
operator|.
name|getInstance
argument_list|()
operator|.
name|getReceiver
argument_list|()
argument_list|,
name|sf
operator|.
name|getFaultCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected sub code."
argument_list|,
name|sf
operator|.
name|getSubCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected reason."
argument_list|,
name|sf
operator|.
name|getReason
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"has already been delivered."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// wait for resend to occur
name|awaitMessages
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
comment|// Expected outbound:
comment|// CreateSequence
comment|// + two requests
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|expectedActions
index|[
literal|0
index|]
operator|=
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedActions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expectedActions
index|[
name|i
index|]
operator|=
name|GREETME_ACTION
expr_stmt|;
block|}
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"1"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Expected inbound:
comment|// createSequenceResponse
comment|// + 1 response without acknowledgement
comment|// + 1 fault
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
literal|null
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|null
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownSequence
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors.xml"
argument_list|)
expr_stmt|;
class|class
name|SequenceIdInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|SequenceIdInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|USER_LOGICAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|RMProperties
name|rmps
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|m
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rmps
operator|&&
literal|null
operator|!=
name|rmps
operator|.
name|getSequence
argument_list|()
condition|)
block|{
name|rmps
operator|.
name|getSequence
argument_list|()
operator|.
name|getIdentifier
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"UNKNOWN"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|greeterBus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SequenceIdInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|RMManager
name|manager
init|=
name|greeterBus
operator|.
name|getExtension
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|getRMAssertion
argument_list|()
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|Long
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected fault."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|ex
parameter_list|)
block|{
name|SoapFault
name|sf
init|=
operator|(
name|SoapFault
operator|)
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected fault code."
argument_list|,
name|Soap11
operator|.
name|getInstance
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|,
name|sf
operator|.
name|getFaultCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected sub code."
argument_list|,
name|sf
operator|.
name|getSubCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected reason."
argument_list|,
name|sf
operator|.
name|getReason
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"is not a known Sequence identifier."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// the third inbound message has a SequenceFault header
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifySequenceFault
argument_list|(
name|RM10Constants
operator|.
name|UNKNOWN_SEQUENCE_FAULT_QNAME
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInactivityTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/inactivity-timeout.xml"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
try|try
block|{
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected fault."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WebServiceException
name|ex
parameter_list|)
block|{
name|SoapFault
name|sf
init|=
operator|(
name|SoapFault
operator|)
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected fault code."
argument_list|,
name|Soap11
operator|.
name|getInstance
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|,
name|sf
operator|.
name|getFaultCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected sub code."
argument_list|,
name|sf
operator|.
name|getSubCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected reason."
argument_list|,
name|sf
operator|.
name|getReason
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"is not a known Sequence identifier."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|awaitMessages
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
comment|// Expected outbound:
comment|// CreateSequence
comment|// + two requests (second request does not include acknowledgement for first response as
comment|// in the meantime the client has terminated the sequence
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|expectedActions
index|[
literal|0
index|]
operator|=
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedActions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expectedActions
index|[
name|i
index|]
operator|=
name|GREETME_ACTION
expr_stmt|;
block|}
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Expected inbound:
comment|// createSequenceResponse
comment|// + 1 response with acknowledgement
comment|// + 1 fault without acknowledgement
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
literal|null
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|null
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// the third inbound message has a SequenceFault header
name|mf
operator|.
name|verifySequenceFault
argument_list|(
name|RM10Constants
operator|.
name|UNKNOWN_SEQUENCE_FAULT_QNAME
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnewayMessageLoss
parameter_list|()
throws|throws
name|Exception
block|{
comment|// waite a while for the last bus shutdown
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|testOnewayMessageLoss
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnewayMessageLossAsyncExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnewayMessageLoss
argument_list|(
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testOnewayMessageLoss
parameter_list|(
name|Executor
name|executor
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/message-loss.xml"
argument_list|,
literal|false
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|greeterBus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MessageLossSimulator
argument_list|()
argument_list|)
expr_stmt|;
name|RMManager
name|manager
init|=
name|greeterBus
operator|.
name|getExtension
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|getRMAssertion
argument_list|()
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|Long
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"three"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"four"
argument_list|)
expr_stmt|;
name|awaitMessages
argument_list|(
literal|7
argument_list|,
literal|5
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
comment|// Expected outbound:
comment|// CreateSequence
comment|// + 4 greetMe messages
comment|// + at least 2 resends (message may be resent multiple times depending
comment|// on the timing of the ACKs)
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[
literal|7
index|]
decl_stmt|;
name|expectedActions
index|[
literal|0
index|]
operator|=
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedActions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expectedActions
index|[
name|i
index|]
operator|=
name|GREETMEONEWAY_ACTION
expr_stmt|;
block|}
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"2"
block|,
literal|"4"
block|}
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|7
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[
literal|7
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Expected inbound:
comment|// createSequenceResponse
comment|// + 2 partial responses to successfully transmitted messages
comment|// + 2 partial responses to resent messages
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwowayMessageLoss
parameter_list|()
throws|throws
name|Exception
block|{
name|testTwowayMessageLoss
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwowayMessageLossAsyncExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|testTwowayMessageLoss
argument_list|(
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testTwowayMessageLoss
parameter_list|(
name|Executor
name|executor
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/message-loss.xml"
argument_list|,
literal|true
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|greeterBus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MessageLossSimulator
argument_list|()
argument_list|)
expr_stmt|;
name|RMManager
name|manager
init|=
name|greeterBus
operator|.
name|getExtension
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|getRMAssertion
argument_list|()
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|Long
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"three"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"four"
argument_list|)
expr_stmt|;
name|awaitMessages
argument_list|(
literal|7
argument_list|,
literal|10
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
comment|// Expected outbound:
comment|// CreateSequence
comment|// + 4 greetMe messages
comment|// + 2 resends
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[
literal|7
index|]
decl_stmt|;
name|expectedActions
index|[
literal|0
index|]
operator|=
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedActions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expectedActions
index|[
name|i
index|]
operator|=
name|GREETME_ACTION
expr_stmt|;
block|}
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"4"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|7
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|expectedAcks
init|=
operator|new
name|boolean
index|[
literal|7
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|expectedAcks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expectedAcks
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
name|expectedAcks
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Expected inbound:
comment|// createSequenceResponse
comment|// + 4 greetMeResponse actions (to original or resent)
comment|// + 5 partial responses (to CSR& each of the initial greetMe messages)
comment|// + at least 2 further partial response (for each of the resends)
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwowayNonAnonymousNoOffer
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/no-offer.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
comment|// greeter.greetMe("two");
comment|// Outbound expected:
comment|// CreateSequence + greetMe + CreateSequenceResponse = 3 messages
name|awaitMessages
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETME_ACTION
block|,
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|null
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|3
argument_list|,
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|"1"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrency
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/rminterceptors.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|max
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|greeter
operator|.
name|greetMeAsync
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// CreateSequence and five greetMe messages
comment|// full and partial responses to each
name|awaitMessages
argument_list|(
name|max
operator|+
literal|1
argument_list|,
operator|(
name|max
operator|*
literal|2
operator|)
operator|+
literal|1
argument_list|,
literal|7500
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
name|max
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[
name|max
operator|+
literal|1
index|]
decl_stmt|;
name|expectedActions
index|[
literal|0
index|]
operator|=
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedActions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expectedActions
index|[
name|i
index|]
operator|=
name|GREETME_ACTION
expr_stmt|;
block|}
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiClientOneway
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|String
name|cfgResource
init|=
literal|"org/apache/cxf/systest/ws/rm/rminterceptors.xml"
decl_stmt|;
name|initControl
argument_list|(
name|bf
argument_list|,
name|cfgResource
argument_list|)
expr_stmt|;
class|class
name|ClientThread
extends|extends
name|Thread
block|{
name|Greeter
name|greeter
decl_stmt|;
name|Bus
name|greeterBus
decl_stmt|;
name|InMessageRecorder
name|inRecorder
decl_stmt|;
name|OutMessageRecorder
name|outRecorder
decl_stmt|;
name|String
name|id
decl_stmt|;
name|ClientThread
parameter_list|(
name|SpringBusFactory
name|bf
parameter_list|,
name|String
name|cfgResource
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|SequenceTest
operator|.
name|this
operator|.
name|initGreeter
argument_list|(
name|bf
argument_list|,
name|cfgResource
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|greeter
operator|=
name|SequenceTest
operator|.
name|this
operator|.
name|greeter
expr_stmt|;
name|greeterBus
operator|=
name|SequenceTest
operator|.
name|this
operator|.
name|greeterBus
expr_stmt|;
name|inRecorder
operator|=
name|SequenceTest
operator|.
name|this
operator|.
name|inRecorder
expr_stmt|;
name|outRecorder
operator|=
name|SequenceTest
operator|.
name|this
operator|.
name|outRecorder
expr_stmt|;
name|id
operator|=
literal|"client "
operator|+
name|n
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|id
operator|+
literal|": once"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|id
operator|+
literal|": twice"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
name|id
operator|+
literal|": thrice"
argument_list|)
expr_stmt|;
comment|// three application messages plus createSequence
name|awaitMessages
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
name|ClientThread
name|clients
index|[]
init|=
operator|new
name|ClientThread
index|[
literal|2
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|=
operator|new
name|ClientThread
argument_list|(
name|bf
argument_list|,
name|cfgResource
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|clients
index|[
name|i
index|]
operator|.
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|clients
index|[
name|i
index|]
operator|.
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// createSequenceResponse plus 3 partial responses
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|greeter
operator|=
name|clients
index|[
name|i
index|]
operator|.
name|greeter
expr_stmt|;
name|greeterBus
operator|=
name|clients
index|[
name|i
index|]
operator|.
name|greeterBus
expr_stmt|;
name|stopClient
argument_list|()
expr_stmt|;
block|}
name|greeter
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiClientTwoway
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|String
name|cfgResource
init|=
literal|"org/apache/cxf/systest/ws/rm/rminterceptors.xml"
decl_stmt|;
name|initControl
argument_list|(
name|bf
argument_list|,
name|cfgResource
argument_list|)
expr_stmt|;
class|class
name|ClientThread
extends|extends
name|Thread
block|{
name|Greeter
name|greeter
decl_stmt|;
name|Bus
name|greeterBus
decl_stmt|;
name|InMessageRecorder
name|inRecorder
decl_stmt|;
name|OutMessageRecorder
name|outRecorder
decl_stmt|;
name|String
name|id
decl_stmt|;
name|ClientThread
parameter_list|(
name|SpringBusFactory
name|bf
parameter_list|,
name|String
name|cfgResource
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|super
argument_list|(
literal|"client "
operator|+
name|n
argument_list|)
expr_stmt|;
name|SequenceTest
operator|.
name|this
operator|.
name|initGreeter
argument_list|(
name|bf
argument_list|,
name|cfgResource
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|greeter
operator|=
name|SequenceTest
operator|.
name|this
operator|.
name|greeter
expr_stmt|;
name|greeterBus
operator|=
name|SequenceTest
operator|.
name|this
operator|.
name|greeterBus
expr_stmt|;
name|inRecorder
operator|=
name|SequenceTest
operator|.
name|this
operator|.
name|inRecorder
expr_stmt|;
name|outRecorder
operator|=
name|SequenceTest
operator|.
name|this
operator|.
name|outRecorder
expr_stmt|;
name|id
operator|=
literal|"client "
operator|+
name|n
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|s
init|=
name|greeter
operator|.
name|greetMe
argument_list|(
name|id
operator|+
literal|": a"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Correlation problem<"
operator|+
name|s
operator|+
literal|"><"
operator|+
name|id
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|greeter
operator|.
name|greetMe
argument_list|(
name|id
operator|+
literal|": b"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Correlation problem<"
operator|+
name|s
operator|+
literal|"><"
operator|+
name|id
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|greeter
operator|.
name|greetMe
argument_list|(
name|id
operator|+
literal|": c"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Correlation problem<"
operator|+
name|s
operator|+
literal|"><"
operator|+
name|id
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
comment|// three application messages plus createSequence
name|awaitMessages
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
name|ClientThread
name|clients
index|[]
init|=
operator|new
name|ClientThread
index|[
literal|2
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|=
operator|new
name|ClientThread
argument_list|(
name|bf
argument_list|,
name|cfgResource
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|clients
index|[
name|i
index|]
operator|.
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|clients
index|[
name|i
index|]
operator|.
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETME_ACTION
block|,
name|GREETME_ACTION
block|,
name|GREETME_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// createSequenceResponse plus 3 greetMeResponse messages plus
comment|// one partial response for each of the four messages
comment|// the first partial response should no include an acknowledgement, the other three should
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|8
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|4
argument_list|,
operator|new
name|boolean
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|4
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|greeter
operator|=
name|clients
index|[
name|i
index|]
operator|.
name|greeter
expr_stmt|;
name|greeterBus
operator|=
name|clients
index|[
name|i
index|]
operator|.
name|greeterBus
expr_stmt|;
name|stopClient
argument_list|()
expr_stmt|;
block|}
name|greeter
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerSideMessageLoss
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/message-loss-server.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// avoid client side message loss
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|outInterceptors
init|=
name|greeterBus
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
for|for
control|(
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|i
range|:
name|outInterceptors
control|)
block|{
if|if
condition|(
name|i
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|MessageLossSimulator
operator|.
name|class
argument_list|)
condition|)
block|{
name|outInterceptors
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// avoid client side resends
name|greeterBus
operator|.
name|getExtension
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
operator|.
name|getRMAssertion
argument_list|()
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|Long
argument_list|(
literal|60000
argument_list|)
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMe
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
comment|// outbound: CreateSequence and two greetMe messages
name|awaitMessages
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETME_ACTION
block|,
name|GREETME_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// createSequenceResponse plus 2 greetMeResponse messages plus
comment|// one partial response for each of the four messages
comment|// the first partial response should no include an acknowledgement, the other three should
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|6
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|3
argument_list|,
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|,
name|GREETME_RESPONSE_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyLastMessage
argument_list|(
operator|new
name|boolean
index|[
literal|3
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSequenceAfterSequenceExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/expire-fast-seq.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RMManager
name|manager
init|=
name|greeterBus
operator|.
name|getExtension
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected expiration"
argument_list|,
name|DatatypeFactory
operator|.
name|createDuration
argument_list|(
literal|"PT5S"
argument_list|)
argument_list|,
name|manager
operator|.
name|getSourcePolicy
argument_list|()
operator|.
name|getSequenceExpiration
argument_list|()
argument_list|)
expr_stmt|;
comment|// phase one
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
comment|// let the first sequence expire
name|Thread
operator|.
name|sleep
argument_list|(
literal|8000
argument_list|)
expr_stmt|;
comment|// expecting 3 outbounds and 5 or 6 inbounds
name|awaitMessages
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|)
decl_stmt|;
comment|// CS, GA, GA
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyCreateSequenceAction
argument_list|(
literal|0
argument_list|,
literal|"PT5S"
argument_list|,
name|mf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/*        String[] expectedActions = new String[] {RM10Constants.INSTANCE.getCreateSequenceAction(),                                                  GREETMEONEWAY_ACTION,                                                  GREETMEONEWAY_ACTION};         mf.verifyActions(expectedActions, true);         mf.verifyMessageNumbers(new String[] {null, "1", "2"}, true);          mf.verifyAcknowledgementRange(1, 2);          // phase two                  outRecorder.getOutboundMessages().clear();         inRecorder.getInboundMessages().clear();          greeter.greetMeOneWay("three");          // expecting 2 outbounds and 4 inbounds         awaitMessages(2, 4, 5000);                  mf = new MessageFlow(outRecorder.getOutboundMessages(), inRecorder.getInboundMessages());                  // CS, GA         mf.verifyMessages(2, true);         verifyCreateSequenceAction(0, "PT5S", mf, true);                  expectedActions = new String[] {RM10Constants.INSTANCE.getCreateSequenceAction(),                                         GREETMEONEWAY_ACTION};         mf.verifyActions(expectedActions, true);         mf.verifyMessageNumbers(new String[] {null, "1"}, true);          // PR, CSR, PR, ACK         mf.verifyMessages(4, false);         mf.purgePartialResponses();                  expectedActions = new String[] {RM10Constants.INSTANCE.getCreateSequenceResponseAction(),                                         RM10Constants.INSTANCE.getSequenceAckAction()};         mf.verifyActions(expectedActions, false);                  mf.purge();         assertEquals(0, outRecorder.getOutboundMessages().size());         assertEquals(0, inRecorder.getInboundMessages().size());        */
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTerminateOnShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|"org/apache/cxf/systest/ws/rm/terminate-on-shutdown.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"neutrophil"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"basophil"
argument_list|)
expr_stmt|;
name|greeter
operator|.
name|greetMeOneWay
argument_list|(
literal|"eosinophil"
argument_list|)
expr_stmt|;
name|stopGreeterButNotCloseConduit
argument_list|()
expr_stmt|;
name|awaitMessages
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|MessageFlow
name|mf
init|=
operator|new
name|MessageFlow
argument_list|(
name|outRecorder
operator|.
name|getOutboundMessages
argument_list|()
argument_list|,
name|inRecorder
operator|.
name|getInboundMessages
argument_list|()
argument_list|,
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|6
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedActions
init|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|GREETMEONEWAY_ACTION
block|,
name|RM10Constants
operator|.
name|CLOSE_SEQUENCE_ACTION
block|,
name|RM10Constants
operator|.
name|TERMINATE_SEQUENCE_ACTION
block|}
decl_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|null
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// inbound: CreateSequenceResponse, out-of-band SequenceAcknowledgement
comment|// plus 6 partial responses
name|mf
operator|.
name|verifyMessages
argument_list|(
literal|8
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyMessageNumbers
argument_list|(
operator|new
name|String
index|[
literal|8
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyPartialResponses
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|mf
operator|.
name|purgePartialResponses
argument_list|()
expr_stmt|;
name|expectedActions
operator|=
operator|new
name|String
index|[]
block|{
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ACTION
block|,
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
block|}
expr_stmt|;
name|mf
operator|.
name|verifyActions
argument_list|(
name|expectedActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mf
operator|.
name|verifyAcknowledgements
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// --- test utilities ---
specifier|private
name|void
name|init
parameter_list|(
name|String
name|cfgResource
parameter_list|)
block|{
name|init
argument_list|(
name|cfgResource
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|cfgResource
parameter_list|,
name|boolean
name|useDecoupledEndpoint
parameter_list|)
block|{
name|init
argument_list|(
name|cfgResource
argument_list|,
name|useDecoupledEndpoint
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|cfgResource
parameter_list|,
name|boolean
name|useDecoupledEndpoint
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|init
argument_list|(
name|cfgResource
argument_list|,
name|useDecoupledEndpoint
argument_list|,
literal|false
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|cfgResource
parameter_list|,
name|boolean
name|useDecoupledEndpoint
parameter_list|,
name|boolean
name|useDispatchClient
parameter_list|)
block|{
name|init
argument_list|(
name|cfgResource
argument_list|,
name|useDecoupledEndpoint
argument_list|,
name|useDispatchClient
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|cfgResource
parameter_list|,
name|boolean
name|useDecoupledEndpoint
parameter_list|,
name|boolean
name|useDispatchClient
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|initControl
argument_list|(
name|bf
argument_list|,
name|cfgResource
argument_list|)
expr_stmt|;
name|initGreeterBus
argument_list|(
name|bf
argument_list|,
name|cfgResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDispatchClient
condition|)
block|{
name|initDispatch
argument_list|(
name|useDecoupledEndpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initProxy
argument_list|(
name|useDecoupledEndpoint
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initControl
parameter_list|(
name|SpringBusFactory
name|bf
parameter_list|,
name|String
name|cfgResource
parameter_list|)
block|{
name|controlBus
operator|=
name|bf
operator|.
name|createBus
argument_list|()
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|controlBus
argument_list|)
expr_stmt|;
name|ControlService
name|cs
init|=
operator|new
name|ControlService
argument_list|()
decl_stmt|;
name|control
operator|=
name|cs
operator|.
name|getControlPort
argument_list|()
expr_stmt|;
try|try
block|{
name|updateAddressPort
argument_list|(
name|control
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
name|assertTrue
argument_list|(
literal|"Failed to start greeter"
argument_list|,
name|control
operator|.
name|startGreeter
argument_list|(
name|cfgResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initGreeter
parameter_list|(
name|SpringBusFactory
name|bf
parameter_list|,
name|String
name|cfgResource
parameter_list|,
name|boolean
name|useDecoupledEndpoint
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|initGreeterBus
argument_list|(
name|bf
argument_list|,
name|cfgResource
argument_list|)
expr_stmt|;
name|initProxy
argument_list|(
name|useDecoupledEndpoint
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initGreeterBus
parameter_list|(
name|SpringBusFactory
name|bf
parameter_list|,
name|String
name|cfgResource
parameter_list|)
block|{
name|greeterBus
operator|=
name|bf
operator|.
name|createBus
argument_list|(
name|cfgResource
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|greeterBus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Initialised greeter bus with configuration: "
operator|+
name|cfgResource
argument_list|)
expr_stmt|;
name|outRecorder
operator|=
operator|new
name|OutMessageRecorder
argument_list|()
expr_stmt|;
name|greeterBus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|outRecorder
argument_list|)
expr_stmt|;
name|inRecorder
operator|=
operator|new
name|InMessageRecorder
argument_list|()
expr_stmt|;
name|greeterBus
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|inRecorder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initDispatch
parameter_list|(
name|boolean
name|useDecoupledEndpoint
parameter_list|)
block|{
name|GreeterService
name|gs
init|=
operator|new
name|GreeterService
argument_list|()
decl_stmt|;
name|dispatch
operator|=
name|gs
operator|.
name|createDispatch
argument_list|(
name|GreeterService
operator|.
name|GreeterPort
argument_list|,
name|DOMSource
operator|.
name|class
argument_list|,
name|Service
operator|.
name|Mode
operator|.
name|MESSAGE
argument_list|)
expr_stmt|;
try|try
block|{
name|updateAddressPort
argument_list|(
name|dispatch
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
name|dispatch
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|SOAPACTION_USE_PROPERTY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDecoupledEndpoint
condition|)
block|{
name|initDecoupledEndpoint
argument_list|(
operator|(
operator|(
name|DispatchImpl
operator|)
name|dispatch
operator|)
operator|.
name|getClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initProxy
parameter_list|(
name|boolean
name|useDecoupledEndpoint
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|GreeterService
name|gs
init|=
operator|new
name|GreeterService
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|executor
condition|)
block|{
name|gs
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
name|greeter
operator|=
name|gs
operator|.
name|getGreeterPort
argument_list|()
expr_stmt|;
try|try
block|{
name|updateAddressPort
argument_list|(
name|greeter
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Created greeter client."
argument_list|)
expr_stmt|;
name|ConnectionHelper
operator|.
name|setKeepAliveConnection
argument_list|(
name|greeter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDecoupledEndpoint
condition|)
block|{
name|initDecoupledEndpoint
argument_list|(
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|greeter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initDecoupledEndpoint
parameter_list|(
name|Client
name|c
parameter_list|)
block|{
comment|// programatically configure decoupled endpoint that is guaranteed to
comment|// be unique across all test cases
name|decoupledEndpoint
operator|=
literal|"http://localhost:"
operator|+
name|allocatePort
argument_list|(
literal|"decoupled-"
operator|+
name|decoupledCount
operator|++
argument_list|)
operator|+
literal|"/decoupled_endpoint"
expr_stmt|;
name|HTTPConduit
name|hc
init|=
call|(
name|HTTPConduit
call|)
argument_list|(
name|c
operator|.
name|getConduit
argument_list|()
argument_list|)
decl_stmt|;
name|HTTPClientPolicy
name|cp
init|=
name|hc
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|cp
operator|.
name|setDecoupledEndpoint
argument_list|(
name|decoupledEndpoint
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Using decoupled endpoint: "
operator|+
name|cp
operator|.
name|getDecoupledEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|stopClient
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|greeterBus
condition|)
block|{
comment|//ensure we close the decoupled destination of the conduit,
comment|//so that release the port if the destination reference count hit zero
if|if
condition|(
name|greeter
operator|!=
literal|null
condition|)
block|{
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|greeter
argument_list|)
operator|.
name|getConduit
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dispatch
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|DispatchImpl
operator|)
name|dispatch
operator|)
operator|.
name|getClient
argument_list|()
operator|.
name|getConduit
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|greeterBus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|greeter
operator|=
literal|null
expr_stmt|;
name|dispatch
operator|=
literal|null
expr_stmt|;
name|greeterBus
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|stopControl
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|control
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to stop greeter"
argument_list|,
name|control
operator|.
name|stopGreeter
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|controlBus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|stopGreeterButNotCloseConduit
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|greeterBus
condition|)
block|{
name|greeterBus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|greeter
operator|=
literal|null
expr_stmt|;
name|greeterBus
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|awaitMessages
parameter_list|(
name|int
name|nExpectedOut
parameter_list|,
name|int
name|nExpectedIn
parameter_list|)
block|{
name|awaitMessages
argument_list|(
name|nExpectedOut
argument_list|,
name|nExpectedIn
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|awaitMessages
parameter_list|(
name|int
name|nExpectedOut
parameter_list|,
name|int
name|nExpectedIn
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
name|MessageRecorder
name|mr
init|=
operator|new
name|MessageRecorder
argument_list|(
name|outRecorder
argument_list|,
name|inRecorder
argument_list|)
decl_stmt|;
name|mr
operator|.
name|awaitMessages
argument_list|(
name|nExpectedOut
argument_list|,
name|nExpectedIn
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DOMSource
name|getDOMRequest
parameter_list|(
name|String
name|n
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getDOMRequest
argument_list|(
name|n
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|DOMSource
name|getDOMRequest
parameter_list|(
name|String
name|n
parameter_list|,
name|boolean
name|oneway
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
operator|(
name|oneway
condition|?
literal|"oneway"
else|:
literal|"twoway"
operator|)
operator|+
literal|"Req"
operator|+
name|n
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|newDoc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
return|return
operator|new
name|DOMSource
argument_list|(
name|newDoc
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|convertToString
parameter_list|(
name|DOMSource
name|domSource
parameter_list|)
throws|throws
name|TransformerException
block|{
name|Transformer
name|xformer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|StringWriter
name|output
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|xformer
operator|.
name|transform
argument_list|(
name|domSource
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|parseResponse
parameter_list|(
name|DOMSource
name|domResponse
parameter_list|)
block|{
name|Element
name|el
init|=
operator|(
operator|(
name|Document
operator|)
name|domResponse
operator|.
name|getNode
argument_list|()
operator|)
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"soap"
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/envelope/"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"ns"
argument_list|,
literal|"http://cxf.apache.org/greeter_control/types"
argument_list|)
expr_stmt|;
name|XPathUtils
name|xp
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|xp
operator|.
name|getValue
argument_list|(
literal|"/soap:Envelope/soap:Body"
operator|+
literal|"/ns:greetMeResponse/ns:responseType"
argument_list|,
name|el
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
return|;
block|}
specifier|private
name|void
name|verifyDOMResponse
parameter_list|(
name|DOMSource
name|domResponse
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|TransformerException
block|{
name|String
name|s
init|=
name|convertToString
argument_list|(
name|domResponse
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected: "
operator|+
name|s
operator|+
literal|" to contain: "
operator|+
name|expected
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
name|expected
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected response: "
operator|+
name|s
argument_list|,
name|expected
argument_list|,
name|parseResponse
argument_list|(
name|domResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyCreateSequenceAction
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|expiration
parameter_list|,
name|MessageFlow
name|mf
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
name|mf
operator|.
name|getMessage
argument_list|(
name|index
argument_list|,
name|outbound
argument_list|)
decl_stmt|;
name|String
name|expires
init|=
name|getCreateSequenceExpires
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected expires-value"
argument_list|,
name|expiration
argument_list|,
name|expires
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getCreateSequenceExpires
parameter_list|(
name|Document
name|document
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|envelopeElement
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|QName
name|qname
init|=
name|RM10Constants
operator|.
name|INSTANCE
operator|.
name|getCreateSequenceOperationName
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
name|envelopeElement
operator|.
name|getElementsByTagNameNS
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Element
name|element
init|=
name|MessageFlow
operator|.
name|getNamedElement
argument_list|(
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Expires"
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
return|return
name|MessageFlow
operator|.
name|getText
argument_list|(
name|element
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

