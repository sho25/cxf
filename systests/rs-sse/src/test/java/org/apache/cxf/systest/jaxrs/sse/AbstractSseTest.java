begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|sse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|WebTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|InboundSseEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|sse
operator|.
name|SseEventSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItems
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSseTest
extends|extends
name|AbstractSseBaseTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testBooksStreamIsReturnedFromInboundSseEvents
parameter_list|()
throws|throws
name|JsonProcessingException
throws|,
name|InterruptedException
block|{
specifier|final
name|WebTarget
name|target
init|=
name|createWebTarget
argument_list|(
literal|"/rest/api/bookstore/sse/0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Book
argument_list|>
name|books
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|SseEventSource
name|eventSource
init|=
name|SseEventSource
operator|.
name|target
argument_list|(
name|target
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|eventSource
operator|.
name|register
argument_list|(
name|collect
argument_list|(
name|books
argument_list|)
argument_list|,
name|System
operator|.
name|out
operator|::
name|println
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// Give the SSE stream some time to collect all events
name|awaitEvents
argument_list|(
literal|3000
argument_list|,
name|books
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|books
argument_list|,
name|hasItems
argument_list|(
operator|new
name|Book
argument_list|(
literal|"New Book #1"
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|Book
argument_list|(
literal|"New Book #2"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|Book
argument_list|(
literal|"New Book #3"
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|Book
argument_list|(
literal|"New Book #4"
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Consumer
argument_list|<
name|InboundSseEvent
argument_list|>
name|collect
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Book
argument_list|>
name|books
parameter_list|)
block|{
return|return
name|event
lambda|->
name|books
operator|.
name|add
argument_list|(
name|event
operator|.
name|readData
argument_list|(
name|Book
operator|.
name|class
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

