begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systest
operator|.
name|jaxrs
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|weld
operator|.
name|environment
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|weld
operator|.
name|environment
operator|.
name|ContainerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|weld
operator|.
name|environment
operator|.
name|jetty
operator|.
name|JettyContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|weld
operator|.
name|environment
operator|.
name|tomcat
operator|.
name|TomcatContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|weld
operator|.
name|resources
operator|.
name|spi
operator|.
name|ResourceLoader
import|;
end_import

begin_comment
comment|/**  * Because we are mixing several Servlet Containers in the same project, JBoss Weld  * needs some help to figure out the correct one we are running right now.   */
end_comment

begin_class
specifier|public
class|class
name|WeldDiscoverableContainer
implements|implements
name|Container
block|{
specifier|private
specifier|final
name|Container
name|delegate
decl_stmt|;
specifier|public
name|WeldDiscoverableContainer
parameter_list|()
block|{
if|if
condition|(
name|JettyContainer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|Container
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|delegate
operator|=
name|JettyContainer
operator|.
name|INSTANCE
expr_stmt|;
block|}
else|else
block|{
name|delegate
operator|=
name|TomcatContainer
operator|.
name|INSTANCE
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|touch
parameter_list|(
name|ResourceLoader
name|loader
parameter_list|,
name|ContainerContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|delegate
operator|.
name|touch
argument_list|(
name|loader
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|ContainerContext
name|context
parameter_list|)
block|{
name|delegate
operator|.
name|initialize
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|(
name|ContainerContext
name|context
parameter_list|)
block|{
name|delegate
operator|.
name|destroy
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

