begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|systests
operator|.
name|cdi
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ResourceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ContextResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|cdi
operator|.
name|ContextResolved
import|;
end_import

begin_class
annotation|@
name|ApplicationScoped
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
class|class
name|Injections
block|{
comment|/* this one is not supposed to work in the systests     @Inject     private Application application;     */
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|Application
name|cxfApplication
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|UriInfo
name|uriInfo
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|UriInfo
name|cxfUriInfo
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|HttpHeaders
name|httpHeaders
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|HttpHeaders
name|cxfHttpHeaders
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|Request
name|request
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|Request
name|cxfRequest
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|SecurityContext
name|securityContext
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|SecurityContext
name|cxfSecurityContext
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|Providers
name|providers
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|Providers
name|cxfProviders
decl_stmt|;
comment|//NOPMD
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Inject
specifier|private
name|ContextResolver
name|contextResolver
decl_stmt|;
comment|//NOPMD
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|ContextResolver
name|cxfContextResolver
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|HttpServletRequest
name|httpServletRequest
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|HttpServletRequest
name|cxfHttpServletRequest
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|HttpServletResponse
name|httpServletResponse
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|HttpServletRequest
name|cxfhttpServletResponse
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|ServletContext
name|servletContext
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|ServletContext
name|cxfServletContext
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|ResourceContext
name|resourceContext
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|ResourceContext
name|cxfResourceContext
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|ResourceInfo
name|resourceInfo
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|ResourceInfo
name|cxfResourceInfo
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
specifier|private
name|Configuration
name|configuration
decl_stmt|;
comment|//NOPMD
annotation|@
name|Inject
annotation|@
name|ContextResolved
specifier|private
name|Configuration
name|cxfConfiguration
decl_stmt|;
comment|//NOPMD
specifier|public
name|String
name|state
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|Injections
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|f
lambda|->
name|f
operator|.
name|isAnnotationPresent
argument_list|(
name|Inject
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|f
lambda|->
block|{
lambda|if (!f.isAccessible(
argument_list|)
block|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// the standard name otherwise not portable
return|return
name|f
operator|.
name|get
argument_list|(
name|Injections
operator|.
name|this
argument_list|)
operator|!=
literal|null
condition|?
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
else|:
literal|""
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalAccessException
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
end_class

begin_expr_stmt
unit|)
operator|.
name|sorted
argument_list|()
comment|// be deterministic in the test, java reflection is no more since java7
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

unit|} }
end_unit

