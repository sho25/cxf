begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|performance
operator|.
name|client
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|Benchmark_Service
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|ReceiveMeshInterfaceObjectsResponse
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|SendMeshInterfaceObjectsResponse
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|SimpleEvent
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|MeshInterfaceObject
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|EchoSimpleEventsRequest
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|ArrayOfSimpleEvent
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|ReceiveSimpleEventsRequest
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|SendSimpleEventsRequest
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|EchoMeshInterfaceObjectsRequest
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|ReceiveMeshInterfaceObjectsRequest
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|ArrayOfMeshInterfaceObject
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|indiana
operator|.
name|extreme
operator|.
name|wsdl
operator|.
name|benchmark1
operator|.
name|SendMeshInterfaceObjectsRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|BenchClient
block|{
specifier|private
specifier|final
specifier|static
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.extreme.indiana.edu/wsdl/Benchmark1"
argument_list|,
literal|"Benchmark"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|boolean
name|VERBOSE
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SMOKE_TEST
init|=
literal|"smoke_test"
decl_stmt|;
name|Benchmark_Service
name|service
decl_stmt|;
name|Benchmark
name|port
decl_stmt|;
specifier|public
name|BenchClient
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|wsdlURL
init|=
literal|null
decl_stmt|;
name|File
name|wsdlFile
init|=
operator|new
name|File
argument_list|(
name|location
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|wsdlFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|wsdlURL
operator|=
name|wsdlFile
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wsdlURL
operator|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|service
operator|=
operator|new
name|Benchmark_Service
argument_list|(
name|wsdlURL
argument_list|,
name|SERVICE_NAME
argument_list|)
expr_stmt|;
name|port
operator|=
name|service
operator|.
name|getBenchmark
argument_list|()
expr_stmt|;
comment|/*options.setProperty(org.apache.axis2.transport.http.HTTPConstants.SO_TIMEOUT,new Integer(480000));         options.setProperty(org.apache.axis2.transport.http.HTTPConstants.CONNECTION_TIMEOUT,new Integer(480000));*/
block|}
comment|//URL or port of service
comment|//total number of elements to send (default 10K)
comment|//[rse] means receive, send, or echo (a == all)
comment|//[bdisva] means base64, double, int, string, void (only applies to echo), a == all methods;
comment|//arraySize (optional for void) - default to 10
comment|//java -Dmachine.name=... -Dserver.name=... Client URL total {rsea}{bdisva} [arraySize]
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|benchmarkStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|BENCHMARK_DRIVER_VERSION
init|=
literal|"$Date$"
decl_stmt|;
specifier|final
name|String
name|ID
init|=
literal|"Benchmark1 Driver Version 1.0 ("
operator|+
name|BENCHMARK_DRIVER_VERSION
operator|+
literal|")"
decl_stmt|;
name|verbose
argument_list|(
literal|"Starting "
operator|+
name|ID
operator|+
literal|" at "
operator|+
operator|(
operator|new
name|Date
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|// allow multiple URLs (each must start with http"
name|List
argument_list|<
name|String
argument_list|>
name|locationList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|String
name|s
init|=
name|args
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
operator|||
name|s
operator|.
name|startsWith
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|locationList
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
operator|++
name|pos
expr_stmt|;
block|}
if|if
condition|(
name|locationList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|port
init|=
literal|34321
decl_stmt|;
name|locationList
operator|.
name|add
argument_list|(
literal|"http://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|elementsToSend
init|=
name|args
operator|.
name|length
operator|>
name|pos
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|pos
index|]
argument_list|)
else|:
literal|10000
decl_stmt|;
name|String
name|testType
init|=
literal|"aa"
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
operator|(
name|pos
operator|+
literal|1
operator|)
condition|)
block|{
name|testType
operator|=
name|args
index|[
operator|(
name|pos
operator|+
literal|1
operator|)
index|]
expr_stmt|;
block|}
name|String
name|arrSizeToSend
init|=
literal|"10"
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
operator|(
name|pos
operator|+
literal|2
operator|)
condition|)
block|{
name|arrSizeToSend
operator|=
name|args
index|[
operator|(
name|pos
operator|+
literal|2
operator|)
index|]
expr_stmt|;
block|}
name|String
index|[]
name|locations
init|=
operator|new
name|String
index|[
name|locationList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|locationList
operator|.
name|toArray
argument_list|(
name|locations
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|location
init|=
name|locations
index|[
name|i
index|]
decl_stmt|;
name|verbose
argument_list|(
literal|"connecting to "
operator|+
name|location
argument_list|)
expr_stmt|;
name|runTestsForSize
argument_list|(
name|location
argument_list|,
name|elementsToSend
argument_list|,
name|testType
argument_list|,
name|arrSizeToSend
argument_list|)
expr_stmt|;
block|}
name|long
name|benchmarkEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|double
name|seconds
init|=
operator|(
operator|(
name|benchmarkEnd
operator|-
name|benchmarkStart
operator|)
operator|/
literal|1000.0
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished "
operator|+
name|ID
operator|+
literal|" in "
operator|+
name|seconds
operator|+
literal|" seconds at "
operator|+
operator|(
operator|new
name|Date
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|runTestsForSize
parameter_list|(
name|String
name|location
parameter_list|,
specifier|final
name|int
name|elementsToSend
parameter_list|,
name|String
name|testType
parameter_list|,
name|String
name|arrSizeToSend
parameter_list|)
throws|throws
name|Exception
block|{
name|TestDescriptor
name|td
init|=
operator|new
name|TestDescriptor
argument_list|(
name|location
argument_list|,
name|elementsToSend
argument_list|)
decl_stmt|;
name|int
name|commaPos
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|finished
condition|)
block|{
name|td
operator|.
name|setDirection
argument_list|(
name|testType
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|td
operator|.
name|setMethod
argument_list|(
name|testType
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|prevPos
init|=
name|commaPos
decl_stmt|;
name|commaPos
operator|=
name|arrSizeToSend
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|,
name|prevPos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|String
name|size
decl_stmt|;
if|if
condition|(
name|commaPos
operator|>
literal|0
condition|)
block|{
name|size
operator|=
name|arrSizeToSend
operator|.
name|substring
argument_list|(
name|prevPos
operator|+
literal|1
argument_list|,
name|commaPos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|size
operator|=
name|arrSizeToSend
operator|.
name|substring
argument_list|(
name|prevPos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|finished
operator|=
literal|true
expr_stmt|;
block|}
name|td
operator|.
name|arrSizeToSend
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|//System.out.println("runnig test with size=" + size + " " + (new Date()));
specifier|final
name|char
name|direction
init|=
name|td
operator|.
name|getDirection
argument_list|()
decl_stmt|;
if|if
condition|(
name|direction
operator|==
literal|'a'
condition|)
block|{
name|td
operator|.
name|setDirection
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
name|runTestsForDirection
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|td
operator|.
name|setDirection
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
name|runTestsForDirection
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|td
operator|.
name|setDirection
argument_list|(
literal|'s'
argument_list|)
expr_stmt|;
name|runTestsForDirection
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|td
operator|.
name|setDirection
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
comment|//restore
block|}
else|else
block|{
name|runTestsForDirection
argument_list|(
name|td
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|runTestsForDirection
parameter_list|(
name|TestDescriptor
name|td
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|char
name|direction
init|=
name|td
operator|.
name|direction
decl_stmt|;
specifier|final
name|char
name|method
init|=
name|td
operator|.
name|method
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|'a'
condition|)
block|{
if|if
condition|(
name|direction
operator|==
literal|'e'
condition|)
block|{
comment|//test for the void
name|td
operator|.
name|setMethod
argument_list|(
literal|'v'
argument_list|)
expr_stmt|;
name|runOneTest
argument_list|(
name|td
argument_list|)
expr_stmt|;
block|}
comment|/*             // test for Base64             td.setMethod('b');             runOneTest(td);             // test for Doubles             td.setMethod('d');             runOneTest(td);             // test for Ints             td.setMethod('i');             runOneTest(td);             // test for Strings             td.setMethod('s');             runOneTest(td);*/
comment|// test for MeshInterfaceObjects
name|td
operator|.
name|setMethod
argument_list|(
literal|'m'
argument_list|)
expr_stmt|;
name|runOneTest
argument_list|(
name|td
argument_list|)
expr_stmt|;
comment|// test for SimpleEvents
name|td
operator|.
name|setMethod
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
name|runOneTest
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|td
operator|.
name|setMethod
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
comment|//restore
block|}
else|else
block|{
name|runOneTest
argument_list|(
name|td
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|runOneTest
parameter_list|(
name|TestDescriptor
name|td
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|char
name|direction
init|=
name|td
operator|.
name|direction
decl_stmt|;
specifier|final
name|char
name|method
init|=
name|td
operator|.
name|method
decl_stmt|;
comment|//int arrSize = method == 'v' ? 1 : td.arrSizeToSend;
name|int
name|arrSize
init|=
name|td
operator|.
name|arrSizeToSend
decl_stmt|;
name|int
name|N
init|=
name|td
operator|.
name|elementsToSend
operator|/
name|arrSize
decl_stmt|;
comment|// + 1;
if|if
condition|(
name|N
operator|==
literal|0
condition|)
block|{
name|N
operator|=
literal|1
expr_stmt|;
block|}
specifier|final
name|boolean
name|smokeTest
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|SMOKE_TEST
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|smokeTest
condition|)
name|N
operator|=
literal|3
expr_stmt|;
name|int
name|totalInv
init|=
name|N
operator|*
name|td
operator|.
name|arrSizeToSend
decl_stmt|;
name|byte
index|[]
name|barr
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|ba
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|'b'
condition|)
block|{
name|ba
operator|=
operator|new
name|byte
index|[
name|td
operator|.
name|arrSizeToSend
index|]
expr_stmt|;
name|barr
operator|=
operator|new
name|byte
index|[
name|totalInv
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|barr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|barr
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
block|}
name|Double
index|[]
name|darr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|'d'
condition|)
block|{
name|darr
operator|=
operator|new
name|Double
index|[
name|totalInv
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|darr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|darr
index|[
name|i
index|]
operator|=
operator|new
name|Double
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|Integer
index|[]
name|iarr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|'i'
condition|)
block|{
name|iarr
operator|=
operator|new
name|Integer
index|[
name|totalInv
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iarr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|iarr
index|[
name|i
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|sarr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|'s'
condition|)
block|{
name|sarr
operator|=
operator|new
name|String
index|[
name|totalInv
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sarr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sarr
index|[
name|i
index|]
operator|=
literal|"s"
operator|+
name|i
expr_stmt|;
block|}
block|}
name|MeshInterfaceObject
index|[]
name|marr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|'m'
condition|)
block|{
name|marr
operator|=
operator|new
name|MeshInterfaceObject
index|[
name|totalInv
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalInv
condition|;
name|i
operator|++
control|)
block|{
name|marr
index|[
name|i
index|]
operator|=
operator|new
name|MeshInterfaceObject
argument_list|()
expr_stmt|;
name|marr
index|[
name|i
index|]
operator|.
name|setX
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|marr
index|[
name|i
index|]
operator|.
name|setY
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|marr
index|[
name|i
index|]
operator|.
name|setValue
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SimpleEvent
index|[]
name|earr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|'e'
condition|)
block|{
name|earr
operator|=
operator|new
name|SimpleEvent
index|[
name|totalInv
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|earr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|earr
index|[
name|i
index|]
operator|=
operator|new
name|SimpleEvent
argument_list|()
expr_stmt|;
name|earr
index|[
name|i
index|]
operator|.
name|setSequenceNumber
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|earr
index|[
name|i
index|]
operator|.
name|setMessage
argument_list|(
literal|"Message #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|earr
index|[
name|i
index|]
operator|.
name|setTimestamp
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|BenchClient
name|client
init|=
operator|new
name|BenchClient
argument_list|(
name|td
operator|.
name|serverLocation
argument_list|)
decl_stmt|;
comment|//        System.out.println("invoking " + N + (smokeTest ? " (SMOKE TEST)" : "")
comment|//                + " times for test " + method + " arraysSize=" + td.arrSizeToSend
comment|//                + " " + (new Date()));
comment|//boolean validate = true;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|N
condition|;
name|count
operator|++
control|)
block|{
name|int
name|off
init|=
name|count
operator|*
name|arrSize
decl_stmt|;
comment|//String arg = "echo"+i;
if|if
condition|(
name|method
operator|==
literal|'v'
condition|)
block|{
if|if
condition|(
name|direction
operator|==
literal|'e'
condition|)
block|{
name|client
operator|.
name|echoVoid
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'r'
operator|||
name|direction
operator|==
literal|'s'
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"usupported direction "
operator|+
name|direction
operator|+
literal|" for void method"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unrecongized direction "
operator|+
name|direction
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'b'
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|barr
argument_list|,
name|off
argument_list|,
name|ba
argument_list|,
literal|0
argument_list|,
name|ba
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|uba
init|=
literal|null
decl_stmt|;
name|int
name|ulen
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|direction
operator|==
literal|'e'
condition|)
block|{
name|uba
operator|=
name|client
operator|.
name|echoBase64
argument_list|(
name|ba
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'r'
condition|)
block|{
name|ulen
operator|=
name|client
operator|.
name|receiveBase64
argument_list|(
name|ba
argument_list|)
expr_stmt|;
if|if
condition|(
name|ulen
operator|!=
name|ba
operator|.
name|length
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" returned wrong size"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
block|{
name|uba
operator|=
name|client
operator|.
name|sendBase64
argument_list|(
name|arrSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unrecongized direction "
operator|+
name|direction
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|count
operator|==
literal|0
operator|||
name|count
operator|==
name|N
operator|-
literal|1
operator|)
operator|&&
operator|(
name|direction
operator|==
literal|'e'
operator|||
name|direction
operator|==
literal|'s'
operator|)
condition|)
block|{
comment|// bruta force
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
name|off
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|uba
operator|==
literal|null
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" byte array response was null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|uba
operator|.
name|length
operator|!=
name|ba
operator|.
name|length
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" byte array had wrong size "
operator|+
name|uba
operator|.
name|length
operator|+
literal|" (expected "
operator|+
name|ba
operator|.
name|length
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ba
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|uba
index|[
name|i
index|]
operator|!=
name|barr
index|[
name|i
operator|+
name|off
index|]
condition|)
block|{
name|fail
argument_list|(
literal|"byte array response had wrong content"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'d'
condition|)
block|{
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|da
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
operator|new
name|Util
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|copyList
argument_list|(
name|darr
argument_list|,
name|off
argument_list|,
name|da
argument_list|,
name|td
operator|.
name|arrSizeToSend
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|uda
init|=
literal|null
decl_stmt|;
name|int
name|dlen
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|direction
operator|==
literal|'e'
condition|)
block|{
name|uda
operator|=
name|client
operator|.
name|echoDoubles
argument_list|(
name|da
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'r'
condition|)
block|{
name|dlen
operator|=
name|client
operator|.
name|receiveDoubles
argument_list|(
name|da
argument_list|)
expr_stmt|;
if|if
condition|(
name|dlen
operator|!=
name|da
operator|.
name|size
argument_list|()
condition|)
name|fail
argument_list|(
literal|"receive double array returned wrong size"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
block|{
name|uda
operator|=
name|client
operator|.
name|sendDoubles
argument_list|(
name|arrSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unrecongized direction "
operator|+
name|direction
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|count
operator|==
literal|0
operator|||
name|count
operator|==
name|N
operator|-
literal|1
operator|)
operator|&&
operator|(
name|direction
operator|==
literal|'e'
operator|||
name|direction
operator|==
literal|'s'
operator|)
condition|)
block|{
comment|// bruta force verification
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
name|off
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|uda
operator|==
literal|null
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" double array response was null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|uda
operator|.
name|size
argument_list|()
operator|!=
name|da
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" double array had wrong size "
operator|+
name|uda
operator|.
name|size
argument_list|()
operator|+
literal|" (expected "
operator|+
name|da
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uda
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|uda
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|darr
index|[
name|i
operator|+
name|off
index|]
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" double array response had wrong content"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'i'
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|ia
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
operator|new
name|Util
argument_list|<
name|Integer
argument_list|>
argument_list|()
operator|.
name|copyList
argument_list|(
name|iarr
argument_list|,
name|off
argument_list|,
name|ia
argument_list|,
name|td
operator|.
name|arrSizeToSend
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|uia
init|=
literal|null
decl_stmt|;
name|int
name|ulen
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|direction
operator|==
literal|'e'
condition|)
block|{
name|uia
operator|=
name|client
operator|.
name|echoInts
argument_list|(
name|ia
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'r'
condition|)
block|{
name|ulen
operator|=
name|client
operator|.
name|receiveInts
argument_list|(
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|ulen
operator|!=
name|ia
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" receive byte array returned wrong size"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
block|{
name|uia
operator|=
name|client
operator|.
name|sendInts
argument_list|(
name|arrSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unrecongized direction "
operator|+
name|direction
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|count
operator|==
literal|0
operator|||
name|count
operator|==
name|N
operator|-
literal|1
operator|)
operator|&&
operator|(
name|direction
operator|==
literal|'e'
operator|||
name|direction
operator|==
literal|'s'
operator|)
condition|)
block|{
comment|// bruta force verification
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
name|off
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|uia
operator|==
literal|null
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" int array response was null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|uia
operator|.
name|size
argument_list|()
operator|!=
name|ia
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" int array had wrong size "
operator|+
name|uia
operator|.
name|size
argument_list|()
operator|+
literal|" (expected "
operator|+
name|ia
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uia
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|uia
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|iarr
index|[
name|i
operator|+
name|off
index|]
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" int array response had wrong content"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'s'
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|sa
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
operator|new
name|Util
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|copyList
argument_list|(
name|sarr
argument_list|,
name|off
argument_list|,
name|sa
argument_list|,
name|td
operator|.
name|arrSizeToSend
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|usa
init|=
literal|null
decl_stmt|;
name|int
name|slen
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|direction
operator|==
literal|'e'
condition|)
block|{
name|usa
operator|=
name|client
operator|.
name|echoStrings
argument_list|(
name|sa
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'r'
condition|)
block|{
name|slen
operator|=
name|client
operator|.
name|receiveStrings
argument_list|(
name|sa
argument_list|)
expr_stmt|;
if|if
condition|(
name|slen
operator|!=
name|sa
operator|.
name|size
argument_list|()
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" receive string array returned wrong size"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
block|{
name|usa
operator|=
name|client
operator|.
name|sendStrings
argument_list|(
name|arrSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unrecongized direction "
operator|+
name|direction
argument_list|)
throw|;
block|}
if|if
condition|(
name|start
operator|>
literal|0
operator|&&
operator|(
name|count
operator|==
literal|0
operator|||
name|count
operator|==
name|N
operator|-
literal|1
operator|)
operator|&&
operator|(
name|direction
operator|==
literal|'e'
operator|||
name|direction
operator|==
literal|'s'
operator|)
condition|)
block|{
comment|// bruta force verification
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
name|off
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|usa
operator|==
literal|null
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" string array response was null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|usa
operator|.
name|size
argument_list|()
operator|!=
name|sa
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" string array had wrong size "
operator|+
name|usa
operator|.
name|size
argument_list|()
operator|+
literal|" (expected "
operator|+
name|sa
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|usa
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s1
init|=
name|usa
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|sarr
index|[
name|i
operator|+
name|off
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" string array response"
operator|+
literal|" had wrong content (s1="
operator|+
name|s1
operator|+
literal|" s2="
operator|+
name|s2
operator|+
literal|" i="
operator|+
name|i
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'m'
condition|)
block|{
name|ArrayList
argument_list|<
name|MeshInterfaceObject
argument_list|>
name|ma
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
operator|new
name|Util
argument_list|<
name|MeshInterfaceObject
argument_list|>
argument_list|()
operator|.
name|copyList
argument_list|(
name|marr
argument_list|,
name|off
argument_list|,
name|ma
argument_list|,
name|td
operator|.
name|arrSizeToSend
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MeshInterfaceObject
argument_list|>
name|uma
init|=
literal|null
decl_stmt|;
name|int
name|slen
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|direction
operator|==
literal|'e'
condition|)
block|{
name|uma
operator|=
name|client
operator|.
name|echoMeshInterfaceObjects
argument_list|(
name|ma
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'r'
condition|)
block|{
name|slen
operator|=
name|client
operator|.
name|receiveMeshInterfaceObjects
argument_list|(
name|ma
argument_list|)
expr_stmt|;
if|if
condition|(
name|slen
operator|!=
name|ma
operator|.
name|size
argument_list|()
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" receive MeshInterfaceObject array returned wrong size"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
block|{
name|uma
operator|=
name|client
operator|.
name|sendMeshInterfaceObjects
argument_list|(
name|arrSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unrecongized direction "
operator|+
name|direction
argument_list|)
throw|;
block|}
if|if
condition|(
name|start
operator|>
literal|0
operator|&&
operator|(
name|count
operator|==
literal|0
operator|||
name|count
operator|==
name|N
operator|-
literal|1
operator|)
operator|&&
operator|(
name|direction
operator|==
literal|'e'
operator|||
name|direction
operator|==
literal|'s'
operator|)
condition|)
block|{
comment|// bruta force verification
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
name|off
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|uma
operator|==
literal|null
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" MeshInterfaceObject array response was null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|uma
operator|.
name|size
argument_list|()
operator|!=
name|ma
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" string MeshInterfaceObject had wrong size "
operator|+
name|uma
operator|.
name|size
argument_list|()
operator|+
literal|" (expected "
operator|+
name|ma
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uma
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MeshInterfaceObject
name|s1
init|=
name|uma
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|MeshInterfaceObject
name|s2
init|=
name|marr
index|[
name|i
operator|+
name|off
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|toString
argument_list|(
name|s1
argument_list|)
operator|.
name|equals
argument_list|(
name|toString
argument_list|(
name|s2
argument_list|)
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" MeshInterfaceObject array response"
operator|+
literal|" had wrong content (s1="
operator|+
name|s1
operator|+
literal|" s2="
operator|+
name|s2
operator|+
literal|" i="
operator|+
name|i
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'e'
condition|)
block|{
name|ArrayList
argument_list|<
name|SimpleEvent
argument_list|>
name|ea
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
operator|new
name|Util
argument_list|<
name|SimpleEvent
argument_list|>
argument_list|()
operator|.
name|copyList
argument_list|(
name|earr
argument_list|,
name|off
argument_list|,
name|ea
argument_list|,
name|td
operator|.
name|arrSizeToSend
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SimpleEvent
argument_list|>
name|uea
init|=
literal|null
decl_stmt|;
name|int
name|slen
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|direction
operator|==
literal|'e'
condition|)
block|{
name|uea
operator|=
name|client
operator|.
name|echoSimpleEvents
argument_list|(
name|ea
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'r'
condition|)
block|{
name|slen
operator|=
name|client
operator|.
name|receiveSimpleEvents
argument_list|(
name|ea
argument_list|)
expr_stmt|;
if|if
condition|(
name|slen
operator|!=
name|ea
operator|.
name|size
argument_list|()
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" receive SimpleEvent array returned wrong size"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
block|{
name|uea
operator|=
name|client
operator|.
name|sendSimpleEvents
argument_list|(
name|arrSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unrecongized direction "
operator|+
name|direction
argument_list|)
throw|;
block|}
if|if
condition|(
name|start
operator|>
literal|0
operator|&&
operator|(
name|count
operator|==
literal|0
operator|||
name|count
operator|==
name|N
operator|-
literal|1
operator|)
operator|&&
operator|(
name|direction
operator|==
literal|'e'
operator|||
name|direction
operator|==
literal|'s'
operator|)
condition|)
block|{
comment|// bruta force verification
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
name|off
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|uea
operator|==
literal|null
condition|)
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" SimpleEvent array response was null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|uea
operator|.
name|size
argument_list|()
operator|!=
name|ea
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" string SimpleEvent had wrong size "
operator|+
name|uea
operator|.
name|size
argument_list|()
operator|+
literal|" (expected "
operator|+
name|ea
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uea
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleEvent
name|s1
init|=
name|uea
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SimpleEvent
name|s2
init|=
name|earr
index|[
name|i
operator|+
name|off
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|toString
argument_list|(
name|s1
argument_list|)
operator|.
name|equals
argument_list|(
name|toString
argument_list|(
name|s2
argument_list|)
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
literal|" SimpleEvent array response"
operator|+
literal|" had wrong content (s1="
operator|+
name|s1
operator|+
literal|" s2="
operator|+
name|s2
operator|+
literal|" i="
operator|+
name|i
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unrecongized method "
operator|+
name|method
argument_list|)
throw|;
block|}
if|if
condition|(
name|start
operator|>
literal|0
operator|&&
name|smokeTest
condition|)
block|{
comment|//                String resp = builder.serializeToString(handler.getLastResponse());
comment|//                System.out.println(method2s(direction, method)+" response=\n"+resp+"---\n");
block|}
block|}
if|if
condition|(
name|start
operator|>
literal|0
condition|)
block|{
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|total
init|=
operator|(
name|end
operator|==
name|start
operator|)
condition|?
literal|1
else|:
operator|(
name|end
operator|-
name|start
operator|)
decl_stmt|;
name|double
name|seconds
init|=
operator|(
name|total
operator|/
literal|1000.0
operator|)
decl_stmt|;
name|double
name|invPerSecs
init|=
operator|(
name|double
operator|)
name|N
operator|/
name|seconds
decl_stmt|;
name|double
name|avgInvTimeInMs
init|=
operator|(
name|double
operator|)
name|total
operator|/
operator|(
name|double
operator|)
name|N
decl_stmt|;
comment|//            System.out.println("N=" + N + " avg invocation:" + avgInvTimeInMs + " [ms]" +
comment|//                    "total:"+total+" [ms] "+
comment|//                    " throughput:" + invPerSecs + " [invocations/second]" +
comment|//                    " arraysSize=" + arrSize +
comment|//                    " direction=" + direction +
comment|//                    " method=" + method
comment|//                    + " " + (new Date())
comment|//            );
name|td
operator|.
name|printResult
argument_list|(
name|avgInvTimeInMs
operator|/
literal|1000.0
argument_list|,
name|invPerSecs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|SimpleEvent
name|event
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|event
operator|.
name|getMessage
argument_list|()
operator|+
literal|":"
operator|+
name|event
operator|.
name|getSequenceNumber
argument_list|()
operator|+
literal|":"
operator|+
name|event
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|MeshInterfaceObject
name|object
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|object
operator|.
name|getValue
argument_list|()
operator|+
literal|":"
operator|+
name|object
operator|.
name|getX
argument_list|()
operator|+
literal|":"
operator|+
name|object
operator|.
name|getY
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|private
specifier|static
name|void
name|verbose
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"B1> "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|fail
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|String
name|s
init|=
literal|"FATAL ERROR: service is not following benchmark requirement: "
operator|+
name|msg
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|s
argument_list|)
throw|;
comment|//System.exit(-1);
block|}
specifier|private
specifier|static
name|String
name|method2s
parameter_list|(
name|char
name|direction
parameter_list|,
name|char
name|method
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|direction
operator|==
literal|'e'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'s'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"send"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
literal|'r'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"receive"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|==
literal|'v'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Void"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'b'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Base64"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'d'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Doubles"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'i'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Ints"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'s'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Strings"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'m'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"MeshInterfaceObjects"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|==
literal|'e'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"SimpleEvent"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|TestDescriptor
block|{
specifier|private
name|java
operator|.
name|text
operator|.
name|DecimalFormat
name|df
init|=
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormat
argument_list|(
literal|"##0.000000000"
argument_list|)
decl_stmt|;
specifier|private
name|java
operator|.
name|text
operator|.
name|DecimalFormat
name|df2
init|=
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormat
argument_list|(
literal|"##0.0000"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|testSetup
decl_stmt|;
specifier|private
name|String
name|clientName
init|=
literal|"CXF"
decl_stmt|;
specifier|private
name|String
name|serverName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|serverLocation
decl_stmt|;
specifier|private
name|int
name|arrSizeToSend
decl_stmt|;
specifier|private
name|int
name|elementsToSend
decl_stmt|;
specifier|private
name|char
name|direction
decl_stmt|;
specifier|private
name|char
name|method
decl_stmt|;
name|TestDescriptor
parameter_list|(
comment|//String serverName,
name|String
name|location
parameter_list|,
comment|//final char direction,
comment|//final char method,
name|int
name|elementsToSend
parameter_list|)
comment|//int arrSizeToSend)
block|{
name|this
operator|.
name|testSetup
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.setup"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|testSetup
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|testSetup
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"machine.name"
argument_list|,
literal|"UDISCLOSED_SETUP"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|SERVER_NAME
init|=
literal|"server.name"
decl_stmt|;
name|this
operator|.
name|serverName
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|SERVER_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|SERVER_NAME
operator|+
literal|" must be specified as system property"
argument_list|)
throw|;
block|}
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
name|this
operator|.
name|serverLocation
operator|=
name|location
expr_stmt|;
comment|//this.direction =  direction;
comment|//this.method = method;
name|this
operator|.
name|elementsToSend
operator|=
name|elementsToSend
expr_stmt|;
comment|//this.arrSizeToSend = arrSizeToSend;
block|}
specifier|public
name|void
name|setDirection
parameter_list|(
name|char
name|direction
parameter_list|)
block|{
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
specifier|public
name|char
name|getDirection
parameter_list|()
block|{
return|return
name|direction
return|;
block|}
specifier|public
name|void
name|setMethod
parameter_list|(
name|char
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
specifier|public
name|char
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
specifier|public
name|void
name|printResult
parameter_list|(
name|double
name|timeSecs
parameter_list|,
name|double
name|throughput
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|results
init|=
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|results
operator|.
name|print
argument_list|(
name|testSetup
operator|+
literal|'\t'
operator|+
name|clientName
operator|+
literal|'\t'
operator|+
name|serverName
operator|+
literal|'\t'
operator|+
name|method2s
argument_list|(
name|direction
argument_list|,
name|method
argument_list|)
operator|+
operator|(
operator|(
name|method
operator|==
literal|'m'
operator|)
condition|?
literal|"\t"
else|:
operator|(
operator|(
name|method
operator|==
literal|'e'
operator|&&
name|direction
operator|==
literal|'r'
operator|)
condition|?
literal|"\t\t"
else|:
literal|"\t\t\t"
operator|)
operator|)
operator|+
name|arrSizeToSend
operator|+
literal|'\t'
operator|+
name|df
operator|.
name|format
argument_list|(
name|timeSecs
argument_list|)
operator|+
literal|'\t'
operator|+
name|df2
operator|.
name|format
argument_list|(
name|throughput
argument_list|)
operator|+
literal|"\r\n"
argument_list|)
expr_stmt|;
name|results
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|echoVoid
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|port
operator|.
name|echoVoid
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|echoStrings
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|echoStrings
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|int
name|receiveBase64
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|receiveBase64
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|int
name|receiveDoubles
parameter_list|(
name|List
argument_list|<
name|Double
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|receiveDoubles
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|sendInts
parameter_list|(
name|int
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|sendInts
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|echoBase64
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|echoBase64
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|int
name|receiveStrings
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|receiveStrings
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|echoInts
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|echoInts
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|int
name|receiveInts
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|receiveInts
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Double
argument_list|>
name|sendDoubles
parameter_list|(
name|int
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|sendDoubles
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|sendBase64
parameter_list|(
name|int
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|sendBase64
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Double
argument_list|>
name|echoDoubles
parameter_list|(
name|List
argument_list|<
name|Double
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|echoDoubles
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|sendStrings
parameter_list|(
name|int
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
return|return
name|port
operator|.
name|sendStrings
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|SimpleEvent
argument_list|>
name|echoSimpleEvents
parameter_list|(
name|List
argument_list|<
name|SimpleEvent
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|EchoSimpleEventsRequest
name|request
init|=
operator|new
name|EchoSimpleEventsRequest
argument_list|()
decl_stmt|;
name|ArrayOfSimpleEvent
name|array
init|=
operator|new
name|ArrayOfSimpleEvent
argument_list|()
decl_stmt|;
name|array
operator|.
name|getItem
argument_list|()
operator|.
name|addAll
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|request
operator|.
name|setInput
argument_list|(
name|array
argument_list|)
expr_stmt|;
return|return
name|port
operator|.
name|echoSimpleEvents
argument_list|(
name|request
argument_list|)
operator|.
name|getEchoSimpleEventsReturn
argument_list|()
operator|.
name|getItem
argument_list|()
return|;
block|}
specifier|public
name|int
name|receiveSimpleEvents
parameter_list|(
name|List
argument_list|<
name|SimpleEvent
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|ReceiveSimpleEventsRequest
name|request
init|=
operator|new
name|ReceiveSimpleEventsRequest
argument_list|()
decl_stmt|;
name|ArrayOfSimpleEvent
name|array
init|=
operator|new
name|ArrayOfSimpleEvent
argument_list|()
decl_stmt|;
name|array
operator|.
name|getItem
argument_list|()
operator|.
name|addAll
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|request
operator|.
name|setInput
argument_list|(
name|array
argument_list|)
expr_stmt|;
return|return
name|port
operator|.
name|receiveSimpleEvents
argument_list|(
name|request
argument_list|)
operator|.
name|getReceiveSimpleEventsReturn
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|SimpleEvent
argument_list|>
name|sendSimpleEvents
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|SendSimpleEventsRequest
name|request
init|=
operator|new
name|SendSimpleEventsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|port
operator|.
name|sendSimpleEvents
argument_list|(
name|request
argument_list|)
operator|.
name|getSendSimpleEventsReturn
argument_list|()
operator|.
name|getItem
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|MeshInterfaceObject
argument_list|>
name|echoMeshInterfaceObjects
parameter_list|(
name|List
argument_list|<
name|MeshInterfaceObject
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|EchoMeshInterfaceObjectsRequest
name|request
init|=
operator|new
name|EchoMeshInterfaceObjectsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|getInput
argument_list|()
operator|.
name|addAll
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return
name|port
operator|.
name|echoMeshInterfaceObjects
argument_list|(
name|request
argument_list|)
operator|.
name|getEchoMeshInterfaceObjectReturn
argument_list|()
return|;
block|}
specifier|public
name|int
name|receiveMeshInterfaceObjects
parameter_list|(
name|List
argument_list|<
name|MeshInterfaceObject
argument_list|>
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|ReceiveMeshInterfaceObjectsRequest
name|request
init|=
operator|new
name|ReceiveMeshInterfaceObjectsRequest
argument_list|()
decl_stmt|;
name|ArrayOfMeshInterfaceObject
name|array
init|=
operator|new
name|ArrayOfMeshInterfaceObject
argument_list|()
decl_stmt|;
name|array
operator|.
name|getItem
argument_list|()
operator|.
name|addAll
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|request
operator|.
name|setInput
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|ReceiveMeshInterfaceObjectsResponse
name|response
init|=
name|port
operator|.
name|receiveMeshInterfaceObjects
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getReceiveMeshInterfaceObjectsReturn
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|MeshInterfaceObject
argument_list|>
name|sendMeshInterfaceObjects
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|SendMeshInterfaceObjectsRequest
name|request
init|=
operator|new
name|SendMeshInterfaceObjectsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|SendMeshInterfaceObjectsResponse
name|response
init|=
name|port
operator|.
name|sendMeshInterfaceObjects
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getSendMeshInterfaceObjectsReturn
argument_list|()
operator|.
name|getItem
argument_list|()
return|;
block|}
specifier|static
class|class
name|Util
parameter_list|<
name|E
parameter_list|>
block|{
specifier|public
name|Util
parameter_list|()
block|{      	}
specifier|public
name|void
name|copyList
parameter_list|(
name|E
index|[]
name|src
parameter_list|,
name|int
name|off
parameter_list|,
name|ArrayList
argument_list|<
name|E
argument_list|>
name|des
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|des
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|E
name|o
init|=
name|src
index|[
name|i
operator|+
name|off
index|]
decl_stmt|;
name|des
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

