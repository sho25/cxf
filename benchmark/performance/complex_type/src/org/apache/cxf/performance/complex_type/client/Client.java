begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|performance
operator|.
name|complex_type
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pat
operator|.
name|internal
operator|.
name|TestCaseBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pat
operator|.
name|internal
operator|.
name|TestResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|performance
operator|.
name|complex_type
operator|.
name|ComplexPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|performance
operator|.
name|complex_type
operator|.
name|ComplexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|performance
operator|.
name|complex_type
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|performance
operator|.
name|complex_type
operator|.
name|types
operator|.
name|ColourEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|performance
operator|.
name|complex_type
operator|.
name|types
operator|.
name|NestedComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|performance
operator|.
name|complex_type
operator|.
name|types
operator|.
name|NestedComplexTypeSeq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|performance
operator|.
name|complex_type
operator|.
name|types
operator|.
name|SimpleStruct
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Client
extends|extends
name|TestCaseBase
argument_list|<
name|ComplexPortType
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/performance/complex_type"
argument_list|,
literal|"ComplexService"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|PORT_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/performance/complex_type"
argument_list|,
literal|"ComplexPortType"
argument_list|)
decl_stmt|;
specifier|private
name|ComplexService
name|cs
decl_stmt|;
specifier|private
specifier|final
name|NestedComplexTypeSeq
name|complexTypeSeq
init|=
operator|new
name|NestedComplexTypeSeq
argument_list|()
decl_stmt|;
specifier|public
name|Client
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|super
argument_list|(
literal|"Complex Type TestCase"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|serviceName
operator|=
literal|"ComplexService"
expr_stmt|;
name|portName
operator|=
literal|"ComplexPortType"
expr_stmt|;
name|operationName
operator|=
literal|"sendReceiveData"
expr_stmt|;
name|wsdlNameSpace
operator|=
literal|"http://cxf.apache.org/performance/complex_type"
expr_stmt|;
name|amount
operator|=
literal|30
expr_stmt|;
name|packetSize
operator|=
literal|1
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|client
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|client
operator|.
name|run
argument_list|()
expr_stmt|;
name|List
name|results
init|=
name|client
operator|.
name|getTestResults
argument_list|()
decl_stmt|;
name|TestResult
name|testResult
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|results
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|testResult
operator|=
operator|(
name|TestResult
operator|)
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Throughput "
operator|+
name|testResult
operator|.
name|getThroughput
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"AVG Response Time "
operator|+
name|testResult
operator|.
name|getAvgResponseTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"cxf client is going to shutdown!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SimpleStruct
name|getSimpleStruct
parameter_list|()
throws|throws
name|DatatypeConfigurationException
block|{
name|SimpleStruct
name|ss
init|=
operator|new
name|SimpleStruct
argument_list|()
decl_stmt|;
name|ss
operator|.
name|setVarFloat
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setVarShort
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setVarByte
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setVarDecimal
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"3.1415926"
argument_list|)
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setVarDouble
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setVarString
argument_list|(
literal|"1234567890!@#$%^&*()abcdefghijk"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setVarAttrString
argument_list|(
literal|"1234567890!@#$%^&*()abcdefghijk"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setVarDateTime
argument_list|(
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|12
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ss
return|;
block|}
specifier|public
name|void
name|initTestData
parameter_list|()
block|{
name|NestedComplexType
name|complexType
init|=
operator|new
name|NestedComplexType
argument_list|()
decl_stmt|;
name|complexType
operator|.
name|setVarString
argument_list|(
literal|"#12345ABc"
argument_list|)
expr_stmt|;
name|complexType
operator|.
name|setVarUByte
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|complexType
operator|.
name|setVarUnsignedLong
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"13691056728"
argument_list|)
argument_list|)
expr_stmt|;
name|complexType
operator|.
name|setVarFloat
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|complexType
operator|.
name|setVarQName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"return"
argument_list|,
literal|"return"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|complexType
operator|.
name|setVarStruct
argument_list|(
name|getSimpleStruct
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|complexType
operator|.
name|setVarEnum
argument_list|(
name|ColourEnum
operator|.
name|RED
argument_list|)
expr_stmt|;
name|byte
index|[]
name|binary
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|4
condition|;
name|idx
operator|++
control|)
block|{
for|for
control|(
name|int
name|jdx
init|=
literal|0
init|;
name|jdx
operator|<
literal|256
condition|;
name|jdx
operator|++
control|)
block|{
name|binary
index|[
name|idx
operator|*
literal|256
operator|+
name|jdx
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|jdx
operator|-
literal|128
argument_list|)
expr_stmt|;
block|}
block|}
name|complexType
operator|.
name|setVarBase64Binary
argument_list|(
name|binary
argument_list|)
expr_stmt|;
name|complexType
operator|.
name|setVarHexBinary
argument_list|(
name|binary
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packetSize
condition|;
name|i
operator|++
control|)
block|{
name|complexTypeSeq
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|complexType
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doJob
parameter_list|(
name|ComplexPortType
name|port
parameter_list|)
block|{
name|port
operator|.
name|sendReceiveData
argument_list|(
name|complexTypeSeq
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ComplexPortType
name|getPort
parameter_list|()
block|{
try|try
block|{
name|URL
name|wsdl
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|wsdlPath
operator|.
name|startsWith
argument_list|(
literal|"file://"
argument_list|)
operator|)
operator|||
operator|(
name|wsdlPath
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
operator|)
condition|)
block|{
name|wsdl
operator|=
operator|new
name|URL
argument_list|(
name|wsdlPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wsdl
operator|=
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
name|wsdlPath
argument_list|)
expr_stmt|;
block|}
name|cs
operator|=
operator|new
name|ComplexService
argument_list|(
name|wsdl
argument_list|,
name|SERVICE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|cs
operator|.
name|getSoapPort
argument_list|()
return|;
block|}
specifier|public
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Syntax is: Client [-WSDL wsdllocation] [-PacketSize packetnumber] "
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

