begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pat
operator|.
name|internal
package|;
end_package

begin_class
specifier|public
class|class
name|TestResult
block|{
specifier|public
specifier|static
specifier|final
name|String
name|AVG_UNIT
init|=
literal|" (ms)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THROUGHPUT_UNIT
init|=
literal|" (invocations/sec)"
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|TestCaseBase
name|testCase
decl_stmt|;
specifier|private
name|double
name|avgResponseTime
decl_stmt|;
specifier|private
name|double
name|throughput
decl_stmt|;
specifier|public
name|TestResult
parameter_list|()
block|{
name|this
argument_list|(
literal|"Default Result"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestResult
parameter_list|(
name|String
name|cname
parameter_list|)
block|{
name|this
argument_list|(
name|cname
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestResult
parameter_list|(
name|String
name|cname
parameter_list|,
name|TestCaseBase
name|test
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|cname
expr_stmt|;
name|this
operator|.
name|testCase
operator|=
name|test
expr_stmt|;
block|}
specifier|public
name|void
name|compute
parameter_list|(
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|int
name|numberOfInvocations
parameter_list|)
block|{
name|double
name|numOfInvocations
init|=
operator|(
name|double
operator|)
name|numberOfInvocations
decl_stmt|;
name|double
name|duration
init|=
name|convertToSeconds
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
decl_stmt|;
name|throughput
operator|=
name|numOfInvocations
operator|/
name|duration
expr_stmt|;
name|avgResponseTime
operator|=
name|duration
operator|/
name|numOfInvocations
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Throughput: "
operator|+
name|testCase
operator|.
name|getOperationName
argument_list|()
operator|+
literal|" "
operator|+
name|throughput
operator|+
name|THROUGHPUT_UNIT
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"AVG. response time: "
operator|+
name|avgResponseTime
operator|*
literal|1000
operator|+
name|AVG_UNIT
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|numOfInvocations
operator|+
literal|" (invocations), running "
operator|+
name|duration
operator|+
literal|" (sec) "
argument_list|)
expr_stmt|;
block|}
specifier|private
name|double
name|convertToSeconds
parameter_list|(
name|double
name|ms
parameter_list|)
block|{
return|return
name|ms
operator|/
literal|1000
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|double
name|getAvgResponseTime
parameter_list|()
block|{
return|return
name|avgResponseTime
return|;
block|}
specifier|public
name|double
name|getThroughput
parameter_list|()
block|{
return|return
name|throughput
return|;
block|}
block|}
end_class

end_unit

