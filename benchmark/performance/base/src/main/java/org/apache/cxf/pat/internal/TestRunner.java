begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pat
operator|.
name|internal
package|;
end_package

begin_class
specifier|public
class|class
name|TestRunner
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Runnable
block|{
specifier|protected
name|TestCaseBase
argument_list|<
name|T
argument_list|>
name|testCase
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|T
name|port
decl_stmt|;
specifier|public
name|TestRunner
parameter_list|()
block|{
name|this
argument_list|(
literal|"Default runner"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestRunner
parameter_list|(
name|String
name|cname
parameter_list|)
block|{
name|this
argument_list|(
name|cname
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestRunner
parameter_list|(
name|String
name|cname
parameter_list|,
name|TestCaseBase
argument_list|<
name|T
argument_list|>
name|test
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|cname
expr_stmt|;
name|this
operator|.
name|testCase
operator|=
name|test
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|test
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TestRunner "
operator|+
name|name
operator|+
literal|" is running"
argument_list|)
expr_stmt|;
try|try
block|{
name|testCase
operator|.
name|internalTestRun
argument_list|(
name|name
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TestRunner "
operator|+
name|name
operator|+
literal|" is finished"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

