begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|XPathAssertTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAssert
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|XPathAssert
operator|.
name|assertValid
argument_list|(
literal|"//a"
argument_list|,
name|document
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|XPathAssert
operator|.
name|assertInvalid
argument_list|(
literal|"//aasd"
argument_list|,
name|document
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|XPathAssert
operator|.
name|assertInvalid
argument_list|(
literal|"//a"
argument_list|,
name|document
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expression is valid!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// this is correct
block|}
try|try
block|{
name|XPathAssert
operator|.
name|assertValid
argument_list|(
literal|"//aa"
argument_list|,
name|document
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expression is invalid!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// this is correct
block|}
name|XPathAssert
operator|.
name|assertXPathEquals
argument_list|(
literal|"//b"
argument_list|,
literal|"foo"
argument_list|,
name|document
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssertNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"test2.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"urn:foo"
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|"urn:z"
argument_list|)
expr_stmt|;
name|XPathAssert
operator|.
name|assertValid
argument_list|(
literal|"//a:a"
argument_list|,
name|document
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|XPathAssert
operator|.
name|assertValid
argument_list|(
literal|"//z:b"
argument_list|,
name|document
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

