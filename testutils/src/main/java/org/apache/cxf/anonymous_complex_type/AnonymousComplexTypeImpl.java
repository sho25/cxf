begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|anonymous_complex_type
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|serviceName
operator|=
literal|"anonymous_complex_type_service"
argument_list|,
name|portName
operator|=
literal|"anonymous_complex_typeSOAP"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.anonymous_complex_type.AnonymousComplexType"
argument_list|,
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/anonymous_complex_type/"
argument_list|,
name|wsdlLocation
operator|=
literal|"testutils/anonymous_complex_type.wsdl"
argument_list|)
specifier|public
class|class
name|AnonymousComplexTypeImpl
implements|implements
name|AnonymousComplexType
block|{
specifier|public
name|SplitNameResponse
operator|.
name|Names
name|splitName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|SplitNameResponse
operator|.
name|Names
name|names
init|=
operator|new
name|SplitNameResponse
operator|.
name|Names
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|names
operator|.
name|setFirst
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|setSecond
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|setFirst
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|RefSplitNameResponse
name|refSplitName
parameter_list|(
name|RefSplitName
name|refSplitName
parameter_list|)
block|{
if|if
condition|(
name|refSplitName
operator|.
name|getSplitName
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|refSplitName
operator|.
name|getSplitName
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|SplitNameResponse
operator|.
name|Names
name|names
init|=
operator|new
name|SplitNameResponse
operator|.
name|Names
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|SplitNameResponse
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|names
operator|.
name|setFirst
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|setSecond
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|setFirst
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
operator|new
name|SplitNameResponse
argument_list|()
expr_stmt|;
name|response
operator|.
name|setNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|RefSplitNameResponse
name|refResponse
init|=
operator|new
name|RefSplitNameResponse
argument_list|()
decl_stmt|;
name|refResponse
operator|.
name|setSplitNameResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
name|refResponse
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

