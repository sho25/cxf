begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|factory
operator|.
name|WSDLFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiatorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|ServiceWSDLBuilder
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * This class provides unit test support for tests that look at generated WSDL  * contents, as well as some test methods for invoking services.  */
end_comment

begin_class
specifier|public
class|class
name|TestUtilities
block|{
specifier|private
specifier|static
name|String
name|preKeepAlive
decl_stmt|;
specifier|private
specifier|static
name|String
name|basedirPath
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|classpathAnchor
decl_stmt|;
specifier|private
name|XMLInputFactory
name|xmlInputFactory
decl_stmt|;
comment|/**      * Namespaces for the XPath expressions.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * This class provides utilities to several conflicting inheritance stacks      * of test support. Thus, it can't be a base class, and so can't use      * getClass() to find resources. Users should pass getClass() to this      * constructor instead.      *      * @param classpathReference      */
specifier|public
name|TestUtilities
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classpathReference
parameter_list|)
block|{
name|classpathAnchor
operator|=
name|classpathReference
expr_stmt|;
name|xmlInputFactory
operator|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setKeepAliveSystemProperty
parameter_list|(
name|boolean
name|setAlive
parameter_list|)
block|{
name|preKeepAlive
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.keepAlive"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"http.keepAlive"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|setAlive
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|recoverKeepAliveSystemProperty
parameter_list|()
block|{
if|if
condition|(
name|preKeepAlive
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"http.keepAlive"
argument_list|,
name|preKeepAlive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"http.keepAlive"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addDefaultNamespaces
parameter_list|()
block|{
name|addNamespace
argument_list|(
literal|"s"
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/envelope/"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"xsd"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"wsdl"
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"wsdlsoap"
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"soap"
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"soap12env"
argument_list|,
literal|"http://www.w3.org/2003/05/soap-envelope"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"xml"
argument_list|,
literal|"http://www.w3.org/XML/1998/namespace"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Handy function for checking correctness of qualifies names in schema attribute values.      * @param prefix      * @param node      * @return      * @throws Exception      */
specifier|public
name|String
name|resolveNamespacePrefix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|null
decl_stmt|;
name|NodeList
name|nodeNamespaces
init|=
name|this
operator|.
name|assertValid
argument_list|(
literal|"namespace::*"
argument_list|,
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|nodeNamespaces
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Attr
name|nsAttr
init|=
operator|(
name|Attr
operator|)
name|nodeNamespaces
operator|.
name|item
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|nsAttr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|url
operator|=
name|nsAttr
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|url
return|;
block|}
comment|/**      * Assert that the following XPath query selects one or more nodes.      *      * @param xpath      * @throws Exception      */
specifier|public
name|NodeList
name|assertValid
parameter_list|(
name|String
name|xpath
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|XPathAssert
operator|.
name|assertValid
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|,
name|namespaces
argument_list|)
return|;
block|}
comment|/**      * Assert that the following XPath query selects a boolean value.      *      * @param xpath      * @throws Exception      */
specifier|public
name|void
name|assertValidBoolean
parameter_list|(
name|String
name|xpath
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|XPathAssert
operator|.
name|assertValidBoolean
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert that the following XPath query selects no nodes.      *      * @param xpath      */
specifier|public
name|NodeList
name|assertInvalid
parameter_list|(
name|String
name|xpath
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|XPathAssert
operator|.
name|assertInvalid
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|,
name|namespaces
argument_list|)
return|;
block|}
comment|/**      * Assert that the text of the xpath node retrieved is equal to the value      * specified.      *      * @param xpath      * @param value      * @param node      */
specifier|public
name|void
name|assertXPathEquals
parameter_list|(
name|String
name|xpath
parameter_list|,
name|String
name|value
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|XPathAssert
operator|.
name|assertXPathEquals
argument_list|(
name|xpath
argument_list|,
name|value
argument_list|,
name|node
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert that the text of the xpath node retrieved is equal to the value      * specified.      *      * @param xpath      * @param value      * @param node      */
specifier|public
name|void
name|assertXPathEquals
parameter_list|(
name|String
name|xpath
parameter_list|,
name|QName
name|value
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|XPathAssert
operator|.
name|assertXPathEquals
argument_list|(
name|xpath
argument_list|,
name|value
argument_list|,
name|node
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert that this node is not a Soap fault body.      *      * @param node      * @throws Exception      */
specifier|public
name|void
name|assertNoFault
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|XPathAssert
operator|.
name|assertNoFault
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|invokeBytes
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|transport
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|(
literal|null
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/http"
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|ConduitInitiatorManager
name|conduitMgr
init|=
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConduitInitiator
name|conduitInit
init|=
name|conduitMgr
operator|.
name|getConduitInitiator
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|Conduit
name|conduit
init|=
name|conduitInit
operator|.
name|getConduit
argument_list|(
name|ei
argument_list|,
name|getBus
argument_list|()
argument_list|)
decl_stmt|;
name|TestMessageObserver
name|obs
init|=
operator|new
name|TestMessageObserver
argument_list|()
decl_stmt|;
name|conduit
operator|.
name|setMessageObserver
argument_list|(
name|obs
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|conduit
operator|.
name|prepare
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|m
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find resource "
operator|+
name|message
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
comment|// TODO: shouldn't have to do this. IO caching needs cleaning
comment|// up or possibly removal...
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|obs
operator|.
name|getResponseStream
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|invokeBytes
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|transport
parameter_list|,
name|byte
index|[]
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|(
literal|null
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/http"
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|ConduitInitiatorManager
name|conduitMgr
init|=
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConduitInitiator
name|conduitInit
init|=
name|conduitMgr
operator|.
name|getConduitInitiator
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|Conduit
name|conduit
init|=
name|conduitInit
operator|.
name|getConduit
argument_list|(
name|ei
argument_list|,
name|getBus
argument_list|()
argument_list|)
decl_stmt|;
name|TestMessageObserver
name|obs
init|=
operator|new
name|TestMessageObserver
argument_list|()
decl_stmt|;
name|conduit
operator|.
name|setMessageObserver
argument_list|(
name|obs
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|conduit
operator|.
name|prepare
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|m
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// TODO: shouldn't have to do this. IO caching needs cleaning
comment|// up or possibly removal...
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|obs
operator|.
name|getResponseStream
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
name|Node
name|invoke
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|transport
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bs
init|=
name|invokeBytes
argument_list|(
name|address
argument_list|,
name|transport
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bs
argument_list|)
decl_stmt|;
return|return
name|StaxUtils
operator|.
name|read
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|Node
name|invoke
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|transport
parameter_list|,
name|byte
index|[]
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bs
init|=
name|invokeBytes
argument_list|(
name|address
argument_list|,
name|transport
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bs
argument_list|)
decl_stmt|;
return|return
name|StaxUtils
operator|.
name|read
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|InputStream
name|getResourceAsStream
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
return|return
name|classpathAnchor
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
return|;
block|}
specifier|public
name|Reader
name|getResourceAsReader
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
return|return
operator|new
name|InputStreamReader
argument_list|(
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
specifier|public
name|XMLStreamReader
name|getResourceAsXMLStreamReader
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|XMLStreamException
block|{
return|return
name|xmlInputFactory
operator|.
name|createXMLStreamReader
argument_list|(
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|File
name|getTestFile
parameter_list|(
name|String
name|relativePath
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
name|relativePath
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getBasedir
parameter_list|()
block|{
if|if
condition|(
name|basedirPath
operator|!=
literal|null
condition|)
block|{
return|return
name|basedirPath
return|;
block|}
name|basedirPath
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|basedirPath
operator|==
literal|null
condition|)
block|{
name|basedirPath
operator|=
operator|new
name|File
argument_list|(
literal|""
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
return|return
name|basedirPath
return|;
block|}
comment|/**      * Return a DOM tree for the WSDL for a server.      *      * @param server the server.      * @return the DOM tree.      * @throws WSDLException      */
specifier|public
name|Document
name|getWSDLDocument
parameter_list|(
name|Server
name|server
parameter_list|)
throws|throws
name|WSDLException
block|{
name|Definition
name|definition
init|=
name|getWSDLDefinition
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|WSDLWriter
name|writer
init|=
name|WSDLFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newWSDLWriter
argument_list|()
decl_stmt|;
return|return
name|writer
operator|.
name|getDocument
argument_list|(
name|definition
argument_list|)
return|;
block|}
comment|/**      * Return a WSDL definition model for a server.      *      * @param server the server.      * @return the definition.      * @throws WSDLException      */
specifier|public
name|Definition
name|getWSDLDefinition
parameter_list|(
name|Server
name|server
parameter_list|)
throws|throws
name|WSDLException
block|{
name|Service
name|service
init|=
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
name|ServiceWSDLBuilder
name|wsdlBuilder
init|=
operator|new
name|ServiceWSDLBuilder
argument_list|(
name|bus
argument_list|,
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|wsdlBuilder
operator|.
name|setUseSchemaImports
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|wsdlBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Server
name|getServerForService
parameter_list|(
name|QName
name|serviceName
parameter_list|)
throws|throws
name|WSDLException
block|{
name|ServerRegistry
name|svrMan
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Server
name|s
range|:
name|svrMan
operator|.
name|getServers
argument_list|()
control|)
block|{
name|Service
name|svc
init|=
name|s
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|svc
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Server
name|getServerForAddress
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|WSDLException
block|{
name|ServerRegistry
name|svrMan
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Server
name|s
range|:
name|svrMan
operator|.
name|getServers
argument_list|()
control|)
block|{
if|if
condition|(
name|address
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
class|class
name|TestMessageObserver
implements|implements
name|MessageObserver
block|{
name|ByteArrayOutputStream
name|response
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|boolean
name|written
decl_stmt|;
name|String
name|contentType
decl_stmt|;
specifier|public
name|ByteArrayOutputStream
name|getResponseStream
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
operator|!
name|written
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|response
return|;
block|}
specifier|public
name|String
name|getResponseContentType
parameter_list|()
block|{
return|return
name|contentType
return|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|contentType
operator|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|response
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|written
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Add a namespace that will be used for XPath expressions.      *      * @param ns Namespace name.      * @param uri The namespace uri.      */
specifier|public
name|void
name|addNamespace
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|namespaces
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/**      * retrieve the entire namespace map.      *      * @return      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|namespaces
return|;
block|}
comment|/**      * Return the CXF bus used.      *      * @return      */
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
comment|/**      * Set the CXF bus.      *      * @param bus      */
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|checkUnrestrictedPoliciesInstalled
parameter_list|()
block|{
name|boolean
name|unrestrictedPoliciesInstalled
init|=
literal|false
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|}
decl_stmt|;
name|SecretKey
name|key192
init|=
operator|new
name|SecretKeySpec
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
comment|//NOPMD
literal|0x08
block|,
literal|0x09
block|,
literal|0x0a
block|,
literal|0x0b
block|,
literal|0x0c
block|,
literal|0x0d
block|,
literal|0x0e
block|,
literal|0x0f
block|,
literal|0x10
block|,
literal|0x11
block|,
literal|0x12
block|,
literal|0x13
block|,
literal|0x14
block|,
literal|0x15
block|,
literal|0x16
block|,
literal|0x17
block|}
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|Cipher
name|c
init|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES"
argument_list|)
decl_stmt|;
name|c
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|key192
argument_list|)
expr_stmt|;
name|c
operator|.
name|doFinal
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|unrestrictedPoliciesInstalled
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|unrestrictedPoliciesInstalled
return|;
block|}
return|return
name|unrestrictedPoliciesInstalled
return|;
block|}
block|}
end_class

end_unit

