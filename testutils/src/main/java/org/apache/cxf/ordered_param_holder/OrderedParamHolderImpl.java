begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ordered_param_holder
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|serviceName
operator|=
literal|"ordered_param_holder"
argument_list|,
name|portName
operator|=
literal|"ordered_param_holderSOAP"
argument_list|,
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/ordered_param_holder/"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.ordered_param_holder.OrderedParamHolder"
argument_list|,
name|wsdlLocation
operator|=
literal|"testutils/ordered_param_holder.wsdl"
argument_list|)
specifier|public
class|class
name|OrderedParamHolderImpl
implements|implements
name|OrderedParamHolder
block|{
specifier|public
name|void
name|orderedParamHolder
parameter_list|(
name|Holder
argument_list|<
name|ComplexStruct
argument_list|>
name|part3
parameter_list|,
name|Holder
argument_list|<
name|Integer
argument_list|>
name|part2
parameter_list|,
name|Holder
argument_list|<
name|String
argument_list|>
name|part1
parameter_list|)
block|{
name|part2
operator|.
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|part2
operator|.
name|value
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|part1
operator|.
name|value
operator|=
literal|"return "
operator|+
name|part1
operator|.
name|value
expr_stmt|;
name|part3
operator|.
name|value
operator|.
name|elem1
operator|=
literal|"return "
operator|+
name|part3
operator|.
name|value
operator|.
name|elem1
expr_stmt|;
name|part3
operator|.
name|value
operator|.
name|elem2
operator|=
literal|"return "
operator|+
name|part3
operator|.
name|value
operator|.
name|elem2
expr_stmt|;
name|part3
operator|.
name|value
operator|.
name|elem3
operator|++
expr_stmt|;
block|}
block|}
end_class

end_unit

