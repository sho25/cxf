begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|TestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|TestUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|portNum
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
name|Properties
name|ports
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
name|ServerSocket
name|lock
decl_stmt|;
static|static
block|{
name|int
name|pn
init|=
literal|9000
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"cxf.useRandomFirstPort"
argument_list|)
condition|)
block|{
name|pn
operator|+=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
operator|*
literal|100
expr_stmt|;
block|}
while|while
condition|(
name|portNum
operator|==
operator|-
literal|1
condition|)
block|{
try|try
block|{
comment|//we'll hold a socket open and allocate ports up from that socket.
comment|//if a second CXF build process (like running parallel builds)
comment|//tries to open the socket, it will throw an exception and it
comment|//will try again 100 ports up.   At this point, 100 ports is WAY
comment|//more than enough.  We can adjust later if needed.
name|ServerSocket
name|sock
init|=
operator|new
name|ServerSocket
argument_list|(
name|pn
argument_list|)
decl_stmt|;
name|lock
operator|=
name|sock
expr_stmt|;
name|portNum
operator|=
name|pn
operator|+
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|pn
operator|+=
literal|100
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|TestUtil
parameter_list|()
block|{
comment|//Complete
block|}
comment|// Deletes all files and subdirectories under dir.
comment|// Returns true if all deletions were successful.
comment|// If a deletion fails, the method stops attempting to delete and returns false.
specifier|public
specifier|static
name|boolean
name|deleteDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|children
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|success
init|=
name|deleteDir
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|children
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
comment|// The directory is now empty so delete it
return|return
name|dir
operator|.
name|delete
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getClassPath
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|StringBuilder
name|classPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|instanceof
name|URLClassLoader
condition|)
block|{
name|URLClassLoader
name|urlLoader
init|=
operator|(
name|URLClassLoader
operator|)
name|loader
decl_stmt|;
for|for
control|(
name|URL
name|url
range|:
name|urlLoader
operator|.
name|getURLs
argument_list|()
control|)
block|{
name|String
name|file
init|=
name|url
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|indexOf
argument_list|(
literal|"junit"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|classPath
operator|.
name|append
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|classPath
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|classPath
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Method
name|getMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
name|Method
index|[]
name|declMethods
init|=
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|declMethods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Properties
name|getAllPorts
parameter_list|()
block|{
return|return
name|ports
return|;
block|}
specifier|public
specifier|static
name|String
name|getPortNumber
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|getPortNumber
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|,
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getPortNumber
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|getPortNumber
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|count
argument_list|,
name|cls
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
operator|+
name|count
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getPortNumber
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getPortNumber
argument_list|(
name|name
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getNewPortNumber
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|getNewPortNumber
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|,
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getNewPortNumber
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|getNewPortNumber
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|count
argument_list|,
name|cls
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
operator|+
name|count
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getNewPortNumber
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getNewPortNumber
argument_list|(
name|name
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|applyNames
parameter_list|(
name|String
name|fullName
parameter_list|,
name|String
name|simpleName
parameter_list|,
name|String
name|p
parameter_list|)
block|{
name|ports
operator|.
name|setProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|fullName
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|ports
operator|.
name|setProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|simpleName
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|fullName
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|simpleName
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|fullName
operator|.
name|endsWith
argument_list|(
literal|"."
operator|+
name|simpleName
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
name|fullName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|,
name|fullName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|name
init|=
name|fullName
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ports
operator|.
name|setProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|name
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|name
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|idx
operator|=
name|fullName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|,
name|idx
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|removeNames
parameter_list|(
name|String
name|fullName
parameter_list|,
name|String
name|simpleName
parameter_list|)
block|{
name|ports
operator|.
name|remove
argument_list|(
literal|"testutil.ports."
operator|+
name|fullName
argument_list|)
expr_stmt|;
name|ports
operator|.
name|remove
argument_list|(
literal|"testutil.ports."
operator|+
name|simpleName
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|fullName
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|simpleName
argument_list|)
expr_stmt|;
if|if
condition|(
name|fullName
operator|.
name|endsWith
argument_list|(
literal|"."
operator|+
name|simpleName
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
name|fullName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|,
name|fullName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|name
init|=
name|fullName
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ports
operator|.
name|remove
argument_list|(
literal|"testutil.ports."
operator|+
name|name
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|name
argument_list|)
expr_stmt|;
name|idx
operator|=
name|fullName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|,
name|idx
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|getNewPortNumber
parameter_list|(
name|String
name|fullName
parameter_list|,
name|String
name|simpleName
parameter_list|)
block|{
name|removeNames
argument_list|(
name|fullName
argument_list|,
name|simpleName
argument_list|)
expr_stmt|;
return|return
name|getPortNumber
argument_list|(
name|fullName
argument_list|,
name|simpleName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getPortNumber
parameter_list|(
name|String
name|fullName
parameter_list|,
name|String
name|simpleName
parameter_list|)
block|{
name|String
name|p
init|=
name|ports
operator|.
name|getProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|fullName
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|fullName
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|ports
operator|.
name|setProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|fullName
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|ports
operator|.
name|setProperty
argument_list|(
literal|"testutil.ports."
operator|+
name|simpleName
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|int
name|pn
init|=
name|portNum
operator|++
decl_stmt|;
try|try
init|(
name|ServerSocket
name|sock
init|=
operator|new
name|ServerSocket
argument_list|(
name|pn
argument_list|)
init|)
block|{
comment|//make sure the port can be opened.   Something MIGHT be running on it.
name|p
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|pn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Setting port for "
operator|+
name|fullName
operator|+
literal|" to "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//
block|}
block|}
name|applyNames
argument_list|(
name|fullName
argument_list|,
name|simpleName
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|public
specifier|static
name|void
name|updateAddressPort
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|port
parameter_list|)
throws|throws
name|NumberFormatException
throws|,
name|MalformedURLException
block|{
name|updateAddressPort
argument_list|(
name|o
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|updateAddressPort
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|String
name|address
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|BindingProvider
condition|)
block|{
name|address
operator|=
operator|(
operator|(
name|BindingProvider
operator|)
name|o
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|get
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Client
condition|)
block|{
name|Client
name|c
init|=
operator|(
name|Client
operator|)
name|o
decl_stmt|;
name|address
operator|=
name|c
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|!=
literal|null
operator|&&
name|address
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
comment|// http and https are ok
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|port
argument_list|,
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|setAddress
argument_list|(
name|o
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//maybe simple frontend proxy?
block|}
comment|// extra methods to help support the dynamic port allocations
specifier|public
specifier|static
name|void
name|setAddress
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|address
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|BindingProvider
condition|)
block|{
operator|(
operator|(
name|BindingProvider
operator|)
name|o
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
name|Client
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Client
condition|)
block|{
name|c
operator|=
operator|(
name|Client
operator|)
name|o
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|InvocationHandler
name|i
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|c
operator|=
operator|(
name|Client
operator|)
name|i
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getClient"
argument_list|)
operator|.
name|invoke
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|Method
name|m
init|=
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getClient"
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|c
operator|=
operator|(
name|Client
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

