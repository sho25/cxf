begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBusClientServerTestBase
extends|extends
name|AbstractClientServerTestBase
block|{
specifier|protected
specifier|static
name|Bus
name|staticBus
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|public
name|void
name|createBus
parameter_list|(
name|String
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|bus
operator|=
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createBus
argument_list|()
expr_stmt|;
block|}
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createBus
parameter_list|()
throws|throws
name|Exception
block|{
name|createBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Bus
name|getStaticBus
parameter_list|()
block|{
return|return
name|staticBus
return|;
block|}
specifier|public
specifier|static
name|Bus
name|createStaticBus
parameter_list|(
name|String
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|staticBus
operator|=
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|staticBus
operator|=
name|BusFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createBus
argument_list|()
expr_stmt|;
block|}
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|staticBus
argument_list|)
expr_stmt|;
return|return
name|staticBus
return|;
block|}
specifier|public
specifier|static
name|Bus
name|createStaticBus
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createStaticBus
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|deleteBus
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|bus
condition|)
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bus
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|deleteStaticBus
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|staticBus
condition|)
block|{
name|staticBus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|staticBus
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|Bus
name|getBus
parameter_list|()
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
return|return
name|staticBus
return|;
block|}
return|return
name|bus
return|;
block|}
specifier|protected
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|protected
name|HttpURLConnection
name|getHttpConnection
parameter_list|(
name|String
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|URLConnection
name|connection
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|instanceof
name|HttpURLConnection
argument_list|)
expr_stmt|;
return|return
operator|(
name|HttpURLConnection
operator|)
name|connection
return|;
block|}
specifier|protected
name|boolean
name|runClient
parameter_list|(
name|Runnable
name|clientImpl
parameter_list|,
name|long
name|timeOut
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|FutureTask
argument_list|<
name|?
argument_list|>
name|client
init|=
operator|new
name|FutureTask
argument_list|<
name|Object
argument_list|>
argument_list|(
name|clientImpl
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|tpe
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|10000L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|tpe
operator|.
name|execute
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|tpe
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|tpe
operator|.
name|awaitTermination
argument_list|(
name|timeOut
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|isDone
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

