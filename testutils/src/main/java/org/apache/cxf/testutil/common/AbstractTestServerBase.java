begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTestServerBase
extends|extends
name|Assert
block|{
name|boolean
name|inProcess
decl_stmt|;
comment|/**       * method implemented by test servers.  Initialise       * servants and publish endpoints etc.      *      */
specifier|protected
specifier|abstract
name|void
name|run
parameter_list|()
function_decl|;
specifier|protected
name|Logger
name|getLog
parameter_list|()
block|{
return|return
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|startInProcess
parameter_list|()
throws|throws
name|Exception
block|{
name|inProcess
operator|=
literal|true
expr_stmt|;
comment|//System.out.println("running server in-process");
name|run
argument_list|()
expr_stmt|;
comment|//System.out.println("signal ready");
name|ready
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|stopInProcess
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|verify
argument_list|(
name|getLog
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|inProcess
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"server passed"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"running server"
argument_list|)
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"signal ready"
argument_list|)
expr_stmt|;
name|ready
argument_list|()
expr_stmt|;
comment|// wait for a key press then shut
comment|// down the server
comment|//
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"stopping bus"
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|startFailed
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|verify
argument_list|(
name|getLog
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"server passed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ServerLauncher
operator|.
name|SERVER_FAILED
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"server stopped"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// emtpy
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// empty
block|}
specifier|protected
name|void
name|ready
parameter_list|()
block|{
if|if
condition|(
operator|!
name|inProcess
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"server ready"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|startFailed
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ServerLauncher
operator|.
name|SERVER_FAILED
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to facilitate assertions on server-side behaviour.      *      * @param log logger to use for diagnostics if assertions fail      * @return true if assertions hold      */
specifier|protected
name|boolean
name|verify
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|protected
specifier|static
name|String
name|allocatePort
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|cls
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|allocatePort
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|cls
argument_list|,
name|i
argument_list|)
return|;
block|}
block|}
end_class

end_unit

