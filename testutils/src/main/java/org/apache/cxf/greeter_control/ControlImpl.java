begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|types
operator|.
name|FaultLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|types
operator|.
name|StartGreeterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|greeter_control
operator|.
name|types
operator|.
name|StopGreeterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|serviceName
operator|=
literal|"ControlService"
argument_list|,
name|portName
operator|=
literal|"ControlPort"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.greeter_control.Control"
argument_list|,
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/greeter_control"
argument_list|)
specifier|public
class|class
name|ControlImpl
implements|implements
name|Control
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|ControlImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Object
name|implementor
decl_stmt|;
specifier|protected
name|String
name|address
decl_stmt|;
specifier|protected
name|Endpoint
name|endpoint
decl_stmt|;
specifier|protected
name|Bus
name|greeterBus
decl_stmt|;
specifier|public
name|void
name|setImplementor
parameter_list|(
name|Object
name|i
parameter_list|)
block|{
name|implementor
operator|=
name|i
expr_stmt|;
block|}
specifier|public
name|Object
name|getImplementor
parameter_list|()
block|{
return|return
name|implementor
return|;
block|}
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|a
parameter_list|)
block|{
name|address
operator|=
name|a
expr_stmt|;
block|}
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|boolean
name|startGreeter
parameter_list|(
name|String
name|cfgResource
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Starting greeter with cfgResource: "
operator|+
name|cfgResource
argument_list|)
expr_stmt|;
name|greeterBus
operator|=
literal|null
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|String
name|original
init|=
name|System
operator|.
name|clearProperty
argument_list|(
name|Configurer
operator|.
name|USER_CFG_FILE_PROPERTY_NAME
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cfgResource
operator|!=
literal|null
operator|&&
name|cfgResource
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|Configurer
operator|.
name|USER_CFG_FILE_PROPERTY_NAME
argument_list|,
name|cfgResource
argument_list|)
expr_stmt|;
block|}
name|String
name|a
init|=
name|address
operator|==
literal|null
condition|?
literal|"http://localhost:9020/SoapContext/GreeterPort"
else|:
name|address
decl_stmt|;
name|Object
name|i
init|=
name|implementor
operator|==
literal|null
condition|?
operator|new
name|GreeterImpl
argument_list|()
else|:
name|implementor
decl_stmt|;
name|endpoint
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
name|a
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Published greeter endpoint on bus with cfg file resource: "
operator|+
name|cfgResource
argument_list|)
expr_stmt|;
name|greeterBus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|Configurer
operator|.
name|USER_CFG_FILE_PROPERTY_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|original
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|Configurer
operator|.
name|USER_CFG_FILE_PROPERTY_NAME
argument_list|,
name|cfgResource
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|implementor
operator|instanceof
name|AbstractGreeterImpl
condition|)
block|{
operator|(
operator|(
name|AbstractGreeterImpl
operator|)
name|implementor
operator|)
operator|.
name|resetLastOnewayArg
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
operator|!=
name|greeterBus
return|;
block|}
specifier|public
name|boolean
name|stopGreeter
parameter_list|(
name|String
name|requestType
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Stopping greeter"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|endpoint
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Greeter endpoint"
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No endpoint active."
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|greeterBus
condition|)
block|{
name|greeterBus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|greeterBus
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setFaultLocation
parameter_list|(
name|FaultLocation
name|fl
parameter_list|)
block|{
name|List
argument_list|<
name|Interceptor
argument_list|>
name|interceptors
init|=
name|greeterBus
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
name|FaultThrowingInterceptor
name|fi
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Interceptor
name|i
range|:
name|interceptors
control|)
block|{
if|if
condition|(
name|i
operator|instanceof
name|FaultThrowingInterceptor
condition|)
block|{
name|interceptors
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Removed existing FaultThrowingInterceptor"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|fi
operator|=
operator|new
name|FaultThrowingInterceptor
argument_list|(
name|fl
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|fl
operator|.
name|getBefore
argument_list|()
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|fl
operator|.
name|getBefore
argument_list|()
argument_list|)
condition|)
block|{
name|fi
operator|.
name|addBefore
argument_list|(
name|fl
operator|.
name|getBefore
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|fl
operator|.
name|getAfter
argument_list|()
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|fl
operator|.
name|getAfter
argument_list|()
argument_list|)
condition|)
block|{
name|fi
operator|.
name|addAfter
argument_list|(
name|fl
operator|.
name|getAfter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|interceptors
operator|.
name|add
argument_list|(
name|fi
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Added FaultThrowingInterceptor to phase "
operator|+
name|fl
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|startGreeterAsync
parameter_list|(
name|String
name|requestType
parameter_list|,
name|AsyncHandler
argument_list|<
name|StartGreeterResponse
argument_list|>
name|asyncHandler
parameter_list|)
block|{
comment|// never called
return|return
literal|null
return|;
block|}
specifier|public
name|Response
argument_list|<
name|StartGreeterResponse
argument_list|>
name|startGreeterAsync
parameter_list|(
name|String
name|requestType
parameter_list|)
block|{
comment|// never called
return|return
literal|null
return|;
block|}
specifier|public
name|Response
argument_list|<
name|StopGreeterResponse
argument_list|>
name|stopGreeterAsync
parameter_list|(
name|String
name|requestType
parameter_list|)
block|{
comment|// never called
return|return
literal|null
return|;
block|}
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|stopGreeterAsync
parameter_list|(
name|String
name|requestType
parameter_list|,
name|AsyncHandler
argument_list|<
name|StopGreeterResponse
argument_list|>
name|asyncHandler
parameter_list|)
block|{
comment|// never called
return|return
literal|null
return|;
block|}
annotation|@
name|WebService
argument_list|(
name|serviceName
operator|=
literal|"GreeterService"
argument_list|,
name|portName
operator|=
literal|"GreeterPort"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.cxf.greeter_control.Greeter"
argument_list|,
name|targetNamespace
operator|=
literal|"http://cxf.apache.org/greeter_control"
argument_list|)
class|class
name|GreeterImpl
extends|extends
name|AbstractGreeterImpl
block|{     }
block|}
end_class

end_unit

