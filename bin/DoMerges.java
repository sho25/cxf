begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied. See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/* dkulp - Stupid little program I use to help merge changes from     trunk to the fixes branches.   It requires the command line version of     svn to be available on the path.   If using a git checkout, it also requires    the command line version of git on the path.     Basically, svn does all the work, but this little wrapper     thing will display the commit logs, prompt if you want to merge/block/ignore    each commit, prompt for commit (so you can resolve any conflicts first),     etc....     Yes - doing this in python itself (or perl or even bash itself or ruby or ...)     would probably be better.  However, I'd then need to spend time     learning python/ruby/etc... that I just don't have time to do right now.    What is more productive: Taking 30 minutes to bang this out in Java or    spending a couple days learning another language that would allow me to    bang it out in 15 minutes?     Explanation of commands:      [B]lock will permanently block the particular commit from being merged.      It won't ask again on subsequent runs of DoMerge.     [I]gnore ignores the commit for the current DoMerges run, but will ask     again the next time you DoMerges.  If you're not certain for a particular    commit use this option for someone else to determine on a later run.     [R]ecord formally records that a merge occurred, but it does *not*     actually merge the commit.  This is useful if you another tool to do    the merging (such as Git) but still wish to record a merge did occur.     [F]lush will permanently save all the [B]'s and [R]'s you've earlier made,     useful when you need to stop DoMerges (due to a missed commit or other     problem) before it's complete.  That way subsequent runs of DoMerges     won't go through the blocked/recorded items again.  (Flushes occur    automatically when DoMerges is finished running.)     [C]hanges will display the changes in the commit to help you decide the     appropriate action to take.  */
end_comment

begin_class
specifier|public
class|class
name|DoMerges
block|{
specifier|public
specifier|static
name|boolean
name|auto
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isGit
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|Pattern
name|jiraPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([A-Z]{2,10}+-\\d+)"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|propSource
decl_stmt|;
specifier|public
specifier|static
name|String
name|svnSource
decl_stmt|;
specifier|public
specifier|static
name|String
name|svnDest
decl_stmt|;
specifier|public
specifier|static
name|String
name|svnRoot
decl_stmt|;
specifier|public
specifier|static
name|String
name|gitSource
decl_stmt|;
specifier|public
specifier|static
name|Ranges
name|merged
init|=
operator|new
name|Ranges
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Ranges
name|blocked
init|=
operator|new
name|Ranges
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|String
name|maxRev
decl_stmt|;
specifier|static
class|class
name|Ranges
extends|extends
name|TreeSet
argument_list|<
name|Range
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|void
name|addRange
parameter_list|(
name|Range
name|r
parameter_list|)
block|{
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInRange
parameter_list|(
name|int
name|i
parameter_list|)
block|{
for|for
control|(
name|Range
name|r2
range|:
name|this
control|)
block|{
if|if
condition|(
name|r2
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|toProperty
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|propSource
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Range
name|r
range|:
name|this
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|optimize
parameter_list|(
name|Ranges
name|blocked
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|ignores
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Range
argument_list|>
name|it
init|=
name|this
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return;
block|}
name|Range
name|last
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Range
name|r
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|last
operator|.
name|max
operator|+
literal|1
operator|)
operator|==
name|r
operator|.
name|min
condition|)
block|{
name|last
operator|.
name|max
operator|=
name|r
operator|.
name|max
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|r
expr_stmt|;
block|}
comment|/*                 while (last.max< r.min) {                     if (!blocked.isInRange(last.max + 1)&& !ignores.contains(last.max + 1)) {                         last.max++;                     } else {                         break;                     }                 }                 if (last.max == r.min) {                     last.max = r.max;                     it.remove();                 } else {                     last = r;                 }                 */
block|}
block|}
block|}
specifier|static
class|class
name|Range
implements|implements
name|Comparable
argument_list|<
name|Range
argument_list|>
block|{
name|int
name|min
decl_stmt|,
name|max
decl_stmt|;
specifier|public
name|Range
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|min
operator|=
name|s
expr_stmt|;
name|max
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|Range
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|idx
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|max
operator|=
name|min
expr_stmt|;
block|}
else|else
block|{
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
operator|>=
name|min
operator|&&
name|i
operator|<=
name|max
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|min
operator|==
name|max
condition|)
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|min
argument_list|)
return|;
block|}
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|min
argument_list|)
operator|+
literal|"-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|max
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Range
name|o
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|min
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|min
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|static
name|void
name|waitFor
parameter_list|(
name|Process
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|waitFor
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|waitFor
parameter_list|(
name|Process
name|p
parameter_list|,
name|boolean
name|exit
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|p
operator|.
name|waitFor
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR!"
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exit
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|runProcess
parameter_list|(
name|Process
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|runProcess
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|runProcess
parameter_list|(
name|Process
name|p
parameter_list|,
name|boolean
name|exit
parameter_list|)
throws|throws
name|Exception
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|waitFor
argument_list|(
name|p
argument_list|,
name|exit
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|initSvnInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Process
name|p
decl_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"svn"
block|,
literal|"info"
block|,
literal|"."
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"info"
block|,
literal|"."
block|}
argument_list|)
expr_stmt|;
block|}
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"Repository Root: "
argument_list|)
condition|)
block|{
name|svnRoot
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|"Repository Root: "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"URL: "
argument_list|)
condition|)
block|{
name|svnDest
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"svn"
block|,
literal|"propget"
block|,
literal|"svnmerge-integrated"
block|,
literal|"."
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"propget"
block|,
literal|"svnmerge-integrated"
block|,
literal|"."
block|}
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|int
name|idx
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|propSource
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|svnSource
operator|=
name|svnRoot
operator|+
name|propSource
expr_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|gitSource
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|gitSource
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|gitSource
operator|=
name|gitSource
operator|.
name|substring
argument_list|(
name|gitSource
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|gitSource
operator|=
literal|"origin/"
operator|+
name|gitSource
expr_stmt|;
block|}
name|parseRevs
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"svn"
block|,
literal|"propget"
block|,
literal|"svnmerge-blocked"
block|,
literal|"."
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"propget"
block|,
literal|"svnmerge-blocked"
block|,
literal|"."
block|}
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|int
name|idx
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|parseRevs
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|,
name|blocked
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"info"
block|,
name|svnSource
block|}
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"Revision: "
argument_list|)
condition|)
block|{
name|maxRev
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|"Revision: "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|parseRevs
parameter_list|(
name|String
name|revs
parameter_list|,
name|Ranges
name|ranges
parameter_list|)
block|{
name|String
name|sp
index|[]
init|=
name|revs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sp
control|)
block|{
name|ranges
operator|.
name|addRange
argument_list|(
operator|new
name|Range
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|removeSvnMergeInfo
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isGit
condition|)
block|{
return|return;
block|}
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"st"
block|,
literal|"."
block|}
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'M'
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'C'
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'C'
condition|)
block|{
name|Process
name|p2
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"resolved"
block|,
name|line
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
operator|.
name|trim
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|p2
operator|.
name|waitFor
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"propdel"
block|,
literal|"svn:mergeinfo"
block|,
name|s
block|}
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|boolean
name|doCommit
parameter_list|(
name|int
name|ver
parameter_list|,
name|String
name|log
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
name|System
operator|.
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|char
name|c
init|=
name|auto
condition|?
literal|'Y'
else|:
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|'Y'
operator|&&
name|c
operator|!=
literal|'N'
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Commit:  [Y]es, or [N]o? "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
operator|(
name|char
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|'N'
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isGit
condition|)
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"resolved"
block|,
literal|"."
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|waitFor
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|File
name|file
init|=
name|createLog
argument_list|(
name|ver
argument_list|,
name|log
argument_list|)
decl_stmt|;
name|Process
name|p
decl_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"commit"
block|,
literal|"-a"
block|,
literal|"-F"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"commit"
block|,
literal|"-F"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"up"
block|}
argument_list|)
expr_stmt|;
block|}
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|File
name|getLogFile
parameter_list|(
name|String
name|action
parameter_list|,
name|String
name|vers
parameter_list|,
name|List
argument_list|<
name|VerLog
argument_list|>
name|records
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"domerge"
argument_list|,
literal|".log"
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" revisions "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|vers
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" via "
argument_list|)
expr_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|" git from\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|" svn from\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|svnSource
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|VerLog
name|l
range|:
name|records
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"........\n"
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|l
operator|.
name|log
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"--------"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"........\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
specifier|private
specifier|static
name|File
name|createLog
parameter_list|(
name|int
name|ver
parameter_list|,
name|String
name|log
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"domerge"
argument_list|,
literal|".log"
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|log
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"Merged revisions "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|ver
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" via "
argument_list|)
expr_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|" git cherry-pick from\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|" svn merge from\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|svnSource
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"........\n"
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"--------"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"........\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
specifier|public
specifier|static
name|void
name|changes
parameter_list|(
name|int
name|ver
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|p
decl_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|String
name|id
init|=
name|getGitVersion
argument_list|(
name|ver
argument_list|)
decl_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"diff"
block|,
name|id
operator|+
literal|"^"
block|,
name|id
block|,
name|gitSource
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"diff"
block|,
literal|"-c"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|ver
argument_list|)
block|,
name|svnRoot
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getGitVersion
parameter_list|(
name|int
name|ver
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|p
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
name|String
name|line
decl_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"svn"
block|,
literal|"find-rev"
block|,
literal|"r"
operator|+
name|ver
block|,
name|gitSource
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|String
name|version
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
operator|&&
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|version
operator|=
name|line
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|waitFor
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|version
return|;
block|}
specifier|public
specifier|static
name|void
name|flush
parameter_list|(
name|List
argument_list|<
name|VerLog
argument_list|>
name|blocks
parameter_list|,
name|List
argument_list|<
name|VerLog
argument_list|>
name|records
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|p
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
name|String
name|line
decl_stmt|;
name|File
name|checkout
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"svn"
block|,
literal|"dcommit"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|String
name|version
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
operator|&&
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|version
operator|=
name|line
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|waitFor
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|records
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkout
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"gitsvn"
argument_list|,
literal|".co"
argument_list|)
expr_stmt|;
name|checkout
operator|.
name|delete
argument_list|()
expr_stmt|;
specifier|final
name|File
name|deleteDir
init|=
name|checkout
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|deleteDirectory
argument_list|(
name|deleteDir
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"co"
block|,
literal|"--depth"
block|,
literal|"empty"
block|,
name|svnDest
block|,
name|checkout
operator|.
name|toString
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|records
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|ver
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|VerLog
name|s
range|:
name|records
control|)
block|{
if|if
condition|(
name|ver
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ver
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|ver
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|s
operator|.
name|ver
argument_list|)
argument_list|)
expr_stmt|;
name|merged
operator|.
name|addRange
argument_list|(
operator|new
name|Range
argument_list|(
name|s
operator|.
name|ver
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Recording "
operator|+
name|ver
argument_list|)
expr_stmt|;
name|File
name|logF
init|=
name|getLogFile
argument_list|(
literal|"Recording"
argument_list|,
name|ver
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|VerLog
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"propset"
block|,
literal|"svnmerge-integrated"
block|,
name|merged
operator|.
name|toProperty
argument_list|()
block|,
name|checkout
operator|.
name|toString
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"commit"
block|,
literal|"-F"
block|,
name|logF
operator|.
name|toString
argument_list|()
block|,
name|checkout
operator|.
name|toString
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|ver
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|VerLog
name|s
range|:
name|blocks
control|)
block|{
if|if
condition|(
name|ver
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ver
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|ver
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|s
operator|.
name|ver
argument_list|)
argument_list|)
expr_stmt|;
name|blocked
operator|.
name|addRange
argument_list|(
operator|new
name|Range
argument_list|(
name|s
operator|.
name|ver
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Blocking "
operator|+
name|ver
argument_list|)
expr_stmt|;
name|File
name|logF
init|=
name|getLogFile
argument_list|(
literal|"Blocking"
argument_list|,
name|ver
operator|.
name|toString
argument_list|()
argument_list|,
name|blocks
argument_list|)
decl_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"propset"
block|,
literal|"svnmerge-blocked"
block|,
name|blocked
operator|.
name|toProperty
argument_list|()
block|,
name|checkout
operator|.
name|toString
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"commit"
block|,
literal|"-F"
block|,
name|logF
operator|.
name|toString
argument_list|()
block|,
name|checkout
operator|.
name|toString
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"up"
block|}
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|blocks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|records
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doUpdate
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isGit
condition|)
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"pull"
block|}
argument_list|)
decl_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"svn"
block|,
literal|"rebase"
block|}
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"up"
block|,
literal|"-r"
block|,
literal|"head"
block|}
argument_list|)
decl_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|Integer
argument_list|>
name|getAvailableUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|verList
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Process
name|p
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
name|String
name|line
decl_stmt|;
name|String
name|min
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|merged
operator|.
name|first
argument_list|()
operator|.
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"svn"
block|,
literal|"log"
block|,
literal|"--oneline"
block|,
literal|"-r"
block|,
name|min
operator|+
literal|":"
operator|+
name|maxRev
block|,
name|gitSource
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"log"
block|,
literal|"--quiet"
block|,
literal|"-r"
block|,
name|min
operator|+
literal|":"
operator|+
name|maxRev
block|,
name|svnSource
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'r'
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|ver
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|merged
operator|.
name|isInRange
argument_list|(
name|ver
argument_list|)
operator|&&
operator|!
name|blocked
operator|.
name|isInRange
argument_list|(
name|ver
argument_list|)
condition|)
block|{
name|verList
operator|.
name|add
argument_list|(
name|ver
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
return|return
name|verList
return|;
block|}
specifier|public
specifier|static
name|String
name|getLog
parameter_list|(
name|Integer
name|ver
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|jiras
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|p
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
name|String
name|line
decl_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"svn"
block|,
literal|"log"
block|,
literal|"-r"
block|,
name|ver
operator|.
name|toString
argument_list|()
block|,
name|gitSource
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"log"
block|,
literal|"-r"
block|,
name|ver
operator|.
name|toString
argument_list|()
block|,
name|svnRoot
block|}
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|StringWriter
name|swriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
name|swriter
argument_list|)
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|Matcher
name|m
init|=
name|jiraPattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|jiras
operator|.
name|add
argument_list|(
name|m
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|swriter
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|doMerge
parameter_list|(
name|int
name|ver
parameter_list|,
name|String
name|log
parameter_list|,
name|List
argument_list|<
name|VerLog
argument_list|>
name|records
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|p
decl_stmt|;
if|if
condition|(
name|isGit
condition|)
block|{
name|String
name|id
init|=
name|getGitVersion
argument_list|(
name|ver
argument_list|)
decl_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"cherry-pick"
block|,
literal|"--no-commit"
block|,
name|id
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"merge"
block|,
literal|"--non-interactive"
block|,
literal|"-c"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|ver
argument_list|)
block|,
name|svnSource
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|runProcess
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isGit
condition|)
block|{
name|removeSvnMergeInfo
argument_list|()
expr_stmt|;
name|Range
name|r
init|=
operator|new
name|Range
argument_list|(
name|ver
argument_list|)
decl_stmt|;
name|merged
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"svn"
block|,
literal|"propset"
block|,
literal|"svnmerge-integrated"
block|,
name|merged
operator|.
name|toProperty
argument_list|()
block|,
literal|"."
block|}
argument_list|)
expr_stmt|;
name|removeSvnMergeInfo
argument_list|()
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doCommit
argument_list|(
name|ver
argument_list|,
name|log
argument_list|)
condition|)
block|{
name|merged
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"status"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|doCommit
argument_list|(
name|ver
argument_list|,
name|log
argument_list|)
condition|)
block|{
name|records
operator|.
name|add
argument_list|(
operator|new
name|VerLog
argument_list|(
name|ver
argument_list|,
name|log
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|VerLog
block|{
name|int
name|ver
decl_stmt|;
name|String
name|log
decl_stmt|;
specifier|public
name|VerLog
parameter_list|(
name|int
name|v
parameter_list|,
name|String
name|l
parameter_list|)
block|{
name|ver
operator|=
name|v
expr_stmt|;
name|log
operator|=
name|l
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"svnmerge-commit-message.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//make sure we delete this to not cause confusion
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|int
name|onlyVersion
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
literal|"-auto"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|auto
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|onlyVersion
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|file
operator|=
operator|new
name|File
argument_list|(
literal|".git"
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|isGit
operator|=
literal|true
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updating directory"
argument_list|)
expr_stmt|;
name|doUpdate
argument_list|()
expr_stmt|;
name|initSvnInfo
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|verList
init|=
name|getAvailableUpdates
argument_list|()
decl_stmt|;
if|if
condition|(
name|onlyVersion
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|verList
operator|.
name|contains
argument_list|(
name|onlyVersion
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Version: "
operator|+
name|onlyVersion
operator|+
literal|" does not need merging"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|verList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|verList
operator|.
name|add
argument_list|(
name|onlyVersion
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Merging versions ("
operator|+
name|verList
operator|.
name|size
argument_list|()
operator|+
literal|"): "
operator|+
name|verList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|VerLog
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|VerLog
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VerLog
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<
name|VerLog
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|ignores
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jiras
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Integer
name|verArray
index|[]
init|=
name|verList
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|verList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cur
init|=
literal|0
init|;
name|cur
operator|<
name|verArray
operator|.
name|length
condition|;
name|cur
operator|++
control|)
block|{
name|jiras
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|ver
init|=
name|verArray
index|[
name|cur
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Merging: "
operator|+
name|ver
operator|+
literal|" ("
operator|+
operator|(
name|cur
operator|+
literal|1
operator|)
operator|+
literal|"/"
operator|+
name|verList
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"http://svn.apache.org/viewvc?view=revision&revision="
operator|+
name|ver
argument_list|)
expr_stmt|;
name|String
name|log
init|=
name|getLog
argument_list|(
name|ver
argument_list|,
name|jiras
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|jiras
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"https://issues.apache.org/jira/browse/"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|log
argument_list|)
expr_stmt|;
while|while
condition|(
name|System
operator|.
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|char
name|c
init|=
name|auto
condition|?
literal|'M'
else|:
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|'M'
operator|&&
name|c
operator|!=
literal|'B'
operator|&&
name|c
operator|!=
literal|'I'
operator|&&
name|c
operator|!=
literal|'R'
operator|&&
name|c
operator|!=
literal|'F'
operator|&&
name|c
operator|!=
literal|'C'
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"[M]erge, [B]lock, or [I]gnore, [R]ecord only, [F]lush, [C]hanges? "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
operator|(
name|char
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'M'
case|:
name|doMerge
argument_list|(
name|ver
argument_list|,
name|log
argument_list|,
name|records
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'B'
case|:
name|blocks
operator|.
name|add
argument_list|(
operator|new
name|VerLog
argument_list|(
name|ver
argument_list|,
name|log
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'R'
case|:
name|records
operator|.
name|add
argument_list|(
operator|new
name|VerLog
argument_list|(
name|ver
argument_list|,
name|log
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|flush
argument_list|(
name|blocks
argument_list|,
name|records
argument_list|)
expr_stmt|;
name|cur
operator|--
expr_stmt|;
break|break;
case|case
literal|'C'
case|:
name|changes
argument_list|(
name|ver
argument_list|)
expr_stmt|;
name|cur
operator|--
expr_stmt|;
break|break;
case|case
literal|'I'
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ignoring"
argument_list|)
expr_stmt|;
name|ignores
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|ver
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|optimizeRanges
argument_list|(
name|ignores
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|blocks
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|optimizeRanges
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|ignores
parameter_list|)
block|{
name|merged
operator|.
name|optimize
argument_list|(
name|blocked
argument_list|,
name|ignores
argument_list|)
expr_stmt|;
name|blocked
operator|.
name|optimize
argument_list|(
name|merged
argument_list|,
name|ignores
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|getCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argLine
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isWindows
argument_list|()
condition|)
block|{
name|argLine
operator|.
name|add
argument_list|(
literal|"cmd.exe"
argument_list|)
expr_stmt|;
name|argLine
operator|.
name|add
argument_list|(
literal|"/c"
argument_list|)
expr_stmt|;
block|}
name|argLine
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|argLine
control|)
block|{
if|if
condition|(
name|b
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"Running \""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"\"..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|argLine
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argLine
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isWindows
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"windows"
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|void
name|deleteDirectory
parameter_list|(
name|File
name|d
parameter_list|)
block|{
name|String
index|[]
name|list
init|=
name|d
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|list
index|[
name|i
index|]
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
if|if
condition|(
name|isWindows
argument_list|()
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// Ignore Exception
block|}
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

