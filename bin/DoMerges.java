begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied. See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/* dkulp - Stupid little program I use to help merge changes from    trunk to the fixes branches.   It requires the command line version of    svn to be available on the path.   If using a git checkout, it also requires    the command line version of git on the path.     Basically, git does all the work, but this little wrapper    thing will display the commit logs, prompt if you want to merge/block/ignore    each commit, prompt for commit (so you can resolve any conflicts first),    etc....     Yes - doing this in python itself (or perl or even bash itself or ruby or ...)    would probably be better.  However, I'd then need to spend time    learning python/ruby/etc... that I just don't have time to do right now.    What is more productive: Taking 30 minutes to bang this out in Java or    spending a couple days learning another language that would allow me to    bang it out in 15 minutes?     Explanation of commands:     [B]lock will permanently block the particular commit from being merged.    It won't ask again on subsequent runs of DoMerge.     [I]gnore ignores the commit for the current DoMerges run, but will ask    again the next time you DoMerges.  If you're not certain for a particular    commit use this option for someone else to determine on a later run.     [R]ecord formally records that a merge occurred, but it does *not*    actually merge the commit.  This is useful if you another tool to do    the merging but still wish to record a merge did occur.     [F]lush will permanently save all the [B]'s and [R]'s you've earlier made,    useful when you need to stop DoMerges (due to a missed commit or other    problem) before it's complete.  That way subsequent runs of DoMerges    won't go through the blocked/recorded items again.  (Flushes occur    automatically when DoMerges is finished running.)     [C]hanges will display the changes in the commit to help you decide the    appropriate action to take.  */
end_comment

begin_class
specifier|public
class|class
name|DoMerges
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MERGEINFOFILE
init|=
literal|".gitmergeinfo"
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|auto
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|Pattern
name|jiraPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([A-Z]{2,10}+-\\d+)"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|username
decl_stmt|;
specifier|public
specifier|static
name|String
name|fromBranch
decl_stmt|;
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|records
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|patchIds
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
specifier|static
class|class
name|ToFrom
block|{
specifier|final
name|String
name|from
decl_stmt|;
specifier|final
name|String
name|to
decl_stmt|;
specifier|public
name|ToFrom
parameter_list|(
name|String
name|t
parameter_list|,
name|String
name|f
parameter_list|)
block|{
name|to
operator|=
name|t
expr_stmt|;
name|from
operator|=
name|f
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ToFrom
argument_list|>
name|pathMaps
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|static
name|int
name|waitFor
parameter_list|(
name|Process
name|p
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|waitFor
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|static
name|int
name|waitFor
parameter_list|(
name|Process
name|p
parameter_list|,
name|boolean
name|exit
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
name|p
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR!"
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exit
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
specifier|static
name|int
name|runProcess
parameter_list|(
name|Process
name|p
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|runProcess
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|static
name|int
name|runProcess
parameter_list|(
name|Process
name|p
parameter_list|,
name|boolean
name|exit
parameter_list|)
throws|throws
name|Exception
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
return|return
name|waitFor
argument_list|(
name|p
argument_list|,
name|exit
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|doCommit
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
name|System
operator|.
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|char
name|c
init|=
name|auto
condition|?
literal|'Y'
else|:
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|'Y'
operator|&&
name|c
operator|!=
literal|'N'
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Commit:  [Y]es, or [N]o? "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
operator|(
name|char
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|'N'
condition|)
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"reset"
block|,
literal|"--hard"
block|}
argument_list|)
decl_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"commit"
block|,
literal|"--no-edit"
block|,
literal|"-a"
block|}
argument_list|)
decl_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|void
name|changes
parameter_list|(
name|String
name|ver
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"show"
block|,
name|ver
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|flush
parameter_list|()
throws|throws
name|Exception
block|{
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|MERGEINFOFILE
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|fromBranch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
for|for
control|(
name|ToFrom
name|ent
range|:
name|pathMaps
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"A "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|ent
operator|.
name|from
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|ent
operator|.
name|to
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|records
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"commit"
block|,
literal|"-m"
block|,
literal|"Recording .gitmergeinfo Changes"
block|,
name|MERGEINFOFILE
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"pull"
block|,
literal|"--rebase"
block|}
argument_list|)
decl_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|MERGEINFOFILE
argument_list|)
decl_stmt|;
name|records
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|MERGEINFOFILE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|fromBranch
operator|=
name|line
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"A "
argument_list|)
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|from
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|to
init|=
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|pathMaps
operator|.
name|add
argument_list|(
operator|new
name|ToFrom
argument_list|(
name|to
argument_list|,
name|from
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|records
operator|.
name|add
argument_list|(
name|line
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|file
operator|=
operator|new
name|File
argument_list|(
literal|"patch-info"
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
literal|"patch-info"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|patchIds
operator|.
name|add
argument_list|(
name|line
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAvailableUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|verList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Process
name|p
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
name|String
name|line
decl_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"cherry"
block|,
literal|"HEAD"
block|,
name|fromBranch
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'+'
condition|)
block|{
name|String
name|ver
init|=
name|line
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|records
operator|.
name|contains
argument_list|(
literal|"B "
operator|+
name|ver
argument_list|)
operator|&&
operator|!
name|records
operator|.
name|contains
argument_list|(
literal|"M "
operator|+
name|ver
argument_list|)
condition|)
block|{
name|verList
operator|.
name|add
argument_list|(
name|ver
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
return|return
name|verList
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|getGitLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|BufferedReader
name|reader
decl_stmt|;
name|String
name|line
decl_stmt|;
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"log"
block|,
name|fromBranch
operator|+
literal|"..HEAD"
block|}
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|map
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|line
operator|.
name|startsWith
argument_list|(
literal|"commit "
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|add
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|line
operator|!=
literal|null
operator|&&
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|' '
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|add
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getLog
parameter_list|(
name|String
name|ver
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|jiras
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|p
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
name|String
name|line
decl_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"log"
block|,
literal|"--pretty=medium"
block|,
literal|"-n"
block|,
literal|"1"
block|,
name|ver
block|}
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"commit "
argument_list|)
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Matcher
name|m
init|=
name|jiraPattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|jiras
operator|.
name|add
argument_list|(
name|m
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
return|return
name|lines
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|lines
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|doMerge
parameter_list|(
name|String
name|ver
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"cherry-pick"
block|,
literal|"-x"
block|,
name|ver
block|}
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|runProcess
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"status"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|doCommit
argument_list|()
condition|)
block|{
name|records
operator|.
name|add
argument_list|(
literal|"M "
operator|+
name|ver
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|oldPatchId
init|=
name|getPatchId
argument_list|(
name|ver
argument_list|)
decl_stmt|;
name|String
name|newPatchId
init|=
name|getPatchId
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldPatchId
operator|.
name|equals
argument_list|(
name|newPatchId
argument_list|)
condition|)
block|{
name|records
operator|.
name|add
argument_list|(
literal|"M "
operator|+
name|ver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|doMappedMerge
parameter_list|(
name|String
name|ver
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"format-patch"
block|,
literal|"--stdout"
block|,
literal|"-1"
block|,
literal|"-k"
block|,
name|ver
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outputFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"merge"
argument_list|,
literal|".patch"
argument_list|)
decl_stmt|;
name|outputFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|outputFile
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"--- "
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"+++ "
argument_list|)
operator|)
operator|&&
name|line
operator|.
name|length
argument_list|()
operator|>
literal|7
condition|)
block|{
name|String
name|file
init|=
name|line
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
for|for
control|(
name|ToFrom
name|ent
range|:
name|pathMaps
control|)
block|{
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
name|ent
operator|.
name|from
argument_list|)
condition|)
block|{
name|String
name|newf
init|=
name|file
operator|.
name|replace
argument_list|(
name|ent
operator|.
name|from
argument_list|,
name|ent
operator|.
name|to
argument_list|)
decl_stmt|;
name|File
name|fo
init|=
operator|new
name|File
argument_list|(
name|newf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fo
operator|.
name|exists
argument_list|()
operator|&&
name|fo
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
operator|+
name|newf
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|//System.out.println("newl: " + line);
block|}
name|writer
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|waitFor
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"am"
block|,
literal|"-k"
block|,
name|outputFile
operator|.
name|getCanonicalPath
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitFor
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|getCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"status"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|runProcess
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|doCommit
argument_list|()
condition|)
block|{
name|records
operator|.
name|add
argument_list|(
literal|"M "
operator|+
name|ver
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|records
operator|.
name|add
argument_list|(
literal|"M "
operator|+
name|ver
argument_list|)
expr_stmt|;
block|}
name|outputFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getPatchId
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|commands
init|=
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"show"
block|,
name|id
block|}
decl_stmt|;
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|commands
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|p
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|commands
operator|=
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"patch-id"
block|}
expr_stmt|;
name|Process
name|p2
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|commands
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|p2
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
init|=
name|in
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|BufferedReader
name|r2
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p2
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|id
operator|=
name|r2
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|p2
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|id
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|private
specifier|static
name|String
name|getUserName
parameter_list|()
throws|throws
name|Exception
block|{
name|BufferedReader
name|reader
decl_stmt|;
name|String
name|line
decl_stmt|;
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"config"
block|,
literal|"user.name"
block|}
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
return|return
name|line
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|a
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|".git-commit-message.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//make sure we delete this to not cause confusion
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updating directory"
argument_list|)
expr_stmt|;
name|doUpdate
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|a
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|check
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|get
init|=
name|args
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"-auto"
operator|.
name|equals
argument_list|(
name|get
argument_list|)
condition|)
block|{
name|auto
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-me"
operator|.
name|equals
argument_list|(
name|get
argument_list|)
condition|)
block|{
name|username
operator|=
name|getUserName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-user"
operator|.
name|equals
argument_list|(
name|get
argument_list|)
condition|)
block|{
name|username
operator|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|check
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|verList
init|=
name|getAvailableUpdates
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|check
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|check
control|)
block|{
if|if
condition|(
name|verList
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|newList
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|verList
operator|=
name|newList
expr_stmt|;
block|}
if|if
condition|(
name|verList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Nothing needs to be merged"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Merging versions ("
operator|+
name|verList
operator|.
name|size
argument_list|()
operator|+
literal|"): "
operator|+
name|verList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|gitLogs
init|=
literal|null
decl_stmt|;
comment|//with GIT, we can relatively quickly check the logs on the current branch
comment|//and compare with what should be merged and check if things are already merged
name|gitLogs
operator|=
name|getGitLogs
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jiras
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cur
init|=
literal|0
init|;
name|cur
operator|<
name|verList
operator|.
name|size
argument_list|()
condition|;
name|cur
operator|++
control|)
block|{
name|jiras
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|ver
init|=
name|verList
operator|.
name|get
argument_list|(
name|cur
argument_list|)
decl_stmt|;
name|String
index|[]
name|logLines
init|=
name|getLog
argument_list|(
name|ver
argument_list|,
name|jiras
argument_list|)
decl_stmt|;
if|if
condition|(
name|logLines
operator|.
name|length
operator|>
literal|1
operator|&&
name|username
operator|!=
literal|null
operator|&&
operator|!
name|logLines
index|[
literal|0
index|]
operator|.
name|contains
argument_list|(
name|username
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Merging: "
operator|+
name|ver
operator|+
literal|" ("
operator|+
operator|(
name|cur
operator|+
literal|1
operator|)
operator|+
literal|"/"
operator|+
name|verList
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|//System.out.println("http://svn.apache.org/viewvc?view=revision&revision=" + ver);
for|for
control|(
name|String
name|s
range|:
name|jiras
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"https://issues.apache.org/jira/browse/"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|log
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|isBlocked
argument_list|(
name|logLines
argument_list|)
condition|)
block|{
name|records
operator|.
name|add
argument_list|(
literal|"B "
operator|+
name|ver
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|String
name|s
range|:
name|logLines
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|char
name|c
init|=
name|auto
condition|?
literal|'M'
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|checkPatchId
argument_list|(
name|ver
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|checkAlreadyMerged
argument_list|(
name|ver
argument_list|,
name|gitLogs
argument_list|,
name|logLines
argument_list|)
condition|)
block|{
name|c
operator|=
literal|'R'
expr_stmt|;
block|}
while|while
condition|(
name|System
operator|.
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|c
operator|!=
literal|'M'
operator|&&
name|c
operator|!=
literal|'A'
operator|&&
name|c
operator|!=
literal|'B'
operator|&&
name|c
operator|!=
literal|'I'
operator|&&
name|c
operator|!=
literal|'R'
operator|&&
name|c
operator|!=
literal|'F'
operator|&&
name|c
operator|!=
literal|'C'
operator|&&
name|c
operator|!=
literal|'P'
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"[M]erge, [A]dvancedMerge, [B]lock, or [I]gnore, [R]ecord only, [F]lush, [C]hanges? "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
operator|(
name|char
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'M'
case|:
name|doMerge
argument_list|(
name|ver
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'A'
case|:
name|doMappedMerge
argument_list|(
name|ver
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'P'
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Patch Id: "
operator|+
name|getPatchId
argument_list|(
name|ver
argument_list|)
argument_list|)
expr_stmt|;
name|cur
operator|--
expr_stmt|;
break|break;
case|case
literal|'B'
case|:
name|records
operator|.
name|add
argument_list|(
literal|"B "
operator|+
name|ver
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'R'
case|:
name|records
operator|.
name|add
argument_list|(
literal|"M "
operator|+
name|ver
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|flush
argument_list|()
expr_stmt|;
name|cur
operator|--
expr_stmt|;
break|break;
case|case
literal|'C'
case|:
name|changes
argument_list|(
name|ver
argument_list|)
expr_stmt|;
name|cur
operator|--
expr_stmt|;
break|break;
case|case
literal|'I'
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ignoring"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isBlocked
parameter_list|(
name|String
index|[]
name|logLines
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|logLines
control|)
block|{
if|if
condition|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Recording .gitmergeinfo Changes"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"[maven-release-plugin] prepare"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkPatchId
parameter_list|(
name|String
name|ver
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|patchIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|pid
init|=
name|getPatchId
argument_list|(
name|ver
argument_list|)
decl_stmt|;
if|if
condition|(
name|patchIds
operator|.
name|contains
argument_list|(
literal|"B "
operator|+
name|pid
argument_list|)
condition|)
block|{
name|records
operator|.
name|add
argument_list|(
literal|"B "
operator|+
name|ver
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Already blocked: "
operator|+
name|ver
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|patchIds
operator|.
name|contains
argument_list|(
literal|"M "
operator|+
name|pid
argument_list|)
condition|)
block|{
name|records
operator|.
name|add
argument_list|(
literal|"M "
operator|+
name|ver
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Already merged: "
operator|+
name|ver
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkAlreadyMerged
parameter_list|(
name|String
name|ver
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|gitLogs
parameter_list|,
name|String
index|[]
name|logLines
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|gitLogs
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|matchingLogs
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
index|[]
name|f
range|:
name|gitLogs
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ll
init|=
name|compareLogs
argument_list|(
name|f
argument_list|,
name|logLines
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ll
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|matchingLogs
operator|.
name|add
argument_list|(
name|ll
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|matchingLogs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//everything in the source log is in a log on this branch, let's prompt to record the merge
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found possible commit(s) already on branch:"
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|f
range|:
name|matchingLogs
control|)
block|{
for|for
control|(
name|String
name|s
range|:
name|f
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------------"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|System
operator|.
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|char
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|'Y'
operator|&&
name|c
operator|!=
literal|'N'
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Record as merged [Y/N]? "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
operator|(
name|char
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|'Y'
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|compareLogs
parameter_list|(
name|String
index|[]
name|f
parameter_list|,
name|String
index|[]
name|logLines
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|onBranch
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|f
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|f
control|)
block|{
if|if
condition|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Conflicts:"
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|' '
operator|&&
operator|!
name|s
operator|.
name|contains
argument_list|(
literal|"git-svn-id"
argument_list|)
condition|)
block|{
name|onBranch
operator|.
name|add
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|ll
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|logLines
control|)
block|{
if|if
condition|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|onBranch
operator|.
name|remove
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
operator|&&
operator|!
name|s
operator|.
name|startsWith
argument_list|(
literal|"Author: "
argument_list|)
operator|&&
operator|!
name|s
operator|.
name|startsWith
argument_list|(
literal|"Date: "
argument_list|)
operator|&&
operator|!
name|s
operator|.
name|contains
argument_list|(
literal|"git-svn-id"
argument_list|)
condition|)
block|{
name|ll
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ll
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|getCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argLine
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isWindows
argument_list|()
condition|)
block|{
name|argLine
operator|.
name|add
argument_list|(
literal|"cmd.exe"
argument_list|)
expr_stmt|;
name|argLine
operator|.
name|add
argument_list|(
literal|"/c"
argument_list|)
expr_stmt|;
block|}
name|argLine
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|argLine
control|)
block|{
if|if
condition|(
name|b
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"Running \""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"\"..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|argLine
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argLine
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isWindows
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"windows"
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

