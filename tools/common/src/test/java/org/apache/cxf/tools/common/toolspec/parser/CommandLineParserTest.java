begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|ToolSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|CommandLineParserTest
block|{
specifier|private
name|CommandLineParser
name|parser
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tsSource
init|=
literal|"/org/apache/cxf/tools/common/toolspec/parser/resources/testtool.xml"
decl_stmt|;
name|ToolSpec
name|toolspec
init|=
operator|new
name|ToolSpec
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|tsSource
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|parser
operator|=
operator|new
name|CommandLineParser
argument_list|(
name|toolspec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-r"
block|,
literal|"-n"
block|,
literal|"test"
block|,
literal|"arg1"
block|}
decl_stmt|;
name|CommandDocument
name|result
init|=
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testValidArguments Failed"
argument_list|,
literal|"test"
argument_list|,
name|result
operator|.
name|getParameter
argument_list|(
literal|"namespace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidArgumentValue
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-n"
block|,
literal|"test@"
block|,
literal|"arg1"
block|}
decl_stmt|;
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testInvalidArgumentValue failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadUsageException
name|ex
parameter_list|)
block|{
name|Object
index|[]
name|errors
init|=
name|ex
operator|.
name|getErrors
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testInvalidArgumentValue failed"
argument_list|,
literal|1
argument_list|,
name|errors
operator|.
name|length
argument_list|)
expr_stmt|;
name|CommandLineError
name|error
init|=
operator|(
name|CommandLineError
operator|)
name|errors
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected InvalidArgumentValue error"
argument_list|,
name|error
operator|instanceof
name|ErrorVisitor
operator|.
name|UserError
argument_list|)
expr_stmt|;
name|ErrorVisitor
operator|.
name|UserError
name|userError
init|=
operator|(
name|ErrorVisitor
operator|.
name|UserError
operator|)
name|error
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid argument value message incorrect"
argument_list|,
literal|"-n has invalid character!"
argument_list|,
name|userError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidArgumentEnumValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-r"
block|,
literal|"-e"
block|,
literal|"true"
block|,
literal|"arg1"
block|}
decl_stmt|;
name|CommandDocument
name|result
init|=
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testValidArguments Failed"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getParameter
argument_list|(
literal|"enum"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidArgumentEnumValue
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-e"
block|,
literal|"wrongvalue"
block|}
decl_stmt|;
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testInvalidArgumentEnumValue failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadUsageException
name|ex
parameter_list|)
block|{
name|Object
index|[]
name|errors
init|=
name|ex
operator|.
name|getErrors
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testInvalidArgumentEnumValu failed"
argument_list|,
literal|1
argument_list|,
name|errors
operator|.
name|length
argument_list|)
expr_stmt|;
name|CommandLineError
name|error
init|=
operator|(
name|CommandLineError
operator|)
name|errors
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected InvalidArgumentEnumValu error"
argument_list|,
name|error
operator|instanceof
name|ErrorVisitor
operator|.
name|UserError
argument_list|)
expr_stmt|;
name|ErrorVisitor
operator|.
name|UserError
name|userError
init|=
operator|(
name|ErrorVisitor
operator|.
name|UserError
operator|)
name|error
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid enum argument value message incorrect"
argument_list|,
literal|"-e wrongvalue not in the enumeration value list!"
argument_list|,
name|userError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidMixedArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-v"
block|,
literal|"-r"
block|,
literal|"-n"
block|,
literal|"test"
block|,
literal|"arg1"
block|}
decl_stmt|;
name|CommandDocument
name|result
init|=
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testValidMissedArguments Failed"
argument_list|,
literal|"test"
argument_list|,
name|result
operator|.
name|getParameter
argument_list|(
literal|"namespace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidOption
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-n"
block|,
literal|"-r"
block|,
literal|"arg1"
block|}
decl_stmt|;
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testInvalidOption failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadUsageException
name|ex
parameter_list|)
block|{
name|Object
index|[]
name|errors
init|=
name|ex
operator|.
name|getErrors
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testInvalidOption failed"
argument_list|,
literal|1
argument_list|,
name|errors
operator|.
name|length
argument_list|)
expr_stmt|;
name|CommandLineError
name|error
init|=
operator|(
name|CommandLineError
operator|)
name|errors
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected InvalidOption error"
argument_list|,
name|error
operator|instanceof
name|ErrorVisitor
operator|.
name|InvalidOption
argument_list|)
expr_stmt|;
name|ErrorVisitor
operator|.
name|InvalidOption
name|option
init|=
operator|(
name|ErrorVisitor
operator|.
name|InvalidOption
operator|)
name|error
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid option incorrect"
argument_list|,
literal|"-n"
argument_list|,
name|option
operator|.
name|getOptionSwitch
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid option message incorrect"
argument_list|,
literal|"Invalid option: -n is missing its associated argument"
argument_list|,
name|option
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingOption
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-n"
block|,
literal|"test"
block|,
literal|"arg1"
block|}
decl_stmt|;
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testMissingOption failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadUsageException
name|ex
parameter_list|)
block|{
name|Object
index|[]
name|errors
init|=
name|ex
operator|.
name|getErrors
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testInvalidOption failed"
argument_list|,
literal|1
argument_list|,
name|errors
operator|.
name|length
argument_list|)
expr_stmt|;
name|CommandLineError
name|error
init|=
operator|(
name|CommandLineError
operator|)
name|errors
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected MissingOption error"
argument_list|,
name|error
operator|instanceof
name|ErrorVisitor
operator|.
name|MissingOption
argument_list|)
expr_stmt|;
name|ErrorVisitor
operator|.
name|MissingOption
name|option
init|=
operator|(
name|ErrorVisitor
operator|.
name|MissingOption
operator|)
name|error
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Missing option incorrect"
argument_list|,
literal|"r"
argument_list|,
name|option
operator|.
name|getOptionSwitch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingArgument
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-n"
block|,
literal|"test"
block|,
literal|"-r"
block|}
decl_stmt|;
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testMissingArgument failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadUsageException
name|ex
parameter_list|)
block|{
name|Object
index|[]
name|errors
init|=
name|ex
operator|.
name|getErrors
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testInvalidOption failed"
argument_list|,
literal|1
argument_list|,
name|errors
operator|.
name|length
argument_list|)
expr_stmt|;
name|CommandLineError
name|error
init|=
operator|(
name|CommandLineError
operator|)
name|errors
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected MissingArgument error"
argument_list|,
name|error
operator|instanceof
name|ErrorVisitor
operator|.
name|MissingArgument
argument_list|)
expr_stmt|;
name|ErrorVisitor
operator|.
name|MissingArgument
name|arg
init|=
operator|(
name|ErrorVisitor
operator|.
name|MissingArgument
operator|)
name|error
decl_stmt|;
name|assertEquals
argument_list|(
literal|"MissingArgument incorrect"
argument_list|,
literal|"wsdlurl"
argument_list|,
name|arg
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateArgument
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-n"
block|,
literal|"test"
block|,
literal|"-r"
block|,
literal|"arg1"
block|,
literal|"arg2"
block|}
decl_stmt|;
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testUnexpectedArgument failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadUsageException
name|ex
parameter_list|)
block|{
name|Object
index|[]
name|errors
init|=
name|ex
operator|.
name|getErrors
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testInvalidOption failed"
argument_list|,
literal|1
argument_list|,
name|errors
operator|.
name|length
argument_list|)
expr_stmt|;
name|CommandLineError
name|error
init|=
operator|(
name|CommandLineError
operator|)
name|errors
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected UnexpectedArgument error"
argument_list|,
name|error
operator|instanceof
name|ErrorVisitor
operator|.
name|UnexpectedArgument
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnexpectedOption
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-n"
block|,
literal|"test"
block|,
literal|"-r"
block|,
literal|"-unknown"
block|}
decl_stmt|;
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testUnexpectedOption failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadUsageException
name|ex
parameter_list|)
block|{
name|Object
index|[]
name|errors
init|=
name|ex
operator|.
name|getErrors
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testInvalidOption failed"
argument_list|,
literal|1
argument_list|,
name|errors
operator|.
name|length
argument_list|)
expr_stmt|;
name|CommandLineError
name|error
init|=
operator|(
name|CommandLineError
operator|)
name|errors
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected UnexpectedOption error"
argument_list|,
name|error
operator|instanceof
name|ErrorVisitor
operator|.
name|UnexpectedOption
argument_list|)
expr_stmt|;
name|ErrorVisitor
operator|.
name|UnexpectedOption
name|option
init|=
operator|(
name|ErrorVisitor
operator|.
name|UnexpectedOption
operator|)
name|error
decl_stmt|;
name|assertEquals
argument_list|(
literal|"UnexpectedOption incorrect"
argument_list|,
literal|"-unknown"
argument_list|,
name|option
operator|.
name|getOptionSwitch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidPackageName
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
literal|"/test"
block|,
literal|"arg1"
block|}
decl_stmt|;
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testInvalidPackageName failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadUsageException
name|ex
parameter_list|)
block|{
name|Object
index|[]
name|errors
init|=
name|ex
operator|.
name|getErrors
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testInvalidPackageName failed"
argument_list|,
literal|1
argument_list|,
name|errors
operator|.
name|length
argument_list|)
expr_stmt|;
name|CommandLineError
name|error
init|=
operator|(
name|CommandLineError
operator|)
name|errors
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected InvalidArgumentValue error"
argument_list|,
name|error
operator|instanceof
name|ErrorVisitor
operator|.
name|UserError
argument_list|)
expr_stmt|;
name|ErrorVisitor
operator|.
name|UserError
name|userError
init|=
operator|(
name|ErrorVisitor
operator|.
name|UserError
operator|)
name|error
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid argument value message incorrect"
argument_list|,
literal|"-p has invalid character!"
argument_list|,
name|userError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testvalidPackageName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
literal|"http://www.iona.com/hello_world_soap_http=com.iona"
block|,
literal|"-r"
block|,
literal|"arg1"
block|}
decl_stmt|;
name|CommandDocument
name|result
init|=
name|parser
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testValidPackageName Failed"
argument_list|,
literal|"http://www.iona.com/hello_world_soap_http=com.iona"
argument_list|,
name|result
operator|.
name|getParameter
argument_list|(
literal|"packagename"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|usage
init|=
literal|"[ -n<C++ Namespace> ] [ -impl ] [ -e<Enum Value> ] -r "
operator|+
literal|"[ -p<[wsdl namespace =]Package Name> ]* [ -? ] [ -v ]<wsdlurl> "
decl_stmt|;
name|String
name|pUsage
init|=
name|parser
operator|.
name|getUsage
argument_list|()
decl_stmt|;
if|if
condition|(
name|isQuolifiedVersion
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"This test failed in the xerces version above 2.7.1 or the version with JDK "
argument_list|,
name|usage
argument_list|,
name|pUsage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|usage
operator|=
literal|"[ -n<C++ Namespace> ] [ -impl ] [ -e<Enum Value> ] -r "
operator|+
literal|"-p<[wsdl namespace =]Package Name>* [ -? ] [ -v ]<wsdlurl>"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This test failed in the xerces version below 2.7.1"
argument_list|,
name|usage
operator|.
name|trim
argument_list|()
argument_list|,
name|pUsage
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isQuolifiedVersion
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.xerces.impl.Version"
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|c
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|String
name|v
init|=
operator|(
name|String
operator|)
name|c
operator|.
name|getMethod
argument_list|(
literal|"getVersion"
argument_list|)
operator|.
name|invoke
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|v
operator|=
name|StringUtils
operator|.
name|getFirstFound
argument_list|(
name|v
argument_list|,
literal|"(\\d+.\\d+)"
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'3'
condition|)
block|{
return|return
literal|true
return|;
block|}
name|v
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
operator|>=
literal|7
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetailedUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|specialItem
init|=
literal|"[ -p<[wsdl namespace =]Package Name> ]*"
decl_stmt|;
if|if
condition|(
operator|!
name|isQuolifiedVersion
argument_list|()
condition|)
block|{
name|specialItem
operator|=
literal|"-p<[wsdl namespace =]Package Name>*"
expr_stmt|;
block|}
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[]
block|{
literal|"[ -n<C++ Namespace> ]"
block|,
literal|"Namespace"
block|,
literal|"[ -impl ]"
block|,
literal|"impl - the impl that will be used by this tool to do "
operator|+
literal|"whatever it is this tool does."
block|,
literal|"[ -e<Enum Value> ]"
block|,
literal|"enum"
block|,
literal|"-r"
block|,
literal|"required"
block|,
name|specialItem
block|,
literal|"The java package name to use for the generated code."
operator|+
literal|"Also, optionally specify the wsdl namespace mapping to "
operator|+
literal|"a particular java packagename."
block|,
literal|"[ -? ]"
block|,
literal|"help"
block|,
literal|"[ -v ]"
block|,
literal|"version"
block|,
literal|"<wsdlurl>"
block|,
literal|"WSDL/SCHEMA URL"
block|}
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|String
name|lineSeparator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|StringTokenizer
name|st1
init|=
operator|new
name|StringTokenizer
argument_list|(
name|parser
operator|.
name|getDetailedUsage
argument_list|()
argument_list|,
name|lineSeparator
argument_list|)
decl_stmt|;
while|while
condition|(
name|st1
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Failed at line "
operator|+
name|index
argument_list|,
name|expected
index|[
name|index
operator|++
index|]
argument_list|,
name|st1
operator|.
name|nextToken
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOtherMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tsSource
init|=
literal|"/org/apache/cxf/tools/common/toolspec/parser/resources/testtool.xml"
decl_stmt|;
name|ToolSpec
name|toolspec
init|=
operator|new
name|ToolSpec
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|tsSource
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CommandLineParser
name|commandLineParser
init|=
operator|new
name|CommandLineParser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|commandLineParser
operator|.
name|setToolSpec
argument_list|(
name|toolspec
argument_list|)
expr_stmt|;
name|CommandDocument
name|commandDocument
init|=
name|commandLineParser
operator|.
name|parseArguments
argument_list|(
literal|"-r unknown"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|commandDocument
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDetailedUsage
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"Namespace"
operator|.
name|equals
argument_list|(
name|parser
operator|.
name|getDetailedUsage
argument_list|(
literal|"namespace"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFormattedDetailedUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|usage
init|=
name|parser
operator|.
name|getFormattedDetailedUsage
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|usage
argument_list|)
expr_stmt|;
name|StringTokenizer
name|st1
init|=
operator|new
name|StringTokenizer
argument_list|(
name|usage
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|st1
operator|.
name|countTokens
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|st1
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|s
init|=
name|st1
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"java package"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'o'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"impl - the"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'o'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

