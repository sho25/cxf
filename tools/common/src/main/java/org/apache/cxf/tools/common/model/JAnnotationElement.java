begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JAnnotationElement
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Object
name|value
decl_stmt|;
specifier|private
name|boolean
name|isPrimitive
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|imports
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|JAnnotationElement
parameter_list|()
block|{     }
specifier|public
name|JAnnotationElement
parameter_list|(
name|String
name|n
parameter_list|,
name|Object
name|v
parameter_list|)
block|{
name|this
argument_list|(
name|n
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JAnnotationElement
parameter_list|(
name|String
name|n
parameter_list|,
name|Object
name|v
parameter_list|,
name|boolean
name|primitive
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|n
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|v
expr_stmt|;
name|this
operator|.
name|isPrimitive
operator|=
name|primitive
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getImports
parameter_list|()
block|{
return|return
name|imports
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
specifier|final
name|String
name|newName
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|newName
expr_stmt|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
specifier|final
name|Object
name|newValue
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|newValue
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|value
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|appendValue
argument_list|(
name|sb
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Array
operator|.
name|getLength
argument_list|(
name|value
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|appendValue
argument_list|(
name|sb
argument_list|,
name|Array
operator|.
name|get
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|Array
operator|.
name|getLength
argument_list|(
name|value
argument_list|)
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendValue
argument_list|(
name|sb
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|appendValue
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
if|if
condition|(
name|isPrimitive
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getStringValue
argument_list|(
name|sb
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|containsSameClassName
argument_list|(
name|clz
argument_list|)
operator|&&
operator|!
name|imports
operator|.
name|contains
argument_list|(
name|clz
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|clz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|clz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|imports
operator|.
name|add
argument_list|(
name|clz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|".class"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|JAnnotation
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|imports
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|JAnnotation
operator|)
name|obj
operator|)
operator|.
name|getImports
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Enum
condition|)
block|{
name|appendEnumValue
argument_list|(
name|sb
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|JavaType
condition|)
block|{
name|JavaType
name|type
init|=
operator|(
name|JavaType
operator|)
name|obj
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|type
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".class"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPrimitive
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|appendEnumValue
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|Object
name|obj
parameter_list|)
block|{
name|Enum
argument_list|<
name|?
argument_list|>
name|e
init|=
operator|(
name|Enum
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
name|String
name|clzName
init|=
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|clzName
operator|.
name|contains
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|clzName
operator|.
name|lastIndexOf
argument_list|(
literal|'$'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|imports
operator|.
name|add
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|clzName
operator|.
name|substring
argument_list|(
name|clzName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"$"
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getStringValue
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|Object
name|obj
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|containsSameClassName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
return|return
name|imports
operator|.
name|contains
argument_list|(
name|clz
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|JAnnotationElement
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|JAnnotationElement
name|element
init|=
operator|(
name|JAnnotationElement
operator|)
name|obj
decl_stmt|;
return|return
name|element
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

