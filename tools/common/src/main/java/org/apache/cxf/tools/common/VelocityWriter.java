begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_class
specifier|public
class|class
name|VelocityWriter
extends|extends
name|BufferedWriter
block|{
specifier|private
specifier|final
name|String
name|newLine
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|public
name|VelocityWriter
parameter_list|(
name|Writer
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VelocityWriter
parameter_list|(
name|Writer
name|out
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|chars
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|str
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|indexOf
argument_list|(
literal|"\r\n"
argument_list|)
operator|>=
literal|0
operator|&&
name|newLine
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|str
operator|.
name|replaceAll
argument_list|(
literal|"\r\n"
argument_list|,
name|newLine
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|str
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
operator|&&
name|newLine
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|str
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
name|newLine
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|super
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|str
operator|.
name|indexOf
argument_list|(
literal|"\r\n"
argument_list|)
operator|>=
literal|0
operator|&&
name|newLine
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|str
operator|.
name|replaceAll
argument_list|(
literal|"\r\n"
argument_list|,
name|newLine
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|str
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
operator|&&
name|newLine
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|str
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
name|newLine
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|super
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

