begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|JavaParameter
extends|extends
name|JavaType
implements|implements
name|JavaAnnotatable
block|{
specifier|private
name|boolean
name|holder
decl_stmt|;
specifier|private
name|String
name|holderName
decl_stmt|;
specifier|private
name|String
name|partName
decl_stmt|;
specifier|private
name|JavaMethod
name|javaMethod
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|JAnnotation
argument_list|>
name|annotations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JAnnotation
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Describe callback here.      */
specifier|private
name|boolean
name|callback
decl_stmt|;
specifier|public
name|JavaParameter
parameter_list|()
block|{     }
specifier|public
name|JavaParameter
parameter_list|(
name|String
name|n
parameter_list|,
name|String
name|t
parameter_list|,
name|String
name|tns
parameter_list|)
block|{
name|super
argument_list|(
name|n
argument_list|,
name|t
argument_list|,
name|tns
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isHolder
parameter_list|()
block|{
return|return
name|holder
return|;
block|}
specifier|public
name|void
name|setHolder
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|holder
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|String
name|getHolderName
parameter_list|()
block|{
return|return
name|holderName
return|;
block|}
specifier|public
name|void
name|setHolderName
parameter_list|(
name|String
name|hn
parameter_list|)
block|{
name|this
operator|.
name|holderName
operator|=
name|hn
expr_stmt|;
block|}
specifier|public
name|void
name|addAnnotation
parameter_list|(
name|String
name|tag
parameter_list|,
name|JAnnotation
name|ann
parameter_list|)
block|{
if|if
condition|(
name|ann
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|annotations
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|ann
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JAnnotation
name|getAnnotation
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
return|return
name|annotations
operator|.
name|get
argument_list|(
name|tag
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getAnnotationTags
parameter_list|()
block|{
return|return
name|this
operator|.
name|annotations
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|JAnnotation
argument_list|>
name|getAnnotations
parameter_list|()
block|{
return|return
name|this
operator|.
name|annotations
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPartName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|partName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getPartName
parameter_list|()
block|{
return|return
name|this
operator|.
name|partName
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|holder
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\nIS Holder: [Holder Name]:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|holderName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHeader
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\nIS Header"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n PartName"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|partName
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setMethod
parameter_list|(
name|JavaMethod
name|jm
parameter_list|)
block|{
name|this
operator|.
name|javaMethod
operator|=
name|jm
expr_stmt|;
block|}
specifier|public
name|JavaMethod
name|getMethod
parameter_list|()
block|{
return|return
name|this
operator|.
name|javaMethod
return|;
block|}
specifier|public
name|void
name|annotate
parameter_list|(
name|Annotator
name|annotator
parameter_list|)
block|{
name|annotator
operator|.
name|annotate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the<code>Callback</code> value.      *       * @return a<code>boolean</code> value      */
specifier|public
specifier|final
name|boolean
name|isCallback
parameter_list|()
block|{
return|return
name|callback
return|;
block|}
comment|/**      * Set the<code>Callback</code> value.      *       * @param newCallback The new Callback value.      */
specifier|public
specifier|final
name|void
name|setCallback
parameter_list|(
specifier|final
name|boolean
name|newCallback
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|newCallback
expr_stmt|;
block|}
block|}
end_class

end_unit

