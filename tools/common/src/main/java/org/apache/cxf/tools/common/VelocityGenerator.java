begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|FileWriterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|Velocity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeConstants
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|VelocityGenerator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|VelocityGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|initialized
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|baseDir
decl_stmt|;
specifier|public
name|VelocityGenerator
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VelocityGenerator
parameter_list|(
name|boolean
name|log
parameter_list|)
block|{
name|initVelocity
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getVelocityLogFile
parameter_list|(
name|String
name|logfile
parameter_list|)
block|{
name|String
name|logdir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|logdir
operator|==
literal|null
operator|||
name|logdir
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|logdir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
block|}
return|return
name|logdir
operator|+
name|File
operator|.
name|separator
operator|+
name|logfile
return|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|void
name|initVelocity
parameter_list|(
name|boolean
name|log
parameter_list|)
throws|throws
name|ToolException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
return|return;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|clzName
init|=
literal|"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader"
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"resource.loader"
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"class.resource.loader.class"
argument_list|,
name|clzName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"runtime.log"
argument_list|,
name|getVelocityLogFile
argument_list|(
literal|"velocity.log"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|log
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_LOGSYSTEM_CLASS
argument_list|,
literal|"org.apache.velocity.runtime.log.NullLogSystem"
argument_list|)
expr_stmt|;
block|}
name|Velocity
operator|.
name|init
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"FAIL_TO_INITIALIZE_VELOCITY_ENGINE"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|doWrite
parameter_list|(
name|String
name|templateName
parameter_list|,
name|Writer
name|outputs
parameter_list|)
throws|throws
name|ToolException
block|{
name|Template
name|tmpl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpl
operator|=
name|Velocity
operator|.
name|getTemplate
argument_list|(
name|templateName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"TEMPLATE_MISSING"
argument_list|,
name|LOG
argument_list|,
name|templateName
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|VelocityContext
name|ctx
init|=
operator|new
name|VelocityContext
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|attributes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ctx
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|attributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|VelocityWriter
name|writer
init|=
operator|new
name|VelocityWriter
argument_list|(
name|outputs
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
literal|"out"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
try|try
block|{
name|tmpl
operator|.
name|merge
argument_list|(
name|ctx
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"VELOCITY_ENGINE_WRITE_ERRORS"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setBaseDir
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|this
operator|.
name|baseDir
operator|=
name|dir
expr_stmt|;
block|}
specifier|public
name|File
name|parseOutputName
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|ToolException
block|{
return|return
name|parseOutputName
argument_list|(
name|packageName
argument_list|,
name|filename
argument_list|,
literal|".java"
argument_list|)
return|;
block|}
specifier|public
name|File
name|parseOutputName
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|filename
parameter_list|,
name|String
name|ext
parameter_list|)
throws|throws
name|ToolException
block|{
name|FileUtils
operator|.
name|mkDir
argument_list|(
operator|new
name|File
argument_list|(
name|this
operator|.
name|baseDir
argument_list|)
argument_list|)
expr_stmt|;
name|FileWriterUtil
name|fw
init|=
operator|new
name|FileWriterUtil
argument_list|(
name|this
operator|.
name|baseDir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|fw
operator|.
name|getFileToWrite
argument_list|(
name|packageName
argument_list|,
name|filename
operator|+
name|ext
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"FAIL_TO_WRITE_FILE"
argument_list|,
name|LOG
argument_list|,
name|packageName
operator|+
literal|"."
operator|+
name|filename
operator|+
name|ext
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setCommonAttributes
parameter_list|()
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"currentdate"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|Version
operator|.
name|getCurrentVersion
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|Version
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"fullversion"
argument_list|,
name|Version
operator|.
name|getCompleteVersionString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearAttributes
parameter_list|()
block|{
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setAttributes
parameter_list|(
name|String
name|n
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

