begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_class
specifier|public
class|class
name|FileWriterUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|FileWriterUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|File
name|target
decl_stmt|;
specifier|public
name|FileWriterUtil
parameter_list|(
name|String
name|targetDir
parameter_list|)
throws|throws
name|ToolException
block|{
name|target
operator|=
operator|new
name|File
argument_list|(
name|targetDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|target
operator|.
name|exists
argument_list|()
operator|)
operator|||
operator|!
operator|(
name|target
operator|.
name|isDirectory
argument_list|()
operator|)
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"DIRECTORY_NOT_EXIST"
argument_list|,
name|LOG
argument_list|,
name|target
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
specifier|public
name|File
name|getFileToWrite
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
name|buildDir
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
name|File
name|fn
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|fn
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|fn
operator|+
literal|": Can't delete previous version"
argument_list|)
throw|;
block|}
return|return
name|fn
return|;
block|}
specifier|public
specifier|static
name|Writer
name|getWriter
parameter_list|(
name|File
name|fn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fn
argument_list|)
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Writer
name|getWriter
parameter_list|(
name|File
name|fn
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
return|return
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fn
argument_list|)
argument_list|)
argument_list|,
name|encoding
argument_list|)
return|;
block|}
specifier|public
name|Writer
name|getWriter
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getWriter
argument_list|(
name|getFileToWrite
argument_list|(
name|packageName
argument_list|,
name|fileName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCollision
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ToolException
block|{
name|File
name|dir
init|=
name|buildDir
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
return|return
name|fileExist
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
return|;
block|}
specifier|public
name|File
name|buildDir
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
name|File
name|dir
decl_stmt|;
if|if
condition|(
name|packageName
operator|==
literal|null
condition|)
block|{
name|dir
operator|=
name|target
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|toDir
argument_list|(
name|packageName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
specifier|private
name|boolean
name|fileExist
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
specifier|private
name|String
name|toDir
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
return|return
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
return|;
block|}
block|}
end_class

end_unit

