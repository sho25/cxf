begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JAnnotation
block|{
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
specifier|private
name|List
argument_list|<
name|JAnnotationElement
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|imports
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|JAnnotation
parameter_list|()
block|{
comment|// empty
block|}
specifier|public
name|JAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
name|setType
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getImports
parameter_list|()
block|{
name|prompt
argument_list|()
expr_stmt|;
for|for
control|(
name|JAnnotationElement
name|element
range|:
name|elements
control|)
block|{
name|imports
operator|.
name|addAll
argument_list|(
name|element
operator|.
name|getImports
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|imports
return|;
block|}
specifier|private
name|void
name|prompt
parameter_list|()
block|{
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|JAnnotationElement
argument_list|>
name|getElements
parameter_list|()
block|{
return|return
name|elements
return|;
block|}
specifier|public
name|void
name|addElement
parameter_list|(
name|JAnnotationElement
name|element
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|.
name|contains
argument_list|(
name|element
argument_list|)
condition|)
block|{
return|return;
block|}
name|JAnnotationElement
name|e
init|=
name|getElementByName
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|elements
operator|.
name|remove
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|elements
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JAnnotationElement
name|getElementByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JAnnotationElement
name|e
range|:
name|elements
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|newType
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|newType
expr_stmt|;
name|imports
operator|.
name|add
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|type
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getElements
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

