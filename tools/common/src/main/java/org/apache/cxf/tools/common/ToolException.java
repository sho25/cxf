begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Exception used for unrecoverable error in a CXF tool.  */
end_comment

begin_class
specifier|public
class|class
name|ToolException
extends|extends
name|RuntimeException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4418907917249006910L
decl_stmt|;
name|List
argument_list|<
name|Throwable
argument_list|>
name|suppressed
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|hasSuppressed
decl_stmt|;
specifier|public
name|ToolException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ToolException
parameter_list|(
name|String
name|message
parameter_list|,
name|List
argument_list|<
name|ToolErrorListener
operator|.
name|ErrorInfo
argument_list|>
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|ToolErrorListener
operator|.
name|ErrorInfo
name|er
range|:
name|e
control|)
block|{
name|String
name|ms
init|=
name|createMessage
argument_list|(
name|er
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
operator|&&
name|er
operator|.
name|cause
operator|!=
literal|null
operator|&&
name|ms
operator|.
name|equals
argument_list|(
name|er
operator|.
name|cause
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
condition|)
block|{
name|addSuppressedThrowable
argument_list|(
name|er
operator|.
name|cause
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ms
operator|==
literal|null
operator|&&
name|er
operator|.
name|cause
operator|!=
literal|null
condition|)
block|{
name|addSuppressedThrowable
argument_list|(
name|er
operator|.
name|cause
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addSuppressedThrowable
argument_list|(
operator|new
name|ToolException
argument_list|(
name|ms
argument_list|,
name|er
operator|.
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|initCause
argument_list|(
name|e
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ToolException
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ToolException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ToolException
parameter_list|(
name|Message
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|super
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ToolException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ToolException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|super
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct message from message property bundle and logger.      * @param messageId      * @param logger      */
specifier|public
name|ToolException
parameter_list|(
name|String
name|messageId
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Message
argument_list|(
name|messageId
argument_list|,
name|logger
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ToolException
parameter_list|(
name|String
name|messageId
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Message
argument_list|(
name|messageId
argument_list|,
name|logger
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|createMessage
parameter_list|(
name|ToolErrorListener
operator|.
name|ErrorInfo
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|file
operator|!=
literal|null
condition|)
block|{
return|return
name|e
operator|.
name|file
operator|+
literal|" ["
operator|+
name|e
operator|.
name|line
operator|+
literal|","
operator|+
name|e
operator|.
name|col
operator|+
literal|"]: "
operator|+
name|e
operator|.
name|message
return|;
block|}
if|if
condition|(
name|e
operator|.
name|message
operator|==
literal|null
operator|&&
name|e
operator|.
name|cause
operator|!=
literal|null
condition|)
block|{
return|return
name|e
operator|.
name|cause
operator|.
name|getLocalizedMessage
argument_list|()
return|;
block|}
return|return
name|e
operator|.
name|message
return|;
block|}
specifier|public
name|void
name|printStackTrace
parameter_list|(
name|PrintStream
name|ps
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasSuppressed
condition|)
block|{
name|super
operator|.
name|printStackTrace
argument_list|(
name|ps
argument_list|)
expr_stmt|;
return|return;
block|}
name|printStackTrace
argument_list|(
name|ps
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printStackTrace
parameter_list|(
name|PrintStream
name|ps
parameter_list|,
name|String
name|pfx
parameter_list|,
name|String
name|cap
parameter_list|)
block|{
name|ps
operator|.
name|println
argument_list|(
name|pfx
operator|+
name|cap
operator|+
name|this
argument_list|)
expr_stmt|;
name|StackTraceElement
index|[]
name|trace
init|=
name|super
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|traceElement
range|:
name|trace
control|)
block|{
name|ps
operator|.
name|println
argument_list|(
name|pfx
operator|+
literal|"\tat "
operator|+
name|traceElement
argument_list|)
expr_stmt|;
block|}
comment|// Print suppressed exceptions, if any
for|for
control|(
name|Throwable
name|se
range|:
name|suppressed
control|)
block|{
name|printThrowable
argument_list|(
name|se
argument_list|,
name|ps
argument_list|,
name|pfx
operator|+
literal|"\t"
argument_list|,
literal|"Suppressed: "
argument_list|)
expr_stmt|;
block|}
comment|// Print cause, if any
name|Throwable
name|ourCause
init|=
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|ourCause
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|hasSuppressed
operator|||
name|ourCause
operator|!=
name|suppressed
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
condition|)
block|{
name|printThrowable
argument_list|(
name|ourCause
argument_list|,
name|ps
argument_list|,
name|pfx
operator|+
literal|"\t"
argument_list|,
literal|"Caused by: "
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printThrowable
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|PrintStream
name|ps
parameter_list|,
name|String
name|pfx
parameter_list|,
name|String
name|cap
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ToolException
condition|)
block|{
operator|(
operator|(
name|ToolException
operator|)
name|t
operator|)
operator|.
name|printStackTrace
argument_list|(
name|ps
argument_list|,
name|pfx
argument_list|,
name|cap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ps
operator|.
name|println
argument_list|(
name|pfx
operator|+
name|cap
operator|+
name|t
argument_list|)
expr_stmt|;
name|StackTraceElement
index|[]
name|trace
init|=
name|t
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|ste
range|:
name|trace
control|)
block|{
name|ps
operator|.
name|println
argument_list|(
name|pfx
operator|+
literal|"\tat "
operator|+
name|ste
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|printThrowable
argument_list|(
name|t
operator|.
name|getCause
argument_list|()
argument_list|,
name|ps
argument_list|,
name|pfx
operator|+
literal|"\t"
argument_list|,
literal|"Caused by: "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addSuppressedThrowable
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"addSuppressed"
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t2
parameter_list|)
block|{
comment|//java< 1.7
name|suppressed
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
name|initCause
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|hasSuppressed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

