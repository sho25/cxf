begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  * (not thread safe)  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SchemaValidatingSAXParser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SchemaValidatingSAXParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SAXParserFactory
name|parserFactory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|private
name|SAXParser
name|parser
decl_stmt|;
specifier|private
name|SchemaFactory
name|schemaFactory
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|public
name|SchemaValidatingSAXParser
parameter_list|()
block|{
try|try
block|{
name|parserFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|parser
operator|=
name|parserFactory
operator|.
name|newSAXParser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"SAX_PARSER_CONFIG_ERR_MSG"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
name|saxe
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"SAX_PARSER_EXCEPTION_MSG"
argument_list|)
expr_stmt|;
block|}
name|setValidating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|InputStream
name|getSchemaLocation
parameter_list|()
block|{
name|String
name|toolspec
init|=
literal|"/org/apache/cxf/tools/common/toolspec/tool-specification.xsd"
decl_stmt|;
return|return
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|toolspec
argument_list|)
return|;
block|}
specifier|public
name|void
name|setValidating
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
if|if
condition|(
name|validate
condition|)
block|{
name|this
operator|.
name|schemaFactory
operator|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|schema
operator|=
name|schemaFactory
operator|.
name|newSchema
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|getSchemaLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"SCHEMA_FACTORY_EXCEPTION_MSG"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|parserFactory
operator|.
name|setSchema
argument_list|(
name|this
operator|.
name|schema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SAX_PARSER_NOT_SUPPORTED"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|SAXParser
name|getSAXParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
block|}
end_class

end_unit

