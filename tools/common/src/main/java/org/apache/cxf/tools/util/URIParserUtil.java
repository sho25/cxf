begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|URIParserUtil
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|KEYWORDS
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"abstract"
block|,
literal|"boolean"
block|,
literal|"break"
block|,
literal|"byte"
block|,
literal|"case"
block|,
literal|"catch"
block|,
literal|"char"
block|,
literal|"class"
block|,
literal|"const"
block|,
literal|"continue"
block|,
literal|"default"
block|,
literal|"do"
block|,
literal|"double"
block|,
literal|"else"
block|,
literal|"extends"
block|,
literal|"final"
block|,
literal|"finally"
block|,
literal|"float"
block|,
literal|"for"
block|,
literal|"goto"
block|,
literal|"if"
block|,
literal|"implements"
block|,
literal|"import"
block|,
literal|"instanceof"
block|,
literal|"int"
block|,
literal|"interface"
block|,
literal|"long"
block|,
literal|"native"
block|,
literal|"new"
block|,
literal|"package"
block|,
literal|"private"
block|,
literal|"protected"
block|,
literal|"public"
block|,
literal|"return"
block|,
literal|"short"
block|,
literal|"static"
block|,
literal|"strictfp"
block|,
literal|"super"
block|,
literal|"switch"
block|,
literal|"synchronized"
block|,
literal|"this"
block|,
literal|"throw"
block|,
literal|"throws"
block|,
literal|"transient"
block|,
literal|"try"
block|,
literal|"void"
block|,
literal|"volatile"
block|,
literal|"while"
block|,
literal|"true"
block|,
literal|"false"
block|,
literal|"null"
block|,
literal|"assert"
block|,
literal|"enum"
block|}
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXCLUDED_CHARS
init|=
literal|"<>\"{}|\\^`"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEX_DIGITS
init|=
literal|"0123456789abcdef"
decl_stmt|;
specifier|private
name|URIParserUtil
parameter_list|()
block|{
comment|// complete
block|}
specifier|private
specifier|static
name|boolean
name|isExcluded
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
name|ch
operator|<=
literal|0x20
operator|||
name|ch
operator|>=
literal|0x7F
operator|||
name|EXCLUDED_CHARS
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
specifier|public
specifier|static
name|URL
index|[]
name|pathToURLs
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
name|File
operator|.
name|pathSeparator
argument_list|)
decl_stmt|;
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|st
operator|.
name|countTokens
argument_list|()
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|urls
index|[
name|count
operator|++
index|]
operator|=
name|url
expr_stmt|;
block|}
block|}
if|if
condition|(
name|urls
operator|.
name|length
operator|!=
name|count
condition|)
block|{
name|URL
index|[]
name|tmp
init|=
operator|new
name|URL
index|[
name|count
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|urls
argument_list|,
literal|0
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|urls
operator|=
name|tmp
expr_stmt|;
block|}
return|return
name|urls
return|;
block|}
specifier|public
specifier|static
name|String
name|parsePackageName
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|defaultPackageName
parameter_list|)
block|{
name|String
name|packageName
init|=
operator|(
name|defaultPackageName
operator|!=
literal|null
operator|&&
name|defaultPackageName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|defaultPackageName
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|packageName
operator|==
literal|null
condition|)
block|{
name|packageName
operator|=
name|getPackageName
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
return|return
name|packageName
return|;
block|}
specifier|public
specifier|static
name|String
name|getPackageName
parameter_list|(
name|String
name|nameSpaceURI
parameter_list|)
block|{
name|int
name|idx
init|=
name|nameSpaceURI
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|scheme
operator|=
name|nameSpaceURI
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"http"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
operator|||
literal|"urn"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|nameSpaceURI
operator|=
name|nameSpaceURI
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenize
argument_list|(
name|nameSpaceURI
argument_list|,
literal|"/: "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"cxf"
return|;
block|}
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|lastToken
init|=
name|tokens
operator|.
name|get
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|idx
operator|=
name|lastToken
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
comment|//lastToken = lastToken.substring(0, idx);
name|lastToken
operator|=
name|lastToken
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|set
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|lastToken
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|domain
init|=
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|idx
operator|=
name|domain
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|domain
operator|=
name|domain
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|r
init|=
name|reverse
argument_list|(
name|tokenize
argument_list|(
name|domain
argument_list|,
literal|"urn"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|?
literal|".-"
else|:
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"www"
operator|.
name|equalsIgnoreCase
argument_list|(
name|r
operator|.
name|get
argument_list|(
name|r
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
comment|// remove leading www
name|r
operator|.
name|remove
argument_list|(
name|r
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// replace the domain name with tokenized items
name|tokens
operator|.
name|addAll
argument_list|(
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// iterate through the tokens and apply xml->java name algorithm
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// get the token and remove illegal chars
name|String
name|token
init|=
name|tokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|token
operator|=
name|removeIllegalIdentifierChars
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// this will check for reserved keywords
if|if
condition|(
name|containsReservedKeywords
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|token
operator|=
literal|'_'
operator|+
name|token
expr_stmt|;
block|}
name|tokens
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|token
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// concat all the pieces and return it
return|return
name|combine
argument_list|(
name|tokens
argument_list|,
literal|'.'
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getNamespace
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
if|if
condition|(
name|packageName
operator|==
literal|null
operator|||
name|packageName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|packageName
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|String
index|[]
name|tokens
decl_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|countTokens
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tokens
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|=
operator|new
name|String
index|[
name|tokenizer
operator|.
name|countTokens
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|tokenizer
operator|.
name|countTokens
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|tokens
index|[
name|i
index|]
operator|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
block|}
name|StringBuilder
name|namespace
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"http://"
argument_list|)
decl_stmt|;
name|String
name|dot
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|dot
operator|=
literal|"."
expr_stmt|;
block|}
name|namespace
operator|.
name|append
argument_list|(
name|dot
operator|+
name|tokens
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|namespace
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
return|return
name|namespace
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tokenize
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|sep
parameter_list|)
block|{
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|str
argument_list|,
name|sep
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|private
specifier|static
name|String
name|removeIllegalIdentifierChars
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|StringBuilder
name|newToken
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|token
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|token
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
operator|!
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// prefix an '_' if the first char is illegal
name|newToken
operator|.
name|append
argument_list|(
literal|"_"
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// replace the char with an '_' if it is illegal
name|newToken
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add the legal char
name|newToken
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newToken
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|combine
parameter_list|(
name|List
name|r
parameter_list|,
name|char
name|sep
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|r
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|r
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|reverse
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|a
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
specifier|static
name|boolean
name|containsReservedKeywords
parameter_list|(
name|String
name|token
parameter_list|)
block|{
return|return
name|KEYWORDS
operator|.
name|contains
argument_list|(
name|token
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|escapeChars
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
do|do
block|{
name|char
name|ch
init|=
name|b
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|isExcluded
argument_list|(
name|ch
argument_list|)
condition|)
block|{
try|try
block|{
name|byte
index|[]
name|bytes
init|=
name|Character
operator|.
name|toString
argument_list|(
name|ch
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setCharAt
argument_list|(
name|x
operator|++
argument_list|,
literal|'%'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|bytes
operator|.
name|length
condition|;
name|y
operator|++
control|)
block|{
name|b
operator|.
name|insert
argument_list|(
name|x
operator|++
argument_list|,
name|HEX_DIGITS
operator|.
name|charAt
argument_list|(
operator|(
name|bytes
index|[
name|y
index|]
operator|&
literal|0xFF
operator|)
operator|>>
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
name|x
argument_list|,
name|HEX_DIGITS
operator|.
name|charAt
argument_list|(
name|bytes
index|[
name|y
index|]
operator|&
literal|0x0F
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|//should not happen
block|}
block|}
name|x
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|x
operator|<
name|b
operator|.
name|length
argument_list|()
condition|)
do|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|normalize
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|result
operator|=
name|escapeChars
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e1
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|url
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
name|uri
operator|.
name|substring
argument_list|(
literal|10
argument_list|)
argument_list|,
name|URIParserUtil
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|url
operator|!=
literal|null
condition|?
name|url
operator|.
name|toExternalForm
argument_list|()
else|:
name|uri
return|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
name|String
name|f
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|f
operator|=
literal|"file:/"
operator|+
name|uri
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
literal|"file:"
operator|+
name|uri
expr_stmt|;
block|}
name|url
operator|=
operator|new
name|URL
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|escapeChars
argument_list|(
name|url
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
return|return
name|escapeChars
argument_list|(
name|uri
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|escapeChars
argument_list|(
name|url
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|String
name|getAbsoluteURI
parameter_list|(
specifier|final
name|String
name|arg
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|normalize
argument_list|(
name|arg
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|toURI
argument_list|()
operator|.
name|isOpaque
argument_list|()
operator|&&
literal|"file"
operator|.
name|equalsIgnoreCase
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
literal|""
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|resolve
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|normalize
argument_list|(
name|arg
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e1
parameter_list|)
block|{
return|return
name|normalize
argument_list|(
name|arg
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e2
parameter_list|)
block|{
return|return
name|normalize
argument_list|(
name|arg
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

