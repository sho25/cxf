begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|Tool
import|;
end_import

begin_class
specifier|public
class|class
name|Option
implements|implements
name|TokenConsumer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Option
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VALUE_ENUM_SEPARATOR
init|=
literal|"|"
decl_stmt|;
specifier|protected
name|Element
name|argument
decl_stmt|;
specifier|protected
name|Element
name|annotation
decl_stmt|;
specifier|private
specifier|final
name|Element
name|element
decl_stmt|;
specifier|private
name|Element
name|valueType
decl_stmt|;
specifier|private
name|int
name|numMatches
decl_stmt|;
specifier|public
name|Option
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|el
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|elemList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|Tool
operator|.
name|TOOL_SPEC_PUBLIC_ID
argument_list|,
literal|"associatedArgument"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemList
operator|!=
literal|null
operator|&&
name|elemList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|argument
operator|=
name|elemList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|elemList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|Tool
operator|.
name|TOOL_SPEC_PUBLIC_ID
argument_list|,
literal|"annotation"
argument_list|)
expr_stmt|;
if|if
condition|(
name|elemList
operator|!=
literal|null
operator|&&
name|elemList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|annotation
operator|=
name|elemList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annotation
operator|==
literal|null
operator|&&
name|argument
operator|!=
literal|null
condition|)
block|{
name|elemList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|argument
argument_list|,
name|Tool
operator|.
name|TOOL_SPEC_PUBLIC_ID
argument_list|,
literal|"annotation"
argument_list|)
expr_stmt|;
if|if
condition|(
name|elemList
operator|!=
literal|null
operator|&&
name|elemList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|annotation
operator|=
name|elemList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|hasArgument
parameter_list|()
block|{
return|return
name|argument
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasImmediateArgument
parameter_list|()
block|{
return|return
name|hasArgument
argument_list|()
operator|&&
literal|"immediate"
operator|.
name|equals
argument_list|(
name|argument
operator|.
name|getAttribute
argument_list|(
literal|"placement"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @return whether the first token was accepted      */
specifier|public
name|boolean
name|accept
parameter_list|(
name|TokenInputStream
name|args
parameter_list|,
name|Element
name|result
parameter_list|,
name|ErrorVisitor
name|errors
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|available
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|arg
init|=
name|args
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|arg
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"ARGUMENT_IS_NULL_MSG"
argument_list|)
expr_stmt|;
block|}
comment|// go through each switch to see if we can match one to the arg.
name|List
argument_list|<
name|Element
argument_list|>
name|switches
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|Tool
operator|.
name|TOOL_SPEC_PUBLIC_ID
argument_list|,
literal|"switch"
argument_list|)
decl_stmt|;
name|boolean
name|accepted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Element
name|switchElem
range|:
name|switches
control|)
block|{
name|String
name|switchArg
init|=
literal|"-"
operator|+
name|switchElem
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"switchArg is "
operator|+
name|switchArg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasImmediateArgument
argument_list|()
condition|?
name|arg
operator|.
name|startsWith
argument_list|(
name|switchArg
argument_list|)
else|:
name|arg
operator|.
name|equals
argument_list|(
name|switchArg
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Matches a switch!!!"
argument_list|)
expr_stmt|;
comment|// consume the token
name|args
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// Add ourselves to the result document
name|Element
name|optionEl
init|=
name|result
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createElementNS
argument_list|(
literal|"http://cxf.apache.org/Xutil/Command"
argument_list|,
literal|"option"
argument_list|)
decl_stmt|;
name|optionEl
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add argument value to result
if|if
condition|(
name|hasArgument
argument_list|()
condition|)
block|{
name|String
name|argValue
decl_stmt|;
if|if
condition|(
name|hasImmediateArgument
argument_list|()
condition|)
block|{
name|argValue
operator|=
name|arg
operator|.
name|substring
argument_list|(
name|switchArg
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argValue
operator|=
name|readArgumentValue
argument_list|(
name|args
argument_list|,
name|switchArg
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|argValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Setting argument value of option to "
operator|+
name|argValue
argument_list|)
expr_stmt|;
block|}
name|optionEl
operator|.
name|appendChild
argument_list|(
name|result
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
name|argValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|result
operator|.
name|appendChild
argument_list|(
name|optionEl
argument_list|)
expr_stmt|;
name|numMatches
operator|++
expr_stmt|;
name|accepted
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|accepted
return|;
block|}
specifier|private
name|String
name|readArgumentValue
parameter_list|(
name|TokenInputStream
name|args
parameter_list|,
name|String
name|switchArg
parameter_list|,
name|ErrorVisitor
name|errors
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|args
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|InvalidOption
argument_list|(
name|switchArg
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasInvalidCharacter
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|UserError
argument_list|(
name|switchArg
operator|+
literal|" has invalid character!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isInEnumArgumentValue
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|UserError
argument_list|(
name|switchArg
operator|+
literal|" "
operator|+
name|value
operator|+
literal|" not in the enumeration value list!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|InvalidOption
argument_list|(
name|switchArg
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|private
name|boolean
name|hasInvalidCharacter
parameter_list|(
name|String
name|argValue
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|list
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|argument
argument_list|,
name|Tool
operator|.
name|TOOL_SPEC_PUBLIC_ID
argument_list|,
literal|"valuetype"
argument_list|)
decl_stmt|;
comment|//NodeList list = argument.getElementsByTagNameNS(Tool.TOOL_SPEC_PUBLIC_ID, "valuetype");
name|String
name|valuetypeStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|valueType
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|valuetypeStr
operator|=
name|valueType
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"IdentifyString"
operator|.
name|equals
argument_list|(
name|valuetypeStr
argument_list|)
condition|)
block|{
return|return
operator|!
name|isIdentifyString
argument_list|(
name|argValue
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"NamingSpacePackageString"
operator|.
name|equals
argument_list|(
name|valuetypeStr
argument_list|)
condition|)
block|{
return|return
operator|!
name|isNamingSpacePackageString
argument_list|(
name|argValue
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"Digital"
operator|.
name|equals
argument_list|(
name|valuetypeStr
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argValue
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|argValue
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isInEnumArgumentValue
parameter_list|(
name|String
name|argValue
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|list
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|argument
argument_list|,
name|Tool
operator|.
name|TOOL_SPEC_PUBLIC_ID
argument_list|,
literal|"valueenum"
argument_list|)
decl_stmt|;
comment|//NodeList list = argument.getElementsByTagNameNS(Tool.TOOL_SPEC_PUBLIC_ID, "valueenum");
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
name|String
name|enumValue
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|enumValue
argument_list|,
name|VALUE_ENUM_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|stk
operator|.
name|countTokens
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
while|while
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
if|if
condition|(
name|argValue
operator|.
name|equals
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|isIdentifyString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'.'
condition|)
block|{
continue|continue;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isNamingSpacePackageString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|isIdentifyString
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|packageName
init|=
name|value
operator|.
name|substring
argument_list|(
name|value
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|isIdentifyString
argument_list|(
name|packageName
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|(
name|ErrorVisitor
name|errors
parameter_list|)
block|{
if|if
condition|(
name|errors
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"For this option, minOccurs="
operator|+
name|element
operator|.
name|getAttribute
argument_list|(
literal|"minOccurs"
argument_list|)
operator|+
literal|" and maxOccurs="
operator|+
name|element
operator|.
name|getAttribute
argument_list|(
literal|"maxOccurs"
argument_list|)
operator|+
literal|", numMatches currently "
operator|+
name|numMatches
argument_list|)
expr_stmt|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|isAtleastMinimum
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|MissingOption
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|&&
operator|!
name|isNoGreaterThanMaximum
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|DuplicateOption
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"isSatisfied() returning "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|isAtleastMinimum
parameter_list|()
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|int
name|minOccurs
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"minOccurs"
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|numMatches
operator|>=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"minOccurs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|numMatches
operator|>=
name|minOccurs
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|isNoGreaterThanMaximum
parameter_list|()
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|int
name|maxOccurs
init|=
literal|1
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"maxOccurs"
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"unbounded"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"maxOccurs"
argument_list|)
argument_list|)
operator|||
name|numMatches
operator|<=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"maxOccurs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|numMatches
operator|<=
name|maxOccurs
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|element
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAnnotation
parameter_list|()
block|{
return|return
name|annotation
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPrimarySwitch
parameter_list|()
block|{
comment|//NodeList switches = element.getElementsByTagNameNS(Tool.TOOL_SPEC_PUBLIC_ID, "switch");
name|List
argument_list|<
name|Element
argument_list|>
name|switches
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|Tool
operator|.
name|TOOL_SPEC_PUBLIC_ID
argument_list|,
literal|"switch"
argument_list|)
decl_stmt|;
comment|// options must have atleast one switch, as enforced by schema, so no
comment|// need for defensive coding.
return|return
name|switches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

