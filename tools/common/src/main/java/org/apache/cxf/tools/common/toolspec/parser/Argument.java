begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|ToolSpec
import|;
end_import

begin_class
specifier|public
class|class
name|Argument
implements|implements
name|TokenConsumer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Argument
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ToolSpec
name|toolspec
decl_stmt|;
specifier|private
specifier|final
name|Element
name|element
decl_stmt|;
specifier|private
name|int
name|numMatches
decl_stmt|;
specifier|public
name|Argument
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|el
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|TokenInputStream
name|args
parameter_list|,
name|Element
name|result
parameter_list|,
name|ErrorVisitor
name|errors
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Accepting token stream for argument: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
name|int
name|minOccurs
decl_stmt|;
if|if
condition|(
literal|"unbounded"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"minOccurs"
argument_list|)
argument_list|)
condition|)
block|{
name|minOccurs
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|minOccurs
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"minOccurs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minOccurs
operator|==
literal|0
condition|)
block|{
name|addElement
argument_list|(
name|args
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|minOccurs
operator|>
name|args
operator|.
name|available
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|args
operator|.
name|peekPre
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|","
argument_list|)
operator|&&
name|args
operator|.
name|peekPre
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|args
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minOccurs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
operator|.
name|peek
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|UnexpectedOption
argument_list|(
name|args
operator|.
name|peek
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|addElement
argument_list|(
name|args
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|addElement
parameter_list|(
name|TokenInputStream
name|args
parameter_list|,
name|Element
name|result
parameter_list|)
block|{
name|Element
name|argEl
init|=
name|result
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createElementNS
argument_list|(
literal|"http://cxf.apache.org/Xutil/Command"
argument_list|,
literal|"argument"
argument_list|)
decl_stmt|;
name|argEl
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|isOutOfBound
argument_list|()
condition|)
block|{
name|argEl
operator|.
name|appendChild
argument_list|(
name|result
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
name|args
operator|.
name|read
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|appendChild
argument_list|(
name|argEl
argument_list|)
expr_stmt|;
name|numMatches
operator|++
expr_stmt|;
block|}
specifier|private
name|boolean
name|isAtleastMinimum
parameter_list|()
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|int
name|minOccurs
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"minOccurs"
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|numMatches
operator|>=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"minOccurs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|numMatches
operator|>=
name|minOccurs
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|isNoGreaterThanMaximum
parameter_list|()
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
comment|//  int maxOccurs = 1;
if|if
condition|(
literal|"unbounded"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"maxOccurs"
argument_list|)
argument_list|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"maxOccurs"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"maxOccurs"
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|numMatches
operator|<=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"maxOccurs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|(
name|ErrorVisitor
name|errors
parameter_list|)
block|{
if|if
condition|(
name|errors
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isAtleastMinimum
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|MissingArgument
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isNoGreaterThanMaximum
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|DuplicateArgument
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setToolSpec
parameter_list|(
name|ToolSpec
name|toolSpec
parameter_list|)
block|{
name|this
operator|.
name|toolspec
operator|=
name|toolSpec
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|element
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

