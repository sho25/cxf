begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|OASISCatalogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|URIParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
operator|.
name|BadUsageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
operator|.
name|CommandDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
operator|.
name|CommandLineParser
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractToolContainer
implements|implements
name|ToolContainer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractToolContainer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ToolSpec
name|toolspec
decl_stmt|;
specifier|protected
name|ToolContext
name|context
decl_stmt|;
specifier|protected
name|PrintStream
name|out
init|=
name|System
operator|.
name|out
decl_stmt|;
specifier|protected
name|PrintStream
name|err
init|=
name|System
operator|.
name|err
decl_stmt|;
specifier|private
name|String
name|arguments
index|[]
decl_stmt|;
specifier|private
name|boolean
name|isVerbose
decl_stmt|;
specifier|private
name|boolean
name|isQuiet
decl_stmt|;
specifier|private
name|CommandDocument
name|commandDoc
decl_stmt|;
specifier|private
name|CommandLineParser
name|parser
decl_stmt|;
specifier|private
name|OutputStream
name|outOutputStream
decl_stmt|;
specifier|private
name|OutputStream
name|errOutputStream
decl_stmt|;
specifier|public
class|class
name|GenericOutputStream
extends|extends
name|OutputStream
block|{
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{          }
block|}
specifier|public
name|AbstractToolContainer
parameter_list|()
block|{              }
specifier|public
name|AbstractToolContainer
parameter_list|(
name|ToolSpec
name|ts
parameter_list|)
throws|throws
name|BadUsageException
block|{
name|toolspec
operator|=
name|ts
expr_stmt|;
block|}
specifier|public
name|void
name|setArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|arguments
operator|=
operator|new
name|String
index|[
name|args
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|arguments
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|setMode
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|isQuietMode
argument_list|()
condition|)
block|{
name|redirectOutput
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|parseCommandLine
parameter_list|()
throws|throws
name|BadUsageException
throws|,
name|IOException
block|{
if|if
condition|(
name|toolspec
operator|!=
literal|null
condition|)
block|{
name|parser
operator|=
operator|new
name|CommandLineParser
argument_list|(
name|toolspec
argument_list|)
expr_stmt|;
name|commandDoc
operator|=
name|parser
operator|.
name|parseArguments
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"-q"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|isQuiet
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
literal|"-quiet"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|isQuiet
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
literal|"-V"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|isVerbose
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
literal|"-verbose"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|isVerbose
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ToolException
block|{
comment|// initialize
if|if
condition|(
name|toolspec
operator|==
literal|null
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"TOOLSPEC_NOT_INITIALIZED"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CommandDocument
name|getCommandDocument
parameter_list|()
block|{
return|return
name|commandDoc
return|;
block|}
specifier|public
name|CommandLineParser
name|getCommandLineParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
specifier|public
name|void
name|redirectOutput
parameter_list|()
block|{
name|outOutputStream
operator|=
operator|new
name|GenericOutputStream
argument_list|()
expr_stmt|;
name|errOutputStream
operator|=
operator|new
name|GenericOutputStream
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isQuietMode
parameter_list|()
block|{
return|return
name|isQuiet
return|;
block|}
specifier|public
name|boolean
name|isVerboseMode
parameter_list|()
block|{
return|return
name|isVerbose
return|;
block|}
specifier|public
name|String
index|[]
name|getArgument
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
specifier|public
name|OutputStream
name|getOutOutputStream
parameter_list|()
block|{
return|return
name|outOutputStream
return|;
block|}
specifier|public
name|void
name|setOutOutputStream
parameter_list|(
name|OutputStream
name|outOutputStream
parameter_list|)
block|{
name|this
operator|.
name|outOutputStream
operator|=
name|outOutputStream
expr_stmt|;
name|this
operator|.
name|out
operator|=
operator|(
name|outOutputStream
operator|instanceof
name|PrintStream
operator|)
condition|?
operator|(
name|PrintStream
operator|)
name|outOutputStream
else|:
operator|new
name|PrintStream
argument_list|(
name|outOutputStream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|getErrOutputStream
parameter_list|()
block|{
return|return
name|errOutputStream
return|;
block|}
specifier|public
name|void
name|setErrOutputStream
parameter_list|(
name|OutputStream
name|errOutputStream
parameter_list|)
block|{
name|this
operator|.
name|errOutputStream
operator|=
name|errOutputStream
expr_stmt|;
name|this
operator|.
name|err
operator|=
operator|(
name|errOutputStream
operator|instanceof
name|PrintStream
operator|)
condition|?
operator|(
name|PrintStream
operator|)
name|errOutputStream
else|:
operator|new
name|PrintStream
argument_list|(
name|errOutputStream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|ToolContext
name|c
parameter_list|)
block|{
name|context
operator|=
name|c
expr_stmt|;
block|}
specifier|public
name|ToolContext
name|getContext
parameter_list|()
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|ToolContext
argument_list|()
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|boolean
name|exitOnFinish
parameter_list|)
throws|throws
name|ToolException
block|{
name|init
argument_list|()
expr_stmt|;
try|try
block|{
name|parseCommandLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadUsageException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
comment|//nothing to do
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
name|Bus
name|bus
init|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
decl_stmt|;
name|OASISCatalogManager
name|catalogManager
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|OASISCatalogManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|catalogLocation
init|=
name|getCatalogURL
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|catalogLocation
argument_list|)
condition|)
block|{
try|try
block|{
name|catalogManager
operator|.
name|loadCatalog
argument_list|(
operator|new
name|URI
argument_list|(
name|catalogLocation
argument_list|)
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"FOUND_NO_FRONTEND"
argument_list|,
name|LOG
argument_list|,
name|catalogLocation
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|bus
return|;
block|}
specifier|protected
name|String
name|getCatalogURL
parameter_list|()
block|{
name|String
name|catalogLocation
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_CATALOG
argument_list|)
decl_stmt|;
return|return
name|URIParserUtil
operator|.
name|getAbsoluteURI
argument_list|(
name|catalogLocation
argument_list|)
return|;
block|}
block|}
end_class

end_unit

