begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ToolErrorListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ToolErrorListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
class|class
name|ErrorInfo
block|{
name|String
name|file
decl_stmt|;
name|int
name|line
decl_stmt|;
name|int
name|col
decl_stmt|;
name|Throwable
name|cause
decl_stmt|;
name|String
name|message
decl_stmt|;
name|ErrorInfo
parameter_list|(
name|String
name|f
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|c
parameter_list|,
name|String
name|m
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|file
operator|=
name|f
expr_stmt|;
name|line
operator|=
name|l
expr_stmt|;
name|col
operator|=
name|c
expr_stmt|;
name|message
operator|=
name|m
expr_stmt|;
name|cause
operator|=
name|t
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ErrorInfo
argument_list|>
name|errors
init|=
operator|new
name|LinkedList
argument_list|<
name|ErrorInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addError
parameter_list|(
name|String
name|file
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|column
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|addError
argument_list|(
name|file
argument_list|,
name|line
argument_list|,
name|column
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addError
parameter_list|(
name|String
name|file
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|column
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorInfo
argument_list|(
name|file
argument_list|,
name|line
argument_list|,
name|column
argument_list|,
name|message
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWarning
parameter_list|(
name|String
name|file
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|column
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|addWarning
argument_list|(
name|file
argument_list|,
name|line
argument_list|,
name|column
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWarning
parameter_list|(
name|String
name|file
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|column
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|message
operator|=
name|file
operator|+
literal|" ["
operator|+
name|line
operator|+
literal|","
operator|+
name|column
operator|+
literal|"]: "
operator|+
name|message
expr_stmt|;
block|}
name|LOG
operator|.
name|warning
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getErrorCount
parameter_list|()
block|{
return|return
name|errors
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|StringBuilder
name|createMessage
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|ToolErrorListener
operator|.
name|ErrorInfo
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|file
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|e
operator|.
name|file
argument_list|)
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|col
argument_list|)
operator|.
name|append
argument_list|(
literal|"]: "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|message
operator|==
literal|null
operator|&&
name|e
operator|.
name|cause
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|e
operator|.
name|cause
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
name|e
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
specifier|public
name|void
name|throwToolException
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ErrorInfo
name|e
range|:
name|errors
control|)
block|{
name|createMessage
argument_list|(
name|b
argument_list|,
name|e
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ToolException
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|errors
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

