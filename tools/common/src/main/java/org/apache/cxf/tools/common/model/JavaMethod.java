begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaType
operator|.
name|Style
import|;
end_import

begin_class
specifier|public
class|class
name|JavaMethod
implements|implements
name|JavaAnnotatable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JavaMethod
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|PRIMITIVE_MAP
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|operationName
decl_stmt|;
specifier|private
name|String
name|javaDoc
decl_stmt|;
specifier|private
name|JavaReturn
name|javaReturn
decl_stmt|;
specifier|private
name|OperationType
name|style
decl_stmt|;
specifier|private
name|String
name|soapAction
decl_stmt|;
specifier|private
name|SOAPBinding
operator|.
name|Style
name|soapStyle
decl_stmt|;
specifier|private
name|SOAPBinding
operator|.
name|Use
name|soapUse
decl_stmt|;
specifier|private
name|boolean
name|wrapperStyle
decl_stmt|;
specifier|private
name|boolean
name|enableMime
decl_stmt|;
specifier|private
name|JavaInterface
name|javaInterface
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|JavaParameter
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|JavaException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JAnnotation
argument_list|>
name|annotations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|JavaCodeBlock
name|block
decl_stmt|;
specifier|private
name|boolean
name|async
decl_stmt|;
static|static
block|{
name|PRIMITIVE_MAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Character"
argument_list|,
literal|"char"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Boolean"
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Integer"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Long"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Short"
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Byte"
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Float"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Double"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JavaMethod
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|JavaInterface
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JavaMethod
parameter_list|(
name|JavaInterface
name|i
parameter_list|)
block|{
name|this
operator|.
name|javaInterface
operator|=
name|i
expr_stmt|;
name|this
operator|.
name|javaReturn
operator|=
operator|new
name|JavaReturn
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|parameters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|javaReturn
operator|=
operator|new
name|JavaReturn
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getSignature
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|javaReturn
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|javaInterface
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|javaInterface
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|JavaParameter
name|param
range|:
name|parameters
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|JavaInterface
name|getInterface
parameter_list|()
block|{
return|return
name|this
operator|.
name|javaInterface
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|n
expr_stmt|;
block|}
specifier|public
name|String
name|getOperationName
parameter_list|()
block|{
return|return
name|this
operator|.
name|operationName
return|;
block|}
specifier|public
name|void
name|setOperationName
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|this
operator|.
name|operationName
operator|=
name|arg
expr_stmt|;
block|}
specifier|public
name|JavaReturn
name|getReturn
parameter_list|()
block|{
return|return
name|javaReturn
return|;
block|}
specifier|public
name|String
name|getReturnValue
parameter_list|()
block|{
name|String
name|value
init|=
name|getClassName
argument_list|(
name|javaReturn
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
literal|"void"
else|:
name|value
return|;
block|}
specifier|public
name|void
name|setReturn
parameter_list|(
name|JavaReturn
name|rt
parameter_list|)
block|{
if|if
condition|(
name|rt
operator|!=
literal|null
operator|&&
name|rt
operator|.
name|getType
argument_list|()
operator|==
literal|null
operator|&&
name|rt
operator|.
name|getClassName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"FAIL_TO_CREATE_JAVA_OUTPUT_PARAMETER"
argument_list|,
name|LOG
argument_list|,
name|rt
operator|.
name|name
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|this
operator|.
name|javaReturn
operator|=
name|rt
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasParameter
parameter_list|(
name|String
name|paramName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|paramName
operator|.
name|equals
argument_list|(
operator|(
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|replaceParameter
parameter_list|(
name|JavaParameter
name|p1
parameter_list|,
name|JavaParameter
name|p2
parameter_list|)
block|{
name|int
name|index
init|=
operator|(
operator|(
name|ArrayList
argument_list|<
name|?
argument_list|>
operator|)
name|parameters
operator|)
operator|.
name|indexOf
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|p2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p1
operator|.
name|isIN
argument_list|()
operator|&&
name|p2
operator|.
name|isOUT
argument_list|()
operator|)
operator|||
name|p1
operator|.
name|isINOUT
argument_list|()
condition|)
block|{
name|p2
operator|.
name|setStyle
argument_list|(
name|Style
operator|.
name|INOUT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isEquiv
parameter_list|(
name|String
name|c1
parameter_list|,
name|String
name|c2
parameter_list|)
block|{
comment|//for the "in/out" params, we need to check if the
comment|//primitive in is being changed to an in/out
comment|//which would no longer be primitive
name|String
name|s
init|=
name|PRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|c2
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|equals
argument_list|(
name|c1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
return|;
block|}
specifier|public
name|void
name|addParameter
parameter_list|(
name|JavaParameter
name|param
parameter_list|)
block|{
if|if
condition|(
name|hasParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|JavaParameter
name|paramInList
init|=
name|getParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEquiv
argument_list|(
name|paramInList
operator|.
name|getClassName
argument_list|()
argument_list|,
name|param
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|&&
name|paramInList
operator|.
name|isIN
argument_list|()
operator|||
name|paramInList
operator|.
name|isINOUT
argument_list|()
condition|)
block|{
comment|//removeParameter(paramInList);
name|replaceParameter
argument_list|(
name|paramInList
argument_list|,
name|param
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"PARAMETER_ALREADY_EXIST"
argument_list|,
name|LOG
argument_list|,
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|,
name|paramInList
operator|.
name|getType
argument_list|()
argument_list|,
name|param
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|==
literal|null
operator|&&
name|param
operator|.
name|getClassName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"FAIL_TO_CREATE_JAVA_PARAMETER"
argument_list|,
name|LOG
argument_list|,
name|param
operator|.
name|name
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|param
operator|.
name|setMethod
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JavaParameter
name|getParameter
parameter_list|(
name|String
name|paramName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JavaParameter
name|jParam
init|=
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramName
operator|.
name|equals
argument_list|(
name|jParam
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|jParam
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|JavaParameter
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
specifier|public
name|int
name|getParameterCount
parameter_list|()
block|{
return|return
name|parameters
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasException
parameter_list|(
name|JavaException
name|exception
parameter_list|)
block|{
return|return
name|exceptions
operator|.
name|contains
argument_list|(
name|exception
argument_list|)
return|;
block|}
specifier|public
name|void
name|addException
parameter_list|(
name|JavaException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|hasException
argument_list|(
name|exception
argument_list|)
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"EXCEPTION_ALREADY_EXIST"
argument_list|,
name|LOG
argument_list|,
name|exception
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|exceptions
operator|.
name|add
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|JavaException
argument_list|>
name|getExceptions
parameter_list|()
block|{
return|return
name|exceptions
return|;
block|}
specifier|public
name|OperationType
name|getStyle
parameter_list|()
block|{
return|return
name|this
operator|.
name|style
return|;
block|}
specifier|public
name|void
name|setStyle
parameter_list|(
name|OperationType
name|ot
parameter_list|)
block|{
name|this
operator|.
name|style
operator|=
name|ot
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOneWay
parameter_list|()
block|{
return|return
name|OperationType
operator|.
name|ONE_WAY
operator|.
name|equals
argument_list|(
name|getStyle
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isWrapperStyle
parameter_list|()
block|{
return|return
name|this
operator|.
name|wrapperStyle
return|;
block|}
specifier|public
name|void
name|setWrapperStyle
parameter_list|(
name|boolean
name|w
parameter_list|)
block|{
name|this
operator|.
name|wrapperStyle
operator|=
name|w
expr_stmt|;
block|}
specifier|public
name|boolean
name|enableMime
parameter_list|()
block|{
return|return
name|this
operator|.
name|enableMime
return|;
block|}
specifier|public
name|void
name|setMimeEnable
parameter_list|(
name|boolean
name|arg
parameter_list|)
block|{
name|enableMime
operator|=
name|arg
expr_stmt|;
block|}
specifier|public
name|void
name|setSoapStyle
parameter_list|(
name|SOAPBinding
operator|.
name|Style
name|sty
parameter_list|)
block|{
name|this
operator|.
name|soapStyle
operator|=
name|sty
expr_stmt|;
block|}
specifier|public
name|SOAPBinding
operator|.
name|Style
name|getSoapStyle
parameter_list|()
block|{
return|return
name|this
operator|.
name|soapStyle
return|;
block|}
specifier|public
name|void
name|setSoapAction
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|this
operator|.
name|soapAction
operator|=
name|action
expr_stmt|;
block|}
specifier|public
name|String
name|getSoapAction
parameter_list|()
block|{
return|return
name|this
operator|.
name|soapAction
return|;
block|}
specifier|public
name|void
name|setSoapUse
parameter_list|(
name|SOAPBinding
operator|.
name|Use
name|u
parameter_list|)
block|{
name|this
operator|.
name|soapUse
operator|=
name|u
expr_stmt|;
block|}
specifier|public
name|SOAPBinding
operator|.
name|Use
name|getSoapUse
parameter_list|()
block|{
return|return
name|this
operator|.
name|soapUse
return|;
block|}
specifier|public
name|void
name|addAnnotation
parameter_list|(
name|String
name|tag
parameter_list|,
name|JAnnotation
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|annotations
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|annotation
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|importClz
range|:
name|annotation
operator|.
name|getImports
argument_list|()
control|)
block|{
name|getInterface
argument_list|()
operator|.
name|addImport
argument_list|(
name|importClz
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|JAnnotation
argument_list|>
name|getAnnotations
parameter_list|()
block|{
return|return
name|this
operator|.
name|annotations
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|JAnnotation
argument_list|>
name|getAnnotationMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|annotations
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParameterList
parameter_list|()
block|{
return|return
name|getParameterList
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParameterListWithoutAnnotation
parameter_list|()
block|{
return|return
name|getParameterList
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|String
name|getClassName
parameter_list|(
name|JavaType
name|type
parameter_list|)
block|{
if|if
condition|(
name|getInterface
argument_list|()
operator|==
literal|null
operator|||
name|getInterface
argument_list|()
operator|.
name|getPackageName
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|getClassName
argument_list|()
return|;
block|}
if|if
condition|(
name|getInterface
argument_list|()
operator|.
name|getPackageName
argument_list|()
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getPackageName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
return|return
name|type
operator|.
name|getClassName
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParameterList
parameter_list|(
name|boolean
name|includeAnnotation
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JavaParameter
name|parameter
init|=
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeAnnotation
operator|&&
name|parameter
operator|.
name|getAnnotations
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|JAnnotation
name|jan
range|:
name|parameter
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|jan
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameter
operator|.
name|isHolder
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|parameter
operator|.
name|getHolderName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClassName
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClassName
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
operator|(
name|parameters
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n========================\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nMethod:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n-----------\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nReturn:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getReturn
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n------------\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nParameter:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getParameterList
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n------------\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nAnnotations:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n========================\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setInterface
parameter_list|(
name|JavaInterface
name|intf
parameter_list|)
block|{
name|this
operator|.
name|javaInterface
operator|=
name|intf
expr_stmt|;
block|}
specifier|public
name|void
name|annotate
parameter_list|(
name|Annotator
name|annotator
parameter_list|)
block|{
name|annotator
operator|.
name|annotate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setJavaCodeBlock
parameter_list|(
name|JavaCodeBlock
name|b
parameter_list|)
block|{
name|this
operator|.
name|block
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|JavaCodeBlock
name|getJavaCodeBlock
parameter_list|()
block|{
return|return
name|this
operator|.
name|block
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isAsync
parameter_list|()
block|{
return|return
name|async
return|;
block|}
specifier|public
specifier|final
name|void
name|setAsync
parameter_list|(
specifier|final
name|boolean
name|newAsync
parameter_list|)
block|{
name|this
operator|.
name|async
operator|=
name|newAsync
expr_stmt|;
block|}
specifier|public
name|void
name|setJavaDoc
parameter_list|(
name|String
name|doc
parameter_list|)
block|{
name|javaDoc
operator|=
name|JavaInterface
operator|.
name|formatJavaDoc
argument_list|(
name|doc
argument_list|,
literal|"     "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getJavaDoc
parameter_list|()
block|{
return|return
operator|(
name|javaDoc
operator|!=
literal|null
operator|)
condition|?
name|javaDoc
else|:
literal|""
return|;
block|}
block|}
end_class

end_unit

