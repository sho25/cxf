begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2ws
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ReflectionServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaReturn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaType
operator|.
name|Style
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JavaFirstUtil
block|{
specifier|private
name|JavaFirstUtil
parameter_list|()
block|{              }
specifier|public
specifier|static
name|JavaInterface
name|serviceInfo2JavaInf
parameter_list|(
name|ServiceInfo
name|service
parameter_list|)
block|{
name|JavaInterface
name|javaInf
init|=
operator|new
name|JavaInterface
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|inf
init|=
name|service
operator|.
name|getInterface
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationInfo
name|op
range|:
name|inf
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|JavaMethod
name|jm
init|=
operator|new
name|JavaMethod
argument_list|()
decl_stmt|;
name|Method
name|m
init|=
operator|(
name|Method
operator|)
name|op
operator|.
name|getProperty
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|METHOD
argument_list|)
decl_stmt|;
name|jm
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Type
name|type
range|:
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
control|)
block|{
name|JavaParameter
name|jp
init|=
operator|new
name|JavaParameter
argument_list|()
decl_stmt|;
name|jp
operator|.
name|setClassName
argument_list|(
name|getClassName
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|jp
operator|.
name|setStyle
argument_list|(
name|Style
operator|.
name|IN
argument_list|)
expr_stmt|;
name|jp
operator|.
name|setName
argument_list|(
literal|"arg"
operator|+
name|i
operator|++
argument_list|)
expr_stmt|;
name|jm
operator|.
name|addParameter
argument_list|(
name|jp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Type
name|type
range|:
name|m
operator|.
name|getGenericExceptionTypes
argument_list|()
control|)
block|{
name|JavaException
name|jex
init|=
operator|new
name|JavaException
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getClassName
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|jex
operator|.
name|setClassName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|jex
operator|.
name|setName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|jm
operator|.
name|addException
argument_list|(
name|jex
argument_list|)
expr_stmt|;
block|}
name|JavaReturn
name|jreturn
init|=
operator|new
name|JavaReturn
argument_list|()
decl_stmt|;
name|jreturn
operator|.
name|setClassName
argument_list|(
name|getClassName
argument_list|(
name|m
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jreturn
operator|.
name|setStyle
argument_list|(
name|Style
operator|.
name|OUT
argument_list|)
expr_stmt|;
name|jm
operator|.
name|setReturn
argument_list|(
name|jreturn
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|javaInf
operator|.
name|setPackageName
argument_list|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|javaInf
operator|.
name|setPackageName
argument_list|(
name|ToolConstants
operator|.
name|DEFAULT_PACKAGE_NAME
argument_list|)
expr_stmt|;
block|}
name|javaInf
operator|.
name|addMethod
argument_list|(
name|jm
argument_list|)
expr_stmt|;
name|javaInf
operator|.
name|setName
argument_list|(
name|inf
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|jm
operator|.
name|getParameterList
argument_list|()
expr_stmt|;
block|}
return|return
name|javaInf
return|;
block|}
specifier|public
specifier|static
name|String
name|getClassName
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|Class
name|clz
init|=
operator|(
name|Class
operator|)
name|type
decl_stmt|;
if|if
condition|(
name|clz
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|clz
operator|.
name|getComponentType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[]"
return|;
block|}
else|else
block|{
return|return
name|clz
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

