begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|processor
operator|.
name|internal
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|generator
operator|.
name|wsdl11
operator|.
name|annotator
operator|.
name|WrapperBeanAnnotator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|generator
operator|.
name|wsdl11
operator|.
name|annotator
operator|.
name|WrapperBeanFieldAnnotator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|generator
operator|.
name|wsdl11
operator|.
name|model
operator|.
name|WrapperBeanClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|AnnotationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|NameUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|URIParserUtil
import|;
end_import

begin_class
specifier|public
class|class
name|Wrapper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Wrapper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|QName
name|name
decl_stmt|;
specifier|private
name|WrapperBeanClass
name|javaClass
decl_stmt|;
specifier|private
name|Method
name|method
decl_stmt|;
specifier|private
name|boolean
name|isSamePackage
decl_stmt|;
specifier|private
name|OperationInfo
name|operationInfo
decl_stmt|;
specifier|private
name|String
name|className
decl_stmt|;
specifier|public
name|void
name|setOperationInfo
parameter_list|(
specifier|final
name|OperationInfo
name|op
parameter_list|)
block|{
name|this
operator|.
name|operationInfo
operator|=
name|op
expr_stmt|;
name|setMethod
argument_list|(
operator|(
name|Method
operator|)
name|op
operator|.
name|getProperty
argument_list|(
literal|"operation.method"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMethod
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|m
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|QName
name|n
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|n
expr_stmt|;
block|}
specifier|public
name|void
name|setClassName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|className
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
specifier|public
name|WrapperBeanClass
name|getWrapperBeanClass
parameter_list|(
specifier|final
name|Method
name|m
parameter_list|)
block|{
return|return
operator|new
name|WrapperBeanClass
argument_list|()
return|;
block|}
specifier|protected
name|WrapperBeanClass
name|getWrapperBeanClass
parameter_list|(
specifier|final
name|QName
name|wrapperBeanName
parameter_list|)
block|{
name|WrapperBeanClass
name|jClass
init|=
operator|new
name|WrapperBeanClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|wrapperBeanName
operator|==
literal|null
condition|)
block|{
return|return
name|jClass
return|;
block|}
name|String
name|ns
init|=
name|wrapperBeanName
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|jClass
operator|.
name|setNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|jClass
operator|.
name|setPackageName
argument_list|(
name|URIParserUtil
operator|.
name|getPackageName
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
name|jClass
operator|.
name|setName
argument_list|(
name|NameUtil
operator|.
name|mangleNameToClassName
argument_list|(
name|wrapperBeanName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jClass
operator|.
name|setElementName
argument_list|(
name|wrapperBeanName
argument_list|)
expr_stmt|;
return|return
name|jClass
return|;
block|}
specifier|private
name|WrapperBeanClass
name|merge
parameter_list|(
specifier|final
name|WrapperBeanClass
name|c1
parameter_list|,
specifier|final
name|WrapperBeanClass
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c1
operator|.
name|getElementName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c1
operator|.
name|setElementName
argument_list|(
name|c2
operator|.
name|getElementName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|c1
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|c1
operator|.
name|setNamespace
argument_list|(
name|c2
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|c1
operator|.
name|getPackageName
argument_list|()
argument_list|)
condition|)
block|{
name|c1
operator|.
name|setPackageName
argument_list|(
name|c2
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|isSamePackage
operator|=
name|c1
operator|.
name|getPackageName
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|c1
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|c1
operator|.
name|setName
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c1
return|;
block|}
specifier|public
name|WrapperBeanClass
name|getJavaClass
parameter_list|()
block|{
if|if
condition|(
name|javaClass
operator|==
literal|null
condition|)
block|{
name|WrapperBeanClass
name|jClass1
init|=
name|getWrapperBeanClass
argument_list|(
name|this
operator|.
name|name
argument_list|)
decl_stmt|;
name|WrapperBeanClass
name|jClass2
init|=
name|getWrapperBeanClass
argument_list|(
name|this
operator|.
name|method
argument_list|)
decl_stmt|;
name|javaClass
operator|=
name|merge
argument_list|(
name|jClass2
argument_list|,
name|jClass1
argument_list|)
expr_stmt|;
block|}
return|return
name|javaClass
return|;
block|}
specifier|public
name|WrapperBeanClass
name|buildWrapperBeanClass
parameter_list|()
block|{
name|WrapperBeanClass
name|jClass
init|=
name|getJavaClass
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JavaField
argument_list|>
name|fields
init|=
name|buildFields
argument_list|()
decl_stmt|;
for|for
control|(
name|JavaField
name|field
range|:
name|fields
control|)
block|{
name|field
operator|.
name|setOwner
argument_list|(
name|jClass
argument_list|)
expr_stmt|;
name|field
operator|.
name|annotate
argument_list|(
operator|new
name|WrapperBeanFieldAnnotator
argument_list|()
argument_list|)
expr_stmt|;
name|jClass
operator|.
name|addField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|jClass
operator|.
name|appendGetter
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|jClass
operator|.
name|appendSetter
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|jClass
operator|.
name|annotate
argument_list|(
operator|new
name|WrapperBeanAnnotator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jClass
return|;
block|}
specifier|protected
name|String
name|getPackageName
parameter_list|(
specifier|final
name|Method
name|m
parameter_list|)
block|{
name|String
name|pkg
init|=
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|pkg
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|ToolConstants
operator|.
name|DEFAULT_PACKAGE_NAME
else|:
name|pkg
return|;
block|}
specifier|public
name|boolean
name|isWrapperAbsent
parameter_list|()
block|{
return|return
name|isWrapperAbsent
argument_list|(
name|this
operator|.
name|method
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isWrapperAbsent
parameter_list|(
specifier|final
name|Method
name|m
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isWrapperBeanClassNotExist
parameter_list|()
block|{
try|try
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"LOADING_WRAPPER_CLASS"
argument_list|,
name|LOG
argument_list|,
name|getJavaClass
argument_list|()
operator|.
name|getFullClassName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getWrapperClass
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|ToolException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|boolean
name|isToDifferentPackage
parameter_list|()
block|{
return|return
operator|!
name|isSamePackage
return|;
block|}
specifier|public
name|Class
name|getWrapperClass
parameter_list|()
block|{
try|try
block|{
return|return
name|AnnotationUtil
operator|.
name|loadClass
argument_list|(
name|getJavaClass
argument_list|()
operator|.
name|getFullClassName
argument_list|()
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"LOAD_WRAPPER_CLASS_FAILED"
argument_list|,
name|LOG
argument_list|,
name|getJavaClass
argument_list|()
operator|.
name|getFullClassName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|boolean
name|isBuiltInTypes
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
if|if
condition|(
name|clz
operator|==
literal|null
operator|||
name|clz
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|"java.lang"
operator|.
name|equals
argument_list|(
name|clz
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|JavaField
argument_list|>
name|buildFields
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|JavaField
argument_list|>
argument_list|()
return|;
block|}
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|this
operator|.
name|method
return|;
block|}
specifier|public
name|OperationInfo
name|getOperationInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|operationInfo
return|;
block|}
specifier|protected
name|String
name|getTypeString
parameter_list|(
name|Type
name|t
parameter_list|)
block|{
name|String
name|type
init|=
literal|"Object"
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|Class
condition|)
block|{
name|Class
name|clz
init|=
operator|(
name|Class
operator|)
name|t
decl_stmt|;
if|if
condition|(
name|clz
operator|.
name|isArray
argument_list|()
condition|)
block|{
if|if
condition|(
name|isBuiltInTypes
argument_list|(
name|clz
operator|.
name|getComponentType
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
name|clz
operator|.
name|getComponentType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"[]"
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|clz
operator|.
name|getComponentType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[]"
expr_stmt|;
block|}
block|}
else|else
block|{
name|type
operator|=
name|clz
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|t
decl_stmt|;
name|Class
name|c
init|=
operator|(
name|Class
operator|)
name|pt
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Holder
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
operator|&&
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|Class
condition|)
block|{
name|type
operator|=
name|getTypeString
argument_list|(
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|t
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|gat
init|=
operator|(
name|GenericArrayType
operator|)
name|t
decl_stmt|;
name|type
operator|=
name|gat
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|type
operator|=
name|type
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
specifier|protected
name|WebParam
name|getWebParamAnnotation
parameter_list|(
specifier|final
name|Annotation
index|[]
name|annotations
parameter_list|)
block|{
for|for
control|(
name|Annotation
name|annotation
range|:
name|annotations
control|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|WebParam
condition|)
block|{
return|return
operator|(
name|WebParam
operator|)
name|annotation
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

