begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|processor
operator|.
name|internal
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|generator
operator|.
name|wsdl11
operator|.
name|annotator
operator|.
name|WrapperBeanAnnotator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|generator
operator|.
name|wsdl11
operator|.
name|model
operator|.
name|WrapperBeanClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|AnnotationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|URIParserUtil
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|FaultBean
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXCLUDED_GETTER
init|=
operator|new
name|String
index|[]
block|{
literal|"getCause"
block|,
literal|"getLocalizedMessage"
block|,
literal|"getStackTrace"
block|,
literal|"getSuppressed"
block|,
literal|"getClass"
block|}
decl_stmt|;
specifier|public
name|boolean
name|faultBeanExists
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionClass
parameter_list|)
block|{
name|String
name|fb
init|=
name|getWebFaultBean
argument_list|(
name|exceptionClass
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fb
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|AnnotationUtil
operator|.
name|loadClass
argument_list|(
name|fb
argument_list|,
name|exceptionClass
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|getWebFaultBean
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionClass
parameter_list|)
block|{
name|WebFault
name|fault
init|=
name|exceptionClass
operator|.
name|getAnnotation
argument_list|(
name|WebFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fault
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|fault
operator|.
name|faultBean
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isWebFaultAbsent
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionClass
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|getWebFaultBean
argument_list|(
name|exceptionClass
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|WrapperBeanClass
name|transform
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionClass
parameter_list|,
specifier|final
name|String
name|defaultPackage
parameter_list|)
block|{
name|WrapperBeanClass
name|jClass
init|=
operator|new
name|WrapperBeanClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|isWebFaultAbsent
argument_list|(
name|exceptionClass
argument_list|)
condition|)
block|{
name|jClass
operator|.
name|setName
argument_list|(
name|exceptionClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"Bean"
argument_list|)
expr_stmt|;
name|jClass
operator|.
name|setPackageName
argument_list|(
name|defaultPackage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jClass
operator|.
name|setFullClassName
argument_list|(
name|getWebFaultBean
argument_list|(
name|exceptionClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buildBeanFields
argument_list|(
name|exceptionClass
argument_list|,
name|jClass
argument_list|)
expr_stmt|;
name|String
name|pkg
init|=
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|exceptionClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jClass
operator|.
name|setElementName
argument_list|(
operator|new
name|QName
argument_list|(
name|URIParserUtil
operator|.
name|getNamespace
argument_list|(
name|pkg
argument_list|)
argument_list|,
name|exceptionClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jClass
operator|.
name|setElementName
argument_list|(
operator|new
name|QName
argument_list|(
name|URIParserUtil
operator|.
name|getNamespace
argument_list|(
name|ToolConstants
operator|.
name|DEFAULT_PACKAGE_NAME
argument_list|)
argument_list|,
name|exceptionClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jClass
operator|.
name|annotate
argument_list|(
operator|new
name|WrapperBeanAnnotator
argument_list|(
name|exceptionClass
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jClass
return|;
block|}
specifier|private
name|String
name|getFieldName
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
name|String
name|name
init|=
name|method
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|char
name|chars
index|[]
init|=
name|name
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|chars
index|[
literal|0
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|chars
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isIncludedGetter
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|&&
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|EXCLUDED_GETTER
argument_list|)
operator|.
name|contains
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|buildBeanFields
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionClass
parameter_list|,
specifier|final
name|JavaClass
name|jClass
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|JavaField
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|JavaField
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|exceptionClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|isIncludedGetter
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|JavaField
name|field
init|=
operator|new
name|JavaField
argument_list|(
name|getFieldName
argument_list|(
name|method
argument_list|)
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|field
operator|.
name|setOwner
argument_list|(
name|jClass
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JavaField
argument_list|>
name|ent
range|:
name|fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|jClass
operator|.
name|addField
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|jClass
operator|.
name|appendGetter
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|jClass
operator|.
name|appendSetter
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

