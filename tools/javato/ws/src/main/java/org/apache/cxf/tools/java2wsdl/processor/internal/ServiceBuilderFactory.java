begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|processor
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|AbstractServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|ServiceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|processor
operator|.
name|FrontendFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|NameUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_comment
comment|/**  * This class constructs ServiceBuilder objects. These objects are used to access the services  * and the data bindings to generate the wsdl.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ServiceBuilderFactory
block|{
specifier|private
specifier|static
name|ServiceBuilderFactory
name|instance
decl_stmt|;
specifier|private
specifier|static
name|FrontendFactory
name|frontend
decl_stmt|;
specifier|private
specifier|static
name|String
name|databindingName
decl_stmt|;
specifier|private
name|Class
name|serviceClass
decl_stmt|;
specifier|private
name|ServiceBuilderFactory
parameter_list|()
block|{
name|frontend
operator|=
name|FrontendFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|databindingName
operator|=
name|ToolConstants
operator|.
name|DEFAULT_DATA_BINDING_NAME
expr_stmt|;
block|}
specifier|public
specifier|static
name|ServiceBuilderFactory
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|ServiceBuilderFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
specifier|public
name|ServiceBuilder
name|newBuilder
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
return|return
name|newBuilder
argument_list|(
name|applicationContext
argument_list|,
name|getStyle
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Convert a parameter value to the name of a bean we'd use for a data binding.      * @param databindingName      * @return      */
specifier|public
specifier|static
name|String
name|databindingNameToBeanName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
return|return
name|NameUtil
operator|.
name|capitalize
argument_list|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|+
name|ToolConstants
operator|.
name|DATABIND_BEAN_NAME_SUFFIX
return|;
block|}
specifier|public
name|ServiceBuilder
name|newBuilder
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|FrontendFactory
operator|.
name|Style
name|s
parameter_list|)
block|{
name|DataBinding
name|dataBinding
decl_stmt|;
name|String
name|databindingBeanName
init|=
name|databindingNameToBeanName
argument_list|(
name|databindingName
argument_list|)
decl_stmt|;
try|try
block|{
name|dataBinding
operator|=
operator|(
name|DataBinding
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
name|databindingBeanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
literal|"Cannot get databinding bean "
operator|+
name|databindingBeanName
operator|+
literal|" for databinding "
operator|+
name|databindingName
argument_list|)
throw|;
block|}
name|String
name|beanName
init|=
name|getBuilderBeanName
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ServiceBuilder
name|builder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|builder
operator|=
operator|(
name|ServiceBuilder
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
name|beanName
argument_list|,
name|ServiceBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|AbstractServiceFactory
name|serviceFactory
init|=
operator|(
name|AbstractServiceFactory
operator|)
name|builder
decl_stmt|;
name|serviceFactory
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
literal|"Can not get ServiceBuilder bean "
operator|+
name|beanName
operator|+
literal|"to initialize the ServiceBuilder for style: "
operator|+
name|s
operator|+
literal|" Reason: \n"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|builder
operator|.
name|setServiceClass
argument_list|(
name|serviceClass
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Return the name of a prototype bean from Spring that can provide the service. The use of a bean      * allows for the possibility of an override.      * @param s Style of service      * @return name of bean.      */
specifier|protected
name|String
name|getBuilderBeanName
parameter_list|(
name|FrontendFactory
operator|.
name|Style
name|s
parameter_list|)
block|{
return|return
name|s
operator|+
literal|"ServiceBuilderBean"
return|;
block|}
specifier|public
name|FrontendFactory
operator|.
name|Style
name|getStyle
parameter_list|()
block|{
name|frontend
operator|.
name|setServiceClass
argument_list|(
name|this
operator|.
name|serviceClass
argument_list|)
expr_stmt|;
return|return
name|frontend
operator|.
name|discoverStyle
argument_list|()
return|;
block|}
specifier|public
name|void
name|setServiceClass
parameter_list|(
name|Class
name|c
parameter_list|)
block|{
name|this
operator|.
name|serviceClass
operator|=
name|c
expr_stmt|;
block|}
comment|/**      * Return the databinding name.      * @return      */
specifier|public
name|String
name|getDatabindingName
parameter_list|()
block|{
return|return
name|databindingName
return|;
block|}
comment|/**      * Set the databinding name      * @param databindingName      */
specifier|public
name|void
name|setDatabindingName
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|databindingName
operator|=
name|arg
expr_stmt|;
block|}
block|}
end_class

end_unit

