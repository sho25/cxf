begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|generator
operator|.
name|wsdl11
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Compiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|VelocityGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|generator
operator|.
name|AbstractGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|FileWriterUtil
import|;
end_import

begin_class
specifier|public
class|class
name|BeanGenerator
extends|extends
name|AbstractGenerator
argument_list|<
name|File
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEMPLATE
init|=
literal|"org/apache/cxf/tools/java2wsdl/generator/wsdl11/wrapperbean.vm"
decl_stmt|;
specifier|private
name|File
name|compileToDir
decl_stmt|;
specifier|public
name|void
name|setCompileToDir
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|compileToDir
operator|=
name|f
expr_stmt|;
block|}
specifier|protected
name|Collection
argument_list|<
name|JavaClass
argument_list|>
name|generateBeanClasses
parameter_list|(
specifier|final
name|ServiceInfo
name|service
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|File
name|generate
parameter_list|(
specifier|final
name|File
name|sourcedir
parameter_list|)
block|{
name|File
name|dir
init|=
name|getOutputBase
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
name|dir
operator|=
name|sourcedir
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
name|dir
operator|=
operator|new
name|File
argument_list|(
literal|"./"
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|JavaClass
argument_list|>
name|wrapperClasses
init|=
name|generateBeanClasses
argument_list|(
name|getServiceModel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wrapperClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|generateAndCompile
argument_list|(
name|wrapperClasses
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
specifier|public
name|void
name|generateAndCompile
parameter_list|(
name|Collection
argument_list|<
name|JavaClass
argument_list|>
name|wrapperClasses
parameter_list|,
name|File
name|dir
parameter_list|)
block|{
name|VelocityGenerator
name|generator
init|=
operator|new
name|VelocityGenerator
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|generator
operator|.
name|setBaseDir
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|generatedFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|JavaClass
name|wrapperClass
range|:
name|wrapperClasses
control|)
block|{
name|generator
operator|.
name|setCommonAttributes
argument_list|()
expr_stmt|;
name|generator
operator|.
name|setAttributes
argument_list|(
literal|"bean"
argument_list|,
name|wrapperClass
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|generator
operator|.
name|parseOutputName
argument_list|(
name|wrapperClass
operator|.
name|getPackageName
argument_list|()
argument_list|,
name|wrapperClass
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|generatedFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|generator
operator|.
name|doWrite
argument_list|(
name|TEMPLATE
argument_list|,
name|FileWriterUtil
operator|.
name|getWriter
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|.
name|clearAttributes
argument_list|()
expr_stmt|;
block|}
comment|//compile the classes
name|Compiler
name|compiler
init|=
operator|new
name|Compiler
argument_list|()
decl_stmt|;
name|compiler
operator|.
name|setOutputDir
argument_list|(
name|compileToDir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|generatedFiles
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|generatedFiles
control|)
block|{
name|files
operator|.
name|add
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|compiler
operator|.
name|compileFiles
argument_list|(
name|files
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|files
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
condition|)
block|{
comment|// TODO - compile issue
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

