begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2ws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|AbstractCXFToolContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|ToolSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
operator|.
name|BadUsageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
operator|.
name|CommandDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
operator|.
name|ErrorVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|processor
operator|.
name|JavaToWSDLProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|processor
operator|.
name|internal
operator|.
name|jaxws
operator|.
name|JAXWSFrontEndProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2wsdl
operator|.
name|processor
operator|.
name|internal
operator|.
name|simple
operator|.
name|SimpleFrontEndProcessor
import|;
end_import

begin_class
specifier|public
class|class
name|JavaToWSContainer
extends|extends
name|AbstractCXFToolContainer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JavaToWSContainer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOOL_NAME
init|=
literal|"java2ws"
decl_stmt|;
specifier|public
name|JavaToWSContainer
parameter_list|(
name|ToolSpec
name|toolspec
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|TOOL_NAME
argument_list|,
name|toolspec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|boolean
name|exitOnFinish
parameter_list|)
throws|throws
name|ToolException
block|{
comment|//ErrorVisitor errors = new ErrorVisitor();
try|try
block|{
name|super
operator|.
name|execute
argument_list|(
name|exitOnFinish
argument_list|)
expr_stmt|;
comment|//checkParams(errors);
if|if
condition|(
operator|!
name|hasInfoOption
argument_list|()
condition|)
block|{
name|ToolContext
name|env
init|=
operator|new
name|ToolContext
argument_list|()
decl_stmt|;
name|env
operator|.
name|setParameters
argument_list|(
name|getParametersMap
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_SOURCEDIR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_SOURCEDIR
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isVerboseOn
argument_list|()
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_VERBOSE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|String
name|ft
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_FRONTEND
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
operator|||
name|ToolConstants
operator|.
name|JAXWS_FRONTEND
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
condition|)
block|{
name|ft
operator|=
name|ToolConstants
operator|.
name|JAXWS_FRONTEND
expr_stmt|;
block|}
else|else
block|{
name|ft
operator|=
name|ToolConstants
operator|.
name|SIMPLE_FRONTEND
expr_stmt|;
comment|//use aegis databinding for simple front end by default
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_DATABINDING
argument_list|,
name|ToolConstants
operator|.
name|AEGIS_DATABINDING
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_FRONTEND
argument_list|,
name|ft
argument_list|)
expr_stmt|;
name|processWSDL
argument_list|(
name|env
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ToolException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|BadUsageException
condition|)
block|{
name|printUsageException
argument_list|(
name|TOOL_NAME
argument_list|,
operator|(
name|BadUsageException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVerboseOn
argument_list|()
condition|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"Error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|isVerboseOn
argument_list|()
condition|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ToolException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processWSDL
parameter_list|(
name|ToolContext
name|env
parameter_list|,
name|String
name|ft
parameter_list|)
block|{
name|Processor
name|processor
init|=
operator|new
name|JavaToWSDLProcessor
argument_list|()
decl_stmt|;
name|processor
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|()
expr_stmt|;
if|if
condition|(
name|ft
operator|.
name|equals
argument_list|(
name|ToolConstants
operator|.
name|JAXWS_FRONTEND
argument_list|)
condition|)
block|{
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_SERVER
argument_list|)
operator|||
name|env
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_CLIENT
argument_list|)
condition|)
block|{
name|processor
operator|=
operator|new
name|JAXWSFrontEndProcessor
argument_list|()
expr_stmt|;
name|processor
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|processor
operator|=
operator|new
name|SimpleFrontEndProcessor
argument_list|()
expr_stmt|;
name|processor
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkParams
parameter_list|(
name|ErrorVisitor
name|errs
parameter_list|)
throws|throws
name|ToolException
block|{
name|super
operator|.
name|checkParams
argument_list|(
name|errs
argument_list|)
expr_stmt|;
name|CommandDocument
name|doc
init|=
name|super
operator|.
name|getCommandDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|hasParameter
argument_list|(
name|ToolConstants
operator|.
name|CFG_FRONTEND
argument_list|)
condition|)
block|{
name|String
name|ft
init|=
name|doc
operator|.
name|getParameter
argument_list|(
name|ToolConstants
operator|.
name|CFG_FRONTEND
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ToolConstants
operator|.
name|JAXWS_FRONTEND
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
operator|&&
operator|!
name|ToolConstants
operator|.
name|SIMPLE_FRONTEND
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"INVALID_FRONTEND"
argument_list|,
name|LOG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ft
block|}
argument_list|)
decl_stmt|;
name|errs
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|UserError
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ToolConstants
operator|.
name|SIMPLE_FRONTEND
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
operator|&&
name|doc
operator|.
name|getParameter
argument_list|(
name|ToolConstants
operator|.
name|CFG_DATABINDING
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|ToolConstants
operator|.
name|AEGIS_DATABINDING
operator|.
name|equals
argument_list|(
name|doc
operator|.
name|getParameter
argument_list|(
name|ToolConstants
operator|.
name|CFG_DATABINDING
argument_list|)
argument_list|)
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"INVALID_DATABINDING_FOR_SIMPLE"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
name|errs
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|UserError
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doc
operator|.
name|hasParameter
argument_list|(
name|ToolConstants
operator|.
name|CFG_WRAPPERBEAN
argument_list|)
condition|)
block|{
name|String
name|ft
init|=
name|doc
operator|.
name|getParameter
argument_list|(
name|ToolConstants
operator|.
name|CFG_FRONTEND
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
operator|!
name|ToolConstants
operator|.
name|JAXWS_FRONTEND
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"WRAPPERBEAN_WITHOUT_JAXWS"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
name|errs
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|UserError
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|errs
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"PARAMETER_MISSING"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|,
operator|new
name|BadUsageException
argument_list|(
name|getUsage
argument_list|()
argument_list|,
name|errs
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

