begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|java2ws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|factory
operator|.
name|WSDLFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AegisTest
extends|extends
name|ToolTestBase
block|{
specifier|private
name|File
name|output
decl_stmt|;
specifier|private
name|String
name|cp
decl_stmt|;
specifier|private
name|File
name|inputData
decl_stmt|;
specifier|private
name|void
name|checkStdErr
parameter_list|()
block|{
name|String
name|err
init|=
name|getStdErr
argument_list|()
decl_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"errors: "
argument_list|,
literal|""
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|startUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cp
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|output
operator|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|=
operator|new
name|File
argument_list|(
name|output
argument_list|,
literal|"/generated/"
argument_list|)
expr_stmt|;
name|url
operator|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|inputData
operator|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|mkDir
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.class.path"
argument_list|,
name|cp
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|removeDir
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|File
name|outputFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|output
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|name
argument_list|)
decl_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAegisBasic
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sei
init|=
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|fortest
operator|.
name|aegis2ws
operator|.
name|TestAegisSEI
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-wsdl"
block|,
literal|"-o"
block|,
name|output
operator|.
name|getPath
argument_list|()
operator|+
literal|"/aegis.wsdl"
block|,
literal|"-verbose"
block|,
literal|"-d"
block|,
name|output
operator|.
name|getPath
argument_list|()
block|,
literal|"-s"
block|,
name|output
operator|.
name|getPath
argument_list|()
block|,
literal|"-frontend"
block|,
literal|"jaxws"
block|,
literal|"-databinding"
block|,
literal|"aegis"
block|,
literal|"-client"
block|,
literal|"-server"
block|,
name|sei
block|}
decl_stmt|;
name|File
name|wsdlFile
init|=
literal|null
decl_stmt|;
name|wsdlFile
operator|=
name|outputFile
argument_list|(
literal|"aegis.wsdl"
argument_list|)
expr_stmt|;
name|JavaToWS
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|checkStdErr
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wsdl is not generated"
argument_list|,
name|wsdlFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLReader
name|reader
init|=
name|WSDLFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newWSDLReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
literal|"javax.wsdl.verbose"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Definition
name|def
init|=
name|reader
operator|.
name|readWSDL
argument_list|(
name|wsdlFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Document
name|wsdl
init|=
name|WSDLFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newWSDLWriter
argument_list|()
operator|.
name|getDocument
argument_list|(
name|def
argument_list|)
decl_stmt|;
name|addNamespace
argument_list|(
literal|"ns0"
argument_list|,
literal|"http://aegis2ws.fortest.tools.cxf.apache.org/"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//xsd:element[@type='ns0:Something']"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
argument_list|(
literal|"Failed on Windows Vista"
argument_list|)
specifier|public
name|void
name|testAegisReconfigureDatabinding
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sei
init|=
literal|"org.apache.cxf.tools.fortest.aegis2ws.TestAegisSEI"
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-wsdl"
block|,
literal|"-o"
block|,
name|output
operator|.
name|getPath
argument_list|()
operator|+
literal|"/aegis.wsdl"
block|,
literal|"-beans"
block|,
operator|new
name|File
argument_list|(
name|inputData
argument_list|,
literal|"revisedAegisDefaultBeans.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-verbose"
block|,
literal|"-s"
block|,
name|output
operator|.
name|getPath
argument_list|()
block|,
literal|"-frontend"
block|,
literal|"jaxws"
block|,
literal|"-databinding"
block|,
literal|"aegis"
block|,
literal|"-client"
block|,
literal|"-server"
block|,
name|sei
block|}
decl_stmt|;
name|File
name|wsdlFile
init|=
literal|null
decl_stmt|;
name|wsdlFile
operator|=
name|outputFile
argument_list|(
literal|"aegis.wsdl"
argument_list|)
expr_stmt|;
name|JavaToWS
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|checkStdErr
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wsdl is not generated"
argument_list|,
name|wsdlFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLReader
name|reader
init|=
name|WSDLFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newWSDLReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
literal|"javax.wsdl.verbose"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Definition
name|def
init|=
name|reader
operator|.
name|readWSDL
argument_list|(
name|wsdlFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Document
name|wsdl
init|=
name|WSDLFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newWSDLWriter
argument_list|()
operator|.
name|getDocument
argument_list|(
name|def
argument_list|)
decl_stmt|;
name|addNamespace
argument_list|(
literal|"ns0"
argument_list|,
literal|"http://aegis2ws.fortest.tools.cxf.apache.org/"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//xsd:element[@type='ns0:Something']"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|assertXPathEquals
argument_list|(
literal|"//xsd:complexType[@name='Something']/"
operator|+
literal|"xsd:sequence/xsd:element[@name='multiple']/@minOccurs"
argument_list|,
literal|"50"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"//xsd:complexType[@name='Something']/"
operator|+
literal|"xsd:sequence/xsd:element[@name='singular']/@minOccurs"
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

