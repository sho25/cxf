begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|databinding
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|util
operator|.
name|StreamReaderDelegate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLFilterImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|ClassType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|CodeWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JCodeModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JDefinedClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|BadCommandLineException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|ErrorReceiver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|XJCListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|S2JJAXBModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|SchemaCompiler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|TypeAndAnnotation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|XJC
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|reader
operator|.
name|internalizer
operator|.
name|AbstractReferenceFinderImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|reader
operator|.
name|internalizer
operator|.
name|DOMForest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|reader
operator|.
name|internalizer
operator|.
name|InternalizationLogic
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|reader
operator|.
name|xmlschema
operator|.
name|parser
operator|.
name|LSInputSAXWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|reader
operator|.
name|xmlschema
operator|.
name|parser
operator|.
name|XMLSchemaInternalizationLogic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|OASISCatalogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|OASISCatalogManagerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|URIParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|DefaultValueWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|ClassCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|OutputStreamCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|DataBindingProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|DefaultValueProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|RandomValueProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSerializer
operator|.
name|XmlSchemaSerializerException
import|;
end_import

begin_class
specifier|public
class|class
name|JAXBDataBinding
implements|implements
name|DataBindingProfile
block|{
specifier|static
specifier|final
name|String
name|XJCVERSION
decl_stmt|;
static|static
block|{
name|VersionDetectListener
name|listener
init|=
operator|new
name|VersionDetectListener
argument_list|()
decl_stmt|;
try|try
block|{
name|Driver
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-version"
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandLineException
name|e
parameter_list|)
block|{
comment|//
block|}
name|XJCVERSION
operator|=
name|listener
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
specifier|static
specifier|final
class|class
name|VersionDetectListener
extends|extends
name|XJCListener
block|{
specifier|private
name|String
name|s
init|=
literal|"2.1"
decl_stmt|;
name|VersionDetectListener
parameter_list|()
block|{         }
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|s
return|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
block|{         }
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
block|{         }
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
block|{         }
specifier|public
name|void
name|info
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
block|{         }
specifier|public
name|void
name|message
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|msg
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|msg
operator|=
name|msg
operator|.
name|substring
argument_list|(
name|msg
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|msg
argument_list|)
condition|)
block|{
name|s
operator|=
name|msg
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|LocationFilterReader
extends|extends
name|StreamReaderDelegate
block|{
name|boolean
name|isImport
decl_stmt|;
name|boolean
name|isInclude
decl_stmt|;
name|int
name|locIdx
init|=
operator|-
literal|1
decl_stmt|;
name|OASISCatalogManager
name|catalog
decl_stmt|;
name|LocationFilterReader
parameter_list|(
name|XMLStreamReader
name|read
parameter_list|,
name|OASISCatalogManager
name|catalog
parameter_list|)
block|{
name|super
argument_list|(
name|read
argument_list|)
expr_stmt|;
name|this
operator|.
name|catalog
operator|=
name|catalog
expr_stmt|;
block|}
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|int
name|i
init|=
name|super
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
name|QName
name|qn
init|=
name|super
operator|.
name|getName
argument_list|()
decl_stmt|;
name|isInclude
operator|=
name|qn
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA_INCLUDE
argument_list|)
expr_stmt|;
name|isImport
operator|=
name|qn
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA_IMPORT
argument_list|)
expr_stmt|;
if|if
condition|(
name|isImport
condition|)
block|{
name|findLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|isImport
operator|=
literal|false
expr_stmt|;
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
specifier|public
name|int
name|nextTag
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|int
name|i
init|=
name|super
operator|.
name|nextTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
name|QName
name|qn
init|=
name|super
operator|.
name|getName
argument_list|()
decl_stmt|;
name|isInclude
operator|=
name|qn
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA_INCLUDE
argument_list|)
expr_stmt|;
name|isImport
operator|=
name|qn
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA_IMPORT
argument_list|)
expr_stmt|;
if|if
condition|(
name|isImport
condition|)
block|{
name|findLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|isImport
operator|=
literal|false
expr_stmt|;
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
specifier|private
name|void
name|findLocation
parameter_list|()
block|{
name|locIdx
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
name|super
operator|.
name|getAttributeCount
argument_list|()
init|;
name|x
operator|>
literal|0
condition|;
operator|--
name|x
control|)
block|{
name|String
name|nm
init|=
name|super
operator|.
name|getAttributeLocalName
argument_list|(
name|x
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"schemaLocation"
operator|.
name|equals
argument_list|(
name|nm
argument_list|)
condition|)
block|{
name|locIdx
operator|=
name|x
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getAttributeCount
parameter_list|()
block|{
name|int
name|i
init|=
name|super
operator|.
name|getAttributeCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|locIdx
operator|!=
operator|-
literal|1
condition|)
block|{
operator|--
name|i
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
specifier|private
name|int
name|mapIdx
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|locIdx
operator|!=
operator|-
literal|1
operator|&&
name|index
operator|>=
name|locIdx
condition|)
block|{
operator|++
name|index
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|private
name|String
name|mapSchemaLocation
parameter_list|(
name|String
name|target
parameter_list|)
block|{
comment|//See http://java.net/jira/browse/JAXB-925
if|if
condition|(
name|this
operator|.
name|getLocation
argument_list|()
operator|.
name|getSystemId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
operator|&&
name|XJCVERSION
operator|.
name|startsWith
argument_list|(
literal|"2.2"
argument_list|)
condition|)
block|{
return|return
name|target
return|;
block|}
return|return
name|JAXBDataBinding
operator|.
name|mapSchemaLocation
argument_list|(
name|target
argument_list|,
name|this
operator|.
name|getLocation
argument_list|()
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|catalog
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|isInclude
operator|&&
literal|"schemaLocation"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
return|return
name|mapSchemaLocation
argument_list|(
name|super
operator|.
name|getAttributeValue
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getAttributeValue
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|isInclude
condition|)
block|{
name|String
name|n
init|=
name|getAttributeLocalName
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"schemaLocation"
operator|.
name|equals
argument_list|(
name|n
argument_list|)
condition|)
block|{
return|return
name|mapSchemaLocation
argument_list|(
name|super
operator|.
name|getAttributeValue
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|getAttributeValue
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getAttributeName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributeName
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributePrefix
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributePrefix
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeNamespace
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributeNamespace
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeLocalName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributeLocalName
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAttributeType
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAttributeSpecified
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|super
operator|.
name|isAttributeSpecified
argument_list|(
name|mapIdx
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JAXBDataBinding
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_TYPE_MAP
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|JLDEFAULT_TYPE_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|S2JJAXBModel
name|rawJaxbModelGenCode
decl_stmt|;
specifier|private
name|ToolContext
name|context
decl_stmt|;
specifier|private
name|DefaultValueProvider
name|defaultValues
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
specifier|private
name|JAXBBindErrorListener
name|listener
decl_stmt|;
static|static
block|{
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"short"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"byte"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"char"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"javax.xml.namespace.QName"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"java.net.URI"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"java.math.BigDecimal"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"javax.xml.datatype.Duration"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Character"
argument_list|,
literal|"char"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Boolean"
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Integer"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Long"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Short"
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Byte"
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Float"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Double"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|addAll
argument_list|(
name|JLDEFAULT_TYPE_MAP
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkEncoding
parameter_list|(
name|ToolContext
name|c
parameter_list|)
block|{
name|String
name|encoding
init|=
operator|(
name|String
operator|)
name|c
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|CodeWriter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"encoding"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|c
operator|.
name|remove
argument_list|(
name|ToolConstants
operator|.
name|CFG_ENCODING
argument_list|)
expr_stmt|;
name|String
name|fenc
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|encoding
operator|.
name|equals
argument_list|(
name|fenc
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"JAXB_NO_ENCODING_SUPPORT"
argument_list|,
operator|new
name|String
index|[]
block|{
name|Driver
operator|.
name|getBuildID
argument_list|()
block|,
name|fenc
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|ToolContext
name|c
parameter_list|)
throws|throws
name|ToolException
block|{
name|this
operator|.
name|context
operator|=
name|c
expr_stmt|;
name|checkEncoding
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|SchemaCompiler
name|schemaCompiler
init|=
name|XJC
operator|.
name|createSchemaCompiler
argument_list|()
decl_stmt|;
name|Bus
name|bus
init|=
name|context
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|OASISCatalogManager
name|catalog
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|OASISCatalogManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Options
name|opts
init|=
literal|null
decl_stmt|;
name|opts
operator|=
name|getOptions
argument_list|(
name|schemaCompiler
argument_list|)
expr_stmt|;
name|hackInNewInternalizationLogic
argument_list|(
name|schemaCompiler
argument_list|,
name|catalog
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|ClassCollector
name|classCollector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClassNameAllocatorImpl
name|allocator
init|=
operator|new
name|ClassNameAllocatorImpl
argument_list|(
name|classCollector
argument_list|,
name|c
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_AUTORESOLVE
argument_list|)
argument_list|)
decl_stmt|;
name|schemaCompiler
operator|.
name|setClassNameAllocator
argument_list|(
name|allocator
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|JAXBBindErrorListener
argument_list|(
name|context
operator|.
name|isVerbose
argument_list|()
argument_list|,
name|context
operator|.
name|getErrorListener
argument_list|()
argument_list|)
expr_stmt|;
name|schemaCompiler
operator|.
name|setErrorListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// Collection<SchemaInfo> schemas = serviceInfo.getSchemas();
name|List
argument_list|<
name|InputSource
argument_list|>
name|jaxbBindings
init|=
name|context
operator|.
name|getJaxbBindingFile
argument_list|()
decl_stmt|;
name|SchemaCollection
name|schemas
init|=
operator|(
name|SchemaCollection
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|XML_SCHEMA_COLLECTION
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|//hard code to enable jaxb extensions
name|args
operator|.
name|add
argument_list|(
literal|"-extension"
argument_list|)
expr_stmt|;
name|String
name|name
init|=
literal|"/org/apache/cxf/tools/common/jaxb/W3CEPRJaxbBinding.xml"
decl_stmt|;
if|if
condition|(
name|isJAXB22
argument_list|()
condition|)
block|{
name|name
operator|=
literal|"/org/apache/cxf/tools/common/jaxb/W3CEPRJaxbBinding_jaxb22.xml"
expr_stmt|;
block|}
name|URL
name|bindingFileUrl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|InputSource
name|ins
init|=
operator|new
name|InputSource
argument_list|(
name|bindingFileUrl
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|opts
operator|.
name|addBindFile
argument_list|(
name|ins
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_XJC_ARGS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Object
name|o
init|=
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_XJC_ARGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|o
operator|=
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|o
block|}
expr_stmt|;
block|}
name|String
index|[]
name|xjcArgss
init|=
operator|(
name|String
index|[]
operator|)
name|o
decl_stmt|;
for|for
control|(
name|String
name|xjcArgs
range|:
name|xjcArgss
control|)
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|xjcArgs
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|arg
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"xjc arg:"
operator|+
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|)
operator|==
literal|null
operator|||
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_XJC_ARGS
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// keep parseArguments happy, supply dummy required command-line
comment|// opts
name|opts
operator|.
name|addGrammar
argument_list|(
operator|new
name|InputSource
argument_list|(
literal|"null"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|parseArguments
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandLineException
name|e
parameter_list|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"XJC reported 'BadCommandLineException' for -xjc argument:"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|arg
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|!=
literal|null
condition|)
block|{
name|String
name|pluginUsage
init|=
name|getPluginUsageString
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
literal|"-X"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|pluginUsage
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
name|pluginUsage
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_MARK_GENERATED
argument_list|)
condition|)
block|{
comment|// Add the @Generated annotation in the Java files generated. This is done by passing
comment|// '-mark-generated' attribute to jaxb xjc.
try|try
block|{
name|opts
operator|.
name|parseArgument
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-mark-generated"
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandLineException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|addSchemas
argument_list|(
name|opts
argument_list|,
name|schemaCompiler
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
name|addBindingFiles
argument_list|(
name|opts
argument_list|,
name|jaxbBindings
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|context
operator|.
name|getNamespacePackageMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|File
name|file
init|=
name|JAXBUtils
operator|.
name|getPackageMappingSchemaBindingFile
argument_list|(
name|ns
argument_list|,
name|context
operator|.
name|mapPackageName
argument_list|(
name|ns
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|InputSource
name|ins
init|=
operator|new
name|InputSource
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|ins
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|delete
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|getPackageName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaCompiler
operator|.
name|setDefaultPackageName
argument_list|(
name|context
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rawJaxbModelGenCode
operator|=
name|schemaCompiler
operator|.
name|bind
argument_list|()
expr_stmt|;
name|addedEnumClassToCollector
argument_list|(
name|schemas
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_DEFAULT_VALUES
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|cname
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_DEFAULT_VALUES
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|cname
argument_list|)
condition|)
block|{
name|defaultValues
operator|=
operator|new
name|RandomValueProvider
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cname
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'='
condition|)
block|{
name|cname
operator|=
name|cname
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|defaultValues
operator|=
operator|(
name|DefaultValueProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|cname
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|boolean
name|isJAXB22
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
operator|.
name|isJAXB22
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ReferenceFinder
extends|extends
name|AbstractReferenceFinderImpl
block|{
specifier|private
name|Locator
name|locator
decl_stmt|;
specifier|private
name|OASISCatalogManager
name|catalog
decl_stmt|;
name|ReferenceFinder
parameter_list|(
name|DOMForest
name|parent
parameter_list|,
name|OASISCatalogManager
name|cat
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|catalog
operator|=
name|cat
expr_stmt|;
block|}
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|loc
parameter_list|)
block|{
name|super
operator|.
name|setDocumentLocator
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|this
operator|.
name|locator
operator|=
name|loc
expr_stmt|;
block|}
specifier|protected
name|String
name|findExternalResource
parameter_list|(
name|String
name|nsURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
block|{
if|if
condition|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
operator|.
name|equals
argument_list|(
name|nsURI
argument_list|)
operator|&&
operator|(
literal|"import"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"include"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|)
condition|)
block|{
name|String
name|s
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
comment|//See http://java.net/jira/browse/JAXB-925
if|if
condition|(
name|locator
operator|.
name|getSystemId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
operator|&&
name|XJCVERSION
operator|.
name|startsWith
argument_list|(
literal|"2.2"
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
name|s
operator|=
name|JAXBDataBinding
operator|.
name|mapSchemaLocation
argument_list|(
name|s
argument_list|,
name|locator
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|hackInNewInternalizationLogic
parameter_list|(
name|SchemaCompiler
name|schemaCompiler
parameter_list|,
specifier|final
name|OASISCatalogManager
name|catalog
parameter_list|,
name|Options
name|opts
parameter_list|)
block|{
try|try
block|{
name|Field
name|f
init|=
name|schemaCompiler
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"forest"
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|XMLSchemaInternalizationLogic
name|logic
init|=
operator|new
name|XMLSchemaInternalizationLogic
argument_list|()
block|{
specifier|public
name|XMLFilterImpl
name|createExternalReferenceFinder
parameter_list|(
name|DOMForest
name|parent
parameter_list|)
block|{
return|return
operator|new
name|ReferenceFinder
argument_list|(
name|parent
argument_list|,
name|catalog
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Constructor
argument_list|<
name|DOMForest
argument_list|>
name|c
init|=
literal|null
decl_stmt|;
name|DOMForest
name|forest
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|DOMForest
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|InternalizationLogic
operator|.
name|class
argument_list|,
name|Options
operator|.
name|class
argument_list|)
expr_stmt|;
name|forest
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|logic
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|c
operator|=
name|DOMForest
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|InternalizationLogic
operator|.
name|class
argument_list|)
expr_stmt|;
name|forest
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|logic
argument_list|)
expr_stmt|;
block|}
name|forest
operator|.
name|setErrorHandler
argument_list|(
operator|(
name|ErrorReceiver
operator|)
name|schemaCompiler
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|schemaCompiler
argument_list|,
name|forest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
specifier|private
name|void
name|addBindingFiles
parameter_list|(
name|Options
name|opts
parameter_list|,
name|List
argument_list|<
name|InputSource
argument_list|>
name|jaxbBindings
parameter_list|,
name|SchemaCollection
name|schemas
parameter_list|)
block|{
for|for
control|(
name|InputSource
name|binding
range|:
name|jaxbBindings
control|)
block|{
name|XMLStreamReader
name|r
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|binding
argument_list|)
decl_stmt|;
try|try
block|{
name|StaxUtils
operator|.
name|toNextTag
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|r
operator|.
name|getAttributeValue
argument_list|(
literal|null
argument_list|,
literal|"schemaLocation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|Document
name|d
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|XPath
name|p
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|p
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|W3CNamespaceContext
argument_list|(
name|d
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|XPathExpression
name|xpe
init|=
name|p
operator|.
name|compile
argument_list|(
name|d
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"node"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemas
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|src
init|=
name|getSchemaNode
argument_list|(
name|schema
argument_list|,
name|schemas
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|xpe
operator|.
name|evaluate
argument_list|(
name|src
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|key
init|=
name|schema
operator|.
name|getSourceURI
argument_list|()
decl_stmt|;
name|binding
operator|=
name|convertToTmpInputSource
argument_list|(
name|d
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addBindFile
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|binding
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore, just pass to jaxb
block|}
finally|finally
block|{
try|try
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
name|opts
operator|.
name|addBindFile
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Object
name|getSchemaNode
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|SchemaCollection
name|schemaCollection
parameter_list|)
block|{
name|XmlSchemaSerializer
name|xser
init|=
operator|new
name|XmlSchemaSerializer
argument_list|()
decl_stmt|;
name|xser
operator|.
name|setExtReg
argument_list|(
name|schemaCollection
operator|.
name|getExtReg
argument_list|()
argument_list|)
expr_stmt|;
name|Document
index|[]
name|docs
decl_stmt|;
try|try
block|{
name|docs
operator|=
name|xser
operator|.
name|serializeSchema
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlSchemaSerializerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|docs
index|[
literal|0
index|]
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
specifier|private
name|InputSource
name|convertToTmpInputSource
parameter_list|(
name|Element
name|ele
parameter_list|,
name|String
name|schemaLoc
parameter_list|)
throws|throws
name|Exception
block|{
name|InputSource
name|result
init|=
literal|null
decl_stmt|;
name|ele
operator|.
name|setAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"schemaLocation"
argument_list|,
name|schemaLoc
argument_list|)
expr_stmt|;
name|File
name|tmpFile
init|=
name|FileUtils
operator|.
name|createTempFile
argument_list|(
literal|"jaxbbinding"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|writeTo
argument_list|(
name|ele
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|InputSource
argument_list|(
name|URIParserUtil
operator|.
name|getAbsoluteURI
argument_list|(
name|tmpFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|addSchemas
parameter_list|(
name|Options
name|opts
parameter_list|,
name|SchemaCompiler
name|schemaCompiler
parameter_list|,
name|SchemaCollection
name|schemaCollection
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|serviceList
init|=
operator|(
name|List
argument_list|<
name|ServiceInfo
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|SERVICE_LIST
argument_list|)
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|si
range|:
name|serviceList
control|)
block|{
for|for
control|(
name|SchemaInfo
name|sci
range|:
name|si
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|sci
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ids
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|Bus
name|bus
init|=
name|context
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|OASISCatalogManager
name|catalog
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|OASISCatalogManager
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemaCollection
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|schema
operator|.
name|getSourceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
condition|)
block|{
name|XmlSchemaSerializer
name|xser
init|=
operator|new
name|XmlSchemaSerializer
argument_list|()
decl_stmt|;
name|xser
operator|.
name|setExtReg
argument_list|(
name|schemaCollection
operator|.
name|getExtReg
argument_list|()
argument_list|)
expr_stmt|;
name|Document
index|[]
name|docs
decl_stmt|;
try|try
block|{
name|docs
operator|=
name|xser
operator|.
name|serializeSchema
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlSchemaSerializerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Element
name|ele
init|=
name|docs
index|[
literal|0
index|]
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|fullValidateWSDL
argument_list|()
condition|)
block|{
name|String
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uri
operator|=
name|docs
index|[
literal|0
index|]
operator|.
name|getDocumentURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|//ignore - DOM level 3
block|}
name|validateSchema
argument_list|(
name|ele
argument_list|,
name|uri
argument_list|,
name|catalog
argument_list|,
name|schemaCollection
argument_list|)
expr_stmt|;
block|}
name|ele
operator|=
name|removeImportElement
argument_list|(
name|ele
argument_list|,
name|key
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
try|try
block|{
name|docs
index|[
literal|0
index|]
operator|.
name|setDocumentURI
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore - DOM level 3
block|}
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|(
name|InputStream
operator|)
literal|null
argument_list|)
decl_stmt|;
comment|//key = key.replaceFirst("#types[0-9]+$", "");
name|is
operator|.
name|setSystemId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|is
operator|.
name|setPublicId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addGrammar
argument_list|(
name|is
argument_list|)
expr_stmt|;
try|try
block|{
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|key
argument_list|,
name|createNoCDATAReader
argument_list|(
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|ele
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemaCollection
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|schema
operator|.
name|getSourceURI
argument_list|()
decl_stmt|;
comment|// accepting also a null tns (e.g., reported by apache.ws.xmlschema for no-namespace)
if|if
condition|(
name|ids
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
condition|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
operator|new
name|URL
argument_list|(
name|key
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
name|XMLStreamReader
name|reader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|key
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createNoCDATAReader
argument_list|(
operator|new
name|LocationFilterReader
argument_list|(
name|reader
argument_list|,
name|catalog
argument_list|)
argument_list|)
expr_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|opts
operator|.
name|addGrammar
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|key
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
block|}
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ServiceInfo
name|si
range|:
name|serviceList
control|)
block|{
for|for
control|(
name|SchemaInfo
name|sci
range|:
name|si
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|sci
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ids
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Element
name|ele
init|=
name|sci
operator|.
name|getElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|fullValidateWSDL
argument_list|()
condition|)
block|{
name|validateSchema
argument_list|(
name|ele
argument_list|,
name|sci
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|catalog
argument_list|,
name|schemaCollection
argument_list|)
expr_stmt|;
block|}
name|ele
operator|=
name|removeImportElement
argument_list|(
name|ele
argument_list|,
name|key
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|(
name|InputStream
operator|)
literal|null
argument_list|)
decl_stmt|;
comment|//key = key.replaceFirst("#types[0-9]+$", "");
name|is
operator|.
name|setSystemId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|is
operator|.
name|setPublicId
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addGrammar
argument_list|(
name|is
argument_list|)
expr_stmt|;
try|try
block|{
name|XMLStreamReader
name|reader
init|=
name|createNoCDATAReader
argument_list|(
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|ele
argument_list|,
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|key
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|XMLStreamReader
name|createNoCDATAReader
parameter_list|(
specifier|final
name|XMLStreamReader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|StreamReaderDelegate
argument_list|(
name|reader
argument_list|)
block|{
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|int
name|i
init|=
name|super
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|i
operator|==
name|XMLStreamReader
operator|.
name|CDATA
condition|?
name|XMLStreamReader
operator|.
name|CHARACTERS
else|:
name|i
return|;
block|}
block|}
return|;
block|}
specifier|private
name|String
name|getPluginUsageString
parameter_list|(
name|Options
name|opts
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\nAvailable plugin options:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Plugin
name|pl
range|:
name|opts
operator|.
name|getAllPlugins
argument_list|()
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|pl
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// JAXB 'deprecates' getOptions, by which they mean that they reserve the right to change it.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|Options
name|getOptions
parameter_list|(
name|SchemaCompiler
name|schemaCompiler
parameter_list|)
throws|throws
name|ToolException
block|{
return|return
name|schemaCompiler
operator|.
name|getOptions
argument_list|()
return|;
block|}
comment|// JAXB bug. JAXB ClassNameCollector may not be invoked when generated
comment|// class is an enum. We need to use this method to add the missed file
comment|// to classCollector.
specifier|private
name|void
name|addedEnumClassToCollector
parameter_list|(
name|SchemaCollection
name|schemaCollection
parameter_list|,
name|ClassNameAllocatorImpl
name|allocator
parameter_list|)
block|{
comment|//for (Element schemaElement : schemaList.values()) {
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemaCollection
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
name|String
name|targetNamespace
init|=
name|schema
operator|.
name|getTargetNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|targetNamespace
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|packageName
init|=
name|context
operator|.
name|mapPackageName
argument_list|(
name|targetNamespace
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|addedToClassCollector
argument_list|(
name|packageName
argument_list|)
condition|)
block|{
name|allocator
operator|.
name|assignClassName
argument_list|(
name|packageName
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|addedToClassCollector
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
name|ClassCollector
name|classCollector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|classCollector
operator|.
name|getGeneratedFileInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|int
name|dotIndex
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|sub
init|=
name|dotIndex
operator|<=
literal|0
condition|?
literal|""
else|:
name|file
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|equals
argument_list|(
name|packageName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isSuppressCodeGen
parameter_list|()
block|{
return|return
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_SUPPRESS_GEN
argument_list|)
return|;
block|}
specifier|public
name|void
name|generate
parameter_list|(
name|ToolContext
name|c
parameter_list|)
throws|throws
name|ToolException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|initialize
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rawJaxbModelGenCode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|c
operator|.
name|getErrorListener
argument_list|()
operator|.
name|getErrorCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return;
block|}
try|try
block|{
name|String
name|dir
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
decl_stmt|;
name|TypesCodeWriter
name|fileCodeWriter
init|=
operator|new
name|TypesCodeWriter
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
name|context
operator|.
name|getExcludePkgList
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_ENCODING
argument_list|)
argument_list|,
name|context
operator|.
name|get
argument_list|(
name|OutputStreamCreator
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|S2JJAXBModel
name|schem2JavaJaxbModel
init|=
name|rawJaxbModelGenCode
decl_stmt|;
name|ClassCollector
name|classCollector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|JClass
name|cls
range|:
name|schem2JavaJaxbModel
operator|.
name|getAllObjectFactories
argument_list|()
control|)
block|{
name|classCollector
operator|.
name|getTypesPackages
argument_list|()
operator|.
name|add
argument_list|(
name|cls
operator|.
name|_package
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JCodeModel
name|jcodeModel
init|=
name|schem2JavaJaxbModel
operator|.
name|generateCode
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSuppressCodeGen
argument_list|()
condition|)
block|{
name|jcodeModel
operator|.
name|build
argument_list|(
name|fileCodeWriter
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|put
argument_list|(
name|JCodeModel
operator|.
name|class
argument_list|,
name|jcodeModel
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|str
range|:
name|fileCodeWriter
operator|.
name|getExcludeFileList
argument_list|()
control|)
block|{
name|context
operator|.
name|getExcludeFileList
argument_list|()
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"FAIL_TO_GENERATE_TYPES"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getType
parameter_list|(
name|QName
name|qname
parameter_list|,
name|boolean
name|element
parameter_list|)
block|{
name|TypeAndAnnotation
name|typeAnno
init|=
name|rawJaxbModelGenCode
operator|.
name|getJavaType
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
condition|)
block|{
name|Mapping
name|mapping
init|=
name|rawJaxbModelGenCode
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|typeAnno
operator|=
name|mapping
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|typeAnno
operator|!=
literal|null
operator|&&
name|typeAnno
operator|.
name|getTypeClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|typeAnno
operator|.
name|getTypeClass
argument_list|()
operator|.
name|fullName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getWrappedElementType
parameter_list|(
name|QName
name|wrapperElement
parameter_list|,
name|QName
name|item
parameter_list|)
block|{
name|Mapping
name|mapping
init|=
name|rawJaxbModelGenCode
operator|.
name|get
argument_list|(
name|wrapperElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|Property
argument_list|>
name|propList
init|=
name|mapping
operator|.
name|getWrapperStyleDrilldown
argument_list|()
decl_stmt|;
if|if
condition|(
name|propList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Property
name|pro
range|:
name|propList
control|)
block|{
if|if
condition|(
name|pro
operator|.
name|elementName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|pro
operator|.
name|elementName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|pro
operator|.
name|type
argument_list|()
operator|.
name|fullName
argument_list|()
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Element
name|removeImportElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|sysId
parameter_list|,
name|OASISCatalogManager
name|catalog
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|impElemList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|ToolConstants
operator|.
name|SCHEMA_URI
argument_list|,
literal|"import"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|incElemList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|ToolConstants
operator|.
name|SCHEMA_URI
argument_list|,
literal|"include"
argument_list|)
decl_stmt|;
name|boolean
name|hasJAXB
init|=
name|DOMUtils
operator|.
name|hasElementInNS
argument_list|(
name|element
argument_list|,
name|ToolConstants
operator|.
name|NS_JAXB_BINDINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|impElemList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|incElemList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|hasJAXB
condition|)
block|{
return|return
name|element
return|;
block|}
name|element
operator|=
operator|(
name|Element
operator|)
name|cloneNode
argument_list|(
name|element
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|element
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|impElemList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|ToolConstants
operator|.
name|SCHEMA_URI
argument_list|,
literal|"import"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|item
range|:
name|impElemList
control|)
block|{
name|item
operator|.
name|removeAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
expr_stmt|;
block|}
name|incElemList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|ToolConstants
operator|.
name|SCHEMA_URI
argument_list|,
literal|"include"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|elem
range|:
name|incElemList
control|)
block|{
name|Attr
name|val
init|=
name|elem
operator|.
name|getAttributeNode
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
name|val
operator|.
name|setNodeValue
argument_list|(
name|mapSchemaLocation
argument_list|(
name|val
operator|.
name|getNodeValue
argument_list|()
argument_list|,
name|sysId
argument_list|,
name|catalog
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasJAXB
condition|)
block|{
comment|//need to add ns and version
name|String
name|pfx
init|=
name|DOMUtils
operator|.
name|getPrefix
argument_list|(
name|element
argument_list|,
name|ToolConstants
operator|.
name|NS_JAXB_BINDINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
name|pfx
operator|=
name|DOMUtils
operator|.
name|createNamespace
argument_list|(
name|element
argument_list|,
name|ToolConstants
operator|.
name|NS_JAXB_BINDINGS
argument_list|)
expr_stmt|;
block|}
name|element
operator|.
name|setAttributeNS
argument_list|(
name|ToolConstants
operator|.
name|NS_JAXB_BINDINGS
argument_list|,
name|pfx
operator|+
literal|":version"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
block|}
return|return
name|element
return|;
block|}
specifier|public
name|Node
name|cloneNode
parameter_list|(
name|Document
name|document
parameter_list|,
name|Node
name|node
parameter_list|,
name|boolean
name|deep
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|document
operator|==
literal|null
operator|||
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|type
init|=
name|node
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|==
name|document
condition|)
block|{
return|return
name|node
operator|.
name|cloneNode
argument_list|(
name|deep
argument_list|)
return|;
block|}
name|Node
name|clone
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createCDATASection
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createComment
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ENTITY_REFERENCE_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createEntityReference
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createElement
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|Element
operator|)
name|clone
operator|)
operator|.
name|setAttributeNS
argument_list|(
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|clone
operator|.
name|setUserData
argument_list|(
literal|"location"
argument_list|,
name|node
operator|.
name|getUserData
argument_list|(
literal|"location"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//non DOM level 3
block|}
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createTextNode
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
if|if
condition|(
name|deep
operator|&&
name|type
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Node
name|child
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|clone
operator|.
name|appendChild
argument_list|(
name|cloneNode
argument_list|(
name|document
argument_list|,
name|child
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|clone
return|;
block|}
specifier|public
name|void
name|validateSchema
parameter_list|(
name|Element
name|ele
parameter_list|,
name|String
name|uri
parameter_list|,
specifier|final
name|OASISCatalogManager
name|catalog
parameter_list|,
specifier|final
name|SchemaCollection
name|schemaCollection
parameter_list|)
throws|throws
name|ToolException
block|{
name|SchemaFactory
name|schemaFact
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|schemaFact
operator|.
name|setResourceResolver
argument_list|(
operator|new
name|LSResourceResolver
argument_list|()
block|{
specifier|public
name|LSInput
name|resolveResource
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|,
name|String
name|baseURI
parameter_list|)
block|{
name|String
name|s
init|=
name|JAXBDataBinding
operator|.
name|mapSchemaLocation
argument_list|(
name|systemId
argument_list|,
name|baseURI
argument_list|,
name|catalog
argument_list|)
decl_stmt|;
comment|//System.out.println(namespaceURI + " " + systemId + " " + baseURI + " " + s);
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|XmlSchema
name|sc
init|=
name|schemaCollection
operator|.
name|getSchemaByTargetNamespace
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|sc
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|src
operator|.
name|setSystemId
argument_list|(
name|sc
operator|.
name|getSourceURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|LSInputSAXWrapper
argument_list|(
name|src
argument_list|)
return|;
block|}
return|return
operator|new
name|LSInputSAXWrapper
argument_list|(
operator|new
name|InputSource
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|DOMSource
name|domSrc
init|=
operator|new
name|DOMSource
argument_list|(
name|ele
argument_list|,
name|uri
argument_list|)
decl_stmt|;
try|try
block|{
name|schemaFact
operator|.
name|newSchema
argument_list|(
name|domSrc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"src-resolve.4.2"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
comment|//Ignore schema resolve error and do nothing
block|}
else|else
block|{
comment|//e.printStackTrace();
throw|throw
operator|new
name|ToolException
argument_list|(
literal|"Schema Error : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|DefaultValueWriter
name|createDefaultValueWriter
parameter_list|(
name|QName
name|qname
parameter_list|,
name|boolean
name|element
parameter_list|)
block|{
if|if
condition|(
name|defaultValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TypeAndAnnotation
name|typeAnno
init|=
name|rawJaxbModelGenCode
operator|.
name|getJavaType
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
condition|)
block|{
name|Mapping
name|mapping
init|=
name|rawJaxbModelGenCode
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|typeAnno
operator|=
name|mapping
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|typeAnno
operator|!=
literal|null
operator|&&
name|typeAnno
operator|.
name|getTypeClass
argument_list|()
operator|instanceof
name|JDefinedClass
condition|)
block|{
name|JDefinedClass
name|dc
init|=
operator|(
name|JDefinedClass
operator|)
name|typeAnno
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|dc
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
comment|//no default values for abstract classes
name|typeAnno
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|typeAnno
operator|!=
literal|null
condition|)
block|{
specifier|final
name|JType
name|type
init|=
name|typeAnno
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
return|return
operator|new
name|JAXBDefaultValueWriter
argument_list|(
name|type
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|DefaultValueWriter
name|createDefaultValueWriterForWrappedElement
parameter_list|(
name|QName
name|wrapperElement
parameter_list|,
name|QName
name|item
parameter_list|)
block|{
if|if
condition|(
name|defaultValues
operator|!=
literal|null
condition|)
block|{
name|Mapping
name|mapping
init|=
name|rawJaxbModelGenCode
operator|.
name|get
argument_list|(
name|wrapperElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|Property
argument_list|>
name|propList
init|=
name|mapping
operator|.
name|getWrapperStyleDrilldown
argument_list|()
decl_stmt|;
for|for
control|(
name|Property
name|pro
range|:
name|propList
control|)
block|{
if|if
condition|(
name|pro
operator|.
name|elementName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|pro
operator|.
name|elementName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|JType
name|type
init|=
name|pro
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|JDefinedClass
operator|&&
operator|(
operator|(
name|JDefinedClass
operator|)
name|type
operator|)
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
comment|//no default values for abstract classes
return|return
literal|null
return|;
block|}
return|return
operator|new
name|JAXBDefaultValueWriter
argument_list|(
name|pro
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
class|class
name|JAXBDefaultValueWriter
implements|implements
name|DefaultValueWriter
block|{
specifier|final
name|JType
name|type
decl_stmt|;
name|JAXBDefaultValueWriter
parameter_list|(
name|JType
name|tp
parameter_list|)
block|{
name|type
operator|=
name|tp
expr_stmt|;
block|}
specifier|public
name|void
name|writeDefaultValue
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|indent
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|varName
parameter_list|)
throws|throws
name|IOException
block|{
name|path
operator|=
name|path
operator|+
literal|"/"
operator|+
name|varName
expr_stmt|;
name|writeDefaultValue
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
argument_list|,
name|varName
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeDefaultValue
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|indent
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|varName
parameter_list|,
name|JType
name|tp
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
if|if
condition|(
name|tp
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"new "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" {};"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DEFAULT_TYPE_MAP
operator|.
name|contains
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
condition|)
block|{
name|writeDefaultType
argument_list|(
name|writer
argument_list|,
name|tp
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tp
operator|instanceof
name|JDefinedClass
condition|)
block|{
name|JDefinedClass
name|jdc
init|=
operator|(
name|JDefinedClass
operator|)
name|tp
decl_stmt|;
if|if
condition|(
name|jdc
operator|.
name|getClassType
argument_list|()
operator|==
name|ClassType
operator|.
name|ENUM
condition|)
block|{
comment|//no way to get the field list as it's private with
comment|//no accessors :-(
try|try
block|{
name|Field
name|f
init|=
name|jdc
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"enumConstantsByName"
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|jdc
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|first
init|=
name|defaultValues
operator|.
name|chooseEnumValue
argument_list|(
name|path
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IOException
name|ex
init|=
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|jdc
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"null;"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"new "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"();"
argument_list|)
expr_stmt|;
name|fillInFields
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
argument_list|,
name|varName
argument_list|,
name|jdc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|JType
name|tp2
init|=
name|tp
operator|.
name|erasure
argument_list|()
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|tp2
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"_class"
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|tp2
argument_list|)
decl_stmt|;
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"new "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"java.util.List"
argument_list|,
literal|"java.util.ArrayList"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"();"
argument_list|)
expr_stmt|;
name|f
operator|=
name|tp
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"args"
argument_list|)
expr_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JClass
argument_list|>
name|lcl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|tp
argument_list|)
argument_list|)
decl_stmt|;
name|JClass
name|cl
init|=
name|lcl
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
name|defaultValues
operator|.
name|getListLength
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|varName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|cnt
condition|;
name|x
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writeDefaultValue
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
operator|+
literal|"/"
operator|+
name|varName
operator|+
literal|"Val"
argument_list|,
name|varName
operator|+
literal|"Val"
operator|+
name|cnt
argument_list|,
name|cl
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|".add("
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
operator|+
literal|"Val"
operator|+
name|cnt
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
comment|//System.err.println("No idea what to do with " + tp.fullName());
comment|//System.err.println("        class " + tp.getClass().getName());
name|writer
operator|.
name|write
argument_list|(
literal|"null;"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|fillInFields
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|indent
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|varName
parameter_list|,
name|JDefinedClass
name|tp
parameter_list|)
throws|throws
name|IOException
block|{
name|JClass
name|sp
init|=
name|tp
operator|.
name|_extends
argument_list|()
decl_stmt|;
if|if
condition|(
name|sp
operator|instanceof
name|JDefinedClass
condition|)
block|{
name|fillInFields
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
argument_list|,
name|varName
argument_list|,
operator|(
name|JDefinedClass
operator|)
name|sp
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|JMethod
argument_list|>
name|methods
init|=
name|tp
operator|.
name|methods
argument_list|()
decl_stmt|;
for|for
control|(
name|JMethod
name|m
range|:
name|methods
control|)
block|{
if|if
condition|(
name|m
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEFAULT_TYPE_MAP
operator|.
name|contains
argument_list|(
name|m
operator|.
name|listParamTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|fullName
argument_list|()
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|m
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|writeDefaultType
argument_list|(
name|writer
argument_list|,
name|m
operator|.
name|listParamTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|path
operator|+
literal|"/"
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|idx
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|"/"
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
operator|+
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|idx
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|"/"
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
operator|+
literal|"/"
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasTwo
init|=
name|idx
operator|>
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|hasTwo
condition|)
block|{
name|writeDefaultValue
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
operator|+
literal|"/"
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
name|varName
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
name|m
operator|.
name|listParamTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|m
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasTwo
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|varName
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|type
argument_list|()
operator|.
name|fullName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"java.util.List"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writeDefaultValue
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
operator|+
literal|"/"
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
name|varName
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
name|m
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|m
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"().addAll("
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeDefaultType
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|JType
name|t
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|t
operator|.
name|fullName
argument_list|()
decl_stmt|;
name|writeDefaultType
argument_list|(
name|writer
argument_list|,
name|name
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeDefaultType
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|JLDEFAULT_TYPE_MAP
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|"java.lang."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".valueOf("
argument_list|)
expr_stmt|;
name|writeDefaultType
argument_list|(
name|writer
argument_list|,
name|JLDEFAULT_TYPE_MAP
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getBooleanValue
argument_list|(
name|path
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getIntValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getLongValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"l"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"short"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"(short)"
argument_list|)
operator|.
name|append
argument_list|(
name|Short
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getShortValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"byte"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"(byte)"
argument_list|)
operator|.
name|append
argument_list|(
name|Byte
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getByteValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getFloatValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getDoubleValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"char"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"(char)"
argument_list|)
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getCharValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getStringValue
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"javax.xml.namespace.QName"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|QName
name|qn
init|=
name|defaultValues
operator|.
name|getQNameValue
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"new javax.xml.namespace.QName(\""
argument_list|)
operator|.
name|append
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\", \""
argument_list|)
operator|.
name|append
argument_list|(
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.net.URI"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"new java.net.URI(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getURIValue
argument_list|(
name|path
argument_list|)
operator|.
name|toASCIIString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.math.BigInteger"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"new java.math.BigInteger(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getBigIntegerValue
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.math.BigDecimal"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"new java.math.BigDecimal(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getBigDecimalValue
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"javax.xml.datatype.XMLGregorianCalendar"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getXMLGregorianCalendarValueString
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"javax.xml.datatype.Duration"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"javax.xml.datatype.DatatypeFactory.newInstance().newDuration(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getDurationValueString
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|mapSchemaLocation
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|base
parameter_list|,
name|OASISCatalogManager
name|catalog
parameter_list|)
block|{
try|try
block|{
name|String
name|resolvedLocation
init|=
operator|new
name|OASISCatalogManagerHelper
argument_list|()
operator|.
name|resolve
argument_list|(
name|catalog
argument_list|,
name|target
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedLocation
operator|!=
literal|null
condition|)
block|{
return|return
name|resolvedLocation
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
try|try
block|{
name|URIResolver
name|resolver
init|=
operator|new
name|URIResolver
argument_list|(
name|base
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|.
name|isResolved
argument_list|()
condition|)
block|{
name|target
operator|=
name|resolver
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
return|return
name|target
return|;
block|}
block|}
end_class

end_unit

