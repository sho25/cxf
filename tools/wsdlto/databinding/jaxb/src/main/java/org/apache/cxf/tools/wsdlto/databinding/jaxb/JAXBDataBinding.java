begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|databinding
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|ClassType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JCodeModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JDefinedClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|BadCommandLineException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|S2JJAXBModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|TypeAndAnnotation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|XJC
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|impl
operator|.
name|s2j
operator|.
name|SchemaCompilerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|DefaultValueWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|ClassCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|DataBindingProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|DefaultValueProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|RandomValueProvider
import|;
end_import

begin_class
specifier|public
class|class
name|JAXBDataBinding
implements|implements
name|DataBindingProfile
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JAXBDataBinding
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_TYPE_MAP
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|JLDEFAULT_TYPE_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|S2JJAXBModel
name|rawJaxbModelGenCode
decl_stmt|;
specifier|private
name|ToolContext
name|context
decl_stmt|;
specifier|private
name|DefaultValueProvider
name|defaultValues
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
static|static
block|{
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"short"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"byte"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"char"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"javax.xml.namespace.QName"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"java.net.URI"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"java.math.BigDecimal"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|add
argument_list|(
literal|"javax.xml.datatype.Duration"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Character"
argument_list|,
literal|"char"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Boolean"
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Integer"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Long"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Short"
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Byte"
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Float"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|JLDEFAULT_TYPE_MAP
operator|.
name|put
argument_list|(
literal|"java.lang.Double"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|DEFAULT_TYPE_MAP
operator|.
name|addAll
argument_list|(
name|JLDEFAULT_TYPE_MAP
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|ToolContext
name|c
parameter_list|)
throws|throws
name|ToolException
block|{
name|this
operator|.
name|context
operator|=
name|c
expr_stmt|;
name|SchemaCompilerImpl
name|schemaCompiler
init|=
operator|(
name|SchemaCompilerImpl
operator|)
name|XJC
operator|.
name|createSchemaCompiler
argument_list|()
decl_stmt|;
name|ClassCollector
name|classCollector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClassNameAllocatorImpl
name|allocator
init|=
operator|new
name|ClassNameAllocatorImpl
argument_list|(
name|classCollector
argument_list|,
name|c
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_AUTORESOLVE
argument_list|)
argument_list|)
decl_stmt|;
name|schemaCompiler
operator|.
name|setClassNameAllocator
argument_list|(
name|allocator
argument_list|)
expr_stmt|;
name|JAXBBindErrorListener
name|listener
init|=
operator|new
name|JAXBBindErrorListener
argument_list|(
name|context
operator|.
name|isVerbose
argument_list|()
argument_list|)
decl_stmt|;
name|schemaCompiler
operator|.
name|setErrorListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// Collection<SchemaInfo> schemas = serviceInfo.getSchemas();
name|List
argument_list|<
name|InputSource
argument_list|>
name|jaxbBindings
init|=
name|context
operator|.
name|getJaxbBindingFile
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|schemaLists
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|SCHEMA_MAP
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|schemaLists
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Element
name|ele
init|=
name|schemaLists
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ele
operator|=
name|removeImportElement
argument_list|(
name|ele
argument_list|)
expr_stmt|;
name|String
name|tns
init|=
name|ele
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespace"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tns
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_VALIDATE_WSDL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|validateSchema
argument_list|(
name|ele
argument_list|)
expr_stmt|;
block|}
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|key
argument_list|,
name|ele
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InputSource
name|binding
range|:
name|jaxbBindings
control|)
block|{
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|ns
range|:
name|context
operator|.
name|getNamespacePackageMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|File
name|file
init|=
name|JAXBUtils
operator|.
name|getPackageMappingSchemaBindingFile
argument_list|(
name|ns
argument_list|,
name|context
operator|.
name|mapPackageName
argument_list|(
name|ns
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|InputSource
name|ins
init|=
operator|new
name|InputSource
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|ins
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|delete
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|getPackageName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaCompiler
operator|.
name|setDefaultPackageName
argument_list|(
name|context
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Options
name|opts
init|=
literal|null
decl_stmt|;
name|opts
operator|=
name|getOptions
argument_list|(
name|schemaCompiler
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|//hard code to enabale jaxb extensions
name|args
operator|.
name|add
argument_list|(
literal|"-extension"
argument_list|)
expr_stmt|;
name|URL
name|bindingFileUrl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"W3CEPRJaxbBinding.xml"
argument_list|)
decl_stmt|;
name|InputSource
name|ins
init|=
operator|new
name|InputSource
argument_list|(
name|bindingFileUrl
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|schemaCompiler
operator|.
name|parseSchema
argument_list|(
name|ins
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_XJC_ARGS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|xjcArgs
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_XJC_ARGS
argument_list|)
decl_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|xjcArgs
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|arg
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"xjc arg:"
operator|+
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|)
operator|==
literal|null
operator|||
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_XJC_ARGS
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// keep parseArguments happy, supply dummy required command-line
comment|// opts
name|opts
operator|.
name|addGrammar
argument_list|(
operator|new
name|InputSource
argument_list|(
literal|"null"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|parseArguments
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadCommandLineException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"XJC reported 'BadCommandLineException' for -xjc argument:"
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|msg
operator|=
name|msg
operator|+
name|arg
operator|+
literal|" "
expr_stmt|;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|!=
literal|null
condition|)
block|{
name|String
name|pluginUsage
init|=
name|getPluginUsageString
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|msg
operator|=
name|msg
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
literal|"-X"
argument_list|)
condition|)
block|{
name|msg
operator|=
name|pluginUsage
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|+=
name|pluginUsage
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|rawJaxbModelGenCode
operator|=
name|schemaCompiler
operator|.
name|bind
argument_list|()
expr_stmt|;
name|addedEnumClassToCollector
argument_list|(
name|schemaLists
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_DEFAULT_VALUES
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|cname
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_DEFAULT_VALUES
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|cname
argument_list|)
condition|)
block|{
name|defaultValues
operator|=
operator|new
name|RandomValueProvider
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cname
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'='
condition|)
block|{
name|cname
operator|=
name|cname
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|defaultValues
operator|=
operator|(
name|DefaultValueProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|cname
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|String
name|getPluginUsageString
parameter_list|(
name|Options
name|opts
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\navaliable plugin options:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Plugin
name|pl
range|:
name|opts
operator|.
name|getAllPlugins
argument_list|()
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|pl
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// TODO  this can be repaced with schemaCompiler.getOptions() once we
comment|// move to a version => 2.0.3 for jaxb-xjc
specifier|private
name|Options
name|getOptions
parameter_list|(
name|SchemaCompilerImpl
name|schemaCompiler
parameter_list|)
throws|throws
name|ToolException
block|{
try|try
block|{
name|Field
name|delegateField
init|=
name|schemaCompiler
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"opts"
argument_list|)
decl_stmt|;
name|delegateField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Options
operator|)
name|delegateField
operator|.
name|get
argument_list|(
name|schemaCompiler
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to access 'opts' field of XJC SchemaCompilerImpl, reason:"
operator|+
name|e
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// JAXB bug. JAXB ClassNameCollector may not be invoked when generated
comment|// class is an enum. We need to use this method to add the missed file
comment|// to classCollector.
specifier|private
name|void
name|addedEnumClassToCollector
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|schemaList
parameter_list|,
name|ClassNameAllocatorImpl
name|allocator
parameter_list|)
block|{
for|for
control|(
name|Element
name|schemaElement
range|:
name|schemaList
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|targetNamespace
init|=
name|schemaElement
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespace"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|targetNamespace
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|packageName
init|=
name|context
operator|.
name|mapPackageName
argument_list|(
name|targetNamespace
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|addedToClassCollector
argument_list|(
name|packageName
argument_list|)
condition|)
block|{
name|allocator
operator|.
name|assignClassName
argument_list|(
name|packageName
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|addedToClassCollector
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
name|ClassCollector
name|classCollector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|classCollector
operator|.
name|getGeneratedFileInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|int
name|dotIndex
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|sub
init|=
name|file
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|equals
argument_list|(
name|packageName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isSuppressCodeGen
parameter_list|()
block|{
return|return
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_SUPPRESS_GEN
argument_list|)
return|;
block|}
specifier|public
name|void
name|generate
parameter_list|(
name|ToolContext
name|c
parameter_list|)
throws|throws
name|ToolException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|initialize
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rawJaxbModelGenCode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|String
name|dir
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
decl_stmt|;
name|TypesCodeWriter
name|fileCodeWriter
init|=
operator|new
name|TypesCodeWriter
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
name|context
operator|.
name|getExcludePkgList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawJaxbModelGenCode
operator|instanceof
name|S2JJAXBModel
condition|)
block|{
name|S2JJAXBModel
name|schem2JavaJaxbModel
init|=
operator|(
name|S2JJAXBModel
operator|)
name|rawJaxbModelGenCode
decl_stmt|;
name|ClassCollector
name|classCollector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|JClass
name|cls
range|:
name|schem2JavaJaxbModel
operator|.
name|getAllObjectFactories
argument_list|()
control|)
block|{
name|classCollector
operator|.
name|getTypesPackages
argument_list|()
operator|.
name|add
argument_list|(
name|cls
operator|.
name|_package
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JCodeModel
name|jcodeModel
init|=
name|schem2JavaJaxbModel
operator|.
name|generateCode
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSuppressCodeGen
argument_list|()
condition|)
block|{
name|jcodeModel
operator|.
name|build
argument_list|(
name|fileCodeWriter
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|put
argument_list|(
name|JCodeModel
operator|.
name|class
argument_list|,
name|jcodeModel
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|str
range|:
name|fileCodeWriter
operator|.
name|getExcludeFileList
argument_list|()
control|)
block|{
name|context
operator|.
name|getExcludeFileList
argument_list|()
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"FAIL_TO_GENERATE_TYPES"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getType
parameter_list|(
name|QName
name|qname
parameter_list|,
name|boolean
name|element
parameter_list|)
block|{
name|TypeAndAnnotation
name|typeAnno
init|=
name|rawJaxbModelGenCode
operator|.
name|getJavaType
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
condition|)
block|{
name|Mapping
name|mapping
init|=
name|rawJaxbModelGenCode
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|typeAnno
operator|=
name|mapping
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|typeAnno
operator|!=
literal|null
operator|&&
name|typeAnno
operator|.
name|getTypeClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|typeAnno
operator|.
name|getTypeClass
argument_list|()
operator|.
name|fullName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getWrappedElementType
parameter_list|(
name|QName
name|wrapperElement
parameter_list|,
name|QName
name|item
parameter_list|)
block|{
name|Mapping
name|mapping
init|=
name|rawJaxbModelGenCode
operator|.
name|get
argument_list|(
name|wrapperElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|Property
argument_list|>
name|propList
init|=
name|mapping
operator|.
name|getWrapperStyleDrilldown
argument_list|()
decl_stmt|;
if|if
condition|(
name|propList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Property
name|pro
range|:
name|propList
control|)
block|{
if|if
condition|(
name|pro
operator|.
name|elementName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|pro
operator|.
name|elementName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|pro
operator|.
name|type
argument_list|()
operator|.
name|fullName
argument_list|()
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Element
name|removeImportElement
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|elemList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|ToolConstants
operator|.
name|SCHEMA_URI
argument_list|,
literal|"import"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elemList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|element
return|;
block|}
name|element
operator|=
operator|(
name|Element
operator|)
name|cloneNode
argument_list|(
name|element
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|element
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|elemList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|element
argument_list|,
name|ToolConstants
operator|.
name|SCHEMA_URI
argument_list|,
literal|"import"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|ns
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|elem
range|:
name|elemList
control|)
block|{
name|Node
name|importNode
init|=
name|elem
decl_stmt|;
name|ns
operator|.
name|add
argument_list|(
name|importNode
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Node
name|item
range|:
name|ns
control|)
block|{
name|Node
name|schemaNode
init|=
name|item
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
name|schemaNode
operator|.
name|removeChild
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|element
return|;
block|}
specifier|public
name|Node
name|cloneNode
parameter_list|(
name|Document
name|document
parameter_list|,
name|Node
name|node
parameter_list|,
name|boolean
name|deep
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|document
operator|==
literal|null
operator|||
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|type
init|=
name|node
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|==
name|document
condition|)
block|{
return|return
name|node
operator|.
name|cloneNode
argument_list|(
name|deep
argument_list|)
return|;
block|}
name|Node
name|clone
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createCDATASection
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createComment
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ENTITY_REFERENCE_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createEntityReference
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createElement
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|Element
operator|)
name|clone
operator|)
operator|.
name|setAttribute
argument_list|(
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|clone
operator|=
name|document
operator|.
name|createTextNode
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
if|if
condition|(
name|deep
operator|&&
name|type
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Node
name|child
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|clone
operator|.
name|appendChild
argument_list|(
name|cloneNode
argument_list|(
name|document
argument_list|,
name|child
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|clone
return|;
block|}
specifier|public
name|void
name|validateSchema
parameter_list|(
name|Element
name|ele
parameter_list|)
throws|throws
name|ToolException
block|{
name|SchemaFactory
name|schemaFact
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|DOMSource
name|domSrc
init|=
operator|new
name|DOMSource
argument_list|(
name|ele
argument_list|)
decl_stmt|;
try|try
block|{
name|schemaFact
operator|.
name|newSchema
argument_list|(
name|domSrc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"src-resolve.4.2"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
comment|//Ignore schema resolve error and do nothing
block|}
else|else
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
literal|"Schema Error : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|DefaultValueWriter
name|createDefaultValueWriter
parameter_list|(
name|QName
name|qname
parameter_list|,
name|boolean
name|element
parameter_list|)
block|{
if|if
condition|(
name|defaultValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TypeAndAnnotation
name|typeAnno
init|=
name|rawJaxbModelGenCode
operator|.
name|getJavaType
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
condition|)
block|{
name|Mapping
name|mapping
init|=
name|rawJaxbModelGenCode
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|typeAnno
operator|=
name|mapping
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|typeAnno
operator|!=
literal|null
condition|)
block|{
specifier|final
name|JType
name|type
init|=
name|typeAnno
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
return|return
operator|new
name|JAXBDefaultValueWriter
argument_list|(
name|type
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|DefaultValueWriter
name|createDefaultValueWriterForWrappedElement
parameter_list|(
name|QName
name|wrapperElement
parameter_list|,
name|QName
name|item
parameter_list|)
block|{
if|if
condition|(
name|defaultValues
operator|!=
literal|null
condition|)
block|{
name|Mapping
name|mapping
init|=
name|rawJaxbModelGenCode
operator|.
name|get
argument_list|(
name|wrapperElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|Property
argument_list|>
name|propList
init|=
name|mapping
operator|.
name|getWrapperStyleDrilldown
argument_list|()
decl_stmt|;
for|for
control|(
name|Property
name|pro
range|:
name|propList
control|)
block|{
if|if
condition|(
name|pro
operator|.
name|elementName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|pro
operator|.
name|elementName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|JAXBDefaultValueWriter
argument_list|(
name|pro
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
class|class
name|JAXBDefaultValueWriter
implements|implements
name|DefaultValueWriter
block|{
specifier|final
name|JType
name|type
decl_stmt|;
name|JAXBDefaultValueWriter
parameter_list|(
name|JType
name|tp
parameter_list|)
block|{
name|type
operator|=
name|tp
expr_stmt|;
block|}
specifier|public
name|void
name|writeDefaultValue
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|indent
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|varName
parameter_list|)
throws|throws
name|IOException
block|{
name|path
operator|=
name|path
operator|+
literal|"/"
operator|+
name|varName
expr_stmt|;
name|writeDefaultValue
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
argument_list|,
name|varName
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeDefaultValue
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|indent
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|varName
parameter_list|,
name|JType
name|tp
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
if|if
condition|(
name|tp
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"new "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" {};"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DEFAULT_TYPE_MAP
operator|.
name|contains
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
condition|)
block|{
name|writeDefaultType
argument_list|(
name|writer
argument_list|,
name|tp
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tp
operator|instanceof
name|JDefinedClass
condition|)
block|{
name|JDefinedClass
name|jdc
init|=
operator|(
name|JDefinedClass
operator|)
name|tp
decl_stmt|;
if|if
condition|(
name|jdc
operator|.
name|getClassType
argument_list|()
operator|==
name|ClassType
operator|.
name|ENUM
condition|)
block|{
comment|//no way to get the field list as it's private with
comment|//no accessors :-(
try|try
block|{
name|Field
name|f
init|=
name|jdc
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"enumConstantsByName"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|f
operator|.
name|get
argument_list|(
name|jdc
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|first
init|=
name|defaultValues
operator|.
name|chooseEnumValue
argument_list|(
name|path
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IOException
name|ex
init|=
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"new "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"();"
argument_list|)
expr_stmt|;
name|fillInFields
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
argument_list|,
name|varName
argument_list|,
name|jdc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|JType
name|tp2
init|=
name|tp
operator|.
name|erasure
argument_list|()
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|tp2
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"_class"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
operator|(
name|Class
operator|)
name|f
operator|.
name|get
argument_list|(
name|tp2
argument_list|)
decl_stmt|;
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"new "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tp
operator|.
name|fullName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"java.util.List"
argument_list|,
literal|"java.util.ArrayList"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"();"
argument_list|)
expr_stmt|;
name|f
operator|=
name|tp
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"args"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JClass
argument_list|>
name|lcl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
operator|)
name|f
operator|.
name|get
argument_list|(
name|tp
argument_list|)
argument_list|)
decl_stmt|;
name|JClass
name|cl
init|=
name|lcl
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
name|defaultValues
operator|.
name|getListLength
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|varName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|cnt
condition|;
name|x
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writeDefaultValue
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
operator|+
literal|"/"
operator|+
name|varName
operator|+
literal|"Val"
argument_list|,
name|varName
operator|+
literal|"Val"
operator|+
name|cnt
argument_list|,
name|cl
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|".add("
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
operator|+
literal|"Val"
operator|+
name|cnt
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
comment|//System.err.println("No idea what to do with " + tp.fullName());
comment|//System.err.println("        class " + tp.getClass().getName());
name|writer
operator|.
name|write
argument_list|(
literal|"null;"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|fillInFields
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|indent
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|varName
parameter_list|,
name|JDefinedClass
name|tp
parameter_list|)
throws|throws
name|IOException
block|{
name|JClass
name|sp
init|=
name|tp
operator|.
name|_extends
argument_list|()
decl_stmt|;
if|if
condition|(
name|sp
operator|instanceof
name|JDefinedClass
condition|)
block|{
name|fillInFields
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
argument_list|,
name|varName
argument_list|,
operator|(
name|JDefinedClass
operator|)
name|sp
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|JMethod
argument_list|>
name|methods
init|=
name|tp
operator|.
name|methods
argument_list|()
decl_stmt|;
for|for
control|(
name|JMethod
name|m
range|:
name|methods
control|)
block|{
if|if
condition|(
name|m
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEFAULT_TYPE_MAP
operator|.
name|contains
argument_list|(
name|m
operator|.
name|listParamTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|fullName
argument_list|()
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|m
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|writeDefaultType
argument_list|(
name|writer
argument_list|,
name|m
operator|.
name|listParamTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|path
operator|+
literal|"/"
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeDefaultValue
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
operator|+
literal|"/"
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
name|varName
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
name|m
operator|.
name|listParamTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|m
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|type
argument_list|()
operator|.
name|fullName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"java.util.List"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writeDefaultValue
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|,
name|path
operator|+
literal|"/"
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
name|varName
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
name|m
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|m
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"().addAll("
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|varName
operator|+
name|m
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeDefaultType
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|JType
name|t
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|t
operator|.
name|fullName
argument_list|()
decl_stmt|;
name|writeDefaultType
argument_list|(
name|writer
argument_list|,
name|name
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeDefaultType
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|JLDEFAULT_TYPE_MAP
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|"java.lang."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".valueOf("
argument_list|)
expr_stmt|;
name|writeDefaultType
argument_list|(
name|writer
argument_list|,
name|JLDEFAULT_TYPE_MAP
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getBooleanValue
argument_list|(
name|path
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getIntValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getLongValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"l"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"short"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"(short)"
argument_list|)
operator|.
name|append
argument_list|(
name|Short
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getShortValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"byte"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"(byte)"
argument_list|)
operator|.
name|append
argument_list|(
name|Byte
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getByteValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getFloatValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getDoubleValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"char"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"(char)"
argument_list|)
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|defaultValues
operator|.
name|getCharValue
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getStringValue
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"javax.xml.namespace.QName"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|QName
name|qn
init|=
name|defaultValues
operator|.
name|getQNameValue
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"new javax.xml.namespace.QName(\""
argument_list|)
operator|.
name|append
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\", \""
argument_list|)
operator|.
name|append
argument_list|(
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.net.URI"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"new java.net.URI(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getURIValue
argument_list|(
name|path
argument_list|)
operator|.
name|toASCIIString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.math.BigInteger"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"new java.math.BigInteger(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getBigIntegerValue
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.math.BigDecimal"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"new java.math.BigDecimal(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getBigDecimalValue
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"javax.xml.datatype.XMLGregorianCalendar"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getXMLGregorianCalendarValueString
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"javax.xml.datatype.Duration"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"javax.xml.datatype.DatatypeFactory.newInstance().newDuration(\""
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValues
operator|.
name|getDurationValueString
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

