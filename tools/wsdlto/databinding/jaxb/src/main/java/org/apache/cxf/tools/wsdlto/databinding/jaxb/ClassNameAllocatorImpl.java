begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|databinding
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|api
operator|.
name|ClassNameAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|ClassCollector
import|;
end_import

begin_class
specifier|public
class|class
name|ClassNameAllocatorImpl
implements|implements
name|ClassNameAllocator
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_SUFFIX
init|=
literal|"_Type"
decl_stmt|;
specifier|private
name|ClassCollector
name|collector
decl_stmt|;
specifier|private
name|boolean
name|autoResolveConflicts
decl_stmt|;
specifier|public
name|ClassNameAllocatorImpl
parameter_list|(
name|ClassCollector
name|classCollector
parameter_list|,
name|boolean
name|autoResolve
parameter_list|)
block|{
name|collector
operator|=
name|classCollector
expr_stmt|;
name|autoResolveConflicts
operator|=
name|autoResolve
expr_stmt|;
block|}
specifier|private
name|boolean
name|isNameCollision
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|className
parameter_list|)
block|{
return|return
name|collector
operator|.
name|containSeiClass
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|)
return|;
block|}
specifier|public
name|String
name|assignClassName
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|String
name|fullClzName
init|=
name|className
decl_stmt|;
if|if
condition|(
name|isNameCollision
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|)
condition|)
block|{
name|fullClzName
operator|=
name|className
operator|+
name|TYPE_SUFFIX
expr_stmt|;
block|}
name|String
name|fullPckClass
init|=
name|packageName
operator|+
literal|"."
operator|+
name|fullClzName
decl_stmt|;
if|if
condition|(
name|autoResolveConflicts
condition|)
block|{
name|String
name|t2
init|=
name|collector
operator|.
name|getTypesFullClassName
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|t2
argument_list|)
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
name|t2
operator|=
name|collector
operator|.
name|getTypesFullClassName
argument_list|(
name|packageName
argument_list|,
name|className
operator|+
name|cnt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cnt
operator|!=
literal|1
condition|)
block|{
name|className
operator|=
name|className
operator|+
name|cnt
expr_stmt|;
name|fullClzName
operator|=
name|fullClzName
operator|+
name|cnt
expr_stmt|;
name|fullPckClass
operator|=
name|packageName
operator|+
literal|"."
operator|+
name|fullClzName
expr_stmt|;
block|}
block|}
name|collector
operator|.
name|addTypesClassName
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|,
name|fullPckClass
argument_list|)
expr_stmt|;
return|return
name|fullClzName
return|;
block|}
block|}
end_class

end_unit

