begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|databinding
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|CodeWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|OutputStreamCreator
import|;
end_import

begin_class
specifier|public
class|class
name|TypesCodeWriter
extends|extends
name|CodeWriter
block|{
comment|/** The target directory to put source code. */
specifier|private
name|File
name|target
decl_stmt|;
specifier|private
name|OutputStreamCreator
name|osc
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|excludeFileList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|excludePkgList
decl_stmt|;
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|generatedFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TypesCodeWriter
parameter_list|(
name|File
name|ftarget
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|excludePkgs
parameter_list|,
name|String
name|e
parameter_list|,
name|OutputStreamCreator
name|outputStreamCreator
parameter_list|)
throws|throws
name|IOException
block|{
name|target
operator|=
name|ftarget
expr_stmt|;
name|excludePkgList
operator|=
name|excludePkgs
expr_stmt|;
name|setEncoding
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|osc
operator|=
name|outputStreamCreator
operator|==
literal|null
condition|?
operator|new
name|OutputStreamCreator
argument_list|()
else|:
name|outputStreamCreator
expr_stmt|;
block|}
specifier|private
name|void
name|setEncoding
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|//requires XJC 2.2.5 or newer
name|Field
name|f
init|=
name|CodeWriter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"encoding"
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore - should be caught in JAXBDataBinding.checkEncoding already
block|}
block|}
block|}
specifier|public
name|OutputStream
name|openBinary
parameter_list|(
name|JPackage
name|pkg
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|getFile
argument_list|(
name|pkg
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|generatedFiles
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|osc
operator|.
name|createOutputStream
argument_list|(
name|getFile
argument_list|(
name|pkg
argument_list|,
name|fileName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|File
argument_list|>
name|getGeneratedFiles
parameter_list|()
block|{
return|return
name|generatedFiles
return|;
block|}
specifier|protected
name|File
name|getFile
parameter_list|(
name|JPackage
name|pkg
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
name|pkg
operator|.
name|name
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
name|pkg
operator|.
name|isUnnamed
argument_list|()
condition|?
name|target
else|:
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|File
name|fn
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludePkgList
operator|.
name|contains
argument_list|(
name|pkg
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|excludeFileList
operator|.
name|add
argument_list|(
name|dirName
operator|+
name|File
operator|.
name|separator
operator|+
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fn
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|fn
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|fn
operator|+
literal|": Can't delete previous version"
argument_list|)
throw|;
block|}
return|return
name|fn
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{      }
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExcludeFileList
parameter_list|()
block|{
return|return
name|excludeFileList
return|;
block|}
block|}
end_class

end_unit

