begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_class
specifier|public
class|class
name|RandomValueProvider
implements|implements
name|DefaultValueProvider
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|getBooleanValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
specifier|public
name|byte
name|getByteValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|()
return|;
block|}
specifier|public
name|char
name|getCharValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|char
operator|)
name|random
operator|.
name|nextInt
argument_list|()
return|;
block|}
specifier|public
name|double
name|getDoubleValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextDouble
argument_list|()
return|;
block|}
specifier|public
name|float
name|getFloatValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextFloat
argument_list|()
return|;
block|}
specifier|public
name|int
name|getIntValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|()
return|;
block|}
specifier|public
name|long
name|getLongValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextLong
argument_list|()
return|;
block|}
specifier|public
name|short
name|getShortValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|random
operator|.
name|nextInt
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStringValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
name|getIntValue
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getQNameValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|QName
argument_list|(
literal|"http://"
operator|+
name|getStringValue
argument_list|(
name|path
argument_list|)
operator|+
literal|".com"
argument_list|,
name|getStringValue
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|URI
name|getURIValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
literal|"http://"
operator|+
name|getStringValue
argument_list|(
name|path
argument_list|)
operator|+
literal|".com/"
operator|+
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimalValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|s
init|=
name|Long
operator|.
name|toString
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|+=
literal|"."
expr_stmt|;
name|s
operator|+=
name|Long
operator|.
name|toString
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|BigDecimal
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
name|BigInteger
name|getBigIntegerValue
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|s
init|=
name|Long
operator|.
name|toString
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|+=
name|Long
operator|.
name|toString
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|BigInteger
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
name|String
name|getXMLGregorianCalendarValueString
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
operator|.
name|toXMLFormat
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getDurationValueString
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDuration
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|"P1Y35DT60M60.500S"
return|;
block|}
specifier|public
name|String
name|chooseEnumValue
parameter_list|(
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|int
name|i
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|values
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
name|s
return|;
block|}
operator|--
name|i
expr_stmt|;
block|}
return|return
name|values
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|int
name|getListLength
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|int
name|cnt
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
operator|.
name|length
decl_stmt|;
return|return
name|cnt
operator|>
literal|5
condition|?
literal|0
else|:
literal|1
return|;
block|}
block|}
end_class

end_unit

