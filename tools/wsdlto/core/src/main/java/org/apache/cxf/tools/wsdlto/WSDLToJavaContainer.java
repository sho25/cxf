begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PropertiesLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|AbstractCXFToolContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ClassNameProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ClassUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|FrontEndGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|ToolSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
operator|.
name|BadUsageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
operator|.
name|CommandDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|parser
operator|.
name|ErrorVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|ClassCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|URIParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|ServiceValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|AbstractWSDLBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|DataBindingProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|FrontEndProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLToJavaContainer
extends|extends
name|AbstractCXFToolContainer
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDLToJavaContainer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_NS2PACKAGE
init|=
literal|"http://www.w3.org/2005/08/addressing"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_VALIDATOR
init|=
literal|"META-INF/tools.service.validator.xml"
decl_stmt|;
name|String
name|toolName
decl_stmt|;
specifier|public
name|WSDLToJavaContainer
parameter_list|(
name|String
name|name
parameter_list|,
name|ToolSpec
name|toolspec
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|name
argument_list|,
name|toolspec
argument_list|)
expr_stmt|;
name|this
operator|.
name|toolName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getArrayKeys
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|ToolConstants
operator|.
name|CFG_PACKAGENAME
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|ToolConstants
operator|.
name|CFG_NEXCLUDE
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
specifier|public
name|WSDLConstants
operator|.
name|WSDLVersion
name|getWSDLVersion
parameter_list|()
block|{
name|String
name|version
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDL_VERSION
argument_list|)
decl_stmt|;
return|return
name|WSDLConstants
operator|.
name|getVersion
argument_list|(
name|version
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|ToolException
block|{
if|if
condition|(
operator|!
name|hasInfoOption
argument_list|()
condition|)
block|{
comment|// TODO: After runtime support w3c EPR mapping ,this will be removed
comment|//context.put(ToolConstants.CFG_NO_ADDRESS_BINDING,
comment|//            ToolConstants.CFG_NO_ADDRESS_BINDING);
name|buildToolContext
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|FrontEndProfile
name|frontend
init|=
name|context
operator|.
name|get
argument_list|(
name|FrontEndProfile
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|frontend
operator|==
literal|null
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"FOUND_NO_FRONTEND"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|WSDLConstants
operator|.
name|WSDLVersion
name|version
init|=
name|getWSDLVersion
argument_list|()
decl_stmt|;
name|String
name|wsdlURL
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDLURL
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|serviceList
init|=
operator|(
name|List
argument_list|<
name|ServiceInfo
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|SERVICE_LIST
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceList
operator|==
literal|null
condition|)
block|{
name|serviceList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ServiceInfo
argument_list|>
argument_list|()
expr_stmt|;
comment|// Build the ServiceModel from the WSDLModel
if|if
condition|(
name|version
operator|==
name|WSDLConstants
operator|.
name|WSDLVersion
operator|.
name|WSDL11
condition|)
block|{
name|AbstractWSDLBuilder
argument_list|<
name|Definition
argument_list|>
name|builder
init|=
operator|(
name|AbstractWSDLBuilder
argument_list|<
name|Definition
argument_list|>
operator|)
name|frontend
operator|.
name|getWSDLBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|wsdlURL
operator|=
name|URIParserUtil
operator|.
name|getAbsoluteURI
argument_list|(
name|wsdlURL
argument_list|)
expr_stmt|;
name|builder
operator|.
name|build
argument_list|(
name|wsdlURL
argument_list|)
expr_stmt|;
name|builder
operator|.
name|customize
argument_list|()
expr_stmt|;
name|Definition
name|definition
init|=
name|builder
operator|.
name|getWSDLModel
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|Definition
operator|.
name|class
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|builder
operator|.
name|validate
argument_list|(
name|definition
argument_list|)
expr_stmt|;
name|WSDLServiceBuilder
name|serviceBuilder
init|=
operator|new
name|WSDLServiceBuilder
argument_list|(
name|getBus
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|serviceName
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_SERVICENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|services
init|=
name|serviceBuilder
operator|.
name|buildServices
argument_list|(
name|definition
argument_list|,
name|getServiceQName
argument_list|(
name|definition
argument_list|)
argument_list|)
decl_stmt|;
name|serviceList
operator|.
name|addAll
argument_list|(
name|services
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|definition
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serviceList
operator|=
name|serviceBuilder
operator|.
name|buildServices
argument_list|(
name|definition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceList
operator|=
name|serviceBuilder
operator|.
name|buildMockServices
argument_list|(
name|definition
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TODO: wsdl2.0 support
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|InterfaceInfo
argument_list|>
name|interfaces
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|InterfaceInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|schemas
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
operator|)
name|serviceList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_SCHEMA_ELEMENT_LIST
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemas
operator|==
literal|null
condition|)
block|{
name|schemas
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|()
expr_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
name|serviceList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|SchemaInfo
name|schemaInfo
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|schemaInfo
operator|.
name|getElement
argument_list|()
operator|!=
literal|null
operator|&&
name|schemaInfo
operator|.
name|getSystemId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|sysId
init|=
name|schemaInfo
operator|.
name|getElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespce"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sysId
operator|==
literal|null
condition|)
block|{
name|sysId
operator|=
name|serviceInfo
operator|.
name|getTargetNamespace
argument_list|()
expr_stmt|;
block|}
name|schemas
operator|.
name|put
argument_list|(
name|sysId
argument_list|,
name|schemaInfo
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaInfo
operator|.
name|getElement
argument_list|()
operator|!=
literal|null
operator|&&
name|schemaInfo
operator|.
name|getSystemId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemas
operator|.
name|put
argument_list|(
name|schemaInfo
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|schemaInfo
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|isPackageNameChanged
argument_list|()
operator|&&
name|schemas
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"-p option cannot be used "
operator|+
literal|"when wsdl contains mutiple schemas"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
name|context
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|SCHEMA_MAP
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|PORTTYPE_MAP
argument_list|,
name|interfaces
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|,
operator|new
name|ClassCollector
argument_list|()
argument_list|)
expr_stmt|;
name|Processor
name|processor
init|=
name|frontend
operator|.
name|getProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
name|processor
operator|instanceof
name|ClassNameProcessor
condition|)
block|{
name|processor
operator|.
name|setEnvironment
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|ServiceInfo
name|service
range|:
name|serviceList
control|)
block|{
name|context
operator|.
name|put
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|,
name|service
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ClassNameProcessor
operator|)
name|processor
operator|)
operator|.
name|processClassNames
argument_list|()
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|generateTypes
argument_list|()
expr_stmt|;
for|for
control|(
name|ServiceInfo
name|service
range|:
name|serviceList
control|)
block|{
name|context
operator|.
name|put
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// Build the JavaModel from the ServiceModel
name|processor
operator|.
name|setEnvironment
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isSuppressCodeGen
argument_list|()
condition|)
block|{
comment|// Generate artifacts
for|for
control|(
name|FrontEndGenerator
name|generator
range|:
name|frontend
operator|.
name|getGenerators
argument_list|()
control|)
block|{
name|generator
operator|.
name|generate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Build projects: compile classes and copy resources etc.
if|if
condition|(
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_COMPILE
argument_list|)
condition|)
block|{
operator|new
name|ClassUtils
argument_list|()
operator|.
name|compile
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isExcludeNamespaceEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|removeExcludeFiles
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isSuppressCodeGen
parameter_list|()
block|{
return|return
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_SUPPRESS_GEN
argument_list|)
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|boolean
name|exitOnFinish
parameter_list|)
throws|throws
name|ToolException
block|{
try|try
block|{
if|if
condition|(
name|getArgument
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|execute
argument_list|(
name|exitOnFinish
argument_list|)
expr_stmt|;
block|}
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ToolException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|BadUsageException
condition|)
block|{
name|printUsageException
argument_list|(
name|toolName
argument_list|,
operator|(
name|BadUsageException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|QName
name|getServiceQName
parameter_list|(
name|Definition
name|def
parameter_list|)
block|{
name|List
argument_list|<
name|Definition
argument_list|>
name|defs
init|=
operator|new
name|ArrayList
argument_list|<
name|Definition
argument_list|>
argument_list|()
decl_stmt|;
name|defs
operator|.
name|add
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|Iterator
name|ite1
init|=
name|def
operator|.
name|getImports
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ite1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
name|defList
init|=
operator|(
name|List
operator|)
name|ite1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
name|ite2
init|=
name|defList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ite2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|javax
operator|.
name|wsdl
operator|.
name|Import
name|importDef
init|=
operator|(
name|javax
operator|.
name|wsdl
operator|.
name|Import
operator|)
name|ite2
operator|.
name|next
argument_list|()
decl_stmt|;
name|defs
operator|.
name|add
argument_list|(
name|importDef
operator|.
name|getDefinition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|serviceName
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_SERVICENAME
argument_list|)
decl_stmt|;
name|QName
name|qname
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Definition
name|definition
range|:
name|defs
control|)
block|{
if|if
condition|(
name|serviceName
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|QName
argument_list|>
name|ite
init|=
name|definition
operator|.
name|getServices
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ite
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QName
name|qn
init|=
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|qn
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|serviceName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|qn
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|qname
operator|==
literal|null
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"SERVICE_NOT_FOUND"
argument_list|,
name|LOG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|serviceName
block|}
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|qname
return|;
block|}
specifier|public
name|void
name|loadDefaultNSPackageMapping
parameter_list|(
name|ToolContext
name|env
parameter_list|)
block|{
if|if
condition|(
operator|!
name|env
operator|.
name|hasExcludeNamespace
argument_list|(
name|DEFAULT_NS2PACKAGE
argument_list|)
operator|&&
name|env
operator|.
name|getBooleanValue
argument_list|(
name|ToolConstants
operator|.
name|CFG_DEFAULT_NS
argument_list|,
literal|"true"
argument_list|)
operator|&&
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// currently namespace2pacakge.cfg only contains wsadressing mapping
name|env
operator|.
name|loadDefaultNS2Pck
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"namespace2package.cfg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|getBooleanValue
argument_list|(
name|ToolConstants
operator|.
name|CFG_DEFAULT_EX
argument_list|,
literal|"true"
argument_list|)
condition|)
block|{
name|env
operator|.
name|loadDefaultExcludes
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"wsdltojavaexclude.cfg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setExcludePackageAndNamespaces
parameter_list|(
name|ToolContext
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_NEXCLUDE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|pns
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pns
operator|=
operator|(
name|String
index|[]
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_NEXCLUDE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|pns
operator|=
operator|new
name|String
index|[
literal|1
index|]
expr_stmt|;
name|pns
index|[
literal|0
index|]
operator|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_NEXCLUDE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|pns
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|pos
init|=
name|pns
index|[
name|j
index|]
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|String
name|excludePackagename
init|=
name|pns
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|ns
init|=
name|pns
index|[
name|j
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|.
name|equals
argument_list|(
name|ToolConstants
operator|.
name|WSA_NAMESPACE_URI
argument_list|)
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|,
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|)
expr_stmt|;
block|}
name|excludePackagename
operator|=
name|pns
index|[
name|j
index|]
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|env
operator|.
name|addExcludeNamespacePackageMap
argument_list|(
name|ns
argument_list|,
name|excludePackagename
argument_list|)
expr_stmt|;
name|env
operator|.
name|addNamespacePackageMap
argument_list|(
name|ns
argument_list|,
name|excludePackagename
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|env
operator|.
name|addExcludeNamespacePackageMap
argument_list|(
name|pns
index|[
name|j
index|]
argument_list|,
name|env
operator|.
name|mapPackageName
argument_list|(
name|pns
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|setPackageAndNamespaces
parameter_list|(
name|ToolContext
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_PACKAGENAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|pns
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pns
operator|=
operator|(
name|String
index|[]
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_PACKAGENAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|pns
operator|=
operator|new
name|String
index|[
literal|1
index|]
expr_stmt|;
name|pns
index|[
literal|0
index|]
operator|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_PACKAGENAME
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|pns
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|pos
init|=
name|pns
index|[
name|j
index|]
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|String
name|packagename
init|=
name|pns
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|ns
init|=
name|pns
index|[
name|j
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|.
name|equals
argument_list|(
name|ToolConstants
operator|.
name|WSA_NAMESPACE_URI
argument_list|)
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|,
name|ToolConstants
operator|.
name|CFG_NO_ADDRESS_BINDING
argument_list|)
expr_stmt|;
block|}
name|packagename
operator|=
name|pns
index|[
name|j
index|]
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|env
operator|.
name|addNamespacePackageMap
argument_list|(
name|ns
argument_list|,
name|packagename
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|env
operator|.
name|setPackageName
argument_list|(
name|packagename
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|ToolContext
name|env
parameter_list|)
throws|throws
name|ToolException
block|{
name|String
name|outdir
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|outdir
operator|!=
literal|null
condition|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|outdir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"DIRECTORY_NOT_EXIST"
argument_list|,
name|LOG
argument_list|,
name|outdir
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"NOT_A_DIRECTORY"
argument_list|,
name|LOG
argument_list|,
name|outdir
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_COMPILE
argument_list|)
condition|)
block|{
name|String
name|clsdir
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_CLASSDIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|clsdir
operator|!=
literal|null
condition|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|clsdir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"DIRECTORY_NOT_EXIST"
argument_list|,
name|LOG
argument_list|,
name|clsdir
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
name|String
name|wsdl
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDLURL
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|wsdl
argument_list|)
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"NO_WSDL_URL"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDLURL
argument_list|,
name|URIParserUtil
operator|.
name|normalize
argument_list|(
name|wsdl
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|env
operator|.
name|containsKey
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDLLOCATION
argument_list|)
condition|)
block|{
comment|//make sure the "raw" form is used for the wsdlLocation
comment|//instead of the absolute URI that normalize may return
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|wsdl
argument_list|)
decl_stmt|;
name|wsdl
operator|=
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|//not a URL, assume file
if|if
condition|(
name|wsdl
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|wsdl
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|wsdl
operator|=
literal|"file:/"
operator|+
name|wsdl
expr_stmt|;
block|}
else|else
block|{
name|wsdl
operator|=
literal|"file:"
operator|+
name|wsdl
expr_stmt|;
block|}
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|wsdl
argument_list|)
decl_stmt|;
name|wsdl
operator|=
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e1
parameter_list|)
block|{
comment|//ignore...
block|}
block|}
name|wsdl
operator|=
name|wsdl
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDLLOCATION
argument_list|,
name|wsdl
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|bindingFiles
decl_stmt|;
try|try
block|{
name|bindingFiles
operator|=
operator|(
name|String
index|[]
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_BINDING
argument_list|)
expr_stmt|;
if|if
condition|(
name|bindingFiles
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|bindingFiles
operator|=
operator|new
name|String
index|[
literal|1
index|]
expr_stmt|;
name|bindingFiles
index|[
literal|0
index|]
operator|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_BINDING
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bindingFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bindingFiles
index|[
name|i
index|]
operator|=
name|URIParserUtil
operator|.
name|getAbsoluteURI
argument_list|(
name|bindingFiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_BINDING
argument_list|,
name|bindingFiles
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAntProperties
parameter_list|(
name|ToolContext
name|env
parameter_list|)
block|{
name|String
name|installDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"install.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|installDir
operator|!=
literal|null
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_INSTALL_DIR
argument_list|,
name|installDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_INSTALL_DIR
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setLibraryReferences
parameter_list|(
name|ToolContext
name|env
parameter_list|)
block|{
name|Properties
name|props
init|=
name|loadProperties
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"wsdltojavalib.properties"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|keys
init|=
name|props
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|keys
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_ANT_PROP
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|buildToolContext
parameter_list|()
block|{
name|context
operator|=
name|getContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|addParameters
argument_list|(
name|getParametersMap
argument_list|(
name|getArrayKeys
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|containsKey
argument_list|(
name|ToolConstants
operator|.
name|CFG_ANT
argument_list|)
condition|)
block|{
name|setAntProperties
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|setLibraryReferences
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|containsKey
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDL_VERSION
argument_list|)
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDL_VERSION
argument_list|,
name|WSDLConstants
operator|.
name|WSDL11
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_SUPPRESS_WARNINGS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|loadDefaultNSPackageMapping
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|setPackageAndNamespaces
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|setExcludePackageAndNamespaces
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|InputStream
name|getResourceAsStream
parameter_list|(
name|String
name|file
parameter_list|)
block|{
return|return
name|WSDLToJavaContainer
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
return|;
block|}
specifier|public
name|void
name|checkParams
parameter_list|(
name|ErrorVisitor
name|errors
parameter_list|)
throws|throws
name|ToolException
block|{
name|CommandDocument
name|doc
init|=
name|super
operator|.
name|getCommandDocument
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|doc
operator|.
name|hasParameter
argument_list|(
literal|"wsdlurl"
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ErrorVisitor
operator|.
name|UserError
argument_list|(
literal|"WSDL/SCHEMA URL has to be specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"PARAMETER_MISSING"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|,
operator|new
name|BadUsageException
argument_list|(
name|getUsage
argument_list|()
argument_list|,
name|errors
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removeExcludeFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|excludeGenFiles
init|=
name|context
operator|.
name|getExcludeFileList
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeGenFiles
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|outPutDir
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|excludeGenFiles
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|excludeFile
init|=
name|excludeGenFiles
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|outPutDir
argument_list|,
name|excludeFile
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|File
name|tmpFile
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
while|while
condition|(
name|tmpFile
operator|!=
literal|null
operator|&&
operator|!
name|tmpFile
operator|.
name|getCanonicalPath
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|outPutDir
argument_list|)
condition|)
block|{
if|if
condition|(
name|tmpFile
operator|.
name|isDirectory
argument_list|()
operator|&&
name|tmpFile
operator|.
name|list
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|tmpFile
operator|=
name|tmpFile
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_COMPILE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|classDir
init|=
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_CLASSDIR
argument_list|)
operator|==
literal|null
condition|?
name|outPutDir
else|:
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_CLASSDIR
argument_list|)
decl_stmt|;
name|File
name|classFile
init|=
operator|new
name|File
argument_list|(
name|classDir
argument_list|,
name|excludeFile
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|excludeFile
operator|.
name|indexOf
argument_list|(
literal|".java"
argument_list|)
argument_list|)
operator|+
literal|".class"
argument_list|)
decl_stmt|;
name|classFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|File
name|tmpClzFile
init|=
name|classFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
while|while
condition|(
name|tmpClzFile
operator|!=
literal|null
operator|&&
operator|!
name|tmpClzFile
operator|.
name|getCanonicalPath
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|outPutDir
argument_list|)
condition|)
block|{
if|if
condition|(
name|tmpClzFile
operator|.
name|isDirectory
argument_list|()
operator|&&
name|tmpClzFile
operator|.
name|list
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|tmpClzFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|tmpClzFile
operator|=
name|tmpClzFile
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|passthrough
parameter_list|()
block|{
if|if
condition|(
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_TYPES
argument_list|)
operator|||
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_ALL
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_ANT
argument_list|)
operator|||
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_CLIENT
argument_list|)
operator|||
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_IMPL
argument_list|)
operator|||
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_SEI
argument_list|)
operator|||
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_SERVER
argument_list|)
operator|||
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_SERVICE
argument_list|)
operator|||
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_FAULT
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|generateTypes
parameter_list|()
throws|throws
name|ToolException
block|{
name|DataBindingProfile
name|dataBindingProfile
init|=
name|context
operator|.
name|get
argument_list|(
name|DataBindingProfile
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataBindingProfile
operator|==
literal|null
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"FOUND_NO_DATABINDING"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|dataBindingProfile
operator|.
name|initialize
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|passthrough
argument_list|()
condition|)
block|{
return|return;
block|}
name|dataBindingProfile
operator|.
name|generate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
specifier|final
name|ServiceInfo
name|service
parameter_list|)
throws|throws
name|ToolException
block|{
for|for
control|(
name|ServiceValidator
name|validator
range|:
name|getServiceValidators
argument_list|()
control|)
block|{
name|service
operator|.
name|setProperty
argument_list|(
name|ToolContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|validator
operator|.
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validator
operator|.
name|isValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|validator
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|ServiceValidator
argument_list|>
name|getServiceValidators
parameter_list|()
block|{
name|List
argument_list|<
name|ServiceValidator
argument_list|>
name|validators
init|=
operator|new
name|ArrayList
argument_list|<
name|ServiceValidator
argument_list|>
argument_list|()
decl_stmt|;
name|Properties
name|initialExtensions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|initialExtensions
operator|=
name|PropertiesLoaderUtils
operator|.
name|loadAllProperties
argument_list|(
name|SERVICE_VALIDATOR
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|initialExtensions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|validatorClass
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found service validator : "
operator|+
name|validatorClass
argument_list|)
expr_stmt|;
block|}
name|ServiceValidator
name|validator
init|=
operator|(
name|ServiceValidator
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|validatorClass
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|validators
operator|.
name|add
argument_list|(
name|validator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"EXTENSION_ADD_FAILED_MSG"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|validators
return|;
block|}
block|}
end_class

end_unit

